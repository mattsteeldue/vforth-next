# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.52 NextZXOS version
   7  0000              //  build 20230321
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2023
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 03 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 03 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 35 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 82 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 82 87        DP_origin       dw      Fence_Word
  39+ 6386 0B 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 169+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 170+ 63DF 3F                               ccf
 171+ 63E0              Loop_NegativeIncrement:
 172+ 63E0
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 3E 04                        ld      a, 4
 239+ 6434 ED 31                        add     hl, a
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502 D9                           exx
 423+ 6503 D1                           pop     de                      // de has dictionary pointer
 424+ 6504              Find_VocabularyLoop:
 425+ 6504 E1                               pop     hl                  // string pointer to search for
 426+ 6505 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6506 1A                               ld      a, (de)             // save NFA length byte
 428+ 6507 08                               ex      af,af'              // for later use (!)
 429+ 6508 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6509 AE                               xor     (hl)                // check if same length
 431+ 650A E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650C                                  // word and text haven't the same length, skip to next vocabulary entry
 433+ 650C 20 2B                            jr      nz, Find_DifferentLenght
 434+ 650E
 435+ 650E              Find_ThisWord:      // begin loop
 436+ 650E 23                                   inc     hl
 437+ 650F 13                                   inc     de
 438+ 6510 1A                                   ld      a, (de)
 439+ 6511                                      // case insensitive option - begin
 440+ 6511                                      // push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521                                      // pop     bc
 452+ 6521                                      // case insensitive option - end
 453+ 6521 87                                   add     a                   // ignore msb during compare
 454+ 6522 20 13                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6524
 456+ 6524                                  // loop back until last byte msb is found set
 457+ 6524                                  // that bit marks the ending char of this word
 458+ 6524 30 E8                            jr      nc, Find_ThisWord
 459+ 6526
 460+ 6526                                  // match found !
 461+ 6526 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 6529 19                               add     hl, de
 463+ 652A E3                               ex      (sp), hl            // CFA on stack and drop addr
 464+ 652B 08                               ex      af, af'             // retrieve NFA byte (!)
 465+ 652C 5F                               ld      e, a
 466+ 652D 16 00                            ld      d, 0
 467+ 652F
 468+ 652F
 469+ 652F 21 FF FF                         ld      hl, -1
 470+ 6532 D5                               push    de
 471+ 6533 E5                               push    hl
 472+ 6534 D9                               exx
 473+ 6535                                  next
 473+ 6535 DD E9       >                jp      (ix)
 474+ 6537
 475+ 6537              Find_DidntMatch: // didn't match (*)
 476+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 477+ 6539
 478+ 6539              Find_DifferentLenght:
 479+ 6539                                  // consume chars until the end of the word
 480+ 6539                                  // that is last byte msb is found set
 481+ 6539 13                                   inc     de
 482+ 653A 1A                                   ld      a, (de)
 483+ 653B 87                                   add     a, a
 484+ 653C 30 FB                            jr      nc, Find_DifferentLenght
 485+ 653E
 486+ 653E              Find_WordEnd:   // word-end  found (**)
 487+ 653E                                  // take LFA and use it
 488+ 653E 13                               inc     de
 489+ 653F EB                               ex      de, hl
 490+ 6540 5E                               ld      e, (hl)
 491+ 6541 23                               inc     hl
 492+ 6542 56                               ld      d, (hl)
 493+ 6543 7A                               ld      a, d
 494+ 6544 B3                               or      e
 495+ 6545
 496+ 6545                              // loop until end of vocabulary
 497+ 6545 20 BD                        jr      nz, Find_VocabularyLoop
 498+ 6547
 499+ 6547 E1                           pop     hl              // without this, leaves addr unchanged
 500+ 6548 21 00 00                     ld      hl, FALSE_FLAG
 501+ 654B E5                           push    hl
 502+ 654C D9                           exx
 503+ 654D                              next
 503+ 654D DD E9       >                jp      (ix)
 504+ 654F
 505+ 654F              //  ______________________________________________________________________
 506+ 654F              //
 507+ 654F              // enclose      a c -- a  n1 n2 n3
 508+ 654F              // starting from a, using delimiter c, determines the offsets:
 509+ 654F              //   n1   the first character non-delimiter
 510+ 654F              //   n2   the first delimiter after the text
 511+ 654F              //   n3   the first character non enclosed.
 512+ 654F              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 513+ 654F              // an uncoditional delimiter.
 514+ 654F              // Examples:
 515+ 654F              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 516+ 654F              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 517+ 654F              // iii:	c  c  'nul'          -- 2  3  2
 518+ 654F                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 518+ 654F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ 654F             >
 518+ 654F             >                // dummy db directives used to calculate length of namec
 518+ 654F 45 4E 43 4C >                db      "ENCLOSE"
 518+ 6553 4F 53 45    >
 518+ 6556             >len_NFA         defl    $ - temp_NFA
 518+ 6556             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ 654F             >
 518+ 654F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ 6550 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 518+ 6554 4F 53 45    >
 518+ 6557             >                org     $-1                 // alter last byte of Name just above to set
 518+ 6556 C5          >                db      {b $} | END_BIT     // msb as name end
 518+ 6557             >
 518+ 6557 F9 64       >                dw      last_NFA            // Link to previous definition Name
 518+ 6559             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 6559 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 518+ 6559 ~           >
 518+ 6559 ~           >
 518+ 6559             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 6559             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 6559             >
 518+ 6559             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 6559 D9                           exx
 520+ 655A D1                           pop     de                  //  e has the character
 521+ 655B E1                           pop     hl                  // hl has the string address
 522+ 655C E5                           push    hl
 523+ 655D 7B                           ld      a, e
 524+ 655E 11 FF FF                     ld      de, -1              // let's start from -1
 525+ 6561 2B                           dec     hl
 526+ 6562              Enclose_NonDelimiter:
 527+ 6562                              // find first non delimiter
 528+ 6562 23                               inc     hl
 529+ 6563 13                               inc     de
 530+ 6564 BE                               cp      (hl)
 531+ 6565 28 FB                        jr      z, Enclose_NonDelimiter
 532+ 6567 D5                           push    de
 533+ 6568
 534+ 6568                              // push    bc                  // save Instruction Pointer
 535+ 6568
 536+ 6568 4F                           ld      c, a                // save char
 537+ 6569 7E                           ld      a, (hl)
 538+ 656A A7                           and     a                   // stop if 0x00
 539+ 656B 20 07                        jr      nz, Enclose_NextChar
 540+ 656D
 541+ 656D                              /// case iii. no more character in string
 542+ 656D                                  // pop     bc                  // restore Instruction Pointer
 543+ 656D 13                               inc     de
 544+ 656E D5                               push    de
 545+ 656F 1B                               dec     de
 546+ 6570 D5                               push    de
 547+ 6571 D9                               exx
 548+ 6572                                  next
 548+ 6572 DD E9       >                jp      (ix)
 549+ 6574              Enclose_NextChar:
 550+ 6574 79                               ld      a, c
 551+ 6575 23                               inc     hl
 552+ 6576 13                               inc     de
 553+ 6577 BE                               cp      (hl)
 554+ 6578 20 06                            jr      nz, Enclose_NonSeparator
 555+ 657A
 556+ 657A                                      // case i. first non enclosed
 557+ 657A                                      // pop     bc                  // restore Instruction Pointer
 558+ 657A D5                                   push    de
 559+ 657B 13                                   inc     de
 560+ 657C D5                                   push    de
 561+ 657D D9                                   exx
 562+ 657E                                      next
 562+ 657E DD E9       >                jp      (ix)
 563+ 6580              Enclose_NonSeparator:
 564+ 6580 7E                               ld      a, (hl)
 565+ 6581 A7                               and     a
 566+ 6582 20 F0                        jr      nz, Enclose_NextChar
 567+ 6584
 568+ 6584                              // case ii. separator & terminator
 569+ 6584                              // pop     bc                  // restore Instruction Pointer
 570+ 6584 D5                           push    de
 571+ 6585 D5                           push    de
 572+ 6586 D9                           exx
 573+ 6587                              next
 573+ 6587 DD E9       >                jp      (ix)
 574+ 6589
 575+ 6589              //  ______________________________________________________________________
 576+ 6589              //
 577+ 6589              // (map)        a2 a1 n c1 -- c2
 578+ 6589              // translate character c1 using mapping string a2 and a2
 579+ 6589              // if c1 is not present within string a1 then
 580+ 6589              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 581+ 6589                              New_Def C_MAP, "(MAP)", is_code, is_normal
 581+ 6589             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 581+ 6589             >
 581+ 6589             >                // dummy db directives used to calculate length of namec
 581+ 6589 28 4D 41 50 >                db      "(MAP)"
 581+ 658D 29          >
 581+ 658E             >len_NFA         defl    $ - temp_NFA
 581+ 658E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 581+ 6589             >
 581+ 6589 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 581+ 658A 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 581+ 658E 29          >
 581+ 658F             >                org     $-1                 // alter last byte of Name just above to set
 581+ 658E A9          >                db      {b $} | END_BIT     // msb as name end
 581+ 658F             >
 581+ 658F 4F 65       >                dw      last_NFA            // Link to previous definition Name
 581+ 6591             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 581+ 6591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 581+ 6591 ~           >
 581+ 6591 ~           >
 581+ 6591             >                endif           ; ok        // for other definitions it "points" the correct handler
 581+ 6591             >                // Use of "; ok" to suppress "warning[fwdref]"
 581+ 6591             >
 581+ 6591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 582+ 6591 D9                           exx
 583+ 6592 E1                           pop     hl
 584+ 6593 7D                           ld      a, l
 585+ 6594 C1                           pop     bc
 586+ 6595 E1                           pop     hl
 587+ 6596 50                           ld      d, b
 588+ 6597 59                           ld      e, c
 589+ 6598 ED B1                        cpir
 590+ 659A E1                           pop     hl
 591+ 659B 20 05                        jr      nz, C_Map_Then
 591+ 659D
 592+ 659D 19                               add     hl, de
 593+ 659E 2B                               dec     hl
 594+ 659F ED 42                            sbc     hl, bc
 595+ 65A1 7E                               ld      a, (hl)
 596+ 65A2              C_Map_Then:
 597+ 65A2 6F                           ld      l, a
 598+ 65A3 26 00                        ld      h, 0
 599+ 65A5 E5                           push    hl
 600+ 65A6 D9                           exx
 601+ 65A7                              next
 601+ 65A7 DD E9       >                jp      (ix)
 602+ 65A9
 603+ 65A9              //  ______________________________________________________________________
 604+ 65A9              //
 605+ 65A9              // (compare)    a1 a2 n -- b
 606+ 65A9              // this word performs a lexicographic compare of n bytes of text at address a1
 607+ 65A9              // with n bytes of text at address a2. It returns numeric a value:
 608+ 65A9              //  0 : if strings are equal
 609+ 65A9              // +1 : if string at a1 greater than string at a2
 610+ 65A9              // -1 : if string at a1 less than string at a2
 611+ 65A9              // strings can be 256 bytes in length at most.
 612+ 65A9                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 612+ 65A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 612+ 65A9             >
 612+ 65A9             >                // dummy db directives used to calculate length of namec
 612+ 65A9 28 43 4F 4D >                db      "(COMPARE)"
 612+ 65AD 50 41 52 45 >
 612+ 65B1 29          >
 612+ 65B2             >len_NFA         defl    $ - temp_NFA
 612+ 65B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 612+ 65A9             >
 612+ 65A9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 612+ 65AA 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 612+ 65AE 50 41 52 45 >
 612+ 65B2 29          >
 612+ 65B3             >                org     $-1                 // alter last byte of Name just above to set
 612+ 65B2 A9          >                db      {b $} | END_BIT     // msb as name end
 612+ 65B3             >
 612+ 65B3 89 65       >                dw      last_NFA            // Link to previous definition Name
 612+ 65B5             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 612+ 65B5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 612+ 65B5 ~           >
 612+ 65B5 ~           >
 612+ 65B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 612+ 65B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 612+ 65B5             >
 612+ 65B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 613+ 65B5 D9                           exx
 614+ 65B6 E1                           pop     hl                  // Number of bytes
 615+ 65B7 7D                           ld      a, l
 616+ 65B8 E1                           pop     hl                  // hl points string a2
 617+ 65B9 D1                           pop     de                  // hl points string a1
 618+ 65BA              //              push    bc                  // Instruction pointer on stack
 619+ 65BA 47                           ld      b, a
 620+ 65BB              C_Compare_Loop:
 621+ 65BB 7E                               ld      a, (hl)
 622+ 65BC CD BD 64                         call    Case_Sensitive
 623+ 65BF 4F                               ld      c, a
 624+ 65C0 1A                               ld      a, (de)
 625+ 65C1 CD BD 64                         call    Case_Sensitive
 626+ 65C4 B9                               cp      c
 627+ 65C5 13                               inc     de
 628+ 65C6 23                               inc     hl
 629+ 65C7 28 0E                            jr      z, C_Compare_Equal
 630+ 65C9 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 631+ 65CB 21 01 00                                 ld      hl, 1               // a1 gt a2
 632+ 65CE 18 03                                jr      C_Compare_Then      // Else
 633+ 65D0              C_Compare_NotLessThan:
 634+ 65D0 21 FF FF                                 ld      hl, -1              // a1 lt a2
 635+ 65D3              C_Compare_Then:                                 // Endif
 636+ 65D3              //                      pop     bc              // restore Instruction Pointer
 637+ 65D3 E5                                   push    hl
 638+ 65D4 D9                                   exx
 639+ 65D5
 640+ 65D5                                      next
 640+ 65D5 DD E9       >                jp      (ix)
 641+ 65D7
 642+ 65D7              C_Compare_Equal:
 643+ 65D7 10 E2                        djnz    C_Compare_Loop
 644+ 65D9 21 00 00                     ld      hl, 0               // a1 eq a2
 645+ 65DC              //              pop     bc                  // restore Instruction Pointer
 646+ 65DC E5                           push    hl
 647+ 65DD D9                           exx
 648+ 65DE
 649+ 65DE                              next
 649+ 65DE DD E9       >                jp      (ix)
 650+ 65E0
 651+ 65E0              //  ______________________________________________________________________
 652+ 65E0              //
 653+ 65E0              // emitc        c --
 654+ 65E0              // low level emit, calls ROM routine at #10 to send a character to
 655+ 65E0              // the the current channel (see SELECT to change stream-channel)
 656+ 65E0                              New_Def EMITC, "EMITC", is_code, is_normal
 656+ 65E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 656+ 65E0             >
 656+ 65E0             >                // dummy db directives used to calculate length of namec
 656+ 65E0 45 4D 49 54 >                db      "EMITC"
 656+ 65E4 43          >
 656+ 65E5             >len_NFA         defl    $ - temp_NFA
 656+ 65E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 656+ 65E0             >
 656+ 65E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 656+ 65E1 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 656+ 65E5 43          >
 656+ 65E6             >                org     $-1                 // alter last byte of Name just above to set
 656+ 65E5 C3          >                db      {b $} | END_BIT     // msb as name end
 656+ 65E6             >
 656+ 65E6 A9 65       >                dw      last_NFA            // Link to previous definition Name
 656+ 65E8             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 656+ 65E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 656+ 65E8 ~           >
 656+ 65E8 ~           >
 656+ 65E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 656+ 65E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 656+ 65E8             >
 656+ 65E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 657+ 65E8 E1                           pop     hl
 658+ 65E9 7D                           ld      a, l
 659+ 65EA              Emitc_Ptr:
 660+ 65EA C5                           push    bc
 661+ 65EB DD E5                        push    ix
 662+ 65ED D7                           rst     $10
 663+ 65EE DD E1                        pop     ix
 664+ 65F0 C1                           pop     bc
 665+ 65F1 3E FF                        ld      a, 255            // max possible
 666+ 65F3 32 8C 5C                     ld      (SCR_CT), a
 667+ 65F6
 668+ 65F6                              next
 668+ 65F6 DD E9       >                jp      (ix)
 669+ 65F8
 670+ 65F8              //  ______________________________________________________________________
 671+ 65F8              //
 672+ 65F8              // cr           --
 673+ 65F8              // send a CR via EMITC
 674+ 65F8                              New_Def CR, "CR", is_code, is_normal
 674+ 65F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 674+ 65F8             >
 674+ 65F8             >                // dummy db directives used to calculate length of namec
 674+ 65F8 43 52       >                db      "CR"
 674+ 65FA             >len_NFA         defl    $ - temp_NFA
 674+ 65FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 674+ 65F8             >
 674+ 65F8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 674+ 65F9 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 674+ 65FB             >                org     $-1                 // alter last byte of Name just above to set
 674+ 65FA D2          >                db      {b $} | END_BIT     // msb as name end
 674+ 65FB             >
 674+ 65FB E0 65       >                dw      last_NFA            // Link to previous definition Name
 674+ 65FD             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 674+ 65FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 674+ 65FD ~           >
 674+ 65FD ~           >
 674+ 65FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 674+ 65FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 674+ 65FD             >
 674+ 65FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 675+ 65FD
 676+ 65FD 3E 0D                        ld      a, CR_CHAR
 677+ 65FF 18 E9                        jr      Emitc_Ptr
 678+ 6601
 679+ 6601              Emitc_Vec:
 680+ 6601 42 66                        dw      C_Emit_Printable  // comma
 681+ 6603 49 66                        dw      C_Emit_Bel        // bel
 682+ 6605 42 66                        dw      C_Emit_Printable  // bs
 683+ 6607 5F 66                        dw      C_Emit_Tab        // tab
 684+ 6609 42 66                        dw      C_Emit_Printable  // cr
 685+ 660B 66 66                        dw      C_Emit_NL         // lf (unix newline)
 686+ 660D 42 66                        dw      C_Emit_Printable  // blank
 687+ 660F 42 66                        dw      C_Emit_Printable  // blank
 688+ 6611
 689+ 6611              Emit_Selector_Start:
 690+ 6611 06                           db      $06                 // comma
 691+ 6612 07                           db      $07                 // bel
 692+ 6613 08                           db      $08                 // bs
 693+ 6614 09                           db      $09                 // tab
 694+ 6615 0D                           db      $0D                 // cr
 695+ 6616 0A                           db      $0A                 // lf (unix newline)
 696+ 6617 20                           db      $20
 697+ 6618              Emit_Selector_End:
 698+ 6618 20                           db      $20
 699+ 6619
 700+ 6619              //  ______________________________________________________________________
 701+ 6619              //
 702+ 6619              // (?emit)      c1 -- c2 | c1
 703+ 6619              // decode a character to be sent via EMIT
 704+ 6619              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 705+ 6619              // the routine should resolve anything and convert the character anyway.
 706+ 6619                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 706+ 6619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ 6619             >
 706+ 6619             >                // dummy db directives used to calculate length of namec
 706+ 6619 28 3F 45 4D >                db      "(?EMIT)"
 706+ 661D 49 54 29    >
 706+ 6620             >len_NFA         defl    $ - temp_NFA
 706+ 6620             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ 6619             >
 706+ 6619 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ 661A 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 706+ 661E 49 54 29    >
 706+ 6621             >                org     $-1                 // alter last byte of Name just above to set
 706+ 6620 A9          >                db      {b $} | END_BIT     // msb as name end
 706+ 6621             >
 706+ 6621 F8 65       >                dw      last_NFA            // Link to previous definition Name
 706+ 6623             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 6623 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 706+ 6623 ~           >
 706+ 6623 ~           >
 706+ 6623             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 6623             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 6623             >
 706+ 6623             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 6623 D9                           exx
 708+ 6624 D1                           pop     de
 709+ 6625 7B                           ld      a, e                //  de has c1
 710+ 6626 E6 7F                        and     $7F                 // 7-bit ascii only
 711+ 6628                              // push    bc                  // save Instruction Pointer
 712+ 6628 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 713+ 662B 21 18 66                     ld      hl, Emit_Selector_End
 714+ 662E ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 715+ 6630 20 0A                        jr      nz, C_Emit_Not_Found
 716+ 6632                                  // Found then decode it
 717+ 6632 21 01 66                         ld      hl, Emitc_Vec
 718+ 6635 09                               add     hl, bc
 719+ 6636 09                               add     hl, bc
 720+ 6637 5E                               ld      e, (hl)
 721+ 6638 23                               inc     hl
 722+ 6639 56                               ld      d, (hl)
 723+ 663A EB                               ex      de, hl
 724+ 663B                                  // pop     bc                  // restore Instruction Pointer
 725+ 663B E9                               jp      (hl)                // one of the following labels
 726+ 663C              C_Emit_Not_Found:
 727+ 663C                              // pop     bc                  // restore Instruction Pointer
 728+ 663C FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 729+ 663E 30 02                        jr      nc, C_Emit_Printable
 730+ 6640 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 731+ 6642              C_Emit_Printable:
 732+ 6642 6F                           ld      l, a
 733+ 6643 26 00                        ld      h, 0
 734+ 6645 E5                           push    hl
 735+ 6646 D9                           exx
 736+ 6647                              next
 736+ 6647 DD E9       >                jp      (ix)
 737+ 6649
 738+ 6649              C_Emit_Bel:
 739+ 6649 D9                           exx
 740+ 664A C5                           push    bc                  // save Instruction Pointer
 741+ 664B 11 00 01                     ld      de, $0100
 742+ 664E 21 00 02                     ld      hl, $0200
 743+ 6651 DD E5                        push    ix                  // save Next Pointer
 744+ 6653 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 745+ 6656 DD E1                        pop     ix                  // restore Next Pointer
 746+ 6658 C1                           pop     bc                  // restore Instruction Pointer
 747+ 6659 21 00 00                     ld      hl, NUL_CHAR
 748+ 665C E5                           push    hl
 749+ 665D                              next
 749+ 665D DD E9       >                jp      (ix)
 750+ 665F
 751+ 665F 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 752+ 6662 E5                           push    hl
 753+ 6663 D9                           exx
 754+ 6664                              next
 754+ 6664 DD E9       >                jp      (ix)
 755+ 6666
 756+ 6666 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 757+ 6669 E5                           push    hl
 758+ 666A D9                           exx
 759+ 666B                              next
 759+ 666B DD E9       >                jp      (ix)
 760+ 666D
 761+ 666D              //  ______________________________________________________________________
 762+ 666D
 763+ 666D              Key_Table:
 764+ 666D E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 765+ 666E C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 766+ 666F CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 767+ 6670 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 768+ 6671 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 769+ 6672 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 770+ 6673 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 771+ 6674 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 772+ 6675 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 773+ 6676 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 774+ 6677 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 775+ 6678              Key_MapTo:
 776+ 6678 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 777+ 6679 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 778+ 667A 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 779+ 667B 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 780+ 667C 5D                           db      $5D                 //  6: SYMBOL+U : ]
 781+ 667D 5B                           db      $5B                 //  5: SYMBOL+Y : [
 782+ 667E 7D                           db      $7D                 //  4: SYMBOL+G : }
 783+ 667F 7B                           db      $7B                 //  3: SYMBOL+F : {
 784+ 6680 5C                           db      $5C                 //  2: SYMBOl+D : //
 785+ 6681 7C                           db      $7C                 //  1: SYMBOL+S : |
 786+ 6682 7E                           db      $7E                 //  0: SYMBOL+A : ~
 787+ 6683
 788+ 6683              //  ______________________________________________________________________
 789+ 6683              //
 790+ 6683              // curs         -- c
 791+ 6683              // wait for a keypress
 792+ 6683              // This definition need Standard ROM Interrupt to be served
 793+ 6683
 794+ 6683                              New_Def CUR, "CURS", is_code, is_normal
 794+ 6683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 794+ 6683             >
 794+ 6683             >                // dummy db directives used to calculate length of namec
 794+ 6683 43 55 52 53 >                db      "CURS"
 794+ 6687             >len_NFA         defl    $ - temp_NFA
 794+ 6687             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 794+ 6683             >
 794+ 6683 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 794+ 6684 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 794+ 6688             >                org     $-1                 // alter last byte of Name just above to set
 794+ 6687 D3          >                db      {b $} | END_BIT     // msb as name end
 794+ 6688             >
 794+ 6688 19 66       >                dw      last_NFA            // Link to previous definition Name
 794+ 668A             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 794+ 668A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 794+ 668A ~           >
 794+ 668A ~           >
 794+ 668A             >                endif           ; ok        // for other definitions it "points" the correct handler
 794+ 668A             >                // Use of "; ok" to suppress "warning[fwdref]"
 794+ 668A             >
 794+ 668A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 795+ 668A
 796+ 668A C5                           push    bc                  // save Instruction Pointer
 797+ 668B DD E5                        push    ix
 798+ 668D
 799+ 668D ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 800+ 6691 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 801+ 6694 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 802+ 6698
 803+ 6698              Cur_Wait:
 804+ 6698 76                               halt
 805+ 6699 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 806+ 669B CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 807+ 669E
 808+ 669E                                  // software-flash: flips face every 320 ms
 809+ 669E 3E 10                            ld      a, $10              // Timing based
 810+ 66A0 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 811+ 66A3
 812+ 66A3 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 813+ 66A6 20 0C                            jr      nz, Cur_Cursor
 814+ 66A8 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 815+ 66AB FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 816+ 66AF 28 03                                jr      z, Cur_Cursor
 817+ 66B1 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 818+ 66B4              Cur_Cursor:
 819+ 66B4 D7                               rst     $10
 820+ 66B5 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 821+ 66B7 D7                               rst     $10
 822+ 66B8
 823+ 66B8 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 824+ 66BC 28 DA                        jr      z, Cur_Wait
 825+ 66BE
 826+ 66BE 76                           halt    // this is to sync flashing cursor.
 827+ 66BF
 828+ 66BF 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 829+ 66C1 D7                           rst     $10
 830+ 66C2 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 831+ 66C4 D7                           rst     $10
 832+ 66C5
 833+ 66C5 ED 7B 92 63                  ld      sp, (SP_Saved)
 834+ 66C9
 835+ 66C9 DD E1                        pop     ix
 836+ 66CB C1                           pop     bc                  // Restore Instruction Pointer
 837+ 66CC
 838+ 66CC                              next
 838+ 66CC DD E9       >                jp      (ix)
 839+ 66CE
 840+ 66CE
 841+ 66CE              //  ______________________________________________________________________
 842+ 66CE              //
 843+ 66CE              // key          -- c
 844+ 66CE              // This definition need Standard ROM Interrupt to be served
 845+ 66CE
 846+ 66CE                              New_Def KEY, "KEY", is_code, is_normal
 846+ 66CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 846+ 66CE             >
 846+ 66CE             >                // dummy db directives used to calculate length of namec
 846+ 66CE 4B 45 59    >                db      "KEY"
 846+ 66D1             >len_NFA         defl    $ - temp_NFA
 846+ 66D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 846+ 66CE             >
 846+ 66CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 846+ 66CF 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 846+ 66D2             >                org     $-1                 // alter last byte of Name just above to set
 846+ 66D1 D9          >                db      {b $} | END_BIT     // msb as name end
 846+ 66D2             >
 846+ 66D2 83 66       >                dw      last_NFA            // Link to previous definition Name
 846+ 66D4             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 846+ 66D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 846+ 66D4 ~           >
 846+ 66D4 ~           >
 846+ 66D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 846+ 66D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 846+ 66D4             >
 846+ 66D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 847+ 66D4
 848+ 66D4 C5                           push    bc
 849+ 66D5
 850+ 66D5              Key_Wait:
 851+ 66D5 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 852+ 66D9 28 FA                        jr      z, Key_Wait
 853+ 66DB
 854+ 66DB 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 855+ 66DE
 856+ 66DE                              // decode character from above table
 857+ 66DE 21 6D 66                     ld      hl, Key_Table
 858+ 66E1 01 0B 00                     ld      bc, $000B
 859+ 66E4 ED B1                        cpir
 860+ 66E6 20 05                        jr      nz, Key_DontMap
 861+ 66E8 21 78 66                         ld      hl, Key_MapTo
 862+ 66EB 09                               add     hl, bc
 863+ 66EC 7E                               ld      a, (hl)
 864+ 66ED FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 865+ 66EF 20 09                        jr      nz, Key_NoCapsLock
 866+ 66F1 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 867+ 66F4 7E                               ld      a, (hl)
 868+ 66F5 EE 08                            xor     $08
 869+ 66F7 77                               ld      (hl), a
 870+ 66F8 3E 00                            ld      a, NUL_CHAR
 871+ 66FA 6F           Key_NoCapsLock: ld      l, a
 872+ 66FB 26 00                        ld      h, 0                // Prepare TOS
 873+ 66FD
 874+ 66FD FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 875+ 6701
 876+ 6701 C1                           pop     bc                  // Restore Instruction Pointer
 877+ 6702
 878+ 6702                              psh1
 878+ 6702 E5          >                push    hl
 878+ 6703 DD E9       >                jp      (ix)
 879+ 6705
 880+ 6705
 881+ 6705              //  ______________________________________________________________________
 882+ 6705              //
 883+ 6705              // click        --
 884+ 6705              // This definition need Standard ROM Interrupt to be served
 885+ 6705              //
 886+ 6705              //              New_Def CLICK, "CLICK", is_code, is_normal
 887+ 6705              //
 888+ 6705              //                push    bc
 889+ 6705              //              ld      a, ($5C48)          // BORDCR system variable
 890+ 6705              //              rra
 891+ 6705              //              rra
 892+ 6705              //              rra
 893+ 6705              //              or      $18                 // quick'n'dirty click
 894+ 6705              //              out     ($fe), a
 895+ 6705              //              ld      b, 0
 896+ 6705              //              djnz    $                   // wait loop
 897+ 6705              //              xor     $18
 898+ 6705              //              out     ($fe), a
 899+ 6705              //                pop     bc
 900+ 6705
 901+ 6705              //              next
 902+ 6705
 903+ 6705              //  ______________________________________________________________________
 904+ 6705              //
 905+ 6705              // key?         -- f
 906+ 6705              // key available
 907+ 6705              //
 908+ 6705              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 909+ 6705              //
 910+ 6705              //              ld      hl, 0000
 911+ 6705              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 912+ 6705              //              jr      z, Key_Q
 913+ 6705              //                  dec     hl
 914+ 6705              // Key_Q:
 915+ 6705              //                psh1
 916+ 6705              //              next
 917+ 6705
 918+ 6705              //  ______________________________________________________________________
 919+ 6705              //
 920+ 6705              // ?terminal    -- FALSE | TRUE
 921+ 6705              // test for BREAK keypress
 922+ 6705                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 922+ 6705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 6705             >
 922+ 6705             >                // dummy db directives used to calculate length of namec
 922+ 6705 3F 54 45 52 >                db      "?TERMINAL"
 922+ 6709 4D 49 4E 41 >
 922+ 670D 4C          >
 922+ 670E             >len_NFA         defl    $ - temp_NFA
 922+ 670E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 6705             >
 922+ 6705 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 6706 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 922+ 670A 4D 49 4E 41 >
 922+ 670E 4C          >
 922+ 670F             >                org     $-1                 // alter last byte of Name just above to set
 922+ 670E CC          >                db      {b $} | END_BIT     // msb as name end
 922+ 670F             >
 922+ 670F CE 66       >                dw      last_NFA            // Link to previous definition Name
 922+ 6711             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 6711 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 922+ 6711 ~           >
 922+ 6711 ~           >
 922+ 6711             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 6711             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 6711             >
 922+ 6711             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 6711 D9                           exx
 924+ 6712 01 FE 7F                     ld      bc, $7ffe
 925+ 6715 ED 50                        in      d, (c)
 926+ 6717 41                           ld      b, c
 927+ 6718 ED 78                        in      a, (c)
 928+ 671A B2                           or       d
 929+ 671B 1F                           rra
 930+ 671C 3F                           ccf
 931+ 671D ED 62                        sbc     hl, hl
 932+ 671F E5                           push    hl
 933+ 6720 D9                           exx
 934+ 6721                              next
 934+ 6721 DD E9       >                jp      (ix)
 935+ 6723
 936+ 6723
 937+ 6723              //  ______________________________________________________________________
 938+ 6723              //
 939+ 6723              // inkey        -- c | 0
 940+ 6723              // call ROM inkey$ routine, returns c or "zero".
 941+ 6723
 942+ 6723                              New_Def INKEY, "INKEY", is_code, is_normal
 942+ 6723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 6723             >
 942+ 6723             >                // dummy db directives used to calculate length of namec
 942+ 6723 49 4E 4B 45 >                db      "INKEY"
 942+ 6727 59          >
 942+ 6728             >len_NFA         defl    $ - temp_NFA
 942+ 6728             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 6723             >
 942+ 6723 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 6724 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 942+ 6728 59          >
 942+ 6729             >                org     $-1                 // alter last byte of Name just above to set
 942+ 6728 D9          >                db      {b $} | END_BIT     // msb as name end
 942+ 6729             >
 942+ 6729 05 67       >                dw      last_NFA            // Link to previous definition Name
 942+ 672B             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 672B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 942+ 672B ~           >
 942+ 672B ~           >
 942+ 672B             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 672B             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 672B             >
 942+ 672B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 672B
 944+ 672B C5                           push    bc
 945+ 672C ED 73 92 63                  ld      (SP_Saved), sp
 946+ 6730 31 61 63                     ld      sp, Cold_origin - 5
 947+ 6733 DD E5                        push    ix
 948+ 6735 CD E6 15                     call    $15E6                   // instead of 15E9
 949+ 6738 DD E1                        pop     ix
 950+ 673A ED 7B 92 63                  ld      sp, (SP_Saved)
 951+ 673E 6F                           ld      l, a
 952+ 673F 26 00                        ld      h, 0
 953+ 6741 C1                           pop     bc
 954+ 6742                              psh1
 954+ 6742 E5          >                push    hl
 954+ 6743 DD E9       >                jp      (ix)
 955+ 6745
 956+ 6745              //  ______________________________________________________________________
 957+ 6745              //
 958+ 6745              // select      n --
 959+ 6745              // selects the given channel number
 960+ 6745
 961+ 6745                              New_Def SELECT, "SELECT", is_code, is_normal
 961+ 6745             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 961+ 6745             >
 961+ 6745             >                // dummy db directives used to calculate length of namec
 961+ 6745 53 45 4C 45 >                db      "SELECT"
 961+ 6749 43 54       >
 961+ 674B             >len_NFA         defl    $ - temp_NFA
 961+ 674B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 961+ 6745             >
 961+ 6745 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 961+ 6746 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 961+ 674A 43 54       >
 961+ 674C             >                org     $-1                 // alter last byte of Name just above to set
 961+ 674B D4          >                db      {b $} | END_BIT     // msb as name end
 961+ 674C             >
 961+ 674C 23 67       >                dw      last_NFA            // Link to previous definition Name
 961+ 674E             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 961+ 674E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 961+ 674E ~           >
 961+ 674E ~           >
 961+ 674E             >                endif           ; ok        // for other definitions it "points" the correct handler
 961+ 674E             >                // Use of "; ok" to suppress "warning[fwdref]"
 961+ 674E             >
 961+ 674E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 962+ 674E E1                           pop     hl
 963+ 674F C5                           push    bc
 964+ 6750 7D                           ld      a, l
 965+ 6751 ED 73 92 63                  ld      (SP_Saved), sp
 966+ 6755 31 61 63                     ld      sp, Cold_origin - 5
 967+ 6758 DD E5                        push    ix
 968+ 675A CD 01 16                     call    $1601
 969+ 675D DD E1                        pop     ix
 970+ 675F ED 7B 92 63                  ld      sp, (SP_Saved)
 971+ 6763 C1                           pop     bc
 972+ 6764
 973+ 6764                              next
 973+ 6764 DD E9       >                jp      (ix)
 974+ 6766
 975+ 6766              //  ______________________________________________________________________
 976+ 6766              //
 977+ 6766              // ZX Spectrum Next - Low Level disk primitives.
 978+ 6766              // this include is "here" for backward compatibility
 979+ 6766
 980+ 6766                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6766              //  ______________________________________________________________________
   2++6766              //
   3++6766              //  next-opt.asm
   4++6766              //
   5++6766              //  ZX Spectrum Next - peculiar definitions
   6++6766              //  ______________________________________________________________________
   7++6766
   8++6766              //  ______________________________________________________________________
   9++6766              //
  10++6766              // f_seek       d u -- f
  11++6766              // Seek to position d in file-handle u.
  12++6766              // Return a false-flag 0 on success, True flag on error
  13++6766                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6766             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6766             >
  13++6766             >                // dummy db directives used to calculate length of namec
  13++6766 46 5F 53 45 >                db      "F_SEEK"
  13++676A 45 4B       >
  13++676C             >len_NFA         defl    $ - temp_NFA
  13++676C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6766             >
  13++6766 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6767 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++676B 45 4B       >
  13++676D             >                org     $-1                 // alter last byte of Name just above to set
  13++676C CB          >                db      {b $} | END_BIT     // msb as name end
  13++676D             >
  13++676D 45 67       >                dw      last_NFA            // Link to previous definition Name
  13++676F             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++676F ~           >
  13++676F ~           >
  13++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++676F             >
  13++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++676F E1                           pop     hl                  // file-handle
  15++6770 7D                           ld      a, l                // file-handle
  16++6771 60                           ld      h, b                // save Intruction Pointer
  17++6772 69                           ld      l, c
  18++6773 C1                           pop     bc                  // bc has high-word of d
  19++6774 D1                           pop     de
  20++6775 DD E5                        push    ix
  21++6777 E5                           push    hl                  // save Instruction Pointer
  22++6778 DD 21 00 00                  ld      ix, 0
  23++677C CF                           rst     $08
  24++677D 9F                           db      $9F
  25++677E              F_Seek_Exit:
  26++677E C1                           pop     bc                  // restore Instruction Pointer
  27++677F DD E1                        pop     ix
  28++6781 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6783
  30++6783                              psh1
  30++6783 E5          >                push    hl
  30++6784 DD E9       >                jp      (ix)
  31++6786
  32++6786              //  ______________________________________________________________________
  33++6786              //
  34++6786              // f_close      u -- f
  35++6786              // Close file-handle u.
  36++6786              // Return 0 on success, True flag on error
  37++6786
  38++6786                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6786             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6786             >
  38++6786             >                // dummy db directives used to calculate length of namec
  38++6786 46 5F 43 4C >                db      "F_CLOSE"
  38++678A 4F 53 45    >
  38++678D             >len_NFA         defl    $ - temp_NFA
  38++678D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6786             >
  38++6786 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6787 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++678B 4F 53 45    >
  38++678E             >                org     $-1                 // alter last byte of Name just above to set
  38++678D C5          >                db      {b $} | END_BIT     // msb as name end
  38++678E             >
  38++678E 66 67       >                dw      last_NFA            // Link to previous definition Name
  38++6790             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++6790 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++6790 ~           >
  38++6790 ~           >
  38++6790             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++6790             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++6790             >
  38++6790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++6790
  40++6790 E1                           pop     hl
  41++6791 7D                           ld      a, l                // file-handle
  42++6792 DD E5                        push    ix
  43++6794 C5                           push    bc                  // Save Instruction pointer
  44++6795 CF                           rst     $08
  45++6796 9B                           db      $9B
  46++6797 18 E5                        jr      F_Seek_Exit
  47++6799              //              pop     bc
  48++6799              //              pop     ix
  49++6799              //              sbc     hl, hl
  50++6799              //              psh1
  51++6799
  52++6799              //  ______________________________________________________________________
  53++6799              //
  54++6799              // f_sync      u -- f
  55++6799              // Close file-handle u.
  56++6799              // Return 0 on success, True flag on error
  57++6799
  58++6799                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6799             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6799             >
  58++6799             >                // dummy db directives used to calculate length of namec
  58++6799 46 5F 53 59 >                db      "F_SYNC"
  58++679D 4E 43       >
  58++679F             >len_NFA         defl    $ - temp_NFA
  58++679F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6799             >
  58++6799 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++679A 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++679E 4E 43       >
  58++67A0             >                org     $-1                 // alter last byte of Name just above to set
  58++679F C3          >                db      {b $} | END_BIT     // msb as name end
  58++67A0             >
  58++67A0 86 67       >                dw      last_NFA            // Link to previous definition Name
  58++67A2             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++67A2 ~           >
  58++67A2 ~           >
  58++67A2             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67A2             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67A2             >
  58++67A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67A2 E1                           pop     hl
  60++67A3 7D                           ld      a, l                // file-handle
  61++67A4 DD E5                        push    ix
  62++67A6 C5                           push    bc
  63++67A7 CF                           rst     $08
  64++67A8 9C                           db      $9C
  65++67A9 18 D3                        jr      F_Seek_Exit
  66++67AB              //              pop     bc
  67++67AB              //              pop     ix
  68++67AB              //              sbc     hl, hl
  69++67AB              //              psh1
  70++67AB
  71++67AB              //  ______________________________________________________________________
  72++67AB              //
  73++67AB              // f_fgetpos    u -- d f
  74++67AB              // Seek to position d in file-handle u.
  75++67AB              // Return a false-flag 0 on success, True flag on error
  76++67AB                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67AB             >
  76++67AB             >                // dummy db directives used to calculate length of namec
  76++67AB 46 5F 46 47 >                db      "F_FGETPOS"
  76++67AF 45 54 50 4F >
  76++67B3 53          >
  76++67B4             >len_NFA         defl    $ - temp_NFA
  76++67B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67AB             >
  76++67AB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67AC 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67B0 45 54 50 4F >
  76++67B4 53          >
  76++67B5             >                org     $-1                 // alter last byte of Name just above to set
  76++67B4 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67B5             >
  76++67B5 99 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B7             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B7 ~           >
  76++67B7 ~           >
  76++67B7             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B7             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B7             >
  76++67B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B7 E1                           pop     hl
  78++67B8 7D                           ld      a, l                // file-handle
  79++67B9 DD E5                        push    ix
  80++67BB C5                           push    bc
  81++67BC CF                           rst     $08
  82++67BD A0                           db      $A0
  83++67BE E1                           pop     hl                  // restore Instruction Pointer
  84++67BF DD E1                        pop     ix
  85++67C1 D5                           push    de
  86++67C2 C5                           push    bc
  87++67C3 44                           ld      b, h                // restore Instruction Pointer
  88++67C4 4D                           ld      c, l
  89++67C5 ED 62                        sbc     hl, hl
  90++67C7
  91++67C7                              psh1
  91++67C7 E5          >                push    hl
  91++67C8 DD E9       >                jp      (ix)
  92++67CA
  93++67CA              //  ______________________________________________________________________
  94++67CA              //
  95++67CA              // f_read       a b u -- n f
  96++67CA              // Read b bytes from file-handle u to address a
  97++67CA              // Return the actual number n of bytes read
  98++67CA              // Return 0 on success, True flag on error
  99++67CA                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67CA             >
  99++67CA             >                // dummy db directives used to calculate length of namec
  99++67CA 46 5F 52 45 >                db      "F_READ"
  99++67CE 41 44       >
  99++67D0             >len_NFA         defl    $ - temp_NFA
  99++67D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67CA             >
  99++67CA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67CB 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67CF 41 44       >
  99++67D1             >                org     $-1                 // alter last byte of Name just above to set
  99++67D0 C4          >                db      {b $} | END_BIT     // msb as name end
  99++67D1             >
  99++67D1 AB 67       >                dw      last_NFA            // Link to previous definition Name
  99++67D3             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67D3 ~           >
  99++67D3 ~           >
  99++67D3             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67D3             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67D3             >
  99++67D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67D3
 101++67D3 50                           ld      d, b
 102++67D4 59                           ld      e, c
 103++67D5 E1                           pop     hl
 104++67D6 7D                           ld      a, l                // file-handle
 105++67D7 C1                           pop     bc                  // bc has bytes to read
 106++67D8 DD E3                        ex      (sp), ix            // ix has address
 107++67DA D5                           push    de                  // Save Instruction pointer
 108++67DB CF                           rst     $08
 109++67DC 9D                           db      $9D
 110++67DD              F_Read_Exit:
 111++67DD C1                           pop     bc                  // Restore Instruction pointer
 112++67DE DD E1                        pop     ix                  // Restore ix
 113++67E0 D5                           push    de                  // bytes written
 114++67E1 ED 62                        sbc     hl, hl
 115++67E3
 116++67E3                              psh1
 116++67E3 E5          >                push    hl
 116++67E4 DD E9       >                jp      (ix)
 117++67E6
 118++67E6              //  ______________________________________________________________________
 119++67E6              //
 120++67E6              // f_write      a b u -- n f
 121++67E6              // Write bytes currently stored at address a to file-handle u.
 122++67E6              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E6                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E6             >
 123++67E6             >                // dummy db directives used to calculate length of namec
 123++67E6 46 5F 57 52 >                db      "F_WRITE"
 123++67EA 49 54 45    >
 123++67ED             >len_NFA         defl    $ - temp_NFA
 123++67ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E6             >
 123++67E6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E7 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67EB 49 54 45    >
 123++67EE             >                org     $-1                 // alter last byte of Name just above to set
 123++67ED C5          >                db      {b $} | END_BIT     // msb as name end
 123++67EE             >
 123++67EE CA 67       >                dw      last_NFA            // Link to previous definition Name
 123++67F0             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67F0 ~           >
 123++67F0 ~           >
 123++67F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67F0             >
 123++67F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67F0
 125++67F0 50                           ld      d, b
 126++67F1 59                           ld      e, c
 127++67F2 E1                           pop     hl
 128++67F3 7D                           ld      a, l                // file-handle
 129++67F4 C1                           pop     bc                  // bc has bytes to read
 130++67F5 DD E3                        ex      (sp), ix            // ix has address
 131++67F7 D5                           push    de                  // Save Instruction pointer
 132++67F8 CF                           rst     $08
 133++67F9 9E                           db      $9E
 134++67FA 18 E1                        jr F_Read_Exit
 135++67FC              //              pop     bc                  // Restore Instruction pointer
 136++67FC              //              pop     ix                  // Restore ix
 137++67FC              //              push    de                  // bytes written
 138++67FC              //              sbc     hl, hl
 139++67FC              //
 140++67FC              //              psh1
 141++67FC
 142++67FC              //  ______________________________________________________________________
 143++67FC              //
 144++67FC              // f_open       a1 a2 b -- u f
 145++67FC              // open a file
 146++67FC              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67FC              // a2 is address to an 8-byte header data used in some cases.
 148++67FC              // b is access mode-byte, that is a combination of:
 149++67FC              // any/all of:
 150++67FC              //   esx_mode_read          $01 request read access
 151++67FC              //   esx_mode_write         $02 request write access
 152++67FC              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67FC              // plus one of:
 154++67FC              //   esx_mode_open_exist    $00 only open existing file
 155++67FC              //   esx_mode_open_creat    $08 open existing or create file
 156++67FC              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67FC              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67FC              // Return file-handle u and 0 on success, True flag on error
 159++67FC                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67FC             >
 159++67FC             >                // dummy db directives used to calculate length of namec
 159++67FC 46 5F 4F 50 >                db      "F_OPEN"
 159++6800 45 4E       >
 159++6802             >len_NFA         defl    $ - temp_NFA
 159++6802             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67FC             >
 159++67FC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67FD 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6801 45 4E       >
 159++6803             >                org     $-1                 // alter last byte of Name just above to set
 159++6802 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6803             >
 159++6803 E6 67       >                dw      last_NFA            // Link to previous definition Name
 159++6805             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6805 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++6805 ~           >
 159++6805 ~           >
 159++6805             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6805             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6805             >
 159++6805             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6805 60                           ld      h, b                // Save Instruction pointer
 161++6806 69                           ld      l, c
 162++6807 C1                           pop     bc                  // file-mode
 163++6808 41                           ld      b, c                // file-mode
 164++6809 D1                           pop     de                  // 8-bytes buffer if any
 165++680A DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++680C E5                           push    hl                  // Save Instruction pointer
 167++680D 3E 2A                        ld      a, "*"
 168++680F CF                           rst     $08
 169++6810 9A                           db      $9A
 170++6811              F_Open_Exit:
 171++6811 5F                           ld      e, a
 172++6812 16 00                        ld      d, 0
 173++6814 18 C7                        jr F_Read_Exit
 174++6816
 175++6816              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++6816              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++6816              //   \ DROP
 178++6816              //   \ F_CLOSE
 179++6816
 180++6816
 181++6816              //  ______________________________________________________________________
 182++6816              //
 183++6816              // f_opendir    a1 a2 b -- u f
 184++6816              // open a file
 185++6816                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++6816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++6816             >
 185++6816             >                // dummy db directives used to calculate length of namec
 185++6816 46 5F 4F 50 >                db      "F_OPENDIR"
 185++681A 45 4E 44 49 >
 185++681E 52          >
 185++681F             >len_NFA         defl    $ - temp_NFA
 185++681F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++6816             >
 185++6816 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++6817 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++681B 45 4E 44 49 >
 185++681F 52          >
 185++6820             >                org     $-1                 // alter last byte of Name just above to set
 185++681F D2          >                db      {b $} | END_BIT     // msb as name end
 185++6820             >
 185++6820 FC 67       >                dw      last_NFA            // Link to previous definition Name
 185++6822             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++6822 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 185++6822 ~           >
 185++6822 ~           >
 185++6822             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++6822             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++6822             >
 185++6822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++6822 DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++6824 D5                           push    de
 188++6825 C5                           push    bc                  // Save Instruction pointer
 189++6826 06 10                        ld      b, $10              // file-mode
 190++6828 3E 43                        ld      a, "C"
 191++682A CF                           rst     $08
 192++682B A3                           db      $A3
 193++682C 18 E3                        jr      F_Open_Exit
 194++682E
 195++682E
 196++682E              //  ______________________________________________________________________
 197++682E              //
 198++682E              // f_readdir    a1 a2 b -- u f
 199++682E              // open a file
 200++682E                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 200++682E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200++682E             >
 200++682E             >                // dummy db directives used to calculate length of namec
 200++682E 46 5F 52 45 >                db      "F_READDIR"
 200++6832 41 44 44 49 >
 200++6836 52          >
 200++6837             >len_NFA         defl    $ - temp_NFA
 200++6837             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200++682E             >
 200++682E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200++682F 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 200++6833 41 44 44 49 >
 200++6837 52          >
 200++6838             >                org     $-1                 // alter last byte of Name just above to set
 200++6837 D2          >                db      {b $} | END_BIT     // msb as name end
 200++6838             >
 200++6838 16 68       >                dw      last_NFA            // Link to previous definition Name
 200++683A             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200++683A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200++683A ~           >
 200++683A ~           >
 200++683A             >                endif           ; ok        // for other definitions it "points" the correct handler
 200++683A             >                // Use of "; ok" to suppress "warning[fwdref]"
 200++683A             >
 200++683A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201++683A D9                            exx
 202++683B E1                            pop     hl
 203++683C 7D                            ld      a, l
 204++683D D1                            pop     de
 205++683E DD E3                         ex      (sp), ix            // filespec nul-terminated
 206++6840 D9                           exx
 207++6841 D5                           push    de
 208++6842 C5                           push    bc                  // Save Instruction pointer
 209++6843 D9                            exx
 210++6844 CF                            rst     $08
 211++6845 A4                            db      $A4
 212++6846 18 C9                         jr      F_Open_Exit
 213++6848
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 981+ 6848
 982+ 6848
 983+ 6848              //  ______________________________________________________________________
 984+ 6848              //
 985+ 6848              // cmove    a1 a2 u --
 986+ 6848              // If u > 0, moves memory content starting at address a1 for n bytes long
 987+ 6848              // storing then starting at address addr2.
 988+ 6848              // The content of a1 is moved first. See CMOVE> also.
 989+ 6848                              New_Def CMOVE, "CMOVE", is_code, is_normal
 989+ 6848             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 6848             >
 989+ 6848             >                // dummy db directives used to calculate length of namec
 989+ 6848 43 4D 4F 56 >                db      "CMOVE"
 989+ 684C 45          >
 989+ 684D             >len_NFA         defl    $ - temp_NFA
 989+ 684D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 6848             >
 989+ 6848 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 6849 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 989+ 684D 45          >
 989+ 684E             >                org     $-1                 // alter last byte of Name just above to set
 989+ 684D C5          >                db      {b $} | END_BIT     // msb as name end
 989+ 684E             >
 989+ 684E 2E 68       >                dw      last_NFA            // Link to previous definition Name
 989+ 6850             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 6850 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 989+ 6850 ~           >
 989+ 6850 ~           >
 989+ 6850             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 6850             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 6850             >
 989+ 6850             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 6850 D9                           exx
 991+ 6851
 992+ 6851 C1                           pop     bc                  // bc has counter
 993+ 6852 D1                           pop     de                  // de now has dest
 994+ 6853 E1                           pop     hl                 // hl has source, save Instruction Pointer
 995+ 6854 78                           ld      a, b
 996+ 6855 B1                           or      c
 997+ 6856 28 02                        jr      z, Cmove_NoMove
 998+ 6858 ED B0                            ldir
 999+ 685A              Cmove_NoMove:
1000+ 685A D9                           exx
1001+ 685B
1002+ 685B                              next
1002+ 685B DD E9       >                jp      (ix)
1003+ 685D
1004+ 685D              //  ______________________________________________________________________
1005+ 685D              //
1006+ 685D              // cmove>    a1 a2 u --
1007+ 685D              // If u > 0, moves memory content starting at address a1 for n bytes long
1008+ 685D              // storing then starting at address addr2.
1009+ 685D              // The content of a1 is moved last. See cmove.
1010+ 685D                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1010+ 685D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1010+ 685D             >
1010+ 685D             >                // dummy db directives used to calculate length of namec
1010+ 685D 43 4D 4F 56 >                db      "CMOVE>"
1010+ 6861 45 3E       >
1010+ 6863             >len_NFA         defl    $ - temp_NFA
1010+ 6863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1010+ 685D             >
1010+ 685D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1010+ 685E 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1010+ 6862 45 3E       >
1010+ 6864             >                org     $-1                 // alter last byte of Name just above to set
1010+ 6863 BE          >                db      {b $} | END_BIT     // msb as name end
1010+ 6864             >
1010+ 6864 48 68       >                dw      last_NFA            // Link to previous definition Name
1010+ 6866             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1010+ 6866 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1010+ 6866 ~           >
1010+ 6866 ~           >
1010+ 6866             >                endif           ; ok        // for other definitions it "points" the correct handler
1010+ 6866             >                // Use of "; ok" to suppress "warning[fwdref]"
1010+ 6866             >
1010+ 6866             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1011+ 6866 D9                           exx
1012+ 6867
1013+ 6867 C1                           pop     bc                  // bc has counter
1014+ 6868 D1                           pop     de                  // de has dest
1015+ 6869 E1                           pop     hl                  // hl has source, save Instruction Pointer
1016+ 686A 78                           ld      a, b
1017+ 686B B1                           or      c
1018+ 686C 28 08                        jr      z, CmoveV_NoMove
1019+ 686E EB                               ex      de, hl              // compute address to
1020+ 686F 09                               add     hl, bc              // operate backward
1021+ 6870 2B                               dec     hl
1022+ 6871 EB                               ex      de, hl
1023+ 6872 09                               add     hl, bc
1024+ 6873 2B                               dec     hl
1025+ 6874 ED B8                            lddr                        // backward
1026+ 6876              CmoveV_NoMove:
1027+ 6876 D9                           exx
1028+ 6877
1029+ 6877                              next
1029+ 6877 DD E9       >                jp      (ix)
1030+ 6879
1031+ 6879              //  ______________________________________________________________________
1032+ 6879              //
1033+ 6879              // um*      u1 u2 -- ud
1034+ 6879              // Unsigned multiplication
1035+ 6879              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1036+ 6879              // On the stack a double number is treated as two single numbers
1037+ 6879              // where DE is on the top of the stack and HL is the second from top,
1038+ 6879              // Instead, in 2VARIABLE a double number is stored as EDLH.
1039+ 6879              // this definition could use "MUL" Z80N new op-code.
1040+ 6879                              New_Def UM_MUL, "UM*", is_code, is_normal
1040+ 6879             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1040+ 6879             >
1040+ 6879             >                // dummy db directives used to calculate length of namec
1040+ 6879 55 4D 2A    >                db      "UM*"
1040+ 687C             >len_NFA         defl    $ - temp_NFA
1040+ 687C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1040+ 6879             >
1040+ 6879 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1040+ 687A 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1040+ 687D             >                org     $-1                 // alter last byte of Name just above to set
1040+ 687C AA          >                db      {b $} | END_BIT     // msb as name end
1040+ 687D             >
1040+ 687D 5D 68       >                dw      last_NFA            // Link to previous definition Name
1040+ 687F             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1040+ 687F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1040+ 687F ~           >
1040+ 687F ~           >
1040+ 687F             >                endif           ; ok        // for other definitions it "points" the correct handler
1040+ 687F             >                // Use of "; ok" to suppress "warning[fwdref]"
1040+ 687F             >
1040+ 687F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1041+ 687F D9                           exx
1042+ 6880 D1                           pop     de                    // de has u2 operand
1043+ 6881 E1                           pop     hl                    // hl has u1 operand
1044+ 6882 45                           ld      b, l
1045+ 6883 4B                           ld      c, e
1046+ 6884 5D                           ld      e, l
1047+ 6885 6A                           ld      l, d
1048+ 6886 E5                           push    hl
1049+ 6887 69                           ld      l, c
1050+ 6888 ED 30                        mul
1051+ 688A EB                           ex      de, hl
1052+ 688B ED 30                        mul
1053+ 688D AF                           xor     a
1054+ 688E 19                           add     hl, de
1055+ 688F 8F                           adc     a
1056+ 6890 59                           ld      e, c
1057+ 6891 50                           ld      d, b
1058+ 6892 ED 30                        mul
1059+ 6894 47                           ld      b, a
1060+ 6895 4C                           ld      c, h
1061+ 6896 7A                           ld      a, d
1062+ 6897 85                           add     l
1063+ 6898 67                           ld      h, a
1064+ 6899 6B                           ld      l, e
1065+ 689A D1                           pop     de
1066+ 689B ED 30                        mul
1067+ 689D EB                           ex      de, hl
1068+ 689E ED 4A                        adc     hl, bc
1069+ 68A0 D5                           push    de
1070+ 68A1 E5                           push    hl
1071+ 68A2 D9                           exx
1072+ 68A3                              next
1072+ 68A3 DD E9       >                jp      (ix)
1073+ 68A5
1074+ 68A5              //  ______________________________________________________________________
1075+ 68A5              //
1076+ 68A5              // um/mod      ud u1 -- q r
1077+ 68A5              // divides ud into u1 giving quotient q and remainder r
1078+ 68A5              // algorithm takes 16 bit at a time starting from msb
1079+ 68A5              // DE grows from lsb upward with quotient result
1080+ 68A5              // HL keeps the remainder at each stage of division
1081+ 68A5              // each loop 'lowers' the next binary digit to form the current dividend
1082+ 68A5                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1082+ 68A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1082+ 68A5             >
1082+ 68A5             >                // dummy db directives used to calculate length of namec
1082+ 68A5 55 4D 2F 4D >                db      "UM/MOD"
1082+ 68A9 4F 44       >
1082+ 68AB             >len_NFA         defl    $ - temp_NFA
1082+ 68AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1082+ 68A5             >
1082+ 68A5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1082+ 68A6 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1082+ 68AA 4F 44       >
1082+ 68AC             >                org     $-1                 // alter last byte of Name just above to set
1082+ 68AB C4          >                db      {b $} | END_BIT     // msb as name end
1082+ 68AC             >
1082+ 68AC 79 68       >                dw      last_NFA            // Link to previous definition Name
1082+ 68AE             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1082+ 68AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1082+ 68AE ~           >
1082+ 68AE ~           >
1082+ 68AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1082+ 68AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1082+ 68AE             >
1082+ 68AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1083+ 68AE D9                           exx
1084+ 68AF C1                           pop     bc                      // divisor
1085+ 68B0
1086+ 68B0 E1                           pop     hl                      // < high part
1087+ 68B1 D1                           pop     de                      // < low part and
1088+ 68B2
1089+ 68B2 7D                           ld      a, l                    // check without changing arguments
1090+ 68B3 91                           sub     c                       // if divisor is greater than high part
1091+ 68B4 7C                           ld      a, h                    // so quotient will be in range
1092+ 68B5 98                           sbc     a, b
1093+ 68B6 30 20                        jr      nc, Um_DivMod_OutOfRange
1094+ 68B8 3E 10                            ld      a, 16
1095+ 68BA              Um_DivMod_Loop:
1096+ 68BA CB 23                                sla     e
1097+ 68BC CB 12                                rl      d
1098+ 68BE ED 6A                                adc     hl, hl
1099+ 68C0 30 05                                jr      nc, Um_DivMod_Carry
1100+ 68C2 A7                                       and     a
1101+ 68C3 ED 42                                    sbc     hl, bc
1102+ 68C5 18 07                                jr      Um_DivMod_Endif    // else
1103+ 68C7              Um_DivMod_Carry:
1104+ 68C7 A7                                       and     a
1105+ 68C8 ED 42                                    sbc     hl, bc
1106+ 68CA 30 02                                    jr      nc, Um_DivMod_Endif
1107+ 68CC 09                                           add     hl, bc
1108+ 68CD 1B                                           dec     de
1109+ 68CE              Um_DivMod_Endif:                                   // endif
1110+ 68CE 13                                   inc     de
1111+ 68CF 3D                                   dec     a
1112+ 68D0 20 E8                            jr      nz, Um_DivMod_Loop
1113+ 68D2 EB                               ex      de, hl
1114+ 68D3              Um_DivMod_Bailout:
1115+ 68D3 D5                               push    de                  // de := remanider
1116+ 68D4 E5                               push    hl                  // hl := quotient
1117+ 68D5 D9                               exx
1118+ 68D6                                  next
1118+ 68D6 DD E9       >                jp      (ix)
1119+ 68D8
1120+ 68D8              Um_DivMod_OutOfRange:
1121+ 68D8 21 FF FF                     ld      hl, -1
1122+ 68DB 54                           ld      d, h
1123+ 68DC 5D                           ld      e, l
1124+ 68DD 18 F4                        jr      Um_DivMod_Bailout
1125+ 68DF
1126+ 68DF              //  ______________________________________________________________________
1127+ 68DF              //
1128+ 68DF              // and          n1 n2 -- n3
1129+ 68DF              // bit logical AND. Returns n3 as n1 & n2
1130+ 68DF                              New_Def AND_OP, "AND", is_code, is_normal
1130+ 68DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ 68DF             >
1130+ 68DF             >                // dummy db directives used to calculate length of namec
1130+ 68DF 41 4E 44    >                db      "AND"
1130+ 68E2             >len_NFA         defl    $ - temp_NFA
1130+ 68E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ 68DF             >
1130+ 68DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ 68E0 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1130+ 68E3             >                org     $-1                 // alter last byte of Name just above to set
1130+ 68E2 C4          >                db      {b $} | END_BIT     // msb as name end
1130+ 68E3             >
1130+ 68E3 A5 68       >                dw      last_NFA            // Link to previous definition Name
1130+ 68E5             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 68E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1130+ 68E5 ~           >
1130+ 68E5 ~           >
1130+ 68E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 68E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 68E5             >
1130+ 68E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 68E5 D1                           pop     de
1132+ 68E6 E1                           pop     hl
1133+ 68E7 7B                           ld      a, e
1134+ 68E8 A5                           and     l
1135+ 68E9 6F                           ld      l, a
1136+ 68EA 7A                           ld      a, d
1137+ 68EB A4                           and     h
1138+ 68EC 67                           ld      h, a
1139+ 68ED
1140+ 68ED                              psh1
1140+ 68ED E5          >                push    hl
1140+ 68EE DD E9       >                jp      (ix)
1141+ 68F0
1142+ 68F0              //  ______________________________________________________________________
1143+ 68F0              //
1144+ 68F0              // or           n1 n2 -- n3
1145+ 68F0              // bit logical OR. Returns n3 as n1 | n2
1146+ 68F0                              New_Def OR_OP, "OR", is_code, is_normal
1146+ 68F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1146+ 68F0             >
1146+ 68F0             >                // dummy db directives used to calculate length of namec
1146+ 68F0 4F 52       >                db      "OR"
1146+ 68F2             >len_NFA         defl    $ - temp_NFA
1146+ 68F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1146+ 68F0             >
1146+ 68F0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1146+ 68F1 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1146+ 68F3             >                org     $-1                 // alter last byte of Name just above to set
1146+ 68F2 D2          >                db      {b $} | END_BIT     // msb as name end
1146+ 68F3             >
1146+ 68F3 DF 68       >                dw      last_NFA            // Link to previous definition Name
1146+ 68F5             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1146+ 68F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1146+ 68F5 ~           >
1146+ 68F5 ~           >
1146+ 68F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1146+ 68F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1146+ 68F5             >
1146+ 68F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1147+ 68F5 D1                           pop     de
1148+ 68F6 E1                           pop     hl
1149+ 68F7 7B                           ld      a, e
1150+ 68F8 B5                           or      l
1151+ 68F9 6F                           ld      l, a
1152+ 68FA 7A                           ld      a, d
1153+ 68FB B4                           or      h
1154+ 68FC 67                           ld      h, a
1155+ 68FD
1156+ 68FD                              psh1
1156+ 68FD E5          >                push    hl
1156+ 68FE DD E9       >                jp      (ix)
1157+ 6900
1158+ 6900              //  ______________________________________________________________________
1159+ 6900              //
1160+ 6900              // xor          n1 n2 -- n3
1161+ 6900              // bit logical OR. Returns n3 as n1 ^ n2
1162+ 6900                              New_Def XOR_OP, "XOR", is_code, is_normal
1162+ 6900             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 6900             >
1162+ 6900             >                // dummy db directives used to calculate length of namec
1162+ 6900 58 4F 52    >                db      "XOR"
1162+ 6903             >len_NFA         defl    $ - temp_NFA
1162+ 6903             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 6900             >
1162+ 6900 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 6901 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1162+ 6904             >                org     $-1                 // alter last byte of Name just above to set
1162+ 6903 D2          >                db      {b $} | END_BIT     // msb as name end
1162+ 6904             >
1162+ 6904 F0 68       >                dw      last_NFA            // Link to previous definition Name
1162+ 6906             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 6906 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1162+ 6906 ~           >
1162+ 6906 ~           >
1162+ 6906             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 6906             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 6906             >
1162+ 6906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 6906 D1                           pop     de
1164+ 6907 E1                           pop     hl
1165+ 6908 7B                           ld      a, e
1166+ 6909 AD                           xor     l
1167+ 690A 6F                           ld      l, a
1168+ 690B 7A                           ld      a, d
1169+ 690C AC                           xor     h
1170+ 690D 67                           ld      h, a
1171+ 690E
1172+ 690E                              psh1
1172+ 690E E5          >                push    hl
1172+ 690F DD E9       >                jp      (ix)
1173+ 6911
1174+ 6911              //  ______________________________________________________________________
1175+ 6911              //
1176+ 6911              // sp@      -- a
1177+ 6911              // returns on top of stack the value of SP before execution
1178+ 6911                              New_Def SPFETCH, "SP@", is_code, is_normal
1178+ 6911             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1178+ 6911             >
1178+ 6911             >                // dummy db directives used to calculate length of namec
1178+ 6911 53 50 40    >                db      "SP@"
1178+ 6914             >len_NFA         defl    $ - temp_NFA
1178+ 6914             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1178+ 6911             >
1178+ 6911 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1178+ 6912 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1178+ 6915             >                org     $-1                 // alter last byte of Name just above to set
1178+ 6914 C0          >                db      {b $} | END_BIT     // msb as name end
1178+ 6915             >
1178+ 6915 00 69       >                dw      last_NFA            // Link to previous definition Name
1178+ 6917             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1178+ 6917 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1178+ 6917 ~           >
1178+ 6917 ~           >
1178+ 6917             >                endif           ; ok        // for other definitions it "points" the correct handler
1178+ 6917             >                // Use of "; ok" to suppress "warning[fwdref]"
1178+ 6917             >
1178+ 6917             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1179+ 6917
1180+ 6917 21 00 00                     ld      hl, 0
1181+ 691A 39                           add     hl, sp
1182+ 691B
1183+ 691B                              psh1
1183+ 691B E5          >                push    hl
1183+ 691C DD E9       >                jp      (ix)
1184+ 691E
1185+ 691E              //  ______________________________________________________________________
1186+ 691E              //
1187+ 691E              // sp!      a --
1188+ 691E              // restore SP to the initial value passed
1189+ 691E              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1190+ 691E                              New_Def SPSTORE, "SP!", is_code, is_normal
1190+ 691E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1190+ 691E             >
1190+ 691E             >                // dummy db directives used to calculate length of namec
1190+ 691E 53 50 21    >                db      "SP!"
1190+ 6921             >len_NFA         defl    $ - temp_NFA
1190+ 6921             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1190+ 691E             >
1190+ 691E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1190+ 691F 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1190+ 6922             >                org     $-1                 // alter last byte of Name just above to set
1190+ 6921 A1          >                db      {b $} | END_BIT     // msb as name end
1190+ 6922             >
1190+ 6922 11 69       >                dw      last_NFA            // Link to previous definition Name
1190+ 6924             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1190+ 6924 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1190+ 6924 ~           >
1190+ 6924 ~           >
1190+ 6924             >                endif           ; ok        // for other definitions it "points" the correct handler
1190+ 6924             >                // Use of "; ok" to suppress "warning[fwdref]"
1190+ 6924             >
1190+ 6924             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1191+ 6924 E1                           pop     hl
1192+ 6925 F9                           ld      sp, hl
1193+ 6926
1194+ 6926                              next
1194+ 6926 DD E9       >                jp      (ix)
1195+ 6928
1196+ 6928              //  ______________________________________________________________________
1197+ 6928              //
1198+ 6928              // rp@      -- a
1199+ 6928              // returns on top of stack the value of Return-Pointer
1200+ 6928                              New_Def RPFETCH, "RP@", is_code, is_normal
1200+ 6928             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 6928             >
1200+ 6928             >                // dummy db directives used to calculate length of namec
1200+ 6928 52 50 40    >                db      "RP@"
1200+ 692B             >len_NFA         defl    $ - temp_NFA
1200+ 692B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 6928             >
1200+ 6928 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 6929 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1200+ 692C             >                org     $-1                 // alter last byte of Name just above to set
1200+ 692B C0          >                db      {b $} | END_BIT     // msb as name end
1200+ 692C             >
1200+ 692C 1E 69       >                dw      last_NFA            // Link to previous definition Name
1200+ 692E             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 692E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1200+ 692E ~           >
1200+ 692E ~           >
1200+ 692E             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 692E             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 692E             >
1200+ 692E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 692E
1202+ 692E                              ldhlrp
1202+ 692E 2A 96 63    >                ld      hl,(RP_Pointer)
1203+ 6931
1204+ 6931                              psh1
1204+ 6931 E5          >                push    hl
1204+ 6932 DD E9       >                jp      (ix)
1205+ 6934
1206+ 6934              //  ______________________________________________________________________
1207+ 6934              //
1208+ 6934              // rp!      a --
1209+ 6934              // restore RP to the initial value passed
1210+ 6934              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1211+ 6934                              New_Def RPSTORE, "RP!", is_code, is_normal
1211+ 6934             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 6934             >
1211+ 6934             >                // dummy db directives used to calculate length of namec
1211+ 6934 52 50 21    >                db      "RP!"
1211+ 6937             >len_NFA         defl    $ - temp_NFA
1211+ 6937             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 6934             >
1211+ 6934 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 6935 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1211+ 6938             >                org     $-1                 // alter last byte of Name just above to set
1211+ 6937 A1          >                db      {b $} | END_BIT     // msb as name end
1211+ 6938             >
1211+ 6938 28 69       >                dw      last_NFA            // Link to previous definition Name
1211+ 693A             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 693A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1211+ 693A ~           >
1211+ 693A ~           >
1211+ 693A             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 693A             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 693A             >
1211+ 693A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 693A E1                           pop     hl
1213+ 693B                              ldrphl
1213+ 693B 22 96 63    >                ld      (RP_Pointer),hl
1214+ 693E
1215+ 693E                              next
1215+ 693E DD E9       >                jp      (ix)
1216+ 6940
1217+ 6940              //  ______________________________________________________________________
1218+ 6940              //
1219+ 6940              // exit       --
1220+ 6940              // exits back to the caller word
1221+ 6940                              New_Def EXIT, "EXIT", is_code, is_normal
1221+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1221+ 6940             >
1221+ 6940             >                // dummy db directives used to calculate length of namec
1221+ 6940 45 58 49 54 >                db      "EXIT"
1221+ 6944             >len_NFA         defl    $ - temp_NFA
1221+ 6944             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1221+ 6940             >
1221+ 6940 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1221+ 6941 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1221+ 6945             >                org     $-1                 // alter last byte of Name just above to set
1221+ 6944 D4          >                db      {b $} | END_BIT     // msb as name end
1221+ 6945             >
1221+ 6945 34 69       >                dw      last_NFA            // Link to previous definition Name
1221+ 6947             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1221+ 6947 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1221+ 6947 ~           >
1221+ 6947 ~           >
1221+ 6947             >                endif           ; ok        // for other definitions it "points" the correct handler
1221+ 6947             >                // Use of "; ok" to suppress "warning[fwdref]"
1221+ 6947             >
1221+ 6947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1222+ 6947                              ldhlrp                      // Get Return Stack Pointer
1222+ 6947 2A 96 63    >                ld      hl,(RP_Pointer)
1223+ 694A 4E                           ld      c, (hl)             // pop Instruction Pointer
1224+ 694B 23                           inc     hl                  // from Return Stack
1225+ 694C 46                           ld      b, (hl)
1226+ 694D 23                           inc     hl
1227+ 694E                              ldrphl                      // Set Return Stack Pointer
1227+ 694E 22 96 63    >                ld      (RP_Pointer),hl
1228+ 6951                              next
1228+ 6951 DD E9       >                jp      (ix)
1229+ 6953
1230+ 6953              //  ______________________________________________________________________
1231+ 6953              //
1232+ 6953              // lastl      --
1233+ 6953              // exits back to the caller word
1234+ 6953              //              New_Def EXIT, "LASTL", is_code, is_normal
1235+ 6953              //              ldhlrp                      // Get Return Stack Pointer
1236+ 6953              //              ld      e, (hl)             // pop Instruction Pointer
1237+ 6953              //              inc     hl                  // from Return Stack
1238+ 6953              //              ld      d, (hl)
1239+ 6953              //              inc     hl
1240+ 6953              //              ld      (hl), e
1241+ 6953              //              inc     hl
1242+ 6953              //              ld      (hl), d
1243+ 6953              //              next
1244+ 6953
1245+ 6953              //  ______________________________________________________________________
1246+ 6953              //
1247+ 6953              // >r      n --
1248+ 6953              // pop from calculator-stack and push into return-stack
1249+ 6953                              New_Def TO_R, ">R", is_code, is_normal
1249+ 6953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 6953             >
1249+ 6953             >                // dummy db directives used to calculate length of namec
1249+ 6953 3E 52       >                db      ">R"
1249+ 6955             >len_NFA         defl    $ - temp_NFA
1249+ 6955             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 6953             >
1249+ 6953 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 6954 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1249+ 6956             >                org     $-1                 // alter last byte of Name just above to set
1249+ 6955 D2          >                db      {b $} | END_BIT     // msb as name end
1249+ 6956             >
1249+ 6956 40 69       >                dw      last_NFA            // Link to previous definition Name
1249+ 6958             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 6958 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 6958 ~           >
1249+ 6958 ~           >
1249+ 6958             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 6958             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 6958             >
1249+ 6958             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 6958 D1                           pop     de
1251+ 6959                              ldhlrp
1251+ 6959 2A 96 63    >                ld      hl,(RP_Pointer)
1252+ 695C 2B                           dec     hl
1253+ 695D 72                           ld      (hl), d             // store current TOS
1254+ 695E 2B                           dec     hl                  // to Return Stack
1255+ 695F 73                           ld      (hl), e
1256+ 6960                              ldrphl
1256+ 6960 22 96 63    >                ld      (RP_Pointer),hl
1257+ 6963
1258+ 6963                              next
1258+ 6963 DD E9       >                jp      (ix)
1259+ 6965
1260+ 6965              //  ______________________________________________________________________
1261+ 6965              //
1262+ 6965              // r>      -- n
1263+ 6965              // pop from return-stack and push into calculator-stack
1264+ 6965                              New_Def R_TO, "R>", is_code, is_normal
1264+ 6965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ 6965             >
1264+ 6965             >                // dummy db directives used to calculate length of namec
1264+ 6965 52 3E       >                db      "R>"
1264+ 6967             >len_NFA         defl    $ - temp_NFA
1264+ 6967             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ 6965             >
1264+ 6965 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ 6966 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1264+ 6968             >                org     $-1                 // alter last byte of Name just above to set
1264+ 6967 BE          >                db      {b $} | END_BIT     // msb as name end
1264+ 6968             >
1264+ 6968 53 69       >                dw      last_NFA            // Link to previous definition Name
1264+ 696A             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 696A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1264+ 696A ~           >
1264+ 696A ~           >
1264+ 696A             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 696A             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 696A             >
1264+ 696A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 696A
1266+ 696A                              ldhlrp
1266+ 696A 2A 96 63    >                ld      hl,(RP_Pointer)
1267+ 696D 5E                           ld      e, (hl)             // retrieve from Return Stack
1268+ 696E 23                           inc     hl
1269+ 696F 56                           ld      d, (hl)
1270+ 6970 23                           inc     hl
1271+ 6971                              ldrphl
1271+ 6971 22 96 63    >                ld      (RP_Pointer),hl
1272+ 6974 D5                           push    de
1273+ 6975                              next
1273+ 6975 DD E9       >                jp      (ix)
1274+ 6977
1275+ 6977              //  ______________________________________________________________________
1276+ 6977              //
1277+ 6977              // r@           -- n
1278+ 6977              // return on top of stack the value of top of return-stack
1279+ 6977              // Since this is the same as I, we alter R's CFA to jump there
1280+ 6977                              New_Def R_OP, "R@", is_code, is_normal
1280+ 6977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 6977             >
1280+ 6977             >                // dummy db directives used to calculate length of namec
1280+ 6977 52 40       >                db      "R@"
1280+ 6979             >len_NFA         defl    $ - temp_NFA
1280+ 6979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 6977             >
1280+ 6977 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 6978 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1280+ 697A             >                org     $-1                 // alter last byte of Name just above to set
1280+ 6979 C0          >                db      {b $} | END_BIT     // msb as name end
1280+ 697A             >
1280+ 697A 65 69       >                dw      last_NFA            // Link to previous definition Name
1280+ 697C             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 697C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1280+ 697C ~           >
1280+ 697C ~           >
1280+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 697C             >
1280+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 697C C3 78 64                     jp      I_Ptr
1282+ 697F
1283+ 697F              //  ______________________________________________________________________
1284+ 697F              //
1285+ 697F              // r            -- n
1286+ 697F              // return on top of stack the value of top of return-stack
1287+ 697F              // Since this is the same as I, we alter R's CFA to jump there
1288+ 697F              //              New_Def R_OLD, "R", is_code, is_normal
1289+ 697F              //              jp      I_Ptr
1290+ 697F
1291+ 697F              //  ______________________________________________________________________
1292+ 697F              //
1293+ 697F              // 0=           n -- f
1294+ 697F              // true (non zero) if n is zero, false (0) elsewere
1295+ 697F                              New_Def ZEQUAL, "0=", is_code, is_normal
1295+ 697F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1295+ 697F             >
1295+ 697F             >                // dummy db directives used to calculate length of namec
1295+ 697F 30 3D       >                db      "0="
1295+ 6981             >len_NFA         defl    $ - temp_NFA
1295+ 6981             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1295+ 697F             >
1295+ 697F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1295+ 6980 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1295+ 6982             >                org     $-1                 // alter last byte of Name just above to set
1295+ 6981 BD          >                db      {b $} | END_BIT     // msb as name end
1295+ 6982             >
1295+ 6982 77 69       >                dw      last_NFA            // Link to previous definition Name
1295+ 6984             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1295+ 6984 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1295+ 6984 ~           >
1295+ 6984 ~           >
1295+ 6984             >                endif           ; ok        // for other definitions it "points" the correct handler
1295+ 6984             >                // Use of "; ok" to suppress "warning[fwdref]"
1295+ 6984             >
1295+ 6984             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1296+ 6984              Zero_Equal:
1297+ 6984 E1                           pop     hl
1298+ 6985 7D                           ld      a, l
1299+ 6986 B4                           or      h
1300+ 6987 21 00 00                     ld      hl, FALSE_FLAG
1301+ 698A 20 01                        jr      nz, ZEqual_Skip
1302+ 698C 2B                               dec     hl
1303+ 698D              ZEqual_Skip:
1304+ 698D                              psh1
1304+ 698D E5          >                push    hl
1304+ 698E DD E9       >                jp      (ix)
1305+ 6990
1306+ 6990              //  ______________________________________________________________________
1307+ 6990              //
1308+ 6990              // not         a1 -- a2
1309+ 6990              // increment by 2 top of stack
1310+ 6990                              New_Def NOT_OP, "NOT", is_code, is_normal
1310+ 6990             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1310+ 6990             >
1310+ 6990             >                // dummy db directives used to calculate length of namec
1310+ 6990 4E 4F 54    >                db      "NOT"
1310+ 6993             >len_NFA         defl    $ - temp_NFA
1310+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1310+ 6990             >
1310+ 6990 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1310+ 6991 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1310+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1310+ 6993 D4          >                db      {b $} | END_BIT     // msb as name end
1310+ 6994             >
1310+ 6994 7F 69       >                dw      last_NFA            // Link to previous definition Name
1310+ 6996             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1310+ 6996 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1310+ 6996 ~           >
1310+ 6996 ~           >
1310+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1310+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1310+ 6996             >
1310+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1311+ 6996 C3 84 69                     jp      Zero_Equal
1312+ 6999
1313+ 6999              //  ______________________________________________________________________
1314+ 6999              //
1315+ 6999              // 0<           n -- f
1316+ 6999              // true (non zero) if n is less than zero, false (0) elsewere
1317+ 6999                              New_Def ZLESS, "0<", is_code, is_normal
1317+ 6999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1317+ 6999             >
1317+ 6999             >                // dummy db directives used to calculate length of namec
1317+ 6999 30 3C       >                db      "0<"
1317+ 699B             >len_NFA         defl    $ - temp_NFA
1317+ 699B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1317+ 6999             >
1317+ 6999 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1317+ 699A 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1317+ 699C             >                org     $-1                 // alter last byte of Name just above to set
1317+ 699B BC          >                db      {b $} | END_BIT     // msb as name end
1317+ 699C             >
1317+ 699C 90 69       >                dw      last_NFA            // Link to previous definition Name
1317+ 699E             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1317+ 699E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1317+ 699E ~           >
1317+ 699E ~           >
1317+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1317+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1317+ 699E             >
1317+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1318+ 699E E1                           pop     hl
1319+ 699F 29                           add     hl, hl
1320+ 69A0 ED 62                        sbc     hl, hl
1321+ 69A2                              psh1
1321+ 69A2 E5          >                push    hl
1321+ 69A3 DD E9       >                jp      (ix)
1322+ 69A5
1323+ 69A5              //  ______________________________________________________________________
1324+ 69A5              //
1325+ 69A5              // 0>           n -- f
1326+ 69A5              // true (non zero) if n is less than zero, false (0) elsewere
1327+ 69A5                              New_Def ZGREATER, "0>", is_code, is_normal
1327+ 69A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1327+ 69A5             >
1327+ 69A5             >                // dummy db directives used to calculate length of namec
1327+ 69A5 30 3E       >                db      "0>"
1327+ 69A7             >len_NFA         defl    $ - temp_NFA
1327+ 69A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1327+ 69A5             >
1327+ 69A5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1327+ 69A6 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1327+ 69A8             >                org     $-1                 // alter last byte of Name just above to set
1327+ 69A7 BE          >                db      {b $} | END_BIT     // msb as name end
1327+ 69A8             >
1327+ 69A8 99 69       >                dw      last_NFA            // Link to previous definition Name
1327+ 69AA             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1327+ 69AA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1327+ 69AA ~           >
1327+ 69AA ~           >
1327+ 69AA             >                endif           ; ok        // for other definitions it "points" the correct handler
1327+ 69AA             >                // Use of "; ok" to suppress "warning[fwdref]"
1327+ 69AA             >
1327+ 69AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1328+ 69AA E1                           pop     hl
1329+ 69AB 7D                           ld      a, l
1330+ 69AC B4                           or      h
1331+ 69AD 29                           add     hl, hl
1332+ 69AE 21 00 00                     ld      hl, FALSE_FLAG
1333+ 69B1 38 04                        jr      c, ZGreater_Skip
1334+ 69B3 A7                               and     a
1335+ 69B4 28 01                            jr      z, ZGreater_Skip
1336+ 69B6 2B                                   dec     hl
1337+ 69B7              ZGreater_Skip:
1338+ 69B7                              psh1
1338+ 69B7 E5          >                push    hl
1338+ 69B8 DD E9       >                jp      (ix)
1339+ 69BA
1340+ 69BA              //  ______________________________________________________________________
1341+ 69BA              //
1342+ 69BA              // +            n1 n2 -- n3
1343+ 69BA              // returns the unsigned sum of two top values
1344+ 69BA                              New_Def PLUS, "+", is_code, is_normal
1344+ 69BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1344+ 69BA             >
1344+ 69BA             >                // dummy db directives used to calculate length of namec
1344+ 69BA 2B          >                db      "+"
1344+ 69BB             >len_NFA         defl    $ - temp_NFA
1344+ 69BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1344+ 69BA             >
1344+ 69BA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1344+ 69BB 2B          >                db      "+"               // name string in 7-bit ascii, but
1344+ 69BC             >                org     $-1                 // alter last byte of Name just above to set
1344+ 69BB AB          >                db      {b $} | END_BIT     // msb as name end
1344+ 69BC             >
1344+ 69BC A5 69       >                dw      last_NFA            // Link to previous definition Name
1344+ 69BE             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1344+ 69BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1344+ 69BE ~           >
1344+ 69BE ~           >
1344+ 69BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1344+ 69BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1344+ 69BE             >
1344+ 69BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1345+ 69BE E1                           pop     hl
1346+ 69BF D1                           pop     de
1347+ 69C0 19                           add     hl, de
1348+ 69C1
1349+ 69C1                              psh1
1349+ 69C1 E5          >                push    hl
1349+ 69C2 DD E9       >                jp      (ix)
1350+ 69C4
1351+ 69C4
1352+ 69C4              //  ______________________________________________________________________
1353+ 69C4              //
1354+ 69C4              // d+           d1 d2 -- d3
1355+ 69C4              // returns the unsigned sum of two top double-numbers
1356+ 69C4              //      d2  d1
1357+ 69C4              //      h l h l
1358+ 69C4              // SP   LHEDLHED
1359+ 69C4              // SP  +01234567
1360+ 69C4                              New_Def DPLUS, "D+", is_code, is_normal
1360+ 69C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1360+ 69C4             >
1360+ 69C4             >                // dummy db directives used to calculate length of namec
1360+ 69C4 44 2B       >                db      "D+"
1360+ 69C6             >len_NFA         defl    $ - temp_NFA
1360+ 69C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1360+ 69C4             >
1360+ 69C4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1360+ 69C5 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1360+ 69C7             >                org     $-1                 // alter last byte of Name just above to set
1360+ 69C6 AB          >                db      {b $} | END_BIT     // msb as name end
1360+ 69C7             >
1360+ 69C7 BA 69       >                dw      last_NFA            // Link to previous definition Name
1360+ 69C9             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1360+ 69C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1360+ 69C9 ~           >
1360+ 69C9 ~           >
1360+ 69C9             >                endif           ; ok        // for other definitions it "points" the correct handler
1360+ 69C9             >                // Use of "; ok" to suppress "warning[fwdref]"
1360+ 69C9             >
1360+ 69C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1361+ 69C9
1362+ 69C9 D9                           exx
1363+ 69CA C1                           pop     bc                  // bc := d2.H
1364+ 69CB D1                           pop     de                  // hl := d2.L
1365+ 69CC E1                           pop     hl                  // d1.H
1366+ 69CD E3                           ex      (sp), hl            // d1.L
1367+ 69CE 19                           add     hl, de              // hl := d2.L + d1.L
1368+ 69CF E3                           ex      (sp), hl            // d1.H
1369+ 69D0 ED 4A                        adc     hl, bc              // d1.H + d2.H
1370+ 69D2 E5                           push    hl
1371+ 69D3 D9                           exx
1372+ 69D4                              next
1372+ 69D4 DD E9       >                jp      (ix)
1373+ 69D6
1374+ 69D6              //  ______________________________________________________________________
1375+ 69D6              //
1376+ 69D6              // 1+           n1 -- n2
1377+ 69D6              // increment by 1 top of stack
1378+ 69D6                              New_Def ONE_PLUS, "1+", is_code, is_normal
1378+ 69D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1378+ 69D6             >
1378+ 69D6             >                // dummy db directives used to calculate length of namec
1378+ 69D6 31 2B       >                db      "1+"
1378+ 69D8             >len_NFA         defl    $ - temp_NFA
1378+ 69D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1378+ 69D6             >
1378+ 69D6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1378+ 69D7 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1378+ 69D9             >                org     $-1                 // alter last byte of Name just above to set
1378+ 69D8 AB          >                db      {b $} | END_BIT     // msb as name end
1378+ 69D9             >
1378+ 69D9 C4 69       >                dw      last_NFA            // Link to previous definition Name
1378+ 69DB             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1378+ 69DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1378+ 69DB ~           >
1378+ 69DB ~           >
1378+ 69DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1378+ 69DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1378+ 69DB             >
1378+ 69DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1379+ 69DB E1                           pop     hl
1380+ 69DC 23                           inc     hl
1381+ 69DD
1382+ 69DD                              psh1
1382+ 69DD E5          >                push    hl
1382+ 69DE DD E9       >                jp      (ix)
1383+ 69E0
1384+ 69E0              //  ______________________________________________________________________
1385+ 69E0              //
1386+ 69E0              // 1-           n1 -- n2
1387+ 69E0              // decrement by 1 top of stack
1388+ 69E0                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1388+ 69E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1388+ 69E0             >
1388+ 69E0             >                // dummy db directives used to calculate length of namec
1388+ 69E0 31 2D       >                db      "1-"
1388+ 69E2             >len_NFA         defl    $ - temp_NFA
1388+ 69E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1388+ 69E0             >
1388+ 69E0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1388+ 69E1 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1388+ 69E3             >                org     $-1                 // alter last byte of Name just above to set
1388+ 69E2 AD          >                db      {b $} | END_BIT     // msb as name end
1388+ 69E3             >
1388+ 69E3 D6 69       >                dw      last_NFA            // Link to previous definition Name
1388+ 69E5             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1388+ 69E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1388+ 69E5 ~           >
1388+ 69E5 ~           >
1388+ 69E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1388+ 69E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1388+ 69E5             >
1388+ 69E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1389+ 69E5 E1                           pop     hl
1390+ 69E6 2B                           dec     hl
1391+ 69E7
1392+ 69E7                              psh1
1392+ 69E7 E5          >                push    hl
1392+ 69E8 DD E9       >                jp      (ix)
1393+ 69EA
1394+ 69EA              //  ______________________________________________________________________
1395+ 69EA              //
1396+ 69EA              // 2+           n1 -- n2
1397+ 69EA              // increment by 2 top of stack
1398+ 69EA                              New_Def TWO_PLUS, "2+", is_code, is_normal
1398+ 69EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1398+ 69EA             >
1398+ 69EA             >                // dummy db directives used to calculate length of namec
1398+ 69EA 32 2B       >                db      "2+"
1398+ 69EC             >len_NFA         defl    $ - temp_NFA
1398+ 69EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1398+ 69EA             >
1398+ 69EA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1398+ 69EB 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1398+ 69ED             >                org     $-1                 // alter last byte of Name just above to set
1398+ 69EC AB          >                db      {b $} | END_BIT     // msb as name end
1398+ 69ED             >
1398+ 69ED E0 69       >                dw      last_NFA            // Link to previous definition Name
1398+ 69EF             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1398+ 69EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1398+ 69EF ~           >
1398+ 69EF ~           >
1398+ 69EF             >                endif           ; ok        // for other definitions it "points" the correct handler
1398+ 69EF             >                // Use of "; ok" to suppress "warning[fwdref]"
1398+ 69EF             >
1398+ 69EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1399+ 69EF              Two_Plus:
1400+ 69EF E1                           pop     hl
1401+ 69F0 23                           inc     hl
1402+ 69F1 23                           inc     hl
1403+ 69F2
1404+ 69F2                              psh1
1404+ 69F2 E5          >                push    hl
1404+ 69F3 DD E9       >                jp      (ix)
1405+ 69F5
1406+ 69F5              //  ______________________________________________________________________
1407+ 69F5              //
1408+ 69F5              // cell+        a1 -- a2
1409+ 69F5              // increment by 2 top of stack
1410+ 69F5                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1410+ 69F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ 69F5             >
1410+ 69F5             >                // dummy db directives used to calculate length of namec
1410+ 69F5 43 45 4C 4C >                db      "CELL+"
1410+ 69F9 2B          >
1410+ 69FA             >len_NFA         defl    $ - temp_NFA
1410+ 69FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ 69F5             >
1410+ 69F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ 69F6 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1410+ 69FA 2B          >
1410+ 69FB             >                org     $-1                 // alter last byte of Name just above to set
1410+ 69FA AB          >                db      {b $} | END_BIT     // msb as name end
1410+ 69FB             >
1410+ 69FB EA 69       >                dw      last_NFA            // Link to previous definition Name
1410+ 69FD             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 69FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1410+ 69FD ~           >
1410+ 69FD ~           >
1410+ 69FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 69FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 69FD             >
1410+ 69FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 69FD C3 EF 69                     jp      Two_Plus
1412+ 6A00
1413+ 6A00              //  ______________________________________________________________________
1414+ 6A00              //
1415+ 6A00              // align        a1 -- a2
1416+ 6A00              // align memory : not used
1417+ 6A00              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1418+ 6A00              //            next
1419+ 6A00
1420+ 6A00              //  ______________________________________________________________________
1421+ 6A00              //
1422+ 6A00              // cell-        a1 -- a2
1423+ 6A00              // decrement by 2 top of stack
1424+ 6A00                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1424+ 6A00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1424+ 6A00             >
1424+ 6A00             >                // dummy db directives used to calculate length of namec
1424+ 6A00 43 45 4C 4C >                db      "CELL-"
1424+ 6A04 2D          >
1424+ 6A05             >len_NFA         defl    $ - temp_NFA
1424+ 6A05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1424+ 6A00             >
1424+ 6A00 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1424+ 6A01 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1424+ 6A05 2D          >
1424+ 6A06             >                org     $-1                 // alter last byte of Name just above to set
1424+ 6A05 AD          >                db      {b $} | END_BIT     // msb as name end
1424+ 6A06             >
1424+ 6A06 F5 69       >                dw      last_NFA            // Link to previous definition Name
1424+ 6A08             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1424+ 6A08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1424+ 6A08 ~           >
1424+ 6A08 ~           >
1424+ 6A08             >                endif           ; ok        // for other definitions it "points" the correct handler
1424+ 6A08             >                // Use of "; ok" to suppress "warning[fwdref]"
1424+ 6A08             >
1424+ 6A08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1425+ 6A08              CellMinus:
1426+ 6A08 E1                           pop     hl
1427+ 6A09 2B                           dec     hl
1428+ 6A0A 2B                           dec     hl
1429+ 6A0B
1430+ 6A0B                              psh1
1430+ 6A0B E5          >                push    hl
1430+ 6A0C DD E9       >                jp      (ix)
1431+ 6A0E
1432+ 6A0E              //  ______________________________________________________________________
1433+ 6A0E              //
1434+ 6A0E              // 2-           a1 -- a2
1435+ 6A0E              // decrement by 2 top of stack
1436+ 6A0E                              New_Def TWO_MINUS, "2-", is_code, is_normal
1436+ 6A0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1436+ 6A0E             >
1436+ 6A0E             >                // dummy db directives used to calculate length of namec
1436+ 6A0E 32 2D       >                db      "2-"
1436+ 6A10             >len_NFA         defl    $ - temp_NFA
1436+ 6A10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1436+ 6A0E             >
1436+ 6A0E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1436+ 6A0F 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1436+ 6A11             >                org     $-1                 // alter last byte of Name just above to set
1436+ 6A10 AD          >                db      {b $} | END_BIT     // msb as name end
1436+ 6A11             >
1436+ 6A11 00 6A       >                dw      last_NFA            // Link to previous definition Name
1436+ 6A13             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1436+ 6A13 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1436+ 6A13 ~           >
1436+ 6A13 ~           >
1436+ 6A13             >                endif           ; ok        // for other definitions it "points" the correct handler
1436+ 6A13             >                // Use of "; ok" to suppress "warning[fwdref]"
1436+ 6A13             >
1436+ 6A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1437+ 6A13 C3 08 6A                     jp      CellMinus
1438+ 6A16
1439+ 6A16              //  ______________________________________________________________________
1440+ 6A16              //
1441+ 6A16              // negate       n1 -- n2
1442+ 6A16              // change the sign of number
1443+ 6A16                              New_Def MINUS, "NEGATE", is_code, is_normal
1443+ 6A16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1443+ 6A16             >
1443+ 6A16             >                // dummy db directives used to calculate length of namec
1443+ 6A16 4E 45 47 41 >                db      "NEGATE"
1443+ 6A1A 54 45       >
1443+ 6A1C             >len_NFA         defl    $ - temp_NFA
1443+ 6A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1443+ 6A16             >
1443+ 6A16 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1443+ 6A17 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1443+ 6A1B 54 45       >
1443+ 6A1D             >                org     $-1                 // alter last byte of Name just above to set
1443+ 6A1C C5          >                db      {b $} | END_BIT     // msb as name end
1443+ 6A1D             >
1443+ 6A1D 0E 6A       >                dw      last_NFA            // Link to previous definition Name
1443+ 6A1F             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1443+ 6A1F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1443+ 6A1F ~           >
1443+ 6A1F ~           >
1443+ 6A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1443+ 6A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1443+ 6A1F             >
1443+ 6A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1444+ 6A1F 21 00 00                     ld      hl, 0               // subtract from 0
1445+ 6A22 D1                           pop     de
1446+ 6A23 B7                           or      a
1447+ 6A24 ED 52                        sbc     hl, de
1448+ 6A26
1449+ 6A26                              psh1
1449+ 6A26 E5          >                push    hl
1449+ 6A27 DD E9       >                jp      (ix)
1450+ 6A29
1451+ 6A29              //  ______________________________________________________________________
1452+ 6A29              //
1453+ 6A29              // dnegate      d1 -- d2
1454+ 6A29              // change the sign of a double number
1455+ 6A29                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1455+ 6A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ 6A29             >
1455+ 6A29             >                // dummy db directives used to calculate length of namec
1455+ 6A29 44 4E 45 47 >                db      "DNEGATE"
1455+ 6A2D 41 54 45    >
1455+ 6A30             >len_NFA         defl    $ - temp_NFA
1455+ 6A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ 6A29             >
1455+ 6A29 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ 6A2A 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1455+ 6A2E 41 54 45    >
1455+ 6A31             >                org     $-1                 // alter last byte of Name just above to set
1455+ 6A30 C5          >                db      {b $} | END_BIT     // msb as name end
1455+ 6A31             >
1455+ 6A31 16 6A       >                dw      last_NFA            // Link to previous definition Name
1455+ 6A33             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 6A33 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1455+ 6A33 ~           >
1455+ 6A33 ~           >
1455+ 6A33             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 6A33             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 6A33             >
1455+ 6A33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 6A33 D9                           exx
1457+ 6A34 C1                           pop     bc                  // d1.H
1458+ 6A35 D1                           pop     de                  // d1.L
1459+ 6A36 AF                           xor     a
1460+ 6A37 67                           ld      h, a
1461+ 6A38 6F                           ld      l, a
1462+ 6A39 ED 52                        sbc     hl, de              // subtact from zero
1463+ 6A3B E5                           push    hl                  // > d2-L
1464+ 6A3C 67                           ld      h, a
1465+ 6A3D 6F                           ld      l, a
1466+ 6A3E ED 42                        sbc     hl, bc              // subtract from zero with carry
1467+ 6A40                                                          // > d2-H
1468+ 6A40 E5                           push    hl
1469+ 6A41 D9                           exx
1470+ 6A42                              next
1470+ 6A42 DD E9       >                jp      (ix)
1471+ 6A44
1472+ 6A44              //  ______________________________________________________________________
1473+ 6A44              //
1474+ 6A44              // over         n1 n2 -- n1 n2 n1
1475+ 6A44              // copy the second value of stack and put it on top.
1476+ 6A44                              New_Def OVER, "OVER", is_code, is_normal
1476+ 6A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1476+ 6A44             >
1476+ 6A44             >                // dummy db directives used to calculate length of namec
1476+ 6A44 4F 56 45 52 >                db      "OVER"
1476+ 6A48             >len_NFA         defl    $ - temp_NFA
1476+ 6A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1476+ 6A44             >
1476+ 6A44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1476+ 6A45 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1476+ 6A49             >                org     $-1                 // alter last byte of Name just above to set
1476+ 6A48 D2          >                db      {b $} | END_BIT     // msb as name end
1476+ 6A49             >
1476+ 6A49 29 6A       >                dw      last_NFA            // Link to previous definition Name
1476+ 6A4B             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1476+ 6A4B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1476+ 6A4B ~           >
1476+ 6A4B ~           >
1476+ 6A4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1476+ 6A4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1476+ 6A4B             >
1476+ 6A4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1477+ 6A4B F1                           pop     af                  //   n2
1478+ 6A4C E1                           pop     hl                  // < n1
1479+ 6A4D E5                           push    hl                  // > n1
1480+ 6A4E F5                           push    af                  // > n2
1481+ 6A4F E5                           push    hl                  // > n1
1482+ 6A50                              next
1482+ 6A50 DD E9       >                jp      (ix)
1483+ 6A52
1484+ 6A52              //  ______________________________________________________________________
1485+ 6A52              //
1486+ 6A52              // drop         n1 --
1487+ 6A52              // drops the top of stack
1488+ 6A52                              New_Def DROP, "DROP", is_code, is_normal
1488+ 6A52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1488+ 6A52             >
1488+ 6A52             >                // dummy db directives used to calculate length of namec
1488+ 6A52 44 52 4F 50 >                db      "DROP"
1488+ 6A56             >len_NFA         defl    $ - temp_NFA
1488+ 6A56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1488+ 6A52             >
1488+ 6A52 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1488+ 6A53 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1488+ 6A57             >                org     $-1                 // alter last byte of Name just above to set
1488+ 6A56 D0          >                db      {b $} | END_BIT     // msb as name end
1488+ 6A57             >
1488+ 6A57 44 6A       >                dw      last_NFA            // Link to previous definition Name
1488+ 6A59             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1488+ 6A59 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1488+ 6A59 ~           >
1488+ 6A59 ~           >
1488+ 6A59             >                endif           ; ok        // for other definitions it "points" the correct handler
1488+ 6A59             >                // Use of "; ok" to suppress "warning[fwdref]"
1488+ 6A59             >
1488+ 6A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1489+ 6A59 E1                           pop     hl                  // < n1 and discard previous TOS
1490+ 6A5A                              next
1490+ 6A5A DD E9       >                jp      (ix)
1491+ 6A5C
1492+ 6A5C              //  ______________________________________________________________________
1493+ 6A5C              //
1494+ 6A5C              // nip          n1 n2 -- n2
1495+ 6A5C              // drops the second elemento on the stack
1496+ 6A5C                              New_Def NIP, "NIP", is_code, is_normal
1496+ 6A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ 6A5C             >
1496+ 6A5C             >                // dummy db directives used to calculate length of namec
1496+ 6A5C 4E 49 50    >                db      "NIP"
1496+ 6A5F             >len_NFA         defl    $ - temp_NFA
1496+ 6A5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ 6A5C             >
1496+ 6A5C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ 6A5D 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1496+ 6A60             >                org     $-1                 // alter last byte of Name just above to set
1496+ 6A5F D0          >                db      {b $} | END_BIT     // msb as name end
1496+ 6A60             >
1496+ 6A60 52 6A       >                dw      last_NFA            // Link to previous definition Name
1496+ 6A62             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 6A62 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1496+ 6A62 ~           >
1496+ 6A62 ~           >
1496+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 6A62             >
1496+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 6A62
1498+ 6A62 E1                           pop     hl                  // < n1 discarded
1499+ 6A63 E3                           ex      (sp), hl
1500+ 6A64                              next
1500+ 6A64 DD E9       >                jp      (ix)
1501+ 6A66
1502+ 6A66              //  ______________________________________________________________________
1503+ 6A66              //
1504+ 6A66              // tuck         n1 n2 -- n2 n1 n2
1505+ 6A66              // copy the top element after the second.
1506+ 6A66                              New_Def TUCK, "TUCK", is_code, is_normal
1506+ 6A66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1506+ 6A66             >
1506+ 6A66             >                // dummy db directives used to calculate length of namec
1506+ 6A66 54 55 43 4B >                db      "TUCK"
1506+ 6A6A             >len_NFA         defl    $ - temp_NFA
1506+ 6A6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1506+ 6A66             >
1506+ 6A66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1506+ 6A67 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1506+ 6A6B             >                org     $-1                 // alter last byte of Name just above to set
1506+ 6A6A CB          >                db      {b $} | END_BIT     // msb as name end
1506+ 6A6B             >
1506+ 6A6B 5C 6A       >                dw      last_NFA            // Link to previous definition Name
1506+ 6A6D             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1506+ 6A6D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1506+ 6A6D ~           >
1506+ 6A6D ~           >
1506+ 6A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1506+ 6A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1506+ 6A6D             >
1506+ 6A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1507+ 6A6D E1                           pop     hl
1508+ 6A6E F1                           pop     af                  // < n1
1509+ 6A6F E5                           push    hl                  // > n2  and TOS
1510+ 6A70 F5                           push    af                  // > n1
1511+ 6A71 E5                           push    hl
1512+ 6A72                              next
1512+ 6A72 DD E9       >                jp      (ix)
1513+ 6A74
1514+ 6A74              //  ______________________________________________________________________
1515+ 6A74              //
1516+ 6A74              // swap         n1 n2 -- n2 n1
1517+ 6A74              // swaps the two values on top of stack
1518+ 6A74                              New_Def SWAP, "SWAP", is_code, is_normal
1518+ 6A74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ 6A74             >
1518+ 6A74             >                // dummy db directives used to calculate length of namec
1518+ 6A74 53 57 41 50 >                db      "SWAP"
1518+ 6A78             >len_NFA         defl    $ - temp_NFA
1518+ 6A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ 6A74             >
1518+ 6A74 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ 6A75 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1518+ 6A79             >                org     $-1                 // alter last byte of Name just above to set
1518+ 6A78 D0          >                db      {b $} | END_BIT     // msb as name end
1518+ 6A79             >
1518+ 6A79 66 6A       >                dw      last_NFA            // Link to previous definition Name
1518+ 6A7B             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 6A7B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1518+ 6A7B ~           >
1518+ 6A7B ~           >
1518+ 6A7B             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 6A7B             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 6A7B             >
1518+ 6A7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 6A7B E1                           pop     hl                  // < n1
1520+ 6A7C E3                           ex      (sp),hl             // > n2
1521+ 6A7D E5                           push    hl                  // copy n1 to TOS
1522+ 6A7E                              next
1522+ 6A7E DD E9       >                jp      (ix)
1523+ 6A80
1524+ 6A80              //  ______________________________________________________________________
1525+ 6A80              //
1526+ 6A80              // dup         n -- n n
1527+ 6A80              // duplicates the top value of stack
1528+ 6A80                              New_Def DUP, "DUP", is_code, is_normal
1528+ 6A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1528+ 6A80             >
1528+ 6A80             >                // dummy db directives used to calculate length of namec
1528+ 6A80 44 55 50    >                db      "DUP"
1528+ 6A83             >len_NFA         defl    $ - temp_NFA
1528+ 6A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1528+ 6A80             >
1528+ 6A80 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1528+ 6A81 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1528+ 6A84             >                org     $-1                 // alter last byte of Name just above to set
1528+ 6A83 D0          >                db      {b $} | END_BIT     // msb as name end
1528+ 6A84             >
1528+ 6A84 74 6A       >                dw      last_NFA            // Link to previous definition Name
1528+ 6A86             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1528+ 6A86 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1528+ 6A86 ~           >
1528+ 6A86 ~           >
1528+ 6A86             >                endif           ; ok        // for other definitions it "points" the correct handler
1528+ 6A86             >                // Use of "; ok" to suppress "warning[fwdref]"
1528+ 6A86             >
1528+ 6A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1529+ 6A86 E1                           pop     hl
1530+ 6A87 E5                           push    hl                  // > n duplicate TOS
1531+ 6A88 E5                           push    hl
1532+ 6A89                              next
1532+ 6A89 DD E9       >                jp      (ix)
1533+ 6A8B
1534+ 6A8B              //  ______________________________________________________________________
1535+ 6A8B              //
1536+ 6A8B              // rot         n1 n2 n3 -- n2 n3 n1
1537+ 6A8B              // Rotates the 3 top values of stack by picking the 3rd in access-order
1538+ 6A8B              // and putting it on top. The other two are shifted down one place.
1539+ 6A8B                              New_Def ROT, "ROT", is_code, is_normal
1539+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ 6A8B             >
1539+ 6A8B             >                // dummy db directives used to calculate length of namec
1539+ 6A8B 52 4F 54    >                db      "ROT"
1539+ 6A8E             >len_NFA         defl    $ - temp_NFA
1539+ 6A8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ 6A8B             >
1539+ 6A8B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ 6A8C 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1539+ 6A8F             >                org     $-1                 // alter last byte of Name just above to set
1539+ 6A8E D4          >                db      {b $} | END_BIT     // msb as name end
1539+ 6A8F             >
1539+ 6A8F 80 6A       >                dw      last_NFA            // Link to previous definition Name
1539+ 6A91             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 6A91 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1539+ 6A91 ~           >
1539+ 6A91 ~           >
1539+ 6A91             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 6A91             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 6A91             >
1539+ 6A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 6A91 D1                           pop     de                  // < n3
1541+ 6A92 E1                           pop     hl                  // < n2
1542+ 6A93 E3                           ex      (sp),hl             // > n2 < n1
1543+ 6A94 D5                           push    de                  // > n3
1544+ 6A95 E5                           push    hl                  // copy n1 to TOS
1545+ 6A96                              next
1545+ 6A96 DD E9       >                jp      (ix)
1546+ 6A98
1547+ 6A98              //  ______________________________________________________________________
1548+ 6A98              //
1549+ 6A98              // -rot         n1 n2 n3 -- n3 n1 n2
1550+ 6A98              // Rotates the 3 top values of stack by picking the 1st in access-order
1551+ 6A98              // and putting back to 3rd place. The other two are shifted down one place.
1552+ 6A98                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1552+ 6A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1552+ 6A98             >
1552+ 6A98             >                // dummy db directives used to calculate length of namec
1552+ 6A98 2D 52 4F 54 >                db      "-ROT"
1552+ 6A9C             >len_NFA         defl    $ - temp_NFA
1552+ 6A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1552+ 6A98             >
1552+ 6A98 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1552+ 6A99 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1552+ 6A9D             >                org     $-1                 // alter last byte of Name just above to set
1552+ 6A9C D4          >                db      {b $} | END_BIT     // msb as name end
1552+ 6A9D             >
1552+ 6A9D 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1552+ 6A9F             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1552+ 6A9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1552+ 6A9F ~           >
1552+ 6A9F ~           >
1552+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1552+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1552+ 6A9F             >
1552+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1553+ 6A9F E1                           pop     hl                  // < n3
1554+ 6AA0 D1                           pop     de                  // < n2
1555+ 6AA1 E3                           ex      (sp),hl             // > n3 < n1
1556+ 6AA2 E5                           push    hl                  // > n1
1557+ 6AA3 D5                           push    de                  // copy n3 to TOS
1558+ 6AA4                              next
1558+ 6AA4 DD E9       >                jp      (ix)
1559+ 6AA6
1560+ 6AA6              //  ______________________________________________________________________
1561+ 6AA6              //
1562+ 6AA6              // pick        n1 -- nx
1563+ 6AA6              // picks the nth element from TOS
1564+ 6AA6                              New_Def PICK, "PICK", is_code, is_normal
1564+ 6AA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1564+ 6AA6             >
1564+ 6AA6             >                // dummy db directives used to calculate length of namec
1564+ 6AA6 50 49 43 4B >                db      "PICK"
1564+ 6AAA             >len_NFA         defl    $ - temp_NFA
1564+ 6AAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1564+ 6AA6             >
1564+ 6AA6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1564+ 6AA7 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1564+ 6AAB             >                org     $-1                 // alter last byte of Name just above to set
1564+ 6AAA CB          >                db      {b $} | END_BIT     // msb as name end
1564+ 6AAB             >
1564+ 6AAB 98 6A       >                dw      last_NFA            // Link to previous definition Name
1564+ 6AAD             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1564+ 6AAD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1564+ 6AAD ~           >
1564+ 6AAD ~           >
1564+ 6AAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1564+ 6AAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1564+ 6AAD             >
1564+ 6AAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1565+ 6AAD E1                           pop     hl                  // take TOS as index
1566+ 6AAE 29                           add     hl, hl              // as cells
1567+ 6AAF 39                           add     hl, sp              // from Stack Pointer
1568+ 6AB0 7E                           ld      a, (hl)             // replace TOS
1569+ 6AB1 23                           inc     hl
1570+ 6AB2 66                           ld      h, (hl)
1571+ 6AB3 6F                           ld      l, a
1572+ 6AB4
1573+ 6AB4                              psh1
1573+ 6AB4 E5          >                push    hl
1573+ 6AB5 DD E9       >                jp      (ix)
1574+ 6AB7
1575+ 6AB7
1576+ 6AB7              //  ______________________________________________________________________
1577+ 6AB7              //
1578+ 6AB7              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1579+ 6AB7              // picks the nth element from TOS
1580+ 6AB7              //              New_Def ROLL, "ROLL", is_code, is_normal
1581+ 6AB7              //              exx                     // we need all registers free
1582+ 6AB7              //              pop     hl              // number of cells to roll
1583+ 6AB7              //              ld      a, h
1584+ 6AB7              //              or       l
1585+ 6AB7              //              jr      z, Roll_Zero
1586+ 6AB7              //                  add     hl, hl              // number of bytes to move
1587+ 6AB7              //                  ld      b, h
1588+ 6AB7              //                  ld      c, l
1589+ 6AB7              //                  add     hl, sp          // address of n1
1590+ 6AB7              //                  ld      a, (hl)         // take n1 into a and a,
1591+ 6AB7              //                  inc     hl
1592+ 6AB7              //                  ex      af, af'
1593+ 6AB7              //                  ld      a, (hl)         // take n1 into a and a,
1594+ 6AB7              //                  ld      d, h
1595+ 6AB7              //                  ld      e, l
1596+ 6AB7              //                  dec     hl
1597+ 6AB7              //                  dec     hl
1598+ 6AB7              //                  lddr
1599+ 6AB7              //                  ex      de, hl
1600+ 6AB7              //                  ld      (hl), a
1601+ 6AB7              //                  dec     hl
1602+ 6AB7              //                  ex      af, af'
1603+ 6AB7              //                  ld      (hl), a
1604+ 6AB7              //Roll_Zero:
1605+ 6AB7              //              exx
1606+ 6AB7              //              next
1607+ 6AB7
1608+ 6AB7
1609+ 6AB7              //  ______________________________________________________________________
1610+ 6AB7              //
1611+ 6AB7              // 2over        d1 d2 -- d1 d2 d1
1612+ 6AB7              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1613+ 6AB7              // copy the second double of stack and put on top.
1614+ 6AB7              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1615+ 6AB7              //
1616+ 6AB7              //              ld      hl, 7
1617+ 6AB7              //              add     hl, sp
1618+ 6AB7              //              ld      d, (hl)
1619+ 6AB7              //              dec     hl
1620+ 6AB7              //              ld      e, (hl)             // d1-L
1621+ 6AB7              //              push    de
1622+ 6AB7              //              dec     hl
1623+ 6AB7              //              ld      d, (hl)
1624+ 6AB7              //              dec     hl
1625+ 6AB7              //              ld      e, (hl)             // d1-H
1626+ 6AB7              //              push    de
1627+ 6AB7              //              next
1628+ 6AB7
1629+ 6AB7              //  ______________________________________________________________________
1630+ 6AB7              //
1631+ 6AB7              // 2drop        d --
1632+ 6AB7              //              n1 n2 --
1633+ 6AB7              // drops the top double from stack
1634+ 6AB7                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1634+ 6AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1634+ 6AB7             >
1634+ 6AB7             >                // dummy db directives used to calculate length of namec
1634+ 6AB7 32 44 52 4F >                db      "2DROP"
1634+ 6ABB 50          >
1634+ 6ABC             >len_NFA         defl    $ - temp_NFA
1634+ 6ABC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1634+ 6AB7             >
1634+ 6AB7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1634+ 6AB8 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1634+ 6ABC 50          >
1634+ 6ABD             >                org     $-1                 // alter last byte of Name just above to set
1634+ 6ABC D0          >                db      {b $} | END_BIT     // msb as name end
1634+ 6ABD             >
1634+ 6ABD A6 6A       >                dw      last_NFA            // Link to previous definition Name
1634+ 6ABF             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1634+ 6ABF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1634+ 6ABF ~           >
1634+ 6ABF ~           >
1634+ 6ABF             >                endif           ; ok        // for other definitions it "points" the correct handler
1634+ 6ABF             >                // Use of "; ok" to suppress "warning[fwdref]"
1634+ 6ABF             >
1634+ 6ABF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1635+ 6ABF E1                           pop     hl
1636+ 6AC0 E1                           pop     hl
1637+ 6AC1                              next
1637+ 6AC1 DD E9       >                jp      (ix)
1638+ 6AC3
1639+ 6AC3              //  ______________________________________________________________________
1640+ 6AC3              //
1641+ 6AC3              // 2nip         d1 d2 -- d2
1642+ 6AC3              //              n1 n2 n3 n4 -- n3 n4
1643+ 6AC3              // drops the second double on the stack
1644+ 6AC3              //              New_Def TWO_NIP, 4, "2nip"
1645+ 6AC3              //              ...
1646+ 6AC3
1647+ 6AC3              //  ______________________________________________________________________
1648+ 6AC3              //
1649+ 6AC3              // 2tuck         d1 d2 -- d2 d1 d2
1650+ 6AC3              // copy the top element after the second.
1651+ 6AC3              //              New_Def TWO_TUCK, 5, "2tuck"
1652+ 6AC3              //              ...
1653+ 6AC3
1654+ 6AC3              //  ______________________________________________________________________
1655+ 6AC3              //
1656+ 6AC3              // 2swap         d1 d2 -- d2 d1
1657+ 6AC3              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1658+ 6AC3              // swaps the two doubles on top of stack
1659+ 6AC3                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1659+ 6AC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1659+ 6AC3             >
1659+ 6AC3             >                // dummy db directives used to calculate length of namec
1659+ 6AC3 32 53 57 41 >                db      "2SWAP"
1659+ 6AC7 50          >
1659+ 6AC8             >len_NFA         defl    $ - temp_NFA
1659+ 6AC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1659+ 6AC3             >
1659+ 6AC3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1659+ 6AC4 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1659+ 6AC8 50          >
1659+ 6AC9             >                org     $-1                 // alter last byte of Name just above to set
1659+ 6AC8 D0          >                db      {b $} | END_BIT     // msb as name end
1659+ 6AC9             >
1659+ 6AC9 B7 6A       >                dw      last_NFA            // Link to previous definition Name
1659+ 6ACB             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1659+ 6ACB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1659+ 6ACB ~           >
1659+ 6ACB ~           >
1659+ 6ACB             >                endif           ; ok        // for other definitions it "points" the correct handler
1659+ 6ACB             >                // Use of "; ok" to suppress "warning[fwdref]"
1659+ 6ACB             >
1659+ 6ACB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1660+ 6ACB F1                           pop     af                  //   d2-H
1661+ 6ACC E1                           pop     hl                  // < d2-L
1662+ 6ACD D1                           pop     de                  // < d1-H
1663+ 6ACE E3                           ex      (sp), hl            // < d1-L > d2-L
1664+ 6ACF F5                           push    af                  // > d2-H
1665+ 6AD0 E5                           push    hl                  // > d1-L
1666+ 6AD1 D5                           push    de
1667+ 6AD2
1668+ 6AD2                              next
1668+ 6AD2 DD E9       >                jp      (ix)
1669+ 6AD4
1670+ 6AD4              //  ______________________________________________________________________
1671+ 6AD4              //
1672+ 6AD4              // 2dup         d -- d d
1673+ 6AD4              //              n1 n2 -- n1 n2 n1 n2
1674+ 6AD4              // duplicates the top double of stack
1675+ 6AD4                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1675+ 6AD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1675+ 6AD4             >
1675+ 6AD4             >                // dummy db directives used to calculate length of namec
1675+ 6AD4 32 44 55 50 >                db      "2DUP"
1675+ 6AD8             >len_NFA         defl    $ - temp_NFA
1675+ 6AD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1675+ 6AD4             >
1675+ 6AD4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1675+ 6AD5 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1675+ 6AD9             >                org     $-1                 // alter last byte of Name just above to set
1675+ 6AD8 D0          >                db      {b $} | END_BIT     // msb as name end
1675+ 6AD9             >
1675+ 6AD9 C3 6A       >                dw      last_NFA            // Link to previous definition Name
1675+ 6ADB             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1675+ 6ADB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1675+ 6ADB ~           >
1675+ 6ADB ~           >
1675+ 6ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
1675+ 6ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
1675+ 6ADB             >
1675+ 6ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1676+ 6ADB E1                           pop     hl                  // < d-H
1677+ 6ADC F1                           pop     af                  // < d-L
1678+ 6ADD F5                           push    af                  // < d-L
1679+ 6ADE E5                           push    hl                  // > d-H
1680+ 6ADF F5                           push    af                  // > d-L
1681+ 6AE0 E5                           push    hl                  // > d-H
1682+ 6AE1                              next
1682+ 6AE1 DD E9       >                jp      (ix)
1683+ 6AE3
1684+ 6AE3              //  ______________________________________________________________________
1685+ 6AE3              //
1686+ 6AE3              // 2rot         d1 d2 d3 -- d2 d3 d1
1687+ 6AE3              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1688+ 6AE3              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1689+ 6AE3              // and putting it on top. The other two are shifted down one place.
1690+ 6AE3              //              New_Def TWO?ROT, 4, "2rot"
1691+ 6AE3              //              ...
1692+ 6AE3              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1693+ 6AE3              //
1694+ 6AE3              //      d3  |d2  |d1  |
1695+ 6AE3              //      h l |h l |h l |
1696+ 6AE3              // SP   LHED|LHED|LHED|
1697+ 6AE3              // SP  +0123|4567|89ab|
1698+ 6AE3              //              ld      hl, $000B
1699+ 6AE3              //              add     hl, sp
1700+ 6AE3              //              ld      d, (hl)
1701+ 6AE3              //              dec     hl
1702+ 6AE3              //              ld      e, (hl)
1703+ 6AE3              //              dec     hl
1704+ 6AE3              //              push    de
1705+ 6AE3              //              ld      d, (hl)
1706+ 6AE3              //              dec     hl
1707+ 6AE3              //              ld      e, (hl)
1708+ 6AE3              //              dec     hl
1709+ 6AE3              //              push    de
1710+ 6AE3
1711+ 6AE3              //      d1  |d3  |d2  |d1  |
1712+ 6AE3              //      h l |h l |h l |h l |
1713+ 6AE3              // SP   LHED|LHED|LHED|LHED|
1714+ 6AE3              // SP       +0123|4567|89ab|
1715+ 6AE3
1716+ 6AE3              //              ld      d, h
1717+ 6AE3              //              ld      e, l
1718+ 6AE3              //              inc     de
1719+ 6AE3              //              inc     de
1720+ 6AE3              //              inc     de
1721+ 6AE3              //              inc     de
1722+ 6AE3              //              push    bc
1723+ 6AE3              //              ld      bc, $000C
1724+ 6AE3              //              lddr
1725+ 6AE3              //              pop     bc
1726+ 6AE3              //              pop     de
1727+ 6AE3              //              pop     de
1728+ 6AE3              //
1729+ 6AE3              //              next
1730+ 6AE3
1731+ 6AE3
1732+ 6AE3              //  ______________________________________________________________________
1733+ 6AE3              //
1734+ 6AE3              // +!           n a --
1735+ 6AE3              // Sums to the content of address a the number n.
1736+ 6AE3              // It is the same of  a @ n + a !
1737+ 6AE3                              New_Def PLUSSTORE, "+!", is_code, is_normal
1737+ 6AE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1737+ 6AE3             >
1737+ 6AE3             >                // dummy db directives used to calculate length of namec
1737+ 6AE3 2B 21       >                db      "+!"
1737+ 6AE5             >len_NFA         defl    $ - temp_NFA
1737+ 6AE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1737+ 6AE3             >
1737+ 6AE3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1737+ 6AE4 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1737+ 6AE6             >                org     $-1                 // alter last byte of Name just above to set
1737+ 6AE5 A1          >                db      {b $} | END_BIT     // msb as name end
1737+ 6AE6             >
1737+ 6AE6 D4 6A       >                dw      last_NFA            // Link to previous definition Name
1737+ 6AE8             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1737+ 6AE8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1737+ 6AE8 ~           >
1737+ 6AE8 ~           >
1737+ 6AE8             >                endif           ; ok        // for other definitions it "points" the correct handler
1737+ 6AE8             >                // Use of "; ok" to suppress "warning[fwdref]"
1737+ 6AE8             >
1737+ 6AE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1738+ 6AE8 E1                           pop     hl                  // hl is the address
1739+ 6AE9 D1                           pop     de                  // de is the number
1740+ 6AEA 7E                           ld      a, (hl)
1741+ 6AEB 83                           add     e
1742+ 6AEC 77                           ld      (hl), a
1743+ 6AED 23                           inc     hl
1744+ 6AEE 7E                           ld      a, (hl)
1745+ 6AEF 8A                           adc     d
1746+ 6AF0 77                           ld      (hl), a
1747+ 6AF1
1748+ 6AF1                              next
1748+ 6AF1 DD E9       >                jp      (ix)
1749+ 6AF3
1750+ 6AF3              //  ______________________________________________________________________
1751+ 6AF3              //
1752+ 6AF3              // toggle       a n --
1753+ 6AF3              // Complements (xor) the byte at addrress  a  with the model n.
1754+ 6AF3                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1754+ 6AF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1754+ 6AF3             >
1754+ 6AF3             >                // dummy db directives used to calculate length of namec
1754+ 6AF3 54 4F 47 47 >                db      "TOGGLE"
1754+ 6AF7 4C 45       >
1754+ 6AF9             >len_NFA         defl    $ - temp_NFA
1754+ 6AF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1754+ 6AF3             >
1754+ 6AF3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1754+ 6AF4 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1754+ 6AF8 4C 45       >
1754+ 6AFA             >                org     $-1                 // alter last byte of Name just above to set
1754+ 6AF9 C5          >                db      {b $} | END_BIT     // msb as name end
1754+ 6AFA             >
1754+ 6AFA E3 6A       >                dw      last_NFA            // Link to previous definition Name
1754+ 6AFC             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1754+ 6AFC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1754+ 6AFC ~           >
1754+ 6AFC ~           >
1754+ 6AFC             >                endif           ; ok        // for other definitions it "points" the correct handler
1754+ 6AFC             >                // Use of "; ok" to suppress "warning[fwdref]"
1754+ 6AFC             >
1754+ 6AFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1755+ 6AFC D1                           pop     de
1756+ 6AFD E1                           pop     hl
1757+ 6AFE 7E                           ld      a, (hl)
1758+ 6AFF AB                           xor     e
1759+ 6B00 77                           ld      (hl), a
1760+ 6B01
1761+ 6B01                              next
1761+ 6B01 DD E9       >                jp      (ix)
1762+ 6B03
1763+ 6B03              //  ______________________________________________________________________
1764+ 6B03              //
1765+ 6B03              // @            a -- n
1766+ 6B03              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1767+ 6B03                              New_Def FETCH, "@", is_code, is_normal
1767+ 6B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1767+ 6B03             >
1767+ 6B03             >                // dummy db directives used to calculate length of namec
1767+ 6B03 40          >                db      "@"
1767+ 6B04             >len_NFA         defl    $ - temp_NFA
1767+ 6B04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1767+ 6B03             >
1767+ 6B03 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1767+ 6B04 40          >                db      "@"               // name string in 7-bit ascii, but
1767+ 6B05             >                org     $-1                 // alter last byte of Name just above to set
1767+ 6B04 C0          >                db      {b $} | END_BIT     // msb as name end
1767+ 6B05             >
1767+ 6B05 F3 6A       >                dw      last_NFA            // Link to previous definition Name
1767+ 6B07             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1767+ 6B07 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1767+ 6B07 ~           >
1767+ 6B07 ~           >
1767+ 6B07             >                endif           ; ok        // for other definitions it "points" the correct handler
1767+ 6B07             >                // Use of "; ok" to suppress "warning[fwdref]"
1767+ 6B07             >
1767+ 6B07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1768+ 6B07 E1                           pop     hl
1769+ 6B08 5E                           ld      e, (hl)             // low-byte
1770+ 6B09 23                           inc     hl
1771+ 6B0A 56                           ld      d, (hl)             // high-byte
1772+ 6B0B D5                           push    de
1773+ 6B0C                              next
1773+ 6B0C DD E9       >                jp      (ix)
1774+ 6B0E
1775+ 6B0E              //  ______________________________________________________________________
1776+ 6B0E              //
1777+ 6B0E              // !            n a --
1778+ 6B0E              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1779+ 6B0E                              New_Def STORE, "!", is_code, is_normal
1779+ 6B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1779+ 6B0E             >
1779+ 6B0E             >                // dummy db directives used to calculate length of namec
1779+ 6B0E 21          >                db      "!"
1779+ 6B0F             >len_NFA         defl    $ - temp_NFA
1779+ 6B0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1779+ 6B0E             >
1779+ 6B0E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1779+ 6B0F 21          >                db      "!"               // name string in 7-bit ascii, but
1779+ 6B10             >                org     $-1                 // alter last byte of Name just above to set
1779+ 6B0F A1          >                db      {b $} | END_BIT     // msb as name end
1779+ 6B10             >
1779+ 6B10 03 6B       >                dw      last_NFA            // Link to previous definition Name
1779+ 6B12             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1779+ 6B12 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1779+ 6B12 ~           >
1779+ 6B12 ~           >
1779+ 6B12             >                endif           ; ok        // for other definitions it "points" the correct handler
1779+ 6B12             >                // Use of "; ok" to suppress "warning[fwdref]"
1779+ 6B12             >
1779+ 6B12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1780+ 6B12 E1                           pop     hl                  // address
1781+ 6B13 D1                           pop     de                  // < n
1782+ 6B14 73                           ld      (hl), e             // low-byte
1783+ 6B15 23                           inc     hl
1784+ 6B16 72                           ld      (hl), d             // high-byte
1785+ 6B17
1786+ 6B17                              next
1786+ 6B17 DD E9       >                jp      (ix)
1787+ 6B19
1788+ 6B19              //  ______________________________________________________________________
1789+ 6B19              //
1790+ 6B19              // c@           a -- c
1791+ 6B19              // fetch a character n from address a
1792+ 6B19                              New_Def CFETCH, "C@", is_code, is_normal
1792+ 6B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1792+ 6B19             >
1792+ 6B19             >                // dummy db directives used to calculate length of namec
1792+ 6B19 43 40       >                db      "C@"
1792+ 6B1B             >len_NFA         defl    $ - temp_NFA
1792+ 6B1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1792+ 6B19             >
1792+ 6B19 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1792+ 6B1A 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1792+ 6B1C             >                org     $-1                 // alter last byte of Name just above to set
1792+ 6B1B C0          >                db      {b $} | END_BIT     // msb as name end
1792+ 6B1C             >
1792+ 6B1C 0E 6B       >                dw      last_NFA            // Link to previous definition Name
1792+ 6B1E             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1792+ 6B1E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1792+ 6B1E ~           >
1792+ 6B1E ~           >
1792+ 6B1E             >                endif           ; ok        // for other definitions it "points" the correct handler
1792+ 6B1E             >                // Use of "; ok" to suppress "warning[fwdref]"
1792+ 6B1E             >
1792+ 6B1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1793+ 6B1E E1                           pop     hl
1794+ 6B1F 6E                           ld      l, (hl)             // low-byte
1795+ 6B20 26 00                        ld      h, 0
1796+ 6B22
1797+ 6B22                              psh1
1797+ 6B22 E5          >                push    hl
1797+ 6B23 DD E9       >                jp      (ix)
1798+ 6B25
1799+ 6B25              //  ______________________________________________________________________
1800+ 6B25              //
1801+ 6B25              // c!           c a --
1802+ 6B25              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1803+ 6B25                              New_Def CSTORE, "C!", is_code, is_normal
1803+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1803+ 6B25             >
1803+ 6B25             >                // dummy db directives used to calculate length of namec
1803+ 6B25 43 21       >                db      "C!"
1803+ 6B27             >len_NFA         defl    $ - temp_NFA
1803+ 6B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1803+ 6B25             >
1803+ 6B25 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1803+ 6B26 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1803+ 6B28             >                org     $-1                 // alter last byte of Name just above to set
1803+ 6B27 A1          >                db      {b $} | END_BIT     // msb as name end
1803+ 6B28             >
1803+ 6B28 19 6B       >                dw      last_NFA            // Link to previous definition Name
1803+ 6B2A             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1803+ 6B2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1803+ 6B2A ~           >
1803+ 6B2A ~           >
1803+ 6B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1803+ 6B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1803+ 6B2A             >
1803+ 6B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1804+ 6B2A E1                           pop     hl                  // < address
1805+ 6B2B D1                           pop     de
1806+ 6B2C 73                           ld      (hl), e             // low-byte
1807+ 6B2D
1808+ 6B2D                              next
1808+ 6B2D DD E9       >                jp      (ix)
1809+ 6B2F
1810+ 6B2F              //  ______________________________________________________________________
1811+ 6B2F              //
1812+ 6B2F              // 2@           a -- d
1813+ 6B2F              // fetch a 32 bits number d from address a and leaves it on top of the
1814+ 6B2F              // stack as two single numbers, high part as top of the stack.
1815+ 6B2F              // A double number is normally kept in CPU registers as HLDE.
1816+ 6B2F              // On stack a double number is treated as two single numbers
1817+ 6B2F              // where BC is on the top of the stack and HL is the second from top,
1818+ 6B2F              // so the sign of the number can be checked on top of stack
1819+ 6B2F              // and in the stack memory it appears as LHED.
1820+ 6B2F                              New_Def TWO_FETCH, "2@", is_code, is_normal
1820+ 6B2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1820+ 6B2F             >
1820+ 6B2F             >                // dummy db directives used to calculate length of namec
1820+ 6B2F 32 40       >                db      "2@"
1820+ 6B31             >len_NFA         defl    $ - temp_NFA
1820+ 6B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1820+ 6B2F             >
1820+ 6B2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1820+ 6B30 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1820+ 6B32             >                org     $-1                 // alter last byte of Name just above to set
1820+ 6B31 C0          >                db      {b $} | END_BIT     // msb as name end
1820+ 6B32             >
1820+ 6B32 25 6B       >                dw      last_NFA            // Link to previous definition Name
1820+ 6B34             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1820+ 6B34 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1820+ 6B34 ~           >
1820+ 6B34 ~           >
1820+ 6B34             >                endif           ; ok        // for other definitions it "points" the correct handler
1820+ 6B34             >                // Use of "; ok" to suppress "warning[fwdref]"
1820+ 6B34             >
1820+ 6B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1821+ 6B34 E1                           pop     hl                  // address
1822+ 6B35 5E                           ld      e, (hl)             // low-byte
1823+ 6B36 23                           inc     hl
1824+ 6B37 56                           ld      d, (hl)             // high-byte
1825+ 6B38 23                           inc     hl
1826+ 6B39 7E                           ld      a, (hl)             // low-byte
1827+ 6B3A 23                           inc     hl
1828+ 6B3B 66                           ld      h, (hl)             // high-byte
1829+ 6B3C 6F                           ld      l, a
1830+ 6B3D E5                           push    hl
1831+ 6B3E D5                           push    de
1832+ 6B3F                              next
1832+ 6B3F DD E9       >                jp      (ix)
1833+ 6B41
1834+ 6B41              //  ______________________________________________________________________
1835+ 6B41              //
1836+ 6B41              // 2!           d a --
1837+ 6B41              // stores a 32 bits number d from address a and leaves it on top of the
1838+ 6B41              // stack as two single numbers, high part as top of the stack.
1839+ 6B41              // A double number is normally kept in CPU registers as HLDE.
1840+ 6B41              // On stack a double number is treated as two single numbers
1841+ 6B41              // where BC is on the top of the stack and HL is the second from top,
1842+ 6B41              // so the sign of the number can be checked on top of stack
1843+ 6B41              // and in the stack memory it appears as LHED.
1844+ 6B41                              New_Def TWO_STORE, "2!", is_code, is_normal
1844+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1844+ 6B41             >
1844+ 6B41             >                // dummy db directives used to calculate length of namec
1844+ 6B41 32 21       >                db      "2!"
1844+ 6B43             >len_NFA         defl    $ - temp_NFA
1844+ 6B43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1844+ 6B41             >
1844+ 6B41 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1844+ 6B42 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1844+ 6B44             >                org     $-1                 // alter last byte of Name just above to set
1844+ 6B43 A1          >                db      {b $} | END_BIT     // msb as name end
1844+ 6B44             >
1844+ 6B44 2F 6B       >                dw      last_NFA            // Link to previous definition Name
1844+ 6B46             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1844+ 6B46 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1844+ 6B46 ~           >
1844+ 6B46 ~           >
1844+ 6B46             >                endif           ; ok        // for other definitions it "points" the correct handler
1844+ 6B46             >                // Use of "; ok" to suppress "warning[fwdref]"
1844+ 6B46             >
1844+ 6B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1845+ 6B46 D9                           exx
1846+ 6B47 E1                           pop     hl                  // address
1847+ 6B48 C1                           pop     bc                  // < high-part
1848+ 6B49 D1                           pop     de                  // < low-part > Instruction Pointer
1849+ 6B4A 71                           ld      (hl), c
1850+ 6B4B 23                           inc     hl
1851+ 6B4C 70                           ld      (hl), b
1852+ 6B4D 23                           inc     hl
1853+ 6B4E 73                           ld      (hl), e
1854+ 6B4F 23                           inc     hl
1855+ 6B50 72                           ld      (hl), d
1856+ 6B51 D9                           exx
1857+ 6B52                              next
1857+ 6B52 DD E9       >                jp      (ix)
1858+ 6B54
1859+ 6B54              //  ______________________________________________________________________
1860+ 6B54              //
1861+ 6B54              // p@           a -- c
1862+ 6B54              // Read one byte from port a and leave the result on top of stack
1863+ 6B54                              New_Def PFETCH, "P@", is_code, is_normal
1863+ 6B54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1863+ 6B54             >
1863+ 6B54             >                // dummy db directives used to calculate length of namec
1863+ 6B54 50 40       >                db      "P@"
1863+ 6B56             >len_NFA         defl    $ - temp_NFA
1863+ 6B56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1863+ 6B54             >
1863+ 6B54 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1863+ 6B55 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1863+ 6B57             >                org     $-1                 // alter last byte of Name just above to set
1863+ 6B56 C0          >                db      {b $} | END_BIT     // msb as name end
1863+ 6B57             >
1863+ 6B57 41 6B       >                dw      last_NFA            // Link to previous definition Name
1863+ 6B59             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1863+ 6B59 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1863+ 6B59 ~           >
1863+ 6B59 ~           >
1863+ 6B59             >                endif           ; ok        // for other definitions it "points" the correct handler
1863+ 6B59             >                // Use of "; ok" to suppress "warning[fwdref]"
1863+ 6B59             >
1863+ 6B59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1864+ 6B59 D9                           exx
1865+ 6B5A C1                           pop     bc
1866+ 6B5B 26 00                        ld      h, 0
1867+ 6B5D ED 68                        in      l, (c)
1868+ 6B5F E5                           push    hl
1869+ 6B60 D9                           exx
1870+ 6B61                              next
1870+ 6B61 DD E9       >                jp      (ix)
1871+ 6B63
1872+ 6B63              //  ______________________________________________________________________
1873+ 6B63              //
1874+ 6B63              // p!           c a --
1875+ 6B63              // Send one byte (top of stack) to port a
1876+ 6B63                              New_Def PSTORE, "P!", is_code, is_normal
1876+ 6B63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1876+ 6B63             >
1876+ 6B63             >                // dummy db directives used to calculate length of namec
1876+ 6B63 50 21       >                db      "P!"
1876+ 6B65             >len_NFA         defl    $ - temp_NFA
1876+ 6B65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1876+ 6B63             >
1876+ 6B63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1876+ 6B64 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1876+ 6B66             >                org     $-1                 // alter last byte of Name just above to set
1876+ 6B65 A1          >                db      {b $} | END_BIT     // msb as name end
1876+ 6B66             >
1876+ 6B66 54 6B       >                dw      last_NFA            // Link to previous definition Name
1876+ 6B68             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1876+ 6B68 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1876+ 6B68 ~           >
1876+ 6B68 ~           >
1876+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
1876+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
1876+ 6B68             >
1876+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1877+ 6B68 D9                           exx
1878+ 6B69 C1                           pop     bc
1879+ 6B6A E1                           pop     hl                  // < c
1880+ 6B6B ED 69                        out     (c), l              // low-byte
1881+ 6B6D D9                           exx
1882+ 6B6E                              next
1882+ 6B6E DD E9       >                jp      (ix)
1883+ 6B70
1884+ 6B70
1885+ 6B70              //  ______________________________________________________________________
1886+ 6B70              //
1887+ 6B70              // 2*           n1 -- n2
1888+ 6B70              // doubles the number at top of stack
1889+ 6B70                              New_Def TWO_MUL, "2*", is_code, is_normal
1889+ 6B70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1889+ 6B70             >
1889+ 6B70             >                // dummy db directives used to calculate length of namec
1889+ 6B70 32 2A       >                db      "2*"
1889+ 6B72             >len_NFA         defl    $ - temp_NFA
1889+ 6B72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1889+ 6B70             >
1889+ 6B70 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1889+ 6B71 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1889+ 6B73             >                org     $-1                 // alter last byte of Name just above to set
1889+ 6B72 AA          >                db      {b $} | END_BIT     // msb as name end
1889+ 6B73             >
1889+ 6B73 63 6B       >                dw      last_NFA            // Link to previous definition Name
1889+ 6B75             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1889+ 6B75 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1889+ 6B75 ~           >
1889+ 6B75 ~           >
1889+ 6B75             >                endif           ; ok        // for other definitions it "points" the correct handler
1889+ 6B75             >                // Use of "; ok" to suppress "warning[fwdref]"
1889+ 6B75             >
1889+ 6B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1890+ 6B75              Two_Mul_Ptr:
1891+ 6B75 E1                           pop     hl
1892+ 6B76 29                           add     hl, hl
1893+ 6B77
1894+ 6B77                              psh1
1894+ 6B77 E5          >                push    hl
1894+ 6B78 DD E9       >                jp      (ix)
1895+ 6B7A
1896+ 6B7A              //  ______________________________________________________________________
1897+ 6B7A              //
1898+ 6B7A              // 2/           n1 -- n2
1899+ 6B7A              // halves the top of stack, sign is unchanged
1900+ 6B7A                              New_Def TWO_DIV, "2/", is_code, is_normal
1900+ 6B7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1900+ 6B7A             >
1900+ 6B7A             >                // dummy db directives used to calculate length of namec
1900+ 6B7A 32 2F       >                db      "2/"
1900+ 6B7C             >len_NFA         defl    $ - temp_NFA
1900+ 6B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1900+ 6B7A             >
1900+ 6B7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1900+ 6B7B 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1900+ 6B7D             >                org     $-1                 // alter last byte of Name just above to set
1900+ 6B7C AF          >                db      {b $} | END_BIT     // msb as name end
1900+ 6B7D             >
1900+ 6B7D 70 6B       >                dw      last_NFA            // Link to previous definition Name
1900+ 6B7F             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1900+ 6B7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1900+ 6B7F ~           >
1900+ 6B7F ~           >
1900+ 6B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
1900+ 6B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
1900+ 6B7F             >
1900+ 6B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1901+ 6B7F E1                           pop     hl
1902+ 6B80 CB 2C                        sra     h
1903+ 6B82 CB 1D                        rr      l
1904+ 6B84
1905+ 6B84                              psh1
1905+ 6B84 E5          >                push    hl
1905+ 6B85 DD E9       >                jp      (ix)
1906+ 6B87
1907+ 6B87              //  ______________________________________________________________________
1908+ 6B87              //
1909+ 6B87              // lshift       n1 u -- n2
1910+ 6B87              // bit left shift of u bits
1911+ 6B87                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1911+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1911+ 6B87             >
1911+ 6B87             >                // dummy db directives used to calculate length of namec
1911+ 6B87 4C 53 48 49 >                db      "LSHIFT"
1911+ 6B8B 46 54       >
1911+ 6B8D             >len_NFA         defl    $ - temp_NFA
1911+ 6B8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1911+ 6B87             >
1911+ 6B87 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1911+ 6B88 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1911+ 6B8C 46 54       >
1911+ 6B8E             >                org     $-1                 // alter last byte of Name just above to set
1911+ 6B8D D4          >                db      {b $} | END_BIT     // msb as name end
1911+ 6B8E             >
1911+ 6B8E 7A 6B       >                dw      last_NFA            // Link to previous definition Name
1911+ 6B90             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1911+ 6B90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1911+ 6B90 ~           >
1911+ 6B90 ~           >
1911+ 6B90             >                endif           ; ok        // for other definitions it "points" the correct handler
1911+ 6B90             >                // Use of "; ok" to suppress "warning[fwdref]"
1911+ 6B90             >
1911+ 6B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1912+ 6B90 D9                           exx
1913+ 6B91 C1                           pop     bc
1914+ 6B92 41                           ld      b, c
1915+ 6B93 D1                           pop     de
1916+ 6B94 ED 28                        bsla    de, b
1917+ 6B96 D5                           push    de
1918+ 6B97 D9                           exx
1919+ 6B98                              next
1919+ 6B98 DD E9       >                jp      (ix)
1920+ 6B9A
1921+ 6B9A              //  ______________________________________________________________________
1922+ 6B9A              //
1923+ 6B9A              // rshift       n1 u -- n2
1924+ 6B9A              // bit right shift of u bits
1925+ 6B9A                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1925+ 6B9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1925+ 6B9A             >
1925+ 6B9A             >                // dummy db directives used to calculate length of namec
1925+ 6B9A 52 53 48 49 >                db      "RSHIFT"
1925+ 6B9E 46 54       >
1925+ 6BA0             >len_NFA         defl    $ - temp_NFA
1925+ 6BA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1925+ 6B9A             >
1925+ 6B9A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1925+ 6B9B 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1925+ 6B9F 46 54       >
1925+ 6BA1             >                org     $-1                 // alter last byte of Name just above to set
1925+ 6BA0 D4          >                db      {b $} | END_BIT     // msb as name end
1925+ 6BA1             >
1925+ 6BA1 87 6B       >                dw      last_NFA            // Link to previous definition Name
1925+ 6BA3             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1925+ 6BA3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1925+ 6BA3 ~           >
1925+ 6BA3 ~           >
1925+ 6BA3             >                endif           ; ok        // for other definitions it "points" the correct handler
1925+ 6BA3             >                // Use of "; ok" to suppress "warning[fwdref]"
1925+ 6BA3             >
1925+ 6BA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1926+ 6BA3 D9                           exx
1927+ 6BA4 C1                           pop     bc
1928+ 6BA5 41                           ld      b, c
1929+ 6BA6 D1                           pop     de
1930+ 6BA7 ED 2A                        bsrl    de, b
1931+ 6BA9 D5                           push    de
1932+ 6BAA D9                           exx
1933+ 6BAB                              next
1933+ 6BAB DD E9       >                jp      (ix)
1934+ 6BAD
1935+ 6BAD              //  ______________________________________________________________________
1936+ 6BAD              //
1937+ 6BAD              // cells        n1 -- n2
1938+ 6BAD              // decrement by 2 top of stack
1939+ 6BAD                              New_Def CELLS, "CELLS", is_code, is_normal
1939+ 6BAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1939+ 6BAD             >
1939+ 6BAD             >                // dummy db directives used to calculate length of namec
1939+ 6BAD 43 45 4C 4C >                db      "CELLS"
1939+ 6BB1 53          >
1939+ 6BB2             >len_NFA         defl    $ - temp_NFA
1939+ 6BB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1939+ 6BAD             >
1939+ 6BAD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1939+ 6BAE 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1939+ 6BB2 53          >
1939+ 6BB3             >                org     $-1                 // alter last byte of Name just above to set
1939+ 6BB2 D3          >                db      {b $} | END_BIT     // msb as name end
1939+ 6BB3             >
1939+ 6BB3 9A 6B       >                dw      last_NFA            // Link to previous definition Name
1939+ 6BB5             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1939+ 6BB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1939+ 6BB5 ~           >
1939+ 6BB5 ~           >
1939+ 6BB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1939+ 6BB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1939+ 6BB5             >
1939+ 6BB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1940+ 6BB5 C3 75 6B                     jp      Two_Mul_Ptr
1941+ 6BB8
1942+ 6BB8
1943+ 6BB8              //  ______________________________________________________________________
1944+ 6BB8
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BB8                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BB8              //  ______________________________________________________________________
   2+ 6BB8              //
   3+ 6BB8              //  L1.asm
   4+ 6BB8              //
   5+ 6BB8              //  Level-1 definitions and derivate
   6+ 6BB8              //  ______________________________________________________________________
   7+ 6BB8
   8+ 6BB8              //  ______________________________________________________________________
   9+ 6BB8              //
  10+ 6BB8              // :            -- cccc     ( compile time )
  11+ 6BB8              //              i*x -- j*x  ( run time )
  12+ 6BB8              // Colon Definition
  13+ 6BB8                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6BB8             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6BB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BB8             >
  13+ 6BB8             >                // dummy db directives used to calculate length of namec
  13+ 6BB8 3A          >                db      ":"
  13+ 6BB9             >len_NFA         defl    $ - temp_NFA
  13+ 6BB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BB8             >
  13+ 6BB8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BB9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BBA             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BB9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BBA             >
  13+ 6BBA AD 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BBC             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BBC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BBF             >
  13+ 6BBF             >
  13+ 6BBF             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BBF             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BBF             >
  13+ 6BBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BBF
  15+ 6BBF 55 70                        dw      QEXEC                   // ?exec
  16+ 6BC1 0D 70                        dw      STORE_CSP               // !csp
  17+ 6BC3 A6 6D 07 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BC7 98 6D 12 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BCB 75 76                        dw      CREATE                  // create  ( forward )
  20+ 6BCD 0A 71                        dw      SMUDGE                  // dmudge
  21+ 6BCF F4 70                        dw      SQUARED_CLOSE           // ]
  22+ 6BD1 64 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BD3                                                              // ... immediate
  24+ 6BD3              Enter_Ptr:
  25+ 6BD3                              // via call coded in CFA
  26+ 6BD3                              ldhlrp
  26+ 6BD3 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BD6 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BD7 70                           ld      (hl), b
  29+ 6BD8 2B                           dec     hl
  30+ 6BD9 71                           ld      (hl), c
  31+ 6BDA                              ldrphl
  31+ 6BDA 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BDD
  33+ 6BDD
  34+ 6BDD C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BDE                              next
  35+ 6BDE DD E9       >                jp      (ix)
  36+ 6BE0
  37+ 6BE0              //  ______________________________________________________________________
  38+ 6BE0              //
  39+ 6BE0              // ;            --
  40+ 6BE0              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BE0                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BE0             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BE0             >
  41+ 6BE0             >                // dummy db directives used to calculate length of namec
  41+ 6BE0 3B          >                db      ";"
  41+ 6BE1             >len_NFA         defl    $ - temp_NFA
  41+ 6BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BE0             >
  41+ 6BE0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BE1 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BE2             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BE1 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BE2             >
  41+ 6BE2 B8 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BE4             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BE4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BE7             >
  41+ 6BE7             >
  41+ 6BE7             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BE7             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BE7             >
  41+ 6BE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BE7
  43+ 6BE7 81 70                        dw      QCSP                    // ?csp
  44+ 6BE9 BA 70 47 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BED 0A 71                        dw      SMUDGE                  // smudge
  46+ 6BEF E5 70                        dw      SQUARED_OPEN            // [
  47+ 6BF1 47 69                        dw      EXIT                    // ; immediate
  48+ 6BF3
  49+ 6BF3              //  ______________________________________________________________________
  50+ 6BF3              //
  51+ 6BF3              // noop         --
  52+ 6BF3
  53+ 6BF3                              New_Def NOOP, "NOOP", is_code, is_normal
  53+ 6BF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BF3             >
  53+ 6BF3             >                // dummy db directives used to calculate length of namec
  53+ 6BF3 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BF7             >len_NFA         defl    $ - temp_NFA
  53+ 6BF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BF3             >
  53+ 6BF3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BF4 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BF8             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BF7 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BF8             >
  53+ 6BF8 E0 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BFA             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BFA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  53+ 6BFA ~           >
  53+ 6BFA ~           >
  53+ 6BFA             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BFA             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BFA             >
  53+ 6BFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BFA                              next
  54+ 6BFA DD E9       >                jp      (ix)
  55+ 6BFC
  56+ 6BFC              //  ______________________________________________________________________
  57+ 6BFC              //
  58+ 6BFC              // constant     n -- cccc     ( compile time )
  59+ 6BFC              //              -- n          ( run time )
  60+ 6BFC              // Constant definition.
  61+ 6BFC                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BFC             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BFC             >
  61+ 6BFC             >                // dummy db directives used to calculate length of namec
  61+ 6BFC 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C00 54 41 4E 54 >
  61+ 6C04             >len_NFA         defl    $ - temp_NFA
  61+ 6C04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BFC             >
  61+ 6BFC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BFD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C01 54 41 4E 54 >
  61+ 6C05             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C04 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C05             >
  61+ 6C05 F3 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C07             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C07 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C0A             >
  61+ 6C0A             >
  61+ 6C0A             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C0A             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C0A             >
  61+ 6C0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C0A
  63+ 6C0A 75 76                        dw      CREATE                  // create
  64+ 6C0C 73 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C0E 64 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C10              Constant_Ptr:
  67+ 6C10
  68+ 6C10
  69+ 6C10 E1                           pop     hl
  70+ 6C11
  71+ 6C11 5E                           ld      e, (hl)
  72+ 6C12 23                           inc     hl
  73+ 6C13 56                           ld      d, (hl)
  74+ 6C14
  75+ 6C14 D5                           push    de
  76+ 6C15                              next
  76+ 6C15 DD E9       >                jp      (ix)
  77+ 6C17
  78+ 6C17              //  ______________________________________________________________________
  79+ 6C17              //
  80+ 6C17              // variable     n -- cccc     ( compile time )
  81+ 6C17              //              -- a          ( run time )
  82+ 6C17              // Variable definition, n is the initial value.
  83+ 6C17                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  83+ 6C17             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  83+ 6C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83+ 6C17             >
  83+ 6C17             >                // dummy db directives used to calculate length of namec
  83+ 6C17 56 41 52 49 >                db      "VARIABLE"
  83+ 6C1B 41 42 4C 45 >
  83+ 6C1F             >len_NFA         defl    $ - temp_NFA
  83+ 6C1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83+ 6C17             >
  83+ 6C17 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83+ 6C18 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  83+ 6C1C 41 42 4C 45 >
  83+ 6C20             >                org     $-1                 // alter last byte of Name just above to set
  83+ 6C1F C5          >                db      {b $} | END_BIT     // msb as name end
  83+ 6C20             >
  83+ 6C20 FC 6B       >                dw      last_NFA            // Link to previous definition Name
  83+ 6C22             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  83+ 6C22 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  83+ 6C25             >
  83+ 6C25             >
  83+ 6C25             >                endif           ; ok        // for other definitions it "points" the correct handler
  83+ 6C25             >                // Use of "; ok" to suppress "warning[fwdref]"
  83+ 6C25             >
  83+ 6C25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84+ 6C25
  85+ 6C25 4B 6C                        dw      ZERO
  86+ 6C27 07 6C                        dw      CONSTANT                // constant
  87+ 6C29 64 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  88+ 6C2B              Variable_Ptr:
  89+ 6C2B
  90+ 6C2B
  91+ 6C2B
  92+ 6C2B
  93+ 6C2B                              next
  93+ 6C2B DD E9       >                jp      (ix)
  94+ 6C2D
  95+ 6C2D              //  ______________________________________________________________________
  96+ 6C2D              //
  97+ 6C2D              // user         b -- cccc     ( compile time )
  98+ 6C2D              //              -- a          ( run time )
  99+ 6C2D              // User variable definition
 100+ 6C2D                              Colon_Def USER, "USER", is_normal
 100+ 6C2D             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 100+ 6C2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 100+ 6C2D             >
 100+ 6C2D             >                // dummy db directives used to calculate length of namec
 100+ 6C2D 55 53 45 52 >                db      "USER"
 100+ 6C31             >len_NFA         defl    $ - temp_NFA
 100+ 6C31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 100+ 6C2D             >
 100+ 6C2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 100+ 6C2E 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 100+ 6C32             >                org     $-1                 // alter last byte of Name just above to set
 100+ 6C31 D2          >                db      {b $} | END_BIT     // msb as name end
 100+ 6C32             >
 100+ 6C32 17 6C       >                dw      last_NFA            // Link to previous definition Name
 100+ 6C34             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 100+ 6C34 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 100+ 6C37             >
 100+ 6C37             >
 100+ 6C37             >                endif           ; ok        // for other definitions it "points" the correct handler
 100+ 6C37             >                // Use of "; ok" to suppress "warning[fwdref]"
 100+ 6C37             >
 100+ 6C37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 101+ 6C37
 102+ 6C37 75 76                        dw      CREATE                  // create
 103+ 6C39 85 6E                        dw      CCOMMA                  // c,
 104+ 6C3B 64 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 105+ 6C3D
 106+ 6C3D
 107+ 6C3D              User_Ptr:
 108+ 6C3D                              // via call coded in CFA
 109+ 6C3D E1                           pop     hl
 110+ 6C3E 7E                           ld      a, (hl)
 111+ 6C3F 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6C42 ED 31                        add     hl, a
 113+ 6C44 E5                           push    hl
 114+ 6C45                              next
 114+ 6C45 DD E9       >                jp      (ix)
 115+ 6C47
 116+ 6C47              //  ______________________________________________________________________
 117+ 6C47              //
 118+ 6C47                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6C47             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6C47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6C47             >
 118+ 6C47             >                // dummy db directives used to calculate length of namec
 118+ 6C47 30          >                db      "0"
 118+ 6C48             >len_NFA         defl    $ - temp_NFA
 118+ 6C48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6C47             >
 118+ 6C47 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6C48 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6C49             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6C48 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6C49             >
 118+ 6C49 2D 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6C4B             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6C4B CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6C4E             >
 118+ 6C4E             >
 118+ 6C4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6C4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6C4E             >
 118+ 6C4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6C4E 00 00       >                dw      0
 119+ 6C50                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6C50             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6C50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C50             >
 119+ 6C50             >                // dummy db directives used to calculate length of namec
 119+ 6C50 31          >                db      "1"
 119+ 6C51             >len_NFA         defl    $ - temp_NFA
 119+ 6C51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C50             >
 119+ 6C50 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C51 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6C52             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C51 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C52             >
 119+ 6C52 47 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C54             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C54 CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C57             >
 119+ 6C57             >
 119+ 6C57             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C57             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C57             >
 119+ 6C57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C57 01 00       >                dw      1
 120+ 6C59                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6C59             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6C59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C59             >
 120+ 6C59             >                // dummy db directives used to calculate length of namec
 120+ 6C59 32          >                db      "2"
 120+ 6C5A             >len_NFA         defl    $ - temp_NFA
 120+ 6C5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C59             >
 120+ 6C59 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C5A 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6C5B             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C5A B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C5B             >
 120+ 6C5B 50 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C5D             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C5D CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C60             >
 120+ 6C60             >
 120+ 6C60             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C60             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C60             >
 120+ 6C60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C60 02 00       >                dw      2
 121+ 6C62                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6C62             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6C62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C62             >
 121+ 6C62             >                // dummy db directives used to calculate length of namec
 121+ 6C62 33          >                db      "3"
 121+ 6C63             >len_NFA         defl    $ - temp_NFA
 121+ 6C63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C62             >
 121+ 6C62 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C63 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6C64             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C63 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C64             >
 121+ 6C64 59 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C66             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C66 CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C69             >
 121+ 6C69             >
 121+ 6C69             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C69             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C69             >
 121+ 6C69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C69 03 00       >                dw      3
 122+ 6C6B                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6C6B             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6C6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C6B             >
 122+ 6C6B             >                // dummy db directives used to calculate length of namec
 122+ 6C6B 2D 31       >                db      "-1"
 122+ 6C6D             >len_NFA         defl    $ - temp_NFA
 122+ 6C6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C6B             >
 122+ 6C6B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C6C 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6C6E             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C6D B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C6E             >
 122+ 6C6E 62 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C70             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C70 CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C73             >
 122+ 6C73             >
 122+ 6C73             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C73             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C73             >
 122+ 6C73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C73 FF FF       >                dw      -1
 123+ 6C75                              Constant_Def BL         ,   "BL"    , $20
 123+ 6C75             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6C75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C75             >
 123+ 6C75             >                // dummy db directives used to calculate length of namec
 123+ 6C75 42 4C       >                db      "BL"
 123+ 6C77             >len_NFA         defl    $ - temp_NFA
 123+ 6C77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C75             >
 123+ 6C75 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C76 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6C78             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C77 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C78             >
 123+ 6C78 6B 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C7A             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C7A CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C7D             >
 123+ 6C7D             >
 123+ 6C7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C7D             >
 123+ 6C7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C7D 20 00       >                dw      $20
 124+ 6C7F                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6C7F             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6C7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C7F             >
 124+ 6C7F             >                // dummy db directives used to calculate length of namec
 124+ 6C7F 43 2F 4C    >                db      "C/L"
 124+ 6C82             >len_NFA         defl    $ - temp_NFA
 124+ 6C82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C7F             >
 124+ 6C7F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C80 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6C83             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C82 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C83             >
 124+ 6C83 75 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C85             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C85 CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C88             >
 124+ 6C88             >
 124+ 6C88             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C88             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C88             >
 124+ 6C88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C88 40 00       >                dw      64
 125+ 6C8A                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6C8A             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6C8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C8A             >
 125+ 6C8A             >                // dummy db directives used to calculate length of namec
 125+ 6C8A 42 2F 42 55 >                db      "B/BUF"
 125+ 6C8E 46          >
 125+ 6C8F             >len_NFA         defl    $ - temp_NFA
 125+ 6C8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C8A             >
 125+ 6C8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C8B 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6C8F 46          >
 125+ 6C90             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C8F C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C90             >
 125+ 6C90 7F 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C92             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C92 CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C95             >
 125+ 6C95             >
 125+ 6C95             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C95             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C95             >
 125+ 6C95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C95 00 02       >                dw      512
 126+ 6C97                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6C97             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6C97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C97             >
 126+ 6C97             >                // dummy db directives used to calculate length of namec
 126+ 6C97 42 2F 53 43 >                db      "B/SCR"
 126+ 6C9B 52          >
 126+ 6C9C             >len_NFA         defl    $ - temp_NFA
 126+ 6C9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C97             >
 126+ 6C97 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C98 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6C9C 52          >
 126+ 6C9D             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C9C D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C9D             >
 126+ 6C9D 8A 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C9F             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C9F CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6CA2             >
 126+ 6CA2             >
 126+ 6CA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6CA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6CA2             >
 126+ 6CA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6CA2 02 00       >                dw      2
 127+ 6CA4                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6CA4             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6CA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CA4             >
 127+ 6CA4             >                // dummy db directives used to calculate length of namec
 127+ 6CA4 4C 2F 53 43 >                db      "L/SCR"
 127+ 6CA8 52          >
 127+ 6CA9             >len_NFA         defl    $ - temp_NFA
 127+ 6CA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CA4             >
 127+ 6CA4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6CA5 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6CA9 52          >
 127+ 6CAA             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CA9 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CAA             >
 127+ 6CAA 97 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CAC             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CAC CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CAF             >
 127+ 6CAF             >
 127+ 6CAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CAF             >
 127+ 6CAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CAF 10 00       >                dw      16
 128+ 6CB1
 129+ 6CB1              //  ______________________________________________________________________
 130+ 6CB1              //
 131+ 6CB1              // +origin         --
 132+ 6CB1              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6CB1              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6CB1              //              dw      PLUS                    // +
 135+ 6CB1              //              dw      EXIT                    // ;
 136+ 6CB1                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6CB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6CB1             >
 136+ 6CB1             >                // dummy db directives used to calculate length of namec
 136+ 6CB1 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6CB5 47 49 4E    >
 136+ 6CB8             >len_NFA         defl    $ - temp_NFA
 136+ 6CB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6CB1             >
 136+ 6CB1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6CB2 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6CB6 47 49 4E    >
 136+ 6CB9             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6CB8 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6CB9             >
 136+ 6CB9 A4 6C       >                dw      last_NFA            // Link to previous definition Name
 136+ 6CBB             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6CBB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 136+ 6CBB ~           >
 136+ 6CBB ~           >
 136+ 6CBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6CBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6CBB             >
 136+ 6CBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6CBB
 138+ 6CBB E1                           pop     hl
 139+ 6CBC 11 66 63                     ld      de, Cold_origin
 140+ 6CBF 19                           add     hl, de
 141+ 6CC0 E5                           push    hl
 142+ 6CC1
 143+ 6CC1                              next
 143+ 6CC1 DD E9       >                jp      (ix)
 144+ 6CC3
 145+ 6CC3
 146+ 6CC3              //  ______________________________________________________________________
 147+ 6CC3              //
 148+ 6CC3                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 148+ 6CC3             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 148+ 6CC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6CC3             >
 148+ 6CC3             >                // dummy db directives used to calculate length of namec
 148+ 6CC3 28 4E 45 58 >                db      "(NEXT)"
 148+ 6CC7 54 29       >
 148+ 6CC9             >len_NFA         defl    $ - temp_NFA
 148+ 6CC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6CC3             >
 148+ 6CC3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6CC4 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 148+ 6CC8 54 29       >
 148+ 6CCA             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6CC9 A9          >                db      {b $} | END_BIT     // msb as name end
 148+ 6CCA             >
 148+ 6CCA B1 6C       >                dw      last_NFA            // Link to previous definition Name
 148+ 6CCC             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6CCC CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 148+ 6CCF             >
 148+ 6CCF             >
 148+ 6CCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6CCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6CCF             >
 148+ 6CCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6CCF 98 63       >                dw      Next_Ptr
 149+ 6CD1
 150+ 6CD1              //  ______________________________________________________________________
 151+ 6CD1              //
 152+ 6CD1
 153+ 6CD1                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 153+ 6CD1             >                New_Def  S0, "S0", User_Ptr, is_normal
 153+ 6CD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CD1             >
 153+ 6CD1             >                // dummy db directives used to calculate length of namec
 153+ 6CD1 53 30       >                db      "S0"
 153+ 6CD3             >len_NFA         defl    $ - temp_NFA
 153+ 6CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CD1             >
 153+ 6CD1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CD2 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 153+ 6CD4             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CD3 B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CD4             >
 153+ 6CD4 C3 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CD6             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CD6 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CD9             >
 153+ 6CD9             >
 153+ 6CD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CD9             >
 153+ 6CD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CD9 06          >                db      06
 154+ 6CDA                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 154+ 6CDA             >                New_Def  R0, "R0", User_Ptr, is_normal
 154+ 6CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CDA             >
 154+ 6CDA             >                // dummy db directives used to calculate length of namec
 154+ 6CDA 52 30       >                db      "R0"
 154+ 6CDC             >len_NFA         defl    $ - temp_NFA
 154+ 6CDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CDA             >
 154+ 6CDA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CDB 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 154+ 6CDD             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CDC B0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CDD             >
 154+ 6CDD D1 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CDF             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CDF CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CE2             >
 154+ 6CE2             >
 154+ 6CE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CE2             >
 154+ 6CE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CE2 08          >                db      08
 155+ 6CE3                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 155+ 6CE3             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 155+ 6CE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CE3             >
 155+ 6CE3             >                // dummy db directives used to calculate length of namec
 155+ 6CE3 54 49 42    >                db      "TIB"
 155+ 6CE6             >len_NFA         defl    $ - temp_NFA
 155+ 6CE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CE3             >
 155+ 6CE3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CE4 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 155+ 6CE7             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CE6 C2          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CE7             >
 155+ 6CE7 DA 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CE9             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CE9 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CEC             >
 155+ 6CEC             >
 155+ 6CEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CEC             >
 155+ 6CEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CEC 0A          >                db      10
 156+ 6CED                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 156+ 6CED             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 156+ 6CED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CED             >
 156+ 6CED             >                // dummy db directives used to calculate length of namec
 156+ 6CED 57 49 44 54 >                db      "WIDTH"
 156+ 6CF1 48          >
 156+ 6CF2             >len_NFA         defl    $ - temp_NFA
 156+ 6CF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CED             >
 156+ 6CED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CEE 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 156+ 6CF2 48          >
 156+ 6CF3             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CF2 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CF3             >
 156+ 6CF3 E3 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CF5             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CF5 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CF8             >
 156+ 6CF8             >
 156+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CF8             >
 156+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CF8 0C          >                db      12
 157+ 6CF9                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 157+ 6CF9             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 157+ 6CF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CF9             >
 157+ 6CF9             >                // dummy db directives used to calculate length of namec
 157+ 6CF9 57 41 52 4E >                db      "WARNING"
 157+ 6CFD 49 4E 47    >
 157+ 6D00             >len_NFA         defl    $ - temp_NFA
 157+ 6D00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CF9             >
 157+ 6CF9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CFA 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 157+ 6CFE 49 4E 47    >
 157+ 6D01             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D00 C7          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D01             >
 157+ 6D01 ED 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D03             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D03 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D06             >
 157+ 6D06             >
 157+ 6D06             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D06             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D06             >
 157+ 6D06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D06 0E          >                db      14
 158+ 6D07                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 158+ 6D07             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 158+ 6D07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D07             >
 158+ 6D07             >                // dummy db directives used to calculate length of namec
 158+ 6D07 46 45 4E 43 >                db      "FENCE"
 158+ 6D0B 45          >
 158+ 6D0C             >len_NFA         defl    $ - temp_NFA
 158+ 6D0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D07             >
 158+ 6D07 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D08 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 158+ 6D0C 45          >
 158+ 6D0D             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D0C C5          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D0D             >
 158+ 6D0D F9 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D0F             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D0F CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D12             >
 158+ 6D12             >
 158+ 6D12             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D12             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D12             >
 158+ 6D12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D12 10          >                db      16
 159+ 6D13                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 159+ 6D13             >                New_Def  DP, "DP", User_Ptr, is_normal
 159+ 6D13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D13             >
 159+ 6D13             >                // dummy db directives used to calculate length of namec
 159+ 6D13 44 50       >                db      "DP"
 159+ 6D15             >len_NFA         defl    $ - temp_NFA
 159+ 6D15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D13             >
 159+ 6D13 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D14 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 159+ 6D16             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D15 D0          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D16             >
 159+ 6D16 07 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D18             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D18 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D1B             >
 159+ 6D1B             >
 159+ 6D1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D1B             >
 159+ 6D1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D1B 12          >                db      18
 160+ 6D1C                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 160+ 6D1C             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 160+ 6D1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D1C             >
 160+ 6D1C             >                // dummy db directives used to calculate length of namec
 160+ 6D1C 56 4F 43 2D >                db      "VOC-LINK"
 160+ 6D20 4C 49 4E 4B >
 160+ 6D24             >len_NFA         defl    $ - temp_NFA
 160+ 6D24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D1C             >
 160+ 6D1C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D1D 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 160+ 6D21 4C 49 4E 4B >
 160+ 6D25             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D24 CB          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D25             >
 160+ 6D25 13 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D27             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D27 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D2A             >
 160+ 6D2A             >
 160+ 6D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D2A             >
 160+ 6D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D2A 14          >                db      20
 161+ 6D2B                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 161+ 6D2B             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 161+ 6D2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D2B             >
 161+ 6D2B             >                // dummy db directives used to calculate length of namec
 161+ 6D2B 46 49 52 53 >                db      "FIRST"
 161+ 6D2F 54          >
 161+ 6D30             >len_NFA         defl    $ - temp_NFA
 161+ 6D30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D2B             >
 161+ 6D2B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D2C 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 161+ 6D30 54          >
 161+ 6D31             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D30 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D31             >
 161+ 6D31 1C 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D33             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D33 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D36             >
 161+ 6D36             >
 161+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D36             >
 161+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D36 16          >                db      22
 162+ 6D37                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 162+ 6D37             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 162+ 6D37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D37             >
 162+ 6D37             >                // dummy db directives used to calculate length of namec
 162+ 6D37 4C 49 4D 49 >                db      "LIMIT"
 162+ 6D3B 54          >
 162+ 6D3C             >len_NFA         defl    $ - temp_NFA
 162+ 6D3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D37             >
 162+ 6D37 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D38 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 162+ 6D3C 54          >
 162+ 6D3D             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D3C D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D3D             >
 162+ 6D3D 2B 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D3F             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D3F CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D42             >
 162+ 6D42             >
 162+ 6D42             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D42             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D42             >
 162+ 6D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D42 18          >                db      24
 163+ 6D43                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 163+ 6D43             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 163+ 6D43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D43             >
 163+ 6D43             >                // dummy db directives used to calculate length of namec
 163+ 6D43 45 58 50    >                db      "EXP"
 163+ 6D46             >len_NFA         defl    $ - temp_NFA
 163+ 6D46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D43             >
 163+ 6D43 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D44 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 163+ 6D47             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D46 D0          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D47             >
 163+ 6D47 37 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D49             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D49 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D4C             >
 163+ 6D4C             >
 163+ 6D4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D4C             >
 163+ 6D4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D4C 1A          >                db      26
 164+ 6D4D                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 164+ 6D4D             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 164+ 6D4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D4D             >
 164+ 6D4D             >                // dummy db directives used to calculate length of namec
 164+ 6D4D 4E 4D 4F 44 >                db      "NMODE"
 164+ 6D51 45          >
 164+ 6D52             >len_NFA         defl    $ - temp_NFA
 164+ 6D52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D4D             >
 164+ 6D4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D4E 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 164+ 6D52 45          >
 164+ 6D53             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D52 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D53             >
 164+ 6D53 43 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D55             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D55 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D58             >
 164+ 6D58             >
 164+ 6D58             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D58             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D58             >
 164+ 6D58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D58 1C          >                db      28
 165+ 6D59                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 165+ 6D59             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 165+ 6D59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D59             >
 165+ 6D59             >                // dummy db directives used to calculate length of namec
 165+ 6D59 42 4C 4B    >                db      "BLK"
 165+ 6D5C             >len_NFA         defl    $ - temp_NFA
 165+ 6D5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D59             >
 165+ 6D59 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D5A 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 165+ 6D5D             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D5C CB          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D5D             >
 165+ 6D5D 4D 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D5F             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D5F CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D62             >
 165+ 6D62             >
 165+ 6D62             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D62             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D62             >
 165+ 6D62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D62 1E          >                db      30
 166+ 6D63                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 166+ 6D63             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 166+ 6D63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D63             >
 166+ 6D63             >                // dummy db directives used to calculate length of namec
 166+ 6D63 3E 49 4E    >                db      ">IN"
 166+ 6D66             >len_NFA         defl    $ - temp_NFA
 166+ 6D66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D63             >
 166+ 6D63 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D64 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 166+ 6D67             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D66 CE          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D67             >
 166+ 6D67 59 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D69             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D69 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D6C             >
 166+ 6D6C             >
 166+ 6D6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D6C             >
 166+ 6D6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D6C 20          >                db      32
 167+ 6D6D                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 167+ 6D6D             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 167+ 6D6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D6D             >
 167+ 6D6D             >                // dummy db directives used to calculate length of namec
 167+ 6D6D 4F 55 54    >                db      "OUT"
 167+ 6D70             >len_NFA         defl    $ - temp_NFA
 167+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D6D             >
 167+ 6D6D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D6E 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 167+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D70 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D71             >
 167+ 6D71 63 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D73             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D73 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D76             >
 167+ 6D76             >
 167+ 6D76             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D76             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D76             >
 167+ 6D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D76 22          >                db      34
 168+ 6D77                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 168+ 6D77             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 168+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D77             >
 168+ 6D77             >                // dummy db directives used to calculate length of namec
 168+ 6D77 53 43 52    >                db      "SCR"
 168+ 6D7A             >len_NFA         defl    $ - temp_NFA
 168+ 6D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D77             >
 168+ 6D77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D78 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 168+ 6D7B             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D7A D2          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D7B             >
 168+ 6D7B 6D 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D7D             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D7D CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D80             >
 168+ 6D80             >
 168+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D80             >
 168+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D80 24          >                db      36
 169+ 6D81                              User_Def OFFSET     , "OFFSET"    , 38 //
 169+ 6D81             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 169+ 6D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D81             >
 169+ 6D81             >                // dummy db directives used to calculate length of namec
 169+ 6D81 4F 46 46 53 >                db      "OFFSET"
 169+ 6D85 45 54       >
 169+ 6D87             >len_NFA         defl    $ - temp_NFA
 169+ 6D87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D81             >
 169+ 6D81 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D82 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 169+ 6D86 45 54       >
 169+ 6D88             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D87 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D88             >
 169+ 6D88 77 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D8A             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D8A CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D8D             >
 169+ 6D8D             >
 169+ 6D8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D8D             >
 169+ 6D8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D8D 26          >                db      38
 170+ 6D8E                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 170+ 6D8E             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 170+ 6D8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D8E             >
 170+ 6D8E             >                // dummy db directives used to calculate length of namec
 170+ 6D8E 43 4F 4E 54 >                db      "CONTEXT"
 170+ 6D92 45 58 54    >
 170+ 6D95             >len_NFA         defl    $ - temp_NFA
 170+ 6D95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D8E             >
 170+ 6D8E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D8F 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 170+ 6D93 45 58 54    >
 170+ 6D96             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D95 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D96             >
 170+ 6D96 81 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D98             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D98 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D9B             >
 170+ 6D9B             >
 170+ 6D9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D9B             >
 170+ 6D9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D9B 28          >                db      40
 171+ 6D9C                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 171+ 6D9C             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 171+ 6D9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D9C             >
 171+ 6D9C             >                // dummy db directives used to calculate length of namec
 171+ 6D9C 43 55 52 52 >                db      "CURRENT"
 171+ 6DA0 45 4E 54    >
 171+ 6DA3             >len_NFA         defl    $ - temp_NFA
 171+ 6DA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D9C             >
 171+ 6D9C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D9D 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 171+ 6DA1 45 4E 54    >
 171+ 6DA4             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DA3 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DA4             >
 171+ 6DA4 8E 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DA6             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DA6 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DA9             >
 171+ 6DA9             >
 171+ 6DA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DA9             >
 171+ 6DA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DA9 2A          >                db      42
 172+ 6DAA                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 172+ 6DAA             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 172+ 6DAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DAA             >
 172+ 6DAA             >                // dummy db directives used to calculate length of namec
 172+ 6DAA 53 54 41 54 >                db      "STATE"
 172+ 6DAE 45          >
 172+ 6DAF             >len_NFA         defl    $ - temp_NFA
 172+ 6DAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DAA             >
 172+ 6DAA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DAB 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 172+ 6DAF 45          >
 172+ 6DB0             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DAF C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DB0             >
 172+ 6DB0 9C 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DB2             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DB2 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DB5             >
 172+ 6DB5             >
 172+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DB5             >
 172+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DB5 2C          >                db      44
 173+ 6DB6                              User_Def BASE       , "BASE"      , 46 //
 173+ 6DB6             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 173+ 6DB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DB6             >
 173+ 6DB6             >                // dummy db directives used to calculate length of namec
 173+ 6DB6 42 41 53 45 >                db      "BASE"
 173+ 6DBA             >len_NFA         defl    $ - temp_NFA
 173+ 6DBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DB6             >
 173+ 6DB6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DB7 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 173+ 6DBB             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DBA C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DBB             >
 173+ 6DBB AA 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DBD             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DBD CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DC0             >
 173+ 6DC0             >
 173+ 6DC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DC0             >
 173+ 6DC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DC0 2E          >                db      46
 174+ 6DC1                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 174+ 6DC1             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 174+ 6DC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DC1             >
 174+ 6DC1             >                // dummy db directives used to calculate length of namec
 174+ 6DC1 44 50 4C    >                db      "DPL"
 174+ 6DC4             >len_NFA         defl    $ - temp_NFA
 174+ 6DC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DC1             >
 174+ 6DC1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DC2 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 174+ 6DC5             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DC4 CC          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DC5             >
 174+ 6DC5 B6 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DC7             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DC7 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DCA             >
 174+ 6DCA             >
 174+ 6DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DCA             >
 174+ 6DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DCA 30          >                db      48
 175+ 6DCB                              User_Def FLD        , "FLD"       , 50 // output field width
 175+ 6DCB             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 175+ 6DCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DCB             >
 175+ 6DCB             >                // dummy db directives used to calculate length of namec
 175+ 6DCB 46 4C 44    >                db      "FLD"
 175+ 6DCE             >len_NFA         defl    $ - temp_NFA
 175+ 6DCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DCB             >
 175+ 6DCB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DCC 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 175+ 6DCF             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DCE C4          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DCF             >
 175+ 6DCF C1 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DD1             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DD1 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DD4             >
 175+ 6DD4             >
 175+ 6DD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DD4             >
 175+ 6DD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DD4 32          >                db      50
 176+ 6DD5                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 176+ 6DD5             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 176+ 6DD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DD5             >
 176+ 6DD5             >                // dummy db directives used to calculate length of namec
 176+ 6DD5 43 53 50    >                db      "CSP"
 176+ 6DD8             >len_NFA         defl    $ - temp_NFA
 176+ 6DD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DD5             >
 176+ 6DD5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DD6 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 176+ 6DD9             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DD8 D0          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DD9             >
 176+ 6DD9 CB 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DDB             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DDB CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DDE             >
 176+ 6DDE             >
 176+ 6DDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DDE             >
 176+ 6DDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DDE 34          >                db      52
 177+ 6DDF                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 177+ 6DDF             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 177+ 6DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DDF             >
 177+ 6DDF             >                // dummy db directives used to calculate length of namec
 177+ 6DDF 52 23       >                db      "R#"
 177+ 6DE1             >len_NFA         defl    $ - temp_NFA
 177+ 6DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DDF             >
 177+ 6DDF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DE0 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 177+ 6DE2             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DE1 A3          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DE2             >
 177+ 6DE2 D5 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DE4             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DE4 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DE7             >
 177+ 6DE7             >
 177+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DE7             >
 177+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DE7 36          >                db      54
 178+ 6DE8                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 178+ 6DE8             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 178+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DE8             >
 178+ 6DE8             >                // dummy db directives used to calculate length of namec
 178+ 6DE8 48 4C 44    >                db      "HLD"
 178+ 6DEB             >len_NFA         defl    $ - temp_NFA
 178+ 6DEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DE8             >
 178+ 6DE8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DE9 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 178+ 6DEC             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DEB C4          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DEC             >
 178+ 6DEC DF 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DEE             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DEE CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DF1             >
 178+ 6DF1             >
 178+ 6DF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DF1             >
 178+ 6DF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DF1 38          >                db      56
 179+ 6DF2                              User_Def USE        , "USE"       , 58 // address of last used block
 179+ 6DF2             >                New_Def  USE, "USE", User_Ptr, is_normal
 179+ 6DF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DF2             >
 179+ 6DF2             >                // dummy db directives used to calculate length of namec
 179+ 6DF2 55 53 45    >                db      "USE"
 179+ 6DF5             >len_NFA         defl    $ - temp_NFA
 179+ 6DF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DF2             >
 179+ 6DF2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DF3 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 179+ 6DF6             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DF5 C5          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DF6             >
 179+ 6DF6 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DF8             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DF8 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DFB             >
 179+ 6DFB             >
 179+ 6DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DFB             >
 179+ 6DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DFB 3A          >                db      58
 180+ 6DFC                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 180+ 6DFC             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 180+ 6DFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DFC             >
 180+ 6DFC             >                // dummy db directives used to calculate length of namec
 180+ 6DFC 50 52 45 56 >                db      "PREV"
 180+ 6E00             >len_NFA         defl    $ - temp_NFA
 180+ 6E00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DFC             >
 180+ 6DFC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DFD 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 180+ 6E01             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E00 D6          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E01             >
 180+ 6E01 F2 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E03             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E03 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E06             >
 180+ 6E06             >
 180+ 6E06             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E06             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E06             >
 180+ 6E06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E06 3C          >                db      60
 181+ 6E07                              User_Def LP         , "LP"        , 62 // line printer (not used)
 181+ 6E07             >                New_Def  LP, "LP", User_Ptr, is_normal
 181+ 6E07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E07             >
 181+ 6E07             >                // dummy db directives used to calculate length of namec
 181+ 6E07 4C 50       >                db      "LP"
 181+ 6E09             >len_NFA         defl    $ - temp_NFA
 181+ 6E09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E07             >
 181+ 6E07 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E08 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 181+ 6E0A             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E09 D0          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E0A             >
 181+ 6E0A FC 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E0C             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E0C CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E0F             >
 181+ 6E0F             >
 181+ 6E0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E0F             >
 181+ 6E0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E0F 3E          >                db      62
 182+ 6E10                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 182+ 6E10             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 182+ 6E10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E10             >
 182+ 6E10             >                // dummy db directives used to calculate length of namec
 182+ 6E10 50 4C 41 43 >                db      "PLACE"
 182+ 6E14 45          >
 182+ 6E15             >len_NFA         defl    $ - temp_NFA
 182+ 6E15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E10             >
 182+ 6E10 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E11 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 182+ 6E15 45          >
 182+ 6E16             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E15 C5          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E16             >
 182+ 6E16 07 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E18             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E18 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E1B             >
 182+ 6E1B             >
 182+ 6E1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E1B             >
 182+ 6E1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E1B 40          >                db      64
 183+ 6E1C                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 183+ 6E1C             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 183+ 6E1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E1C             >
 183+ 6E1C             >                // dummy db directives used to calculate length of namec
 183+ 6E1C 53 4F 55 52 >                db      "SOURCE-ID"
 183+ 6E20 43 45 2D 49 >
 183+ 6E24 44          >
 183+ 6E25             >len_NFA         defl    $ - temp_NFA
 183+ 6E25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E1C             >
 183+ 6E1C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E1D 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 183+ 6E21 43 45 2D 49 >
 183+ 6E25 44          >
 183+ 6E26             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E25 C4          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E26             >
 183+ 6E26 10 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E28             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E28 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E2B             >
 183+ 6E2B             >
 183+ 6E2B             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E2B             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E2B             >
 183+ 6E2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E2B 42          >                db      66
 184+ 6E2C                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 184+ 6E2C             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 184+ 6E2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E2C             >
 184+ 6E2C             >                // dummy db directives used to calculate length of namec
 184+ 6E2C 53 50 41 4E >                db      "SPAN"
 184+ 6E30             >len_NFA         defl    $ - temp_NFA
 184+ 6E30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E2C             >
 184+ 6E2C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E2D 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 184+ 6E31             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E30 CE          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E31             >
 184+ 6E31 1C 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E33             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E33 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E36             >
 184+ 6E36             >
 184+ 6E36             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E36             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E36             >
 184+ 6E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E36 44          >                db      68
 185+ 6E37                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 185+ 6E37             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 185+ 6E37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E37             >
 185+ 6E37             >                // dummy db directives used to calculate length of namec
 185+ 6E37 48 41 4E 44 >                db      "HANDLER"
 185+ 6E3B 4C 45 52    >
 185+ 6E3E             >len_NFA         defl    $ - temp_NFA
 185+ 6E3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E37             >
 185+ 6E37 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E38 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 185+ 6E3C 4C 45 52    >
 185+ 6E3F             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E3E D2          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E3F             >
 185+ 6E3F 2C 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E41             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E41 CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E44             >
 185+ 6E44             >
 185+ 6E44             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E44             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E44             >
 185+ 6E44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E44 46          >                db      70
 186+ 6E45                              User_Def HP         , "HP"        , 72 // heap-pointer address
 186+ 6E45             >                New_Def  HP, "HP", User_Ptr, is_normal
 186+ 6E45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 6E45             >
 186+ 6E45             >                // dummy db directives used to calculate length of namec
 186+ 6E45 48 50       >                db      "HP"
 186+ 6E47             >len_NFA         defl    $ - temp_NFA
 186+ 6E47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 6E45             >
 186+ 6E45 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 6E46 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 186+ 6E48             >                org     $-1                 // alter last byte of Name just above to set
 186+ 6E47 D0          >                db      {b $} | END_BIT     // msb as name end
 186+ 6E48             >
 186+ 6E48 37 6E       >                dw      last_NFA            // Link to previous definition Name
 186+ 6E4A             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6E4A CD 3D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6E4D             >
 186+ 6E4D             >
 186+ 6E4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6E4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6E4D             >
 186+ 6E4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6E4D 48          >                db      72
 187+ 6E4E
 188+ 6E4E              //  ______________________________________________________________________
 189+ 6E4E              //
 190+ 6E4E              // here         -- a
 191+ 6E4E                              Colon_Def HERE, "HERE", is_normal
 191+ 6E4E             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 191+ 6E4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 191+ 6E4E             >
 191+ 6E4E             >                // dummy db directives used to calculate length of namec
 191+ 6E4E 48 45 52 45 >                db      "HERE"
 191+ 6E52             >len_NFA         defl    $ - temp_NFA
 191+ 6E52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 191+ 6E4E             >
 191+ 6E4E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 191+ 6E4F 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 191+ 6E53             >                org     $-1                 // alter last byte of Name just above to set
 191+ 6E52 C5          >                db      {b $} | END_BIT     // msb as name end
 191+ 6E53             >
 191+ 6E53 45 6E       >                dw      last_NFA            // Link to previous definition Name
 191+ 6E55             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 191+ 6E55 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 191+ 6E58             >
 191+ 6E58             >
 191+ 6E58             >                endif           ; ok        // for other definitions it "points" the correct handler
 191+ 6E58             >                // Use of "; ok" to suppress "warning[fwdref]"
 191+ 6E58             >
 191+ 6E58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 192+ 6E58 18 6D 07 6B                  dw      DP, FETCH               // dp @
 193+ 6E5C 47 69                        dw      EXIT                    // ;
 194+ 6E5E
 195+ 6E5E              //  ______________________________________________________________________
 196+ 6E5E              //
 197+ 6E5E              // allot        n --
 198+ 6E5E                              Colon_Def ALLOT, "ALLOT", is_normal
 198+ 6E5E             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 198+ 6E5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 6E5E             >
 198+ 6E5E             >                // dummy db directives used to calculate length of namec
 198+ 6E5E 41 4C 4C 4F >                db      "ALLOT"
 198+ 6E62 54          >
 198+ 6E63             >len_NFA         defl    $ - temp_NFA
 198+ 6E63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 6E5E             >
 198+ 6E5E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 6E5F 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 198+ 6E63 54          >
 198+ 6E64             >                org     $-1                 // alter last byte of Name just above to set
 198+ 6E63 D4          >                db      {b $} | END_BIT     // msb as name end
 198+ 6E64             >
 198+ 6E64 4E 6E       >                dw      last_NFA            // Link to previous definition Name
 198+ 6E66             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 6E66 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 6E69             >
 198+ 6E69             >
 198+ 6E69             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 6E69             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 6E69             >
 198+ 6E69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 6E69 18 6D E8 6A                  dw      DP,  PLUSSTORE          // dp +!
 200+ 6E6D 47 69                        dw      EXIT                    // ;
 201+ 6E6F
 202+ 6E6F              //  ______________________________________________________________________
 203+ 6E6F              //
 204+ 6E6F              // comma        n --
 205+ 6E6F                              Colon_Def COMMA, ",", is_normal
 205+ 6E6F             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 205+ 6E6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 6E6F             >
 205+ 6E6F             >                // dummy db directives used to calculate length of namec
 205+ 6E6F 2C          >                db      ","
 205+ 6E70             >len_NFA         defl    $ - temp_NFA
 205+ 6E70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 6E6F             >
 205+ 6E6F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 6E70 2C          >                db      ","               // name string in 7-bit ascii, but
 205+ 6E71             >                org     $-1                 // alter last byte of Name just above to set
 205+ 6E70 AC          >                db      {b $} | END_BIT     // msb as name end
 205+ 6E71             >
 205+ 6E71 5E 6E       >                dw      last_NFA            // Link to previous definition Name
 205+ 6E73             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 6E73 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 6E76             >
 205+ 6E76             >
 205+ 6E76             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 6E76             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 6E76             >
 205+ 6E76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 6E76 55 6E 12 6B                  dw      HERE, STORE             // here !
 207+ 6E7A 5D 6C 66 6E                  dw      TWO, ALLOT              // 2 allot
 208+ 6E7E 47 69                        dw      EXIT                    // ;
 209+ 6E80
 210+ 6E80              //  ______________________________________________________________________
 211+ 6E80              //
 212+ 6E80              // ccomma       c --
 213+ 6E80                              Colon_Def CCOMMA, "C,", is_normal
 213+ 6E80             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 213+ 6E80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213+ 6E80             >
 213+ 6E80             >                // dummy db directives used to calculate length of namec
 213+ 6E80 43 2C       >                db      "C,"
 213+ 6E82             >len_NFA         defl    $ - temp_NFA
 213+ 6E82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213+ 6E80             >
 213+ 6E80 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213+ 6E81 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 213+ 6E83             >                org     $-1                 // alter last byte of Name just above to set
 213+ 6E82 AC          >                db      {b $} | END_BIT     // msb as name end
 213+ 6E83             >
 213+ 6E83 6F 6E       >                dw      last_NFA            // Link to previous definition Name
 213+ 6E85             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 213+ 6E85 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 213+ 6E88             >
 213+ 6E88             >
 213+ 6E88             >                endif           ; ok        // for other definitions it "points" the correct handler
 213+ 6E88             >                // Use of "; ok" to suppress "warning[fwdref]"
 213+ 6E88             >
 213+ 6E88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214+ 6E88 55 6E 2A 6B                  dw      HERE, CSTORE            // here c!
 215+ 6E8C 54 6C 66 6E                  dw      ONE, ALLOT              // 1 allot
 216+ 6E90 47 69                        dw      EXIT                    // ;
 217+ 6E92
 218+ 6E92              //  ______________________________________________________________________
 219+ 6E92              //
 220+ 6E92              // s>d          n -- d
 221+ 6E92              // converts a single precision integer in a double precision
 222+ 6E92                              New_Def S_TO_D, "S>D", is_code, is_normal
 222+ 6E92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 6E92             >
 222+ 6E92             >                // dummy db directives used to calculate length of namec
 222+ 6E92 53 3E 44    >                db      "S>D"
 222+ 6E95             >len_NFA         defl    $ - temp_NFA
 222+ 6E95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 6E92             >
 222+ 6E92 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 6E93 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 222+ 6E96             >                org     $-1                 // alter last byte of Name just above to set
 222+ 6E95 C4          >                db      {b $} | END_BIT     // msb as name end
 222+ 6E96             >
 222+ 6E96 80 6E       >                dw      last_NFA            // Link to previous definition Name
 222+ 6E98             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 6E98 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 222+ 6E98 ~           >
 222+ 6E98 ~           >
 222+ 6E98             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 6E98             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 6E98             >
 222+ 6E98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 6E98 E1                           pop     hl
 224+ 6E99 7C                           ld      a, h
 225+ 6E9A E5                           push    hl
 226+ 6E9B 17                           rla
 227+ 6E9C ED 62                        sbc     hl, hl
 228+ 6E9E E5                           push    hl
 229+ 6E9F                              next
 229+ 6E9F DD E9       >                jp      (ix)
 230+ 6EA1
 231+ 6EA1              //  ______________________________________________________________________
 232+ 6EA1              //
 233+ 6EA1              // -            n1 n2 -- n3
 234+ 6EA1              // subtraction
 235+ 6EA1                              New_Def SUBTRACT, "-", is_code, is_normal
 235+ 6EA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6EA1             >
 235+ 6EA1             >                // dummy db directives used to calculate length of namec
 235+ 6EA1 2D          >                db      "-"
 235+ 6EA2             >len_NFA         defl    $ - temp_NFA
 235+ 6EA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6EA1             >
 235+ 6EA1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6EA2 2D          >                db      "-"               // name string in 7-bit ascii, but
 235+ 6EA3             >                org     $-1                 // alter last byte of Name just above to set
 235+ 6EA2 AD          >                db      {b $} | END_BIT     // msb as name end
 235+ 6EA3             >
 235+ 6EA3 92 6E       >                dw      last_NFA            // Link to previous definition Name
 235+ 6EA5             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 6EA5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 6EA5 ~           >
 235+ 6EA5 ~           >
 235+ 6EA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 6EA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 6EA5             >
 235+ 6EA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 6EA5 D1                           pop     de
 237+ 6EA6 E1                           pop     hl
 238+ 6EA7 A7                           and     a
 239+ 6EA8 ED 52                        sbc     hl, de
 240+ 6EAA
 241+ 6EAA                              psh1
 241+ 6EAA E5          >                push    hl
 241+ 6EAB DD E9       >                jp      (ix)
 242+ 6EAD
 243+ 6EAD              //  ______________________________________________________________________
 244+ 6EAD              //
 245+ 6EAD              // =            n1 n2 -- n3
 246+ 6EAD              // equals
 247+ 6EAD                              Colon_Def EQUALS, "=", is_normal
 247+ 6EAD             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 247+ 6EAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 247+ 6EAD             >
 247+ 6EAD             >                // dummy db directives used to calculate length of namec
 247+ 6EAD 3D          >                db      "="
 247+ 6EAE             >len_NFA         defl    $ - temp_NFA
 247+ 6EAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 247+ 6EAD             >
 247+ 6EAD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 247+ 6EAE 3D          >                db      "="               // name string in 7-bit ascii, but
 247+ 6EAF             >                org     $-1                 // alter last byte of Name just above to set
 247+ 6EAE BD          >                db      {b $} | END_BIT     // msb as name end
 247+ 6EAF             >
 247+ 6EAF A1 6E       >                dw      last_NFA            // Link to previous definition Name
 247+ 6EB1             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 247+ 6EB1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 247+ 6EB4             >
 247+ 6EB4             >
 247+ 6EB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 247+ 6EB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 247+ 6EB4             >
 247+ 6EB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 248+ 6EB4 A5 6E 84 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 249+ 6EB8 47 69                        dw      EXIT                    // ;
 250+ 6EBA
 251+ 6EBA              //  ______________________________________________________________________
 252+ 6EBA              //
 253+ 6EBA              // u<           u1 u2 -- u3
 254+ 6EBA              // unsigned less-than
 255+ 6EBA                              New_Def ULESS, "U<", is_code, is_normal
 255+ 6EBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 255+ 6EBA             >
 255+ 6EBA             >                // dummy db directives used to calculate length of namec
 255+ 6EBA 55 3C       >                db      "U<"
 255+ 6EBC             >len_NFA         defl    $ - temp_NFA
 255+ 6EBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 255+ 6EBA             >
 255+ 6EBA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 255+ 6EBB 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 255+ 6EBD             >                org     $-1                 // alter last byte of Name just above to set
 255+ 6EBC BC          >                db      {b $} | END_BIT     // msb as name end
 255+ 6EBD             >
 255+ 6EBD AD 6E       >                dw      last_NFA            // Link to previous definition Name
 255+ 6EBF             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 255+ 6EBF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 255+ 6EBF ~           >
 255+ 6EBF ~           >
 255+ 6EBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 255+ 6EBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 255+ 6EBF             >
 255+ 6EBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 256+ 6EBF D1                           pop     de
 257+ 6EC0 E1                           pop     hl
 258+ 6EC1 A7                           and     a
 259+ 6EC2 ED 52                        sbc     hl, de
 260+ 6EC4 ED 62                        sbc     hl, hl
 261+ 6EC6 E5                           push    hl
 262+ 6EC7                              next
 262+ 6EC7 DD E9       >                jp      (ix)
 263+ 6EC9
 264+ 6EC9
 265+ 6EC9              //  ______________________________________________________________________
 266+ 6EC9              //
 267+ 6EC9              // <           n1 n2 -- n3
 268+ 6EC9              // less-than
 269+ 6EC9                              New_Def LESS, "<", is_code, is_normal
 269+ 6EC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 269+ 6EC9             >
 269+ 6EC9             >                // dummy db directives used to calculate length of namec
 269+ 6EC9 3C          >                db      "<"
 269+ 6ECA             >len_NFA         defl    $ - temp_NFA
 269+ 6ECA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 269+ 6EC9             >
 269+ 6EC9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 269+ 6ECA 3C          >                db      "<"               // name string in 7-bit ascii, but
 269+ 6ECB             >                org     $-1                 // alter last byte of Name just above to set
 269+ 6ECA BC          >                db      {b $} | END_BIT     // msb as name end
 269+ 6ECB             >
 269+ 6ECB BA 6E       >                dw      last_NFA            // Link to previous definition Name
 269+ 6ECD             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 269+ 6ECD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 269+ 6ECD ~           >
 269+ 6ECD ~           >
 269+ 6ECD             >                endif           ; ok        // for other definitions it "points" the correct handler
 269+ 6ECD             >                // Use of "; ok" to suppress "warning[fwdref]"
 269+ 6ECD             >
 269+ 6ECD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 270+ 6ECD D1                           pop     de
 271+ 6ECE E1                           pop     hl
 272+ 6ECF 7C                           ld      a, h
 273+ 6ED0 EE 80                        xor     $80
 274+ 6ED2 67                           ld      h, a
 275+ 6ED3 7A                           ld      a, d
 276+ 6ED4 EE 80                        xor     $80
 277+ 6ED6 57                           ld      d, a
 278+ 6ED7              //              and     a
 279+ 6ED7 ED 52                        sbc     hl, de
 280+ 6ED9 ED 62                        sbc     hl, hl
 281+ 6EDB                              psh1
 281+ 6EDB E5          >                push    hl
 281+ 6EDC DD E9       >                jp      (ix)
 282+ 6EDE
 283+ 6EDE              //  ______________________________________________________________________
 284+ 6EDE              //
 285+ 6EDE              // >            n1 n2 -- n3
 286+ 6EDE              // greater than
 287+ 6EDE                              Colon_Def GREATER, ">", is_normal
 287+ 6EDE             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 287+ 6EDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ 6EDE             >
 287+ 6EDE             >                // dummy db directives used to calculate length of namec
 287+ 6EDE 3E          >                db      ">"
 287+ 6EDF             >len_NFA         defl    $ - temp_NFA
 287+ 6EDF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ 6EDE             >
 287+ 6EDE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ 6EDF 3E          >                db      ">"               // name string in 7-bit ascii, but
 287+ 6EE0             >                org     $-1                 // alter last byte of Name just above to set
 287+ 6EDF BE          >                db      {b $} | END_BIT     // msb as name end
 287+ 6EE0             >
 287+ 6EE0 C9 6E       >                dw      last_NFA            // Link to previous definition Name
 287+ 6EE2             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 6EE2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 287+ 6EE5             >
 287+ 6EE5             >
 287+ 6EE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 6EE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 6EE5             >
 287+ 6EE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 6EE5 7B 6A CD 6E                  dw      SWAP, LESS              // swap <
 289+ 6EE9 47 69                        dw      EXIT                    // ;
 290+ 6EEB              //  ______________________________________________________________________
 291+ 6EEB              //
 292+ 6EEB              // min          n1 n2 -- n3
 293+ 6EEB              // minimum between n1 and n2
 294+ 6EEB                              Colon_Def MIN, "MIN" , is_normal
 294+ 6EEB             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 294+ 6EEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6EEB             >
 294+ 6EEB             >                // dummy db directives used to calculate length of namec
 294+ 6EEB 4D 49 4E    >                db      "MIN"
 294+ 6EEE             >len_NFA         defl    $ - temp_NFA
 294+ 6EEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6EEB             >
 294+ 6EEB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6EEC 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 294+ 6EEF             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6EEE CE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6EEF             >
 294+ 6EEF DE 6E       >                dw      last_NFA            // Link to previous definition Name
 294+ 6EF1             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6EF1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6EF4             >
 294+ 6EF4             >
 294+ 6EF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6EF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6EF4             >
 294+ 6EF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6EF4 DB 6A                        dw      TWO_DUP                 // 2dup
 296+ 6EF6 E2 6E                        dw      GREATER                 // >
 297+ 6EF8 1C 64                        dw      ZBRANCH
 298+ 6EFA 04 00                        dw      Min_Skip - $   // if
 299+ 6EFC 7B 6A                        dw          SWAP                //      swap
 300+ 6EFE              Min_Skip:                                       // endif
 301+ 6EFE 59 6A                        dw      DROP                    // drop
 302+ 6F00 47 69                        dw      EXIT                    // ;
 303+ 6F02
 304+ 6F02              //  ______________________________________________________________________
 305+ 6F02              //
 306+ 6F02              // max          n1 n2 -- n3
 307+ 6F02              // maximum between n1 and n2
 308+ 6F02                              Colon_Def MAX, "MAX", is_normal
 308+ 6F02             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 308+ 6F02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 308+ 6F02             >
 308+ 6F02             >                // dummy db directives used to calculate length of namec
 308+ 6F02 4D 41 58    >                db      "MAX"
 308+ 6F05             >len_NFA         defl    $ - temp_NFA
 308+ 6F05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 308+ 6F02             >
 308+ 6F02 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 308+ 6F03 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 308+ 6F06             >                org     $-1                 // alter last byte of Name just above to set
 308+ 6F05 D8          >                db      {b $} | END_BIT     // msb as name end
 308+ 6F06             >
 308+ 6F06 EB 6E       >                dw      last_NFA            // Link to previous definition Name
 308+ 6F08             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 308+ 6F08 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 308+ 6F0B             >
 308+ 6F0B             >
 308+ 6F0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 308+ 6F0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 308+ 6F0B             >
 308+ 6F0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 309+ 6F0B DB 6A                        dw      TWO_DUP                 // 2dup
 310+ 6F0D CD 6E                        dw      LESS                    // <
 311+ 6F0F 1C 64                        dw      ZBRANCH
 312+ 6F11 04 00                        dw      Max_Skip - $   // if
 313+ 6F13 7B 6A                        dw          SWAP                //      swap
 314+ 6F15              Max_Skip:                                       // endif
 315+ 6F15 59 6A                        dw      DROP                    // drop
 316+ 6F17 47 69                        dw      EXIT                    // ;
 317+ 6F19
 318+ 6F19              //  ______________________________________________________________________
 319+ 6F19              //
 320+ 6F19              // ?dup         n -- 0 | n n
 321+ 6F19              // duplicate if not zero
 322+ 6F19                              New_Def QDUP, "?DUP", is_code, is_normal
 322+ 6F19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 6F19             >
 322+ 6F19             >                // dummy db directives used to calculate length of namec
 322+ 6F19 3F 44 55 50 >                db      "?DUP"
 322+ 6F1D             >len_NFA         defl    $ - temp_NFA
 322+ 6F1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 6F19             >
 322+ 6F19 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 6F1A 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 322+ 6F1E             >                org     $-1                 // alter last byte of Name just above to set
 322+ 6F1D D0          >                db      {b $} | END_BIT     // msb as name end
 322+ 6F1E             >
 322+ 6F1E 02 6F       >                dw      last_NFA            // Link to previous definition Name
 322+ 6F20             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 6F20 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 322+ 6F20 ~           >
 322+ 6F20 ~           >
 322+ 6F20             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 6F20             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 6F20             >
 322+ 6F20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 6F20              QDup_Ptr:
 324+ 6F20 E1                           pop     hl
 325+ 6F21 7C                           ld      a, h
 326+ 6F22 B5                           or      l
 327+ 6F23 28 01                        jr      z, QDup_Skip
 328+ 6F25 E5                               push    hl
 329+ 6F26              QDup_Skip:
 330+ 6F26                              psh1
 330+ 6F26 E5          >                push    hl
 330+ 6F27 DD E9       >                jp      (ix)
 331+ 6F29
 332+ 6F29              //  ______________________________________________________________________
 333+ 6F29              //
 334+ 6F29              // -dup         n -- 0 | n n
 335+ 6F29              // duplicate if not zero
 336+ 6F29                              New_Def LDUP, "-DUP", is_code, is_normal
 336+ 6F29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 6F29             >
 336+ 6F29             >                // dummy db directives used to calculate length of namec
 336+ 6F29 2D 44 55 50 >                db      "-DUP"
 336+ 6F2D             >len_NFA         defl    $ - temp_NFA
 336+ 6F2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 6F29             >
 336+ 6F29 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 6F2A 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 336+ 6F2E             >                org     $-1                 // alter last byte of Name just above to set
 336+ 6F2D D0          >                db      {b $} | END_BIT     // msb as name end
 336+ 6F2E             >
 336+ 6F2E 19 6F       >                dw      last_NFA            // Link to previous definition Name
 336+ 6F30             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 6F30 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 336+ 6F30 ~           >
 336+ 6F30 ~           >
 336+ 6F30             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 6F30             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 6F30             >
 336+ 6F30             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 6F30 C3 20 6F                     jp      QDup_Ptr
 338+ 6F33
 339+ 6F33              //  ______________________________________________________________________
 340+ 6F33              //
 341+ 6F33              // emit         c --
 342+ 6F33                              Colon_Def EMIT, "EMIT", is_normal
 342+ 6F33             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 342+ 6F33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 342+ 6F33             >
 342+ 6F33             >                // dummy db directives used to calculate length of namec
 342+ 6F33 45 4D 49 54 >                db      "EMIT"
 342+ 6F37             >len_NFA         defl    $ - temp_NFA
 342+ 6F37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 342+ 6F33             >
 342+ 6F33 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 342+ 6F34 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 342+ 6F38             >                org     $-1                 // alter last byte of Name just above to set
 342+ 6F37 D4          >                db      {b $} | END_BIT     // msb as name end
 342+ 6F38             >
 342+ 6F38 29 6F       >                dw      last_NFA            // Link to previous definition Name
 342+ 6F3A             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 342+ 6F3A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 342+ 6F3D             >
 342+ 6F3D             >
 342+ 6F3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 342+ 6F3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 342+ 6F3D             >
 342+ 6F3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 343+ 6F3D 23 66                        dw      C_EMIT                      // (?emit)
 344+ 6F3F 20 6F                        dw      QDUP                        // ?dup
 345+ 6F41                                                                  // if
 346+ 6F41 1C 64                        dw      ZBRANCH
 347+ 6F43 0A 00                        dw      Emit_Skip - $
 348+ 6F45 E8 65                        dw          EMITC                   //      emitc
 349+ 6F47 54 6C                        dw          ONE                     //      1
 350+ 6F49 73 6D E8 6A                  dw          OUT, PLUSSTORE        //      out +!
 351+ 6F4D              Emit_Skip:                                          // endif
 352+ 6F4D 47 69                        dw      EXIT                        // ;
 353+ 6F4F
 354+ 6F4F              //  ______________________________________________________________________
 355+ 6F4F              //
 356+ 6F4F              // space        --
 357+ 6F4F                              Colon_Def SPACE, "SPACE", is_normal
 357+ 6F4F             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 357+ 6F4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6F4F             >
 357+ 6F4F             >                // dummy db directives used to calculate length of namec
 357+ 6F4F 53 50 41 43 >                db      "SPACE"
 357+ 6F53 45          >
 357+ 6F54             >len_NFA         defl    $ - temp_NFA
 357+ 6F54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6F4F             >
 357+ 6F4F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 6F50 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 357+ 6F54 45          >
 357+ 6F55             >                org     $-1                 // alter last byte of Name just above to set
 357+ 6F54 C5          >                db      {b $} | END_BIT     // msb as name end
 357+ 6F55             >
 357+ 6F55 33 6F       >                dw      last_NFA            // Link to previous definition Name
 357+ 6F57             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6F57 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 357+ 6F5A             >
 357+ 6F5A             >
 357+ 6F5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6F5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6F5A             >
 357+ 6F5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6F5A 7A 6C 3A 6F                  dw      BL, EMIT                // bl emit
 359+ 6F5E 47 69                        dw      EXIT                    // ;
 360+ 6F60
 361+ 6F60              //  ______________________________________________________________________
 362+ 6F60              //
 363+ 6F60              // traverse     a n -- a
 364+ 6F60              // A dictionary entry is structured as follows
 365+ 6F60              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 366+ 6F60              //      +1   word name, last character is toggled with $80
 367+ 6F60              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 368+ 6F60              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 369+ 6F60              // PFA: +6+n "is_code", definitions have no PFA. // +5
 370+ 6F60              //
 371+ 6F60                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 371+ 6F60             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 371+ 6F60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 6F60             >
 371+ 6F60             >                // dummy db directives used to calculate length of namec
 371+ 6F60 54 52 41 56 >                db      "TRAVERSE"
 371+ 6F64 45 52 53 45 >
 371+ 6F68             >len_NFA         defl    $ - temp_NFA
 371+ 6F68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 6F60             >
 371+ 6F60 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 6F61 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 371+ 6F65 45 52 53 45 >
 371+ 6F69             >                org     $-1                 // alter last byte of Name just above to set
 371+ 6F68 C5          >                db      {b $} | END_BIT     // msb as name end
 371+ 6F69             >
 371+ 6F69 4F 6F       >                dw      last_NFA            // Link to previous definition Name
 371+ 6F6B             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 6F6B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 6F6E             >
 371+ 6F6E             >
 371+ 6F6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 6F6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 6F6E             >
 371+ 6F6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 6F6E 7B 6A                        dw      SWAP                    // swap
 373+ 6F70              Traverse_Begin:                                 // begin
 374+ 6F70 4B 6A BE 69                  dw          OVER, PLUS          //      over +
 375+ 6F74 A5 63 7F 00                  dw          LIT, 127            //      127
 376+ 6F78 4B 6A 1E 6B                  dw          OVER, CFETCH        //      over @
 377+ 6F7C CD 6E                        dw          LESS                //      <
 378+ 6F7E                                                              // until
 379+ 6F7E 1C 64                        dw      ZBRANCH
 380+ 6F80 F0 FF                        dw      Traverse_Begin - $
 381+ 6F82 62 6A                        dw      NIP                     //  nip
 382+ 6F84 47 69                        dw      EXIT                    //  ;
 383+ 6F86
 384+ 6F86              //  ______________________________________________________________________
 385+ 6F86              //
 386+ 6F86              // latest       -- nfa
 387+ 6F86                              Colon_Def LATEST, "LATEST", is_normal
 387+ 6F86             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 387+ 6F86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 387+ 6F86             >
 387+ 6F86             >                // dummy db directives used to calculate length of namec
 387+ 6F86 4C 41 54 45 >                db      "LATEST"
 387+ 6F8A 53 54       >
 387+ 6F8C             >len_NFA         defl    $ - temp_NFA
 387+ 6F8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 387+ 6F86             >
 387+ 6F86 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 387+ 6F87 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 387+ 6F8B 53 54       >
 387+ 6F8D             >                org     $-1                 // alter last byte of Name just above to set
 387+ 6F8C D4          >                db      {b $} | END_BIT     // msb as name end
 387+ 6F8D             >
 387+ 6F8D 60 6F       >                dw      last_NFA            // Link to previous definition Name
 387+ 6F8F             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 387+ 6F8F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 387+ 6F92             >
 387+ 6F92             >
 387+ 6F92             >                endif           ; ok        // for other definitions it "points" the correct handler
 387+ 6F92             >                // Use of "; ok" to suppress "warning[fwdref]"
 387+ 6F92             >
 387+ 6F92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 388+ 6F92 A6 6D                        dw      CURRENT                 // current
 389+ 6F94 07 6B 07 6B                  dw      FETCH, FETCH            // @ @
 390+ 6F98 47 69                        dw      EXIT                    // ;
 391+ 6F9A
 392+ 6F9A              //  ______________________________________________________________________
 393+ 6F9A              //
 394+ 6F9A              // lfa          pfa -- lfa
 395+ 6F9A                              Colon_Def LFA, "LFA", is_normal
 395+ 6F9A             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 395+ 6F9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 6F9A             >
 395+ 6F9A             >                // dummy db directives used to calculate length of namec
 395+ 6F9A 4C 46 41    >                db      "LFA"
 395+ 6F9D             >len_NFA         defl    $ - temp_NFA
 395+ 6F9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 6F9A             >
 395+ 6F9A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 6F9B 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 395+ 6F9E             >                org     $-1                 // alter last byte of Name just above to set
 395+ 6F9D C1          >                db      {b $} | END_BIT     // msb as name end
 395+ 6F9E             >
 395+ 6F9E 86 6F       >                dw      last_NFA            // Link to previous definition Name
 395+ 6FA0             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 6FA0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 6FA3             >
 395+ 6FA3             >
 395+ 6FA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 6FA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 6FA3             >
 395+ 6FA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 6FA3 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 397+ 6FA7 A5 6E                        dw      SUBTRACT                // cell- --> -
 398+ 6FA9 47 69                        dw      EXIT                    // ;
 399+ 6FAB
 400+ 6FAB              //  ______________________________________________________________________
 401+ 6FAB              //
 402+ 6FAB              // cfa          pfa -- cfa
 403+ 6FAB                              Colon_Def CFA, "CFA", is_normal
 403+ 6FAB             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 403+ 6FAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 6FAB             >
 403+ 6FAB             >                // dummy db directives used to calculate length of namec
 403+ 6FAB 43 46 41    >                db      "CFA"
 403+ 6FAE             >len_NFA         defl    $ - temp_NFA
 403+ 6FAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 6FAB             >
 403+ 6FAB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 6FAC 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 403+ 6FAF             >                org     $-1                 // alter last byte of Name just above to set
 403+ 6FAE C1          >                db      {b $} | END_BIT     // msb as name end
 403+ 6FAF             >
 403+ 6FAF 9A 6F       >                dw      last_NFA            // Link to previous definition Name
 403+ 6FB1             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6FB1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 6FB4             >
 403+ 6FB4             >
 403+ 6FB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6FB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6FB4             >
 403+ 6FB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6FB4              //              dw      CELL_MINUS              // cell-
 405+ 6FB4 66 6C A5 6E                  dw      THREE, SUBTRACT         // 3 -
 406+ 6FB8 47 69                        dw      EXIT                    // ;
 407+ 6FBA
 408+ 6FBA              //  ______________________________________________________________________
 409+ 6FBA              //
 410+ 6FBA              // nfa          pfa -- nfa
 411+ 6FBA                              Colon_Def NFA, "NFA", is_normal
 411+ 6FBA             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 411+ 6FBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 6FBA             >
 411+ 6FBA             >                // dummy db directives used to calculate length of namec
 411+ 6FBA 4E 46 41    >                db      "NFA"
 411+ 6FBD             >len_NFA         defl    $ - temp_NFA
 411+ 6FBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 6FBA             >
 411+ 6FBA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 6FBB 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 411+ 6FBE             >                org     $-1                 // alter last byte of Name just above to set
 411+ 6FBD C1          >                db      {b $} | END_BIT     // msb as name end
 411+ 6FBE             >
 411+ 6FBE AB 6F       >                dw      last_NFA            // Link to previous definition Name
 411+ 6FC0             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 6FC0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 6FC3             >
 411+ 6FC3             >
 411+ 6FC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 6FC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 6FC3             >
 411+ 6FC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 6FC3 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 413+ 6FC7 A5 6E                        dw      SUBTRACT                // -
 414+ 6FC9 70 6C                        dw      NEG_ONE                 // -1
 415+ 6FCB 6B 6F                        dw      TRAVERSE                // traverse
 416+ 6FCD 47 69                        dw      EXIT                    // ;
 417+ 6FCF
 418+ 6FCF              //  ______________________________________________________________________
 419+ 6FCF              //
 420+ 6FCF              // pfa          nfa -- pfa
 421+ 6FCF                              Colon_Def PFA, "PFA", is_normal
 421+ 6FCF             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 421+ 6FCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 6FCF             >
 421+ 6FCF             >                // dummy db directives used to calculate length of namec
 421+ 6FCF 50 46 41    >                db      "PFA"
 421+ 6FD2             >len_NFA         defl    $ - temp_NFA
 421+ 6FD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 6FCF             >
 421+ 6FCF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 6FD0 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 421+ 6FD3             >                org     $-1                 // alter last byte of Name just above to set
 421+ 6FD2 C1          >                db      {b $} | END_BIT     // msb as name end
 421+ 6FD3             >
 421+ 6FD3 BA 6F       >                dw      last_NFA            // Link to previous definition Name
 421+ 6FD5             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6FD5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 6FD8             >
 421+ 6FD8             >
 421+ 6FD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6FD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6FD8             >
 421+ 6FD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6FD8 54 6C                        dw      ONE                     // 1
 423+ 6FDA 6B 6F                        dw      TRAVERSE                // traverse
 424+ 6FDC A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 425+ 6FE0 BE 69                        dw      PLUS                    // +
 426+ 6FE2 47 69                        dw      EXIT                    // ;
 427+ 6FE4
 428+ 6FE4              //  ______________________________________________________________________
 429+ 6FE4              //
 430+ 6FE4              // >body        cfa -- pfa
 431+ 6FE4                              Colon_Def TO_BODY, ">BODY", is_normal
 431+ 6FE4             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 431+ 6FE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 6FE4             >
 431+ 6FE4             >                // dummy db directives used to calculate length of namec
 431+ 6FE4 3E 42 4F 44 >                db      ">BODY"
 431+ 6FE8 59          >
 431+ 6FE9             >len_NFA         defl    $ - temp_NFA
 431+ 6FE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 6FE4             >
 431+ 6FE4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 6FE5 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 431+ 6FE9 59          >
 431+ 6FEA             >                org     $-1                 // alter last byte of Name just above to set
 431+ 6FE9 D9          >                db      {b $} | END_BIT     // msb as name end
 431+ 6FEA             >
 431+ 6FEA CF 6F       >                dw      last_NFA            // Link to previous definition Name
 431+ 6FEC             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 6FEC CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 6FEF             >
 431+ 6FEF             >
 431+ 6FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 6FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 6FEF             >
 431+ 6FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 6FEF 66 6C BE 69                  dw      THREE, PLUS             // cell+ --> 3 +
 433+ 6FF3 47 69                        dw      EXIT                    // ;
 434+ 6FF5
 435+ 6FF5              //  ______________________________________________________________________
 436+ 6FF5              //
 437+ 6FF5              // <name        cfa -- nfa
 438+ 6FF5                              Colon_Def TO_NAME, "<NAME", is_normal
 438+ 6FF5             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 438+ 6FF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ 6FF5             >
 438+ 6FF5             >                // dummy db directives used to calculate length of namec
 438+ 6FF5 3C 4E 41 4D >                db      "<NAME"
 438+ 6FF9 45          >
 438+ 6FFA             >len_NFA         defl    $ - temp_NFA
 438+ 6FFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ 6FF5             >
 438+ 6FF5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ 6FF6 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 438+ 6FFA 45          >
 438+ 6FFB             >                org     $-1                 // alter last byte of Name just above to set
 438+ 6FFA C5          >                db      {b $} | END_BIT     // msb as name end
 438+ 6FFB             >
 438+ 6FFB E4 6F       >                dw      last_NFA            // Link to previous definition Name
 438+ 6FFD             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6FFD CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 7000             >
 438+ 7000             >
 438+ 7000             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 7000             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 7000             >
 438+ 7000             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 7000 EC 6F                        dw      TO_BODY                 // >body
 440+ 7002 C0 6F                        dw      NFA                     // nfa
 441+ 7004 47 69                        dw      EXIT                    // ;
 442+ 7006
 443+ 7006              //  ______________________________________________________________________
 444+ 7006              //
 445+ 7006              // !csp         --
 446+ 7006              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 447+ 7006                              Colon_Def STORE_CSP, "!CSP", is_normal
 447+ 7006             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 447+ 7006             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ 7006             >
 447+ 7006             >                // dummy db directives used to calculate length of namec
 447+ 7006 21 43 53 50 >                db      "!CSP"
 447+ 700A             >len_NFA         defl    $ - temp_NFA
 447+ 700A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ 7006             >
 447+ 7006 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ 7007 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 447+ 700B             >                org     $-1                 // alter last byte of Name just above to set
 447+ 700A D0          >                db      {b $} | END_BIT     // msb as name end
 447+ 700B             >
 447+ 700B F5 6F       >                dw      last_NFA            // Link to previous definition Name
 447+ 700D             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 700D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 447+ 7010             >
 447+ 7010             >
 447+ 7010             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 7010             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 7010             >
 447+ 7010             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 7010 17 69                        dw      SPFETCH                 // sp@
 449+ 7012 DB 6D 12 6B                  dw      CSP, STORE              // csp !
 450+ 7016 47 69                        dw      EXIT                    // ;
 451+ 7018
 452+ 7018              //  ______________________________________________________________________
 453+ 7018              //
 454+ 7018              // ?error       f n --
 455+ 7018              // rase error n if flag f it true
 456+ 7018                              Colon_Def QERROR, "?ERROR", is_normal
 456+ 7018             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 456+ 7018             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 7018             >
 456+ 7018             >                // dummy db directives used to calculate length of namec
 456+ 7018 3F 45 52 52 >                db      "?ERROR"
 456+ 701C 4F 52       >
 456+ 701E             >len_NFA         defl    $ - temp_NFA
 456+ 701E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 7018             >
 456+ 7018 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 7019 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 456+ 701D 4F 52       >
 456+ 701F             >                org     $-1                 // alter last byte of Name just above to set
 456+ 701E D2          >                db      {b $} | END_BIT     // msb as name end
 456+ 701F             >
 456+ 701F 06 70       >                dw      last_NFA            // Link to previous definition Name
 456+ 7021             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 7021 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 7024             >
 456+ 7024             >
 456+ 7024             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 7024             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 7024             >
 456+ 7024             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 7024 7B 6A                        dw      SWAP                    // swap
 458+ 7026                                                              // if
 459+ 7026 1C 64                        dw      ZBRANCH
 460+ 7028 08 00                        dw      QError_Else - $
 461+ 702A B5 75                        dw          ERROR               //      error  ( is a forward-ref )
 462+ 702C                                                              // else
 463+ 702C 07 64                        dw      BRANCH
 464+ 702E 04 00                        dw      QError_Endif - $
 465+ 7030              QError_Else:
 466+ 7030 59 6A                        dw          DROP                //      drop
 467+ 7032              QError_Endif:                                   // endif
 468+ 7032 47 69                        dw      EXIT                    // ;
 469+ 7034
 470+ 7034              //  ______________________________________________________________________
 471+ 7034              //
 472+ 7034              // ?comp       --
 473+ 7034              // raise msg #17 if not compiling
 474+ 7034                              Colon_Def QCOMP, "?COMP", is_normal
 474+ 7034             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 474+ 7034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ 7034             >
 474+ 7034             >                // dummy db directives used to calculate length of namec
 474+ 7034 3F 43 4F 4D >                db      "?COMP"
 474+ 7038 50          >
 474+ 7039             >len_NFA         defl    $ - temp_NFA
 474+ 7039             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ 7034             >
 474+ 7034 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ 7035 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 474+ 7039 50          >
 474+ 703A             >                org     $-1                 // alter last byte of Name just above to set
 474+ 7039 D0          >                db      {b $} | END_BIT     // msb as name end
 474+ 703A             >
 474+ 703A 18 70       >                dw      last_NFA            // Link to previous definition Name
 474+ 703C             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 703C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 703F             >
 474+ 703F             >
 474+ 703F             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 703F             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 703F             >
 474+ 703F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 703F B2 6D 07 6B                  dw      STATE, FETCH            // state @
 476+ 7043 84 69                        dw      ZEQUAL                  // 0=
 477+ 7045 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 478+ 7049 21 70                        dw      QERROR                  // ?error
 479+ 704B 47 69                        dw      EXIT                    // ;
 480+ 704D
 481+ 704D              //  ______________________________________________________________________
 482+ 704D              //
 483+ 704D              // ?exec       --
 484+ 704D              // raise msg #18 if compiling
 485+ 704D                              Colon_Def QEXEC, "?EXEC", is_normal
 485+ 704D             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 485+ 704D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 485+ 704D             >
 485+ 704D             >                // dummy db directives used to calculate length of namec
 485+ 704D 3F 45 58 45 >                db      "?EXEC"
 485+ 7051 43          >
 485+ 7052             >len_NFA         defl    $ - temp_NFA
 485+ 7052             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 485+ 704D             >
 485+ 704D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 485+ 704E 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 485+ 7052 43          >
 485+ 7053             >                org     $-1                 // alter last byte of Name just above to set
 485+ 7052 C3          >                db      {b $} | END_BIT     // msb as name end
 485+ 7053             >
 485+ 7053 34 70       >                dw      last_NFA            // Link to previous definition Name
 485+ 7055             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 485+ 7055 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 485+ 7058             >
 485+ 7058             >
 485+ 7058             >                endif           ; ok        // for other definitions it "points" the correct handler
 485+ 7058             >                // Use of "; ok" to suppress "warning[fwdref]"
 485+ 7058             >
 485+ 7058             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 486+ 7058 B2 6D 07 6B                  dw      STATE, FETCH            // state @
 487+ 705C A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 488+ 7060 21 70                        dw      QERROR                  // ?error
 489+ 7062 47 69                        dw      EXIT                    // ;
 490+ 7064
 491+ 7064              //  ______________________________________________________________________
 492+ 7064              //
 493+ 7064              // ?pairs       n1 n2 --
 494+ 7064              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 495+ 7064                              Colon_Def QPAIRS, "?PAIRS", is_normal
 495+ 7064             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 495+ 7064             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 495+ 7064             >
 495+ 7064             >                // dummy db directives used to calculate length of namec
 495+ 7064 3F 50 41 49 >                db      "?PAIRS"
 495+ 7068 52 53       >
 495+ 706A             >len_NFA         defl    $ - temp_NFA
 495+ 706A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 495+ 7064             >
 495+ 7064 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 495+ 7065 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 495+ 7069 52 53       >
 495+ 706B             >                org     $-1                 // alter last byte of Name just above to set
 495+ 706A D3          >                db      {b $} | END_BIT     // msb as name end
 495+ 706B             >
 495+ 706B 4D 70       >                dw      last_NFA            // Link to previous definition Name
 495+ 706D             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 495+ 706D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 495+ 7070             >
 495+ 7070             >
 495+ 7070             >                endif           ; ok        // for other definitions it "points" the correct handler
 495+ 7070             >                // Use of "; ok" to suppress "warning[fwdref]"
 495+ 7070             >
 495+ 7070             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 496+ 7070 A5 6E                        dw      SUBTRACT                // -
 497+ 7072 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 498+ 7076 21 70                        dw      QERROR                  // ?error
 499+ 7078 47 69                        dw      EXIT                    // ;
 500+ 707A
 501+ 707A              //  ______________________________________________________________________
 502+ 707A              //
 503+ 707A              // ?csp       --
 504+ 707A              // raise msg #20 if surrent SP in not what previously saved in CSP.
 505+ 707A              // Compiler relies on that for  syntax checking of structures
 506+ 707A                              Colon_Def QCSP, "?CSP", is_normal
 506+ 707A             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 506+ 707A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 506+ 707A             >
 506+ 707A             >                // dummy db directives used to calculate length of namec
 506+ 707A 3F 43 53 50 >                db      "?CSP"
 506+ 707E             >len_NFA         defl    $ - temp_NFA
 506+ 707E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 506+ 707A             >
 506+ 707A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 506+ 707B 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 506+ 707F             >                org     $-1                 // alter last byte of Name just above to set
 506+ 707E D0          >                db      {b $} | END_BIT     // msb as name end
 506+ 707F             >
 506+ 707F 64 70       >                dw      last_NFA            // Link to previous definition Name
 506+ 7081             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 506+ 7081 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 506+ 7084             >
 506+ 7084             >
 506+ 7084             >                endif           ; ok        // for other definitions it "points" the correct handler
 506+ 7084             >                // Use of "; ok" to suppress "warning[fwdref]"
 506+ 7084             >
 506+ 7084             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 507+ 7084 17 69                        dw      SPFETCH                 // sp@
 508+ 7086 DB 6D 07 6B                  dw      CSP, FETCH              // csp @
 509+ 708A A5 6E                        dw      SUBTRACT                // -
 510+ 708C A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 511+ 7090 21 70                        dw      QERROR                  // ?error
 512+ 7092 47 69                        dw      EXIT                    // ;
 513+ 7094
 514+ 7094              //  ______________________________________________________________________
 515+ 7094              //
 516+ 7094              // ?loading      --
 517+ 7094              // raise msg #22 if not loading
 518+ 7094                              Colon_Def QLOADING, "?LOADING", is_normal
 518+ 7094             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 518+ 7094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ 7094             >
 518+ 7094             >                // dummy db directives used to calculate length of namec
 518+ 7094 3F 4C 4F 41 >                db      "?LOADING"
 518+ 7098 44 49 4E 47 >
 518+ 709C             >len_NFA         defl    $ - temp_NFA
 518+ 709C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ 7094             >
 518+ 7094 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ 7095 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 518+ 7099 44 49 4E 47 >
 518+ 709D             >                org     $-1                 // alter last byte of Name just above to set
 518+ 709C C7          >                db      {b $} | END_BIT     // msb as name end
 518+ 709D             >
 518+ 709D 7A 70       >                dw      last_NFA            // Link to previous definition Name
 518+ 709F             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 709F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 70A2             >
 518+ 70A2             >
 518+ 70A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 70A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 70A2             >
 518+ 70A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 70A2 5F 6D 07 6B                  dw      BLK, FETCH              // blk @
 520+ 70A6 84 69                        dw      ZEQUAL                  // 0=
 521+ 70A8 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 522+ 70AC 21 70                        dw      QERROR                  // ?error
 523+ 70AE 47 69                        dw      EXIT                    // ;
 524+ 70B0
 525+ 70B0              //  ______________________________________________________________________
 526+ 70B0              //
 527+ 70B0              // compile      --
 528+ 70B0              // compiles the following word
 529+ 70B0                              Colon_Def COMPILE, "COMPILE", is_normal
 529+ 70B0             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 529+ 70B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 529+ 70B0             >
 529+ 70B0             >                // dummy db directives used to calculate length of namec
 529+ 70B0 43 4F 4D 50 >                db      "COMPILE"
 529+ 70B4 49 4C 45    >
 529+ 70B7             >len_NFA         defl    $ - temp_NFA
 529+ 70B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 529+ 70B0             >
 529+ 70B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 529+ 70B1 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 529+ 70B5 49 4C 45    >
 529+ 70B8             >                org     $-1                 // alter last byte of Name just above to set
 529+ 70B7 C5          >                db      {b $} | END_BIT     // msb as name end
 529+ 70B8             >
 529+ 70B8 94 70       >                dw      last_NFA            // Link to previous definition Name
 529+ 70BA             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 529+ 70BA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 529+ 70BD             >
 529+ 70BD             >
 529+ 70BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 529+ 70BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 529+ 70BD             >
 529+ 70BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 530+ 70BD 3C 70                        dw      QCOMP                   // ?comp
 531+ 70BF 6A 69                        dw      R_TO                    // r>
 532+ 70C1 86 6A FD 69                  dw      DUP, CELL_PLUS          // dup, cell+
 533+ 70C5 58 69                        dw      TO_R                    // >r
 534+ 70C7 07 6B 73 6E                  dw      FETCH, COMMA            // @ ,
 535+ 70CB 47 69                        dw      EXIT                    // ;
 536+ 70CD
 537+ 70CD              //  ______________________________________________________________________
 538+ 70CD              //
 539+ 70CD              // compile,     --
 540+ 70CD              // compiles the following word
 541+ 70CD                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 541+ 70CD             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 541+ 70CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 70CD             >
 541+ 70CD             >                // dummy db directives used to calculate length of namec
 541+ 70CD 43 4F 4D 50 >                db      "COMPILE,"
 541+ 70D1 49 4C 45 2C >
 541+ 70D5             >len_NFA         defl    $ - temp_NFA
 541+ 70D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 70CD             >
 541+ 70CD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 70CE 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 541+ 70D2 49 4C 45 2C >
 541+ 70D6             >                org     $-1                 // alter last byte of Name just above to set
 541+ 70D5 AC          >                db      {b $} | END_BIT     // msb as name end
 541+ 70D6             >
 541+ 70D6 B0 70       >                dw      last_NFA            // Link to previous definition Name
 541+ 70D8             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 70D8 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 70DB             >
 541+ 70DB             >
 541+ 70DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 70DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 70DB             >
 541+ 70DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 70DB 3C 70                        dw      QCOMP                   // ?comp
 543+ 70DD 73 6E                        dw      COMMA                   // ,
 544+ 70DF 47 69                        dw      EXIT                    // ;
 545+ 70E1
 546+ 70E1              //  ______________________________________________________________________
 547+ 70E1              //
 548+ 70E1              // [            --
 549+ 70E1              // stop compilation
 550+ 70E1                              Colon_Def SQUARED_OPEN, "[", is_immediate
 550+ 70E1             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 550+ 70E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 550+ 70E1             >
 550+ 70E1             >                // dummy db directives used to calculate length of namec
 550+ 70E1 5B          >                db      "["
 550+ 70E2             >len_NFA         defl    $ - temp_NFA
 550+ 70E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 550+ 70E1             >
 550+ 70E1 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 550+ 70E2 5B          >                db      "["               // name string in 7-bit ascii, but
 550+ 70E3             >                org     $-1                 // alter last byte of Name just above to set
 550+ 70E2 DB          >                db      {b $} | END_BIT     // msb as name end
 550+ 70E3             >
 550+ 70E3 CD 70       >                dw      last_NFA            // Link to previous definition Name
 550+ 70E5             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 550+ 70E5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 550+ 70E8             >
 550+ 70E8             >
 550+ 70E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 550+ 70E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 550+ 70E8             >
 550+ 70E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 551+ 70E8 4B 6C                        dw      ZERO                    // 0
 552+ 70EA B2 6D 12 6B                  dw      STATE, STORE            // state !
 553+ 70EE 47 69                        dw      EXIT                    // ; immediate
 554+ 70F0
 555+ 70F0              //  ______________________________________________________________________
 556+ 70F0              //
 557+ 70F0              // ]            --
 558+ 70F0              // start compilation
 559+ 70F0                              Colon_Def SQUARED_CLOSE, "]", is_normal
 559+ 70F0             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 559+ 70F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 559+ 70F0             >
 559+ 70F0             >                // dummy db directives used to calculate length of namec
 559+ 70F0 5D          >                db      "]"
 559+ 70F1             >len_NFA         defl    $ - temp_NFA
 559+ 70F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 559+ 70F0             >
 559+ 70F0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 559+ 70F1 5D          >                db      "]"               // name string in 7-bit ascii, but
 559+ 70F2             >                org     $-1                 // alter last byte of Name just above to set
 559+ 70F1 DD          >                db      {b $} | END_BIT     // msb as name end
 559+ 70F2             >
 559+ 70F2 E1 70       >                dw      last_NFA            // Link to previous definition Name
 559+ 70F4             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 559+ 70F4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 559+ 70F7             >
 559+ 70F7             >
 559+ 70F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 559+ 70F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 559+ 70F7             >
 559+ 70F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 560+ 70F7 A5 63 C0 00                  dw      LIT, $C0                // 192
 561+ 70FB B2 6D 12 6B                  dw      STATE, STORE            // state !
 562+ 70FF 47 69                        dw      EXIT                    // ;
 563+ 7101
 564+ 7101              //  ______________________________________________________________________
 565+ 7101              //
 566+ 7101              // smudge       --
 567+ 7101              // toggle smudge bit of latest definition
 568+ 7101                              Colon_Def SMUDGE, "SMUDGE", is_normal
 568+ 7101             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 568+ 7101             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 568+ 7101             >
 568+ 7101             >                // dummy db directives used to calculate length of namec
 568+ 7101 53 4D 55 44 >                db      "SMUDGE"
 568+ 7105 47 45       >
 568+ 7107             >len_NFA         defl    $ - temp_NFA
 568+ 7107             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 568+ 7101             >
 568+ 7101 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 568+ 7102 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 568+ 7106 47 45       >
 568+ 7108             >                org     $-1                 // alter last byte of Name just above to set
 568+ 7107 C5          >                db      {b $} | END_BIT     // msb as name end
 568+ 7108             >
 568+ 7108 F0 70       >                dw      last_NFA            // Link to previous definition Name
 568+ 710A             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 568+ 710A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 568+ 710D             >
 568+ 710D             >
 568+ 710D             >                endif           ; ok        // for other definitions it "points" the correct handler
 568+ 710D             >                // Use of "; ok" to suppress "warning[fwdref]"
 568+ 710D             >
 568+ 710D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 569+ 710D 8F 6F                        dw      LATEST                  // latest
 570+ 710F A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 571+ 7113 FC 6A                        dw      TOGGLE                  // toggle
 572+ 7115 47 69                        dw      EXIT                    // ;
 573+ 7117
 574+ 7117              //  ______________________________________________________________________
 575+ 7117              //
 576+ 7117              // immediate    --
 577+ 7117              // make immediate the latest definition
 578+ 7117                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 578+ 7117             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 578+ 7117             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 578+ 7117             >
 578+ 7117             >                // dummy db directives used to calculate length of namec
 578+ 7117 49 4D 4D 45 >                db      "IMMEDIATE"
 578+ 711B 44 49 41 54 >
 578+ 711F 45          >
 578+ 7120             >len_NFA         defl    $ - temp_NFA
 578+ 7120             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 578+ 7117             >
 578+ 7117 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 578+ 7118 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 578+ 711C 44 49 41 54 >
 578+ 7120 45          >
 578+ 7121             >                org     $-1                 // alter last byte of Name just above to set
 578+ 7120 C5          >                db      {b $} | END_BIT     // msb as name end
 578+ 7121             >
 578+ 7121 01 71       >                dw      last_NFA            // Link to previous definition Name
 578+ 7123             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 578+ 7123 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 578+ 7126             >
 578+ 7126             >
 578+ 7126             >                endif           ; ok        // for other definitions it "points" the correct handler
 578+ 7126             >                // Use of "; ok" to suppress "warning[fwdref]"
 578+ 7126             >
 578+ 7126             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 579+ 7126 8F 6F                        dw      LATEST                  // latest
 580+ 7128 A5 63 40 00                  dw      LIT, $40                // 64
 581+ 712C FC 6A                        dw      TOGGLE                  // toggle
 582+ 712E 47 69                        dw      EXIT                    // ;
 583+ 7130
 584+ 7130              //  ______________________________________________________________________
 585+ 7130              //
 586+ 7130              // hex          --
 587+ 7130              // change numeration base
 588+ 7130                              Colon_Def HEX, "HEX", is_normal
 588+ 7130             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 588+ 7130             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 588+ 7130             >
 588+ 7130             >                // dummy db directives used to calculate length of namec
 588+ 7130 48 45 58    >                db      "HEX"
 588+ 7133             >len_NFA         defl    $ - temp_NFA
 588+ 7133             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 588+ 7130             >
 588+ 7130 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 588+ 7131 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 588+ 7134             >                org     $-1                 // alter last byte of Name just above to set
 588+ 7133 D8          >                db      {b $} | END_BIT     // msb as name end
 588+ 7134             >
 588+ 7134 17 71       >                dw      last_NFA            // Link to previous definition Name
 588+ 7136             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 588+ 7136 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 588+ 7139             >
 588+ 7139             >
 588+ 7139             >                endif           ; ok        // for other definitions it "points" the correct handler
 588+ 7139             >                // Use of "; ok" to suppress "warning[fwdref]"
 588+ 7139             >
 588+ 7139             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 589+ 7139 A5 63 10 00                  dw      LIT, 16                 // 16
 590+ 713D BD 6D 12 6B                  dw      BASE, STORE             // base !
 591+ 7141 47 69                        dw      EXIT                    // ;
 592+ 7143
 593+ 7143              //  ______________________________________________________________________
 594+ 7143              //
 595+ 7143              // decimal      --
 596+ 7143              // change numeration base
 597+ 7143                              Colon_Def DECIMAL, "DECIMAL", is_normal
 597+ 7143             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 597+ 7143             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 597+ 7143             >
 597+ 7143             >                // dummy db directives used to calculate length of namec
 597+ 7143 44 45 43 49 >                db      "DECIMAL"
 597+ 7147 4D 41 4C    >
 597+ 714A             >len_NFA         defl    $ - temp_NFA
 597+ 714A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 597+ 7143             >
 597+ 7143 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 597+ 7144 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 597+ 7148 4D 41 4C    >
 597+ 714B             >                org     $-1                 // alter last byte of Name just above to set
 597+ 714A CC          >                db      {b $} | END_BIT     // msb as name end
 597+ 714B             >
 597+ 714B 30 71       >                dw      last_NFA            // Link to previous definition Name
 597+ 714D             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 597+ 714D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 597+ 7150             >
 597+ 7150             >
 597+ 7150             >                endif           ; ok        // for other definitions it "points" the correct handler
 597+ 7150             >                // Use of "; ok" to suppress "warning[fwdref]"
 597+ 7150             >
 597+ 7150             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 598+ 7150 A5 63 0A 00                  dw      LIT, 10                 // 10
 599+ 7154 BD 6D 12 6B                  dw      BASE, STORE             // base !
 600+ 7158 47 69                        dw      EXIT                    // ;
 601+ 715A
 602+ 715A              //  ______________________________________________________________________
 603+ 715A              //
 604+ 715A              // (;code)       --
 605+ 715A              // patch to CFA to call/jump to the "following code"
 606+ 715A                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 606+ 715A             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 606+ 715A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 715A             >
 606+ 715A             >                // dummy db directives used to calculate length of namec
 606+ 715A 28 3B 43 4F >                db      "(;CODE)"
 606+ 715E 44 45 29    >
 606+ 7161             >len_NFA         defl    $ - temp_NFA
 606+ 7161             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 715A             >
 606+ 715A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 715B 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 606+ 715F 44 45 29    >
 606+ 7162             >                org     $-1                 // alter last byte of Name just above to set
 606+ 7161 A9          >                db      {b $} | END_BIT     // msb as name end
 606+ 7162             >
 606+ 7162 43 71       >                dw      last_NFA            // Link to previous definition Name
 606+ 7164             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 7164 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 7167             >
 606+ 7167             >
 606+ 7167             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 7167             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 7167             >
 606+ 7167             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 7167 6A 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 608+ 7169 8F 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 609+ 716B D5 6F B1 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 610+ 716F
 611+ 716F A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 612+ 7173 4B 6A 2A 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 613+ 7177 DB 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 614+ 7179
 615+ 7179 12 6B                        dw      STORE                   // !
 616+ 717B 47 69                        dw      EXIT                    // ;
 617+ 717D
 618+ 717D              //  ______________________________________________________________________
 619+ 717D              //
 620+ 717D              // ;code        --
 621+ 717D                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 621+ 717D             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 621+ 717D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ 717D             >
 621+ 717D             >                // dummy db directives used to calculate length of namec
 621+ 717D 3B 43 4F 44 >                db      ";CODE"
 621+ 7181 45          >
 621+ 7182             >len_NFA         defl    $ - temp_NFA
 621+ 7182             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ 717D             >
 621+ 717D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ 717E 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 621+ 7182 45          >
 621+ 7183             >                org     $-1                 // alter last byte of Name just above to set
 621+ 7182 C5          >                db      {b $} | END_BIT     // msb as name end
 621+ 7183             >
 621+ 7183 5A 71       >                dw      last_NFA            // Link to previous definition Name
 621+ 7185             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 7185 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 7188             >
 621+ 7188             >
 621+ 7188             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 7188             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 7188             >
 621+ 7188             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 7188 81 70                        dw      QCSP                    // ?csp
 623+ 718A BA 70                        dw      COMPILE                 // compile
 624+ 718C 64 71                        dw      C_SEMICOLON_CODE        // (;code)
 625+ 718E E5 70                        dw      SQUARED_OPEN            // [
 626+ 7190 FA 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 627+ 7192 47 69                        dw      EXIT                    // ; immediate
 628+ 7194
 629+ 7194              //  ______________________________________________________________________
 630+ 7194              //
 631+ 7194              // <builds      --
 632+ 7194                              Colon_Def CBUILDS, "<BUILDS", is_normal
 632+ 7194             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 632+ 7194             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 632+ 7194             >
 632+ 7194             >                // dummy db directives used to calculate length of namec
 632+ 7194 3C 42 55 49 >                db      "<BUILDS"
 632+ 7198 4C 44 53    >
 632+ 719B             >len_NFA         defl    $ - temp_NFA
 632+ 719B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 632+ 7194             >
 632+ 7194 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 632+ 7195 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 632+ 7199 4C 44 53    >
 632+ 719C             >                org     $-1                 // alter last byte of Name just above to set
 632+ 719B D3          >                db      {b $} | END_BIT     // msb as name end
 632+ 719C             >
 632+ 719C 7D 71       >                dw      last_NFA            // Link to previous definition Name
 632+ 719E             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 632+ 719E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 632+ 71A1             >
 632+ 71A1             >
 632+ 71A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 632+ 71A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 632+ 71A1             >
 632+ 71A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 633+ 71A1 4B 6C                        dw      ZERO                    // 0
 634+ 71A3 07 6C                        dw      CONSTANT                // constant
 635+ 71A5 47 69                        dw      EXIT                    // ;
 636+ 71A7
 637+ 71A7              //  ______________________________________________________________________
 638+ 71A7              //
 639+ 71A7              // recurse      --
 640+ 71A7              //              Colon_Def RECURSE, "RECURSE", is_immediate
 641+ 71A7              //              dw      QCOMP                   // ?comp
 642+ 71A7              //              dw      LATEST                  // latest
 643+ 71A7              //              dw      PFA, CFA                // pfa cfa
 644+ 71A7              //              dw      COMMA                   // ,
 645+ 71A7              //              dw      EXIT                    // ; immediate
 646+ 71A7
 647+ 71A7              //  ______________________________________________________________________
 648+ 71A7              //
 649+ 71A7              // does>     --
 650+ 71A7                              Colon_Def DOES_TO, "DOES>", is_normal
 650+ 71A7             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 650+ 71A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ 71A7             >
 650+ 71A7             >                // dummy db directives used to calculate length of namec
 650+ 71A7 44 4F 45 53 >                db      "DOES>"
 650+ 71AB 3E          >
 650+ 71AC             >len_NFA         defl    $ - temp_NFA
 650+ 71AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ 71A7             >
 650+ 71A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ 71A8 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 650+ 71AC 3E          >
 650+ 71AD             >                org     $-1                 // alter last byte of Name just above to set
 650+ 71AC BE          >                db      {b $} | END_BIT     // msb as name end
 650+ 71AD             >
 650+ 71AD 94 71       >                dw      last_NFA            // Link to previous definition Name
 650+ 71AF             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 71AF CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 71B2             >
 650+ 71B2             >
 650+ 71B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 71B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 71B2             >
 650+ 71B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 71B2 6A 69                        dw      R_TO                    // r>
 652+ 71B4 8F 6F                        dw      LATEST                  // latest
 653+ 71B6 D5 6F                        dw      PFA                     // pfa
 654+ 71B8 12 6B                        dw      STORE                   // !
 655+ 71BA 64 71                        dw      C_SEMICOLON_CODE        // ;code
 656+ 71BC              Does_Ptr:
 657+ 71BC                              // via call coded in CFA
 658+ 71BC                              ldhlrp
 658+ 71BC 2A 96 63    >                ld      hl,(RP_Pointer)
 659+ 71BF 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 660+ 71C0 70                           ld      (hl), b
 661+ 71C1 2B                           dec     hl
 662+ 71C2 71                           ld      (hl), c
 663+ 71C3                              ldrphl
 663+ 71C3 22 96 63    >                ld      (RP_Pointer),hl
 664+ 71C6 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 665+ 71C7
 666+ 71C7 4E                           ld      c, (hl)
 667+ 71C8 23                           inc     hl
 668+ 71C9 46                           ld      b, (hl)
 669+ 71CA 23                           inc     hl
 670+ 71CB
 671+ 71CB                              psh1
 671+ 71CB E5          >                push    hl
 671+ 71CC DD E9       >                jp      (ix)
 672+ 71CE                              // SMUDGE !
 673+ 71CE
 674+ 71CE              //  ______________________________________________________________________
 675+ 71CE              //
 676+ 71CE              // count        a -- a2 n
 677+ 71CE              // expects a counted string at address a, returns string address and counter
 678+ 71CE                              New_Def COUNT, "COUNT", is_code, is_normal
 678+ 71CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 678+ 71CE             >
 678+ 71CE             >                // dummy db directives used to calculate length of namec
 678+ 71CE 43 4F 55 4E >                db      "COUNT"
 678+ 71D2 54          >
 678+ 71D3             >len_NFA         defl    $ - temp_NFA
 678+ 71D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 678+ 71CE             >
 678+ 71CE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 678+ 71CF 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 678+ 71D3 54          >
 678+ 71D4             >                org     $-1                 // alter last byte of Name just above to set
 678+ 71D3 D4          >                db      {b $} | END_BIT     // msb as name end
 678+ 71D4             >
 678+ 71D4 A7 71       >                dw      last_NFA            // Link to previous definition Name
 678+ 71D6             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 678+ 71D6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 678+ 71D6 ~           >
 678+ 71D6 ~           >
 678+ 71D6             >                endif           ; ok        // for other definitions it "points" the correct handler
 678+ 71D6             >                // Use of "; ok" to suppress "warning[fwdref]"
 678+ 71D6             >
 678+ 71D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 679+ 71D6 E1                           pop     hl
 680+ 71D7 5E                           ld      e, (hl)
 681+ 71D8 16 00                        ld      d, 0
 682+ 71DA 23                           inc     hl
 683+ 71DB              Count_Ptr:
 684+ 71DB E5                           push    hl
 685+ 71DC D5                           push    de
 686+ 71DD                              next
 686+ 71DD DD E9       >                jp      (ix)
 687+ 71DF
 688+ 71DF              //  ______________________________________________________________________
 689+ 71DF              //
 690+ 71DF              // bounds       a n -- a+n n
 691+ 71DF              // given an address and a length ( a n ) calculate the bound addresses
 692+ 71DF              // suitable for DO-LOOP
 693+ 71DF                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 693+ 71DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 71DF             >
 693+ 71DF             >                // dummy db directives used to calculate length of namec
 693+ 71DF 42 4F 55 4E >                db      "BOUNDS"
 693+ 71E3 44 53       >
 693+ 71E5             >len_NFA         defl    $ - temp_NFA
 693+ 71E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 71DF             >
 693+ 71DF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 71E0 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 693+ 71E4 44 53       >
 693+ 71E6             >                org     $-1                 // alter last byte of Name just above to set
 693+ 71E5 D3          >                db      {b $} | END_BIT     // msb as name end
 693+ 71E6             >
 693+ 71E6 CE 71       >                dw      last_NFA            // Link to previous definition Name
 693+ 71E8             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 71E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 693+ 71E8 ~           >
 693+ 71E8 ~           >
 693+ 71E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 71E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 71E8             >
 693+ 71E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 71E8 E1                           pop     hl
 695+ 71E9 D1                           pop     de
 696+ 71EA 19                           add     hl, de
 697+ 71EB 18 EE                        jr      Count_Ptr
 698+ 71ED
 699+ 71ED              //  ______________________________________________________________________
 700+ 71ED              //
 701+ 71ED              // leave        --
 702+ 71ED              // Compile (leave) to leave current LOOP and jump just after it
 703+ 71ED                              Colon_Def LEAVE, "LEAVE", is_immediate
 703+ 71ED             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 703+ 71ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 703+ 71ED             >
 703+ 71ED             >                // dummy db directives used to calculate length of namec
 703+ 71ED 4C 45 41 56 >                db      "LEAVE"
 703+ 71F1 45          >
 703+ 71F2             >len_NFA         defl    $ - temp_NFA
 703+ 71F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 703+ 71ED             >
 703+ 71ED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 703+ 71EE 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 703+ 71F2 45          >
 703+ 71F3             >                org     $-1                 // alter last byte of Name just above to set
 703+ 71F2 C5          >                db      {b $} | END_BIT     // msb as name end
 703+ 71F3             >
 703+ 71F3 DF 71       >                dw      last_NFA            // Link to previous definition Name
 703+ 71F5             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 703+ 71F5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 703+ 71F8             >
 703+ 71F8             >
 703+ 71F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 703+ 71F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 703+ 71F8             >
 703+ 71F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 704+ 71F8 BA 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 705+ 71FC 55 6E 58 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 705+ 7200 4B 6C 73 6E
 706+ 7204 4B 6C 4B 6C                  dw      ZERO, ZERO
 707+ 7208 17 69 86 6A                  dw      SPFETCH, DUP
 708+ 720C FD 69 FD 69                  dw      CELL_PLUS, CELL_PLUS
 709+ 7210 6D 6A                        dw      TUCK
 710+ 7212 DB 6D 07 6B                  dw      CSP, FETCH
 711+ 7216 7B 6A A5 6E                  dw      SWAP, SUBTRACT
 712+ 721A 50 68                        dw      CMOVE
 713+ 721C DB 6D 07 6B                  dw      CSP, FETCH, CELL_MINUS
 713+ 7220 08 6A
 714+ 7222 6A 69 4B 6A                  dw      R_TO, OVER, STORE
 714+ 7226 12 6B
 715+ 7228 08 6A 4B 6C                  dw      CELL_MINUS, ZERO
 716+ 722C 7B 6A 12 6B                  dw      SWAP, STORE
 717+ 7230 47 69                        dw      EXIT                    // ;
 718+ 7232
 719+ 7232              //  ______________________________________________________________________
 720+ 7232              //
 721+ 7232              // type         a n --
 722+ 7232              // Sends to current output channel n characters starting at address a.
 723+ 7232                              Colon_Def TYPE, "TYPE", is_normal
 723+ 7232             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 723+ 7232             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ 7232             >
 723+ 7232             >                // dummy db directives used to calculate length of namec
 723+ 7232 54 59 50 45 >                db      "TYPE"
 723+ 7236             >len_NFA         defl    $ - temp_NFA
 723+ 7236             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ 7232             >
 723+ 7232 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ 7233 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 723+ 7237             >                org     $-1                 // alter last byte of Name just above to set
 723+ 7236 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ 7237             >
 723+ 7237 ED 71       >                dw      last_NFA            // Link to previous definition Name
 723+ 7239             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 7239 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 723C             >
 723+ 723C             >
 723+ 723C             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 723C             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 723C             >
 723+ 723C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 723C E8 71                        dw      BOUNDS                  // bounds
 725+ 723E 45 64                        dw      C_Q_DO                  // ?do
 726+ 7240 0C 00                        dw      Type_Skip - $
 727+ 7242              Type_Loop:
 728+ 7242 78 64 1E 6B                  dw          I, CFETCH           //      i c@
 729+ 7246 3A 6F                        dw          EMIT                //      emit
 730+ 7248 F8 63                        dw      C_LOOP                  // loop
 731+ 724A F8 FF                        dw      Type_Loop - $
 732+ 724C              Type_Skip:
 733+ 724C 47 69                        dw      EXIT                    // ;
 734+ 724E
 735+ 724E              //  ______________________________________________________________________
 736+ 724E              //
 737+ 724E              // -trailing    a n1 -- a n2
 738+ 724E              // Assumes that an n1 bytes-long string is stored at address a
 739+ 724E              // and the string contains a space delimited word,
 740+ 724E              // Finds n2 as the position of the first character after the word.
 741+ 724E                              Colon_Def LTRAILING, "-TRAILING", is_normal
 741+ 724E             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 741+ 724E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 741+ 724E             >
 741+ 724E             >                // dummy db directives used to calculate length of namec
 741+ 724E 2D 54 52 41 >                db      "-TRAILING"
 741+ 7252 49 4C 49 4E >
 741+ 7256 47          >
 741+ 7257             >len_NFA         defl    $ - temp_NFA
 741+ 7257             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 741+ 724E             >
 741+ 724E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 741+ 724F 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 741+ 7253 49 4C 49 4E >
 741+ 7257 47          >
 741+ 7258             >                org     $-1                 // alter last byte of Name just above to set
 741+ 7257 C7          >                db      {b $} | END_BIT     // msb as name end
 741+ 7258             >
 741+ 7258 32 72       >                dw      last_NFA            // Link to previous definition Name
 741+ 725A             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 741+ 725A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 741+ 725D             >
 741+ 725D             >
 741+ 725D             >                endif           ; ok        // for other definitions it "points" the correct handler
 741+ 725D             >                // Use of "; ok" to suppress "warning[fwdref]"
 741+ 725D             >
 741+ 725D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 742+ 725D 86 6A 4B 6C                  dw      DUP, ZERO               // dup 0
 743+ 7261                                                              // do
 744+ 7261 45 64                        dw      C_Q_DO
 745+ 7263 20 00                        dw      LTrailing_Leave - $
 746+ 7265              LTrailing_Loop:
 747+ 7265 DB 6A BE 69                  dw          TWO_DUP, PLUS       //      2dup +
 748+ 7269 E5 69                        dw          ONE_SUBTRACT        //      1-
 749+ 726B 1E 6B                        dw          CFETCH              //      c@
 750+ 726D 7A 6C A5 6E                  dw          BL, SUBTRACT        //      bl -
 751+ 7271                                                              //      if
 752+ 7271 1C 64                        dw          ZBRANCH
 753+ 7273 0A 00                        dw          LTrailing_Else - $
 754+ 7275 2F 64                        dw              C_LEAVE         //          leave
 755+ 7277 0C 00                        dw              LTrailing_Leave - $
 756+ 7279 07 64                        dw          BRANCH              //      else
 757+ 727B 04 00                        dw          LTrailing_Endif - $
 758+ 727D              LTrailing_Else:
 759+ 727D E5 69                        dw              ONE_SUBTRACT    //          1-
 760+ 727F              LTrailing_Endif:                                //      endif
 761+ 727F                                                              // loop
 762+ 727F F8 63                        dw      C_LOOP
 763+ 7281 E4 FF                        dw      LTrailing_Loop - $
 764+ 7283              LTrailing_Leave:
 765+ 7283 47 69                        dw      EXIT                    // ;
 766+ 7285
 767+ 7285              //  ______________________________________________________________________
 768+ 7285              //
 769+ 7285              // accept       a n1 -- n2
 770+ 7285              // Accepts at most n1 characters from terminal and stores them at address a
 771+ 7285              // CR stops input. A 'nul' is added as trailer.
 772+ 7285              // n2 is the string length. n2 is kept in span user variable also.
 773+ 7285                              Colon_Def ACCEPT, "ACCEPT", is_normal
 773+ 7285             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 773+ 7285             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 773+ 7285             >
 773+ 7285             >                // dummy db directives used to calculate length of namec
 773+ 7285 41 43 43 45 >                db      "ACCEPT"
 773+ 7289 50 54       >
 773+ 728B             >len_NFA         defl    $ - temp_NFA
 773+ 728B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 773+ 7285             >
 773+ 7285 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 773+ 7286 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 773+ 728A 50 54       >
 773+ 728C             >                org     $-1                 // alter last byte of Name just above to set
 773+ 728B D4          >                db      {b $} | END_BIT     // msb as name end
 773+ 728C             >
 773+ 728C 4E 72       >                dw      last_NFA            // Link to previous definition Name
 773+ 728E             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 773+ 728E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 773+ 7291             >
 773+ 7291             >
 773+ 7291             >                endif           ; ok        // for other definitions it "points" the correct handler
 773+ 7291             >                // Use of "; ok" to suppress "warning[fwdref]"
 773+ 7291             >
 773+ 7291             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 774+ 7291 4B 6A BE 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 774+ 7295 4B 6A
 775+ 7297 4B 6C 9F 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 776+ 729B                                                              // do
 777+ 729B 45 64                        dw      C_Q_DO
 778+ 729D 8C 00                        dw      Accept_Leave - $
 779+ 729F              Accept_Loop:
 780+ 729F 8A 66                        dw          CUR
 781+ 72A1 59 6A D4 66                  dw          DROP, KEY           //      drop key        ( a  c )
 782+ 72A5 86 6A                        dw          DUP                 //      dup             ( a  c  c )
 783+ 72A7 A5 63 0E 00                  dw          LIT, $0E            //      0E
 784+ 72AB BB 6C                        dw          PLUS_ORIGIN         //      +origin
 785+ 72AD 07 6B                        dw          FETCH               //      @               ( a  c  c  del )
 786+ 72AF B1 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 787+ 72B1                                                              //      if
 788+ 72B1 1C 64                        dw          ZBRANCH
 789+ 72B3 2C 00                        dw          Accept_Else_0 - $
 790+ 72B5 59 6A                        dw              DROP            //          drop        ( a  )
 791+ 72B7 86 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 791+ 72BB B1 6E
 792+ 72BD 54 6C E5 68                  dw              ONE, AND_OP     //          1 and
 793+ 72C1 86 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 794+ 72C3 6A 69                        dw              R_TO            //          r> 2 - + r>
 795+ 72C5 13 6A BE 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 796+ 72C9 58 69                        dw              TO_R            //
 797+ 72CB                                                              //          if
 798+ 72CB 1C 64                        dw              ZBRANCH
 799+ 72CD 0A 00                        dw              Accept_Else_1 - $
 800+ 72CF A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 801+ 72D3                                                              //          else
 802+ 72D3 07 64                        dw              BRANCH
 803+ 72D5 06 00                        dw              Accept_Endif_1 - $
 804+ 72D7              Accept_Else_1:
 805+ 72D7 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 806+ 72DB              Accept_Endif_1:                                 //          endif
 807+ 72DB 07 64                        dw          BRANCH
 808+ 72DD 2E 00                        dw          Accept_Endif_0 - $
 809+ 72DF              Accept_Else_0:                                  //      else
 810+ 72DF 86 6A                        dw              DUP             //          dup         ( a  c  c )
 811+ 72E1 A5 63 0D 00                  dw              LIT, 13         //          13
 812+ 72E5 B1 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 813+ 72E7                                                              //          if
 814+ 72E7 1C 64                        dw              ZBRANCH
 815+ 72E9 0C 00                        dw              Accept_Else_2 - $
 816+ 72EB 59 6A 7A 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 817+ 72EF 4B 6C                        dw                  ZERO        //              0       ( a  c  0 )
 818+ 72F1                                                              //          else
 819+ 72F1 07 64                        dw              BRANCH
 820+ 72F3 04 00                        dw              Accept_Endif_2 - $
 821+ 72F5              Accept_Else_2:
 822+ 72F5 86 6A                        dw                  DUP         //              dup     ( a  c  c )
 823+ 72F7                                                              //          endif
 824+ 72F7              Accept_Endif_2:
 825+ 72F7 78 64 2A 6B                  dw              I, CSTORE       //          i           ( a  c )
 826+ 72FB 86 6A 7A 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 826+ 72FF CD 6E
 827+ 7301                                                              //          if
 828+ 7301 1C 64                        dw              ZBRANCH
 829+ 7303 08 00                        dw              Accept_Endif_3 - $
 830+ 7305 6A 69                        dw                  R_TO        //              r>
 831+ 7307 E5 69                        dw                  ONE_SUBTRACT//              1-
 832+ 7309 58 69                        dw                  TO_R        //              >r
 833+ 730B                                                              //          endif
 834+ 730B              Accept_Endif_3:
 835+ 730B              Accept_Endif_0:                                 //      endif
 836+ 730B 3A 6F                        dw          EMIT                //      emit
 837+ 730D 4B 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 837+ 7311 DB 69
 838+ 7313 12 6B                        dw          STORE               //          ( zero pad )
 839+ 7315 78 64                        dw          I                   //      i
 840+ 7317 78 64 1E 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 840+ 731B 84 69
 841+ 731D 1C 64                        dw          ZBRANCH             //
 842+ 731F 06 00                        dw              Accept_Endif_4 - $
 843+ 7321 2F 64                        dw                  C_LEAVE     //              leave
 844+ 7323 06 00                        dw                  Accept_Leave - $
 845+ 7325              Accept_Endif_4:                                 //      endif
 846+ 7325                                                              // loop
 847+ 7325 F8 63                        dw      C_LOOP
 848+ 7327 78 FF                        dw      Accept_Loop - $
 849+ 7329              Accept_Leave:
 850+ 7329 7B 6A A5 6E                  dw      SWAP, SUBTRACT          // swap -
 851+ 732D DB 69                        dw      ONE_PLUS                // 1+
 852+ 732F 86 6A 33 6E                  dw      DUP, SPAN, STORE        // dup span !
 852+ 7333 12 6B
 853+ 7335 47 69                        dw      EXIT                    // ;
 854+ 7337
 855+ 7337              //  ______________________________________________________________________
 856+ 7337              //
 857+ 7337              // expect      a n --
 858+ 7337              // Accepts at most n1 characters from terminal and stores them at address a
 859+ 7337              // CR stops input. A 'nul' is added as trailer.
 860+ 7337              // n2 is the string length. n2 is kept in span user variable also.
 861+ 7337              //              Colon_Def EXPECT, "EXPECT", is_normal
 862+ 7337              //              dw      ACCEPT, DROP            // accept drop
 863+ 7337              //              dw      EXIT                    // ;
 864+ 7337
 865+ 7337              //  ______________________________________________________________________
 866+ 7337              //
 867+ 7337              // query        --
 868+ 7337              // Accept at most 80 character from console. CR stops.
 869+ 7337              // Text is stored in TIB. Variable IN is zeroed.
 870+ 7337                              Colon_Def QUERY, "QUERY", is_normal
 870+ 7337             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 870+ 7337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 7337             >
 870+ 7337             >                // dummy db directives used to calculate length of namec
 870+ 7337 51 55 45 52 >                db      "QUERY"
 870+ 733B 59          >
 870+ 733C             >len_NFA         defl    $ - temp_NFA
 870+ 733C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 7337             >
 870+ 7337 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 7338 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 870+ 733C 59          >
 870+ 733D             >                org     $-1                 // alter last byte of Name just above to set
 870+ 733C D9          >                db      {b $} | END_BIT     // msb as name end
 870+ 733D             >
 870+ 733D 85 72       >                dw      last_NFA            // Link to previous definition Name
 870+ 733F             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 733F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 7342             >
 870+ 7342             >
 870+ 7342             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 7342             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 7342             >
 870+ 7342             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 7342 E9 6C 07 6B                  dw      TIB, FETCH              // tib @
 872+ 7346 A5 63 50 00                  dw      LIT, 80                 // 80
 873+ 734A 8E 72 59 6A                  dw      ACCEPT, DROP            // accept drop
 874+ 734E 4B 6C 69 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 874+ 7352 12 6B
 875+ 7354 47 69                        dw      EXIT                    // ;
 876+ 7356
 877+ 7356              //  ______________________________________________________________________
 878+ 7356              //
 879+ 7356              // fill        a n c --
 880+ 7356              // If n > 0, fills n locations starting from address a with the value c.
 881+ 7356                              New_Def FILL, "FILL", is_code, is_normal
 881+ 7356             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 7356             >
 881+ 7356             >                // dummy db directives used to calculate length of namec
 881+ 7356 46 49 4C 4C >                db      "FILL"
 881+ 735A             >len_NFA         defl    $ - temp_NFA
 881+ 735A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 7356             >
 881+ 7356 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 7357 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 881+ 735B             >                org     $-1                 // alter last byte of Name just above to set
 881+ 735A CC          >                db      {b $} | END_BIT     // msb as name end
 881+ 735B             >
 881+ 735B 37 73       >                dw      last_NFA            // Link to previous definition Name
 881+ 735D             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 735D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 881+ 735D ~           >
 881+ 735D ~           >
 881+ 735D             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 735D             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 735D             >
 881+ 735D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 735D D9                           exx
 883+ 735E D1                           pop     de                  // de has character
 884+ 735F C1                           pop     bc                  // bc has counter
 885+ 7360 E1                           pop     hl                  // hl has address, save Instruction Pointer
 886+ 7361              Fill_Loop:
 887+ 7361 78                               ld      a, b
 888+ 7362 B1                               or      c
 889+ 7363 28 05                        jr      z, Fill_While_End
 890+ 7365 73                               ld      (hl), e
 891+ 7366 0B                               dec     bc
 892+ 7367 23                               inc     hl
 893+ 7368 18 F7                        jr      Fill_Loop
 894+ 736A              Fill_While_End:
 895+ 736A D9                           exx
 896+ 736B                              next
 896+ 736B DD E9       >                jp      (ix)
 897+ 736D
 898+ 736D              //  ______________________________________________________________________
 899+ 736D              //
 900+ 736D              // erase        a n --
 901+ 736D              // If n > 0, fills n locations starting from address a with 'nul' characters.
 902+ 736D                              Colon_Def ERASE, "ERASE", is_normal
 902+ 736D             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 902+ 736D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 736D             >
 902+ 736D             >                // dummy db directives used to calculate length of namec
 902+ 736D 45 52 41 53 >                db      "ERASE"
 902+ 7371 45          >
 902+ 7372             >len_NFA         defl    $ - temp_NFA
 902+ 7372             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 736D             >
 902+ 736D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 736E 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 902+ 7372 45          >
 902+ 7373             >                org     $-1                 // alter last byte of Name just above to set
 902+ 7372 C5          >                db      {b $} | END_BIT     // msb as name end
 902+ 7373             >
 902+ 7373 56 73       >                dw      last_NFA            // Link to previous definition Name
 902+ 7375             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 7375 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 7378             >
 902+ 7378             >
 902+ 7378             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 7378             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 7378             >
 902+ 7378             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 7378 4B 6C 5D 73                  dw      ZERO, FILL              // 0 fill
 904+ 737C 47 69                        dw      EXIT                    // ;
 905+ 737E
 906+ 737E              //  ______________________________________________________________________
 907+ 737E              //
 908+ 737E              // blank        a n --
 909+ 737E              // If n > 0, fills n locations starting from address a with 'nul' characters.
 910+ 737E                              Colon_Def BLANK, "BLANK", is_normal
 910+ 737E             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 910+ 737E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ 737E             >
 910+ 737E             >                // dummy db directives used to calculate length of namec
 910+ 737E 42 4C 41 4E >                db      "BLANK"
 910+ 7382 4B          >
 910+ 7383             >len_NFA         defl    $ - temp_NFA
 910+ 7383             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ 737E             >
 910+ 737E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ 737F 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 910+ 7383 4B          >
 910+ 7384             >                org     $-1                 // alter last byte of Name just above to set
 910+ 7383 CB          >                db      {b $} | END_BIT     // msb as name end
 910+ 7384             >
 910+ 7384 6D 73       >                dw      last_NFA            // Link to previous definition Name
 910+ 7386             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 7386 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 7389             >
 910+ 7389             >
 910+ 7389             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 7389             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 7389             >
 910+ 7389             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 7389 7A 6C 5D 73                  dw      BL, FILL                // bl fill
 912+ 738D 47 69                        dw      EXIT                    // ;
 913+ 738F
 914+ 738F              //  ______________________________________________________________________
 915+ 738F              //
 916+ 738F              // hold         c --
 917+ 738F              // Used between <# and #> to insert a character c in numeric formatting.
 918+ 738F                              Colon_Def HOLD, "HOLD", is_normal
 918+ 738F             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 918+ 738F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 738F             >
 918+ 738F             >                // dummy db directives used to calculate length of namec
 918+ 738F 48 4F 4C 44 >                db      "HOLD"
 918+ 7393             >len_NFA         defl    $ - temp_NFA
 918+ 7393             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 738F             >
 918+ 738F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 7390 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 918+ 7394             >                org     $-1                 // alter last byte of Name just above to set
 918+ 7393 C4          >                db      {b $} | END_BIT     // msb as name end
 918+ 7394             >
 918+ 7394 7E 73       >                dw      last_NFA            // Link to previous definition Name
 918+ 7396             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 7396 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 7399             >
 918+ 7399             >
 918+ 7399             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 7399             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 7399             >
 918+ 7399             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 7399 70 6C                        dw      NEG_ONE                 // -1
 920+ 739B EE 6D E8 6A                  dw      HLD, PLUSSTORE          // hld +!
 921+ 739F EE 6D 07 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 921+ 73A3 2A 6B
 922+ 73A5 47 69                        dw      EXIT                    // ;
 923+ 73A7
 924+ 73A7              //  ______________________________________________________________________
 925+ 73A7              //
 926+ 73A7              // pad         -- a
 927+ 73A7              // leaves the buffer text address. This is at a fixed distance over HERE.
 928+ 73A7                              Colon_Def PAD, "PAD", is_normal
 928+ 73A7             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 928+ 73A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 73A7             >
 928+ 73A7             >                // dummy db directives used to calculate length of namec
 928+ 73A7 50 41 44    >                db      "PAD"
 928+ 73AA             >len_NFA         defl    $ - temp_NFA
 928+ 73AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 73A7             >
 928+ 73A7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 73A8 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 928+ 73AB             >                org     $-1                 // alter last byte of Name just above to set
 928+ 73AA C4          >                db      {b $} | END_BIT     // msb as name end
 928+ 73AB             >
 928+ 73AB 8F 73       >                dw      last_NFA            // Link to previous definition Name
 928+ 73AD             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 73AD CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 73B0             >
 928+ 73B0             >
 928+ 73B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 73B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 73B0             >
 928+ 73B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 73B0 55 6E                        dw      HERE                    // here
 930+ 73B2 A5 63 44 00                  dw      LIT, 68                 // 68
 931+ 73B6 BE 69                        dw      PLUS                    // +
 932+ 73B8 47 69                        dw      EXIT                    // ;
 933+ 73BA
 934+ 73BA              //  ______________________________________________________________________
 935+ 73BA              //
 936+ 73BA              // word         c -- a
 937+ 73BA              // reads characters from input streams until it encouners a c delimiter.
 938+ 73BA              // Stores that packet so it starts from HERE
 939+ 73BA              // WORD leaves a counter as first byte and ends the packet with two spaces.
 940+ 73BA              // Other occurrences of c are ignored.
 941+ 73BA              // If BLK is zero, text is taken from terminal buffer TIB.
 942+ 73BA              // Otherwise text is taken from the disk-block given by BLK.
 943+ 73BA              // "in" variable is incremented of the number of character read.
 944+ 73BA              // The number of characters read is given by ENCLOSE.
 945+ 73BA                              Colon_Def WORD, "WORD", is_normal
 945+ 73BA             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 945+ 73BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 73BA             >
 945+ 73BA             >                // dummy db directives used to calculate length of namec
 945+ 73BA 57 4F 52 44 >                db      "WORD"
 945+ 73BE             >len_NFA         defl    $ - temp_NFA
 945+ 73BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 73BA             >
 945+ 73BA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 73BB 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 945+ 73BF             >                org     $-1                 // alter last byte of Name just above to set
 945+ 73BE C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 73BF             >
 945+ 73BF A7 73       >                dw      last_NFA            // Link to previous definition Name
 945+ 73C1             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 73C1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 73C4             >
 945+ 73C4             >
 945+ 73C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 73C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 73C4             >
 945+ 73C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 73C4 5F 6D 07 6B                  dw      BLK, FETCH              // blk @
 947+ 73C8                                                              // if
 948+ 73C8 1C 64                        dw      ZBRANCH
 949+ 73CA 0C 00                        dw      Word_Else - $
 950+ 73CC 5F 6D 07 6B                  dw          BLK, FETCH          //      blk @
 951+ 73D0 4D 7D                        dw          BLOCK               //      block ( forward )
 952+ 73D2                                                              // else
 953+ 73D2 07 64                        dw      BRANCH
 954+ 73D4 06 00                        dw      Word_Endif - $
 955+ 73D6              Word_Else:
 956+ 73D6 E9 6C 07 6B                  dw         TIB, FETCH           //      tib @
 957+ 73DA              Word_Endif:                                     // endif
 958+ 73DA 69 6D 07 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 958+ 73DE BE 69
 959+ 73E0 7B 6A 59 65                  dw      SWAP, ENCLOSE           // swap enclose
 960+ 73E4 55 6E A5 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 960+ 73E8 22 00 86 73
 961+ 73EC 69 6D E8 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 962+ 73F0 4B 6A A5 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 962+ 73F4 58 69
 963+ 73F6 7C 69 55 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 963+ 73FA 2A 6B
 964+ 73FC BE 69                        dw      PLUS                    // +
 965+ 73FE 55 6E DB 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 965+ 7402 6A 69
 966+ 7404 50 68                        dw      CMOVE                   // cmove
 967+ 7406 55 6E                        dw      HERE                    // here
 968+ 7408 47 69                        dw      EXIT                    // ;
 969+ 740A
 970+ 740A              //  ______________________________________________________________________
 971+ 740A              //
 972+ 740A              // (.")         --
 973+ 740A              // Direct procedure compiled by ." and  .(  It executes TYPE.
 974+ 740A                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 974+ 740A             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 974+ 740A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ 740A             >
 974+ 740A             >                // dummy db directives used to calculate length of namec
 974+ 740A 28 2E 22 29 >                db      '(.")'
 974+ 740E             >len_NFA         defl    $ - temp_NFA
 974+ 740E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ 740A             >
 974+ 740A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ 740B 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 974+ 740F             >                org     $-1                 // alter last byte of Name just above to set
 974+ 740E A9          >                db      {b $} | END_BIT     // msb as name end
 974+ 740F             >
 974+ 740F BA 73       >                dw      last_NFA            // Link to previous definition Name
 974+ 7411             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 7411 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 7414             >
 974+ 7414             >
 974+ 7414             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 7414             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 7414             >
 974+ 7414             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 7414 7C 69 D6 71                  dw      R_OP, COUNT             // r count
 976+ 7418 86 6A DB 69                  dw      DUP, ONE_PLUS           // dup 1+
 977+ 741C 6A 69 BE 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 977+ 7420 58 69
 978+ 7422 39 72                        dw      TYPE                    // type
 979+ 7424 47 69                        dw      EXIT                    // ;
 980+ 7426
 981+ 7426              //  ______________________________________________________________________
 982+ 7426              //
 983+ 7426              // char         -- c
 984+ 7426              // get first character from next input word
 985+ 7426                              Colon_Def CHAR,  "CHAR", is_normal
 985+ 7426             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 985+ 7426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 7426             >
 985+ 7426             >                // dummy db directives used to calculate length of namec
 985+ 7426 43 48 41 52 >                db      "CHAR"
 985+ 742A             >len_NFA         defl    $ - temp_NFA
 985+ 742A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 7426             >
 985+ 7426 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 7427 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 985+ 742B             >                org     $-1                 // alter last byte of Name just above to set
 985+ 742A D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 742B             >
 985+ 742B 0A 74       >                dw      last_NFA            // Link to previous definition Name
 985+ 742D             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 742D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 7430             >
 985+ 7430             >
 985+ 7430             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 7430             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 7430             >
 985+ 7430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 7430 7A 6C C1 73                  dw      BL, WORD                // bl word
 987+ 7434 DB 69 1E 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 988+ 7438 47 69                        dw      EXIT                    // ;
 989+ 743A
 990+ 743A              //  ______________________________________________________________________
 991+ 743A              //
 992+ 743A              // ,"           --
 993+ 743A              // compiles a string terminated by " as a counted string from next input stream
 994+ 743A                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 994+ 743A             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 994+ 743A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ 743A             >
 994+ 743A             >                // dummy db directives used to calculate length of namec
 994+ 743A 2C 22       >                db      ',"'
 994+ 743C             >len_NFA         defl    $ - temp_NFA
 994+ 743C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ 743A             >
 994+ 743A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ 743B 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 994+ 743D             >                org     $-1                 // alter last byte of Name just above to set
 994+ 743C A2          >                db      {b $} | END_BIT     // msb as name end
 994+ 743D             >
 994+ 743D 26 74       >                dw      last_NFA            // Link to previous definition Name
 994+ 743F             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 743F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 7442             >
 994+ 7442             >
 994+ 7442             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 7442             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 7442             >
 994+ 7442             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 7442 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 996+ 7446 C1 73                        dw      WORD                    // word
 997+ 7448 1E 6B DB 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 998+ 744C 66 6E                        dw      ALLOT                   // allot
 999+ 744E 4B 6C 85 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1000+ 7452 47 69                        dw      EXIT
1001+ 7454
1002+ 7454              //  ______________________________________________________________________
1003+ 7454              //
1004+ 7454              // .c           c --
1005+ 7454              // intermediate general purpose string builder, used by ." and .(
1006+ 7454                              Colon_Def DOT_C,  ".C", is_immediate
1006+ 7454             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1006+ 7454             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 7454             >
1006+ 7454             >                // dummy db directives used to calculate length of namec
1006+ 7454 2E 43       >                db      ".C"
1006+ 7456             >len_NFA         defl    $ - temp_NFA
1006+ 7456             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 7454             >
1006+ 7454 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 7455 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1006+ 7457             >                org     $-1                 // alter last byte of Name just above to set
1006+ 7456 C3          >                db      {b $} | END_BIT     // msb as name end
1006+ 7457             >
1006+ 7457 3A 74       >                dw      last_NFA            // Link to previous definition Name
1006+ 7459             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 7459 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 745C             >
1006+ 745C             >
1006+ 745C             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 745C             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 745C             >
1006+ 745C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 745C B2 6D 07 6B                  dw      STATE, FETCH            // state @
1008+ 7460                                                              // if
1009+ 7460 1C 64                        dw      ZBRANCH
1010+ 7462 12 00                        dw      Dot_C_Else - $
1011+ 7464 BA 70 11 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1012+ 7468 C1 73 1E 6B                  dw          WORD, CFETCH        //      word c@
1013+ 746C DB 69 66 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1014+ 7470                                                              // else
1015+ 7470 07 64                        dw      BRANCH
1016+ 7472 08 00                        dw      Dot_C_Endif - $
1017+ 7474              Dot_C_Else:
1018+ 7474 C1 73 D6 71                  dw          WORD, COUNT, TYPE   //      word count type
1018+ 7478 39 72
1019+ 747A              Dot_C_Endif:                                    // endif
1020+ 747A 47 69                        dw      EXIT                    ;
1021+ 747C
1022+ 747C              //  ______________________________________________________________________
1023+ 747C              //
1024+ 747C              // ."           c --
1025+ 747C                              Colon_Def DOT_QUOTE,  '."', is_immediate
1025+ 747C             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1025+ 747C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 747C             >
1025+ 747C             >                // dummy db directives used to calculate length of namec
1025+ 747C 2E 22       >                db      '."'
1025+ 747E             >len_NFA         defl    $ - temp_NFA
1025+ 747E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 747C             >
1025+ 747C C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 747D 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1025+ 747F             >                org     $-1                 // alter last byte of Name just above to set
1025+ 747E A2          >                db      {b $} | END_BIT     // msb as name end
1025+ 747F             >
1025+ 747F 54 74       >                dw      last_NFA            // Link to previous definition Name
1025+ 7481             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 7481 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 7484             >
1025+ 7484             >
1025+ 7484             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 7484             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 7484             >
1025+ 7484             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 7484 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1027+ 7488 59 74                        dw      DOT_C                   // [compile] .c
1028+ 748A 47 69                        dw      EXIT                    // ; immediate
1029+ 748C
1030+ 748C              //  ______________________________________________________________________
1031+ 748C              //
1032+ 748C              // .(           c --
1033+ 748C                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1033+ 748C             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1033+ 748C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 748C             >
1033+ 748C             >                // dummy db directives used to calculate length of namec
1033+ 748C 2E 28       >                db      ".("
1033+ 748E             >len_NFA         defl    $ - temp_NFA
1033+ 748E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 748C             >
1033+ 748C C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 748D 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1033+ 748F             >                org     $-1                 // alter last byte of Name just above to set
1033+ 748E A8          >                db      {b $} | END_BIT     // msb as name end
1033+ 748F             >
1033+ 748F 7C 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 7491             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 7491 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 7494             >
1033+ 7494             >
1033+ 7494             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 7494             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 7494             >
1033+ 7494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 7494 A5 63 29 00                  dw      LIT, ")"                // [char] )
1035+ 7498 59 74                        dw      DOT_C                   // [compile] .c
1036+ 749A 47 69                        dw      EXIT                    // ; immediate
1037+ 749C
1038+ 749C              //  ______________________________________________________________________
1039+ 749C              //
1040+ 749C              // (sgn)        a -- a f
1041+ 749C              // determines if char in addr a is a sign (+ or -), and in that case increments
1042+ 749C              // a flag. Returns f as the sign, true for negative, false for positive.
1043+ 749C              // called by NUMBER and (EXP)
1044+ 749C                              Colon_Def CSGN,  "(SGN)", is_normal
1044+ 749C             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1044+ 749C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1044+ 749C             >
1044+ 749C             >                // dummy db directives used to calculate length of namec
1044+ 749C 28 53 47 4E >                db      "(SGN)"
1044+ 74A0 29          >
1044+ 74A1             >len_NFA         defl    $ - temp_NFA
1044+ 74A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1044+ 749C             >
1044+ 749C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1044+ 749D 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1044+ 74A1 29          >
1044+ 74A2             >                org     $-1                 // alter last byte of Name just above to set
1044+ 74A1 A9          >                db      {b $} | END_BIT     // msb as name end
1044+ 74A2             >
1044+ 74A2 8C 74       >                dw      last_NFA            // Link to previous definition Name
1044+ 74A4             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1044+ 74A4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1044+ 74A7             >
1044+ 74A7             >
1044+ 74A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1044+ 74A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1044+ 74A7             >
1044+ 74A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1045+ 74A7 86 6A DB 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1045+ 74AB 1E 6B
1046+ 74AD 86 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1046+ 74B1 2D 00 B1 6E
1047+ 74B5                                                              // if
1048+ 74B5 1C 64                        dw      ZBRANCH
1049+ 74B7 12 00                        dw      CSgn_Else_0 - $
1050+ 74B9 59 6A                        dw          DROP                //      drop
1051+ 74BB DB 69                        dw          ONE_PLUS            //      1+
1052+ 74BD 54 6C C7 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1052+ 74C1 E8 6A
1053+ 74C3 54 6C                        dw          ONE                 //      1
1054+ 74C5                                                              // else
1055+ 74C5 07 64                        dw      BRANCH
1056+ 74C7 16 00                        dw      CSgn_Endif_0 - $
1057+ 74C9              CSgn_Else_0:
1058+ 74C9 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1058+ 74CD B1 6E
1059+ 74CF                                                              //      if
1060+ 74CF 1C 64                        dw          ZBRANCH
1061+ 74D1 0A 00                        dw          CSgn_Endif_1 - $
1062+ 74D3 DB 69                        dw              ONE_PLUS        //          1+
1063+ 74D5 54 6C C7 6D                  dw              ONE, DPL        //          1 dpl
1064+ 74D9 E8 6A                        dw              PLUSSTORE       //          +!
1065+ 74DB              CSgn_Endif_1                                    //      endif
1066+ 74DB 4B 6C                        dw          ZERO                //      0
1067+ 74DD              CSgn_Endif_0:                                   // endif
1068+ 74DD 47 69                        dw      EXIT
1069+ 74DF
1070+ 74DF              //  ______________________________________________________________________
1071+ 74DF              //
1072+ 74DF              // (number)     d a -- d1 a1
1073+ 74DF              // using the current BASE parse characters stored in address a
1074+ 74DF              // accumulating a double precision integer d
1075+ 74DF              // the process stops at the first not-convertible character
1076+ 74DF              // A double-number is kept in CPU registers as HLDE.
1077+ 74DF              // On the stack a double number is treated as two single numbers
1078+ 74DF              // where HL is on the top of the stack and DE is the second from top,
1079+ 74DF              // so in the stack memory it appears as LHED.
1080+ 74DF              // Instead, in 2VARIABLE a double number is stored as EDLH.
1081+ 74DF                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1081+ 74DF             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1081+ 74DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1081+ 74DF             >
1081+ 74DF             >                // dummy db directives used to calculate length of namec
1081+ 74DF 28 4E 55 4D >                db      "(NUMBER)"
1081+ 74E3 42 45 52 29 >
1081+ 74E7             >len_NFA         defl    $ - temp_NFA
1081+ 74E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1081+ 74DF             >
1081+ 74DF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1081+ 74E0 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1081+ 74E4 42 45 52 29 >
1081+ 74E8             >                org     $-1                 // alter last byte of Name just above to set
1081+ 74E7 A9          >                db      {b $} | END_BIT     // msb as name end
1081+ 74E8             >
1081+ 74E8 9C 74       >                dw      last_NFA            // Link to previous definition Name
1081+ 74EA             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1081+ 74EA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1081+ 74ED             >
1081+ 74ED             >
1081+ 74ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1081+ 74ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1081+ 74ED             >
1081+ 74ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1082+ 74ED                                                              // begin
1083+ 74ED              CNumber_Begin:
1084+ 74ED DB 69                        dw          ONE_PLUS            //      1+
1085+ 74EF 86 6A 58 69                  dw          DUP, TO_R           //      dup >r
1086+ 74F3 1E 6B                        dw          CFETCH              //      @
1087+ 74F5 BD 6D 07 6B                  dw          BASE, FETCH         //      base @
1088+ 74F9 95 64                        dw          DIGIT               //      digit
1089+ 74FB                                                              // while
1090+ 74FB 1C 64                        dw      ZBRANCH
1091+ 74FD 2C 00                        dw      CNumber_While_end - $
1092+ 74FF 7B 6A                        dw          SWAP                //      swap
1093+ 7501 BD 6D 07 6B                  dw          BASE, FETCH         //      base @
1094+ 7505 7F 68                        dw          UM_MUL              //      um*
1095+ 7507 59 6A 91 6A                  dw          DROP, ROT           //      drop rot
1096+ 750B BD 6D 07 6B                  dw          BASE, FETCH         //      base @
1097+ 750F 7F 68                        dw          UM_MUL              //      um*
1098+ 7511 C9 69                        dw          DPLUS               //      d+
1099+ 7513 C7 6D 07 6B                  dw          DPL, FETCH          //      dpl @
1100+ 7517 DB 69                        dw          ONE_PLUS            //      1+
1101+ 7519                                                              //      if
1102+ 7519 1C 64                        dw          ZBRANCH
1103+ 751B 08 00                        dw          CNumber_Endif - $
1104+ 751D 54 6C C7 6D                  dw              ONE, DPL        //          1 dpl
1105+ 7521 E8 6A                        dw              PLUSSTORE       //          +!
1106+ 7523              CNumber_Endif:                                  //      endif
1107+ 7523 6A 69                        dw             R_TO             //      r>  ( balance rp )
1108+ 7525 07 64                        dw      BRANCH
1109+ 7527 C6 FF                        dw      CNumber_Begin - $
1110+ 7529              CNumber_While_end:                              // repeat
1111+ 7529 6A 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1112+ 752B 47 69                        dw      EXIT                    // ;
1113+ 752D
1114+ 752D              //  ______________________________________________________________________
1115+ 752D              //
1116+ 752D              // number       a -- d
1117+ 752D                              Colon_Def NUMBER,  "NUMBER", is_normal
1117+ 752D             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1117+ 752D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 752D             >
1117+ 752D             >                // dummy db directives used to calculate length of namec
1117+ 752D 4E 55 4D 42 >                db      "NUMBER"
1117+ 7531 45 52       >
1117+ 7533             >len_NFA         defl    $ - temp_NFA
1117+ 7533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 752D             >
1117+ 752D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 752E 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1117+ 7532 45 52       >
1117+ 7534             >                org     $-1                 // alter last byte of Name just above to set
1117+ 7533 D2          >                db      {b $} | END_BIT     // msb as name end
1117+ 7534             >
1117+ 7534 DF 74       >                dw      last_NFA            // Link to previous definition Name
1117+ 7536             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 7536 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1117+ 7539             >
1117+ 7539             >
1117+ 7539             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 7539             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 7539             >
1117+ 7539             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 7539 4B 6C 4B 6C                  dw      ZERO, ZERO              // 0 0
1119+ 753D 91 6A                        dw      ROT                     // rot
1120+ 753F A4 74 58 69                  dw      CSGN, TO_R              // (sgn) >r
1121+ 7543 70 6C C7 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1121+ 7547 12 6B
1122+ 7549 EA 74                        dw      CNUMBER                 // (number)
1123+ 754B 86 6A 1E 6B                  dw      DUP, CFETCH             // dup c@
1124+ 754F A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1124+ 7553 B1 6E
1125+ 7555                                                              // if
1126+ 7555 1C 64                        dw      ZBRANCH
1127+ 7557 0A 00                        dw      Number_Endif_1 - $
1128+ 7559 4B 6C C7 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1128+ 755D 12 6B
1129+ 755F EA 74                        dw          CNUMBER             //      (number)
1130+ 7561              Number_Endif_1:                                 // endif
1131+ 7561 1E 6B 7A 6C                  dw      CFETCH, BL              // c@ bl
1132+ 7565 A5 6E 4B 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1132+ 7569 21 70
1133+ 756B 6A 69                        dw      R_TO                    // r>
1134+ 756D                                                              // if
1135+ 756D 1C 64                        dw      ZBRANCH
1136+ 756F 04 00                        dw      Number_Endif_2 - $
1137+ 7571 33 6A                        dw          DMINUS              //      dminus
1138+ 7573              Number_Endif_2:                                 // endif
1139+ 7573 47 69                        dw      EXIT                    // ;
1140+ 7575
1141+ 7575              //  ______________________________________________________________________
1142+ 7575              //
1143+ 7575              // -find        a -- d
1144+ 7575                              Colon_Def LFIND,  "-FIND", is_normal
1144+ 7575             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1144+ 7575             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 7575             >
1144+ 7575             >                // dummy db directives used to calculate length of namec
1144+ 7575 2D 46 49 4E >                db      "-FIND"
1144+ 7579 44          >
1144+ 757A             >len_NFA         defl    $ - temp_NFA
1144+ 757A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 7575             >
1144+ 7575 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 7576 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1144+ 757A 44          >
1144+ 757B             >                org     $-1                 // alter last byte of Name just above to set
1144+ 757A C4          >                db      {b $} | END_BIT     // msb as name end
1144+ 757B             >
1144+ 757B 2D 75       >                dw      last_NFA            // Link to previous definition Name
1144+ 757D             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 757D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1144+ 7580             >
1144+ 7580             >
1144+ 7580             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 7580             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 7580             >
1144+ 7580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 7580 7A 6C C1 73                  dw      BL, WORD                // bl word
1146+ 7584 98 6D 07 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1146+ 7588 07 6B
1147+ 758A 02 65                        dw      C_FIND                  // (find)
1148+ 758C 20 6F                        dw      QDUP                    // ?dup
1149+ 758E 84 69                        dw      ZEQUAL                  // 0=
1150+ 7590                                                              // if
1151+ 7590 1C 64                        dw      ZBRANCH
1152+ 7592 08 00                        dw      LFind_Endif - $
1153+ 7594 55 6E                        dw          HERE                //      here
1154+ 7596 8F 6F                        dw          LATEST              //      latest
1155+ 7598 02 65                        dw          C_FIND              //      (find)
1156+ 759A              LFind_Endif:                                    // endif
1157+ 759A 47 69                        dw      EXIT                    // ;
1158+ 759C
1159+ 759C              //  ______________________________________________________________________
1160+ 759C              //
1161+ 759C              // (abort)      --
1162+ 759C                              Colon_Def CABORT,  "(ABORT)", is_normal
1162+ 759C             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1162+ 759C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 759C             >
1162+ 759C             >                // dummy db directives used to calculate length of namec
1162+ 759C 28 41 42 4F >                db      "(ABORT)"
1162+ 75A0 52 54 29    >
1162+ 75A3             >len_NFA         defl    $ - temp_NFA
1162+ 75A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 759C             >
1162+ 759C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 759D 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1162+ 75A1 52 54 29    >
1162+ 75A4             >                org     $-1                 // alter last byte of Name just above to set
1162+ 75A3 A9          >                db      {b $} | END_BIT     // msb as name end
1162+ 75A4             >
1162+ 75A4 75 75       >                dw      last_NFA            // Link to previous definition Name
1162+ 75A6             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 75A6 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1162+ 75A9             >
1162+ 75A9             >
1162+ 75A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 75A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 75A9             >
1162+ 75A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 75A9 82 78                        dw      ABORT                   // abort
1164+ 75AB 47 69                        dw      EXIT                    // ;
1165+ 75AD
1166+ 75AD              //  ______________________________________________________________________
1167+ 75AD              //
1168+ 75AD              // error        n --
1169+ 75AD              // raise an error
1170+ 75AD              // if WARNING is 0, prints "MSG#n".
1171+ 75AD              // if WARNING is 1, prints line n of screen 4.
1172+ 75AD              // if WARNING is -1 does (ABORT) that normally does ABORT
1173+ 75AD              // value can be negative or beyond block 4.
1174+ 75AD                              Colon_Def ERROR,  "ERROR", is_normal
1174+ 75AD             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1174+ 75AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 75AD             >
1174+ 75AD             >                // dummy db directives used to calculate length of namec
1174+ 75AD 45 52 52 4F >                db      "ERROR"
1174+ 75B1 52          >
1174+ 75B2             >len_NFA         defl    $ - temp_NFA
1174+ 75B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 75AD             >
1174+ 75AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 75AE 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1174+ 75B2 52          >
1174+ 75B3             >                org     $-1                 // alter last byte of Name just above to set
1174+ 75B2 D2          >                db      {b $} | END_BIT     // msb as name end
1174+ 75B3             >
1174+ 75B3 9C 75       >                dw      last_NFA            // Link to previous definition Name
1174+ 75B5             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 75B5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1174+ 75B8             >
1174+ 75B8             >
1174+ 75B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 75B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 75B8             >
1174+ 75B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 75B8 03 6D 07 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1175+ 75BC 9E 69
1176+ 75BE                                                              // if
1177+ 75BE 1C 64                        dw      ZBRANCH
1178+ 75C0 04 00                        dw      Error_Endif_1 - $
1179+ 75C2 A6 75                        dw          CABORT              //      (abort)
1180+ 75C4              Error_Endif_1:                                  // endif
1181+ 75C4 55 6E D6 71                  dw      HERE, COUNT, TYPE       // here count type
1181+ 75C8 39 72
1182+ 75CA 11 74                        dw      C_DOT_QUOTE             // .( ? )
1183+ 75CC 02 3F 20                     db      2, "? "
1184+ 75CF C5 7A                        dw      MESSAGE                 // message  ( forward )
1185+ 75D1 D6 6C 07 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1185+ 75D5 24 69
1186+ 75D7 5F 6D 07 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1186+ 75DB 20 6F
1187+ 75DD                                                              // if
1188+ 75DD 1C 64                        dw      ZBRANCH
1189+ 75DF 08 00                        dw      Error_Endif_2 - $
1190+ 75E1 69 6D 07 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1190+ 75E5 7B 6A
1191+ 75E7              Error_Endif_2:                                  // endif
1192+ 75E7 40 78                        dw      QUIT                    // quit ( forward )
1193+ 75E9 47 69                        dw      EXIT                    // ;
1194+ 75EB              //  ______________________________________________________________________
1195+ 75EB              //
1196+ 75EB              // id.          nfa --
1197+ 75EB                              Colon_Def ID_DOT,  "ID.", is_normal
1197+ 75EB             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1197+ 75EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 75EB             >
1197+ 75EB             >                // dummy db directives used to calculate length of namec
1197+ 75EB 49 44 2E    >                db      "ID."
1197+ 75EE             >len_NFA         defl    $ - temp_NFA
1197+ 75EE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 75EB             >
1197+ 75EB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 75EC 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1197+ 75EF             >                org     $-1                 // alter last byte of Name just above to set
1197+ 75EE AE          >                db      {b $} | END_BIT     // msb as name end
1197+ 75EF             >
1197+ 75EF AD 75       >                dw      last_NFA            // Link to previous definition Name
1197+ 75F1             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 75F1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1197+ 75F4             >
1197+ 75F4             >
1197+ 75F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 75F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 75F4             >
1197+ 75F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 75F4 AD 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1198+ 75F8 20 00 A5 63
1198+ 75FC 60 00
1199+ 75FE 5D 73                        dw      FILL                    // fill
1200+ 7600 86 6A D5 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1200+ 7604 A0 6F
1201+ 7606 4B 6A A5 6E                  dw      OVER, SUBTRACT          // over -
1202+ 760A AD 73 7B 6A                  dw      PAD, SWAP               // pad swap
1203+ 760E 50 68                        dw      CMOVE                   // cmove
1204+ 7610 AD 73 D6 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1204+ 7614 A5 63 1F 00
1205+ 7618 E5 68                        dw      AND_OP                  // and  ( use only lower bits )
1206+ 761A 39 72 57 6F                  dw      TYPE, SPACE             // type
1207+ 761E 47 69                        dw      EXIT                    // ;
1208+ 7620
1209+ 7620              //  ______________________________________________________________________
1210+ 7620              //
1211+ 7620              // code         -- cccc
1212+ 7620                              Colon_Def CODE,  "CODE", is_normal
1212+ 7620             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1212+ 7620             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 7620             >
1212+ 7620             >                // dummy db directives used to calculate length of namec
1212+ 7620 43 4F 44 45 >                db      "CODE"
1212+ 7624             >len_NFA         defl    $ - temp_NFA
1212+ 7624             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 7620             >
1212+ 7620 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 7621 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1212+ 7625             >                org     $-1                 // alter last byte of Name just above to set
1212+ 7624 C5          >                db      {b $} | END_BIT     // msb as name end
1212+ 7625             >
1212+ 7625 EB 75       >                dw      last_NFA            // Link to previous definition Name
1212+ 7627             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 7627 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 762A             >
1212+ 762A             >
1212+ 762A             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 762A             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 762A             >
1212+ 762A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 762A 7D 75                        dw      LFIND                   // -find
1214+ 762C                                                              // if
1215+ 762C 1C 64                        dw      ZBRANCH
1216+ 762E 10 00                        dw      Code_Endif - $
1217+ 7630 59 6A                        dw          DROP                //      drop
1218+ 7632 FD 6F F1 75                  dw          TO_NAME, ID_DOT     //      >name id.
1219+ 7636 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1219+ 763A C5 7A
1220+ 763C 57 6F                        dw          SPACE               //      space
1221+ 763E              Code_Endif:                                     // endif
1222+ 763E 55 6E                        dw      HERE                    // here
1223+ 7640                                                              // ( ---- here begins NFA ---- )
1224+ 7640 86 6A 1E 6B                  dw      DUP, CFETCH             // dup c@
1225+ 7644 F5 6C 07 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1225+ 7648 F1 6E
1226+ 764A DB 69 66 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1227+ 764E 86 6A                        dw      DUP                     // dup
1228+ 7650 A5 63                        dw      LIT
1229+ 7652 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1230+ 7654 FC 6A                        dw      TOGGLE                  // toggle
1231+ 7656 55 6E E5 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1232+ 765A A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1232+ 765E FC 6A
1233+ 7660                                                              // ( ---- here is LFA ---- )
1234+ 7660 8F 6F 73 6E                  dw      LATEST, COMMA           // latest ,
1235+ 7664 A6 6D 07 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1235+ 7668 12 6B
1236+ 766A                                                              // ( ---- here is LFA ---- )
1237+ 766A              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1238+ 766A 47 69                        dw      EXIT                    // ;
1239+ 766C
1240+ 766C              //  ______________________________________________________________________
1241+ 766C              //
1242+ 766C              // create       -- cccc     ( compile time )
1243+ 766C              //              -- a        ( run time )
1244+ 766C                              Colon_Def CREATE,  "CREATE", is_normal
1244+ 766C             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1244+ 766C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 766C             >
1244+ 766C             >                // dummy db directives used to calculate length of namec
1244+ 766C 43 52 45 41 >                db      "CREATE"
1244+ 7670 54 45       >
1244+ 7672             >len_NFA         defl    $ - temp_NFA
1244+ 7672             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 766C             >
1244+ 766C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 766D 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1244+ 7671 54 45       >
1244+ 7673             >                org     $-1                 // alter last byte of Name just above to set
1244+ 7672 C5          >                db      {b $} | END_BIT     // msb as name end
1244+ 7673             >
1244+ 7673 20 76       >                dw      last_NFA            // Link to previous definition Name
1244+ 7675             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 7675 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1244+ 7678             >
1244+ 7678             >
1244+ 7678             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 7678             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 7678             >
1244+ 7678             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 7678 27 76 0A 71                  dw      CODE, SMUDGE            // code smudge
1246+ 767C A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1246+ 7680 85 6E
1247+ 7682 A5 63 2B 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1247+ 7686 73 6E
1248+ 7688 64 71                        dw      C_SEMICOLON_CODE
1249+ 768A                              // this routine is called from the call coded in CFA
1250+ 768A              Create_Ptr:
1251+ 768A
1252+ 768A
1253+ 768A
1254+ 768A                              next
1254+ 768A DD E9       >                jp      (ix)
1255+ 768C
1256+ 768C              //  ______________________________________________________________________
1257+ 768C              //
1258+ 768C              // [compile]    -- cccc     ( compile time )
1259+ 768C                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1259+ 768C             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1259+ 768C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 768C             >
1259+ 768C             >                // dummy db directives used to calculate length of namec
1259+ 768C 5B 43 4F 4D >                db      "[COMPILE]"
1259+ 7690 50 49 4C 45 >
1259+ 7694 5D          >
1259+ 7695             >len_NFA         defl    $ - temp_NFA
1259+ 7695             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 768C             >
1259+ 768C C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 768D 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1259+ 7691 50 49 4C 45 >
1259+ 7695 5D          >
1259+ 7696             >                org     $-1                 // alter last byte of Name just above to set
1259+ 7695 DD          >                db      {b $} | END_BIT     // msb as name end
1259+ 7696             >
1259+ 7696 6C 76       >                dw      last_NFA            // Link to previous definition Name
1259+ 7698             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 7698 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1259+ 769B             >
1259+ 769B             >
1259+ 769B             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 769B             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 769B             >
1259+ 769B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 769B 7D 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1261+ 769D 84 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1262+ 769F 4B 6C 21 70                  dw      ZERO, QERROR            // 0 ?error
1263+ 76A3 59 6A                        dw      DROP                    // drop       (  cfa  )
1264+ 76A5 73 6E                        dw      COMMA                   // ,
1265+ 76A7 47 69                        dw      EXIT                    // ; immediate
1266+ 76A9
1267+ 76A9              //  ______________________________________________________________________
1268+ 76A9              //
1269+ 76A9              // literal      n --      ( compile time )
1270+ 76A9                              Colon_Def LITERAL,  "LITERAL", is_immediate
1270+ 76A9             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1270+ 76A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 76A9             >
1270+ 76A9             >                // dummy db directives used to calculate length of namec
1270+ 76A9 4C 49 54 45 >                db      "LITERAL"
1270+ 76AD 52 41 4C    >
1270+ 76B0             >len_NFA         defl    $ - temp_NFA
1270+ 76B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 76A9             >
1270+ 76A9 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 76AA 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1270+ 76AE 52 41 4C    >
1270+ 76B1             >                org     $-1                 // alter last byte of Name just above to set
1270+ 76B0 CC          >                db      {b $} | END_BIT     // msb as name end
1270+ 76B1             >
1270+ 76B1 8C 76       >                dw      last_NFA            // Link to previous definition Name
1270+ 76B3             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 76B3 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1270+ 76B6             >
1270+ 76B6             >
1270+ 76B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 76B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 76B6             >
1270+ 76B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 76B6 B2 6D 07 6B                  dw      STATE, FETCH            // state @
1272+ 76BA                                                              // if
1273+ 76BA 1C 64                        dw      ZBRANCH
1274+ 76BC 08 00                        dw      Literal_Endif - $
1275+ 76BE BA 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1276+ 76C2 73 6E                        dw          COMMA               //      ,
1277+ 76C4              Literal_Endif:                                  // endif
1278+ 76C4 47 69                        dw      EXIT                    // ; immediate
1279+ 76C6
1280+ 76C6              //  ______________________________________________________________________
1281+ 76C6              //
1282+ 76C6              // dliteral     n --      ( compile time )
1283+ 76C6                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1283+ 76C6             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1283+ 76C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 76C6             >
1283+ 76C6             >                // dummy db directives used to calculate length of namec
1283+ 76C6 44 4C 49 54 >                db      "DLITERAL"
1283+ 76CA 45 52 41 4C >
1283+ 76CE             >len_NFA         defl    $ - temp_NFA
1283+ 76CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 76C6             >
1283+ 76C6 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 76C7 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1283+ 76CB 45 52 41 4C >
1283+ 76CF             >                org     $-1                 // alter last byte of Name just above to set
1283+ 76CE CC          >                db      {b $} | END_BIT     // msb as name end
1283+ 76CF             >
1283+ 76CF A9 76       >                dw      last_NFA            // Link to previous definition Name
1283+ 76D1             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 76D1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 76D4             >
1283+ 76D4             >
1283+ 76D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 76D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 76D4             >
1283+ 76D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 76D4 B2 6D 07 6B                  dw      STATE, FETCH            // state @
1285+ 76D8                                                              // if
1286+ 76D8 1C 64                        dw      ZBRANCH
1287+ 76DA 08 00                        dw      DLiteral_Endif - $
1288+ 76DC 7B 6A                        dw          SWAP                //      swap
1289+ 76DE B3 76 B3 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1290+ 76E2              DLiteral_Endif:                                 // endif
1291+ 76E2 47 69                        dw      EXIT                    // ; immediate
1292+ 76E4
1293+ 76E4              //  ______________________________________________________________________
1294+ 76E4              //
1295+ 76E4              // [char]       n --      ( compile time )
1296+ 76E4              // inside colon definition, gets first character from next input word
1297+ 76E4              // and compiles it as literal.
1298+ 76E4                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1298+ 76E4             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1298+ 76E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ 76E4             >
1298+ 76E4             >                // dummy db directives used to calculate length of namec
1298+ 76E4 5B 43 48 41 >                db      "[CHAR]"
1298+ 76E8 52 5D       >
1298+ 76EA             >len_NFA         defl    $ - temp_NFA
1298+ 76EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ 76E4             >
1298+ 76E4 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ 76E5 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1298+ 76E9 52 5D       >
1298+ 76EB             >                org     $-1                 // alter last byte of Name just above to set
1298+ 76EA DD          >                db      {b $} | END_BIT     // msb as name end
1298+ 76EB             >
1298+ 76EB C6 76       >                dw      last_NFA            // Link to previous definition Name
1298+ 76ED             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 76ED CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1298+ 76F0             >
1298+ 76F0             >
1298+ 76F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 76F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 76F0             >
1298+ 76F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 76F0 2D 74 B3 76                  dw      CHAR, LITERAL           // char [compile] literal
1300+ 76F4 47 69                        dw      EXIT                    // ; immediate
1301+ 76F6
1302+ 76F6              //  ______________________________________________________________________
1303+ 76F6              //
1304+ 76F6              // 0x00         n --      ( compile time )
1305+ 76F6                              Colon_Def NUL_WORD,  $00, is_immediate
1305+ 76F6             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1305+ 76F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 76F6             >
1305+ 76F6             >                // dummy db directives used to calculate length of namec
1305+ 76F6 00          >                db      $00
1305+ 76F7             >len_NFA         defl    $ - temp_NFA
1305+ 76F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 76F6             >
1305+ 76F6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 76F7 00          >                db      $00               // name string in 7-bit ascii, but
1305+ 76F8             >                org     $-1                 // alter last byte of Name just above to set
1305+ 76F7 80          >                db      {b $} | END_BIT     // msb as name end
1305+ 76F8             >
1305+ 76F8 E4 76       >                dw      last_NFA            // Link to previous definition Name
1305+ 76FA             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 76FA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1305+ 76FD             >
1305+ 76FD             >
1305+ 76FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 76FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 76FD             >
1305+ 76FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 76FD 5F 6D 07 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1306+ 7701 54 6C
1307+ 7703 E2 6E                        dw      GREATER                 // > if
1308+ 7705                                                              // if
1309+ 7705 1C 64                        dw      ZBRANCH
1310+ 7707 28 00                        dw      Nul_Else_1 - $
1311+ 7709 54 6C 5F 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1311+ 770D E8 6A
1312+ 770F 4B 6C 69 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1312+ 7713 12 6B
1313+ 7715 5F 6D 07 6B                  dw          BLK, FETCH          //      blk @
1314+ 7719 9F 6C                        dw          BSCR                //      b/scr
1315+ 771B E5 69                        dw          ONE_SUBTRACT        //      1 -
1316+ 771D E5 68                        dw          AND_OP              //      and  ( this is tricky )
1317+ 771F 84 69                        dw          ZEQUAL              //      0=
1318+ 7721                                                              //      if
1319+ 7721 1C 64                        dw          ZBRANCH
1320+ 7723 08 00                        dw          Nul_Endif_2 - $
1321+ 7725 55 70                        dw              QEXEC           //          ?exec
1322+ 7727 6A 69 59 6A                  dw              R_TO, DROP      //          r> drop
1323+ 772B              Nul_Endif_2:                                    //      endif
1324+ 772B 07 64                        dw      BRANCH
1325+ 772D 06 00                        dw      Nul_Endif_1 - $
1326+ 772F              Nul_Else_1:                                     // else
1327+ 772F 6A 69 59 6A                  dw          R_TO, DROP          //      r> drop
1328+ 7733              Nul_Endif_1:                                    // endif
1329+ 7733 47 69                        dw      EXIT                    // ;
1330+ 7735
1331+ 7735              //  ______________________________________________________________________
1332+ 7735              //
1333+ 7735              // ?stack       --
1334+ 7735              // Raise error #1 if stack is empty and you pop it
1335+ 7735              // Raise error #7 if stack is full.
1336+ 7735              // This means SP must always stay between HERE and FFFF
1337+ 7735              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1338+ 7735              // for Next 8K MMU paging this is $DOE8
1339+ 7735                              Colon_Def QSTACK, "?STACK", is_normal
1339+ 7735             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1339+ 7735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ 7735             >
1339+ 7735             >                // dummy db directives used to calculate length of namec
1339+ 7735 3F 53 54 41 >                db      "?STACK"
1339+ 7739 43 4B       >
1339+ 773B             >len_NFA         defl    $ - temp_NFA
1339+ 773B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ 7735             >
1339+ 7735 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ 7736 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1339+ 773A 43 4B       >
1339+ 773C             >                org     $-1                 // alter last byte of Name just above to set
1339+ 773B CB          >                db      {b $} | END_BIT     // msb as name end
1339+ 773C             >
1339+ 773C F6 76       >                dw      last_NFA            // Link to previous definition Name
1339+ 773E             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 773E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1339+ 7741             >
1339+ 7741             >
1339+ 7741             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 7741             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 7741             >
1339+ 7741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 7741 17 69                        dw      SPFETCH                 // sp@
1341+ 7743 D6 6C 07 6B                  dw      S0, FETCH               // s0 @
1342+ 7747 7B 6A BF 6E                  dw      SWAP, ULESS             // swap u<
1343+ 774B 54 6C 21 70                  dw      ONE, QERROR             // 1 ?error
1344+ 774F 55 6E                        dw      HERE                    // here
1345+ 7751 D6 6C 07 6B                  dw      S0, FETCH, LESS         // s0 @ <
1345+ 7755 CD 6E
1346+ 7757                                                              // if
1347+ 7757 1C 64                        dw      ZBRANCH
1348+ 7759 14 00                        dw      QStack_Endif - $
1349+ 775B 17 69                        dw          SPFETCH             //      sp@
1350+ 775D 55 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1350+ 7761 80 00
1351+ 7763 BE 69 BF 6E                  dw          PLUS, ULESS         //      plus u<
1352+ 7767 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1352+ 776B 21 70
1353+ 776D              QStack_Endif:                                   // endif
1354+ 776D 47 69                        dw      EXIT                    // ;
1355+ 776F
1356+ 776F
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  776F                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 776F              //  ______________________________________________________________________
   2+ 776F              //
   3+ 776F              //  L2.asm
   4+ 776F              //
   5+ 776F              //  Level-2
   6+ 776F              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 776F              //  ______________________________________________________________________
   8+ 776F
   9+ 776F
  10+ 776F              //  ______________________________________________________________________
  11+ 776F              //
  12+ 776F              // interpret    --
  13+ 776F              // This is the text interpreter.
  14+ 776F              // It executes or compiles, depending on STATE, the text coming from
  15+ 776F              // current input stream.
  16+ 776F              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 776F              // the word is interpreted as numeric and converted, using current BASE,
  18+ 776F              // leaving on top of stack a single or double precision number, depending
  19+ 776F              // on the presence of a decimal point.
  20+ 776F              // If the number conversion fails, the terminal is notified with ? followed
  21+ 776F              // by the offending word.
  22+ 776F                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 776F             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 776F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 776F             >
  22+ 776F             >                // dummy db directives used to calculate length of namec
  22+ 776F 49 4E 54 45 >                db      "INTERPRET"
  22+ 7773 52 50 52 45 >
  22+ 7777 54          >
  22+ 7778             >len_NFA         defl    $ - temp_NFA
  22+ 7778             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 776F             >
  22+ 776F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7770 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7774 52 50 52 45 >
  22+ 7778 54          >
  22+ 7779             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7778 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7779             >
  22+ 7779 35 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 777B             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 777B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 777E             >
  22+ 777E             >
  22+ 777E             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 777E             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 777E             >
  22+ 777E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 777E
  24+ 777E              Interpret_Begin:                                        // begin
  25+ 777E 7D 75                        dw          LFIND                       //      -find
  26+ 7780                                                                      //      if
  27+ 7780 1C 64                        dw          ZBRANCH
  28+ 7782 1A 00                        dw          Interpret_Else_1 - $
  29+ 7784 B2 6D 07 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7788 CD 6E
  30+ 778A                                                                      //          if
  31+ 778A 1C 64                        dw              ZBRANCH
  32+ 778C 08 00                        dw              Interpret_Else_2 - $
  33+ 778E D8 70                        dw                  COMPILE_XT          //              compile,
  34+ 7790                                                                      //          else
  35+ 7790 07 64                        dw              BRANCH
  36+ 7792 06 00                        dw              Interpret_Endif_2 - $
  37+ 7794              Interpret_Else_2:
  38+ 7794 B8 63 FA 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7798              Interpret_Endif_2:                                      //          endif
  40+ 7798                                                                      //      else
  41+ 7798 07 64                        dw          BRANCH
  42+ 779A 1A 00                        dw          Interpret_Endif_1 - $
  43+ 779C              Interpret_Else_1:
  44+ 779C 55 6E 36 75                  dw              HERE, NUMBER            //          here number
  45+ 77A0 C7 6D 07 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77A4 DB 69
  46+ 77A6                                                                      //          if
  47+ 77A6 1C 64                        dw              ZBRANCH
  48+ 77A8 08 00                        dw              Interpret_Else_3 - $
  49+ 77AA              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77AA              //                                                      //              if
  51+ 77AA              //              dw                  ZBRANCH
  52+ 77AA              //              dw                  Interpret_Endif_4 - $
  53+ 77AA              //              dw                      ONE, ZERO       //                  1 0
  54+ 77AA              //              dw                      TWO_DROP        //                  2drop
  55+ 77AA              //Interpret_Endif_4:                                      //              endif
  56+ 77AA D1 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77AC                                                                      //          else
  58+ 77AC 07 64                        dw              BRANCH
  59+ 77AE 06 00                        dw              Interpret_Endif_3 - $
  60+ 77B0              Interpret_Else_3:
  61+ 77B0 59 6A                        dw                  DROP                //              drop
  62+ 77B2 B3 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77B4              Interpret_Endif_3:                                      //          endif
  64+ 77B4              Interpret_Endif_1:                                      //      endif
  65+ 77B4 3E 77                        dw          QSTACK                      //      ?stack
  66+ 77B6 11 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77B8                                                                      //      if
  68+ 77B8 1C 64                        dw          ZBRANCH
  69+ 77BA 04 00                        dw          Interpret_Endif_5 - $
  70+ 77BC 40 78                        dw              QUIT                  //          quit
  71+ 77BE              Interpret_Endif_5:                                      //      endif
  72+ 77BE 07 64                        dw      BRANCH
  73+ 77C0 BE FF                        dw      Interpret_Begin - $
  74+ 77C2 47 69                        dw      EXIT                            // ;
  75+ 77C4
  76+ 77C4              //  ______________________________________________________________________
  77+ 77C4              //
  78+ 77C4              // vocabulary   -- cccc     ( compile time )
  79+ 77C4              // Defining word used in the form   VOCABULARY cccc
  80+ 77C4              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77C4              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77C4              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77C4              // so new definitions can be inserted in that vocabulary.
  84+ 77C4                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77C4             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77C4             >
  84+ 77C4             >                // dummy db directives used to calculate length of namec
  84+ 77C4 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77C8 42 55 4C 41 >
  84+ 77CC 52 59       >
  84+ 77CE             >len_NFA         defl    $ - temp_NFA
  84+ 77CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77C4             >
  84+ 77C4 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77C5 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77C9 42 55 4C 41 >
  84+ 77CD 52 59       >
  84+ 77CF             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77CE D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77CF             >
  84+ 77CF 6F 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77D1             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77D1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77D4             >
  84+ 77D4             >
  84+ 77D4             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77D4             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77D4             >
  84+ 77D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77D4
  86+ 77D4 9E 71                        dw      CBUILDS
  87+ 77D6
  88+ 77D6 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77DA 73 6E
  89+ 77DC A6 6D 07 6B                  dw      CURRENT, FETCH          // current @
  90+ 77E0 08 6A 73 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77E4 55 6E                        dw      HERE                    // here
  92+ 77E6 27 6D 07 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77EA 73 6E
  93+ 77EC 27 6D 12 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77F0
  95+ 77F0 AF 71                        dw      DOES_TO                 // does>
  96+ 77F2              Vocabulary_Does:
  97+ 77F2 FD 69                        dw      CELL_PLUS               // cell+
  98+ 77F4 98 6D 12 6B                  dw      CONTEXT, STORE          // context !
  99+ 77F8 47 69                        dw      EXIT                    // ;
 100+ 77FA
 101+ 77FA              //  ______________________________________________________________________
 102+ 77FA              //
 103+ 77FA              // forth        --
 104+ 77FA              // Name of the first vocabulary.
 105+ 77FA              // It makes FORTH the CONTEXT vocabulary.
 106+ 77FA              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77FA              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77FA              // of a colon definition to be able to select the vocabulary.
 109+ 77FA
 110+ 77FA                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77FA             >
 110+ 77FA             >                // dummy db directives used to calculate length of namec
 110+ 77FA 46 4F 52 54 >                db      "FORTH"
 110+ 77FE 48          >
 110+ 77FF             >len_NFA         defl    $ - temp_NFA
 110+ 77FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77FA             >
 110+ 77FA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77FB 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77FF 48          >
 110+ 7800             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77FF C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7800             >
 110+ 7800 C4 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7802             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7802 CD BC 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 7805             >
 110+ 7805             >
 110+ 7805             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 7805             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 7805             >
 110+ 7805             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 7805 F2 77                        dw      Vocabulary_Does
 112+ 7807 81 A0                        db      $81, $A0
 113+ 7809              Forth_Latest_Ptr:
 114+ 7809 82 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition // Here_Dictionary
 115+ 780B              Voclink_Ptr:
 116+ 780B 00 00                        dw      0
 117+ 780D              // Any new vocabulary is structured as follow:
 118+ 780D              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 780D              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 780D              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 780D              //       at creations it points to the null-word of its parent vocabulary
 122+ 780D              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 780D              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 780D              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 780D              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 780D              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 780D              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 780D
 129+ 780D              //  ______________________________________________________________________
 130+ 780D              //
 131+ 780D              // definitions  --
 132+ 780D              // Used in the form  cccc DEFINITIONS
 133+ 780D              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 780D              // vocabulary cccc.
 135+ 780D                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 780D             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 780D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 780D             >
 135+ 780D             >                // dummy db directives used to calculate length of namec
 135+ 780D 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7811 4E 49 54 49 >
 135+ 7815 4F 4E 53    >
 135+ 7818             >len_NFA         defl    $ - temp_NFA
 135+ 7818             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 780D             >
 135+ 780D 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 780E 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7812 4E 49 54 49 >
 135+ 7816 4F 4E 53    >
 135+ 7819             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7818 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7819             >
 135+ 7819 FA 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 781B             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 781B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 781E             >
 135+ 781E             >
 135+ 781E             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 781E             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 781E             >
 135+ 781E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 781E 98 6D 07 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7822 A6 6D 12 6B                  dw      CURRENT, STORE          // current !
 138+ 7826 47 69                        dw      EXIT                    // ;
 139+ 7828
 140+ 7828              //  ______________________________________________________________________
 141+ 7828              //
 142+ 7828              // (            -- cccc )
 143+ 7828              // the following text is interpreted as a comment until a closing )
 144+ 7828                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7828             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7828             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7828             >
 144+ 7828             >                // dummy db directives used to calculate length of namec
 144+ 7828 28          >                db      "("
 144+ 7829             >len_NFA         defl    $ - temp_NFA
 144+ 7829             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7828             >
 144+ 7828 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7829 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 782A             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7829 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 782A             >
 144+ 782A 0D 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 782C             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 782C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 782F             >
 144+ 782F             >
 144+ 782F             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 782F             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 782F             >
 144+ 782F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 782F A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7833 C1 73 59 6A                  dw      WORD, DROP              // word drop
 147+ 7837 47 69                        dw      EXIT                    // ;
 148+ 7839
 149+ 7839              //  ______________________________________________________________________
 150+ 7839              //
 151+ 7839              // quit         --
 152+ 7839              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7839                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7839             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7839             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7839             >
 153+ 7839             >                // dummy db directives used to calculate length of namec
 153+ 7839 51 55 49 54 >                db      "QUIT"
 153+ 783D             >len_NFA         defl    $ - temp_NFA
 153+ 783D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7839             >
 153+ 7839 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 783A 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 783E             >                org     $-1                 // alter last byte of Name just above to set
 153+ 783D D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 783E             >
 153+ 783E 28 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7840             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7840 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7843             >
 153+ 7843             >
 153+ 7843             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7843             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7843             >
 153+ 7843             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7843
 155+ 7843 28 6E 07 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7847 90 67 59 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 784B 4B 6C 28 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 784F 12 6B
 158+ 7851 4B 6C 5F 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7855 12 6B
 159+ 7857 E5 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7859                                                              // begin
 161+ 7859              Quit_Begin:
 162+ 7859 DF 6C 07 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 785D 3A 69
 163+ 785F FD 65                        dw      CR                      //      cr
 164+ 7861 3F 73                        dw      QUERY                   //      query
 165+ 7863              Next_Breakpoint_1:
 166+ 7863 7B 77                        dw      INTERPRET               //      interpret
 167+ 7865 B2 6D 07 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7869 84 69
 168+ 786B                                                              //      if
 169+ 786B 1C 64                        dw      ZBRANCH
 170+ 786D 07 00                        dw      Quit_Endif - $
 171+ 786F 11 74                        dw          C_DOT_QUOTE
 172+ 7871 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7874              Quit_Endif:                                     //      else
 174+ 7874                                                              // again
 175+ 7874 07 64                        dw      BRANCH
 176+ 7876 E3 FF                        dw      Quit_Begin - $
 177+ 7878 47 69                        dw      EXIT                    // ;
 178+ 787A
 179+ 787A              //  ______________________________________________________________________
 180+ 787A              //
 181+ 787A              // abort        --
 182+ 787A                              Colon_Def ABORT, "ABORT", is_normal
 182+ 787A             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 787A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 787A             >
 182+ 787A             >                // dummy db directives used to calculate length of namec
 182+ 787A 41 42 4F 52 >                db      "ABORT"
 182+ 787E 54          >
 182+ 787F             >len_NFA         defl    $ - temp_NFA
 182+ 787F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 787A             >
 182+ 787A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 787B 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 787F 54          >
 182+ 7880             >                org     $-1                 // alter last byte of Name just above to set
 182+ 787F D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7880             >
 182+ 7880 39 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7882             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7882 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7885             >
 182+ 7885             >
 182+ 7885             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7885             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7885             >
 182+ 7885             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7885 D6 6C 07 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7889 24 69
 184+ 788B 4D 71                        dw      DECIMAL                 // decimal
 185+ 788D 02 78                        dw      FORTH                   // [compile] forth
 186+ 788F 1B 78                        dw      DEFINITIONS             // definitions
 187+ 7891              Autoexec_Ptr:
 188+ 7891 89 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7893 40 78                        dw      QUIT                    // quit
 190+ 7895 47 69                        dw      EXIT                    // ;
 191+ 7897
 192+ 7897              //  ______________________________________________________________________
 193+ 7897              //
 194+ 7897              // warm         --
 195+ 7897                              Colon_Def WARM, "WARM", is_normal
 195+ 7897             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 7897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 7897             >
 195+ 7897             >                // dummy db directives used to calculate length of namec
 195+ 7897 57 41 52 4D >                db      "WARM"
 195+ 789B             >len_NFA         defl    $ - temp_NFA
 195+ 789B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 7897             >
 195+ 7897 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 7898 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 789C             >                org     $-1                 // alter last byte of Name just above to set
 195+ 789B CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 789C             >
 195+ 789C 7A 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 789E             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 789E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78A1             >
 195+ 78A1             >
 195+ 78A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78A1             >
 195+ 78A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78A1 2E 7C                        dw      BLK_INIT                // blk-init
 197+ 78A3 37 84                        dw      SPLASH                  // splash
 198+ 78A5 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78A9 3A 6F
 199+ 78AB 82 78                        dw      ABORT                   // abort
 200+ 78AD 47 69                        dw      EXIT                    // exit
 201+ 78AF
 202+ 78AF              //  ______________________________________________________________________
 203+ 78AF              //
 204+ 78AF              // cold         --
 205+ 78AF                              Colon_Def COLD, "COLD", is_normal
 205+ 78AF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78AF             >
 205+ 78AF             >                // dummy db directives used to calculate length of namec
 205+ 78AF 43 4F 4C 44 >                db      "COLD"
 205+ 78B3             >len_NFA         defl    $ - temp_NFA
 205+ 78B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78AF             >
 205+ 78AF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78B0 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78B4             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78B3 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78B4             >
 205+ 78B4 97 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78B6             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78B6 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78B9             >
 205+ 78B9             >
 205+ 78B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78B9             >
 205+ 78B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78B9 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78BD A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78C1 07 6B                        dw      FETCH                   // @
 209+ 78C3 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78C7 BE 69
 210+ 78C9 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78CD 50 68                        dw      CMOVE
 212+ 78CF A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78D3 07 6B                        dw      FETCH                   // @
 214+ 78D5 A5 63 09 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78D9 12 6B                        dw      STORE                   // !
 216+ 78DB 4B 6C 55 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78DF 12 6B
 217+ 78E1 33 6D 07 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78E5 86 6A
 218+ 78E7 F8 6D 12 6B                  dw      USE, STORE              // use !
 219+ 78EB 03 6E 12 6B                  dw      PREV, STORE             // prev !
 220+ 78EF A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78F3 18 6E 12 6B
 221+ 78F7              //              dw      LIT, 8
 222+ 78F7              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78F7 5D 6C 4A 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78FB 12 6B
 224+ 78FD 9E 78        Warm_Start:     dw      WARM
 225+ 78FF B6 78        Cold_Start:     dw      COLD
 226+ 7901 47 69                        dw      EXIT
 227+ 7903
 228+ 7903              //  ______________________________________________________________________
 229+ 7903              WarmRoutine:
 230+ 7903              ColdRoutine:
 231+ 7903 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 7907 D9                           exx
 233+ 7908 E5                           push    hl
 234+ 7909 D9                           exx
 235+ 790A
 236+ 790A ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 790E ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7912              //              nop
 239+ 7912 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7915              //              nop
 241+ 7915                              ldrphl
 241+ 7915 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7918 01 FD 78                     ld      bc, Warm_Start
 243+ 791B 38 02                        jr      c, Warm_Skip
 244+ 791D 03                           inc     bc
 245+ 791E 03                           inc     bc
 246+ 791F              Warm_Skip:
 247+ 791F                              next
 247+ 791F DD E9       >                jp      (ix)
 248+ 7921
 249+ 7921              //  ______________________________________________________________________
 250+ 7921              //
 251+ 7921              // basic        --
 252+ 7921                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7921             >
 252+ 7921             >                // dummy db directives used to calculate length of namec
 252+ 7921 42 41 53 49 >                db      "BASIC"
 252+ 7925 43          >
 252+ 7926             >len_NFA         defl    $ - temp_NFA
 252+ 7926             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7921             >
 252+ 7921 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7922 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7926 43          >
 252+ 7927             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7926 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7927             >
 252+ 7927 AF 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7929             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7929 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7929 ~           >
 252+ 7929 ~           >
 252+ 7929             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7929             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7929             >
 252+ 7929             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7929 C1                           pop     bc
 254+ 792A 21 00 00                     ld      hl, 0
 255+ 792D 39                           add     hl, sp
 256+ 792E ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7932              //              nop
 258+ 7932 22 6E 63                     ld      (SP_Basic),hl
 259+ 7935 D9                           exx
 260+ 7936 E1                           pop     hl
 261+ 7937 D9                           exx
 262+ 7938 C9                           ret     // to Basic
 263+ 7939
 264+ 7939              //  ______________________________________________________________________
 265+ 7939              //
 266+ 7939              // +-           n1 n2 -- n3
 267+ 7939              // leaves n1 with the sign of n2 as n3.
 268+ 7939                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7939             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7939             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7939             >
 268+ 7939             >                // dummy db directives used to calculate length of namec
 268+ 7939 2B 2D       >                db      "+-"
 268+ 793B             >len_NFA         defl    $ - temp_NFA
 268+ 793B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7939             >
 268+ 7939 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 793A 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 793C             >                org     $-1                 // alter last byte of Name just above to set
 268+ 793B AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 793C             >
 268+ 793C 21 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 793E             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 793E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7941             >
 268+ 7941             >
 268+ 7941             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7941             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7941             >
 268+ 7941             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7941 9E 69                        dw      ZLESS                   // 0<
 270+ 7943                                                              // if
 271+ 7943 1C 64                        dw      ZBRANCH
 272+ 7945 04 00                        dw      Plus_Minus_Endif - $
 273+ 7947 1F 6A                        dw          MINUS               //      minus
 274+ 7949              Plus_Minus_Endif:                               // endif
 275+ 7949 47 69                        dw      EXIT                    // ;
 276+ 794B
 277+ 794B              //  ______________________________________________________________________
 278+ 794B              //
 279+ 794B              // d+-          d1 n -- d2
 280+ 794B              // leaves d1 with the sign of n as d2.
 281+ 794B                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 794B             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 794B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 794B             >
 281+ 794B             >                // dummy db directives used to calculate length of namec
 281+ 794B 44 2B 2D    >                db      "D+-"
 281+ 794E             >len_NFA         defl    $ - temp_NFA
 281+ 794E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 794B             >
 281+ 794B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 794C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 794F             >                org     $-1                 // alter last byte of Name just above to set
 281+ 794E AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 794F             >
 281+ 794F 39 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7951             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7951 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7954             >
 281+ 7954             >
 281+ 7954             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7954             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7954             >
 281+ 7954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7954 9E 69                        dw      ZLESS                   // 0<
 283+ 7956                                                              // if
 284+ 7956 1C 64                        dw      ZBRANCH
 285+ 7958 04 00                        dw      DPlus_Minus_Endif - $
 286+ 795A 33 6A                        dw          DMINUS              //      dminus
 287+ 795C              DPlus_Minus_Endif:                              // endif
 288+ 795C 47 69                        dw      EXIT                    // ;
 289+ 795E
 290+ 795E              //  ______________________________________________________________________
 291+ 795E              //
 292+ 795E              // abs          n1 -- n2
 293+ 795E                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 795E             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 795E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 795E             >
 293+ 795E             >                // dummy db directives used to calculate length of namec
 293+ 795E 41 42 53    >                db      "ABS"
 293+ 7961             >len_NFA         defl    $ - temp_NFA
 293+ 7961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 795E             >
 293+ 795E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 795F 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7962             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7961 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7962             >
 293+ 7962 4B 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7964             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7964 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7967             >
 293+ 7967             >
 293+ 7967             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7967             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7967             >
 293+ 7967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7967 86 6A                        dw      DUP                     // dup
 295+ 7969 3E 79                        dw      PLUS_MINUS              // +-
 296+ 796B 47 69                        dw      EXIT                    // ;
 297+ 796D
 298+ 796D              //  ______________________________________________________________________
 299+ 796D              //
 300+ 796D              // dabs         d1 -- d2
 301+ 796D                              Colon_Def DABS, "DABS", is_normal
 301+ 796D             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 796D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 796D             >
 301+ 796D             >                // dummy db directives used to calculate length of namec
 301+ 796D 44 41 42 53 >                db      "DABS"
 301+ 7971             >len_NFA         defl    $ - temp_NFA
 301+ 7971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 796D             >
 301+ 796D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 796E 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7972             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7971 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7972             >
 301+ 7972 5E 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7974             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7974 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7977             >
 301+ 7977             >
 301+ 7977             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7977             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7977             >
 301+ 7977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7977 86 6A                        dw      DUP                     // dup
 303+ 7979 51 79                        dw      DPLUS_MINUS             // d+-
 304+ 797B 47 69                        dw      EXIT                    // ;
 305+ 797D
 306+ 797D              //  ______________________________________________________________________
 307+ 797D              //
 308+ 797D              // m*           n1 n2 -- d
 309+ 797D              // multiply two integer giving a double
 310+ 797D                              Colon_Def MMUL, "M*", is_normal
 310+ 797D             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 797D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 797D             >
 310+ 797D             >                // dummy db directives used to calculate length of namec
 310+ 797D 4D 2A       >                db      "M*"
 310+ 797F             >len_NFA         defl    $ - temp_NFA
 310+ 797F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 797D             >
 310+ 797D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 797E 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7980             >                org     $-1                 // alter last byte of Name just above to set
 310+ 797F AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7980             >
 310+ 7980 6D 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7982             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7982 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7985             >
 310+ 7985             >
 310+ 7985             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7985             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7985             >
 310+ 7985             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7985 DB 6A 06 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7989 58 69
 312+ 798B 64 79 7B 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 798F 64 79 7F 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7993 6A 69 51 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 7997 47 69                        dw      EXIT                    // ;
 316+ 7999
 317+ 7999              //  ______________________________________________________________________
 318+ 7999              //
 319+ 7999              // sm/rem       d n -- q r
 320+ 7999              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 7999              // the remainder has the sign of d.
 322+ 7999                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 7999             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 7999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7999             >
 322+ 7999             >                // dummy db directives used to calculate length of namec
 322+ 7999 53 4D 2F 52 >                db      "SM/REM"
 322+ 799D 45 4D       >
 322+ 799F             >len_NFA         defl    $ - temp_NFA
 322+ 799F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7999             >
 322+ 7999 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 799A 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 799E 45 4D       >
 322+ 79A0             >                org     $-1                 // alter last byte of Name just above to set
 322+ 799F CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79A0             >
 322+ 79A0 7D 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79A2             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79A2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79A5             >
 322+ 79A5             >
 322+ 79A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79A5             >
 322+ 79A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79A5 4B 6A 58 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79A9 58 69
 324+ 79AB 74 79 7C 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79AF 64 79
 325+ 79B1 AE 68                        dw      UMDIVMOD                // um/mod
 326+ 79B3 6A 69                        dw      R_TO                    // r>
 327+ 79B5 7C 69 06 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79B9 3E 79 7B 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79BD 6A 69                        dw      R_TO                    // r>
 330+ 79BF 3E 79 7B 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79C3 47 69                        dw      EXIT                    // ;
 332+ 79C5
 333+ 79C5              //  ______________________________________________________________________
 334+ 79C5              //
 335+ 79C5              // fm/mod       d n -- q r
 336+ 79C5              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79C5              // the remainder has the sign of d.
 338+ 79C5                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79C5             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79C5             >
 338+ 79C5             >                // dummy db directives used to calculate length of namec
 338+ 79C5 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79C9 4F 44       >
 338+ 79CB             >len_NFA         defl    $ - temp_NFA
 338+ 79CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79C5             >
 338+ 79C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79C6 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79CA 4F 44       >
 338+ 79CC             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79CB C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79CC             >
 338+ 79CC 99 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79CE             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79CE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79D1             >
 338+ 79D1             >
 338+ 79D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79D1             >
 338+ 79D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79D1 86 6A 58 69                  dw      DUP, TO_R               // dup >r
 340+ 79D5 A2 79                        dw      SMDIVM
 341+ 79D7 4B 6A 86 6A                  dw      OVER, DUP
 342+ 79DB 84 69 84 69                  dw      ZEQUAL, ZEQUAL
 343+ 79DF 7B 6A 9E 69                  dw      SWAP, ZLESS
 344+ 79E3 7C 69 9E 69                  dw      R_OP, ZLESS
 345+ 79E7 06 69 E5 68                  dw      XOR_OP, AND_OP
 346+ 79EB 1C 64                        dw      ZBRANCH
 347+ 79ED 10 00                        dw      Fm_Mod_Else - $
 348+ 79EF E5 69                        dw          ONE_SUBTRACT
 349+ 79F1 7B 6A 6A 69                  dw          SWAP, R_TO
 350+ 79F5 BE 69 7B 6A                  dw          PLUS, SWAP
 351+ 79F9 07 64                        dw      BRANCH
 352+ 79FB 06 00                        dw      Fm_Mod_Endif - $
 353+ 79FD              Fm_Mod_Else:
 354+ 79FD 6A 69 59 6A                  dw          R_TO, DROP
 355+ 7A01              Fm_Mod_Endif:
 356+ 7A01 47 69                        dw      EXIT
 357+ 7A03              //              dw      TWO_DUP                 // 2dup
 358+ 7A03              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A03              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A03              //              dw      UMDIVMOD                // um/mod
 361+ 7A03              //              dw      SWAP                    // swap
 362+ 7A03              //              dw      II, ZLESS               // i'
 363+ 7A03              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A03              //              dw      R_TO                    // r>
 365+ 7A03              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A03              //              dw      R_OP                    // r@
 367+ 7A03              //              dw      ZLESS                   // i'
 368+ 7A03              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A03              //              dw      R_TO                    // r>
 370+ 7A03              //              dw      PLUS_MINUS              // +- swap
 371+ 7A03              //              dw      EXIT                    // ;
 372+ 7A03
 373+ 7A03              //  ______________________________________________________________________
 374+ 7A03              //
 375+ 7A03              // m/mod        d n -- q r
 376+ 7A03              // multiply two integer giving a double
 377+ 7A03                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A03             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A03             >
 377+ 7A03             >                // dummy db directives used to calculate length of namec
 377+ 7A03 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A07 44          >
 377+ 7A08             >len_NFA         defl    $ - temp_NFA
 377+ 7A08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A03             >
 377+ 7A03 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A04 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A08 44          >
 377+ 7A09             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A08 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A09             >
 377+ 7A09 C5 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A0B             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A0B CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A0E             >
 377+ 7A0E             >
 377+ 7A0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A0E             >
 377+ 7A0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A0E A2 79                        dw      SMDIVM
 379+ 7A10 47 69                        dw      EXIT                    // ;
 380+ 7A12
 381+ 7A12              //  ______________________________________________________________________
 382+ 7A12              //
 383+ 7A12              // m/           d n -- q
 384+ 7A12              // multiply two integer giving a double
 385+ 7A12                              Colon_Def MDIV, "M/", is_normal
 385+ 7A12             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A12             >
 385+ 7A12             >                // dummy db directives used to calculate length of namec
 385+ 7A12 4D 2F       >                db      "M/"
 385+ 7A14             >len_NFA         defl    $ - temp_NFA
 385+ 7A14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A12             >
 385+ 7A12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A13 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A15             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A14 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A15             >
 385+ 7A15 03 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A17             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A17 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A1A             >
 385+ 7A1A             >
 385+ 7A1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A1A             >
 385+ 7A1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A1A 0B 7A 62 6A                  dw      MDIVM, NIP
 387+ 7A1E 47 69                        dw      EXIT                    // ;
 388+ 7A20
 389+ 7A20              //  ______________________________________________________________________
 390+ 7A20              //
 391+ 7A20              // *            n1 n2 -- n3
 392+ 7A20              // multiply two integer
 393+ 7A20                              Colon_Def MUL, "*", is_normal
 393+ 7A20             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A20             >
 393+ 7A20             >                // dummy db directives used to calculate length of namec
 393+ 7A20 2A          >                db      "*"
 393+ 7A21             >len_NFA         defl    $ - temp_NFA
 393+ 7A21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A20             >
 393+ 7A20 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A21 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A22             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A21 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A22             >
 393+ 7A22 12 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A24             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A24 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A27             >
 393+ 7A27             >
 393+ 7A27             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A27             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A27             >
 393+ 7A27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A27 82 79 59 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A2B 47 69                        dw      EXIT                    // ;
 396+ 7A2D
 397+ 7A2D              //  ______________________________________________________________________
 398+ 7A2D              //
 399+ 7A2D              // /mod         n1 n2 -- n3 n4
 400+ 7A2D              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A2D              // The remainder has the sign of n1
 402+ 7A2D                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A2D             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A2D             >
 402+ 7A2D             >                // dummy db directives used to calculate length of namec
 402+ 7A2D 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A31             >len_NFA         defl    $ - temp_NFA
 402+ 7A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A2D             >
 402+ 7A2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A2E 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A32             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A31 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A32             >
 402+ 7A32 20 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A34             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A34 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A37             >
 402+ 7A37             >
 402+ 7A37             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A37             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A37             >
 402+ 7A37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A37 58 69 98 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A3B 6A 69
 404+ 7A3D 0B 7A                        dw      MDIVM                   // m/mod
 405+ 7A3F 47 69                        dw      EXIT                    // ;
 406+ 7A41
 407+ 7A41              //  ______________________________________________________________________
 408+ 7A41              //
 409+ 7A41              // /            n1 n2 -- n3
 410+ 7A41              // division
 411+ 7A41                              Colon_Def DIV, "/", is_normal
 411+ 7A41             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A41             >
 411+ 7A41             >                // dummy db directives used to calculate length of namec
 411+ 7A41 2F          >                db      "/"
 411+ 7A42             >len_NFA         defl    $ - temp_NFA
 411+ 7A42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A41             >
 411+ 7A41 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A42 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A43             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A42 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A43             >
 411+ 7A43 2D 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A45             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A45 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A48             >
 411+ 7A48             >
 411+ 7A48             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A48             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A48             >
 411+ 7A48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A48 34 7A 62 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A4C 47 69                        dw      EXIT                    // ;
 414+ 7A4E
 415+ 7A4E              //  ______________________________________________________________________
 416+ 7A4E              //
 417+ 7A4E              // mod          n1 n2 -- n3
 418+ 7A4E                              Colon_Def MOD, "MOD", is_normal
 418+ 7A4E             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A4E             >
 418+ 7A4E             >                // dummy db directives used to calculate length of namec
 418+ 7A4E 4D 4F 44    >                db      "MOD"
 418+ 7A51             >len_NFA         defl    $ - temp_NFA
 418+ 7A51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A4E             >
 418+ 7A4E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A4F 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A52             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A51 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A52             >
 418+ 7A52 41 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A54             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A54 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A57             >
 418+ 7A57             >
 418+ 7A57             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A57             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A57             >
 418+ 7A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A57 34 7A 59 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A5B 47 69                        dw      EXIT                    // ;
 421+ 7A5D
 422+ 7A5D              //  ______________________________________________________________________
 423+ 7A5D              //
 424+ 7A5D              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A5D              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A5D              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A5D              // avoids loss of precision
 428+ 7A5D                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A5D             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A5D             >
 428+ 7A5D             >                // dummy db directives used to calculate length of namec
 428+ 7A5D 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A61 44          >
 428+ 7A62             >len_NFA         defl    $ - temp_NFA
 428+ 7A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A5D             >
 428+ 7A5D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A5E 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A62 44          >
 428+ 7A63             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A62 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A63             >
 428+ 7A63 4E 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A65             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A65 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A68             >
 428+ 7A68             >
 428+ 7A68             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A68             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A68             >
 428+ 7A68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A68 58 69 82 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A6C 6A 69 0B 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A70 47 69                        dw      EXIT                    // ;
 432+ 7A72
 433+ 7A72              //  ______________________________________________________________________
 434+ 7A72              //
 435+ 7A72              // */          n1 n2 n3 -- n4
 436+ 7A72              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A72                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A72             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A72             >
 437+ 7A72             >                // dummy db directives used to calculate length of namec
 437+ 7A72 2A 2F       >                db      "*/"
 437+ 7A74             >len_NFA         defl    $ - temp_NFA
 437+ 7A74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A72             >
 437+ 7A72 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A73 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A75             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A74 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A75             >
 437+ 7A75 5D 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A77             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A77 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A7A             >
 437+ 7A7A             >
 437+ 7A7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A7A             >
 437+ 7A7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A7A 65 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A7C 62 6A                        dw     NIP                      // nip
 440+ 7A7E 47 69                        dw     EXIT                     // ;
 441+ 7A80
 442+ 7A80
 443+ 7A80              //  ______________________________________________________________________
 444+ 7A80              //
 445+ 7A80              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A80              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A80              // All terms are unsigned.
 448+ 7A80              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A80              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A80              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A80              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A80              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A80              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A80              //              dw      EXIT                    // ;
 455+ 7A80
 456+ 7A80              //  ______________________________________________________________________
 457+ 7A80              //
 458+ 7A80              // (line)       n1 n2 -- a b
 459+ 7A80              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A80              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A80                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A80             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A80             >
 461+ 7A80             >                // dummy db directives used to calculate length of namec
 461+ 7A80 28 4C 49 4E >                db      "(LINE)"
 461+ 7A84 45 29       >
 461+ 7A86             >len_NFA         defl    $ - temp_NFA
 461+ 7A86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A80             >
 461+ 7A80 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A81 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A85 45 29       >
 461+ 7A87             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A86 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A87             >
 461+ 7A87 72 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A89             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A89 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A8C             >
 461+ 7A8C             >
 461+ 7A8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A8C             >
 461+ 7A8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A8C 58 69                        dw      TO_R                    // >r
 463+ 7A8E FA 6B                        dw      NOOP                    // noop
 464+ 7A90 85 6C                        dw      CL                      // c/l
 465+ 7A92 92 6C 65 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7A96 6A 69                        dw      R_TO                    // r>
 467+ 7A98 9F 6C 24 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7A9C BE 69
 468+ 7A9E 4D 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AA0 BE 69                        dw      PLUS                    // +
 470+ 7AA2 FA 6B                        dw      NOOP                    // noop
 471+ 7AA4 85 6C                        dw      CL                      // c/l
 472+ 7AA6 47 69                        dw      EXIT                    // ;
 473+ 7AA8
 474+ 7AA8              //  ______________________________________________________________________
 475+ 7AA8              //
 476+ 7AA8              // .line        n1 n2 --
 477+ 7AA8              // Sends to output line  n1  of screen n2.
 478+ 7AA8                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AA8             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AA8             >
 478+ 7AA8             >                // dummy db directives used to calculate length of namec
 478+ 7AA8 2E 4C 49 4E >                db      ".LINE"
 478+ 7AAC 45          >
 478+ 7AAD             >len_NFA         defl    $ - temp_NFA
 478+ 7AAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AA8             >
 478+ 7AA8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AA9 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AAD 45          >
 478+ 7AAE             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AAD C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AAE             >
 478+ 7AAE 80 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AB0             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AB0 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AB3             >
 478+ 7AB3             >
 478+ 7AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AB3             >
 478+ 7AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AB3 89 7A 5A 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AB7 39 72
 480+ 7AB9 47 69                        dw      EXIT                    // ;
 481+ 7ABB
 482+ 7ABB              //  ______________________________________________________________________
 483+ 7ABB              //
 484+ 7ABB              // message       n1 n2 --
 485+ 7ABB              // prints error message to current channel.
 486+ 7ABB              // if WARNING is 0, prints "MSG#n".
 487+ 7ABB              // if WARNING is 1, prints line n of screen 4.
 488+ 7ABB              // if WARNING is -1, see ERROR
 489+ 7ABB              // value can be negative or beyond block 4.
 490+ 7ABB                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7ABB             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7ABB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7ABB             >
 490+ 7ABB             >                // dummy db directives used to calculate length of namec
 490+ 7ABB 4D 45 53 53 >                db      "MESSAGE"
 490+ 7ABF 41 47 45    >
 490+ 7AC2             >len_NFA         defl    $ - temp_NFA
 490+ 7AC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7ABB             >
 490+ 7ABB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7ABC 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AC0 41 47 45    >
 490+ 7AC3             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AC2 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AC3             >
 490+ 7AC3 A8 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AC5             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AC5 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AC8             >
 490+ 7AC8             >
 490+ 7AC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AC8             >
 490+ 7AC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AC8 03 6D 07 6B                  dw      WARNING, FETCH          // warning @
 492+ 7ACC                                                              // if
 493+ 7ACC 1C 64                        dw      ZBRANCH
 494+ 7ACE 18 00                        dw      Message_Else - $
 495+ 7AD0 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AD4 8A 6D 07 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AD8 9F 6C 45 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7ADC A5 6E
 498+ 7ADE B0 7A                        dw          DOT_LINE            //      .line
 499+ 7AE0 57 6F                        dw          SPACE               //      space
 500+ 7AE2                                                              // else
 501+ 7AE2
 502+ 7AE2 07 64                        dw      BRANCH
 503+ 7AE4 0B 00                        dw      Message_ENdif - $
 504+ 7AE6              Message_Else:
 505+ 7AE6 11 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AE8 04 6D 73 67                  db          4, "msg#"
 506+ 7AEC 23
 507+ 7AED 29 83                        dw          DOT                 //      .  ( forward )
 508+ 7AEF              Message_ENdif:                                  // endif
 509+ 7AEF 47 69                        dw      EXIT                    // ;
 510+ 7AF1
 511+ 7AF1
 512+ 7AF1              //  ______________________________________________________________________
 513+ 7AF1              //
 514+ 7AF1              // device
 515+ 7AF1                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AF1             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AF1             >
 515+ 7AF1             >                // dummy db directives used to calculate length of namec
 515+ 7AF1 44 45 56 49 >                db      "DEVICE"
 515+ 7AF5 43 45       >
 515+ 7AF7             >len_NFA         defl    $ - temp_NFA
 515+ 7AF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AF1             >
 515+ 7AF1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AF2 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7AF6 43 45       >
 515+ 7AF8             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7AF7 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7AF8             >
 515+ 7AF8 BB 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7AFA             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7AFA CD 2B 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7AFD             >
 515+ 7AFD             >
 515+ 7AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7AFD             >
 515+ 7AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7AFD 02 00       >                dw      2
 516+ 7AFF
 517+ 7AFF              //  ______________________________________________________________________
 518+ 7AFF
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7AFF                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7AFF              //  ______________________________________________________________________
   2+ 7AFF              //
   3+ 7AFF              //  next-opt.asm
   4+ 7AFF              //
   5+ 7AFF              //  ZX Spectrum Next - peculiar definitions
   6+ 7AFF              //  ______________________________________________________________________
   7+ 7AFF
   8+ 7AFF              //  ______________________________________________________________________
   9+ 7AFF              //
  10+ 7AFF              // reg@         n -- b
  11+ 7AFF              // read Next REGister n giving byte b
  12+ 7AFF              //
  13+ 7AFF              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7AFF              //              dw      LIT, $243B
  15+ 7AFF              //              dw      PSTORE
  16+ 7AFF              //              dw      LIT, $253B
  17+ 7AFF              //              dw      PFETCH
  18+ 7AFF              //              dw      EXIT
  19+ 7AFF                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7AFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7AFF             >
  19+ 7AFF             >                // dummy db directives used to calculate length of namec
  19+ 7AFF 52 45 47 40 >                db      "REG@"
  19+ 7B03             >len_NFA         defl    $ - temp_NFA
  19+ 7B03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7AFF             >
  19+ 7AFF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B00 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B04             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B03 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B04             >
  19+ 7B04 F1 7A       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B06             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B06 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B06 ~           >
  19+ 7B06 ~           >
  19+ 7B06             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B06             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B06             >
  19+ 7B06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B06 D9                           exx
  21+ 7B07 01 3B 24                     ld      bc, $243B
  22+ 7B0A E1                           pop     hl
  23+ 7B0B ED 69                        out     (c), l
  24+ 7B0D 04                           inc     b
  25+ 7B0E ED 68                        in      l, (c)
  26+ 7B10 E5                           push    hl
  27+ 7B11 D9                           exx
  28+ 7B12                              next
  28+ 7B12 DD E9       >                jp      (ix)
  29+ 7B14
  30+ 7B14
  31+ 7B14              //  ______________________________________________________________________
  32+ 7B14              //
  33+ 7B14              // reg!         b n --
  34+ 7B14              // write value b to Next REGister n
  35+ 7B14              //
  36+ 7B14              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B14              //              dw      LIT, $243B
  38+ 7B14              //              dw      PSTORE
  39+ 7B14              //              dw      LIT, $253B
  40+ 7B14              //              dw      PSTORE
  41+ 7B14              //              dw      EXIT
  42+ 7B14                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B14             >
  42+ 7B14             >                // dummy db directives used to calculate length of namec
  42+ 7B14 52 45 47 21 >                db      "REG!"
  42+ 7B18             >len_NFA         defl    $ - temp_NFA
  42+ 7B18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B14             >
  42+ 7B14 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B15 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B19             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B18 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B19             >
  42+ 7B19 FF 7A       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B1B             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B1B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B1B ~           >
  42+ 7B1B ~           >
  42+ 7B1B             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B1B             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B1B             >
  42+ 7B1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B1B D9                           exx
  44+ 7B1C 01 3B 24                     ld      bc, $243B
  45+ 7B1F E1                           pop     hl
  46+ 7B20 ED 69                        out     (c), l
  47+ 7B22 04                           inc     b
  48+ 7B23 E1                           pop     hl
  49+ 7B24 ED 69                        out     (c), l
  50+ 7B26 D9                           exx
  51+ 7B27                              next
  51+ 7B27 DD E9       >                jp      (ix)
  52+ 7B29
  53+ 7B29
  54+ 7B29              //  ______________________________________________________________________
  55+ 7B29              //
  56+ 7B29              // mmu7@        -- n
  57+ 7B29              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B29
  59+ 7B29                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B29             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B29             >
  59+ 7B29             >                // dummy db directives used to calculate length of namec
  59+ 7B29 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B2D 40          >
  59+ 7B2E             >len_NFA         defl    $ - temp_NFA
  59+ 7B2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B29             >
  59+ 7B29 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B2A 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B2E 40          >
  59+ 7B2F             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B2E C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B2F             >
  59+ 7B2F 14 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B31             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B31 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B34             >
  59+ 7B34             >
  59+ 7B34             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B34             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B34             >
  59+ 7B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B34 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B38 06 7B
  61+ 7B3A 47 69                        dw      EXIT
  62+ 7B3C
  63+ 7B3C              //  ______________________________________________________________________
  64+ 7B3C              //
  65+ 7B3C              // mmu7!        n --
  66+ 7B3C              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B3C              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B3C
  69+ 7B3C                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B3C             >
  69+ 7B3C             >                // dummy db directives used to calculate length of namec
  69+ 7B3C 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B40 21          >
  69+ 7B41             >len_NFA         defl    $ - temp_NFA
  69+ 7B41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B3C             >
  69+ 7B3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B3D 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B41 21          >
  69+ 7B42             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B41 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B42             >
  69+ 7B42 29 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B44             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B44 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B44 ~           >
  69+ 7B44 ~           >
  69+ 7B44             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B44             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B44             >
  69+ 7B44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B44 E1                           pop     hl
  71+ 7B45 7D                           ld      a, l
  72+ 7B46 ED 92 57                     nextreg 87, a
  73+ 7B49
  74+ 7B49                              next
  74+ 7B49 DD E9       >                jp      (ix)
  75+ 7B4B
  76+ 7B4B              //  ______________________________________________________________________
  77+ 7B4B              //
  78+ 7B4B              // >far         ha -- a n
  79+ 7B4B              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B4B              // take lower bits of H and L as an offset from E000h
  81+ 7B4B              // then return address  a  between E000h-FFFFh
  82+ 7B4B              // and page number n  between 64-71 (40h-47h)
  83+ 7B4B              // For example, in hex:
  84+ 7B4B              //   0000 >FAR  gives  40.E000
  85+ 7B4B              //   1FFF >FAR  gives  40.FFFF
  86+ 7B4B              //   2000 >FAR  gives  41.E000
  87+ 7B4B              //   3FFF >FAR  gives  41.FFFF
  88+ 7B4B              //   EFFF >FAR  gives  47.EFFF
  89+ 7B4B              //   FFFF >FAR  gives  47.FFFF
  90+ 7B4B              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B4B              //                pop     de
  92+ 7B4B              //                ld      a, d
  93+ 7B4B              //                and     $E0
  94+ 7B4B              //                rlca
  95+ 7B4B              //                rlca
  96+ 7B4B              //                rlca
  97+ 7B4B              //                add     $40
  98+ 7B4B              //                ld      l, a
  99+ 7B4B              //                ld      h, 0
 100+ 7B4B              //                ld      a, d
 101+ 7B4B              //                or      $E0
 102+ 7B4B              //                ld      d, a
 103+ 7B4B              //                push    hl
 104+ 7B4B              //                push    de
 105+ 7B4B              //                next
 106+ 7B4B
 107+ 7B4B              //  ______________________________________________________________________
 108+ 7B4B              //
 109+ 7B4B              // <far         a n  -- ha
 110+ 7B4B              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B4B              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B4B              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B4B              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B4B              //                pop     de                  // page number in e
 115+ 7B4B              //                pop     hl                  // address in hl
 116+ 7B4B              //                ld      a, e
 117+ 7B4B              //                sub     $40                 // reduced to 0-7
 118+ 7B4B              //                rrca
 119+ 7B4B              //                rrca
 120+ 7B4B              //                rrca
 121+ 7B4B              //                ld      d, a                // save to d bits 765
 122+ 7B4B              //                ld      a, h                // drops
 123+ 7B4B              //                and     $1F
 124+ 7B4B              //                or      d
 125+ 7B4B              //                ld      h, a
 126+ 7B4B              //
 127+ 7B4B              //                psh1
 128+ 7B4B
 129+ 7B4B              //  ______________________________________________________________________
 130+ 7B4B              //
 131+ 7B4B              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B4B              // NextZXOS call wrapper.
 133+ 7B4B              //  n1 = hl register parameter value
 134+ 7B4B              //  n2 = de register parameter value
 135+ 7B4B              //  n3 = bc register parameter value
 136+ 7B4B              //  n4 =  a register parameter value
 137+ 7B4B              //   a = routine address in ROM 3
 138+ 7B4B              // ----
 139+ 7B4B              //  n5 = hl returned value
 140+ 7B4B              //  n6 = de returned value
 141+ 7B4B              //  n7 = bc returned value
 142+ 7B4B              //  n8 =  a returned value
 143+ 7B4B              //   f
 144+ 7B4B                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B4B             >
 144+ 7B4B             >                // dummy db directives used to calculate length of namec
 144+ 7B4B 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B4F 44 4F 53    >
 144+ 7B52             >len_NFA         defl    $ - temp_NFA
 144+ 7B52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B4B             >
 144+ 7B4B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B4C 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B50 44 4F 53    >
 144+ 7B53             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B52 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B53             >
 144+ 7B53 3C 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B55             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B55 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B55 ~           >
 144+ 7B55 ~           >
 144+ 7B55             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B55             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B55             >
 144+ 7B55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B55 D1                           pop     de                  // dos call entry address in de
 146+ 7B56 E1                           pop     hl                  // a register
 147+ 7B57 7D                           ld      a, l
 148+ 7B58 D9                           exx
 149+ 7B59 C1                           pop     bc
 150+ 7B5A D1                           pop     de
 151+ 7B5B E1                           pop     hl
 152+ 7B5C D9                           exx
 153+ 7B5D
 154+ 7B5D C5                           push    bc
 155+ 7B5E DD E5                        push    ix
 156+ 7B60
 157+ 7B60              //              ld      (SP_Saved), sp
 158+ 7B60              //              ld      sp, Cold_origin - 5
 159+ 7B60 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B62
 161+ 7B62 CF                           rst     08
 162+ 7B63 94                           db      $94
 163+ 7B64
 164+ 7B64              //              ld      sp, (SP_Saved)
 165+ 7B64              //              push    ix
 166+ 7B64              //              pop     hl
 167+ 7B64              //              ld      (IX_Echo), hl
 168+ 7B64 DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B68              //              nop
 170+ 7B68 DD E1                        pop     ix
 171+ 7B6A E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B6B D5                           push    de
 173+ 7B6C C5                           push    bc
 174+ 7B6D 4D                           ld      c, l
 175+ 7B6E 44                           ld      b, h
 176+ 7B6F
 177+ 7B6F 26 00                        ld      h, 0
 178+ 7B71 6F                           ld      l, a
 179+ 7B72 E5                           push    hl
 180+ 7B73 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B75 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B76
 183+ 7B76                              psh1
 183+ 7B76 E5          >                push    hl
 183+ 7B77 DD E9       >                jp      (ix)
 184+ 7B79
 185+ 7B79              //  ______________________________________________________________________
 186+ 7B79              //
 187+ 7B79              // blk-fh
 188+ 7B79                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7B79             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7B79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7B79             >
 188+ 7B79             >                // dummy db directives used to calculate length of namec
 188+ 7B79 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7B7D 46 48       >
 188+ 7B7F             >len_NFA         defl    $ - temp_NFA
 188+ 7B7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7B79             >
 188+ 7B79 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7B7A 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7B7E 46 48       >
 188+ 7B80             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7B7F C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7B80             >
 188+ 7B80 4B 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7B82             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7B82 CD 2B 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7B85             >
 188+ 7B85             >
 188+ 7B85             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7B85             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7B85             >
 188+ 7B85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7B85 01 00       >                dw      1
 189+ 7B87
 190+ 7B87                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7B87             >
 190+ 7B87             >                // dummy db directives used to calculate length of namec
 190+ 7B87 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7B8B 46 4E 41 4D >
 190+ 7B8F 45          >
 190+ 7B90             >len_NFA         defl    $ - temp_NFA
 190+ 7B90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7B87             >
 190+ 7B87 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7B88 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7B8C 46 4E 41 4D >
 190+ 7B90 45          >
 190+ 7B91             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7B90 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7B91             >
 190+ 7B91 79 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7B93             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7B93 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7B96             >
 190+ 7B96             >
 190+ 7B96             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7B96             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7B96             >
 190+ 7B96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7B96 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7B9A 6F 63 6B 73
 191+ 7B9E 2D 36 34 2E
 191+ 7BA2 62 69 6E 00
 192+ 7BA6 00 00 00...                  ds      24
 193+ 7BBE
 194+ 7BBE              //  ______________________________________________________________________
 195+ 7BBE              //
 196+ 7BBE              // blk-seek     n --
 197+ 7BBE              // seek block n  within blocks!.bin  file
 198+ 7BBE                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BBE             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BBE             >
 198+ 7BBE             >                // dummy db directives used to calculate length of namec
 198+ 7BBE 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BC2 53 45 45 4B >
 198+ 7BC6             >len_NFA         defl    $ - temp_NFA
 198+ 7BC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BBE             >
 198+ 7BBE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BBF 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BC3 53 45 45 4B >
 198+ 7BC7             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BC6 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BC7             >
 198+ 7BC7 87 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BC9             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BC9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BCC             >
 198+ 7BCC             >
 198+ 7BCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BCC             >
 198+ 7BCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BCC 92 6C 82 79                  dw  BBUF, MMUL
 200+ 7BD0 82 7B 07 6B                  dw  BLK_FH, FETCH
 201+ 7BD4 6F 67                        dw  F_SEEK
 202+ 7BD6 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7BDA 21 70
 203+ 7BDC 47 69                        dw  EXIT
 204+ 7BDE
 205+ 7BDE              //  ______________________________________________________________________
 206+ 7BDE              //
 207+ 7BDE              // blk-read     n --
 208+ 7BDE              // seek block n  within blocks!.bin  file
 209+ 7BDE                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7BDE             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7BDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BDE             >
 209+ 7BDE             >                // dummy db directives used to calculate length of namec
 209+ 7BDE 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7BE2 52 45 41 44 >
 209+ 7BE6             >len_NFA         defl    $ - temp_NFA
 209+ 7BE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BDE             >
 209+ 7BDE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BDF 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7BE3 52 45 41 44 >
 209+ 7BE7             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BE6 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BE7             >
 209+ 7BE7 BE 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7BE9             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7BE9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7BEC             >
 209+ 7BEC             >
 209+ 7BEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7BEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7BEC             >
 209+ 7BEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7BEC C9 7B                        dw  BLK_SEEK
 211+ 7BEE 92 6C                        dw  BBUF
 212+ 7BF0 82 7B 07 6B                  dw  BLK_FH, FETCH
 213+ 7BF4 D3 67                        dw  F_READ
 214+ 7BF6 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7BFA 21 70
 215+ 7BFC 59 6A                        dw  DROP
 216+ 7BFE 47 69                        dw  EXIT
 217+ 7C00
 218+ 7C00              //  ______________________________________________________________________
 219+ 7C00              //
 220+ 7C00              // blk-write     n --
 221+ 7C00              // seek block n  within blocks!.bin  file
 222+ 7C00                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C00             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C00             >
 222+ 7C00             >                // dummy db directives used to calculate length of namec
 222+ 7C00 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C04 57 52 49 54 >
 222+ 7C08 45          >
 222+ 7C09             >len_NFA         defl    $ - temp_NFA
 222+ 7C09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C00             >
 222+ 7C00 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C01 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C05 57 52 49 54 >
 222+ 7C09 45          >
 222+ 7C0A             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C09 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C0A             >
 222+ 7C0A DE 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C0C             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C0C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C0F             >
 222+ 7C0F             >
 222+ 7C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C0F             >
 222+ 7C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C0F C9 7B                        dw  BLK_SEEK
 224+ 7C11 92 6C                        dw  BBUF
 225+ 7C13 82 7B 07 6B                  dw  BLK_FH, FETCH
 226+ 7C17 F0 67                        dw  F_WRITE
 227+ 7C19 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C1D 21 70
 228+ 7C1F 59 6A                        dw  DROP
 229+ 7C21 47 69                        dw  EXIT
 230+ 7C23
 231+ 7C23              //  ______________________________________________________________________
 232+ 7C23              //
 233+ 7C23              // blk-init     n --
 234+ 7C23              // seek block n  within blocks!.bin  file
 235+ 7C23                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C23             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C23             >
 235+ 7C23             >                // dummy db directives used to calculate length of namec
 235+ 7C23 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C27 49 4E 49 54 >
 235+ 7C2B             >len_NFA         defl    $ - temp_NFA
 235+ 7C2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C23             >
 235+ 7C23 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C24 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C28 49 4E 49 54 >
 235+ 7C2C             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C2B D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C2C             >
 235+ 7C2C 00 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C2E             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C2E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C31             >
 235+ 7C31             >
 235+ 7C31             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C31             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C31             >
 235+ 7C31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C31 82 7B 07 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C35 90 67 59 6A
 237+ 7C39 93 7B DB 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C3D 55 6E 66 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C41 05 68
 239+ 7C43 A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C47 21 70
 240+ 7C49 82 7B 12 6B                  dw  BLK_FH, STORE
 241+ 7C4D 47 69                        dw  EXIT
 242+ 7C4F
 243+ 7C4F              //  ______________________________________________________________________
 244+ 7C4F              //
 245+ 7C4F              // #sec
 246+ 7C4F              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C4F              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C4F
 249+ 7C4F                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C4F             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C4F             >
 249+ 7C4F             >                // dummy db directives used to calculate length of namec
 249+ 7C4F 23 53 45 43 >                db      "#SEC"
 249+ 7C53             >len_NFA         defl    $ - temp_NFA
 249+ 7C53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C4F             >
 249+ 7C4F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C50 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C54             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C53 C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C54             >
 249+ 7C54 23 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C56             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C56 CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C59             >
 249+ 7C59             >
 249+ 7C59             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C59             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C59             >
 249+ 7C59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C59 FF 7F       >                dw      32767
 250+ 7C5B
 251+ 7C5B              //  ______________________________________________________________________
 252+ 7C5B
 253+ 7C5B
 254+ 7C5B
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C5B                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C5B              //  ______________________________________________________________________
   2+ 7C5B              //
   3+ 7C5B              //  L3.asm
   4+ 7C5B              //
   5+ 7C5B              //  Continuation of L2.asm
   6+ 7C5B              //  I/O Block definitions
   7+ 7C5B              //  ______________________________________________________________________
   8+ 7C5B
   9+ 7C5B
  10+ 7C5B              //  ______________________________________________________________________
  11+ 7C5B              //
  12+ 7C5B              // r/w          a n f --
  13+ 7C5B              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C5B                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C5B             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C5B             >
  14+ 7C5B             >                // dummy db directives used to calculate length of namec
  14+ 7C5B 52 2F 57    >                db      "R/W"
  14+ 7C5E             >len_NFA         defl    $ - temp_NFA
  14+ 7C5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C5B             >
  14+ 7C5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C5C 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C5F             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C5E D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C5F             >
  14+ 7C5F 4F 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C61             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C61 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C64             >
  14+ 7C64             >
  14+ 7C64             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C64             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C64             >
  14+ 7C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C64 58 69                        dw      TO_R                    // >r
  16+ 7C66 E5 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C68 86 6A 9E 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C6C 4B 6A 56 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C70 E5 69 E2 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C74 F5 68                        dw      OR_OP                   // or
  21+ 7C76 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C7A 21 70
  22+ 7C7C 6A 69                        dw      R_TO                    // r>
  23+ 7C7E                                                              // if
  24+ 7C7E 1C 64                        dw      ZBRANCH
  25+ 7C80 08 00                        dw      Read_Write_Else - $
  26+ 7C82 E9 7B                        dw          BLK_READ            //      blk-read
  27+ 7C84 07 64                        dw      BRANCH
  28+ 7C86 04 00                        dw      Read_Write_Endif - $
  29+ 7C88              Read_Write_Else:                                // else
  30+ 7C88 0C 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7C8A              Read_Write_Endif:                               // endif
  32+ 7C8A 47 69                        dw      EXIT                    // ;
  33+ 7C8C
  34+ 7C8C
  35+ 7C8C              //  ______________________________________________________________________
  36+ 7C8C              //
  37+ 7C8C              // +buf        a1 -- a2 f
  38+ 7C8C              // advences to next buffer, cyclically rotating along them
  39+ 7C8C                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C8C             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C8C             >
  39+ 7C8C             >                // dummy db directives used to calculate length of namec
  39+ 7C8C 2B 42 55 46 >                db      "+BUF"
  39+ 7C90             >len_NFA         defl    $ - temp_NFA
  39+ 7C90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C8C             >
  39+ 7C8C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C8D 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C91             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C90 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C91             >
  39+ 7C91 5B 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C93             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C93 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7C96             >
  39+ 7C96             >
  39+ 7C96             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7C96             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7C96             >
  39+ 7C96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7C96 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7C9A BE 69
  41+ 7C9C 86 6A 3F 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CA0 07 6B
  42+ 7CA2 B1 6E                        dw      EQUALS                  // =
  43+ 7CA4                                                              // if
  44+ 7CA4 1C 64                        dw      ZBRANCH
  45+ 7CA6 08 00                        dw      PBuf_Endif - $
  46+ 7CA8 59 6A                        dw          DROP                //      drop
  47+ 7CAA 33 6D 07 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CAE              PBuf_Endif:                                     // endif
  49+ 7CAE 86 6A 03 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CB2 07 6B
  50+ 7CB4 A5 6E                        dw      SUBTRACT                // -
  51+ 7CB6 47 69                        dw      EXIT                    // ;
  52+ 7CB8
  53+ 7CB8              //  ______________________________________________________________________
  54+ 7CB8              //
  55+ 7CB8              // update       --
  56+ 7CB8              // mark the last used block to be written to disk
  57+ 7CB8                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CB8             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CB8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CB8             >
  57+ 7CB8             >                // dummy db directives used to calculate length of namec
  57+ 7CB8 55 50 44 41 >                db      "UPDATE"
  57+ 7CBC 54 45       >
  57+ 7CBE             >len_NFA         defl    $ - temp_NFA
  57+ 7CBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CB8             >
  57+ 7CB8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CB9 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CBD 54 45       >
  57+ 7CBF             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CBE C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CBF             >
  57+ 7CBF 8C 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CC1             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CC1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CC4             >
  57+ 7CC4             >
  57+ 7CC4             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CC4             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CC4             >
  57+ 7CC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CC4 03 6E 07 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CC8 07 6B
  59+ 7CCA A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CCE F5 68
  60+ 7CD0 03 6E 07 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CD4 12 6B
  61+ 7CD6 47 69                        dw      EXIT                    // ;
  62+ 7CD8
  63+ 7CD8
  64+ 7CD8              //  ______________________________________________________________________
  65+ 7CD8              //
  66+ 7CD8              // empty-buffers --
  67+ 7CD8                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CD8             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CD8             >
  67+ 7CD8             >                // dummy db directives used to calculate length of namec
  67+ 7CD8 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CDC 59 2D 42 55 >
  67+ 7CE0 46 46 45 52 >
  67+ 7CE4 53          >
  67+ 7CE5             >len_NFA         defl    $ - temp_NFA
  67+ 7CE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CD8             >
  67+ 7CD8 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CD9 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CDD 59 2D 42 55 >
  67+ 7CE1 46 46 45 52 >
  67+ 7CE5 53          >
  67+ 7CE6             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CE5 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CE6             >
  67+ 7CE6 B8 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CE8             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CE8 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CEB             >
  67+ 7CEB             >
  67+ 7CEB             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CEB             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CEB             >
  67+ 7CEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CEB 33 6D 07 6B                  dw      FIRST, FETCH            // first @
  69+ 7CEF 3F 6D 07 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7CF3 4B 6A A5 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7CF7 75 73
  71+ 7CF9 47 69                        dw      EXIT                    // ;
  72+ 7CFB
  73+ 7CFB              //  ______________________________________________________________________
  74+ 7CFB              //
  75+ 7CFB              // buffer       n -- a
  76+ 7CFB              // read block n and gives the address to a buffer
  77+ 7CFB              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7CFB              // disk before reading the block n.
  79+ 7CFB
  80+ 7CFB                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7CFB             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7CFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7CFB             >
  80+ 7CFB             >                // dummy db directives used to calculate length of namec
  80+ 7CFB 42 55 46 46 >                db      "BUFFER"
  80+ 7CFF 45 52       >
  80+ 7D01             >len_NFA         defl    $ - temp_NFA
  80+ 7D01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7CFB             >
  80+ 7CFB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7CFC 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D00 45 52       >
  80+ 7D02             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D01 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D02             >
  80+ 7D02 D8 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D04             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D04 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D07             >
  80+ 7D07             >
  80+ 7D07             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D07             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D07             >
  80+ 7D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D07 F8 6D 07 6B                  dw      USE, FETCH              // use @
  82+ 7D0B 86 6A 58 69                  dw      DUP, TO_R               // dup >r
  83+ 7D0F                                                              // begin
  84+ 7D0F              Buffer_Begin:
  85+ 7D0F 93 7C                        dw          PBUF                //      +buf
  86+ 7D11                                                              // until
  87+ 7D11 1C 64                        dw      ZBRANCH
  88+ 7D13 FC FF                        dw      Buffer_Begin - $
  89+ 7D15 F8 6D 12 6B                  dw      USE, STORE              // use !
  90+ 7D19 7C 69 07 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D1D 9E 69
  91+ 7D1F                                                              // if
  92+ 7D1F 1C 64                        dw      ZBRANCH
  93+ 7D21 14 00                        dw      Buffer_Endif - $
  94+ 7D23 7C 69 FD 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D27 7C 69 07 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D2B A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D2F E5 68                        dw          AND_OP              //      and
  98+ 7D31 4B 6C 61 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D35              Buffer_Endif:                                   // endif
 100+ 7D35 7C 69 12 6B                  dw      R_OP, STORE             // r !
 101+ 7D39 7C 69 03 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D3D 12 6B
 102+ 7D3F 6A 69 FD 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D43 47 69                        dw      EXIT                    // ;
 104+ 7D45
 105+ 7D45              //  ______________________________________________________________________
 106+ 7D45              //
 107+ 7D45              // block        n -- a
 108+ 7D45              // Leaves the buffer address that contains the block n.
 109+ 7D45              // If the block is not already present, it will be loaded from disk
 110+ 7D45              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D45              // disk before reading the block n.
 112+ 7D45              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D45
 114+ 7D45                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D45             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D45             >
 114+ 7D45             >                // dummy db directives used to calculate length of namec
 114+ 7D45 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D49 4B          >
 114+ 7D4A             >len_NFA         defl    $ - temp_NFA
 114+ 7D4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D45             >
 114+ 7D45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D46 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D4A 4B          >
 114+ 7D4B             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D4A CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D4B             >
 114+ 7D4B FB 7C       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D4D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D4D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D50             >
 114+ 7D50             >
 114+ 7D50             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D50             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D50             >
 114+ 7D50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D50 8A 6D 07 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D54 BE 69 58 69                  dw      PLUS, TO_R              // + >r
 117+ 7D58 03 6E 07 6B                  dw      PREV, FETCH             // prev @
 118+ 7D5C 86 6A 07 6B                  dw      DUP, FETCH              // dup @
 119+ 7D60 7C 69 A5 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D64 86 6A BE 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D68                                                              // if
 122+ 7D68 1C 64                        dw        ZBRANCH
 123+ 7D6A 32 00                        dw        Block_Endif_1 - $
 124+ 7D6C              Block_Begin:                                    //      begin
 125+ 7D6C 93 7C 84 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D70                                                              //          if
 127+ 7D70 1C 64                        dw          ZBRANCH
 128+ 7D72 12 00                        dw          Block_Endif_2 - $
 129+ 7D74 59 6A                        dw              DROP            //              drop
 130+ 7D76 7C 69 04 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D7A 86 6A                        dw              DUP             //              dup
 132+ 7D7C 7C 69 54 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D80 61 7C                        dw              READ_WRITE      //              r/w
 134+ 7D82 13 6A                        dw              TWO_MINUS       //              2-
 135+ 7D84              Block_Endif_2:                                  //          endif
 136+ 7D84 86 6A 07 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D88 7C 69
 137+ 7D8A A5 6E 86 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D8E BE 69 84 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D92                                                              //      until
 140+ 7D92 1C 64                        dw        ZBRANCH
 141+ 7D94 D8 FF                        dw        Block_Begin - $
 142+ 7D96 86 6A 03 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7D9A 12 6B
 143+ 7D9C              Block_Endif_1:                                  // endif
 144+ 7D9C 6A 69 59 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DA0 FD 69
 145+ 7DA2 47 69                        dw      EXIT                    // ;
 146+ 7DA4
 147+ 7DA4              //  ______________________________________________________________________
 148+ 7DA4              //
 149+ 7DA4              // #buff        -- n
 150+ 7DA4              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DA4                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DA4             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DA4             >
 151+ 7DA4             >                // dummy db directives used to calculate length of namec
 151+ 7DA4 23 42 55 46 >                db      "#BUFF"
 151+ 7DA8 46          >
 151+ 7DA9             >len_NFA         defl    $ - temp_NFA
 151+ 7DA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DA4             >
 151+ 7DA4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DA5 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DA9 46          >
 151+ 7DAA             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DA9 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DAA             >
 151+ 7DAA 45 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DAC             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DAC CD 10 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DAF             >
 151+ 7DAF             >
 151+ 7DAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DAF             >
 151+ 7DAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DAF 07 00       >                dw      7
 152+ 7DB1
 153+ 7DB1              //  ______________________________________________________________________
 154+ 7DB1              //
 155+ 7DB1              // flush        --
 156+ 7DB1                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DB1             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DB1             >
 156+ 7DB1             >                // dummy db directives used to calculate length of namec
 156+ 7DB1 46 4C 55 53 >                db      "FLUSH"
 156+ 7DB5 48          >
 156+ 7DB6             >len_NFA         defl    $ - temp_NFA
 156+ 7DB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DB1             >
 156+ 7DB1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DB2 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DB6 48          >
 156+ 7DB7             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DB6 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DB7             >
 156+ 7DB7 A4 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DB9             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DB9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DBC             >
 156+ 7DBC             >
 156+ 7DBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DBC             >
 156+ 7DBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DBC AC 7D DB 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DC0 4B 6C
 158+ 7DC2              Flush_Do:                                       // do
 159+ 7DC2 70 64                        dw      C_DO
 160+ 7DC4 4B 6C 04 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DC8 59 6A
 161+ 7DCA                                                              // loop
 162+ 7DCA F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DCE 82 7B 07 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DD2 A2 67 59 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DD6 47 69                        dw      EXIT                    // exit
 166+ 7DD8
 167+ 7DD8              //  ______________________________________________________________________
 168+ 7DD8              //
 169+ 7DD8              // f_getline    a m fh -- n
 170+ 7DD8              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DD8              // Address a is left for subsequent processing
 172+ 7DD8              // and n as the actual number of byte read, that is the length of line
 173+ 7DD8                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DD8             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DD8             >
 173+ 7DD8             >                // dummy db directives used to calculate length of namec
 173+ 7DD8 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DDC 54 4C 49 4E >
 173+ 7DE0 45          >
 173+ 7DE1             >len_NFA         defl    $ - temp_NFA
 173+ 7DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DD8             >
 173+ 7DD8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DD9 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DDD 54 4C 49 4E >
 173+ 7DE1 45          >
 173+ 7DE2             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DE1 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DE2             >
 173+ 7DE2 B1 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DE4             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DE4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DE7             >
 173+ 7DE7             >
 173+ 7DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DE7             >
 173+ 7DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DE7 58 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DE9 6D 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DEB 7C 69 B7 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DEF A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DF3 21 70
 178+ 7DF5
 179+ 7DF5 CB 6A 4B 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7DF9 DB 69 7B 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7DFD
 182+ 7DFD 7C 69 D3 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E01 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E05 21 70
 184+ 7E07                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E07 1C 64                        dw      ZBRANCH
 186+ 7E09 3C 00                        dw      FGetline_Else - $
 187+ 7E0B A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E0F 59 65
 188+ 7E11 59 6A 62 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E15 7B 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E17 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E1B 59 65
 191+ 7E1D 59 6A 62 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E21 91 6A F1 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E25 86 6A 33 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E29 12 6B
 194+ 7E2B 86 6A 58 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E2F CB 6A 6A 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E33 4B 6C C9 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E37 6A 69 6F 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E3B A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E3F 21 70
 199+ 7E41                                                              // else
 200+ 7E41 07 64                        dw      BRANCH
 201+ 7E43 0C 00                        dw      FGetline_Endif - $
 202+ 7E45              FGetline_Else:
 203+ 7E45 6A 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E47 CB 6A BF 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E4B 59 6A 4B 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E4F              FGetline_Endif:                                 // endif
 207+ 7E4F 58 69 86 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E53 86 6A
 208+ 7E55 DB 69 7B 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E59 7C 69 50 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E5D DB 6A BE 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E61 4B 6C 7B 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E65 08 6A 12 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E69 7C 69 BE 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E6D E5 69
 214+ 7E6F 7B 6A 7C 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E73 A5 6E
 215+ 7E75 86 73                        dw      BLANK                   // blank
 216+ 7E77 6A 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E79 47 69                        dw      EXIT                    // ;
 218+ 7E7B
 219+ 7E7B              //  ______________________________________________________________________
 220+ 7E7B              //
 221+ 7E7B              // f_include    fh --
 222+ 7E7B              // Given a filehandle includes the source from file
 223+ 7E7B                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E7B             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E7B             >
 223+ 7E7B             >                // dummy db directives used to calculate length of namec
 223+ 7E7B 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E7F 43 4C 55 44 >
 223+ 7E83 45          >
 223+ 7E84             >len_NFA         defl    $ - temp_NFA
 223+ 7E84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E7B             >
 223+ 7E7B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E7C 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E80 43 4C 55 44 >
 223+ 7E84 45          >
 223+ 7E85             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E84 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E85             >
 223+ 7E85 D8 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E87             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E87 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E8A             >
 223+ 7E8A             >
 223+ 7E8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E8A             >
 223+ 7E8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E8A 5F 6D 07 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7E8E 58 69
 225+ 7E90 69 6D 07 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7E94 58 69
 226+ 7E96 28 6E 07 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7E9A 58 69
 227+ 7E9C 7C 69                        dw      R_OP                    // r
 228+ 7E9E                                                              // if
 229+ 7E9E 1C 64                        dw      ZBRANCH
 230+ 7EA0 20 00                        dw      FInclude_Else_1 - $
 231+ 7EA2 7C 69 B7 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EA6 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EAA 21 70
 233+ 7EAC 69 6D 07 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EB0 13 6A                        dw          TWO_MINUS
 235+ 7EB2 33 6E 07 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7EB6 A5 6E                        dw          SUBTRACT
 237+ 7EB8 98 6E C9 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EBC                                                              // else
 239+ 7EBC 07 64                        dw      BRANCH
 240+ 7EBE 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EC0              FInclude_Else_1:
 242+ 7EC0 4B 6C 4B 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EC4                                                              // endif
 244+ 7EC4              FInclude_Endif_1:
 245+ 7EC4 58 69 58 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EC8 28 6E 12 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7ECC              FInclude_Begin:                                 // begin
 248+ 7ECC 54 6C 4D 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7ED0 92 6C
 249+ 7ED2 DB 6A 86 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7ED6 7B 6A DB 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EDA 7B 6A 08 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EDE 28 6E 07 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EE2 E4 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EE4                                                              // while
 255+ 7EE4 1C 64                        dw      ZBRANCH
 256+ 7EE6 14 00                        dw      FInclude_Repeat - $
 257+ 7EE8 54 6C 5F 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EEC 12 6B
 258+ 7EEE 4B 6C 69 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7EF2 12 6B
 259+ 7EF4 7B 77                        dw          INTERPRET           //      interpret
 260+ 7EF6 07 64                        dw      BRANCH
 261+ 7EF8 D4 FF                        dw      FInclude_Begin - $
 262+ 7EFA              FInclude_Repeat:                                // repeat
 263+ 7EFA 28 6E 07 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7EFE 4B 6C 28 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F02 12 6B
 265+ 7F04 90 67                        dw      F_CLOSE                 // f_close
 266+ 7F06 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F0A 21 70
 267+ 7F0C 6A 69 6A 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F10 6A 69
 268+ 7F12 86 6A 28 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F16 12 6B
 269+ 7F18                                                              // if
 270+ 7F18 1C 64                        dw      ZBRANCH
 271+ 7F1A 12 00                        dw      FInclude_Else_2 - $
 272+ 7F1C 28 6E 07 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F20 6F 67                        dw          F_SEEK              //      f_seek
 274+ 7F22 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F26 21 70
 275+ 7F28                                                              // else
 276+ 7F28 07 64                        dw      BRANCH
 277+ 7F2A 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F2C              FInclude_Else_2:
 279+ 7F2C BF 6A                        dw          TWO_DROP            //      2drop
 280+ 7F2E              FInclude_Endif_2:                               // endif
 281+ 7F2E 6A 69 69 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F32 12 6B
 282+ 7F34 6A 69 5F 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F38 12 6B
 283+ 7F3A 47 69                        dw      EXIT                    // ;
 284+ 7F3C
 285+ 7F3C              //  ______________________________________________________________________
 286+ 7F3C              //
 287+ 7F3C              // open<         -- fh
 288+ 7F3C              // Open the following filename and return it file-handle
 289+ 7F3C              // Used in the form OPEN CCCC
 290+ 7F3C                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F3C             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F3C             >
 290+ 7F3C             >                // dummy db directives used to calculate length of namec
 290+ 7F3C 4F 50 45 4E >                db      "OPEN<"
 290+ 7F40 3C          >
 290+ 7F41             >len_NFA         defl    $ - temp_NFA
 290+ 7F41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F3C             >
 290+ 7F3C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F3D 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F41 3C          >
 290+ 7F42             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F41 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F42             >
 290+ 7F42 7B 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F44             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F44 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F47             >
 290+ 7F47             >
 290+ 7F47             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F47             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F47             >
 290+ 7F47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F47 7A 6C                        dw      BL
 292+ 7F49 C1 73 D6 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F4D 4B 6A
 293+ 7F4F BE 69 4B 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F53 7B 6A 12 6B
 294+ 7F57 AD 73 54 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F5B 05 68
 295+ 7F5D A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F61 21 70                        dw      QERROR                  // ?error
 297+ 7F63 47 69                        dw      EXIT                    // ;
 298+ 7F65
 299+ 7F65              //  ______________________________________________________________________
 300+ 7F65              //
 301+ 7F65              // include      -- cccc
 302+ 7F65              // Include the following filename
 303+ 7F65                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F65             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F65             >
 303+ 7F65             >                // dummy db directives used to calculate length of namec
 303+ 7F65 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F69 55 44 45    >
 303+ 7F6C             >len_NFA         defl    $ - temp_NFA
 303+ 7F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F65             >
 303+ 7F65 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F66 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F6A 55 44 45    >
 303+ 7F6D             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F6C C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F6D             >
 303+ 7F6D 3C 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F6F             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F6F CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F72             >
 303+ 7F72             >
 303+ 7F72             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F72             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F72             >
 303+ 7F72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F72 44 7F                        dw      OPEN_FH                 // open
 305+ 7F74 86 6A 87 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F78 90 67 59 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F7C 47 69                        dw      EXIT                    // ;
 308+ 7F7E
 309+ 7F7E              //  ______________________________________________________________________
 310+ 7F7E              //
 311+ 7F7E              // needs
 312+ 7F7E              // check for cccc exists in vocabulary
 313+ 7F7E              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F7E
 315+ 7F7E              // temp filename cccc.f as counted string zero-padded
 316+ 7F7E                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F7E             >
 316+ 7F7E             >                // dummy db directives used to calculate length of namec
 316+ 7F7E 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F82 53 2D 57    >
 316+ 7F85             >len_NFA         defl    $ - temp_NFA
 316+ 7F85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F7E             >
 316+ 7F7E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F7F 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F83 53 2D 57    >
 316+ 7F86             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F85 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F86             >
 316+ 7F86 65 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F88             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F88 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F8B             >
 316+ 7F8B             >
 316+ 7F8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F8B             >
 316+ 7F8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F8B 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FAE              // temp complete path+filename
 319+ 7FAE                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FAE             >
 319+ 7FAE             >                // dummy db directives used to calculate length of namec
 319+ 7FAE 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FB2 53 2D 46 4E >
 319+ 7FB6             >len_NFA         defl    $ - temp_NFA
 319+ 7FB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FAE             >
 319+ 7FAE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FAF 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FB3 53 2D 46 4E >
 319+ 7FB7             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FB6 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FB7             >
 319+ 7FB7 7E 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FB9             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FB9 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FBC             >
 319+ 7FBC             >
 319+ 7FBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FBC             >
 319+ 7FBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FBC 00 00 00...                  ds      40
 321+ 7FE4              // constant path
 322+ 7FE4                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FE4             >
 322+ 7FE4             >                // dummy db directives used to calculate length of namec
 322+ 7FE4 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FE8 53 2D 49 4E >
 322+ 7FEC 43          >
 322+ 7FED             >len_NFA         defl    $ - temp_NFA
 322+ 7FED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FE4             >
 322+ 7FE4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FE5 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FE9 53 2D 49 4E >
 322+ 7FED 43          >
 322+ 7FEE             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FED C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 7FEE             >
 322+ 7FEE AE 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 7FF0             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7FF0 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7FF3             >
 322+ 7FF3             >
 322+ 7FF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7FF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7FF3             >
 322+ 7FF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7FF3 04 69 6E 63                  db      4, "inc/", 0
 323+ 7FF7 2F 00
 324+ 7FF9                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 7FF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 7FF9             >
 324+ 7FF9             >                // dummy db directives used to calculate length of namec
 324+ 7FF9 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 7FFD 53 2D 4C 49 >
 324+ 8001 42          >
 324+ 8002             >len_NFA         defl    $ - temp_NFA
 324+ 8002             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 7FF9             >
 324+ 7FF9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 7FFA 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 7FFE 53 2D 4C 49 >
 324+ 8002 42          >
 324+ 8003             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8002 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8003             >
 324+ 8003 E4 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 8005             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8005 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8008             >
 324+ 8008             >
 324+ 8008             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8008             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8008             >
 324+ 8008             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8008 04 6C 69 62                  db      4, "lib/", 0
 325+ 800C 2F 00
 326+ 800E
 327+ 800E              // Concatenate path at a and filename and include it
 328+ 800E              // No error is issued if filename doesn't exist.
 329+ 800E                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 800E             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 800E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 800E             >
 329+ 800E             >                // dummy db directives used to calculate length of namec
 329+ 800E 4E 45 45 44 >                db      "NEEDS/"
 329+ 8012 53 2F       >
 329+ 8014             >len_NFA         defl    $ - temp_NFA
 329+ 8014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 800E             >
 329+ 800E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 800F 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8013 53 2F       >
 329+ 8015             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8014 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8015             >
 329+ 8015 F9 7F       >                dw      last_NFA            // Link to previous definition Name
 329+ 8017             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8017 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 801A             >
 329+ 801A             >
 329+ 801A             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 801A             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 801A             >
 329+ 801A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 801A D6 71 6D 6A                  dw      COUNT, TUCK             // n a n
 331+ 801E B9 7F 7B 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8022 50 68
 332+ 8024 B9 7F BE 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8028 88 7F DB 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 802C 7B 6A
 334+ 802E A5 63 23 00                  dw      LIT, 35
 335+ 8032 50 68                        dw      CMOVE
 336+ 8034 B9 7F                        dw      NEEDS_FN
 337+ 8036 AD 73 54 6C                  dw      PAD, ONE, F_OPEN
 337+ 803A 05 68
 338+ 803C 84 69                        dw      ZEQUAL
 339+ 803E 1C 64                        dw      ZBRANCH
 340+ 8040 08 00                        dw      Needs_1 - $
 341+ 8042 87 7E                        dw          F_INCLUDE
 342+ 8044 07 64                        dw      BRANCH
 343+ 8046 04 00                        dw      Needs_2 - $
 344+ 8048              Needs_1:
 345+ 8048              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8048              //              dw          LIT, 43, MESSAGE
 347+ 8048 59 6A                        dw          DROP
 348+ 804A              Needs_2:
 349+ 804A 47 69                        dw      EXIT                    // ;
 350+ 804C
 351+ 804C
 352+ 804C                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 804C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 804C             >
 352+ 804C             >                // dummy db directives used to calculate length of namec
 352+ 804C 4E 44 4F 4D >                db      "NDOM"
 352+ 8050             >len_NFA         defl    $ - temp_NFA
 352+ 8050             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 804C             >
 352+ 804C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 804D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8051             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8050 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8051             >
 352+ 8051 0E 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8053             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8053 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8056             >
 352+ 8056             >
 352+ 8056             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8056             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8056             >
 352+ 8056             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8056              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8056 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 805A 7C 5C 3C 3E
 354+ 805E 22
 355+ 805F 00                           db 0
 356+ 8060
 357+ 8060                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8060             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8060             >
 357+ 8060             >                // dummy db directives used to calculate length of namec
 357+ 8060 4E 43 44 4D >                db      "NCDM"
 357+ 8064             >len_NFA         defl    $ - temp_NFA
 357+ 8064             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8060             >
 357+ 8060 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8061 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8065             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8064 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8065             >
 357+ 8065 4C 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8067             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8067 CD 8A 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 806A             >
 357+ 806A             >
 357+ 806A             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 806A             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 806A             >
 357+ 806A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 806A              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 806A 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 806E 24 5F 7B 7D
 359+ 8072 7E
 360+ 8073 00                           db 0
 361+ 8074
 362+ 8074              // Replace illegal character in filename using the map here above
 363+ 8074              // at the moment we need only  "
 364+ 8074                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8074             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8074             >
 364+ 8074             >                // dummy db directives used to calculate length of namec
 364+ 8074 4D 41 50 2D >                db      "MAP-FN"
 364+ 8078 46 4E       >
 364+ 807A             >len_NFA         defl    $ - temp_NFA
 364+ 807A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8074             >
 364+ 8074 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8075 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 8079 46 4E       >
 364+ 807B             >                org     $-1                 // alter last byte of Name just above to set
 364+ 807A CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 807B             >
 364+ 807B 60 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 807D             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 807D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 8080             >
 364+ 8080             >
 364+ 8080             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 8080             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 8080             >
 364+ 8080             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 8080 D6 71 E8 71                  dw      COUNT, BOUNDS
 366+ 8084 70 64                        dw      C_DO
 367+ 8086              Needs_3:
 368+ 8086 67 80 53 80                  dw          NCDM, NDOM, LIT, 10
 368+ 808A A5 63 0A 00
 369+ 808E 78 64 1E 6B                  dw          I, CFETCH
 370+ 8092 91 65                        dw          C_MAP
 371+ 8094 78 64 2A 6B                  dw          I, CSTORE
 372+ 8098              Needs_4:
 373+ 8098 F8 63                        dw      C_LOOP
 374+ 809A EC FF                        dw      Needs_3 - $
 375+ 809C 47 69                        dw      EXIT
 376+ 809E
 377+ 809E
 378+ 809E              // include  "path/cccc.f" if cccc is not defined
 379+ 809E              // filename cccc.f is temporary stored at NEEDS-W
 380+ 809E                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 809E             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 809E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 809E             >
 380+ 809E             >                // dummy db directives used to calculate length of namec
 380+ 809E 4E 45 45 44 >                db      "NEEDS-F"
 380+ 80A2 53 2D 46    >
 380+ 80A5             >len_NFA         defl    $ - temp_NFA
 380+ 80A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 809E             >
 380+ 809E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 809F 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 80A3 53 2D 46    >
 380+ 80A6             >                org     $-1                 // alter last byte of Name just above to set
 380+ 80A5 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 80A6             >
 380+ 80A6 74 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 80A8             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 80A8 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 80AB             >
 380+ 80AB             >
 380+ 80AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 80AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 80AB             >
 380+ 80AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 80AB 7D 75                        dw      LFIND
 382+ 80AD 1C 64                        dw      ZBRANCH
 383+ 80AF 0A 00                        dw      Needs_5 - $
 384+ 80B1
 385+ 80B1 59 6A BF 6A                  dw          DROP, TWO_DROP
 386+ 80B5 07 64                        dw      BRANCH
 387+ 80B7 2C 00                        dw      Needs_6 - $
 388+ 80B9              Needs_5:
 389+ 80B9 88 7F                        dw          NEEDS_W
 390+ 80BB A5 63 23 00                  dw          LIT, 35
 391+ 80BF 75 73                        dw          ERASE                   // a
 392+ 80C1 55 6E 1E 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80C5 DB 69
 393+ 80C7 55 6E 4B 6A                  dw          HERE, OVER              // a n here n
 394+ 80CB 88 7F 7B 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80CF 50 68
 395+ 80D1 88 7F 7D 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80D5 88 7F BE 69                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80D9 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80DD 7B 6A 12 6B                  dw          SWAP, STORE             // a
 399+ 80E1 17 80                        dw          NEEDS_SLASH
 400+ 80E3              Needs_6:
 401+ 80E3 47 69                        dw      EXIT
 402+ 80E5
 403+ 80E5
 404+ 80E5              // check for cccc exists in vocabulary
 405+ 80E5              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 80E5              // search in inc subdirectory
 407+ 80E5                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 80E5             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 80E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 80E5             >
 407+ 80E5             >                // dummy db directives used to calculate length of namec
 407+ 80E5 4E 45 45 44 >                db      "NEEDS"
 407+ 80E9 53          >
 407+ 80EA             >len_NFA         defl    $ - temp_NFA
 407+ 80EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 80E5             >
 407+ 80E5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 80E6 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 80EA 53          >
 407+ 80EB             >                org     $-1                 // alter last byte of Name just above to set
 407+ 80EA D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 80EB             >
 407+ 80EB 9E 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 80ED             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 80ED CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 80F0             >
 407+ 80F0             >
 407+ 80F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 80F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 80F0             >
 407+ 80F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 80F0 69 6D 07 6B                  dw      TO_IN, FETCH
 409+ 80F4 86 6A                        dw      DUP
 410+ 80F6 F0 7F A8 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 80FA 69 6D 12 6B                  dw      TO_IN, STORE
 412+ 80FE 05 80 A8 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 8102 69 6D 12 6B                  dw      TO_IN, STORE
 414+ 8106 7D 75                        dw      LFIND
 415+ 8108 1C 64                        dw      ZBRANCH
 416+ 810A 08 00                        dw      Needs_10 - $
 417+ 810C BF 6A                        dw          TWO_DROP
 418+ 810E 07 64                        dw      BRANCH
 419+ 8110 10 00                        dw      Needs_11 - $
 420+ 8112              Needs_10:
 421+ 8112 88 7F D6 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8116 39 72 57 6F
 422+ 811A A5 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 811E C5 7A
 423+ 8120              Needs_11:
 424+ 8120 47 69                        dw      EXIT
 425+ 8122
 426+ 8122
 427+ 8122              //  ______________________________________________________________________
 428+ 8122              //
 429+ 8122              // load+        n --
 430+ 8122                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 8122             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 8122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8122             >
 430+ 8122             >                // dummy db directives used to calculate length of namec
 430+ 8122 4C 4F 41 44 >                db      "LOAD+"
 430+ 8126 2B          >
 430+ 8127             >len_NFA         defl    $ - temp_NFA
 430+ 8127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8122             >
 430+ 8122 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8123 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8127 2B          >
 430+ 8128             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8127 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8128             >
 430+ 8128 E5 80       >                dw      last_NFA            // Link to previous definition Name
 430+ 812A             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 812A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 812D             >
 430+ 812D             >
 430+ 812D             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 812D             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 812D             >
 430+ 812D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 812D 5F 6D 07 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 8131 58 69
 432+ 8133 69 6D 07 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8137 58 69
 433+ 8139
 434+ 8139 4B 6C 69 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 813D 12 6B
 435+ 813F 9F 6C 24 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8143 5F 6D 12 6B
 436+ 8147 7B 77                        dw      INTERPRET               // interpret
 437+ 8149
 438+ 8149 6A 69 69 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 814D 12 6B
 439+ 814F 6A 69 5F 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8153 12 6B
 440+ 8155 47 69                        dw      EXIT                    // ;
 441+ 8157
 442+ 8157              //  ______________________________________________________________________
 443+ 8157              //
 444+ 8157              // -->          --
 445+ 8157                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8157             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8157             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8157             >
 445+ 8157             >                // dummy db directives used to calculate length of namec
 445+ 8157 2D 2D 3E    >                db      "-->"
 445+ 815A             >len_NFA         defl    $ - temp_NFA
 445+ 815A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8157             >
 445+ 8157 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8158 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 815B             >                org     $-1                 // alter last byte of Name just above to set
 445+ 815A BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 815B             >
 445+ 815B 22 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 815D             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 815D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 8160             >
 445+ 8160             >
 445+ 8160             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 8160             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 8160             >
 445+ 8160             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 8160 9F 70                        dw      QLOADING                // ?loading
 447+ 8162 4B 6C 69 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8166 12 6B
 448+ 8168 9F 6C                        dw      BSCR                    // b/scr
 449+ 816A 5F 6D 07 6B                  dw      BLK, FETCH              // blk @
 450+ 816E 4B 6A                        dw      OVER                    // over
 451+ 8170 54 7A                        dw      MOD                     // mod
 452+ 8172 A5 6E                        dw      SUBTRACT                // -
 453+ 8174 5F 6D E8 6A                  dw      BLK, PLUSSTORE          // +!
 454+ 8178 47 69                        dw      EXIT                    // ;
 455+ 817A
 456+ 817A              //  ______________________________________________________________________
 457+ 817A              //
 458+ 817A              // '            -- xt
 459+ 817A                              Colon_Def TICK, "'", is_normal
 459+ 817A             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 817A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 817A             >
 459+ 817A             >                // dummy db directives used to calculate length of namec
 459+ 817A 27          >                db      "'"
 459+ 817B             >len_NFA         defl    $ - temp_NFA
 459+ 817B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 817A             >
 459+ 817A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 817B 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 817C             >                org     $-1                 // alter last byte of Name just above to set
 459+ 817B A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 817C             >
 459+ 817C 57 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 817E             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 817E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 8181             >
 459+ 8181             >
 459+ 8181             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 8181             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 8181             >
 459+ 8181             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 8181 7D 75                        dw      LFIND                   // -find
 461+ 8183 84 69                        dw      ZEQUAL                  // 0=
 462+ 8185 4B 6C 21 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 8189 59 6A                        dw      DROP                    // drop
 464+ 818B 47 69                        dw      EXIT                    // ;
 465+ 818D
 466+ 818D              //  ______________________________________________________________________
 467+ 818D              //
 468+ 818D              // forget       -- cccc
 469+ 818D                              Colon_Def FORGET, "FORGET", is_normal
 469+ 818D             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 818D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 818D             >
 469+ 818D             >                // dummy db directives used to calculate length of namec
 469+ 818D 46 4F 52 47 >                db      "FORGET"
 469+ 8191 45 54       >
 469+ 8193             >len_NFA         defl    $ - temp_NFA
 469+ 8193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 818D             >
 469+ 818D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 818E 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 8192 45 54       >
 469+ 8194             >                org     $-1                 // alter last byte of Name just above to set
 469+ 8193 D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 8194             >
 469+ 8194 7A 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 8196             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 8196 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 8199             >
 469+ 8199             >
 469+ 8199             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 8199             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 8199             >
 469+ 8199             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 8199 A6 6D 07 6B                  dw      CURRENT, FETCH          // current @
 471+ 819D 98 6D 07 6B                  dw      CONTEXT, FETCH          // context @
 472+ 81A1 A5 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 81A5 17 00 21 70
 473+ 81A9 7E 81 EC 6F                  dw      TICK, TO_BODY           // ' >body
 474+ 81AD 86 6A 0F 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81B1 07 6B
 475+ 81B3 BF 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81B7 15 00 21 70
 476+ 81BB 86 6A C0 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81BF 18 6D 12 6B
 477+ 81C3 A0 6F 07 6B                  dw      LFA, FETCH              // lfa @
 478+ 81C7 98 6D 07 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81CB 12 6B
 479+ 81CD 47 69                        dw      EXIT                    // ;
 480+ 81CF
 481+ 81CF              //  ______________________________________________________________________
 482+ 81CF              //
 483+ 81CF              // marker       -- cccc
 484+ 81CF                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81CF             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81CF             >
 484+ 81CF             >                // dummy db directives used to calculate length of namec
 484+ 81CF 4D 41 52 4B >                db      "MARKER"
 484+ 81D3 45 52       >
 484+ 81D5             >len_NFA         defl    $ - temp_NFA
 484+ 81D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81CF             >
 484+ 81CF C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81D0 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81D4 45 52       >
 484+ 81D6             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81D5 D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81D6             >
 484+ 81D6 8D 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81D8             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81D8 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81DB             >
 484+ 81DB             >
 484+ 81DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81DB             >
 484+ 81DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81DB 9E 71                        dw      CBUILDS
 486+ 81DD 27 6D 07 6B                  dw      VOC_LINK, FETCH, COMMA
 486+ 81E1 73 6E
 487+ 81E3 A6 6D 07 6B                  dw      CURRENT, FETCH, COMMA
 487+ 81E7 73 6E
 488+ 81E9 98 6D 07 6B                  dw      CONTEXT, FETCH, COMMA
 488+ 81ED 73 6E
 489+ 81EF 8F 6F 73 6E                  dw      LATEST, COMMA
 490+ 81F3 8F 6F D5 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 81F7 A0 6F 07 6B
 490+ 81FB 73 6E
 491+ 81FD AF 71                        dw      DOES_TO
 492+ 81FF 86 6A 07 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 8203 27 6D 12 6B
 492+ 8207 FD 69
 493+ 8209 86 6A 07 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 820D A6 6D 12 6B
 493+ 8211 FD 69
 494+ 8213 86 6A 07 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8217 98 6D 12 6B
 494+ 821B FD 69
 495+ 821D 86 6A 07 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 8221 18 6D 12 6B
 495+ 8225 FD 69
 496+ 8227 07 6B A6 6D                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 822B 07 6B 12 6B
 497+ 822F 47 69                        dw      EXIT
 498+ 8231
 499+ 8231              //  ______________________________________________________________________
 500+ 8231              //
 501+ 8231              // spaces       n --
 502+ 8231                              Colon_Def SPACES, "SPACES", is_normal
 502+ 8231             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 8231             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 8231             >
 502+ 8231             >                // dummy db directives used to calculate length of namec
 502+ 8231 53 50 41 43 >                db      "SPACES"
 502+ 8235 45 53       >
 502+ 8237             >len_NFA         defl    $ - temp_NFA
 502+ 8237             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 8231             >
 502+ 8231 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 8232 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 8236 45 53       >
 502+ 8238             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8237 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8238             >
 502+ 8238 CF 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 823A             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 823A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 823D             >
 502+ 823D             >
 502+ 823D             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 823D             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 823D             >
 502+ 823D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 823D 4B 6C 08 6F                  dw      ZERO, MAX
 504+ 8241 4B 6C 45 64                  dw      ZERO, C_Q_DO
 505+ 8245 08 00                        dw      Spaces_Leave - $
 506+ 8247              Spaces_Loop:
 507+ 8247 57 6F                        dw          SPACE
 508+ 8249 F8 63                        dw      C_LOOP
 509+ 824B FC FF                        dw      Spaces_Loop - $
 510+ 824D              Spaces_Leave:
 511+ 824D 47 69                        dw      EXIT                    // ;
 512+ 824F
 513+ 824F              //  ______________________________________________________________________
 514+ 824F              //
 515+ 824F              // <#           --
 516+ 824F                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 824F             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 824F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 824F             >
 516+ 824F             >                // dummy db directives used to calculate length of namec
 516+ 824F 3C 23       >                db      "<#"
 516+ 8251             >len_NFA         defl    $ - temp_NFA
 516+ 8251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 824F             >
 516+ 824F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8250 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 8252             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8251 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 8252             >
 516+ 8252 31 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 8254             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 8254 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 8257             >
 516+ 8257             >
 516+ 8257             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 8257             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 8257             >
 516+ 8257             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 8257 AD 73 EE 6D                  dw      PAD, HLD, STORE
 517+ 825B 12 6B
 518+ 825D 47 69                        dw      EXIT
 519+ 825F
 520+ 825F              //  ______________________________________________________________________
 521+ 825F              //
 522+ 825F              // #>           --
 523+ 825F                              Colon_Def DASH_END, "#>", is_normal
 523+ 825F             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 825F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 825F             >
 523+ 825F             >                // dummy db directives used to calculate length of namec
 523+ 825F 23 3E       >                db      "#>"
 523+ 8261             >len_NFA         defl    $ - temp_NFA
 523+ 8261             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 825F             >
 523+ 825F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8260 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8262             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8261 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8262             >
 523+ 8262 4F 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 8264             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 8264 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 8267             >
 523+ 8267             >
 523+ 8267             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 8267             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 8267             >
 523+ 8267             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 8267 BF 6A                        dw      TWO_DROP
 525+ 8269 EE 6D 07 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 826D AD 73 4B 6A
 525+ 8271 A5 6E
 526+ 8273 47 69                        dw      EXIT
 527+ 8275
 528+ 8275              //  ______________________________________________________________________
 529+ 8275              //
 530+ 8275              // sign         n d -- d
 531+ 8275                              Colon_Def SIGN, "SIGN", is_normal
 531+ 8275             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 8275             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 8275             >
 531+ 8275             >                // dummy db directives used to calculate length of namec
 531+ 8275 53 49 47 4E >                db      "SIGN"
 531+ 8279             >len_NFA         defl    $ - temp_NFA
 531+ 8279             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 8275             >
 531+ 8275 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 8276 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 827A             >                org     $-1                 // alter last byte of Name just above to set
 531+ 8279 CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 827A             >
 531+ 827A 5F 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 827C             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 827C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 827F             >
 531+ 827F             >
 531+ 827F             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 827F             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 827F             >
 531+ 827F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 827F 9E 69                        dw      ZLESS
 533+ 8281 1C 64                        dw      ZBRANCH
 534+ 8283 08 00                        dw      Sign_Endif - $
 535+ 8285 A5 63 2D 00                  dw          LIT, 45, HOLD
 535+ 8289 96 73
 536+ 828B              Sign_Endif:
 537+ 828B 47 69                        dw      EXIT
 538+ 828D
 539+ 828D              //  ______________________________________________________________________
 540+ 828D              //
 541+ 828D              // #           d1 -- d2
 542+ 828D                              Colon_Def DASH, "#", is_normal
 542+ 828D             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 828D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 828D             >
 542+ 828D             >                // dummy db directives used to calculate length of namec
 542+ 828D 23          >                db      "#"
 542+ 828E             >len_NFA         defl    $ - temp_NFA
 542+ 828E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 828D             >
 542+ 828D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 828E 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 828F             >                org     $-1                 // alter last byte of Name just above to set
 542+ 828E A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 828F             >
 542+ 828F 75 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 8291             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 8291 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 8294             >
 542+ 8294             >
 542+ 8294             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 8294             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 8294             >
 542+ 8294             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 8294 BD 6D 07 6B                  dw      BASE, FETCH
 544+ 8298
 545+ 8298 58 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 829A 4B 6C 7C 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 829E AE 68
 547+ 82A0 6A 69 7B 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 82A4 58 69
 548+ 82A6 AE 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 82A8 6A 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 82AA
 551+ 82AA 91 6A                        dw      ROT
 552+ 82AC A5 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82B0 4B 6A CD 6E
 553+ 82B4 1C 64                        dw      ZBRANCH
 554+ 82B6 08 00                        dw      Dash_Endif - $
 555+ 82B8 A5 63 07 00                  dw          LIT, 7, PLUS
 555+ 82BC BE 69
 556+ 82BE              Dash_Endif:
 557+ 82BE
 558+ 82BE A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82C2 BE 69 96 73
 559+ 82C6 47 69                        dw      EXIT
 560+ 82C8
 561+ 82C8              //  ______________________________________________________________________
 562+ 82C8              //
 563+ 82C8              // #s           d1 -- d2
 564+ 82C8                              Colon_Def DASHES, "#S", is_normal
 564+ 82C8             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82C8             >
 564+ 82C8             >                // dummy db directives used to calculate length of namec
 564+ 82C8 23 53       >                db      "#S"
 564+ 82CA             >len_NFA         defl    $ - temp_NFA
 564+ 82CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82C8             >
 564+ 82C8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82C9 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82CB             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82CA D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82CB             >
 564+ 82CB 8D 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82CD             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82CD CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82D0             >
 564+ 82D0             >
 564+ 82D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82D0             >
 564+ 82D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82D0              Dashes_Begin:
 566+ 82D0 91 82 DB 6A                  dw      DASH, TWO_DUP
 567+ 82D4 F5 68 84 69                  dw          OR_OP, ZEQUAL
 568+ 82D8 1C 64                        dw      ZBRANCH
 569+ 82DA F6 FF                        dw      Dashes_Begin - $
 570+ 82DC 47 69                        dw      EXIT
 571+ 82DE
 572+ 82DE              //  ______________________________________________________________________
 573+ 82DE              //
 574+ 82DE              // d.r          d n --
 575+ 82DE                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82DE             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82DE             >
 575+ 82DE             >                // dummy db directives used to calculate length of namec
 575+ 82DE 44 2E 52    >                db      "D.R"
 575+ 82E1             >len_NFA         defl    $ - temp_NFA
 575+ 82E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82DE             >
 575+ 82DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82DF 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82E2             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82E1 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82E2             >
 575+ 82E2 C8 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82E4             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82E4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82E7             >
 575+ 82E7             >
 575+ 82E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82E7             >
 575+ 82E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82E7 58 69                        dw      TO_R
 577+ 82E9 6D 6A 74 79                  dw      TUCK, DABS
 578+ 82ED 54 82 CD 82                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 578+ 82F1 91 6A 7C 82
 578+ 82F5 64 82
 579+ 82F7 6A 69                        dw      R_TO
 580+ 82F9 4B 6A A5 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 82FD 3A 82 39 72
 581+ 8301 47 69                        dw      EXIT
 582+ 8303
 583+ 8303              //  ______________________________________________________________________
 584+ 8303              //
 585+ 8303              // .r           n1 n2 --
 586+ 8303                              Colon_Def DOT_R, ".R", is_normal
 586+ 8303             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 8303             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8303             >
 586+ 8303             >                // dummy db directives used to calculate length of namec
 586+ 8303 2E 52       >                db      ".R"
 586+ 8305             >len_NFA         defl    $ - temp_NFA
 586+ 8305             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8303             >
 586+ 8303 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8304 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 8306             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8305 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 8306             >
 586+ 8306 DE 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 8308             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8308 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 830B             >
 586+ 830B             >
 586+ 830B             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 830B             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 830B             >
 586+ 830B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 830B 58 69                        dw      TO_R
 588+ 830D 98 6E 6A 69                  dw      S_TO_D, R_TO
 589+ 8311 E4 82                        dw      D_DOT_R
 590+ 8313 47 69                        dw      EXIT
 591+ 8315
 592+ 8315              //  ______________________________________________________________________
 593+ 8315              //
 594+ 8315              // d.           d --
 595+ 8315                              Colon_Def D_DOT, "D.", is_normal
 595+ 8315             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8315             >
 595+ 8315             >                // dummy db directives used to calculate length of namec
 595+ 8315 44 2E       >                db      "D."
 595+ 8317             >len_NFA         defl    $ - temp_NFA
 595+ 8317             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8315             >
 595+ 8315 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8316 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8318             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8317 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8318             >
 595+ 8318 03 83       >                dw      last_NFA            // Link to previous definition Name
 595+ 831A             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 831A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 831D             >
 595+ 831D             >
 595+ 831D             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 831D             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 831D             >
 595+ 831D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 831D 4B 6C E4 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8321 57 6F
 597+ 8323 47 69                        dw      EXIT
 598+ 8325
 599+ 8325              //  ______________________________________________________________________
 600+ 8325              //
 601+ 8325              // .            n --
 602+ 8325                              Colon_Def DOT, ".", is_normal
 602+ 8325             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8325             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8325             >
 602+ 8325             >                // dummy db directives used to calculate length of namec
 602+ 8325 2E          >                db      "."
 602+ 8326             >len_NFA         defl    $ - temp_NFA
 602+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8325             >
 602+ 8325 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8326 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8326 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8327             >
 602+ 8327 15 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 8329             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 8329 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 832C             >
 602+ 832C             >
 602+ 832C             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 832C             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 832C             >
 602+ 832C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 832C 98 6E 1A 83                  dw      S_TO_D, D_DOT
 604+ 8330 47 69                        dw      EXIT
 605+ 8332
 606+ 8332              //  ______________________________________________________________________
 607+ 8332              //
 608+ 8332              // ?            n --
 609+ 8332                              Colon_Def QUESTION, "?", is_normal
 609+ 8332             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8332             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8332             >
 609+ 8332             >                // dummy db directives used to calculate length of namec
 609+ 8332 3F          >                db      "?"
 609+ 8333             >len_NFA         defl    $ - temp_NFA
 609+ 8333             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8332             >
 609+ 8332 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8333 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8334             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8333 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8334             >
 609+ 8334 25 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8336             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8336 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8339             >
 609+ 8339             >
 609+ 8339             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8339             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8339             >
 609+ 8339             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8339 07 6B 29 83                  dw      FETCH, DOT
 611+ 833D 47 69                        dw      EXIT
 612+ 833F
 613+ 833F              //  ______________________________________________________________________
 614+ 833F              //
 615+ 833F              // u.           u --
 616+ 833F                              Colon_Def U_DOT, "U.", is_normal
 616+ 833F             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 833F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 833F             >
 616+ 833F             >                // dummy db directives used to calculate length of namec
 616+ 833F 55 2E       >                db      "U."
 616+ 8341             >len_NFA         defl    $ - temp_NFA
 616+ 8341             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 833F             >
 616+ 833F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 8340 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8342             >                org     $-1                 // alter last byte of Name just above to set
 616+ 8341 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8342             >
 616+ 8342 32 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8344             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8344 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8347             >
 616+ 8347             >
 616+ 8347             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8347             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8347             >
 616+ 8347             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8347 4B 6C 1A 83                  dw      ZERO, D_DOT
 618+ 834B 47 69                        dw      EXIT
 619+ 834D
 620+ 834D              //  ______________________________________________________________________
 621+ 834D              //
 622+ 834D              // words        --
 623+ 834D                              Colon_Def WORDS, "WORDS", is_normal
 623+ 834D             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 834D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 834D             >
 623+ 834D             >                // dummy db directives used to calculate length of namec
 623+ 834D 57 4F 52 44 >                db      "WORDS"
 623+ 8351 53          >
 623+ 8352             >len_NFA         defl    $ - temp_NFA
 623+ 8352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 834D             >
 623+ 834D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 834E 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 8352 53          >
 623+ 8353             >                org     $-1                 // alter last byte of Name just above to set
 623+ 8352 D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8353             >
 623+ 8353 3F 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8355             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8355 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8358             >
 623+ 8358             >
 623+ 8358             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8358             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8358             >
 623+ 8358             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8358 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 835C 73 6D 12 6B
 625+ 8360 98 6D 07 6B                  dw      CONTEXT, FETCH, FETCH
 625+ 8364 07 6B
 626+ 8366              Words_Begin:
 627+ 8366 86 6A 1E 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 836A A5 63 1F 00
 627+ 836E E5 68
 628+ 8370 73 6D 07 6B                  dw          OUT, FETCH, PLUS
 628+ 8374 BE 69
 629+ 8376 85 6C CD 6E                  dw          CL, LESS, ZEQUAL
 629+ 837A 84 69
 630+ 837C 1C 64                        dw          ZBRANCH
 631+ 837E 0A 00                        dw          Words_Endif - $
 632+ 8380 FD 65 4B 6C                  dw              CR, ZERO, OUT, STORE
 632+ 8384 73 6D 12 6B
 633+ 8388              Words_Endif:
 634+ 8388 86 6A F1 75                  dw          DUP, ID_DOT
 635+ 838C D5 6F A0 6F                  dw          PFA, LFA, FETCH
 635+ 8390 07 6B
 636+ 8392 86 6A 84 69                  dw          DUP, ZEQUAL
 637+ 8396 11 67 F5 68                  dw          QTERMINAL, OR_OP
 638+ 839A 1C 64                        dw      ZBRANCH
 639+ 839C CA FF                        dw      Words_Begin - $
 640+ 839E 59 6A                        dw      DROP
 641+ 83A0 47 69                        dw      EXIT
 642+ 83A2
 643+ 83A2              //  ______________________________________________________________________
 644+ 83A2              //
 645+ 83A2              // list         n --
 646+ 83A2                              Colon_Def LIST, "LIST", is_normal
 646+ 83A2             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 83A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 83A2             >
 646+ 83A2             >                // dummy db directives used to calculate length of namec
 646+ 83A2 4C 49 53 54 >                db      "LIST"
 646+ 83A6             >len_NFA         defl    $ - temp_NFA
 646+ 83A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 83A2             >
 646+ 83A2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 83A3 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 83A7             >                org     $-1                 // alter last byte of Name just above to set
 646+ 83A6 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 83A7             >
 646+ 83A7 4D 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 83A9             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 83A9 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 83AC             >
 646+ 83AC             >
 646+ 83AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 83AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 83AC             >
 646+ 83AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 83AC 4D 71 FD 65                  dw      DECIMAL, CR
 648+ 83B0 86 6A 7D 6D                  dw      DUP, SCR, STORE
 648+ 83B4 12 6B
 649+ 83B6 11 74                        dw      C_DOT_QUOTE
 650+ 83B8 05 53 63 72                  db      5, "Scr# "
 650+ 83BC 23 20
 651+ 83BE 29 83                        dw      DOT
 652+ 83C0 AC 6C 4B 6C                  dw      LSCR, ZERO, C_DO
 652+ 83C4 70 64
 653+ 83C6              List_Loop:
 654+ 83C6 FD 65                        dw          CR
 655+ 83C8 78 64 66 6C                  dw          I, THREE
 656+ 83CC 08 83 57 6F                  dw          DOT_R, SPACE
 657+ 83D0 78 64 7D 6D                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83D4 07 6B B0 7A
 658+ 83D8 11 67                        dw          QTERMINAL
 659+ 83DA 1C 64                        dw          ZBRANCH
 660+ 83DC 06 00                        dw          List_Endif - $
 661+ 83DE 2F 64                        dw              C_LEAVE
 662+ 83E0 06 00                        dw              List_Leave - $
 663+ 83E2              List_Endif:
 664+ 83E2 F8 63                        dw      C_LOOP
 665+ 83E4 E2 FF                        dw      List_Loop - $
 666+ 83E6              List_Leave:
 667+ 83E6 FD 65                        dw      CR
 668+ 83E8 47 69                        dw      EXIT
 669+ 83EA
 670+ 83EA              //  ______________________________________________________________________
 671+ 83EA              //
 672+ 83EA              // index        n1 n2 --
 673+ 83EA                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83EA             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83EA             >
 673+ 83EA             >                // dummy db directives used to calculate length of namec
 673+ 83EA 49 4E 44 45 >                db      "INDEX"
 673+ 83EE 58          >
 673+ 83EF             >len_NFA         defl    $ - temp_NFA
 673+ 83EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83EA             >
 673+ 83EA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83EB 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83EF 58          >
 673+ 83F0             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83EF D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83F0             >
 673+ 83F0 A2 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 83F2             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 83F2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 83F5             >
 673+ 83F5             >
 673+ 83F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 83F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 83F5             >
 673+ 83F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 83F5 DB 69 7B 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 83F9 70 64
 675+ 83FB              Index_Loop:
 676+ 83FB FD 65 78 64                  dw          CR, I, THREE
 676+ 83FF 66 6C
 677+ 8401 08 83 57 6F                  dw          DOT_R, SPACE
 678+ 8405 4B 6C 78 64                  dw          ZERO, I, DOT_LINE
 678+ 8409 B0 7A
 679+ 840B 11 67                        dw          QTERMINAL
 680+ 840D 1C 64                        dw          ZBRANCH
 681+ 840F 06 00                        dw          Index_Endif - $
 682+ 8411 2F 64                        dw              C_LEAVE
 683+ 8413 06 00                        dw              Index_Leave - $
 684+ 8415              Index_Endif:
 685+ 8415 F8 63                        dw      C_LOOP
 686+ 8417 E4 FF                        dw      Index_Loop - $
 687+ 8419              Index_Leave:
 688+ 8419 FD 65                        dw      CR
 689+ 841B 47 69                        dw      EXIT
 690+ 841D
 691+ 841D              //  ______________________________________________________________________
 692+ 841D              //
 693+ 841D              // cls          --
 694+ 841D                              Colon_Def CLS, "CLS", is_normal
 694+ 841D             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 841D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 841D             >
 694+ 841D             >                // dummy db directives used to calculate length of namec
 694+ 841D 43 4C 53    >                db      "CLS"
 694+ 8420             >len_NFA         defl    $ - temp_NFA
 694+ 8420             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 841D             >
 694+ 841D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 841E 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 8421             >                org     $-1                 // alter last byte of Name just above to set
 694+ 8420 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 8421             >
 694+ 8421 EA 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 8423             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 8423 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 8426             >
 694+ 8426             >
 694+ 8426             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 8426             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 8426             >
 694+ 8426             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 8426 A5 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 842A E8 65
 696+ 842C 47 69                        dw      EXIT
 697+ 842E
 698+ 842E              //  ______________________________________________________________________
 699+ 842E              //
 700+ 842E              // splash       --
 701+ 842E                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 842E             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 842E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 842E             >
 701+ 842E             >                // dummy db directives used to calculate length of namec
 701+ 842E 53 50 4C 41 >                db      "SPLASH"
 701+ 8432 53 48       >
 701+ 8434             >len_NFA         defl    $ - temp_NFA
 701+ 8434             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 842E             >
 701+ 842E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 842F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 8433 53 48       >
 701+ 8435             >                org     $-1                 // alter last byte of Name just above to set
 701+ 8434 C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 8435             >
 701+ 8435 1D 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8437             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8437 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 843A             >
 701+ 843A             >
 701+ 843A             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 843A             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 843A             >
 701+ 843A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 843A 23 84                        dw      CLS
 703+ 843C 11 74                        dw      C_DOT_QUOTE
 704+ 843E 58                           db      88
 705+ 843F 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 705+ 8443 72 74 68 20
 705+ 8447 31 2E 35 32
 705+ 844B 20 4E 65 78
 705+ 844F 74 5A 58 4F
 705+ 8453 53 20 76 65
 705+ 8457 72 73 69 6F
 705+ 845B 6E 0D
 706+ 845D 44 69 72 65                  db      "Direct Threaded - build 20230321", 13  // 31
 706+ 8461 63 74 20 54
 706+ 8465 68 72 65 61
 706+ 8469 64 65 64 20
 706+ 846D 2D 20 62 75
 706+ 8471 69 6C 64 20
 706+ 8475 32 30 32 33
 706+ 8479 30 33 32 31
 706+ 847D 0D
 707+ 847E 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13        // 25
 707+ 8482 2D 32 30 32
 707+ 8486 33 20 4D 61
 707+ 848A 74 74 65 6F
 707+ 848E 20 56 69 74
 707+ 8492 74 75 72 69
 707+ 8496 0D
 708+ 8497 47 69                        dw      EXIT
 709+ 8499
 710+ 8499              //  ______________________________________________________________________
 711+ 8499              //
 712+ 8499              // video        --
 713+ 8499                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 8499             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 8499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 8499             >
 713+ 8499             >                // dummy db directives used to calculate length of namec
 713+ 8499 56 49 44 45 >                db      "VIDEO"
 713+ 849D 4F          >
 713+ 849E             >len_NFA         defl    $ - temp_NFA
 713+ 849E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 8499             >
 713+ 8499 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 849A 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 849E 4F          >
 713+ 849F             >                org     $-1                 // alter last byte of Name just above to set
 713+ 849E CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 849F             >
 713+ 849F 2E 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 84A1             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 84A1 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 84A4             >
 713+ 84A4             >
 713+ 84A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 84A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 84A4             >
 713+ 84A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 84A4 5D 6C 86 6A                  dw      TWO, DUP, DEVICE, STORE
 714+ 84A8 FA 7A 12 6B
 715+ 84AC 4E 67                        dw      SELECT
 716+ 84AE 47 69                        dw      EXIT
 717+ 84B0
 718+ 84B0              //  ______________________________________________________________________
 719+ 84B0              //
 720+ 84B0              // accept-      a n1 -- n2
 721+ 84B0                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 84B0             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 84B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 84B0             >
 721+ 84B0             >                // dummy db directives used to calculate length of namec
 721+ 84B0 41 43 43 45 >                db      "ACCEPT-"
 721+ 84B4 50 54 2D    >
 721+ 84B7             >len_NFA         defl    $ - temp_NFA
 721+ 84B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 84B0             >
 721+ 84B0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 84B1 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 84B5 50 54 2D    >
 721+ 84B8             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84B7 AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84B8             >
 721+ 84B8 99 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84BA             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84BA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84BD             >
 721+ 84BD             >
 721+ 84BD             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84BD             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84BD             >
 721+ 84BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84BD 58 69                        dw      TO_R
 723+ 84BF 4B 6C                        dw      ZERO
 724+ 84C1 7B 6A                        dw      SWAP
 725+ 84C3 86 6A                        dw      DUP
 726+ 84C5 6A 69                        dw      R_TO
 727+ 84C7 BE 69                        dw      PLUS
 728+ 84C9 7B 6A                        dw      SWAP
 729+ 84CB 70 64                        dw      C_DO
 730+ 84CD              AcceptN_Loop:
 731+ 84CD 31 7B                        dw          MMU7_FETCH
 732+ 84CF 2B 67                        dw          INKEY
 733+ 84D1 7B 6A 44 7B                  dw          SWAP, MMU7_STORE
 734+ 84D5 86 6A 84 69                  dw          DUP, ZEQUAL
 735+ 84D9 1C 64                        dw          ZBRANCH
 736+ 84DB 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84DD              //              dw              VIDEO, QUIT
 738+ 84DD 2F 64                        dw              C_LEAVE
 739+ 84DF 3A 00                        dw              AcceptN_Leave - $
 740+ 84E1
 741+ 84E1              AcceptN_Endif_1:
 742+ 84E1 86 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84E5 0D 00 B1 6E
 743+ 84E9 1C 64                        dw          ZBRANCH
 744+ 84EB 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84ED 59 6A 4B 6C                  dw              DROP, ZERO
 746+ 84F1              AcceptN_Endif_2:
 747+ 84F1 86 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 747+ 84F5 0A 00 B1 6E
 748+ 84F9 1C 64                        dw          ZBRANCH
 749+ 84FB 06 00                        dw          AcceptN_Endif_3 - $
 750+ 84FD 59 6A 4B 6C                  dw              DROP, ZERO
 751+ 8501              AcceptN_Endif_3:
 752+ 8501 78 64 2A 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 8505 DB 69
 753+ 8507
 754+ 8507 78 64 1E 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 850B 84 69
 755+ 850D 1C 64                        dw          ZBRANCH
 756+ 850F 06 00                        dw              AcceptN_Endif_4 - $
 757+ 8511 2F 64                        dw                  C_LEAVE     //              leave
 758+ 8513 06 00                        dw                  AcceptN_Leave - $
 759+ 8515              AcceptN_Endif_4:                                 //      endif
 760+ 8515
 761+ 8515 F8 63                        dw      C_LOOP
 762+ 8517 B6 FF                        dw      AcceptN_Loop -$
 763+ 8519              AcceptN_Leave:
 764+ 8519 47 69                        dw      EXIT
 765+ 851B
 766+ 851B              //  ______________________________________________________________________
 767+ 851B              //
 768+ 851B              // load-        n --
 769+ 851B              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 851B              // it accepts text from stream #n to the normal INTERPRET
 771+ 851B              // up to now, text-file must end with QUIT
 772+ 851B                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 851B             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 851B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 851B             >
 772+ 851B             >                // dummy db directives used to calculate length of namec
 772+ 851B 4C 4F 41 44 >                db      "LOAD-"
 772+ 851F 2D          >
 772+ 8520             >len_NFA         defl    $ - temp_NFA
 772+ 8520             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 851B             >
 772+ 851B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 851C 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 8520 2D          >
 772+ 8521             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8520 AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 8521             >
 772+ 8521 B0 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 8523             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 8523 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 8526             >
 772+ 8526             >
 772+ 8526             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 8526             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 8526             >
 772+ 8526             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 8526 28 6E 12 6B                  dw      SOURCE_ID, STORE
 774+ 852A              Load_N_Begin:
 775+ 852A E9 6C 07 6B                  dw          TIB, FETCH
 776+ 852E 86 6A A5 63                  dw          DUP, LIT, 80
 776+ 8532 50 00
 777+ 8534 DB 6A 86 73                  dw          TWO_DUP, BLANK
 778+ 8538 28 6E 07 6B                  dw          SOURCE_ID, FETCH
 779+ 853C 64 79 86 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 8540 FA 7A 12 6B
 780+ 8544 4E 67                        dw          SELECT
 781+ 8546 BA 84                        dw          ACCEPT_N
 782+ 8548 A1 84                        dw          VIDEO
 783+ 854A BF 6A                        dw          TWO_DROP
 784+ 854C 4B 6C 5F 6D                  dw          ZERO, BLK, STORE
 784+ 8550 12 6B
 785+ 8552 4B 6C 69 6D                  dw          ZERO, TO_IN, STORE
 785+ 8556 12 6B
 786+ 8558 7B 77                        dw          INTERPRET
 787+ 855A 11 67                        dw          QTERMINAL
 788+ 855C 1C 64                        dw      ZBRANCH
 789+ 855E CC FF                        dw      Load_N_Begin - $
 790+ 8560 47 69                        dw      EXIT
 791+ 8562
 792+ 8562              //  ______________________________________________________________________
 793+ 8562              //
 794+ 8562              // load         n --
 795+ 8562              // if n is positive, it loads screen #n (as usual)
 796+ 8562              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 8562              // this second way is useful if you want to load any kind of file
 798+ 8562              // provied that it is OPEN# the usual BASIC way.
 799+ 8562                              Colon_Def LOAD, "LOAD", is_normal
 799+ 8562             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 8562             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8562             >
 799+ 8562             >                // dummy db directives used to calculate length of namec
 799+ 8562 4C 4F 41 44 >                db      "LOAD"
 799+ 8566             >len_NFA         defl    $ - temp_NFA
 799+ 8566             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8562             >
 799+ 8562 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 8563 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 8567             >                org     $-1                 // alter last byte of Name just above to set
 799+ 8566 C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 8567             >
 799+ 8567 1B 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8569             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8569 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 856C             >
 799+ 856C             >
 799+ 856C             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 856C             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 856C             >
 799+ 856C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 856C 86 6A 9E 69                  dw      DUP, ZLESS
 801+ 8570 1C 64                        dw      ZBRANCH
 802+ 8572 08 00                        dw      Load_Else - $
 803+ 8574 23 85                        dw          LOAD_N
 804+ 8576 07 64                        dw      BRANCH
 805+ 8578 04 00                        dw      Load_Endif - $
 806+ 857A              Load_Else:
 807+ 857A 2A 81                        dw          LOAD_P
 808+ 857C              Load_Endif:
 809+ 857C 47 69                        dw      EXIT
 810+ 857E
 811+ 857E
 812+ 857E              //  ______________________________________________________________________
 813+ 857E              //
 814+ 857E              // autoexec     --
 815+ 857E              // this word is called the first time the Forth system boot to
 816+ 857E              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 857E                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 857E             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 857E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 857E             >
 817+ 857E             >                // dummy db directives used to calculate length of namec
 817+ 857E 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8582 45 58 45 43 >
 817+ 8586             >len_NFA         defl    $ - temp_NFA
 817+ 8586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 857E             >
 817+ 857E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 857F 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 8583 45 58 45 43 >
 817+ 8587             >                org     $-1                 // alter last byte of Name just above to set
 817+ 8586 C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 8587             >
 817+ 8587 62 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 8589             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 8589 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 858C             >
 817+ 858C             >
 817+ 858C             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 858C             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 858C             >
 817+ 858C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 858C A5 63 0B 00                  dw      LIT, 11
 819+ 8590 A5 63 FA 6B                  dw      LIT, NOOP
 820+ 8594 A5 63 91 78                  dw      LIT, Autoexec_Ptr
 821+ 8598 12 6B                        dw      STORE
 822+ 859A 69 85                        dw      LOAD
 823+ 859C 40 78                        dw      QUIT
 824+ 859E 47 69                        dw      EXIT
 825+ 85A0
 826+ 85A0
 827+ 85A0              //  ______________________________________________________________________
 828+ 85A0              //
 829+ 85A0              // bye     --
 830+ 85A0              //
 831+ 85A0                              Colon_Def BYE, "BYE", is_normal
 831+ 85A0             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 85A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 85A0             >
 831+ 85A0             >                // dummy db directives used to calculate length of namec
 831+ 85A0 42 59 45    >                db      "BYE"
 831+ 85A3             >len_NFA         defl    $ - temp_NFA
 831+ 85A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 85A0             >
 831+ 85A0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 85A1 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 85A4             >                org     $-1                 // alter last byte of Name just above to set
 831+ 85A3 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 85A4             >
 831+ 85A4 7E 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 85A6             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 85A6 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 85A9             >
 831+ 85A9             >
 831+ 85A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 85A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 85A9             >
 831+ 85A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 85A9 B9 7D                        dw      FLUSH
 833+ 85AB E8 7C                        dw      EMPTY_BUFFERS
 834+ 85AD 82 7B 07 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 85B1 90 67 59 6A
 835+ 85B5 4B 6C BB 6C                  dw      ZERO, PLUS_ORIGIN
 836+ 85B9 29 79                        dw      BASIC
 837+ 85BB
 838+ 85BB              //  ______________________________________________________________________
 839+ 85BB              //
 840+ 85BB              // invv     --
 841+ 85BB              //
 842+ 85BB              //              Colon_Def INVV, "INVV", is_normal
 843+ 85BB              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 85BB              //              dw      EXIT
 845+ 85BB
 846+ 85BB              //  ______________________________________________________________________
 847+ 85BB              //
 848+ 85BB              // truv     --
 849+ 85BB              //
 850+ 85BB              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 85BB              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 85BB              //              dw      EXIT
 853+ 85BB
 854+ 85BB              //  ______________________________________________________________________
 855+ 85BB              //
 856+ 85BB              // mark     --
 857+ 85BB              //
 858+ 85BB              //              Colon_Def MARK, "MARK", is_normal
 859+ 85BB              //              dw      INVV, TYPE, TRUV
 860+ 85BB              //              dw      EXIT
 861+ 85BB
 862+ 85BB              //  ______________________________________________________________________
 863+ 85BB              //
 864+ 85BB              // back     --
 865+ 85BB              //
 866+ 85BB                              Colon_Def BACK, "BACK", is_normal
 866+ 85BB             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 85BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 85BB             >
 866+ 85BB             >                // dummy db directives used to calculate length of namec
 866+ 85BB 42 41 43 4B >                db      "BACK"
 866+ 85BF             >len_NFA         defl    $ - temp_NFA
 866+ 85BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 85BB             >
 866+ 85BB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85BC 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85C0             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85BF CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85C0             >
 866+ 85C0 A0 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85C2             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85C2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85C5             >
 866+ 85C5             >
 866+ 85C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85C5             >
 866+ 85C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85C5 55 6E A5 6E                  dw      HERE, SUBTRACT, COMMA
 867+ 85C9 73 6E
 868+ 85CB 47 69                        dw      EXIT
 869+ 85CD
 870+ 85CD              //  ______________________________________________________________________
 871+ 85CD              //
 872+ 85CD              // if          ( -- a 2 ) \ compile-time
 873+ 85CD              // IF ... THEN
 874+ 85CD              // IF ... ELSE ... ENDIF
 875+ 85CD                              Colon_Def IF, "IF", is_immediate
 875+ 85CD             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85CD             >
 875+ 85CD             >                // dummy db directives used to calculate length of namec
 875+ 85CD 49 46       >                db      "IF"
 875+ 85CF             >len_NFA         defl    $ - temp_NFA
 875+ 85CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85CD             >
 875+ 85CD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85CE 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85D0             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85CF C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85D0             >
 875+ 85D0 BB 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85D2             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85D2 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85D5             >
 875+ 85D5             >
 875+ 85D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85D5             >
 875+ 85D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85D5 BA 70 1C 64                  dw      COMPILE, ZBRANCH
 877+ 85D9 55 6E 4B 6C                  dw      HERE, ZERO, COMMA
 877+ 85DD 73 6E
 878+ 85DF 5D 6C                        dw      TWO
 879+ 85E1 47 69                        dw      EXIT
 880+ 85E3
 881+ 85E3              //  ______________________________________________________________________
 882+ 85E3              //
 883+ 85E3              // then        ( a 2 -- ) \ compile-time
 884+ 85E3              //
 885+ 85E3                              Colon_Def THEN, "THEN", is_immediate
 885+ 85E3             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85E3             >
 885+ 85E3             >                // dummy db directives used to calculate length of namec
 885+ 85E3 54 48 45 4E >                db      "THEN"
 885+ 85E7             >len_NFA         defl    $ - temp_NFA
 885+ 85E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85E3             >
 885+ 85E3 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85E4 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85E8             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85E7 CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85E8             >
 885+ 85E8 CD 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85EA             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85EA CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85ED             >
 885+ 85ED             >
 885+ 85ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85ED             >
 885+ 85ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85ED 3C 70                        dw      QCOMP
 887+ 85EF 5D 6C 6D 70                  dw      TWO, QPAIRS
 888+ 85F3 55 6E 4B 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 85F7 A5 6E 7B 6A
 888+ 85FB 12 6B
 889+ 85FD 47 69                        dw      EXIT
 890+ 85FF
 891+ 85FF              //  ______________________________________________________________________
 892+ 85FF              //
 893+ 85FF              // endif       ( a 2 -- ) \ compile-time
 894+ 85FF              //
 895+ 85FF                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 85FF             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 85FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 85FF             >
 895+ 85FF             >                // dummy db directives used to calculate length of namec
 895+ 85FF 45 4E 44 49 >                db      "ENDIF"
 895+ 8603 46          >
 895+ 8604             >len_NFA         defl    $ - temp_NFA
 895+ 8604             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 85FF             >
 895+ 85FF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 8600 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 8604 46          >
 895+ 8605             >                org     $-1                 // alter last byte of Name just above to set
 895+ 8604 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 8605             >
 895+ 8605 E3 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 8607             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 8607 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 860A             >
 895+ 860A             >
 895+ 860A             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 860A             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 860A             >
 895+ 860A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 860A EA 85                        dw      THEN
 897+ 860C 47 69                        dw      EXIT
 898+ 860E
 899+ 860E              //  ______________________________________________________________________
 900+ 860E              //
 901+ 860E              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 860E              //
 903+ 860E                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 860E             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 860E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 860E             >
 903+ 860E             >                // dummy db directives used to calculate length of namec
 903+ 860E 45 4C 53 45 >                db      "ELSE"
 903+ 8612             >len_NFA         defl    $ - temp_NFA
 903+ 8612             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 860E             >
 903+ 860E C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 860F 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 8613             >                org     $-1                 // alter last byte of Name just above to set
 903+ 8612 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 8613             >
 903+ 8613 FF 85       >                dw      last_NFA            // Link to previous definition Name
 903+ 8615             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8615 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8618             >
 903+ 8618             >
 903+ 8618             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8618             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8618             >
 903+ 8618             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8618 3C 70                        dw      QCOMP
 905+ 861A 5D 6C 6D 70                  dw      TWO, QPAIRS
 906+ 861E BA 70 07 64                  dw      COMPILE, BRANCH
 907+ 8622 55 6E 4B 6C                  dw      HERE, ZERO, COMMA
 907+ 8626 73 6E
 908+ 8628 7B 6A 5D 6C                  dw      SWAP, TWO, THEN
 908+ 862C EA 85
 909+ 862E 5D 6C                        dw      TWO
 910+ 8630 47 69                        dw      EXIT
 911+ 8632
 912+ 8632              //  ______________________________________________________________________
 913+ 8632              //
 914+ 8632              // begin        ( -- a 1 ) \ compile-time
 915+ 8632              // BEGIN ... AGAIN
 916+ 8632              // BEGIN ... f UNTIL
 917+ 8632              // BEGIN ... f WHILE ... REPEAT
 918+ 8632                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8632             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8632             >
 918+ 8632             >                // dummy db directives used to calculate length of namec
 918+ 8632 42 45 47 49 >                db      "BEGIN"
 918+ 8636 4E          >
 918+ 8637             >len_NFA         defl    $ - temp_NFA
 918+ 8637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8632             >
 918+ 8632 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8633 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8637 4E          >
 918+ 8638             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8637 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8638             >
 918+ 8638 0E 86       >                dw      last_NFA            // Link to previous definition Name
 918+ 863A             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 863A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 863D             >
 918+ 863D             >
 918+ 863D             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 863D             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 863D             >
 918+ 863D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 863D 3C 70                        dw      QCOMP
 920+ 863F 55 6E                        dw      HERE
 921+ 8641 5D 6C                        dw      TWO
 922+ 8643 47 69                        dw      EXIT
 923+ 8645
 924+ 8645              //  ______________________________________________________________________
 925+ 8645              //
 926+ 8645              // again        ( a 1 -- ) \ compile-time
 927+ 8645                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8645             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8645             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8645             >
 927+ 8645             >                // dummy db directives used to calculate length of namec
 927+ 8645 41 47 41 49 >                db      "AGAIN"
 927+ 8649 4E          >
 927+ 864A             >len_NFA         defl    $ - temp_NFA
 927+ 864A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8645             >
 927+ 8645 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8646 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 864A 4E          >
 927+ 864B             >                org     $-1                 // alter last byte of Name just above to set
 927+ 864A CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 864B             >
 927+ 864B 32 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 864D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 864D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 8650             >
 927+ 8650             >
 927+ 8650             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 8650             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 8650             >
 927+ 8650             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 8650 3C 70                        dw      QCOMP
 929+ 8652 5D 6C 6D 70                  dw      TWO, QPAIRS
 930+ 8656 BA 70 07 64                  dw      COMPILE, BRANCH
 931+ 865A C2 85                        dw      BACK
 932+ 865C 47 69                        dw      EXIT
 933+ 865E
 934+ 865E              //  ______________________________________________________________________
 935+ 865E              //
 936+ 865E              // until        ( a 1 -- ) \ compile-time
 937+ 865E                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 865E             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 865E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 865E             >
 937+ 865E             >                // dummy db directives used to calculate length of namec
 937+ 865E 55 4E 54 49 >                db      "UNTIL"
 937+ 8662 4C          >
 937+ 8663             >len_NFA         defl    $ - temp_NFA
 937+ 8663             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 865E             >
 937+ 865E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 865F 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 8663 4C          >
 937+ 8664             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8663 CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8664             >
 937+ 8664 45 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8666             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8666 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8669             >
 937+ 8669             >
 937+ 8669             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8669             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8669             >
 937+ 8669             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8669 3C 70                        dw      QCOMP
 939+ 866B 5D 6C 6D 70                  dw      TWO, QPAIRS
 940+ 866F BA 70 1C 64                  dw      COMPILE, ZBRANCH
 941+ 8673 C2 85                        dw      BACK
 942+ 8675 47 69                        dw      EXIT
 943+ 8677
 944+ 8677              //  ______________________________________________________________________
 945+ 8677              //
 946+ 8677              // end          ( a 1 -- ) \ compile-time
 947+ 8677                              Colon_Def END, "END", is_immediate
 947+ 8677             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8677             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8677             >
 947+ 8677             >                // dummy db directives used to calculate length of namec
 947+ 8677 45 4E 44    >                db      "END"
 947+ 867A             >len_NFA         defl    $ - temp_NFA
 947+ 867A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8677             >
 947+ 8677 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8678 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 867B             >                org     $-1                 // alter last byte of Name just above to set
 947+ 867A C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 867B             >
 947+ 867B 5E 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 867D             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 867D CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 8680             >
 947+ 8680             >
 947+ 8680             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 8680             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 8680             >
 947+ 8680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 8680 66 86                        dw      UNTIL
 949+ 8682 47 69                        dw      EXIT
 950+ 8684
 951+ 8684              //  ______________________________________________________________________
 952+ 8684              //
 953+ 8684              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 8684                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 8684             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 8684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 8684             >
 954+ 8684             >                // dummy db directives used to calculate length of namec
 954+ 8684 57 48 49 4C >                db      "WHILE"
 954+ 8688 45          >
 954+ 8689             >len_NFA         defl    $ - temp_NFA
 954+ 8689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 8684             >
 954+ 8684 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 8685 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8689 45          >
 954+ 868A             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8689 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 868A             >
 954+ 868A 77 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 868C             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 868C CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 868F             >
 954+ 868F             >
 954+ 868F             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 868F             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 868F             >
 954+ 868F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 868F D2 85                        dw      IF
 956+ 8691              //              dw      TWO_PLUS // ( that is 4 )
 957+ 8691 CB 6A                        dw      TWO_SWAP
 958+ 8693 47 69                        dw      EXIT
 959+ 8695
 960+ 8695              //  ______________________________________________________________________
 961+ 8695              //
 962+ 8695              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 8695                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 8695             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 8695             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 8695             >
 963+ 8695             >                // dummy db directives used to calculate length of namec
 963+ 8695 52 45 50 45 >                db      "REPEAT"
 963+ 8699 41 54       >
 963+ 869B             >len_NFA         defl    $ - temp_NFA
 963+ 869B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 8695             >
 963+ 8695 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 8696 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 869A 41 54       >
 963+ 869C             >                org     $-1                 // alter last byte of Name just above to set
 963+ 869B D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 869C             >
 963+ 869C 84 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 869E             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 869E CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 86A1             >
 963+ 86A1             >
 963+ 86A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 86A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 86A1             >
 963+ 86A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 86A1 4D 86                        dw      AGAIN
 965+ 86A3              //              dw      TWO_MINUS
 966+ 86A3 EA 85                        dw      THEN
 967+ 86A5 47 69                        dw      EXIT
 968+ 86A7
 969+ 86A7              //  ______________________________________________________________________
 970+ 86A7              //
 971+ 86A7              // ?do-
 972+ 86A7              // special version of "BACK" used by ?DO and LOOP
 973+ 86A7                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 86A7             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 86A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 86A7             >
 973+ 86A7             >                // dummy db directives used to calculate length of namec
 973+ 86A7 3F 44 4F 2D >                db      "?DO-"
 973+ 86AB             >len_NFA         defl    $ - temp_NFA
 973+ 86AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 86A7             >
 973+ 86A7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 86A8 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 86AC             >                org     $-1                 // alter last byte of Name just above to set
 973+ 86AB AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 86AC             >
 973+ 86AC 95 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 86AE             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 86AE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 86B1             >
 973+ 86B1             >
 973+ 86B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 86B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 86B1             >
 973+ 86B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 86B1 C2 85                        dw      BACK
 975+ 86B3              CDoBack_Begin:
 976+ 86B3 17 69 DB 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 86B7 07 6B A5 6E
 977+ 86BB 1C 64                        dw      ZBRANCH
 978+ 86BD 0A 00                        dw      CDoBack_While - $
 979+ 86BF EF 69 EA 85                  dw          TWO_PLUS, THEN
 980+ 86C3 07 64                        dw      BRANCH
 981+ 86C5 EE FF                        dw      CDoBack_Begin - $
 982+ 86C7              CDoBack_While:
 983+ 86C7 81 70 DB 6D                  dw      QCSP, CSP, STORE
 983+ 86CB 12 6B
 984+ 86CD 47 69                        dw      EXIT
 985+ 86CF
 986+ 86CF              //  ______________________________________________________________________
 987+ 86CF              //
 988+ 86CF              // do
 989+ 86CF              // DO  ... LOOP
 990+ 86CF              // DO  ... n +LOOP
 991+ 86CF              // ?DO ... LOOP
 992+ 86CF              // ?DO ... n +LOOP
 993+ 86CF                              Colon_Def DO, "DO", is_immediate
 993+ 86CF             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86CF             >
 993+ 86CF             >                // dummy db directives used to calculate length of namec
 993+ 86CF 44 4F       >                db      "DO"
 993+ 86D1             >len_NFA         defl    $ - temp_NFA
 993+ 86D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86CF             >
 993+ 86CF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86D0 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86D2             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86D1 CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86D2             >
 993+ 86D2 A7 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86D4             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86D4 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86D7             >
 993+ 86D7             >
 993+ 86D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86D7             >
 993+ 86D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86D7 BA 70 70 64                  dw      COMPILE, C_DO
 995+ 86DB DB 6D 07 6B                  dw      CSP, FETCH, STORE_CSP
 995+ 86DF 0D 70
 996+ 86E1 55 6E 66 6C                  dw      HERE, THREE
 997+ 86E5 47 69                        dw      EXIT
 998+ 86E7
 999+ 86E7              //  ______________________________________________________________________
1000+ 86E7              //
1001+ 86E7              // loop
1002+ 86E7                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86E7             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86E7             >
1002+ 86E7             >                // dummy db directives used to calculate length of namec
1002+ 86E7 4C 4F 4F 50 >                db      "LOOP"
1002+ 86EB             >len_NFA         defl    $ - temp_NFA
1002+ 86EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86E7             >
1002+ 86E7 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86E8 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86EC             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86EB D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86EC             >
1002+ 86EC CF 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86EE             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86EE CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 86F1             >
1002+ 86F1             >
1002+ 86F1             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 86F1             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 86F1             >
1002+ 86F1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 86F1 66 6C 6D 70                  dw      THREE, QPAIRS
1004+ 86F5 BA 70 F8 63                  dw      COMPILE, C_LOOP
1005+ 86F9 AE 86                        dw      C_DO_BACK
1006+ 86FB 47 69                        dw      EXIT
1007+ 86FD
1008+ 86FD              //  ______________________________________________________________________
1009+ 86FD              //
1010+ 86FD              // +loop
1011+ 86FD                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 86FD             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 86FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 86FD             >
1011+ 86FD             >                // dummy db directives used to calculate length of namec
1011+ 86FD 2B 4C 4F 4F >                db      "+LOOP"
1011+ 8701 50          >
1011+ 8702             >len_NFA         defl    $ - temp_NFA
1011+ 8702             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 86FD             >
1011+ 86FD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 86FE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 8702 50          >
1011+ 8703             >                org     $-1                 // alter last byte of Name just above to set
1011+ 8702 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 8703             >
1011+ 8703 E7 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 8705             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 8705 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 8708             >
1011+ 8708             >
1011+ 8708             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 8708             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 8708             >
1011+ 8708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 8708 66 6C 6D 70                  dw      THREE, QPAIRS
1013+ 870C BA 70 C3 63                  dw      COMPILE, C_PLOOP
1014+ 8710 AE 86                        dw      C_DO_BACK
1015+ 8712 47 69                        dw      EXIT
1016+ 8714
1017+ 8714              //  ______________________________________________________________________
1018+ 8714              //
1019+ 8714              // ?do
1020+ 8714                              Colon_Def QDO, "?DO", is_immediate
1020+ 8714             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 8714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 8714             >
1020+ 8714             >                // dummy db directives used to calculate length of namec
1020+ 8714 3F 44 4F    >                db      "?DO"
1020+ 8717             >len_NFA         defl    $ - temp_NFA
1020+ 8717             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 8714             >
1020+ 8714 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 8715 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 8718             >                org     $-1                 // alter last byte of Name just above to set
1020+ 8717 CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 8718             >
1020+ 8718 FD 86       >                dw      last_NFA            // Link to previous definition Name
1020+ 871A             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 871A CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 871D             >
1020+ 871D             >
1020+ 871D             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 871D             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 871D             >
1020+ 871D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 871D BA 70 45 64                  dw      COMPILE, C_Q_DO
1022+ 8721 DB 6D 07 6B                  dw      CSP, FETCH, STORE_CSP
1022+ 8725 0D 70
1023+ 8727 55 6E 4B 6C                  dw      HERE, ZERO, COMMA, ZERO
1023+ 872B 73 6E 4B 6C
1024+ 872F 55 6E 66 6C                  dw      HERE, THREE
1025+ 8733 47 69                        dw      EXIT
1026+ 8735
1027+ 8735              Latest_Definition:
1028+ 8735              //  ______________________________________________________________________
1029+ 8735              //
1030+ 8735              // \
1031+ 8735                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 8735             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 8735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 8735             >
1031+ 8735             >                // dummy db directives used to calculate length of namec
1031+ 8735 5C          >                db      "\\"
1031+ 8736             >len_NFA         defl    $ - temp_NFA
1031+ 8736             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 8735             >
1031+ 8735 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 8736 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 8737             >                org     $-1                 // alter last byte of Name just above to set
1031+ 8736 DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 8737             >
1031+ 8737 14 87       >                dw      last_NFA            // Link to previous definition Name
1031+ 8739             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 8739 CD D3 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 873C             >
1031+ 873C             >
1031+ 873C             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 873C             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 873C             >
1031+ 873C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 873C 5F 6D 07 6B                  dw      BLK, FETCH
1033+ 8740 1C 64                        dw      ZBRANCH
1034+ 8742 30 00                        dw      Backslash_Else_1 - $
1035+ 8744 5F 6D 07 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 8748 54 6C E2 6E
1036+ 874C 1C 64                        dw          ZBRANCH
1037+ 874E 18 00                        dw          Backslash_Else_2 - $
1038+ 8750 69 6D 07 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8754 85 6C 54 7A
1038+ 8758 85 6C
1039+ 875A 7B 6A A5 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 875E 69 6D E8 6A
1040+ 8762 07 64                        dw          BRANCH
1041+ 8764 0A 00                        dw          Backslash_Endif_2 - $
1042+ 8766              Backslash_Else_2:
1043+ 8766 92 6C 08 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 876A 69 6D 12 6B
1044+ 876E              Backslash_Endif_2:
1045+ 876E 07 64                        dw      BRANCH
1046+ 8770 10 00                        dw      Backslash_Endif_1 - $
1047+ 8772              Backslash_Else_1:
1048+ 8772 4B 6C E9 6C                  dw          ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, STORE
1048+ 8776 07 6B 69 6D
1048+ 877A 07 6B BE 69
1048+ 877E 12 6B
1049+ 8780              Backslash_Endif_1:
1050+ 8780 47 69                        dw      EXIT
1051+ 8782
1052+ 8782              Fence_Word:
1053+ 8782              //  ______________________________________________________________________
1054+ 8782              //
1055+ 8782
1056+ 8782 00           Here_Dictionary db      0
1057+ 8783
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  8783
 116  8783              // now we save the compiled file so we can either run it or debug it
 117  8783                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  8783                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  8783                              SAVENEX CFG  0
 120  8783                              SAVENEX BANK 2, 0
 121  8783                              SAVENEX AUTO
 122  8783                              SAVENEX CLOSE
 123  8783
 124  8783              //              PAGE 7 ;set 7 page to current slot
 125  8783              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  8783              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  8783
 128  8783                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  8783
 130  8783                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  8783
 132  8783                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
