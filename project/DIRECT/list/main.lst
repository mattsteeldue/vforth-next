# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20211006
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2021
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     0
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000 ~            ORIGIN          equ     $62E6                   // for binary comparison
  68  0000                              endif
  69  0000              //  ______________________________________________________________________
  70  0000
  71  0000                              if (  0 == DEBUGGING )
  72  0000              ORIGIN          equ     $6366                   // binary
  73  0000                              endif
  74  0000              //  ______________________________________________________________________
  75  0000
  76  0000                              if (  1 == DEBUGGING )
  77  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  78  0000                              endif
  79  0000              //  ______________________________________________________________________
  80  0000
  81  0000                              DEVICE  ZXSPECTRUMNEXT
  82  0000
  83  0000                              ORG     ORIGIN
  84  6366
  85  6366                              if ( -1 == DEBUGGING )
  86  6366 ~                            ds 128                            // for binary comparison
  87  6366                              endif
  88  6366
  89  6366              //  ______________________________________________________________________
  90  6366              //
  91  6366              //  Naming convention for Label vs Forth correspondance
  92  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  93  6366              //    - Leading "0" is converted into "Z_"
  94  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  95  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  96  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  97  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  98  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
  99  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 100  6366              //    - Equal sign "=" is converted in EQUAL
 101  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 102  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 103  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 104  6366              //    - Exclamation mark "!" is converted in STORE
 105  6366              //    - At-Sign "@" is converted in FETCH
 106  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 107  6366
 108  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 109  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 EA 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 EA 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 47 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 8E 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 8E 87        DP_origin       dw      Fence_Word
  39+ 6386 F2 77        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 E1                           pop     hl
 129+ 63B9 E9                           jp      (hl)
 130+ 63BA              //              jr      Exec_Ptr
 131+ 63BA
 132+ 63BA
 133+ 63BA              //  ______________________________________________________________________
 134+ 63BA              //
 135+ 63BA              // branch       --
 136+ 63BA              // unconditional branch in colon definition using the following cell as an offset from current IP value
 137+ 63BA              // compiled by ELSE, AGAIN and some other immediate words
 138+ 63BA
 139+ 63BA                              New_Def BRANCH, "BRANCH", is_code, is_normal
 139+ 63BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63BA             >
 139+ 63BA             >                // dummy db directives used to calculate length of namec
 139+ 63BA 42 52 41 4E >                db      "BRANCH"
 139+ 63BE 43 48       >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63BA             >
 139+ 63BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BB 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 139+ 63BF 43 48       >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 C8          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3              Branch_Ptr:
 141+ 63C3 60                           ld      h, b
 142+ 63C4 69                           ld      l, c
 143+ 63C5 5E                           ld      e, (hl)
 144+ 63C6 23                           inc     hl
 145+ 63C7 56                           ld      d, (hl)
 146+ 63C8 2B                           dec     hl                  // offset is calculated from current IP
 147+ 63C9 19                           add     hl, de
 148+ 63CA 4D                           ld      c, l
 149+ 63CB 44                           ld      b, h
 150+ 63CC                              next
 150+ 63CC DD E9       >                jp      (ix)
 151+ 63CE
 152+ 63CE
 153+ 63CE              //  ______________________________________________________________________
 154+ 63CE              //
 155+ 63CE              // 0branch      f --
 156+ 63CE              // conditional branch if the top-of-stack is ZERO or FALSE.
 157+ 63CE              // compiled by IF, UNTIL and some other immediate words
 158+ 63CE
 159+ 63CE                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 159+ 63CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 63CE             >
 159+ 63CE             >                // dummy db directives used to calculate length of namec
 159+ 63CE 30 42 52 41 >                db      "0BRANCH"
 159+ 63D2 4E 43 48    >
 159+ 63D5             >len_NFA         defl    $ - temp_NFA
 159+ 63D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 63CE             >
 159+ 63CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 63CF 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 159+ 63D3 4E 43 48    >
 159+ 63D6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 63D5 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 63D6             >
 159+ 63D6 BA 63       >                dw      last_NFA            // Link to previous definition Name
 159+ 63D8             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 63D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159+ 63D8 ~           >
 159+ 63D8 ~           >
 159+ 63D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 63D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 63D8             >
 159+ 63D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 63D8              ZBranch_Ptr:
 161+ 63D8 E1                           pop     hl
 162+ 63D9 7D                           ld      a, l
 163+ 63DA B4                           or      h
 164+ 63DB CA C3 63                     jp      z, Branch_Ptr
 165+ 63DE 03                           inc     bc                  // if not branch, skip offset cell.
 166+ 63DF 03                           inc     bc
 167+ 63E0                              next
 167+ 63E0 DD E9       >                jp      (ix)
 168+ 63E2
 169+ 63E2              //  ______________________________________________________________________
 170+ 63E2              //
 171+ 63E2              // (loop)       --
 172+ 63E2              // compiled by +LOOP. it uses the top two values of return-stack to
 173+ 63E2              // keep track of index and limit
 174+ 63E2                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 174+ 63E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 63E2             >
 174+ 63E2             >                // dummy db directives used to calculate length of namec
 174+ 63E2 28 4C 4F 4F >                db      "(LOOP)"
 174+ 63E6 50 29       >
 174+ 63E8             >len_NFA         defl    $ - temp_NFA
 174+ 63E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 63E2             >
 174+ 63E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 63E3 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 174+ 63E7 50 29       >
 174+ 63E9             >                org     $-1                 // alter last byte of Name just above to set
 174+ 63E8 A9          >                db      {b $} | END_BIT     // msb as name end
 174+ 63E9             >
 174+ 63E9 CE 63       >                dw      last_NFA            // Link to previous definition Name
 174+ 63EB             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 63EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 174+ 63EB ~           >
 174+ 63EB ~           >
 174+ 63EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 63EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 63EB             >
 174+ 63EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 63EB
 176+ 63EB
 177+ 63EB 11 01 00                     ld      de, 1               // bc contains increment of 1
 178+ 63EE
 179+ 63EE              Loop_Ptr:
 180+ 63EE                              ldhlrp                      // ld hl,rp macro 30h +Origin
 180+ 63EE 2A 96 63    >                ld      hl,(RP_Pointer)
 181+ 63F1
 182+ 63F1 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 183+ 63F2 83                           add     e
 184+ 63F3 77                           ld      (hl), a
 185+ 63F4 5F                           ld      e, a
 186+ 63F5 23                           inc     hl
 187+ 63F6 7E                           ld      a, (hl)
 188+ 63F7 8A                           adc     d
 189+ 63F8 77                           ld      (hl),a
 190+ 63F9 23                           inc     hl
 191+ 63FA CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 192+ 63FC 57                           ld      d, a
 193+ 63FD
 194+ 63FD 20 07                        jr      nz, Loop_NegativeIncrement
 195+ 63FF 7B                               ld      a, e
 196+ 6400 96                               sub     (hl)
 197+ 6401 7A                               ld      a, d
 198+ 6402 23                               inc     hl
 199+ 6403 9E                               sbc     (hl)
 200+ 6404 18 05                        jr      Loop_Endif              // else
 201+ 6406
 202+ 6406              Loop_NegativeIncrement:
 203+ 6406 7E                               ld      a, (hl)
 204+ 6407 93                               sub     e
 205+ 6408 23                               inc     hl
 206+ 6409 7E                               ld      a, (hl)
 207+ 640A 9A                               sbc     d
 208+ 640B
 209+ 640B              Loop_Endif:
 210+ 640B FA C3 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 211+ 640E 23                           inc     hl
 212+ 640F                              ldrphl                      // ld rp,hl macro 30h +Origin
 212+ 640F 22 96 63    >                ld      (RP_Pointer),hl
 213+ 6412
 214+ 6412 03                           inc     bc                  // skip branch-style offset
 215+ 6413 03                           inc     bc
 216+ 6414                              next
 216+ 6414 DD E9       >                jp      (ix)
 217+ 6416
 218+ 6416              //  ______________________________________________________________________
 219+ 6416              //
 220+ 6416              // (+loop)       n --
 221+ 6416              // same as (LOOP) but index is incremented by n (instead of just 1)
 222+ 6416              // compiled by +LOOP.
 223+ 6416                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 223+ 6416             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 6416             >
 223+ 6416             >                // dummy db directives used to calculate length of namec
 223+ 6416 28 2B 4C 4F >                db      "(+LOOP)"
 223+ 641A 4F 50 29    >
 223+ 641D             >len_NFA         defl    $ - temp_NFA
 223+ 641D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 6416             >
 223+ 6416 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 6417 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 223+ 641B 4F 50 29    >
 223+ 641E             >                org     $-1                 // alter last byte of Name just above to set
 223+ 641D A9          >                db      {b $} | END_BIT     // msb as name end
 223+ 641E             >
 223+ 641E E2 63       >                dw      last_NFA            // Link to previous definition Name
 223+ 6420             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 6420 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 6420 ~           >
 223+ 6420 ~           >
 223+ 6420             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 6420             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 6420             >
 223+ 6420             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 6420 D1                           pop     de
 225+ 6421 C3 EE 63                     jp      Loop_Ptr
 226+ 6424
 227+ 6424              //  ______________________________________________________________________
 228+ 6424              //
 229+ 6424              // (?do)        lim ind --
 230+ 6424              // compiled by ?DO to make a loop checking for lim == ind first
 231+ 6424              // at run-time (?DO) must be followed by a BRANCH offset
 232+ 6424              // used to skip the loop if lim == ind
 233+ 6424                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 233+ 6424             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6424             >
 233+ 6424             >                // dummy db directives used to calculate length of namec
 233+ 6424 28 3F 44 4F >                db      "(?DO)"
 233+ 6428 29          >
 233+ 6429             >len_NFA         defl    $ - temp_NFA
 233+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6424             >
 233+ 6424 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6425 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 233+ 6429 29          >
 233+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 233+ 6429 A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 642A             >
 233+ 642A 16 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 642C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 642C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 642C ~           >
 233+ 642C ~           >
 233+ 642C             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 642C             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 642C             >
 233+ 642C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 642C D1                           pop     de                  // de has the index
 235+ 642D E1                           pop     hl                  // hl has the limit
 236+ 642E E5                           push    hl
 237+ 642F D5                           push    de
 238+ 6430 A7                           and     a                   // reset carry flag
 239+ 6431 ED 52                        sbc     hl, de              // compute limit - index
 240+ 6433 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 241+ 6435 D1                               pop     de
 242+ 6436 E1                               pop     hl
 243+ 6437
 244+ 6437 C3 C3 63                         jp      Branch_Ptr          // perform branch consuming following cell
 245+ 643A              Do_Ptr:
 246+ 643A                              ldhlrp                      // prepare RP
 246+ 643A 2A 96 63    >                ld      hl,(RP_Pointer)
 247+ 643D 2B                           dec     hl
 248+ 643E 2B                           dec     hl
 249+ 643F 2B                           dec     hl
 250+ 6440 2B                           dec     hl
 251+ 6441                              ldrphl
 251+ 6441 22 96 63    >                ld      (RP_Pointer),hl
 252+ 6444
 253+ 6444                              // store index as top RP
 254+ 6444 D1                           pop     de
 255+ 6445 73                           ld      (hl), e
 256+ 6446 23                           inc     hl
 257+ 6447 72                           ld      (hl), d
 258+ 6448 23                           inc     hl
 259+ 6449                              // stores lim as second from top RP
 260+ 6449 D1                           pop     de
 261+ 644A 73                           ld      (hl), e
 262+ 644B 23                           inc     hl
 263+ 644C 72                           ld      (hl), d
 264+ 644D
 265+ 644D                              // skip branch-style offseet
 266+ 644D 03                           inc     bc
 267+ 644E 03                           inc     bc
 268+ 644F                              next
 268+ 644F DD E9       >                jp      (ix)
 269+ 6451
 270+ 6451              //  ______________________________________________________________________
 271+ 6451              //
 272+ 6451              // (do)        lim ind --
 273+ 6451              // compiled by DO to make a loop checking for lim == ind first
 274+ 6451              // this is a simpler version of (?DO)
 275+ 6451                              New_Def C_DO, "(DO)", is_code, is_normal
 275+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ 6451             >
 275+ 6451             >                // dummy db directives used to calculate length of namec
 275+ 6451 28 44 4F 29 >                db      "(DO)"
 275+ 6455             >len_NFA         defl    $ - temp_NFA
 275+ 6455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ 6451             >
 275+ 6451 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ 6452 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 275+ 6456             >                org     $-1                 // alter last byte of Name just above to set
 275+ 6455 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ 6456             >
 275+ 6456 24 64       >                dw      last_NFA            // Link to previous definition Name
 275+ 6458             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6458 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6458 ~           >
 275+ 6458 ~           >
 275+ 6458             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6458             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6458             >
 275+ 6458             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6458 0B                           dec     bc                  // prepare IP beforehand
 277+ 6459 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 278+ 645A C3 3A 64                     jp      Do_Ptr
 279+ 645D
 280+ 645D              //  ______________________________________________________________________
 281+ 645D              //
 282+ 645D              // i            -- n
 283+ 645D              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 284+ 645D              // the current value of the index-loop
 285+ 645D                              New_Def I, "I", is_code, is_normal
 285+ 645D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 285+ 645D             >
 285+ 645D             >                // dummy db directives used to calculate length of namec
 285+ 645D 49          >                db      "I"
 285+ 645E             >len_NFA         defl    $ - temp_NFA
 285+ 645E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 285+ 645D             >
 285+ 645D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 285+ 645E 49          >                db      "I"               // name string in 7-bit ascii, but
 285+ 645F             >                org     $-1                 // alter last byte of Name just above to set
 285+ 645E C9          >                db      {b $} | END_BIT     // msb as name end
 285+ 645F             >
 285+ 645F 51 64       >                dw      last_NFA            // Link to previous definition Name
 285+ 6461             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 285+ 6461 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 285+ 6461 ~           >
 285+ 6461 ~           >
 285+ 6461             >                endif           ; ok        // for other definitions it "points" the correct handler
 285+ 6461             >                // Use of "; ok" to suppress "warning[fwdref]"
 285+ 6461             >
 285+ 6461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 286+ 6461              I_Ptr:
 287+ 6461
 288+ 6461                              ldhlrp
 288+ 6461 2A 96 63    >                ld      hl,(RP_Pointer)
 289+ 6464 5E                           ld      e, (hl)
 290+ 6465 23                           inc     hl
 291+ 6466 56                           ld      d, (hl)
 292+ 6467 D5                           push    de
 293+ 6468                              next
 293+ 6468 DD E9       >                jp      (ix)
 294+ 646A
 295+ 646A              //  ______________________________________________________________________
 296+ 646A              //
 297+ 646A              // digit        c n -- u 1  |  0
 298+ 646A              // convert a character c using base n
 299+ 646A              // returns a unsigned number and a true flag
 300+ 646A              // or just a false flag if the conversion fails
 301+ 646A                              New_Def DIGIT, "DIGIT", is_code, is_normal
 301+ 646A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 646A             >
 301+ 646A             >                // dummy db directives used to calculate length of namec
 301+ 646A 44 49 47 49 >                db      "DIGIT"
 301+ 646E 54          >
 301+ 646F             >len_NFA         defl    $ - temp_NFA
 301+ 646F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 646A             >
 301+ 646A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 646B 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 301+ 646F 54          >
 301+ 6470             >                org     $-1                 // alter last byte of Name just above to set
 301+ 646F D4          >                db      {b $} | END_BIT     // msb as name end
 301+ 6470             >
 301+ 6470 5D 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6472             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6472 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 301+ 6472 ~           >
 301+ 6472 ~           >
 301+ 6472             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6472             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6472             >
 301+ 6472             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6472 E1                           pop     hl                  // l has the base
 303+ 6473 D1                           pop     de                  // e has the digit
 304+ 6474 7B                           ld      a, e
 305+ 6475 FE 60                        cp      $60                 // check if lowercase
 306+ 6477 38 02                        jr      c, Digit_Uppercase
 307+ 6479 D6 20                            sub     $20                 // quick'n'dirty uppercase
 308+ 647B              Digit_Uppercase:
 309+ 647B D6 30                        sub     $30
 310+ 647D 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 311+ 647F FE 0A                            cp      $0A
 312+ 6481 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 313+ 6483 D6 07                                sub     7                   // try hex and subtract 7
 314+ 6485 FE 0A                                cp      $0A
 315+ 6487 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 316+ 6489
 317+ 6489              Digit_Decimal:
 318+ 6489                              // compare digit
 319+ 6489 BD                           cp      l                   // compare with base
 320+ 648A
 321+ 648A 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 322+ 648C 5F                               ld      e, a                // digit is returned as second from TOS
 323+ 648D 21 01 00                         ld      hl, 1
 324+ 6490
 325+ 6490                                  psh2
 325+ 6490 D5          >                push    de
 325+ 6491 E5          >                push    hl
 325+ 6492 DD E9       >                jp      (ix)
 326+ 6494              Digit_Fail:
 327+ 6494 21 00 00                     ld      hl, 0
 328+ 6497                              psh1
 328+ 6497 E5          >                push    hl
 328+ 6498 DD E9       >                jp      (ix)
 329+ 649A
 330+ 649A              //  ______________________________________________________________________
 331+ 649A              //
 332+ 649A              //  parametric uppercase routine
 333+ 649A              //  depending on the following op-code the routine can be by-passed
 334+ 649A              //  changing the behaviour of some callers.
 335+ 649A              //  If it is "ret" then the system is Case-Sensitive
 336+ 649A              //  If it is "Nop" then the system is Case-Insensitive
 337+ 649A              //  Only A register is touched.
 338+ 649A 00           Case_Sensitive: nop                         // Default is case-insensitive.
 339+ 649B              Case_Upper:
 340+ 649B FE 61                        cp      LC_A_CHAR           // lower-case "a"
 341+ 649D D8                           ret     c                   // no change if A < "a"
 342+ 649E FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 343+ 64A0 D0                           ret     nc                  // no change if A > "z"
 344+ 64A1 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 345+ 64A3 C9                           ret
 346+ 64A4
 347+ 64A4              //  ______________________________________________________________________
 348+ 64A4              //
 349+ 64A4              //  caseon      --
 350+ 64A4              // set system case-sensitivity on
 351+ 64A4              // it patches a RET/NOP at the beginning of the uppercase-routine
 352+ 64A4                              New_Def CASEON, "CASEON", is_code, is_normal
 352+ 64A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 64A4             >
 352+ 64A4             >                // dummy db directives used to calculate length of namec
 352+ 64A4 43 41 53 45 >                db      "CASEON"
 352+ 64A8 4F 4E       >
 352+ 64AA             >len_NFA         defl    $ - temp_NFA
 352+ 64AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 64A4             >
 352+ 64A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 64A5 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 352+ 64A9 4F 4E       >
 352+ 64AB             >                org     $-1                 // alter last byte of Name just above to set
 352+ 64AA CE          >                db      {b $} | END_BIT     // msb as name end
 352+ 64AB             >
 352+ 64AB 6A 64       >                dw      last_NFA            // Link to previous definition Name
 352+ 64AD             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 64AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 352+ 64AD ~           >
 352+ 64AD ~           >
 352+ 64AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 64AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 64AD             >
 352+ 64AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 64AD 3E C9                        ld      a, $C9              // "ret"
 354+ 64AF 32 9A 64                     ld      (Case_Sensitive), a
 355+ 64B2                              next
 355+ 64B2 DD E9       >                jp      (ix)
 356+ 64B4
 357+ 64B4              //  ______________________________________________________________________
 358+ 64B4              //
 359+ 64B4              //  caseoff     --
 360+ 64B4              // set system case-sensitivity on
 361+ 64B4              // it patches a RET/NOP at the beginning of the uppercase-routine
 362+ 64B4                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 362+ 64B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 64B4             >
 362+ 64B4             >                // dummy db directives used to calculate length of namec
 362+ 64B4 43 41 53 45 >                db      "CASEOFF"
 362+ 64B8 4F 46 46    >
 362+ 64BB             >len_NFA         defl    $ - temp_NFA
 362+ 64BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 64B4             >
 362+ 64B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 64B5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 362+ 64B9 4F 46 46    >
 362+ 64BC             >                org     $-1                 // alter last byte of Name just above to set
 362+ 64BB C6          >                db      {b $} | END_BIT     // msb as name end
 362+ 64BC             >
 362+ 64BC A4 64       >                dw      last_NFA            // Link to previous definition Name
 362+ 64BE             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 64BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 362+ 64BE ~           >
 362+ 64BE ~           >
 362+ 64BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 64BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 64BE             >
 362+ 64BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 64BE 3E 00                        ld      a, $00              // "nop"
 364+ 64C0 32 9A 64                     ld      (Case_Sensitive), a
 365+ 64C3                              next
 365+ 64C3 DD E9       >                jp      (ix)
 366+ 64C5
 367+ 64C5              //  ______________________________________________________________________
 368+ 64C5              //
 369+ 64C5              //  upper       c1 -- c1 | c2
 370+ 64C5              // character on top of stack is forced to Uppercase.
 371+ 64C5                              New_Def UPPER, "UPPER", is_code, is_normal
 371+ 64C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 64C5             >
 371+ 64C5             >                // dummy db directives used to calculate length of namec
 371+ 64C5 55 50 50 45 >                db      "UPPER"
 371+ 64C9 52          >
 371+ 64CA             >len_NFA         defl    $ - temp_NFA
 371+ 64CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 64C5             >
 371+ 64C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 64C6 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 371+ 64CA 52          >
 371+ 64CB             >                org     $-1                 // alter last byte of Name just above to set
 371+ 64CA D2          >                db      {b $} | END_BIT     // msb as name end
 371+ 64CB             >
 371+ 64CB B4 64       >                dw      last_NFA            // Link to previous definition Name
 371+ 64CD             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 64CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 371+ 64CD ~           >
 371+ 64CD ~           >
 371+ 64CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 64CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 64CD             >
 371+ 64CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 64CD E1                           pop     hl
 373+ 64CE 7D                           ld      a, l
 374+ 64CF CD 9B 64                     call    Case_Upper
 375+ 64D2 6F                           ld      l, a
 376+ 64D3
 377+ 64D3                              psh1
 377+ 64D3 E5          >                push    hl
 377+ 64D4 DD E9       >                jp      (ix)
 378+ 64D6
 379+ 64D6              //  ______________________________________________________________________
 380+ 64D6              //
 381+ 64D6              // (find)       addr voc -- addr 0 | cfa b 1
 382+ 64D6              // vocabulary search,
 383+ 64D6              // - voc is starting word's NFA
 384+ 64D6              // - addr is the string to be searched for
 385+ 64D6              // On success, it returns the CFA of found word, the first NFA byte
 386+ 64D6              // (which contains length and some flags) and a true flag.
 387+ 64D6              // On fail, a false flag  (no more: leaves addr unchanged)
 388+ 64D6                              New_Def C_FIND, "(FIND)", is_code, is_normal
 388+ 64D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 64D6             >
 388+ 64D6             >                // dummy db directives used to calculate length of namec
 388+ 64D6 28 46 49 4E >                db      "(FIND)"
 388+ 64DA 44 29       >
 388+ 64DC             >len_NFA         defl    $ - temp_NFA
 388+ 64DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 64D6             >
 388+ 64D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 64D7 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 388+ 64DB 44 29       >
 388+ 64DD             >                org     $-1                 // alter last byte of Name just above to set
 388+ 64DC A9          >                db      {b $} | END_BIT     // msb as name end
 388+ 64DD             >
 388+ 64DD C5 64       >                dw      last_NFA            // Link to previous definition Name
 388+ 64DF             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 64DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 388+ 64DF ~           >
 388+ 64DF ~           >
 388+ 64DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 64DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 64DF             >
 388+ 64DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 64DF                                                              // de has dictionary pointer
 390+ 64DF D1                               pop     de
 391+ 64E0              Find_VocabularyLoop:
 392+ 64E0 E1                               pop     hl                  // string pointer to search for
 393+ 64E1 E5                               push    hl                  // keep it on stack too for the end.
 394+ 64E2 1A                               ld      a, (de)             // save NFA length byte
 395+ 64E3 08                               ex      af,af'              // for later use (!)
 396+ 64E4 1A                               ld      a, (de)             // reload NFA length byte
 397+ 64E5 AE                               xor     (hl)                // check if same length
 398+ 64E6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 399+ 64E8                                  // word an text haven't the same length, skip to next vocabulary entry
 400+ 64E8 20 2C                            jr      nz, Find_DifferentLenght
 401+ 64EA
 402+ 64EA              Find_ThisWord:  // begin loop
 403+ 64EA 23                                   inc     hl
 404+ 64EB 13                                   inc     de
 405+ 64EC 1A                                   ld      a, (de)
 406+ 64ED                                      // case insensitive option - begin
 407+ 64ED C5                                   push    bc
 408+ 64EE E6 80                                and     $80                 // split A in msb and the rest
 409+ 64F0 47                                   ld      b, a
 410+ 64F1 1A                                   ld      a, (de)
 411+ 64F2 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 412+ 64F4 CD 9A 64                             call    Case_Sensitive      // uppercase routine
 413+ 64F7 4F                                   ld      c, a
 414+ 64F8 7E                                   ld      a, (hl)
 415+ 64F9 CD 9A 64                             call    Case_Sensitive      // uppercase routine
 416+ 64FC A9                                   xor     c
 417+ 64FD A8                                   xor     b
 418+ 64FE C1                                   pop     bc
 419+ 64FF                                      // case insensitive option - end
 420+ 64FF 87                                   add     a                   // ignore msb during compare
 421+ 6500 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 422+ 6502
 423+ 6502                                  // loop back until last byte msb is found set
 424+ 6502                                  // that bit marks the ending char of this word
 425+ 6502 30 E6                            jr      nc, Find_ThisWord
 426+ 6504
 427+ 6504                                  // match found !
 428+ 6504 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 429+ 6507 19                                   add     hl, de
 430+ 6508 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 431+ 6509 08                                   ex      af, af'             // retrieve NFA byte (!)
 432+ 650A 5F                                   ld      e, a
 433+ 650B 16 00                                ld      d, 0
 434+ 650D
 435+ 650D
 436+ 650D 21 01 00                             ld      hl, 1
 437+ 6510                                      psh2
 437+ 6510 D5          >                push    de
 437+ 6511 E5          >                push    hl
 437+ 6512 DD E9       >                jp      (ix)
 438+ 6514
 439+ 6514              Find_DidntMatch: // didn't match (*)
 440+ 6514 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 441+ 6516
 442+ 6516              Find_DifferentLenght:
 443+ 6516                              // consume chars until the end of the word
 444+ 6516                              // that is last byte msb is found set
 445+ 6516 13                               inc     de
 446+ 6517 1A                               ld      a, (de)
 447+ 6518 87                               add     a, a
 448+ 6519 30 FB                        jr      nc, Find_DifferentLenght
 449+ 651B
 450+ 651B              Find_WordEnd:   // word-end  found (**)
 451+ 651B                              // take LFA and use it
 452+ 651B 13                           inc     de
 453+ 651C EB                           ex      de, hl
 454+ 651D 5E                           ld      e, (hl)
 455+ 651E 23                           inc     hl
 456+ 651F 56                           ld      d, (hl)
 457+ 6520 7A                           ld      a, d
 458+ 6521 B3                           or      e
 459+ 6522
 460+ 6522                          // loop until end of vocabulary
 461+ 6522 20 BC                    jr      nz, Find_VocabularyLoop
 462+ 6524
 463+ 6524 E1                       pop     hl              // with this, it leaves addr unchanged
 464+ 6525 21 00 00                 ld      hl, FALSE_FLAG
 465+ 6528
 466+ 6528                          psh1
 466+ 6528 E5          >                push    hl
 466+ 6529 DD E9       >                jp      (ix)
 467+ 652B
 468+ 652B              //  ______________________________________________________________________
 469+ 652B              //
 470+ 652B              // enclose      a c -- a  n1 n2 n3
 471+ 652B              // starting from a, using delimiter c, determines the offsets:
 472+ 652B              //   n1   the first character non-delimiter
 473+ 652B              //   n2   the first delimiter after the text
 474+ 652B              //   n3   the first character non enclosed.
 475+ 652B              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 476+ 652B              // an uncoditional delimiter.
 477+ 652B              // Examples:
 478+ 652B              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 479+ 652B              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 480+ 652B              // iii:	c  c  'nul'          -- 2  3  2
 481+ 652B                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 481+ 652B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 652B             >
 481+ 652B             >                // dummy db directives used to calculate length of namec
 481+ 652B 45 4E 43 4C >                db      "ENCLOSE"
 481+ 652F 4F 53 45    >
 481+ 6532             >len_NFA         defl    $ - temp_NFA
 481+ 6532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 652B             >
 481+ 652B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 652C 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 481+ 6530 4F 53 45    >
 481+ 6533             >                org     $-1                 // alter last byte of Name just above to set
 481+ 6532 C5          >                db      {b $} | END_BIT     // msb as name end
 481+ 6533             >
 481+ 6533 D6 64       >                dw      last_NFA            // Link to previous definition Name
 481+ 6535             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 6535 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 481+ 6535 ~           >
 481+ 6535 ~           >
 481+ 6535             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 6535             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 6535             >
 481+ 6535             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 6535 D1                           pop     de                  //  e has the character
 483+ 6536 E1                           pop     hl                  // hl has the string address
 484+ 6537 E5                           push    hl
 485+ 6538 7B                           ld      a, e
 486+ 6539 11 FF FF                     ld      de, -1              // let's start from -1
 487+ 653C 2B                           dec     hl
 488+ 653D              Enclose_NonDelimiter:
 489+ 653D                              // find first non delimiter
 490+ 653D 23                               inc     hl
 491+ 653E 13                               inc     de
 492+ 653F BE                               cp      (hl)
 493+ 6540 28 FB                        jr      z, Enclose_NonDelimiter
 494+ 6542 D5                           push    de
 495+ 6543
 496+ 6543 C5                           push    bc                  // save Instruction Pointer
 497+ 6544
 498+ 6544 4F                           ld      c, a                // save char
 499+ 6545 7E                           ld      a, (hl)
 500+ 6546 A7                           and     a                   // stop if 0x00
 501+ 6547 20 07                        jr      nz, Enclose_NextChar
 502+ 6549
 503+ 6549                              /// case iii. no more character in string
 504+ 6549 C1                               pop     bc                  // restore Instruction Pointer
 505+ 654A 13                               inc     de
 506+ 654B D5                               push    de
 507+ 654C 1B                               dec     de
 508+ 654D D5                               push    de
 509+ 654E                                  next
 509+ 654E DD E9       >                jp      (ix)
 510+ 6550              Enclose_NextChar:
 511+ 6550 79                               ld      a, c
 512+ 6551 23                               inc     hl
 513+ 6552 13                               inc     de
 514+ 6553 BE                               cp      (hl)
 515+ 6554 20 06                            jr      nz, Enclose_NonSeparator
 516+ 6556
 517+ 6556                                      // case i. first non enclosed
 518+ 6556 C1                                   pop     bc                  // restore Instruction Pointer
 519+ 6557 D5                                   push    de
 520+ 6558 13                                   inc     de
 521+ 6559 D5                                   push    de
 522+ 655A                                      next
 522+ 655A DD E9       >                jp      (ix)
 523+ 655C              Enclose_NonSeparator:
 524+ 655C 7E                               ld      a, (hl)
 525+ 655D A7                               and     a
 526+ 655E 20 F0                        jr      nz, Enclose_NextChar
 527+ 6560
 528+ 6560                              // case ii. separator & terminator
 529+ 6560 C1                           pop     bc                  // restore Instruction Pointer
 530+ 6561 D5                           push    de
 531+ 6562 D5                           push    de
 532+ 6563                              next
 532+ 6563 DD E9       >                jp      (ix)
 533+ 6565
 534+ 6565              //  ______________________________________________________________________
 535+ 6565              //
 536+ 6565              // (map)        a2 a1 n c1 -- c2
 537+ 6565              // translate character c1 using mapping string a2 and a2
 538+ 6565              // if c1 is not present within string a1 then
 539+ 6565              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 540+ 6565                              New_Def C_MAP, "(MAP)", is_code, is_normal
 540+ 6565             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ 6565             >
 540+ 6565             >                // dummy db directives used to calculate length of namec
 540+ 6565 28 4D 41 50 >                db      "(MAP)"
 540+ 6569 29          >
 540+ 656A             >len_NFA         defl    $ - temp_NFA
 540+ 656A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ 6565             >
 540+ 6565 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ 6566 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 540+ 656A 29          >
 540+ 656B             >                org     $-1                 // alter last byte of Name just above to set
 540+ 656A A9          >                db      {b $} | END_BIT     // msb as name end
 540+ 656B             >
 540+ 656B 2B 65       >                dw      last_NFA            // Link to previous definition Name
 540+ 656D             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 656D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 540+ 656D ~           >
 540+ 656D ~           >
 540+ 656D             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 656D             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 656D             >
 540+ 656D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 656D D9                           exx
 542+ 656E E1                           pop     hl
 543+ 656F 7D                           ld      a, l
 544+ 6570 C1                           pop     bc
 545+ 6571 E1                           pop     hl
 546+ 6572 50                           ld      d, b
 547+ 6573 59                           ld      e, c
 548+ 6574 ED B1                        cpir
 549+ 6576 E1                           pop     hl
 550+ 6577 20 05                        jr      nz, C_Map_Then
 550+ 6579
 551+ 6579 19                               add     hl, de
 552+ 657A 2B                               dec     hl
 553+ 657B ED 42                            sbc     hl, bc
 554+ 657D 7E                               ld      a, (hl)
 555+ 657E              C_Map_Then:
 556+ 657E 6F                           ld      l, a
 557+ 657F 26 00                        ld      h, 0
 558+ 6581 E5                           push    hl
 559+ 6582 D9                           exx
 560+ 6583                              next
 560+ 6583 DD E9       >                jp      (ix)
 561+ 6585
 562+ 6585              //  ______________________________________________________________________
 563+ 6585              //
 564+ 6585              // (compare)    a1 a2 n -- b
 565+ 6585              // this word performs a lexicographic compare of n bytes of text at address a1
 566+ 6585              // with n bytes of text at address a2. It returns numeric a value:
 567+ 6585              //  0 : if strings are equal
 568+ 6585              // +1 : if string at a1 greater than string at a2
 569+ 6585              // -1 : if string at a1 less than string at a2
 570+ 6585              // strings can be 256 bytes in length at most.
 571+ 6585                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 571+ 6585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 571+ 6585             >
 571+ 6585             >                // dummy db directives used to calculate length of namec
 571+ 6585 28 43 4F 4D >                db      "(COMPARE)"
 571+ 6589 50 41 52 45 >
 571+ 658D 29          >
 571+ 658E             >len_NFA         defl    $ - temp_NFA
 571+ 658E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 571+ 6585             >
 571+ 6585 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 571+ 6586 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 571+ 658A 50 41 52 45 >
 571+ 658E 29          >
 571+ 658F             >                org     $-1                 // alter last byte of Name just above to set
 571+ 658E A9          >                db      {b $} | END_BIT     // msb as name end
 571+ 658F             >
 571+ 658F 65 65       >                dw      last_NFA            // Link to previous definition Name
 571+ 6591             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 571+ 6591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 571+ 6591 ~           >
 571+ 6591 ~           >
 571+ 6591             >                endif           ; ok        // for other definitions it "points" the correct handler
 571+ 6591             >                // Use of "; ok" to suppress "warning[fwdref]"
 571+ 6591             >
 571+ 6591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 572+ 6591 E1                           pop     hl                  // Number of bytes
 573+ 6592 7D                           ld      a, l
 574+ 6593 E1                           pop     hl                  // hl points string a2
 575+ 6594 D1                           pop     de                  // hl points string a1
 576+ 6595 C5                           push    bc                  // Instruction pointer on stack
 577+ 6596 47                           ld      b, a
 578+ 6597              C_Compare_Loop:
 579+ 6597 7E                               ld      a, (hl)
 580+ 6598 CD 9A 64                         call    Case_Sensitive
 581+ 659B 4F                               ld      c, a
 582+ 659C 1A                               ld      a, (de)
 583+ 659D CD 9A 64                         call    Case_Sensitive
 584+ 65A0 B9                               cp      c
 585+ 65A1 13                               inc     de
 586+ 65A2 23                               inc     hl
 587+ 65A3 28 0E                            jr      z, C_Compare_Equal
 588+ 65A5 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 589+ 65A7 21 01 00                                 ld      hl, 1               // a1 gt a2
 590+ 65AA 18 03                                jr      C_Compare_Then      // Else
 591+ 65AC              C_Compare_NotLessThan:
 592+ 65AC 21 FF FF                                 ld      hl, -1              // a1 lt a2
 593+ 65AF              C_Compare_Then:                                 // Endif
 594+ 65AF C1                                   pop     bc              // restore Instruction Pointer
 595+ 65B0
 596+ 65B0                                      psh1
 596+ 65B0 E5          >                push    hl
 596+ 65B1 DD E9       >                jp      (ix)
 597+ 65B3
 598+ 65B3              C_Compare_Equal:
 599+ 65B3 10 E2                        djnz    C_Compare_Loop
 600+ 65B5 21 00 00                     ld      hl, 0               // a1 eq a2
 601+ 65B8 C1                           pop     bc                  // restore Instruction Pointer
 602+ 65B9
 603+ 65B9                              psh1
 603+ 65B9 E5          >                push    hl
 603+ 65BA DD E9       >                jp      (ix)
 604+ 65BC
 605+ 65BC              //  ______________________________________________________________________
 606+ 65BC              //
 607+ 65BC              // emitc        c --
 608+ 65BC              // low level emit, calls ROM routine at #10 to send a character to
 609+ 65BC              // the the current channel (see SELECT to change stream-channel)
 610+ 65BC                              New_Def EMITC, "EMITC", is_code, is_normal
 610+ 65BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 65BC             >
 610+ 65BC             >                // dummy db directives used to calculate length of namec
 610+ 65BC 45 4D 49 54 >                db      "EMITC"
 610+ 65C0 43          >
 610+ 65C1             >len_NFA         defl    $ - temp_NFA
 610+ 65C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 65BC             >
 610+ 65BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 65BD 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 610+ 65C1 43          >
 610+ 65C2             >                org     $-1                 // alter last byte of Name just above to set
 610+ 65C1 C3          >                db      {b $} | END_BIT     // msb as name end
 610+ 65C2             >
 610+ 65C2 85 65       >                dw      last_NFA            // Link to previous definition Name
 610+ 65C4             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 65C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 610+ 65C4 ~           >
 610+ 65C4 ~           >
 610+ 65C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 65C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 65C4             >
 610+ 65C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 65C4 E1                           pop     hl
 612+ 65C5 7D                           ld      a, l
 613+ 65C6              Emitc_Ptr:
 614+ 65C6 C5                           push    bc
 615+ 65C7 DD E5                        push    ix
 616+ 65C9 D7                           rst     $10
 617+ 65CA DD E1                        pop     ix
 618+ 65CC C1                           pop     bc
 619+ 65CD 3E FF                        ld      a, 255            // max possible
 620+ 65CF 32 8C 5C                     ld      (SCR_CT), a
 621+ 65D2
 622+ 65D2                              next
 622+ 65D2 DD E9       >                jp      (ix)
 623+ 65D4
 624+ 65D4              Emitc_Vec:
 625+ 65D4 17 66                        dw      C_Emit_Printable  // comma
 626+ 65D6 1D 66                        dw      C_Emit_Bel        // bel
 627+ 65D8 17 66                        dw      C_Emit_Printable  // bs
 628+ 65DA 32 66                        dw      C_Emit_Tab        // tab
 629+ 65DC 17 66                        dw      C_Emit_Printable  // cr
 630+ 65DE 38 66                        dw      C_Emit_NL         // lf (unix newline)
 631+ 65E0 17 66                        dw      C_Emit_Printable  // blank
 632+ 65E2 17 66                        dw      C_Emit_Printable  // blank
 633+ 65E4
 634+ 65E4              Emit_Selector_Start:
 635+ 65E4 06                           db      $06                 // comma
 636+ 65E5 07                           db      $07                 // bel
 637+ 65E6 08                           db      $08                 // bs
 638+ 65E7 09                           db      $09                 // tab
 639+ 65E8 0D                           db      $0D                 // cr
 640+ 65E9 0A                           db      $0A                 // lf (unix newline)
 641+ 65EA 20                           db      $20
 642+ 65EB              Emit_Selector_End:
 643+ 65EB 20                           db      $20
 644+ 65EC
 645+ 65EC              //  ______________________________________________________________________
 646+ 65EC              //
 647+ 65EC              // (?emit)      c1 -- c2 | c1
 648+ 65EC              // decode a character to be sent via EMIT
 649+ 65EC              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 650+ 65EC              // the routine should resolve anything and convert the character anyway.
 651+ 65EC                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 651+ 65EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 65EC             >
 651+ 65EC             >                // dummy db directives used to calculate length of namec
 651+ 65EC 28 3F 45 4D >                db      "(?EMIT)"
 651+ 65F0 49 54 29    >
 651+ 65F3             >len_NFA         defl    $ - temp_NFA
 651+ 65F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 65EC             >
 651+ 65EC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 65ED 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 651+ 65F1 49 54 29    >
 651+ 65F4             >                org     $-1                 // alter last byte of Name just above to set
 651+ 65F3 A9          >                db      {b $} | END_BIT     // msb as name end
 651+ 65F4             >
 651+ 65F4 BC 65       >                dw      last_NFA            // Link to previous definition Name
 651+ 65F6             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 65F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 651+ 65F6 ~           >
 651+ 65F6 ~           >
 651+ 65F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 65F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 65F6             >
 651+ 65F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 65F6 D1                           pop     de
 653+ 65F7 7B                           ld      a, e                //  de has c1
 654+ 65F8 E6 7F                        and     $7F                 // 7-bit ascii only
 655+ 65FA C5                           push    bc                  // save Instruction Pointer
 656+ 65FB 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 657+ 65FE 21 EB 65                     ld      hl, Emit_Selector_End
 658+ 6601 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 659+ 6603 20 0B                        jr      nz, C_Emit_Not_Found
 660+ 6605                                  // Found then decode it
 661+ 6605 21 D4 65                         ld      hl, Emitc_Vec
 662+ 6608 09                               add     hl, bc
 663+ 6609 09                               add     hl, bc
 664+ 660A 5E                               ld      e, (hl)
 665+ 660B 23                               inc     hl
 666+ 660C 56                               ld      d, (hl)
 667+ 660D EB                               ex      de, hl
 668+ 660E C1                               pop     bc                  // restore Instruction Pointer
 669+ 660F E9                               jp      (hl)                // one of the following labels
 670+ 6610              C_Emit_Not_Found:
 671+ 6610 C1                           pop     bc                  // restore Instruction Pointer
 672+ 6611 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 673+ 6613 30 02                        jr      nc, C_Emit_Printable
 674+ 6615 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 675+ 6617              C_Emit_Printable:
 676+ 6617 6F                           ld      l, a
 677+ 6618 26 00                        ld      h, 0
 678+ 661A
 679+ 661A                              psh1
 679+ 661A E5          >                push    hl
 679+ 661B DD E9       >                jp      (ix)
 680+ 661D
 681+ 661D              C_Emit_Bel:
 682+ 661D C5                           push    bc                  // save Instruction Pointer
 683+ 661E 11 00 01                     ld      de, $0100
 684+ 6621 21 00 02                     ld      hl, $0200
 685+ 6624 DD E5                        push    ix                  // save Next Pointer
 686+ 6626 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 687+ 6629 DD E1                        pop     ix                  // restore Next Pointer
 688+ 662B C1                           pop     bc                  // restore Instruction Pointer
 689+ 662C 21 00 00                     ld      hl, NUL_CHAR
 690+ 662F
 691+ 662F                              psh1
 691+ 662F E5          >                push    hl
 691+ 6630 DD E9       >                jp      (ix)
 692+ 6632
 693+ 6632 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 694+ 6635
 695+ 6635                              psh1
 695+ 6635 E5          >                push    hl
 695+ 6636 DD E9       >                jp      (ix)
 696+ 6638
 697+ 6638 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 698+ 663B
 699+ 663B                              psh1
 699+ 663B E5          >                push    hl
 699+ 663C DD E9       >                jp      (ix)
 700+ 663E
 701+ 663E              //  ______________________________________________________________________
 702+ 663E
 703+ 663E              Key_Table:
 704+ 663E E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 705+ 663F C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 706+ 6640 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 707+ 6641 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 708+ 6642 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 709+ 6643 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 710+ 6644 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 711+ 6645 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 712+ 6646 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 713+ 6647 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 714+ 6648 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 715+ 6649              Key_MapTo:
 716+ 6649 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 717+ 664A 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 718+ 664B 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 719+ 664C 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 720+ 664D 5D                           db      $5D                 //  6: SYMBOL+U : ]
 721+ 664E 5B                           db      $5B                 //  5: SYMBOL+Y : [
 722+ 664F 7D                           db      $7D                 //  4: SYMBOL+G : }
 723+ 6650 7B                           db      $7B                 //  3: SYMBOL+F : {
 724+ 6651 5C                           db      $5C                 //  2: SYMBOl+D : //
 725+ 6652 7C                           db      $7C                 //  1: SYMBOL+S : |
 726+ 6653 7E                           db      $7E                 //  0: SYMBOL+A : ~
 727+ 6654
 728+ 6654              //  ______________________________________________________________________
 729+ 6654              //
 730+ 6654              // key          -- c
 731+ 6654              // wait for a keypress
 732+ 6654              // This definition need Standard ROM Interrupt to be served
 733+ 6654
 734+ 6654                              New_Def KEY, "KEY", is_code, is_normal
 734+ 6654             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 734+ 6654             >
 734+ 6654             >                // dummy db directives used to calculate length of namec
 734+ 6654 4B 45 59    >                db      "KEY"
 734+ 6657             >len_NFA         defl    $ - temp_NFA
 734+ 6657             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 734+ 6654             >
 734+ 6654 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 734+ 6655 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 734+ 6658             >                org     $-1                 // alter last byte of Name just above to set
 734+ 6657 D9          >                db      {b $} | END_BIT     // msb as name end
 734+ 6658             >
 734+ 6658 EC 65       >                dw      last_NFA            // Link to previous definition Name
 734+ 665A             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 734+ 665A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 734+ 665A ~           >
 734+ 665A ~           >
 734+ 665A             >                endif           ; ok        // for other definitions it "points" the correct handler
 734+ 665A             >                // Use of "; ok" to suppress "warning[fwdref]"
 734+ 665A             >
 734+ 665A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 735+ 665A
 736+ 665A C5                           push    bc                  // save Instruction Pointer
 737+ 665B DD E5                        push    ix
 738+ 665D
 739+ 665D ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 740+ 6661 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 741+ 6664 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 742+ 6668
 743+ 6668              Key_Wait:
 744+ 6668 76                               halt
 745+ 6669 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 746+ 666B CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 747+ 666E
 748+ 666E                                  // software-flash: flips face every 320 ms
 749+ 666E 3E 10                            ld      a, $10              // Timing based
 750+ 6670 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 751+ 6673
 752+ 6673 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 753+ 6676 20 0C                            jr      nz, Key_Cursor
 754+ 6678 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 755+ 667B FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 756+ 667F 28 03                                jr      z, Key_Cursor
 757+ 6681 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 758+ 6684              Key_Cursor:
 759+ 6684 D7                               rst     $10
 760+ 6685 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 761+ 6687 D7                               rst     $10
 762+ 6688
 763+ 6688 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 764+ 668C 28 DA                        jr      z, Key_Wait
 765+ 668E
 766+ 668E 76                           halt    // this is to sync flashing cursor.
 767+ 668F
 768+ 668F 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 769+ 6691 D7                           rst     $10
 770+ 6692 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 771+ 6694 D7                           rst     $10
 772+ 6695 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 773+ 6698
 774+ 6698                              // decode character from above table
 775+ 6698 21 3E 66                     ld      hl, Key_Table
 776+ 669B 01 0B 00                     ld      bc, $000B
 777+ 669E ED B1                        cpir
 778+ 66A0 20 05                        jr      nz, Key_DontMap
 779+ 66A2 21 49 66                         ld      hl, Key_MapTo
 780+ 66A5 09                               add     hl, bc
 781+ 66A6 7E                               ld      a, (hl)
 782+ 66A7 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 783+ 66A9 20 09                        jr      nz, Key_NoCapsLock
 784+ 66AB 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 785+ 66AE 7E                               ld      a, (hl)
 786+ 66AF EE 08                            xor     $08
 787+ 66B1 77                               ld      (hl), a
 788+ 66B2 3E 00                            ld      a, NUL_CHAR
 789+ 66B4 6F           Key_NoCapsLock: ld      l, a
 790+ 66B5 26 00                        ld      h, 0                // Prepare TOS
 791+ 66B7
 792+ 66B7 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 793+ 66BA 1F                           rra
 794+ 66BB 1F                           rra
 795+ 66BC 1F                           rra
 796+ 66BD F6 18                        or      $18                 // quick'n'dirty click
 797+ 66BF D3 FE                        out     ($fe), a
 798+ 66C1 06 00                        ld      b, 0
 799+ 66C3 10 FE                        djnz    $                   // wait loop
 800+ 66C5 EE 18                        xor     $18
 801+ 66C7 D3 FE                        out     ($fe), a
 802+ 66C9
 803+ 66C9 ED 7B 92 63                  ld      sp, (SP_Saved)
 804+ 66CD
 805+ 66CD DD E1                        pop     ix
 806+ 66CF C1                           pop     bc                  // Restore Instruction Pointer
 807+ 66D0
 808+ 66D0                              psh1
 808+ 66D0 E5          >                push    hl
 808+ 66D1 DD E9       >                jp      (ix)
 809+ 66D3
 810+ 66D3              //  ______________________________________________________________________
 811+ 66D3              //
 812+ 66D3              // ?terminal    -- FALSE | TRUE
 813+ 66D3              // test for BREAK keypress
 814+ 66D3                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 814+ 66D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 814+ 66D3             >
 814+ 66D3             >                // dummy db directives used to calculate length of namec
 814+ 66D3 3F 54 45 52 >                db      "?TERMINAL"
 814+ 66D7 4D 49 4E 41 >
 814+ 66DB 4C          >
 814+ 66DC             >len_NFA         defl    $ - temp_NFA
 814+ 66DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 814+ 66D3             >
 814+ 66D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 814+ 66D4 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 814+ 66D8 4D 49 4E 41 >
 814+ 66DC 4C          >
 814+ 66DD             >                org     $-1                 // alter last byte of Name just above to set
 814+ 66DC CC          >                db      {b $} | END_BIT     // msb as name end
 814+ 66DD             >
 814+ 66DD 54 66       >                dw      last_NFA            // Link to previous definition Name
 814+ 66DF             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 814+ 66DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 814+ 66DF ~           >
 814+ 66DF ~           >
 814+ 66DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 814+ 66DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 814+ 66DF             >
 814+ 66DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 815+ 66DF 21 00 00                     ld      hl, 0
 816+ 66E2 ED 73 92 63                  ld      (SP_Saved), sp
 817+ 66E6 31 61 63                     ld      sp, Cold_origin - 5
 818+ 66E9 CD 54 1F                     call    $1F54
 819+ 66EC ED 7B 92 63                  ld      sp, (SP_Saved)
 820+ 66F0
 821+ 66F0 38 01                        jr      c, QTerminal_NoBreak
 822+ 66F2 2B                               dec     hl                  // quick TRUE_FLAG
 823+ 66F3              QTerminal_NoBreak:
 824+ 66F3
 825+ 66F3                              psh1
 825+ 66F3 E5          >                push    hl
 825+ 66F4 DD E9       >                jp      (ix)
 826+ 66F6
 827+ 66F6
 828+ 66F6              //  ______________________________________________________________________
 829+ 66F6              //
 830+ 66F6              // ZX Spectrum Next - Low Level disk primitives.
 831+ 66F6              // this include is "here" for backward compatibility
 832+ 66F6
 833+ 66F6                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++66F6              //  ______________________________________________________________________
   2++66F6              //
   3++66F6              //  next-opt.asm
   4++66F6              //
   5++66F6              //  ZX Spectrum Next - peculiar definitions
   6++66F6              //  ______________________________________________________________________
   7++66F6
   8++66F6              //  ______________________________________________________________________
   9++66F6              //
  10++66F6              // f_seek       d u -- f
  11++66F6              // Seek to position d in file-handle u.
  12++66F6              // Return a false-flag 0 on success, True flag on error
  13++66F6                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++66F6             >
  13++66F6             >                // dummy db directives used to calculate length of namec
  13++66F6 46 5F 53 45 >                db      "F_SEEK"
  13++66FA 45 4B       >
  13++66FC             >len_NFA         defl    $ - temp_NFA
  13++66FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++66F6             >
  13++66F6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++66F7 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++66FB 45 4B       >
  13++66FD             >                org     $-1                 // alter last byte of Name just above to set
  13++66FC CB          >                db      {b $} | END_BIT     // msb as name end
  13++66FD             >
  13++66FD D3 66       >                dw      last_NFA            // Link to previous definition Name
  13++66FF             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66FF ~           >
  13++66FF ~           >
  13++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66FF             >
  13++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66FF E1                           pop     hl                  // file-handle
  15++6700 7D                           ld      a, l                // file-handle
  16++6701 60                           ld      h, b                // save Intruction Pointer
  17++6702 69                           ld      l, c
  18++6703 C1                           pop     bc                  // bc has high-word of d
  19++6704 D1                           pop     de
  20++6705 DD E5                        push    ix
  21++6707 E5                           push    hl                  // save Instruction Pointer
  22++6708 DD 21 00 00                  ld      ix, 0
  23++670C CF                           rst     $08
  24++670D 9F                           db      $9F
  25++670E C1                           pop     bc                  // restore Instruction Pointer
  26++670F DD E1                        pop     ix
  27++6711 ED 62                        sbc     hl, hl              // to get 0 or -1
  28++6713
  29++6713                              psh1
  29++6713 E5          >                push    hl
  29++6714 DD E9       >                jp      (ix)
  30++6716
  31++6716              //  ______________________________________________________________________
  32++6716              //
  33++6716              // f_fgetpos    u -- d f
  34++6716              // Seek to position d in file-handle u.
  35++6716              // Return a false-flag 0 on success, True flag on error
  36++6716                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++6716             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++6716             >
  36++6716             >                // dummy db directives used to calculate length of namec
  36++6716 46 5F 46 47 >                db      "F_FGETPOS"
  36++671A 45 54 50 4F >
  36++671E 53          >
  36++671F             >len_NFA         defl    $ - temp_NFA
  36++671F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++6716             >
  36++6716 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++6717 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++671B 45 54 50 4F >
  36++671F 53          >
  36++6720             >                org     $-1                 // alter last byte of Name just above to set
  36++671F D3          >                db      {b $} | END_BIT     // msb as name end
  36++6720             >
  36++6720 F6 66       >                dw      last_NFA            // Link to previous definition Name
  36++6722             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++6722 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  36++6722 ~           >
  36++6722 ~           >
  36++6722             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++6722             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++6722             >
  36++6722             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++6722 E1                           pop     hl
  38++6723 7D                           ld      a, l                // file-handle
  39++6724 DD E5                        push    ix
  40++6726 C5                           push    bc
  41++6727 CF                           rst     $08
  42++6728 A0                           db      $A0
  43++6729 E1                           pop     hl                  // restore Instruction Pointer
  44++672A DD E1                        pop     ix
  45++672C D5                           push    de
  46++672D C5                           push    bc
  47++672E 44                           ld      b, h                // restore Instruction Pointer
  48++672F 4D                           ld      c, l
  49++6730 ED 62                        sbc     hl, hl
  50++6732
  51++6732                              psh1
  51++6732 E5          >                push    hl
  51++6733 DD E9       >                jp      (ix)
  52++6735
  53++6735              //  ______________________________________________________________________
  54++6735              //
  55++6735              // f_read       a b u -- n f
  56++6735              // Read b bytes from file-handle u to address a
  57++6735              // Return the actual number n of bytes read
  58++6735              // Return 0 on success, True flag on error
  59++6735                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6735             >
  59++6735             >                // dummy db directives used to calculate length of namec
  59++6735 46 5F 52 45 >                db      "F_READ"
  59++6739 41 44       >
  59++673B             >len_NFA         defl    $ - temp_NFA
  59++673B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6735             >
  59++6735 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6736 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++673A 41 44       >
  59++673C             >                org     $-1                 // alter last byte of Name just above to set
  59++673B C4          >                db      {b $} | END_BIT     // msb as name end
  59++673C             >
  59++673C 16 67       >                dw      last_NFA            // Link to previous definition Name
  59++673E             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++673E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  59++673E ~           >
  59++673E ~           >
  59++673E             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++673E             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++673E             >
  59++673E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++673E
  61++673E 50                           ld      d, b
  62++673F 59                           ld      e, c
  63++6740 E1                           pop     hl
  64++6741 7D                           ld      a, l                // file-handle
  65++6742 C1                           pop     bc                  // bc has bytes to read
  66++6743 DD E3                        ex      (sp), ix            // ix has address
  67++6745 D5                           push    de                  // Save Instruction pointer
  68++6746 CF                           rst     $08
  69++6747 9D                           db      $9D
  70++6748 C1                           pop     bc                  // Restore Instruction pointer
  71++6749 DD E1                        pop     ix                  // Restore ix
  72++674B D5                           push    de                  // bytes written
  73++674C ED 62                        sbc     hl, hl
  74++674E
  75++674E                              psh1
  75++674E E5          >                push    hl
  75++674F DD E9       >                jp      (ix)
  76++6751
  77++6751              //  ______________________________________________________________________
  78++6751              //
  79++6751              // f_write      a b u -- n f
  80++6751              // Write bytes currently stored at address a to file-handle u.
  81++6751              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6751                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6751             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6751             >
  82++6751             >                // dummy db directives used to calculate length of namec
  82++6751 46 5F 57 52 >                db      "F_WRITE"
  82++6755 49 54 45    >
  82++6758             >len_NFA         defl    $ - temp_NFA
  82++6758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6751             >
  82++6751 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6752 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6756 49 54 45    >
  82++6759             >                org     $-1                 // alter last byte of Name just above to set
  82++6758 C5          >                db      {b $} | END_BIT     // msb as name end
  82++6759             >
  82++6759 35 67       >                dw      last_NFA            // Link to previous definition Name
  82++675B             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++675B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  82++675B ~           >
  82++675B ~           >
  82++675B             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++675B             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++675B             >
  82++675B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++675B
  84++675B 50                           ld      d, b
  85++675C 59                           ld      e, c
  86++675D E1                           pop     hl
  87++675E 7D                           ld      a, l                // file-handle
  88++675F C1                           pop     bc                  // bc has bytes to read
  89++6760 DD E3                        ex      (sp), ix            // ix has address
  90++6762 D5                           push    de                  // Save Instruction pointer
  91++6763 CF                           rst     $08
  92++6764 9E                           db      $9E
  93++6765 C1                           pop     bc                  // Restore Instruction pointer
  94++6766 DD E1                        pop     ix                  // Restore ix
  95++6768 D5                           push    de                  // bytes written
  96++6769 ED 62                        sbc     hl, hl
  97++676B
  98++676B                              psh1
  98++676B E5          >                push    hl
  98++676C DD E9       >                jp      (ix)
  99++676E
 100++676E              //  ______________________________________________________________________
 101++676E              //
 102++676E              // f_close      u -- f
 103++676E              // Close file-handle u.
 104++676E              // Return 0 on success, True flag on error
 105++676E
 106++676E                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++676E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++676E             >
 106++676E             >                // dummy db directives used to calculate length of namec
 106++676E 46 5F 43 4C >                db      "F_CLOSE"
 106++6772 4F 53 45    >
 106++6775             >len_NFA         defl    $ - temp_NFA
 106++6775             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++676E             >
 106++676E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++676F 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6773 4F 53 45    >
 106++6776             >                org     $-1                 // alter last byte of Name just above to set
 106++6775 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6776             >
 106++6776 51 67       >                dw      last_NFA            // Link to previous definition Name
 106++6778             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++6778 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 106++6778 ~           >
 106++6778 ~           >
 106++6778             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++6778             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++6778             >
 106++6778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++6778
 108++6778 E1                           pop     hl
 109++6779 7D                           ld      a, l                // file-handle
 110++677A DD E5                        push    ix
 111++677C C5                           push    bc                  // Save Instruction pointer
 112++677D CF                           rst     $08
 113++677E 9B                           db      $9B
 114++677F C1                           pop     bc
 115++6780 DD E1                        pop     ix
 116++6782 ED 62                        sbc     hl, hl
 117++6784
 118++6784                              psh1
 118++6784 E5          >                push    hl
 118++6785 DD E9       >                jp      (ix)
 119++6787
 120++6787              //  ______________________________________________________________________
 121++6787              //
 122++6787              // f_open       a1 a2 b -- u f
 123++6787              // open a file
 124++6787              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++6787              // a2 is address to an 8-byte header data used in some cases.
 126++6787              // b is access mode-byte, that is a combination of:
 127++6787              // any/all of:
 128++6787              //   esx_mode_read          $01 request read access
 129++6787              //   esx_mode_write         $02 request write access
 130++6787              //   esx_mode_use_header    $40 read/write +3DOS header
 131++6787              // plus one of:
 132++6787              //   esx_mode_open_exist    $00 only open existing file
 133++6787              //   esx_mode_open_creat    $08 open existing or create file
 134++6787              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++6787              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++6787              // Return file-handle u and 0 on success, True flag on error
 137++6787                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++6787             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++6787             >
 137++6787             >                // dummy db directives used to calculate length of namec
 137++6787 46 5F 4F 50 >                db      "F_OPEN"
 137++678B 45 4E       >
 137++678D             >len_NFA         defl    $ - temp_NFA
 137++678D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++6787             >
 137++6787 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++6788 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++678C 45 4E       >
 137++678E             >                org     $-1                 // alter last byte of Name just above to set
 137++678D CE          >                db      {b $} | END_BIT     // msb as name end
 137++678E             >
 137++678E 6E 67       >                dw      last_NFA            // Link to previous definition Name
 137++6790             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6790 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137++6790 ~           >
 137++6790 ~           >
 137++6790             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6790             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6790             >
 137++6790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6790 60                           ld      h, b                // Save Instruction pointer
 139++6791 69                           ld      l, c
 140++6792 C1                           pop     bc                  // file-mode
 141++6793 41                           ld      b, c                // file-mode
 142++6794 D1                           pop     de                  // 8-bytes buffer if any
 143++6795 DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++6797 E5                           push    hl                  // Save Instruction pointer
 145++6798 3E 2A                        ld      a, "*"
 146++679A CF                           rst     $08
 147++679B 9A                           db      $9A
 148++679C C1                           pop     bc
 149++679D DD E1                        pop     ix
 150++679F ED 62                        sbc     hl, hl
 151++67A1 5F                           ld      e, a
 152++67A2 16 00                        ld      d, 0
 153++67A4
 154++67A4
 155++67A4                              psh2
 155++67A4 D5          >                push    de
 155++67A5 E5          >                push    hl
 155++67A6 DD E9       >                jp      (ix)
 156++67A8
 157++67A8              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++67A8              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++67A8              //   \ DROP
 160++67A8              //   \ F_CLOSE
 161++67A8
 162++67A8              //  ______________________________________________________________________
 163++67A8              //
 164++67A8              // f_sync      u -- f
 165++67A8              // Close file-handle u.
 166++67A8              // Return 0 on success, True flag on error
 167++67A8
 168++67A8                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++67A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++67A8             >
 168++67A8             >                // dummy db directives used to calculate length of namec
 168++67A8 46 5F 53 59 >                db      "F_SYNC"
 168++67AC 4E 43       >
 168++67AE             >len_NFA         defl    $ - temp_NFA
 168++67AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++67A8             >
 168++67A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++67A9 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++67AD 4E 43       >
 168++67AF             >                org     $-1                 // alter last byte of Name just above to set
 168++67AE C3          >                db      {b $} | END_BIT     // msb as name end
 168++67AF             >
 168++67AF 87 67       >                dw      last_NFA            // Link to previous definition Name
 168++67B1             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 168++67B1 ~           >
 168++67B1 ~           >
 168++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++67B1             >
 168++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++67B1 E1                           pop     hl
 170++67B2 7D                           ld      a, l                // file-handle
 171++67B3 DD E5                        push    ix
 172++67B5 C5                           push    bc
 173++67B6 CF                           rst     $08
 174++67B7 9C                           db      $9C
 175++67B8 C1                           pop     bc
 176++67B9 DD E1                        pop     ix
 177++67BB ED 62                        sbc     hl, hl
 178++67BD
 179++67BD                              psh1
 179++67BD E5          >                push    hl
 179++67BE DD E9       >                jp      (ix)
 180++67C0
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 834+ 67C0
 835+ 67C0
 836+ 67C0              //  ______________________________________________________________________
 837+ 67C0              //
 838+ 67C0              // cr           --
 839+ 67C0              // send a CR via EMITC
 840+ 67C0                              New_Def CR, "CR", is_code, is_normal
 840+ 67C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 840+ 67C0             >
 840+ 67C0             >                // dummy db directives used to calculate length of namec
 840+ 67C0 43 52       >                db      "CR"
 840+ 67C2             >len_NFA         defl    $ - temp_NFA
 840+ 67C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 840+ 67C0             >
 840+ 67C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 840+ 67C1 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 840+ 67C3             >                org     $-1                 // alter last byte of Name just above to set
 840+ 67C2 D2          >                db      {b $} | END_BIT     // msb as name end
 840+ 67C3             >
 840+ 67C3 A8 67       >                dw      last_NFA            // Link to previous definition Name
 840+ 67C5             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 840+ 67C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 840+ 67C5 ~           >
 840+ 67C5 ~           >
 840+ 67C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 840+ 67C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 840+ 67C5             >
 840+ 67C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 841+ 67C5
 842+ 67C5 3E 0D                        ld      a, CR_CHAR
 843+ 67C7 C3 C6 65                     jp      Emitc_Ptr
 844+ 67CA
 845+ 67CA              //  ______________________________________________________________________
 846+ 67CA              //
 847+ 67CA              // cmove    a1 a2 u --
 848+ 67CA              // If u > 0, moves memory content starting at address a1 for n bytes long
 849+ 67CA              // storing then starting at address addr2.
 850+ 67CA              // The content of a1 is moved first. See CMOVE> also.
 851+ 67CA                              New_Def CMOVE, "CMOVE", is_code, is_normal
 851+ 67CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ 67CA             >
 851+ 67CA             >                // dummy db directives used to calculate length of namec
 851+ 67CA 43 4D 4F 56 >                db      "CMOVE"
 851+ 67CE 45          >
 851+ 67CF             >len_NFA         defl    $ - temp_NFA
 851+ 67CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ 67CA             >
 851+ 67CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ 67CB 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 851+ 67CF 45          >
 851+ 67D0             >                org     $-1                 // alter last byte of Name just above to set
 851+ 67CF C5          >                db      {b $} | END_BIT     // msb as name end
 851+ 67D0             >
 851+ 67D0 C0 67       >                dw      last_NFA            // Link to previous definition Name
 851+ 67D2             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 67D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 851+ 67D2 ~           >
 851+ 67D2 ~           >
 851+ 67D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 67D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 67D2             >
 851+ 67D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 67D2 60                           ld      h, b
 853+ 67D3 69                           ld      l, c
 854+ 67D4
 855+ 67D4 C1                           pop     bc                  // bc has counter
 856+ 67D5 D1                           pop     de                  // de now has dest
 857+ 67D6 E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 858+ 67D7 78                           ld      a, b
 859+ 67D8 B1                           or      c
 860+ 67D9 28 02                        jr      z, Cmove_NoMove
 861+ 67DB ED B0                            ldir
 862+ 67DD              Cmove_NoMove:
 863+ 67DD C1                           pop     bc                  // Restore Instruction Pointer
 864+ 67DE
 865+ 67DE                              next
 865+ 67DE DD E9       >                jp      (ix)
 866+ 67E0
 867+ 67E0              //  ______________________________________________________________________
 868+ 67E0              //
 869+ 67E0              // cmove>    a1 a2 u --
 870+ 67E0              // If u > 0, moves memory content starting at address a1 for n bytes long
 871+ 67E0              // storing then starting at address addr2.
 872+ 67E0              // The content of a1 is moved last. See cmove.
 873+ 67E0                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 873+ 67E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 67E0             >
 873+ 67E0             >                // dummy db directives used to calculate length of namec
 873+ 67E0 43 4D 4F 56 >                db      "CMOVE>"
 873+ 67E4 45 3E       >
 873+ 67E6             >len_NFA         defl    $ - temp_NFA
 873+ 67E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 67E0             >
 873+ 67E0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 67E1 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 873+ 67E5 45 3E       >
 873+ 67E7             >                org     $-1                 // alter last byte of Name just above to set
 873+ 67E6 BE          >                db      {b $} | END_BIT     // msb as name end
 873+ 67E7             >
 873+ 67E7 CA 67       >                dw      last_NFA            // Link to previous definition Name
 873+ 67E9             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 67E9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 873+ 67E9 ~           >
 873+ 67E9 ~           >
 873+ 67E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 67E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 67E9             >
 873+ 67E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 67E9 60                           ld      h, b
 875+ 67EA 69                           ld      l, c
 876+ 67EB
 877+ 67EB C1                           pop     bc                  // bc has counter
 878+ 67EC D1                           pop     de                  // de has dest
 879+ 67ED E3                           ex      (sp), hl            // hl has source, save Instruction Pointer
 880+ 67EE 78                           ld      a, b
 881+ 67EF B1                           or      c
 882+ 67F0 28 08                        jr      z, CmoveV_NoMove
 883+ 67F2 EB                               ex      de, hl              // compute address to
 884+ 67F3 09                               add     hl, bc              // operate backward
 885+ 67F4 2B                               dec     hl
 886+ 67F5 EB                               ex      de, hl
 887+ 67F6 09                               add     hl, bc
 888+ 67F7 2B                               dec     hl
 889+ 67F8 ED B8                            lddr                        // backward
 890+ 67FA              CmoveV_NoMove:
 891+ 67FA C1                           pop     bc                  // Restore Instruction Pointer
 892+ 67FB
 893+ 67FB                              next
 893+ 67FB DD E9       >                jp      (ix)
 894+ 67FD
 895+ 67FD              //  ______________________________________________________________________
 896+ 67FD              //
 897+ 67FD              // um*      u1 u2 -- ud
 898+ 67FD              // Unsigned multiplication
 899+ 67FD              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 900+ 67FD              // On the stack a double number is treated as two single numbers
 901+ 67FD              // where DE is on the top of the stack and HL is the second from top,
 902+ 67FD              // Instead, in 2VARIABLE a double number is stored as EDLH.
 903+ 67FD              // this definition could use "MUL" Z80N new op-code.
 904+ 67FD                              New_Def UM_MUL, "UM*", is_code, is_normal
 904+ 67FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ 67FD             >
 904+ 67FD             >                // dummy db directives used to calculate length of namec
 904+ 67FD 55 4D 2A    >                db      "UM*"
 904+ 6800             >len_NFA         defl    $ - temp_NFA
 904+ 6800             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ 67FD             >
 904+ 67FD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ 67FE 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 904+ 6801             >                org     $-1                 // alter last byte of Name just above to set
 904+ 6800 AA          >                db      {b $} | END_BIT     // msb as name end
 904+ 6801             >
 904+ 6801 E0 67       >                dw      last_NFA            // Link to previous definition Name
 904+ 6803             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 6803 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 904+ 6803 ~           >
 904+ 6803 ~           >
 904+ 6803             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 6803             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 6803             >
 904+ 6803             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 6803 D1                           pop     de                    // de has u2 operand
 906+ 6804 E1                           pop     hl                    // hl has u1 operand
 907+ 6805 C5                           push    bc                    // Save Instruction Pointer
 908+ 6806 45                           ld      b, l
 909+ 6807 4B                           ld      c, e
 910+ 6808 5D                           ld      e, l
 911+ 6809 6A                           ld      l, d
 912+ 680A E5                           push    hl
 913+ 680B 69                           ld      l, c
 914+ 680C ED 30                        mul
 915+ 680E EB                           ex      de, hl
 916+ 680F ED 30                        mul
 917+ 6811 AF                           xor     a
 918+ 6812 19                           add     hl, de
 919+ 6813 8F                           adc     a
 920+ 6814 59                           ld      e, c
 921+ 6815 50                           ld      d, b
 922+ 6816 ED 30                        mul
 923+ 6818 47                           ld      b, a
 924+ 6819 4C                           ld      c, h
 925+ 681A 7A                           ld      a, d
 926+ 681B 85                           add     l
 927+ 681C 67                           ld      h, a
 928+ 681D 6B                           ld      l, e
 929+ 681E D1                           pop     de
 930+ 681F ED 30                        mul
 931+ 6821 EB                           ex      de, hl
 932+ 6822 ED 4A                        adc     hl, bc
 933+ 6824 C1                           pop     bc
 934+ 6825 D5                           push    de
 935+ 6826 E5                           push    hl
 936+ 6827                              next
 936+ 6827 DD E9       >                jp      (ix)
 937+ 6829
 938+ 6829              //  ______________________________________________________________________
 939+ 6829              //
 940+ 6829              // um/mod      ud u1 -- q r
 941+ 6829              // divides ud into u1 giving quotient q and remainder r
 942+ 6829              // algorithm takes 16 bit at a time starting from msb
 943+ 6829              // DE grows from lsb upward with quotient result
 944+ 6829              // HL keeps the remainder at each stage of division
 945+ 6829              // each loop 'lowers' the next binary digit to form the current dividend
 946+ 6829                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 946+ 6829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ 6829             >
 946+ 6829             >                // dummy db directives used to calculate length of namec
 946+ 6829 55 4D 2F 4D >                db      "UM/MOD"
 946+ 682D 4F 44       >
 946+ 682F             >len_NFA         defl    $ - temp_NFA
 946+ 682F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ 6829             >
 946+ 6829 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ 682A 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 946+ 682E 4F 44       >
 946+ 6830             >                org     $-1                 // alter last byte of Name just above to set
 946+ 682F C4          >                db      {b $} | END_BIT     // msb as name end
 946+ 6830             >
 946+ 6830 FD 67       >                dw      last_NFA            // Link to previous definition Name
 946+ 6832             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 6832 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 946+ 6832 ~           >
 946+ 6832 ~           >
 946+ 6832             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 6832             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 6832             >
 946+ 6832             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 6832 60                           ld      h, b
 948+ 6833 69                           ld      l, c                    // Save Instruction Pointer
 949+ 6834
 950+ 6834 C1                           pop     bc                      // divisor
 951+ 6835
 952+ 6835 D1                           pop     de                      // < high part
 953+ 6836 E3                           ex      (sp), hl                // < low part and > save bc
 954+ 6837 EB                           ex      de, hl                  //
 955+ 6838 7D                           ld      a, l                    // check without changing arguments
 956+ 6839 91                           sub     c                       // if divisor is greater than high part
 957+ 683A 7C                           ld      a, h                    // so quotient will be in range
 958+ 683B 98                           sbc     a, b
 959+ 683C 30 23                        jr      nc, Um_DivMod_OutOfRange
 960+ 683E 3E 10                            ld      a, 16
 961+ 6840              Um_DivMod_Loop:
 962+ 6840 A7                                   and     a
 963+ 6841 CB 13                                rl      e
 964+ 6843 CB 12                                rl      d
 965+ 6845 CB 15                                rl      l
 966+ 6847 CB 14                                rl      h
 967+ 6849 30 05                                jr      nc, Um_DivMod_Carry
 968+ 684B A7                                       and     a
 969+ 684C ED 42                                    sbc     hl, bc
 970+ 684E 18 07                                jr      Um_DivMod_Endif    // else
 971+ 6850              Um_DivMod_Carry:
 972+ 6850 A7                                       and     a
 973+ 6851 ED 42                                    sbc     hl, bc
 974+ 6853 30 02                                    jr      nc, Um_DivMod_Endif
 975+ 6855 09                                           add     hl, bc
 976+ 6856 1B                                           dec     de
 977+ 6857              Um_DivMod_Endif:                                   // endif
 978+ 6857 13                                   inc     de
 979+ 6858 3D                                   dec     a
 980+ 6859 20 E5                            jr      nz, Um_DivMod_Loop
 981+ 685B EB                               ex      de, hl
 982+ 685C              Um_DivMod_Bailout:
 983+ 685C C1                               pop     bc                  // restore Instruction Pointer
 984+ 685D D5                               push    de                  // de := remanider
 985+ 685E E5                               push    hl                  // hl := quotient
 986+ 685F                                  next
 986+ 685F DD E9       >                jp      (ix)
 987+ 6861
 988+ 6861              Um_DivMod_OutOfRange:
 989+ 6861 21 FF FF                     ld      hl, -1
 990+ 6864 54                           ld      d, h
 991+ 6865 5D                           ld      e, l
 992+ 6866 18 F4                        jr      Um_DivMod_Bailout
 993+ 6868
 994+ 6868              //  ______________________________________________________________________
 995+ 6868              //
 996+ 6868              // and          n1 n2 -- n3
 997+ 6868              // bit logical AND. Returns n3 as n1 & n2
 998+ 6868                              New_Def AND_OP, "AND", is_code, is_normal
 998+ 6868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 6868             >
 998+ 6868             >                // dummy db directives used to calculate length of namec
 998+ 6868 41 4E 44    >                db      "AND"
 998+ 686B             >len_NFA         defl    $ - temp_NFA
 998+ 686B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 6868             >
 998+ 6868 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 6869 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
 998+ 686C             >                org     $-1                 // alter last byte of Name just above to set
 998+ 686B C4          >                db      {b $} | END_BIT     // msb as name end
 998+ 686C             >
 998+ 686C 29 68       >                dw      last_NFA            // Link to previous definition Name
 998+ 686E             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 686E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 998+ 686E ~           >
 998+ 686E ~           >
 998+ 686E             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 686E             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 686E             >
 998+ 686E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 686E D1                           pop     de
1000+ 686F E1                           pop     hl
1001+ 6870 7B                           ld      a, e
1002+ 6871 A5                           and     l
1003+ 6872 6F                           ld      l, a
1004+ 6873 7A                           ld      a, d
1005+ 6874 A4                           and     h
1006+ 6875 67                           ld      h, a
1007+ 6876
1008+ 6876                              psh1
1008+ 6876 E5          >                push    hl
1008+ 6877 DD E9       >                jp      (ix)
1009+ 6879
1010+ 6879              //  ______________________________________________________________________
1011+ 6879              //
1012+ 6879              // or           n1 n2 -- n3
1013+ 6879              // bit logical OR. Returns n3 as n1 | n2
1014+ 6879                              New_Def OR_OP, "OR", is_code, is_normal
1014+ 6879             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 6879             >
1014+ 6879             >                // dummy db directives used to calculate length of namec
1014+ 6879 4F 52       >                db      "OR"
1014+ 687B             >len_NFA         defl    $ - temp_NFA
1014+ 687B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 6879             >
1014+ 6879 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 687A 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1014+ 687C             >                org     $-1                 // alter last byte of Name just above to set
1014+ 687B D2          >                db      {b $} | END_BIT     // msb as name end
1014+ 687C             >
1014+ 687C 68 68       >                dw      last_NFA            // Link to previous definition Name
1014+ 687E             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 687E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1014+ 687E ~           >
1014+ 687E ~           >
1014+ 687E             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 687E             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 687E             >
1014+ 687E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 687E D1                           pop     de
1016+ 687F E1                           pop     hl
1017+ 6880 7B                           ld      a, e
1018+ 6881 B5                           or      l
1019+ 6882 6F                           ld      l, a
1020+ 6883 7A                           ld      a, d
1021+ 6884 B4                           or      h
1022+ 6885 67                           ld      h, a
1023+ 6886
1024+ 6886                              psh1
1024+ 6886 E5          >                push    hl
1024+ 6887 DD E9       >                jp      (ix)
1025+ 6889
1026+ 6889              //  ______________________________________________________________________
1027+ 6889              //
1028+ 6889              // xor          n1 n2 -- n3
1029+ 6889              // bit logical OR. Returns n3 as n1 ^ n2
1030+ 6889                              New_Def XOR_OP, "XOR", is_code, is_normal
1030+ 6889             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1030+ 6889             >
1030+ 6889             >                // dummy db directives used to calculate length of namec
1030+ 6889 58 4F 52    >                db      "XOR"
1030+ 688C             >len_NFA         defl    $ - temp_NFA
1030+ 688C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1030+ 6889             >
1030+ 6889 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1030+ 688A 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1030+ 688D             >                org     $-1                 // alter last byte of Name just above to set
1030+ 688C D2          >                db      {b $} | END_BIT     // msb as name end
1030+ 688D             >
1030+ 688D 79 68       >                dw      last_NFA            // Link to previous definition Name
1030+ 688F             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1030+ 688F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1030+ 688F ~           >
1030+ 688F ~           >
1030+ 688F             >                endif           ; ok        // for other definitions it "points" the correct handler
1030+ 688F             >                // Use of "; ok" to suppress "warning[fwdref]"
1030+ 688F             >
1030+ 688F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1031+ 688F D1                           pop     de
1032+ 6890 E1                           pop     hl
1033+ 6891 7B                           ld      a, e
1034+ 6892 AD                           xor     l
1035+ 6893 6F                           ld      l, a
1036+ 6894 7A                           ld      a, d
1037+ 6895 AC                           xor     h
1038+ 6896 67                           ld      h, a
1039+ 6897
1040+ 6897                              psh1
1040+ 6897 E5          >                push    hl
1040+ 6898 DD E9       >                jp      (ix)
1041+ 689A
1042+ 689A              //  ______________________________________________________________________
1043+ 689A              //
1044+ 689A              // sp@      -- a
1045+ 689A              // returns on top of stack the value of SP before execution
1046+ 689A                              New_Def SPFETCH, "SP@", is_code, is_normal
1046+ 689A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1046+ 689A             >
1046+ 689A             >                // dummy db directives used to calculate length of namec
1046+ 689A 53 50 40    >                db      "SP@"
1046+ 689D             >len_NFA         defl    $ - temp_NFA
1046+ 689D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1046+ 689A             >
1046+ 689A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1046+ 689B 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1046+ 689E             >                org     $-1                 // alter last byte of Name just above to set
1046+ 689D C0          >                db      {b $} | END_BIT     // msb as name end
1046+ 689E             >
1046+ 689E 89 68       >                dw      last_NFA            // Link to previous definition Name
1046+ 68A0             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1046+ 68A0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1046+ 68A0 ~           >
1046+ 68A0 ~           >
1046+ 68A0             >                endif           ; ok        // for other definitions it "points" the correct handler
1046+ 68A0             >                // Use of "; ok" to suppress "warning[fwdref]"
1046+ 68A0             >
1046+ 68A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1047+ 68A0
1048+ 68A0 21 00 00                     ld      hl, 0
1049+ 68A3 39                           add     hl, sp
1050+ 68A4
1051+ 68A4                              psh1
1051+ 68A4 E5          >                push    hl
1051+ 68A5 DD E9       >                jp      (ix)
1052+ 68A7
1053+ 68A7              //  ______________________________________________________________________
1054+ 68A7              //
1055+ 68A7              // sp!      a --
1056+ 68A7              // restore SP to the initial value passed
1057+ 68A7              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1058+ 68A7                              New_Def SPSTORE, "SP!", is_code, is_normal
1058+ 68A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1058+ 68A7             >
1058+ 68A7             >                // dummy db directives used to calculate length of namec
1058+ 68A7 53 50 21    >                db      "SP!"
1058+ 68AA             >len_NFA         defl    $ - temp_NFA
1058+ 68AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1058+ 68A7             >
1058+ 68A7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1058+ 68A8 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1058+ 68AB             >                org     $-1                 // alter last byte of Name just above to set
1058+ 68AA A1          >                db      {b $} | END_BIT     // msb as name end
1058+ 68AB             >
1058+ 68AB 9A 68       >                dw      last_NFA            // Link to previous definition Name
1058+ 68AD             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1058+ 68AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1058+ 68AD ~           >
1058+ 68AD ~           >
1058+ 68AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1058+ 68AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1058+ 68AD             >
1058+ 68AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1059+ 68AD E1                           pop     hl
1060+ 68AE F9                           ld      sp, hl
1061+ 68AF
1062+ 68AF                              next
1062+ 68AF DD E9       >                jp      (ix)
1063+ 68B1
1064+ 68B1              //  ______________________________________________________________________
1065+ 68B1              //
1066+ 68B1              // rp@      -- a
1067+ 68B1              // returns on top of stack the value of Return-Pointer
1068+ 68B1                              New_Def RPFETCH, "RP@", is_code, is_normal
1068+ 68B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1068+ 68B1             >
1068+ 68B1             >                // dummy db directives used to calculate length of namec
1068+ 68B1 52 50 40    >                db      "RP@"
1068+ 68B4             >len_NFA         defl    $ - temp_NFA
1068+ 68B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1068+ 68B1             >
1068+ 68B1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1068+ 68B2 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1068+ 68B5             >                org     $-1                 // alter last byte of Name just above to set
1068+ 68B4 C0          >                db      {b $} | END_BIT     // msb as name end
1068+ 68B5             >
1068+ 68B5 A7 68       >                dw      last_NFA            // Link to previous definition Name
1068+ 68B7             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1068+ 68B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1068+ 68B7 ~           >
1068+ 68B7 ~           >
1068+ 68B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1068+ 68B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1068+ 68B7             >
1068+ 68B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1069+ 68B7
1070+ 68B7                              ldhlrp
1070+ 68B7 2A 96 63    >                ld      hl,(RP_Pointer)
1071+ 68BA
1072+ 68BA                              psh1
1072+ 68BA E5          >                push    hl
1072+ 68BB DD E9       >                jp      (ix)
1073+ 68BD
1074+ 68BD              //  ______________________________________________________________________
1075+ 68BD              //
1076+ 68BD              // rp!      a --
1077+ 68BD              // restore RP to the initial value passed
1078+ 68BD              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1079+ 68BD                              New_Def RPSTORE, "RP!", is_code, is_normal
1079+ 68BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1079+ 68BD             >
1079+ 68BD             >                // dummy db directives used to calculate length of namec
1079+ 68BD 52 50 21    >                db      "RP!"
1079+ 68C0             >len_NFA         defl    $ - temp_NFA
1079+ 68C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1079+ 68BD             >
1079+ 68BD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1079+ 68BE 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1079+ 68C1             >                org     $-1                 // alter last byte of Name just above to set
1079+ 68C0 A1          >                db      {b $} | END_BIT     // msb as name end
1079+ 68C1             >
1079+ 68C1 B1 68       >                dw      last_NFA            // Link to previous definition Name
1079+ 68C3             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1079+ 68C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1079+ 68C3 ~           >
1079+ 68C3 ~           >
1079+ 68C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1079+ 68C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1079+ 68C3             >
1079+ 68C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1080+ 68C3 E1                           pop     hl
1081+ 68C4                              ldrphl
1081+ 68C4 22 96 63    >                ld      (RP_Pointer),hl
1082+ 68C7
1083+ 68C7                              next
1083+ 68C7 DD E9       >                jp      (ix)
1084+ 68C9
1085+ 68C9              //  ______________________________________________________________________
1086+ 68C9              //
1087+ 68C9              // exit       --
1088+ 68C9              // exits back to the caller word
1089+ 68C9                              New_Def EXIT, "EXIT", is_code, is_normal
1089+ 68C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1089+ 68C9             >
1089+ 68C9             >                // dummy db directives used to calculate length of namec
1089+ 68C9 45 58 49 54 >                db      "EXIT"
1089+ 68CD             >len_NFA         defl    $ - temp_NFA
1089+ 68CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1089+ 68C9             >
1089+ 68C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1089+ 68CA 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1089+ 68CE             >                org     $-1                 // alter last byte of Name just above to set
1089+ 68CD D4          >                db      {b $} | END_BIT     // msb as name end
1089+ 68CE             >
1089+ 68CE BD 68       >                dw      last_NFA            // Link to previous definition Name
1089+ 68D0             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1089+ 68D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1089+ 68D0 ~           >
1089+ 68D0 ~           >
1089+ 68D0             >                endif           ; ok        // for other definitions it "points" the correct handler
1089+ 68D0             >                // Use of "; ok" to suppress "warning[fwdref]"
1089+ 68D0             >
1089+ 68D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1090+ 68D0                              ldhlrp                      // Get Return Stack Pointer
1090+ 68D0 2A 96 63    >                ld      hl,(RP_Pointer)
1091+ 68D3 4E                           ld      c, (hl)             // pop Instruction Pointer
1092+ 68D4 23                           inc     hl                  // from Return Stack
1093+ 68D5 46                           ld      b, (hl)
1094+ 68D6 23                           inc     hl
1095+ 68D7                              ldrphl                      // Set Return Stack Pointer
1095+ 68D7 22 96 63    >                ld      (RP_Pointer),hl
1096+ 68DA                              next
1096+ 68DA DD E9       >                jp      (ix)
1097+ 68DC
1098+ 68DC              //  ______________________________________________________________________
1099+ 68DC              //
1100+ 68DC              // lastl      --
1101+ 68DC              // exits back to the caller word
1102+ 68DC              //              New_Def EXIT, "LASTL", is_code, is_normal
1103+ 68DC              //              ldhlrp                      // Get Return Stack Pointer
1104+ 68DC              //              ld      e, (hl)             // pop Instruction Pointer
1105+ 68DC              //              inc     hl                  // from Return Stack
1106+ 68DC              //              ld      d, (hl)
1107+ 68DC              //              inc     hl
1108+ 68DC              //              ld      (hl), e
1109+ 68DC              //              inc     hl
1110+ 68DC              //              ld      (hl), d
1111+ 68DC              //              next
1112+ 68DC
1113+ 68DC              //  ______________________________________________________________________
1114+ 68DC              //
1115+ 68DC              // (leave)        --
1116+ 68DC              // compiled by LEAVE
1117+ 68DC              // this forces to exit from loop and jump past
1118+ 68DC                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1118+ 68DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1118+ 68DC             >
1118+ 68DC             >                // dummy db directives used to calculate length of namec
1118+ 68DC 28 4C 45 41 >                db      "(LEAVE)"
1118+ 68E0 56 45 29    >
1118+ 68E3             >len_NFA         defl    $ - temp_NFA
1118+ 68E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1118+ 68DC             >
1118+ 68DC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1118+ 68DD 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1118+ 68E1 56 45 29    >
1118+ 68E4             >                org     $-1                 // alter last byte of Name just above to set
1118+ 68E3 A9          >                db      {b $} | END_BIT     // msb as name end
1118+ 68E4             >
1118+ 68E4 C9 68       >                dw      last_NFA            // Link to previous definition Name
1118+ 68E6             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1118+ 68E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1118+ 68E6 ~           >
1118+ 68E6 ~           >
1118+ 68E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1118+ 68E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1118+ 68E6             >
1118+ 68E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1119+ 68E6
1120+ 68E6                              ldhlrp
1120+ 68E6 2A 96 63    >                ld      hl,(RP_Pointer)
1121+ 68E9 11 04 00                     ld      de, 4
1122+ 68EC 19                           add     hl, de
1123+ 68ED                              ldrphl
1123+ 68ED 22 96 63    >                ld      (RP_Pointer),hl
1124+ 68F0
1125+ 68F0 C3 C3 63                     jp      Branch_Ptr       // perform branch consuming following cell
1126+ 68F3                              next
1126+ 68F3 DD E9       >                jp      (ix)
1127+ 68F5
1128+ 68F5              //  ______________________________________________________________________
1129+ 68F5              //
1130+ 68F5              // >r      n --
1131+ 68F5              // pop from calculator-stack and push into return-stack
1132+ 68F5                              New_Def TO_R, ">R", is_code, is_normal
1132+ 68F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1132+ 68F5             >
1132+ 68F5             >                // dummy db directives used to calculate length of namec
1132+ 68F5 3E 52       >                db      ">R"
1132+ 68F7             >len_NFA         defl    $ - temp_NFA
1132+ 68F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1132+ 68F5             >
1132+ 68F5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1132+ 68F6 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1132+ 68F8             >                org     $-1                 // alter last byte of Name just above to set
1132+ 68F7 D2          >                db      {b $} | END_BIT     // msb as name end
1132+ 68F8             >
1132+ 68F8 DC 68       >                dw      last_NFA            // Link to previous definition Name
1132+ 68FA             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1132+ 68FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1132+ 68FA ~           >
1132+ 68FA ~           >
1132+ 68FA             >                endif           ; ok        // for other definitions it "points" the correct handler
1132+ 68FA             >                // Use of "; ok" to suppress "warning[fwdref]"
1132+ 68FA             >
1132+ 68FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1133+ 68FA D1                           pop     de
1134+ 68FB                              ldhlrp
1134+ 68FB 2A 96 63    >                ld      hl,(RP_Pointer)
1135+ 68FE 2B                           dec     hl
1136+ 68FF 72                           ld      (hl), d             // store current TOS
1137+ 6900 2B                           dec     hl                  // to Return Stack
1138+ 6901 73                           ld      (hl), e
1139+ 6902                              ldrphl
1139+ 6902 22 96 63    >                ld      (RP_Pointer),hl
1140+ 6905
1141+ 6905                              next
1141+ 6905 DD E9       >                jp      (ix)
1142+ 6907
1143+ 6907              //  ______________________________________________________________________
1144+ 6907              //
1145+ 6907              // r>      -- n
1146+ 6907              // pop from return-stack and push into calculator-stack
1147+ 6907                              New_Def R_TO, "R>", is_code, is_normal
1147+ 6907             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ 6907             >
1147+ 6907             >                // dummy db directives used to calculate length of namec
1147+ 6907 52 3E       >                db      "R>"
1147+ 6909             >len_NFA         defl    $ - temp_NFA
1147+ 6909             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ 6907             >
1147+ 6907 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ 6908 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1147+ 690A             >                org     $-1                 // alter last byte of Name just above to set
1147+ 6909 BE          >                db      {b $} | END_BIT     // msb as name end
1147+ 690A             >
1147+ 690A F5 68       >                dw      last_NFA            // Link to previous definition Name
1147+ 690C             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 690C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1147+ 690C ~           >
1147+ 690C ~           >
1147+ 690C             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 690C             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 690C             >
1147+ 690C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 690C
1149+ 690C                              ldhlrp
1149+ 690C 2A 96 63    >                ld      hl,(RP_Pointer)
1150+ 690F 5E                           ld      e, (hl)             // retrieve from Return Stack
1151+ 6910 23                           inc     hl
1152+ 6911 56                           ld      d, (hl)
1153+ 6912 23                           inc     hl
1154+ 6913                              ldrphl
1154+ 6913 22 96 63    >                ld      (RP_Pointer),hl
1155+ 6916 D5                           push    de
1156+ 6917                              next
1156+ 6917 DD E9       >                jp      (ix)
1157+ 6919
1158+ 6919              //  ______________________________________________________________________
1159+ 6919              //
1160+ 6919              // r            -- n
1161+ 6919              // return on top of stack the value of top of return-stack
1162+ 6919              // Since this is the same as I, we alter R's CFA to jump there
1163+ 6919                              New_Def R_OP, "R@", is_code, is_normal
1163+ 6919             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1163+ 6919             >
1163+ 6919             >                // dummy db directives used to calculate length of namec
1163+ 6919 52 40       >                db      "R@"
1163+ 691B             >len_NFA         defl    $ - temp_NFA
1163+ 691B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1163+ 6919             >
1163+ 6919 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1163+ 691A 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1163+ 691C             >                org     $-1                 // alter last byte of Name just above to set
1163+ 691B C0          >                db      {b $} | END_BIT     // msb as name end
1163+ 691C             >
1163+ 691C 07 69       >                dw      last_NFA            // Link to previous definition Name
1163+ 691E             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1163+ 691E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1163+ 691E ~           >
1163+ 691E ~           >
1163+ 691E             >                endif           ; ok        // for other definitions it "points" the correct handler
1163+ 691E             >                // Use of "; ok" to suppress "warning[fwdref]"
1163+ 691E             >
1163+ 691E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1164+ 691E C3 61 64                     jp      I_Ptr
1165+ 6921
1166+ 6921              //  ______________________________________________________________________
1167+ 6921              //
1168+ 6921              // r            -- n
1169+ 6921              // return on top of stack the value of top of return-stack
1170+ 6921              // Since this is the same as I, we alter R's CFA to jump there
1171+ 6921                              New_Def R_OLD, "R", is_code, is_normal
1171+ 6921             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1171+ 6921             >
1171+ 6921             >                // dummy db directives used to calculate length of namec
1171+ 6921 52          >                db      "R"
1171+ 6922             >len_NFA         defl    $ - temp_NFA
1171+ 6922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1171+ 6921             >
1171+ 6921 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1171+ 6922 52          >                db      "R"               // name string in 7-bit ascii, but
1171+ 6923             >                org     $-1                 // alter last byte of Name just above to set
1171+ 6922 D2          >                db      {b $} | END_BIT     // msb as name end
1171+ 6923             >
1171+ 6923 19 69       >                dw      last_NFA            // Link to previous definition Name
1171+ 6925             >R_OLD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1171+ 6925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1171+ 6925 ~           >
1171+ 6925 ~           >
1171+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1171+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1171+ 6925             >
1171+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1172+ 6925 C3 61 64                     jp      I_Ptr
1173+ 6928
1174+ 6928              //  ______________________________________________________________________
1175+ 6928              //
1176+ 6928              // 0=           n -- f
1177+ 6928              // true (non zero) if n is zero, false (0) elsewere
1178+ 6928                              New_Def ZEQUAL, "0=", is_code, is_normal
1178+ 6928             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1178+ 6928             >
1178+ 6928             >                // dummy db directives used to calculate length of namec
1178+ 6928 30 3D       >                db      "0="
1178+ 692A             >len_NFA         defl    $ - temp_NFA
1178+ 692A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1178+ 6928             >
1178+ 6928 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1178+ 6929 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1178+ 692B             >                org     $-1                 // alter last byte of Name just above to set
1178+ 692A BD          >                db      {b $} | END_BIT     // msb as name end
1178+ 692B             >
1178+ 692B 21 69       >                dw      last_NFA            // Link to previous definition Name
1178+ 692D             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1178+ 692D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1178+ 692D ~           >
1178+ 692D ~           >
1178+ 692D             >                endif           ; ok        // for other definitions it "points" the correct handler
1178+ 692D             >                // Use of "; ok" to suppress "warning[fwdref]"
1178+ 692D             >
1178+ 692D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1179+ 692D              Zero_Equal:
1180+ 692D E1                           pop     hl
1181+ 692E 7D                           ld      a, l
1182+ 692F B4                           or      h
1183+ 6930 21 00 00                     ld      hl, FALSE_FLAG
1184+ 6933 20 01                        jr      nz, ZEqual_Skip
1185+ 6935 2B                               dec     hl
1186+ 6936              ZEqual_Skip:
1187+ 6936                              psh1
1187+ 6936 E5          >                push    hl
1187+ 6937 DD E9       >                jp      (ix)
1188+ 6939
1189+ 6939              //  ______________________________________________________________________
1190+ 6939              //
1191+ 6939              // not         a1 -- a2
1192+ 6939              // increment by 2 top of stack
1193+ 6939                              New_Def NOT_OP, "NOT", is_code, is_normal
1193+ 6939             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1193+ 6939             >
1193+ 6939             >                // dummy db directives used to calculate length of namec
1193+ 6939 4E 4F 54    >                db      "NOT"
1193+ 693C             >len_NFA         defl    $ - temp_NFA
1193+ 693C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1193+ 6939             >
1193+ 6939 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1193+ 693A 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1193+ 693D             >                org     $-1                 // alter last byte of Name just above to set
1193+ 693C D4          >                db      {b $} | END_BIT     // msb as name end
1193+ 693D             >
1193+ 693D 28 69       >                dw      last_NFA            // Link to previous definition Name
1193+ 693F             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1193+ 693F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1193+ 693F ~           >
1193+ 693F ~           >
1193+ 693F             >                endif           ; ok        // for other definitions it "points" the correct handler
1193+ 693F             >                // Use of "; ok" to suppress "warning[fwdref]"
1193+ 693F             >
1193+ 693F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1194+ 693F C3 2D 69                     jp      Zero_Equal
1195+ 6942
1196+ 6942              //  ______________________________________________________________________
1197+ 6942              //
1198+ 6942              // 0<           n -- f
1199+ 6942              // true (non zero) if n is less than zero, false (0) elsewere
1200+ 6942                              New_Def ZLESS, "0<", is_code, is_normal
1200+ 6942             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 6942             >
1200+ 6942             >                // dummy db directives used to calculate length of namec
1200+ 6942 30 3C       >                db      "0<"
1200+ 6944             >len_NFA         defl    $ - temp_NFA
1200+ 6944             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 6942             >
1200+ 6942 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 6943 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1200+ 6945             >                org     $-1                 // alter last byte of Name just above to set
1200+ 6944 BC          >                db      {b $} | END_BIT     // msb as name end
1200+ 6945             >
1200+ 6945 39 69       >                dw      last_NFA            // Link to previous definition Name
1200+ 6947             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 6947 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1200+ 6947 ~           >
1200+ 6947 ~           >
1200+ 6947             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 6947             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 6947             >
1200+ 6947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 6947 E1                           pop     hl
1202+ 6948 29                           add     hl, hl
1203+ 6949 21 00 00                     ld      hl, 0
1204+ 694C 30 01                        jr      nc, ZLess_Skip
1205+ 694E 2B                               dec     hl
1206+ 694F              ZLess_Skip:
1207+ 694F                              psh1
1207+ 694F E5          >                push    hl
1207+ 6950 DD E9       >                jp      (ix)
1208+ 6952
1209+ 6952              //  ______________________________________________________________________
1210+ 6952              //
1211+ 6952              // 0>           n -- f
1212+ 6952              // true (non zero) if n is less than zero, false (0) elsewere
1213+ 6952                              New_Def ZGREATER, "0>", is_code, is_normal
1213+ 6952             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1213+ 6952             >
1213+ 6952             >                // dummy db directives used to calculate length of namec
1213+ 6952 30 3E       >                db      "0>"
1213+ 6954             >len_NFA         defl    $ - temp_NFA
1213+ 6954             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1213+ 6952             >
1213+ 6952 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1213+ 6953 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1213+ 6955             >                org     $-1                 // alter last byte of Name just above to set
1213+ 6954 BE          >                db      {b $} | END_BIT     // msb as name end
1213+ 6955             >
1213+ 6955 42 69       >                dw      last_NFA            // Link to previous definition Name
1213+ 6957             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1213+ 6957 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1213+ 6957 ~           >
1213+ 6957 ~           >
1213+ 6957             >                endif           ; ok        // for other definitions it "points" the correct handler
1213+ 6957             >                // Use of "; ok" to suppress "warning[fwdref]"
1213+ 6957             >
1213+ 6957             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1214+ 6957 E1                           pop     hl
1215+ 6958 7D                           ld      a, l
1216+ 6959 B4                           or      h
1217+ 695A 29                           add     hl, hl
1218+ 695B 21 00 00                     ld      hl, FALSE_FLAG
1219+ 695E 38 04                        jr      c, ZGreater_Skip
1220+ 6960 A7                               and     a
1221+ 6961 28 01                            jr      z, ZGreater_Skip
1222+ 6963 2B                                   dec     hl
1223+ 6964              ZGreater_Skip:
1224+ 6964                              psh1
1224+ 6964 E5          >                push    hl
1224+ 6965 DD E9       >                jp      (ix)
1225+ 6967
1226+ 6967              //  ______________________________________________________________________
1227+ 6967              //
1228+ 6967              // +            n1 n2 -- n3
1229+ 6967              // returns the unsigned sum of two top values
1230+ 6967                              New_Def PLUS, "+", is_code, is_normal
1230+ 6967             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1230+ 6967             >
1230+ 6967             >                // dummy db directives used to calculate length of namec
1230+ 6967 2B          >                db      "+"
1230+ 6968             >len_NFA         defl    $ - temp_NFA
1230+ 6968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1230+ 6967             >
1230+ 6967 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1230+ 6968 2B          >                db      "+"               // name string in 7-bit ascii, but
1230+ 6969             >                org     $-1                 // alter last byte of Name just above to set
1230+ 6968 AB          >                db      {b $} | END_BIT     // msb as name end
1230+ 6969             >
1230+ 6969 52 69       >                dw      last_NFA            // Link to previous definition Name
1230+ 696B             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1230+ 696B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1230+ 696B ~           >
1230+ 696B ~           >
1230+ 696B             >                endif           ; ok        // for other definitions it "points" the correct handler
1230+ 696B             >                // Use of "; ok" to suppress "warning[fwdref]"
1230+ 696B             >
1230+ 696B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1231+ 696B E1                           pop     hl
1232+ 696C D1                           pop     de
1233+ 696D 19                           add     hl, de
1234+ 696E
1235+ 696E                              psh1
1235+ 696E E5          >                push    hl
1235+ 696F DD E9       >                jp      (ix)
1236+ 6971
1237+ 6971
1238+ 6971              //  ______________________________________________________________________
1239+ 6971              //
1240+ 6971              // d+           d1 d2 -- d3
1241+ 6971              // returns the unsigned sum of two top double-numbers
1242+ 6971              //      d2  d1
1243+ 6971              //      h l h l
1244+ 6971              // SP   LHEDLHED
1245+ 6971              // SP  +01234567
1246+ 6971                              New_Def DPLUS, "D+", is_code, is_normal
1246+ 6971             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ 6971             >
1246+ 6971             >                // dummy db directives used to calculate length of namec
1246+ 6971 44 2B       >                db      "D+"
1246+ 6973             >len_NFA         defl    $ - temp_NFA
1246+ 6973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ 6971             >
1246+ 6971 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ 6972 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1246+ 6974             >                org     $-1                 // alter last byte of Name just above to set
1246+ 6973 AB          >                db      {b $} | END_BIT     // msb as name end
1246+ 6974             >
1246+ 6974 67 69       >                dw      last_NFA            // Link to previous definition Name
1246+ 6976             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 6976 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1246+ 6976 ~           >
1246+ 6976 ~           >
1246+ 6976             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 6976             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 6976             >
1246+ 6976             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 6976
1248+ 6976 21 07 00                     ld      hl, 7
1249+ 6979 39                           add     hl, sp
1250+ 697A 56                           ld      d, (hl)
1251+ 697B 70                           ld      (hl), b             // Save IP
1252+ 697C 2B                           dec     hl
1253+ 697D 5E                           ld      e, (hl)
1254+ 697E 71                           ld      (hl), c             // de := d1.L
1255+ 697F C1                           pop     bc                  // bc := d2.H
1256+ 6980 E1                           pop     hl                  // hl := d2.L
1257+ 6981 19                           add     hl, de              // hl := d2.L + d1.L
1258+ 6982 EB                           ex      de, hl              // de := lower
1259+ 6983 E1                           pop     hl                  // d1.H
1260+ 6984 ED 4A                        adc     hl, bc              // d1.H + d2.H
1261+ 6986 C1                           pop     bc                  // Restore IP
1262+ 6987
1263+ 6987
1264+ 6987                              psh2
1264+ 6987 D5          >                push    de
1264+ 6988 E5          >                push    hl
1264+ 6989 DD E9       >                jp      (ix)
1265+ 698B
1266+ 698B              //  ______________________________________________________________________
1267+ 698B              //
1268+ 698B              // 1+           n1 -- n2
1269+ 698B              // increment by 1 top of stack
1270+ 698B                              New_Def ONE_PLUS, "1+", is_code, is_normal
1270+ 698B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 698B             >
1270+ 698B             >                // dummy db directives used to calculate length of namec
1270+ 698B 31 2B       >                db      "1+"
1270+ 698D             >len_NFA         defl    $ - temp_NFA
1270+ 698D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 698B             >
1270+ 698B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 698C 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1270+ 698E             >                org     $-1                 // alter last byte of Name just above to set
1270+ 698D AB          >                db      {b $} | END_BIT     // msb as name end
1270+ 698E             >
1270+ 698E 71 69       >                dw      last_NFA            // Link to previous definition Name
1270+ 6990             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 6990 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1270+ 6990 ~           >
1270+ 6990 ~           >
1270+ 6990             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 6990             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 6990             >
1270+ 6990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 6990 E1                           pop     hl
1272+ 6991 23                           inc     hl
1273+ 6992
1274+ 6992                              psh1
1274+ 6992 E5          >                push    hl
1274+ 6993 DD E9       >                jp      (ix)
1275+ 6995
1276+ 6995              //  ______________________________________________________________________
1277+ 6995              //
1278+ 6995              // 1-           n1 -- n2
1279+ 6995              // decrement by 1 top of stack
1280+ 6995                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1280+ 6995             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1280+ 6995             >
1280+ 6995             >                // dummy db directives used to calculate length of namec
1280+ 6995 31 2D       >                db      "1-"
1280+ 6997             >len_NFA         defl    $ - temp_NFA
1280+ 6997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1280+ 6995             >
1280+ 6995 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1280+ 6996 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1280+ 6998             >                org     $-1                 // alter last byte of Name just above to set
1280+ 6997 AD          >                db      {b $} | END_BIT     // msb as name end
1280+ 6998             >
1280+ 6998 8B 69       >                dw      last_NFA            // Link to previous definition Name
1280+ 699A             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1280+ 699A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1280+ 699A ~           >
1280+ 699A ~           >
1280+ 699A             >                endif           ; ok        // for other definitions it "points" the correct handler
1280+ 699A             >                // Use of "; ok" to suppress "warning[fwdref]"
1280+ 699A             >
1280+ 699A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1281+ 699A E1                           pop     hl
1282+ 699B 2B                           dec     hl
1283+ 699C
1284+ 699C                              psh1
1284+ 699C E5          >                push    hl
1284+ 699D DD E9       >                jp      (ix)
1285+ 699F
1286+ 699F              //  ______________________________________________________________________
1287+ 699F              //
1288+ 699F              // 2+           n1 -- n2
1289+ 699F              // increment by 2 top of stack
1290+ 699F                              New_Def TWO_PLUS, "2+", is_code, is_normal
1290+ 699F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1290+ 699F             >
1290+ 699F             >                // dummy db directives used to calculate length of namec
1290+ 699F 32 2B       >                db      "2+"
1290+ 69A1             >len_NFA         defl    $ - temp_NFA
1290+ 69A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1290+ 699F             >
1290+ 699F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1290+ 69A0 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1290+ 69A2             >                org     $-1                 // alter last byte of Name just above to set
1290+ 69A1 AB          >                db      {b $} | END_BIT     // msb as name end
1290+ 69A2             >
1290+ 69A2 95 69       >                dw      last_NFA            // Link to previous definition Name
1290+ 69A4             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1290+ 69A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1290+ 69A4 ~           >
1290+ 69A4 ~           >
1290+ 69A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1290+ 69A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1290+ 69A4             >
1290+ 69A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1291+ 69A4              Two_Plus:
1292+ 69A4 E1                           pop     hl
1293+ 69A5 23                           inc     hl
1294+ 69A6 23                           inc     hl
1295+ 69A7
1296+ 69A7                              psh1
1296+ 69A7 E5          >                push    hl
1296+ 69A8 DD E9       >                jp      (ix)
1297+ 69AA
1298+ 69AA              //  ______________________________________________________________________
1299+ 69AA              //
1300+ 69AA              // cell+        a1 -- a2
1301+ 69AA              // increment by 2 top of stack
1302+ 69AA                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1302+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69AA             >
1302+ 69AA             >                // dummy db directives used to calculate length of namec
1302+ 69AA 43 45 4C 4C >                db      "CELL+"
1302+ 69AE 2B          >
1302+ 69AF             >len_NFA         defl    $ - temp_NFA
1302+ 69AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69AA             >
1302+ 69AA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69AB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1302+ 69AF 2B          >
1302+ 69B0             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69AF AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69B0             >
1302+ 69B0 9F 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69B2             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69B2 ~           >
1302+ 69B2 ~           >
1302+ 69B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69B2             >
1302+ 69B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69B2 C3 A4 69                     jp      Two_Plus
1304+ 69B5
1305+ 69B5              //  ______________________________________________________________________
1306+ 69B5              //
1307+ 69B5              // align        a1 -- a2
1308+ 69B5              // align memory : not used
1309+ 69B5              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1310+ 69B5              //            next
1311+ 69B5
1312+ 69B5              //  ______________________________________________________________________
1313+ 69B5              //
1314+ 69B5              // cell-        a1 -- a2
1315+ 69B5              // decrement by 2 top of stack
1316+ 69B5                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1316+ 69B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1316+ 69B5             >
1316+ 69B5             >                // dummy db directives used to calculate length of namec
1316+ 69B5 43 45 4C 4C >                db      "CELL-"
1316+ 69B9 2D          >
1316+ 69BA             >len_NFA         defl    $ - temp_NFA
1316+ 69BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1316+ 69B5             >
1316+ 69B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1316+ 69B6 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1316+ 69BA 2D          >
1316+ 69BB             >                org     $-1                 // alter last byte of Name just above to set
1316+ 69BA AD          >                db      {b $} | END_BIT     // msb as name end
1316+ 69BB             >
1316+ 69BB AA 69       >                dw      last_NFA            // Link to previous definition Name
1316+ 69BD             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1316+ 69BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1316+ 69BD ~           >
1316+ 69BD ~           >
1316+ 69BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1316+ 69BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1316+ 69BD             >
1316+ 69BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1317+ 69BD              CellMinus:
1318+ 69BD E1                           pop     hl
1319+ 69BE 2B                           dec     hl
1320+ 69BF 2B                           dec     hl
1321+ 69C0
1322+ 69C0                              psh1
1322+ 69C0 E5          >                push    hl
1322+ 69C1 DD E9       >                jp      (ix)
1323+ 69C3
1324+ 69C3              //  ______________________________________________________________________
1325+ 69C3              //
1326+ 69C3              // 2-           a1 -- a2
1327+ 69C3              // decrement by 2 top of stack
1328+ 69C3                              New_Def TWO_MINUS, "2-", is_code, is_normal
1328+ 69C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1328+ 69C3             >
1328+ 69C3             >                // dummy db directives used to calculate length of namec
1328+ 69C3 32 2D       >                db      "2-"
1328+ 69C5             >len_NFA         defl    $ - temp_NFA
1328+ 69C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1328+ 69C3             >
1328+ 69C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1328+ 69C4 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1328+ 69C6             >                org     $-1                 // alter last byte of Name just above to set
1328+ 69C5 AD          >                db      {b $} | END_BIT     // msb as name end
1328+ 69C6             >
1328+ 69C6 B5 69       >                dw      last_NFA            // Link to previous definition Name
1328+ 69C8             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1328+ 69C8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1328+ 69C8 ~           >
1328+ 69C8 ~           >
1328+ 69C8             >                endif           ; ok        // for other definitions it "points" the correct handler
1328+ 69C8             >                // Use of "; ok" to suppress "warning[fwdref]"
1328+ 69C8             >
1328+ 69C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1329+ 69C8 C3 BD 69                     jp      CellMinus
1330+ 69CB
1331+ 69CB              //  ______________________________________________________________________
1332+ 69CB              //
1333+ 69CB              // negate       n1 -- n2
1334+ 69CB              // change the sign of number
1335+ 69CB                              New_Def MINUS, "NEGATE", is_code, is_normal
1335+ 69CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1335+ 69CB             >
1335+ 69CB             >                // dummy db directives used to calculate length of namec
1335+ 69CB 4E 45 47 41 >                db      "NEGATE"
1335+ 69CF 54 45       >
1335+ 69D1             >len_NFA         defl    $ - temp_NFA
1335+ 69D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1335+ 69CB             >
1335+ 69CB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1335+ 69CC 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1335+ 69D0 54 45       >
1335+ 69D2             >                org     $-1                 // alter last byte of Name just above to set
1335+ 69D1 C5          >                db      {b $} | END_BIT     // msb as name end
1335+ 69D2             >
1335+ 69D2 C3 69       >                dw      last_NFA            // Link to previous definition Name
1335+ 69D4             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1335+ 69D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1335+ 69D4 ~           >
1335+ 69D4 ~           >
1335+ 69D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1335+ 69D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1335+ 69D4             >
1335+ 69D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1336+ 69D4 21 00 00                     ld      hl, 0               // subtract from 0
1337+ 69D7 D1                           pop     de
1338+ 69D8 B7                           or      a
1339+ 69D9 ED 52                        sbc     hl, de
1340+ 69DB
1341+ 69DB                              psh1
1341+ 69DB E5          >                push    hl
1341+ 69DC DD E9       >                jp      (ix)
1342+ 69DE
1343+ 69DE              //  ______________________________________________________________________
1344+ 69DE              //
1345+ 69DE              // dminus       d1 -- d2
1346+ 69DE              // change the sign of a double number
1347+ 69DE                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1347+ 69DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ 69DE             >
1347+ 69DE             >                // dummy db directives used to calculate length of namec
1347+ 69DE 44 4E 45 47 >                db      "DNEGATE"
1347+ 69E2 41 54 45    >
1347+ 69E5             >len_NFA         defl    $ - temp_NFA
1347+ 69E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ 69DE             >
1347+ 69DE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ 69DF 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1347+ 69E3 41 54 45    >
1347+ 69E6             >                org     $-1                 // alter last byte of Name just above to set
1347+ 69E5 C5          >                db      {b $} | END_BIT     // msb as name end
1347+ 69E6             >
1347+ 69E6 CB 69       >                dw      last_NFA            // Link to previous definition Name
1347+ 69E8             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 69E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1347+ 69E8 ~           >
1347+ 69E8 ~           >
1347+ 69E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 69E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 69E8             >
1347+ 69E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 69E8 E1                           pop     hl                  // d1.H
1349+ 69E9 D1                           pop     de                  // d1.L
1350+ 69EA C5                           push    bc                  // Save Instruction Pointer
1351+ 69EB 44                           ld      b, h
1352+ 69EC 4D                           ld      c, l                // bc := d1.L
1353+ 69ED AF                           xor     a
1354+ 69EE 67                           ld      h, a
1355+ 69EF 6F                           ld      l, a
1356+ 69F0 ED 52                        sbc     hl, de              // subtact from zero
1357+ 69F2 D1                           pop     de                  // Retrieve Instruction Pointer
1358+ 69F3 E5                           push    hl                  // > d2-L
1359+ 69F4 67                           ld      h, a
1360+ 69F5 6F                           ld      l, a
1361+ 69F6 ED 42                        sbc     hl, bc              // subtract from zero with carry
1362+ 69F8                                                          // > d2-H
1363+ 69F8 42                           ld      b, d
1364+ 69F9 4B                           ld      c, e
1365+ 69FA                              psh1
1365+ 69FA E5          >                push    hl
1365+ 69FB DD E9       >                jp      (ix)
1366+ 69FD
1367+ 69FD              //  ______________________________________________________________________
1368+ 69FD              //
1369+ 69FD              // over         n1 n2 -- n1 n2 n1
1370+ 69FD              // copy the second value of stack and put it on top.
1371+ 69FD                              New_Def OVER, "OVER", is_code, is_normal
1371+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ 69FD             >
1371+ 69FD             >                // dummy db directives used to calculate length of namec
1371+ 69FD 4F 56 45 52 >                db      "OVER"
1371+ 6A01             >len_NFA         defl    $ - temp_NFA
1371+ 6A01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ 69FD             >
1371+ 69FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ 69FE 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1371+ 6A02             >                org     $-1                 // alter last byte of Name just above to set
1371+ 6A01 D2          >                db      {b $} | END_BIT     // msb as name end
1371+ 6A02             >
1371+ 6A02 DE 69       >                dw      last_NFA            // Link to previous definition Name
1371+ 6A04             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1371+ 6A04 ~           >
1371+ 6A04 ~           >
1371+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 6A04             >
1371+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 6A04 D1                           pop     de                  //   n2
1373+ 6A05 E1                           pop     hl                  // < n1
1374+ 6A06 E5                           push    hl                  // > n1
1375+ 6A07 D5                           push    de                  // > n2
1376+ 6A08 E5                           push    hl                  // > n1
1377+ 6A09                              next
1377+ 6A09 DD E9       >                jp      (ix)
1378+ 6A0B
1379+ 6A0B              //  ______________________________________________________________________
1380+ 6A0B              //
1381+ 6A0B              // drop         n1 --
1382+ 6A0B              // drops the top of stack
1383+ 6A0B                              New_Def DROP, "DROP", is_code, is_normal
1383+ 6A0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1383+ 6A0B             >
1383+ 6A0B             >                // dummy db directives used to calculate length of namec
1383+ 6A0B 44 52 4F 50 >                db      "DROP"
1383+ 6A0F             >len_NFA         defl    $ - temp_NFA
1383+ 6A0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1383+ 6A0B             >
1383+ 6A0B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1383+ 6A0C 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1383+ 6A10             >                org     $-1                 // alter last byte of Name just above to set
1383+ 6A0F D0          >                db      {b $} | END_BIT     // msb as name end
1383+ 6A10             >
1383+ 6A10 FD 69       >                dw      last_NFA            // Link to previous definition Name
1383+ 6A12             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1383+ 6A12 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1383+ 6A12 ~           >
1383+ 6A12 ~           >
1383+ 6A12             >                endif           ; ok        // for other definitions it "points" the correct handler
1383+ 6A12             >                // Use of "; ok" to suppress "warning[fwdref]"
1383+ 6A12             >
1383+ 6A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1384+ 6A12 E1                           pop     hl                  // < n1 and discard previous TOS
1385+ 6A13                              next
1385+ 6A13 DD E9       >                jp      (ix)
1386+ 6A15
1387+ 6A15              //  ______________________________________________________________________
1388+ 6A15              //
1389+ 6A15              // nip          n1 n2 -- n2
1390+ 6A15              // drops the second elemento on the stack
1391+ 6A15                              New_Def NIP, "NIP", is_code, is_normal
1391+ 6A15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1391+ 6A15             >
1391+ 6A15             >                // dummy db directives used to calculate length of namec
1391+ 6A15 4E 49 50    >                db      "NIP"
1391+ 6A18             >len_NFA         defl    $ - temp_NFA
1391+ 6A18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1391+ 6A15             >
1391+ 6A15 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1391+ 6A16 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1391+ 6A19             >                org     $-1                 // alter last byte of Name just above to set
1391+ 6A18 D0          >                db      {b $} | END_BIT     // msb as name end
1391+ 6A19             >
1391+ 6A19 0B 6A       >                dw      last_NFA            // Link to previous definition Name
1391+ 6A1B             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1391+ 6A1B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1391+ 6A1B ~           >
1391+ 6A1B ~           >
1391+ 6A1B             >                endif           ; ok        // for other definitions it "points" the correct handler
1391+ 6A1B             >                // Use of "; ok" to suppress "warning[fwdref]"
1391+ 6A1B             >
1391+ 6A1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1392+ 6A1B
1393+ 6A1B E1                           pop     hl                  // < n1 discarded
1394+ 6A1C E3                           ex      (sp), hl
1395+ 6A1D                              next
1395+ 6A1D DD E9       >                jp      (ix)
1396+ 6A1F
1397+ 6A1F              //  ______________________________________________________________________
1398+ 6A1F              //
1399+ 6A1F              // tuck         n1 n2 -- n2 n1 n2
1400+ 6A1F              // copy the top element after the second.
1401+ 6A1F                              New_Def TUCK, "TUCK", is_code, is_normal
1401+ 6A1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1401+ 6A1F             >
1401+ 6A1F             >                // dummy db directives used to calculate length of namec
1401+ 6A1F 54 55 43 4B >                db      "TUCK"
1401+ 6A23             >len_NFA         defl    $ - temp_NFA
1401+ 6A23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1401+ 6A1F             >
1401+ 6A1F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1401+ 6A20 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1401+ 6A24             >                org     $-1                 // alter last byte of Name just above to set
1401+ 6A23 CB          >                db      {b $} | END_BIT     // msb as name end
1401+ 6A24             >
1401+ 6A24 15 6A       >                dw      last_NFA            // Link to previous definition Name
1401+ 6A26             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1401+ 6A26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1401+ 6A26 ~           >
1401+ 6A26 ~           >
1401+ 6A26             >                endif           ; ok        // for other definitions it "points" the correct handler
1401+ 6A26             >                // Use of "; ok" to suppress "warning[fwdref]"
1401+ 6A26             >
1401+ 6A26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1402+ 6A26 E1                           pop     hl
1403+ 6A27 D1                           pop     de                  // < n1
1404+ 6A28 E5                           push    hl                  // > n2  and TOS
1405+ 6A29 D5                           push    de                  // > n1
1406+ 6A2A E5                           push    hl
1407+ 6A2B                              next
1407+ 6A2B DD E9       >                jp      (ix)
1408+ 6A2D
1409+ 6A2D              //  ______________________________________________________________________
1410+ 6A2D              //
1411+ 6A2D              // swap         n1 n2 -- n2 n1
1412+ 6A2D              // swaps the two values on top of stack
1413+ 6A2D                              New_Def SWAP, "SWAP", is_code, is_normal
1413+ 6A2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1413+ 6A2D             >
1413+ 6A2D             >                // dummy db directives used to calculate length of namec
1413+ 6A2D 53 57 41 50 >                db      "SWAP"
1413+ 6A31             >len_NFA         defl    $ - temp_NFA
1413+ 6A31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1413+ 6A2D             >
1413+ 6A2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1413+ 6A2E 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1413+ 6A32             >                org     $-1                 // alter last byte of Name just above to set
1413+ 6A31 D0          >                db      {b $} | END_BIT     // msb as name end
1413+ 6A32             >
1413+ 6A32 1F 6A       >                dw      last_NFA            // Link to previous definition Name
1413+ 6A34             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1413+ 6A34 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1413+ 6A34 ~           >
1413+ 6A34 ~           >
1413+ 6A34             >                endif           ; ok        // for other definitions it "points" the correct handler
1413+ 6A34             >                // Use of "; ok" to suppress "warning[fwdref]"
1413+ 6A34             >
1413+ 6A34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1414+ 6A34 E1                           pop     hl                  // < n1
1415+ 6A35 E3                           ex      (sp),hl             // > n2
1416+ 6A36 E5                           push    hl                  // copy n1 to TOS
1417+ 6A37                              next
1417+ 6A37 DD E9       >                jp      (ix)
1418+ 6A39
1419+ 6A39              //  ______________________________________________________________________
1420+ 6A39              //
1421+ 6A39              // dup         n -- n n
1422+ 6A39              // duplicates the top value of stack
1423+ 6A39                              New_Def DUP, "DUP", is_code, is_normal
1423+ 6A39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1423+ 6A39             >
1423+ 6A39             >                // dummy db directives used to calculate length of namec
1423+ 6A39 44 55 50    >                db      "DUP"
1423+ 6A3C             >len_NFA         defl    $ - temp_NFA
1423+ 6A3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1423+ 6A39             >
1423+ 6A39 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1423+ 6A3A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1423+ 6A3D             >                org     $-1                 // alter last byte of Name just above to set
1423+ 6A3C D0          >                db      {b $} | END_BIT     // msb as name end
1423+ 6A3D             >
1423+ 6A3D 2D 6A       >                dw      last_NFA            // Link to previous definition Name
1423+ 6A3F             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1423+ 6A3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1423+ 6A3F ~           >
1423+ 6A3F ~           >
1423+ 6A3F             >                endif           ; ok        // for other definitions it "points" the correct handler
1423+ 6A3F             >                // Use of "; ok" to suppress "warning[fwdref]"
1423+ 6A3F             >
1423+ 6A3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1424+ 6A3F E1                           pop     hl
1425+ 6A40 E5                           push    hl                  // > n duplicate TOS
1426+ 6A41 E5                           push    hl
1427+ 6A42                              next
1427+ 6A42 DD E9       >                jp      (ix)
1428+ 6A44
1429+ 6A44              //  ______________________________________________________________________
1430+ 6A44              //
1431+ 6A44              // rot         n1 n2 n3 -- n2 n3 n1
1432+ 6A44              // Rotates the 3 top values of stack by picking the 3rd in access-order
1433+ 6A44              // and putting it on top. The other two are shifted down one place.
1434+ 6A44                              New_Def ROT, "ROT", is_code, is_normal
1434+ 6A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ 6A44             >
1434+ 6A44             >                // dummy db directives used to calculate length of namec
1434+ 6A44 52 4F 54    >                db      "ROT"
1434+ 6A47             >len_NFA         defl    $ - temp_NFA
1434+ 6A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ 6A44             >
1434+ 6A44 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ 6A45 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1434+ 6A48             >                org     $-1                 // alter last byte of Name just above to set
1434+ 6A47 D4          >                db      {b $} | END_BIT     // msb as name end
1434+ 6A48             >
1434+ 6A48 39 6A       >                dw      last_NFA            // Link to previous definition Name
1434+ 6A4A             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 6A4A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1434+ 6A4A ~           >
1434+ 6A4A ~           >
1434+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 6A4A             >
1434+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 6A4A D1                           pop     de                  // < n3
1436+ 6A4B E1                           pop     hl                  // < n2
1437+ 6A4C E3                           ex      (sp),hl             // > n2 < n1
1438+ 6A4D D5                           push    de                  // > n3
1439+ 6A4E E5                           push    hl                  // copy n1 to TOS
1440+ 6A4F                              next
1440+ 6A4F DD E9       >                jp      (ix)
1441+ 6A51
1442+ 6A51              //  ______________________________________________________________________
1443+ 6A51              //
1444+ 6A51              // -rot         n1 n2 n3 -- n3 n1 n2
1445+ 6A51              // Rotates the 3 top values of stack by picking the 1st in access-order
1446+ 6A51              // and putting back to 3rd place. The other two are shifted down one place.
1447+ 6A51                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1447+ 6A51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1447+ 6A51             >
1447+ 6A51             >                // dummy db directives used to calculate length of namec
1447+ 6A51 2D 52 4F 54 >                db      "-ROT"
1447+ 6A55             >len_NFA         defl    $ - temp_NFA
1447+ 6A55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1447+ 6A51             >
1447+ 6A51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1447+ 6A52 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1447+ 6A56             >                org     $-1                 // alter last byte of Name just above to set
1447+ 6A55 D4          >                db      {b $} | END_BIT     // msb as name end
1447+ 6A56             >
1447+ 6A56 44 6A       >                dw      last_NFA            // Link to previous definition Name
1447+ 6A58             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1447+ 6A58 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1447+ 6A58 ~           >
1447+ 6A58 ~           >
1447+ 6A58             >                endif           ; ok        // for other definitions it "points" the correct handler
1447+ 6A58             >                // Use of "; ok" to suppress "warning[fwdref]"
1447+ 6A58             >
1447+ 6A58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1448+ 6A58 E1                           pop     hl                  // < n3
1449+ 6A59 D1                           pop     de                  // < n2
1450+ 6A5A E3                           ex      (sp),hl             // > n3 < n1
1451+ 6A5B E5                           push    hl                  // > n1
1452+ 6A5C D5                           push    de                  // copy n3 to TOS
1453+ 6A5D                              next
1453+ 6A5D DD E9       >                jp      (ix)
1454+ 6A5F
1455+ 6A5F              //  ______________________________________________________________________
1456+ 6A5F              //
1457+ 6A5F              // pick        n1 -- nx
1458+ 6A5F              // picks the nth element from TOS
1459+ 6A5F                              New_Def PICK, "PICK", is_code, is_normal
1459+ 6A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ 6A5F             >
1459+ 6A5F             >                // dummy db directives used to calculate length of namec
1459+ 6A5F 50 49 43 4B >                db      "PICK"
1459+ 6A63             >len_NFA         defl    $ - temp_NFA
1459+ 6A63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ 6A5F             >
1459+ 6A5F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ 6A60 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1459+ 6A64             >                org     $-1                 // alter last byte of Name just above to set
1459+ 6A63 CB          >                db      {b $} | END_BIT     // msb as name end
1459+ 6A64             >
1459+ 6A64 51 6A       >                dw      last_NFA            // Link to previous definition Name
1459+ 6A66             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 6A66 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1459+ 6A66 ~           >
1459+ 6A66 ~           >
1459+ 6A66             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 6A66             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 6A66             >
1459+ 6A66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 6A66 E1                           pop     hl                  // take TOS as index
1461+ 6A67 29                           add     hl, hl              // as cells
1462+ 6A68 39                           add     hl, sp              // from Stack Pointer
1463+ 6A69 7E                           ld      a, (hl)             // replace TOS
1464+ 6A6A 23                           inc     hl
1465+ 6A6B 66                           ld      h, (hl)
1466+ 6A6C 6F                           ld      l, a
1467+ 6A6D
1468+ 6A6D                              psh1
1468+ 6A6D E5          >                push    hl
1468+ 6A6E DD E9       >                jp      (ix)
1469+ 6A70
1470+ 6A70
1471+ 6A70              //  ______________________________________________________________________
1472+ 6A70              //
1473+ 6A70              // 2over        d1 d2 -- d1 d2 d1
1474+ 6A70              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1475+ 6A70              // copy the second double of stack and put on top.
1476+ 6A70              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1477+ 6A70              //
1478+ 6A70              //              ld      hl, 7
1479+ 6A70              //              add     hl, sp
1480+ 6A70              //              ld      d, (hl)
1481+ 6A70              //              dec     hl
1482+ 6A70              //              ld      e, (hl)             // d1-L
1483+ 6A70              //              push    de
1484+ 6A70              //              dec     hl
1485+ 6A70              //              ld      d, (hl)
1486+ 6A70              //              dec     hl
1487+ 6A70              //              ld      e, (hl)             // d1-H
1488+ 6A70              //              push    de
1489+ 6A70              //              next
1490+ 6A70
1491+ 6A70              //  ______________________________________________________________________
1492+ 6A70              //
1493+ 6A70              // 2drop        d --
1494+ 6A70              //              n1 n2 --
1495+ 6A70              // drops the top double from stack
1496+ 6A70                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1496+ 6A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1496+ 6A70             >
1496+ 6A70             >                // dummy db directives used to calculate length of namec
1496+ 6A70 32 44 52 4F >                db      "2DROP"
1496+ 6A74 50          >
1496+ 6A75             >len_NFA         defl    $ - temp_NFA
1496+ 6A75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1496+ 6A70             >
1496+ 6A70 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1496+ 6A71 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1496+ 6A75 50          >
1496+ 6A76             >                org     $-1                 // alter last byte of Name just above to set
1496+ 6A75 D0          >                db      {b $} | END_BIT     // msb as name end
1496+ 6A76             >
1496+ 6A76 5F 6A       >                dw      last_NFA            // Link to previous definition Name
1496+ 6A78             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1496+ 6A78 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1496+ 6A78 ~           >
1496+ 6A78 ~           >
1496+ 6A78             >                endif           ; ok        // for other definitions it "points" the correct handler
1496+ 6A78             >                // Use of "; ok" to suppress "warning[fwdref]"
1496+ 6A78             >
1496+ 6A78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1497+ 6A78 E1                           pop     hl
1498+ 6A79 E1                           pop     hl
1499+ 6A7A                              next
1499+ 6A7A DD E9       >                jp      (ix)
1500+ 6A7C
1501+ 6A7C              //  ______________________________________________________________________
1502+ 6A7C              //
1503+ 6A7C              // 2nip         d1 d2 -- d2
1504+ 6A7C              //              n1 n2 n3 n4 -- n3 n4
1505+ 6A7C              // drops the second double on the stack
1506+ 6A7C              //              New_Def TWO_NIP, 4, "2nip"
1507+ 6A7C              //              ...
1508+ 6A7C
1509+ 6A7C              //  ______________________________________________________________________
1510+ 6A7C              //
1511+ 6A7C              // 2tuck         d1 d2 -- d2 d1 d2
1512+ 6A7C              // copy the top element after the second.
1513+ 6A7C              //              New_Def TWO_TUCK, 5, "2tuck"
1514+ 6A7C              //              ...
1515+ 6A7C
1516+ 6A7C              //  ______________________________________________________________________
1517+ 6A7C              //
1518+ 6A7C              // 2swap         d1 d2 -- d2 d1
1519+ 6A7C              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1520+ 6A7C              // swaps the two doubles on top of stack
1521+ 6A7C                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1521+ 6A7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1521+ 6A7C             >
1521+ 6A7C             >                // dummy db directives used to calculate length of namec
1521+ 6A7C 32 53 57 41 >                db      "2SWAP"
1521+ 6A80 50          >
1521+ 6A81             >len_NFA         defl    $ - temp_NFA
1521+ 6A81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1521+ 6A7C             >
1521+ 6A7C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1521+ 6A7D 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1521+ 6A81 50          >
1521+ 6A82             >                org     $-1                 // alter last byte of Name just above to set
1521+ 6A81 D0          >                db      {b $} | END_BIT     // msb as name end
1521+ 6A82             >
1521+ 6A82 70 6A       >                dw      last_NFA            // Link to previous definition Name
1521+ 6A84             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1521+ 6A84 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1521+ 6A84 ~           >
1521+ 6A84 ~           >
1521+ 6A84             >                endif           ; ok        // for other definitions it "points" the correct handler
1521+ 6A84             >                // Use of "; ok" to suppress "warning[fwdref]"
1521+ 6A84             >
1521+ 6A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1522+ 6A84 F1                           pop     af                  //   d2-H
1523+ 6A85 E1                           pop     hl                  // < d2-L
1524+ 6A86 D1                           pop     de                  // < d1-H
1525+ 6A87 E3                           ex      (sp), hl            // < d1-L > d2-L
1526+ 6A88 F5                           push    af                  // > d2-H
1527+ 6A89 E5                           push    hl                  // > d1-L
1528+ 6A8A D5                           push    de
1529+ 6A8B
1530+ 6A8B                              next
1530+ 6A8B DD E9       >                jp      (ix)
1531+ 6A8D
1532+ 6A8D              //  ______________________________________________________________________
1533+ 6A8D              //
1534+ 6A8D              // 2dup         d -- d d
1535+ 6A8D              //              n1 n2 -- n1 n2 n1 n2
1536+ 6A8D              // duplicates the top double of stack
1537+ 6A8D                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1537+ 6A8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1537+ 6A8D             >
1537+ 6A8D             >                // dummy db directives used to calculate length of namec
1537+ 6A8D 32 44 55 50 >                db      "2DUP"
1537+ 6A91             >len_NFA         defl    $ - temp_NFA
1537+ 6A91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1537+ 6A8D             >
1537+ 6A8D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1537+ 6A8E 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1537+ 6A92             >                org     $-1                 // alter last byte of Name just above to set
1537+ 6A91 D0          >                db      {b $} | END_BIT     // msb as name end
1537+ 6A92             >
1537+ 6A92 7C 6A       >                dw      last_NFA            // Link to previous definition Name
1537+ 6A94             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1537+ 6A94 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1537+ 6A94 ~           >
1537+ 6A94 ~           >
1537+ 6A94             >                endif           ; ok        // for other definitions it "points" the correct handler
1537+ 6A94             >                // Use of "; ok" to suppress "warning[fwdref]"
1537+ 6A94             >
1537+ 6A94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1538+ 6A94 E1                           pop     hl                  // < d-H
1539+ 6A95 D1                           pop     de                  // < d-L
1540+ 6A96 D5                           push    de                  // < d-L
1541+ 6A97 E5                           push    hl                  // > d-H
1542+ 6A98 D5                           push    de                  // > d-L
1543+ 6A99 E5                           push    hl                  // > d-H
1544+ 6A9A                              next
1544+ 6A9A DD E9       >                jp      (ix)
1545+ 6A9C
1546+ 6A9C              //  ______________________________________________________________________
1547+ 6A9C              //
1548+ 6A9C              // 2rot         d1 d2 d3 -- d2 d3 d1
1549+ 6A9C              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1550+ 6A9C              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1551+ 6A9C              // and putting it on top. The other two are shifted down one place.
1552+ 6A9C              //              New_Def TWO?ROT, 4, "2rot"
1553+ 6A9C              //              ...
1554+ 6A9C              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1555+ 6A9C              //
1556+ 6A9C              //      d3  |d2  |d1  |
1557+ 6A9C              //      h l |h l |h l |
1558+ 6A9C              // SP   LHED|LHED|LHED|
1559+ 6A9C              // SP  +0123|4567|89ab|
1560+ 6A9C              //              ld      hl, $000B
1561+ 6A9C              //              add     hl, sp
1562+ 6A9C              //              ld      d, (hl)
1563+ 6A9C              //              dec     hl
1564+ 6A9C              //              ld      e, (hl)
1565+ 6A9C              //              dec     hl
1566+ 6A9C              //              push    de
1567+ 6A9C              //              ld      d, (hl)
1568+ 6A9C              //              dec     hl
1569+ 6A9C              //              ld      e, (hl)
1570+ 6A9C              //              dec     hl
1571+ 6A9C              //              push    de
1572+ 6A9C
1573+ 6A9C              //      d1  |d3  |d2  |d1  |
1574+ 6A9C              //      h l |h l |h l |h l |
1575+ 6A9C              // SP   LHED|LHED|LHED|LHED|
1576+ 6A9C              // SP       +0123|4567|89ab|
1577+ 6A9C
1578+ 6A9C              //              ld      d, h
1579+ 6A9C              //              ld      e, l
1580+ 6A9C              //              inc     de
1581+ 6A9C              //              inc     de
1582+ 6A9C              //              inc     de
1583+ 6A9C              //              inc     de
1584+ 6A9C              //              push    bc
1585+ 6A9C              //              ld      bc, $000C
1586+ 6A9C              //              lddr
1587+ 6A9C              //              pop     bc
1588+ 6A9C              //              pop     de
1589+ 6A9C              //              pop     de
1590+ 6A9C              //
1591+ 6A9C              //              next
1592+ 6A9C
1593+ 6A9C
1594+ 6A9C              //  ______________________________________________________________________
1595+ 6A9C              //
1596+ 6A9C              // +!           n a --
1597+ 6A9C              // Sums to the content of address a the number n.
1598+ 6A9C              // It is the same of  a @ n + a !
1599+ 6A9C                              New_Def PLUSSTORE, "+!", is_code, is_normal
1599+ 6A9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1599+ 6A9C             >
1599+ 6A9C             >                // dummy db directives used to calculate length of namec
1599+ 6A9C 2B 21       >                db      "+!"
1599+ 6A9E             >len_NFA         defl    $ - temp_NFA
1599+ 6A9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1599+ 6A9C             >
1599+ 6A9C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1599+ 6A9D 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1599+ 6A9F             >                org     $-1                 // alter last byte of Name just above to set
1599+ 6A9E A1          >                db      {b $} | END_BIT     // msb as name end
1599+ 6A9F             >
1599+ 6A9F 8D 6A       >                dw      last_NFA            // Link to previous definition Name
1599+ 6AA1             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1599+ 6AA1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1599+ 6AA1 ~           >
1599+ 6AA1 ~           >
1599+ 6AA1             >                endif           ; ok        // for other definitions it "points" the correct handler
1599+ 6AA1             >                // Use of "; ok" to suppress "warning[fwdref]"
1599+ 6AA1             >
1599+ 6AA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1600+ 6AA1 E1                           pop     hl                  // hl is the address
1601+ 6AA2 D1                           pop     de                  // de is the number
1602+ 6AA3 7E                           ld      a, (hl)
1603+ 6AA4 83                           add     e
1604+ 6AA5 77                           ld      (hl), a
1605+ 6AA6 23                           inc     hl
1606+ 6AA7 7E                           ld      a, (hl)
1607+ 6AA8 8A                           adc     d
1608+ 6AA9 77                           ld      (hl), a
1609+ 6AAA
1610+ 6AAA                              next
1610+ 6AAA DD E9       >                jp      (ix)
1611+ 6AAC
1612+ 6AAC              //  ______________________________________________________________________
1613+ 6AAC              //
1614+ 6AAC              // toggle       a n --
1615+ 6AAC              // Complements (xor) the byte at addrress  a  with the model n.
1616+ 6AAC                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1616+ 6AAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1616+ 6AAC             >
1616+ 6AAC             >                // dummy db directives used to calculate length of namec
1616+ 6AAC 54 4F 47 47 >                db      "TOGGLE"
1616+ 6AB0 4C 45       >
1616+ 6AB2             >len_NFA         defl    $ - temp_NFA
1616+ 6AB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1616+ 6AAC             >
1616+ 6AAC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1616+ 6AAD 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1616+ 6AB1 4C 45       >
1616+ 6AB3             >                org     $-1                 // alter last byte of Name just above to set
1616+ 6AB2 C5          >                db      {b $} | END_BIT     // msb as name end
1616+ 6AB3             >
1616+ 6AB3 9C 6A       >                dw      last_NFA            // Link to previous definition Name
1616+ 6AB5             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1616+ 6AB5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1616+ 6AB5 ~           >
1616+ 6AB5 ~           >
1616+ 6AB5             >                endif           ; ok        // for other definitions it "points" the correct handler
1616+ 6AB5             >                // Use of "; ok" to suppress "warning[fwdref]"
1616+ 6AB5             >
1616+ 6AB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1617+ 6AB5 D1                           pop     de
1618+ 6AB6 E1                           pop     hl
1619+ 6AB7 7E                           ld      a, (hl)
1620+ 6AB8 AB                           xor     e
1621+ 6AB9 77                           ld      (hl), a
1622+ 6ABA
1623+ 6ABA                              next
1623+ 6ABA DD E9       >                jp      (ix)
1624+ 6ABC
1625+ 6ABC              //  ______________________________________________________________________
1626+ 6ABC              //
1627+ 6ABC              // @            a -- n
1628+ 6ABC              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1629+ 6ABC                              New_Def FETCH, "@", is_code, is_normal
1629+ 6ABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1629+ 6ABC             >
1629+ 6ABC             >                // dummy db directives used to calculate length of namec
1629+ 6ABC 40          >                db      "@"
1629+ 6ABD             >len_NFA         defl    $ - temp_NFA
1629+ 6ABD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1629+ 6ABC             >
1629+ 6ABC 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1629+ 6ABD 40          >                db      "@"               // name string in 7-bit ascii, but
1629+ 6ABE             >                org     $-1                 // alter last byte of Name just above to set
1629+ 6ABD C0          >                db      {b $} | END_BIT     // msb as name end
1629+ 6ABE             >
1629+ 6ABE AC 6A       >                dw      last_NFA            // Link to previous definition Name
1629+ 6AC0             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1629+ 6AC0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1629+ 6AC0 ~           >
1629+ 6AC0 ~           >
1629+ 6AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
1629+ 6AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
1629+ 6AC0             >
1629+ 6AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1630+ 6AC0 E1                           pop     hl
1631+ 6AC1 5E                           ld      e, (hl)             // low-byte
1632+ 6AC2 23                           inc     hl
1633+ 6AC3 56                           ld      d, (hl)             // high-byte
1634+ 6AC4 D5                           push    de
1635+ 6AC5                              next
1635+ 6AC5 DD E9       >                jp      (ix)
1636+ 6AC7
1637+ 6AC7              //  ______________________________________________________________________
1638+ 6AC7              //
1639+ 6AC7              // !            n a --
1640+ 6AC7              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1641+ 6AC7                              New_Def STORE, "!", is_code, is_normal
1641+ 6AC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ 6AC7             >
1641+ 6AC7             >                // dummy db directives used to calculate length of namec
1641+ 6AC7 21          >                db      "!"
1641+ 6AC8             >len_NFA         defl    $ - temp_NFA
1641+ 6AC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ 6AC7             >
1641+ 6AC7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ 6AC8 21          >                db      "!"               // name string in 7-bit ascii, but
1641+ 6AC9             >                org     $-1                 // alter last byte of Name just above to set
1641+ 6AC8 A1          >                db      {b $} | END_BIT     // msb as name end
1641+ 6AC9             >
1641+ 6AC9 BC 6A       >                dw      last_NFA            // Link to previous definition Name
1641+ 6ACB             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6ACB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1641+ 6ACB ~           >
1641+ 6ACB ~           >
1641+ 6ACB             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6ACB             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6ACB             >
1641+ 6ACB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6ACB E1                           pop     hl                  // address
1643+ 6ACC D1                           pop     de                  // < n
1644+ 6ACD 73                           ld      (hl), e             // low-byte
1645+ 6ACE 23                           inc     hl
1646+ 6ACF 72                           ld      (hl), d             // high-byte
1647+ 6AD0
1648+ 6AD0                              next
1648+ 6AD0 DD E9       >                jp      (ix)
1649+ 6AD2
1650+ 6AD2              //  ______________________________________________________________________
1651+ 6AD2              //
1652+ 6AD2              // c@           a -- c
1653+ 6AD2              // fetch a character n from address a
1654+ 6AD2                              New_Def CFETCH, "C@", is_code, is_normal
1654+ 6AD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1654+ 6AD2             >
1654+ 6AD2             >                // dummy db directives used to calculate length of namec
1654+ 6AD2 43 40       >                db      "C@"
1654+ 6AD4             >len_NFA         defl    $ - temp_NFA
1654+ 6AD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1654+ 6AD2             >
1654+ 6AD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1654+ 6AD3 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1654+ 6AD5             >                org     $-1                 // alter last byte of Name just above to set
1654+ 6AD4 C0          >                db      {b $} | END_BIT     // msb as name end
1654+ 6AD5             >
1654+ 6AD5 C7 6A       >                dw      last_NFA            // Link to previous definition Name
1654+ 6AD7             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1654+ 6AD7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1654+ 6AD7 ~           >
1654+ 6AD7 ~           >
1654+ 6AD7             >                endif           ; ok        // for other definitions it "points" the correct handler
1654+ 6AD7             >                // Use of "; ok" to suppress "warning[fwdref]"
1654+ 6AD7             >
1654+ 6AD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1655+ 6AD7 E1                           pop     hl
1656+ 6AD8 6E                           ld      l, (hl)             // low-byte
1657+ 6AD9 26 00                        ld      h, 0
1658+ 6ADB
1659+ 6ADB                              psh1
1659+ 6ADB E5          >                push    hl
1659+ 6ADC DD E9       >                jp      (ix)
1660+ 6ADE
1661+ 6ADE              //  ______________________________________________________________________
1662+ 6ADE              //
1663+ 6ADE              // c!           c a --
1664+ 6ADE              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1665+ 6ADE                              New_Def CSTORE, "C!", is_code, is_normal
1665+ 6ADE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1665+ 6ADE             >
1665+ 6ADE             >                // dummy db directives used to calculate length of namec
1665+ 6ADE 43 21       >                db      "C!"
1665+ 6AE0             >len_NFA         defl    $ - temp_NFA
1665+ 6AE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1665+ 6ADE             >
1665+ 6ADE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1665+ 6ADF 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1665+ 6AE1             >                org     $-1                 // alter last byte of Name just above to set
1665+ 6AE0 A1          >                db      {b $} | END_BIT     // msb as name end
1665+ 6AE1             >
1665+ 6AE1 D2 6A       >                dw      last_NFA            // Link to previous definition Name
1665+ 6AE3             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1665+ 6AE3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1665+ 6AE3 ~           >
1665+ 6AE3 ~           >
1665+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
1665+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
1665+ 6AE3             >
1665+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1666+ 6AE3 E1                           pop     hl                  // < address
1667+ 6AE4 D1                           pop     de
1668+ 6AE5 73                           ld      (hl), e             // low-byte
1669+ 6AE6
1670+ 6AE6                              next
1670+ 6AE6 DD E9       >                jp      (ix)
1671+ 6AE8
1672+ 6AE8              //  ______________________________________________________________________
1673+ 6AE8              //
1674+ 6AE8              // 2@           a -- d
1675+ 6AE8              // fetch a 32 bits number d from address a and leaves it on top of the
1676+ 6AE8              // stack as two single numbers, high part as top of the stack.
1677+ 6AE8              // A double number is normally kept in CPU registers as HLDE.
1678+ 6AE8              // On stack a double number is treated as two single numbers
1679+ 6AE8              // where BC is on the top of the stack and HL is the second from top,
1680+ 6AE8              // so the sign of the number can be checked on top of stack
1681+ 6AE8              // and in the stack memory it appears as LHED.
1682+ 6AE8                              New_Def TWO_FETCH, "2@", is_code, is_normal
1682+ 6AE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1682+ 6AE8             >
1682+ 6AE8             >                // dummy db directives used to calculate length of namec
1682+ 6AE8 32 40       >                db      "2@"
1682+ 6AEA             >len_NFA         defl    $ - temp_NFA
1682+ 6AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1682+ 6AE8             >
1682+ 6AE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1682+ 6AE9 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1682+ 6AEB             >                org     $-1                 // alter last byte of Name just above to set
1682+ 6AEA C0          >                db      {b $} | END_BIT     // msb as name end
1682+ 6AEB             >
1682+ 6AEB DE 6A       >                dw      last_NFA            // Link to previous definition Name
1682+ 6AED             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1682+ 6AED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1682+ 6AED ~           >
1682+ 6AED ~           >
1682+ 6AED             >                endif           ; ok        // for other definitions it "points" the correct handler
1682+ 6AED             >                // Use of "; ok" to suppress "warning[fwdref]"
1682+ 6AED             >
1682+ 6AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1683+ 6AED E1                           pop     hl                  // address
1684+ 6AEE 5E                           ld      e, (hl)             // low-byte
1685+ 6AEF 23                           inc     hl
1686+ 6AF0 56                           ld      d, (hl)             // high-byte
1687+ 6AF1
1688+ 6AF1 23                           inc     hl
1689+ 6AF2 7E                           ld      a, (hl)             // low-byte
1690+ 6AF3 23                           inc     hl
1691+ 6AF4 66                           ld      h, (hl)             // high-byte
1692+ 6AF5 6F                           ld      l, a
1693+ 6AF6 E5                           push    hl
1694+ 6AF7 D5                           push    de
1695+ 6AF8                              next
1695+ 6AF8 DD E9       >                jp      (ix)
1696+ 6AFA
1697+ 6AFA              //  ______________________________________________________________________
1698+ 6AFA              //
1699+ 6AFA              // 2!           d a --
1700+ 6AFA              // stores a 32 bits number d from address a and leaves it on top of the
1701+ 6AFA              // stack as two single numbers, high part as top of the stack.
1702+ 6AFA              // A double number is normally kept in CPU registers as HLDE.
1703+ 6AFA              // On stack a double number is treated as two single numbers
1704+ 6AFA              // where BC is on the top of the stack and HL is the second from top,
1705+ 6AFA              // so the sign of the number can be checked on top of stack
1706+ 6AFA              // and in the stack memory it appears as LHED.
1707+ 6AFA                              New_Def TWO_STORE, "2!", is_code, is_normal
1707+ 6AFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1707+ 6AFA             >
1707+ 6AFA             >                // dummy db directives used to calculate length of namec
1707+ 6AFA 32 21       >                db      "2!"
1707+ 6AFC             >len_NFA         defl    $ - temp_NFA
1707+ 6AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1707+ 6AFA             >
1707+ 6AFA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1707+ 6AFB 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1707+ 6AFD             >                org     $-1                 // alter last byte of Name just above to set
1707+ 6AFC A1          >                db      {b $} | END_BIT     // msb as name end
1707+ 6AFD             >
1707+ 6AFD E8 6A       >                dw      last_NFA            // Link to previous definition Name
1707+ 6AFF             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1707+ 6AFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1707+ 6AFF ~           >
1707+ 6AFF ~           >
1707+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1707+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1707+ 6AFF             >
1707+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1708+ 6AFF 60                           ld      h, b
1709+ 6B00 69                           ld      l, c
1710+ 6B01 D1                           pop     de                  // de has address
1711+ 6B02 C1                           pop     bc                  // < high-part
1712+ 6B03 E3                           ex      (sp), hl            // < low-part > Instruction Pointer
1713+ 6B04 EB                           ex      de, hl
1714+ 6B05 71                           ld      (hl), c
1715+ 6B06 23                           inc     hl
1716+ 6B07 70                           ld      (hl), b
1717+ 6B08 23                           inc     hl
1718+ 6B09 73                           ld      (hl), e
1719+ 6B0A 23                           inc     hl
1720+ 6B0B 72                           ld      (hl), d
1721+ 6B0C C1                           pop     bc                  // Restore Instruction Pointer
1722+ 6B0D
1723+ 6B0D                              next
1723+ 6B0D DD E9       >                jp      (ix)
1724+ 6B0F
1725+ 6B0F              //  ______________________________________________________________________
1726+ 6B0F              //
1727+ 6B0F              // p@           a -- c
1728+ 6B0F              // Read one byte from port a and leave the result on top of stack
1729+ 6B0F                              New_Def PFETCH, "P@", is_code, is_normal
1729+ 6B0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1729+ 6B0F             >
1729+ 6B0F             >                // dummy db directives used to calculate length of namec
1729+ 6B0F 50 40       >                db      "P@"
1729+ 6B11             >len_NFA         defl    $ - temp_NFA
1729+ 6B11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1729+ 6B0F             >
1729+ 6B0F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1729+ 6B10 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1729+ 6B12             >                org     $-1                 // alter last byte of Name just above to set
1729+ 6B11 C0          >                db      {b $} | END_BIT     // msb as name end
1729+ 6B12             >
1729+ 6B12 FA 6A       >                dw      last_NFA            // Link to previous definition Name
1729+ 6B14             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1729+ 6B14 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1729+ 6B14 ~           >
1729+ 6B14 ~           >
1729+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
1729+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
1729+ 6B14             >
1729+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1730+ 6B14 50                           ld      d, b
1731+ 6B15 59                           ld      e, c
1732+ 6B16
1733+ 6B16 C1                           pop     bc
1734+ 6B17 26 00                        ld      h, 0
1735+ 6B19 ED 68                        in      l, (c)
1736+ 6B1B 42                           ld      b, d
1737+ 6B1C 4B                           ld      c, e
1738+ 6B1D                              psh1
1738+ 6B1D E5          >                push    hl
1738+ 6B1E DD E9       >                jp      (ix)
1739+ 6B20
1740+ 6B20              //  ______________________________________________________________________
1741+ 6B20              //
1742+ 6B20              // p!           c a --
1743+ 6B20              // Send one byte (top of stack) to port a
1744+ 6B20                              New_Def PSTORE, "P!", is_code, is_normal
1744+ 6B20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1744+ 6B20             >
1744+ 6B20             >                // dummy db directives used to calculate length of namec
1744+ 6B20 50 21       >                db      "P!"
1744+ 6B22             >len_NFA         defl    $ - temp_NFA
1744+ 6B22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1744+ 6B20             >
1744+ 6B20 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1744+ 6B21 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1744+ 6B23             >                org     $-1                 // alter last byte of Name just above to set
1744+ 6B22 A1          >                db      {b $} | END_BIT     // msb as name end
1744+ 6B23             >
1744+ 6B23 0F 6B       >                dw      last_NFA            // Link to previous definition Name
1744+ 6B25             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1744+ 6B25 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1744+ 6B25 ~           >
1744+ 6B25 ~           >
1744+ 6B25             >                endif           ; ok        // for other definitions it "points" the correct handler
1744+ 6B25             >                // Use of "; ok" to suppress "warning[fwdref]"
1744+ 6B25             >
1744+ 6B25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1745+ 6B25 50                           ld      d, b
1746+ 6B26 59                           ld      e, c
1747+ 6B27
1748+ 6B27 C1                           pop     bc
1749+ 6B28 E1                           pop     hl                  // < c
1750+ 6B29 ED 69                        out     (c), l              // low-byte
1751+ 6B2B 42                           ld      b, d
1752+ 6B2C 4B                           ld      c, e
1753+ 6B2D
1754+ 6B2D                              next
1754+ 6B2D DD E9       >                jp      (ix)
1755+ 6B2F
1756+ 6B2F
1757+ 6B2F              //  ______________________________________________________________________
1758+ 6B2F              //
1759+ 6B2F              // 2*           n1 -- n2
1760+ 6B2F              // doubles the number at top of stack
1761+ 6B2F                              New_Def TWO_MUL, "2*", is_code, is_normal
1761+ 6B2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1761+ 6B2F             >
1761+ 6B2F             >                // dummy db directives used to calculate length of namec
1761+ 6B2F 32 2A       >                db      "2*"
1761+ 6B31             >len_NFA         defl    $ - temp_NFA
1761+ 6B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1761+ 6B2F             >
1761+ 6B2F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1761+ 6B30 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1761+ 6B32             >                org     $-1                 // alter last byte of Name just above to set
1761+ 6B31 AA          >                db      {b $} | END_BIT     // msb as name end
1761+ 6B32             >
1761+ 6B32 20 6B       >                dw      last_NFA            // Link to previous definition Name
1761+ 6B34             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1761+ 6B34 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1761+ 6B34 ~           >
1761+ 6B34 ~           >
1761+ 6B34             >                endif           ; ok        // for other definitions it "points" the correct handler
1761+ 6B34             >                // Use of "; ok" to suppress "warning[fwdref]"
1761+ 6B34             >
1761+ 6B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1762+ 6B34              Two_Mul_Ptr:
1763+ 6B34 E1                           pop     hl
1764+ 6B35 29                           add     hl, hl
1765+ 6B36
1766+ 6B36                              psh1
1766+ 6B36 E5          >                push    hl
1766+ 6B37 DD E9       >                jp      (ix)
1767+ 6B39
1768+ 6B39              //  ______________________________________________________________________
1769+ 6B39              //
1770+ 6B39              // 2/           n1 -- n2
1771+ 6B39              // halves the top of stack, sign is unchanged
1772+ 6B39                              New_Def TWO_DIV, "2/", is_code, is_normal
1772+ 6B39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1772+ 6B39             >
1772+ 6B39             >                // dummy db directives used to calculate length of namec
1772+ 6B39 32 2F       >                db      "2/"
1772+ 6B3B             >len_NFA         defl    $ - temp_NFA
1772+ 6B3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1772+ 6B39             >
1772+ 6B39 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1772+ 6B3A 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1772+ 6B3C             >                org     $-1                 // alter last byte of Name just above to set
1772+ 6B3B AF          >                db      {b $} | END_BIT     // msb as name end
1772+ 6B3C             >
1772+ 6B3C 2F 6B       >                dw      last_NFA            // Link to previous definition Name
1772+ 6B3E             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1772+ 6B3E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1772+ 6B3E ~           >
1772+ 6B3E ~           >
1772+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1772+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1772+ 6B3E             >
1772+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1773+ 6B3E E1                           pop     hl
1774+ 6B3F CB 2C                        sra     h
1775+ 6B41 CB 1D                        rr      l
1776+ 6B43
1777+ 6B43                              psh1
1777+ 6B43 E5          >                push    hl
1777+ 6B44 DD E9       >                jp      (ix)
1778+ 6B46
1779+ 6B46              //  ______________________________________________________________________
1780+ 6B46              //
1781+ 6B46              // lshift       n1 u -- n2
1782+ 6B46              // bit left shift of u bits
1783+ 6B46                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1783+ 6B46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1783+ 6B46             >
1783+ 6B46             >                // dummy db directives used to calculate length of namec
1783+ 6B46 4C 53 48 49 >                db      "LSHIFT"
1783+ 6B4A 46 54       >
1783+ 6B4C             >len_NFA         defl    $ - temp_NFA
1783+ 6B4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1783+ 6B46             >
1783+ 6B46 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1783+ 6B47 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1783+ 6B4B 46 54       >
1783+ 6B4D             >                org     $-1                 // alter last byte of Name just above to set
1783+ 6B4C D4          >                db      {b $} | END_BIT     // msb as name end
1783+ 6B4D             >
1783+ 6B4D 39 6B       >                dw      last_NFA            // Link to previous definition Name
1783+ 6B4F             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1783+ 6B4F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1783+ 6B4F ~           >
1783+ 6B4F ~           >
1783+ 6B4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1783+ 6B4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1783+ 6B4F             >
1783+ 6B4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1784+ 6B4F D1                           pop     de
1785+ 6B50
1786+ 6B50 E1                           pop     hl
1787+ 6B51 7B                           ld      a, e
1788+ 6B52 B7                           or      a
1789+ 6B53 28 04                        jr      z, Lshift_Zero
1790+ 6B55              Lshift_Loop:
1791+ 6B55 29                                   add     hl, hl
1792+ 6B56 3D                                   dec     a
1793+ 6B57 20 FC                            jr      nz, Lshift_Loop
1794+ 6B59              Lshift_Zero:
1795+ 6B59
1796+ 6B59
1797+ 6B59                              psh1
1797+ 6B59 E5          >                push    hl
1797+ 6B5A DD E9       >                jp      (ix)
1798+ 6B5C
1799+ 6B5C              //  ______________________________________________________________________
1800+ 6B5C              //
1801+ 6B5C              // rshift       n1 u -- n2
1802+ 6B5C              // bit right shift of u bits
1803+ 6B5C                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1803+ 6B5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1803+ 6B5C             >
1803+ 6B5C             >                // dummy db directives used to calculate length of namec
1803+ 6B5C 52 53 48 49 >                db      "RSHIFT"
1803+ 6B60 46 54       >
1803+ 6B62             >len_NFA         defl    $ - temp_NFA
1803+ 6B62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1803+ 6B5C             >
1803+ 6B5C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1803+ 6B5D 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1803+ 6B61 46 54       >
1803+ 6B63             >                org     $-1                 // alter last byte of Name just above to set
1803+ 6B62 D4          >                db      {b $} | END_BIT     // msb as name end
1803+ 6B63             >
1803+ 6B63 46 6B       >                dw      last_NFA            // Link to previous definition Name
1803+ 6B65             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1803+ 6B65 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1803+ 6B65 ~           >
1803+ 6B65 ~           >
1803+ 6B65             >                endif           ; ok        // for other definitions it "points" the correct handler
1803+ 6B65             >                // Use of "; ok" to suppress "warning[fwdref]"
1803+ 6B65             >
1803+ 6B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1804+ 6B65 D1                           pop     de
1805+ 6B66
1806+ 6B66 E1                           pop     hl
1807+ 6B67 7B                           ld      a, e
1808+ 6B68 B7                           or      a
1809+ 6B69 28 07                        jr      z, Rshift_Zero
1810+ 6B6B              Rshift_Loop:
1811+ 6B6B CB 3C                                srl     h
1812+ 6B6D CB 1D                                rr      l
1813+ 6B6F 3D                                   dec     a
1814+ 6B70 20 F9                            jr      nz, Rshift_Loop
1815+ 6B72              Rshift_Zero:
1816+ 6B72
1817+ 6B72
1818+ 6B72                              psh1
1818+ 6B72 E5          >                push    hl
1818+ 6B73 DD E9       >                jp      (ix)
1819+ 6B75
1820+ 6B75              //  ______________________________________________________________________
1821+ 6B75              //
1822+ 6B75              // cells        n1 -- n2
1823+ 6B75              // decrement by 2 top of stack
1824+ 6B75                              New_Def CELLS, "CELLS", is_code, is_normal
1824+ 6B75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1824+ 6B75             >
1824+ 6B75             >                // dummy db directives used to calculate length of namec
1824+ 6B75 43 45 4C 4C >                db      "CELLS"
1824+ 6B79 53          >
1824+ 6B7A             >len_NFA         defl    $ - temp_NFA
1824+ 6B7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1824+ 6B75             >
1824+ 6B75 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1824+ 6B76 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1824+ 6B7A 53          >
1824+ 6B7B             >                org     $-1                 // alter last byte of Name just above to set
1824+ 6B7A D3          >                db      {b $} | END_BIT     // msb as name end
1824+ 6B7B             >
1824+ 6B7B 5C 6B       >                dw      last_NFA            // Link to previous definition Name
1824+ 6B7D             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1824+ 6B7D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1824+ 6B7D ~           >
1824+ 6B7D ~           >
1824+ 6B7D             >                endif           ; ok        // for other definitions it "points" the correct handler
1824+ 6B7D             >                // Use of "; ok" to suppress "warning[fwdref]"
1824+ 6B7D             >
1824+ 6B7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1825+ 6B7D C3 34 6B                     jp      Two_Mul_Ptr
1826+ 6B80
1827+ 6B80
1828+ 6B80              //  ______________________________________________________________________
1829+ 6B80
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 110  6B80                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6B80              //  ______________________________________________________________________
   2+ 6B80              //
   3+ 6B80              //  L1.asm
   4+ 6B80              //
   5+ 6B80              //  Level-1 definitions and derivate
   6+ 6B80              //  ______________________________________________________________________
   7+ 6B80
   8+ 6B80              //  ______________________________________________________________________
   9+ 6B80              //
  10+ 6B80              // :            -- cccc     ( compile time )
  11+ 6B80              //              i*x -- j*x  ( run time )
  12+ 6B80              // Colon Definition
  13+ 6B80                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6B80             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6B80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6B80             >
  13+ 6B80             >                // dummy db directives used to calculate length of namec
  13+ 6B80 3A          >                db      ":"
  13+ 6B81             >len_NFA         defl    $ - temp_NFA
  13+ 6B81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6B80             >
  13+ 6B80 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6B81 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6B82             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6B81 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6B82             >
  13+ 6B82 75 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6B84             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6B84 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6B87             >
  13+ 6B87             >
  13+ 6B87             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6B87             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6B87             >
  13+ 6B87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6B87
  15+ 6B87 30 70                        dw      QEXEC                   // ?exec
  16+ 6B89 E8 6F                        dw      STORE_CSP               // !csp
  17+ 6B8B 73 6D C0 6A                  dw      CURRENT, FETCH          // current @
  18+ 6B8F 65 6D CB 6A                  dw      CONTEXT, STORE          // context !
  19+ 6B93 5C 76                        dw      CREATE                  // create  ( forward )
  20+ 6B95 E5 70                        dw      SMUDGE                  // dmudge
  21+ 6B97 CF 70                        dw      SQUARED_CLOSE           // ]
  22+ 6B99 3F 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6B9B                                                              // ... immediate
  24+ 6B9B              Enter_Ptr:
  25+ 6B9B                              // via call coded in CFA
  26+ 6B9B                              ldhlrp
  26+ 6B9B 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6B9E 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6B9F 70                           ld      (hl), b
  29+ 6BA0 2B                           dec     hl
  30+ 6BA1 71                           ld      (hl), c
  31+ 6BA2                              ldrphl
  31+ 6BA2 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BA5
  33+ 6BA5
  34+ 6BA5 C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BA6                              next
  35+ 6BA6 DD E9       >                jp      (ix)
  36+ 6BA8
  37+ 6BA8              //  ______________________________________________________________________
  38+ 6BA8              //
  39+ 6BA8              // ;            --
  40+ 6BA8              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BA8                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BA8             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BA8             >
  41+ 6BA8             >                // dummy db directives used to calculate length of namec
  41+ 6BA8 3B          >                db      ";"
  41+ 6BA9             >len_NFA         defl    $ - temp_NFA
  41+ 6BA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BA8             >
  41+ 6BA8 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BA9 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BAA             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BA9 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BAA             >
  41+ 6BAA 80 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BAC             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BAC CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BAF             >
  41+ 6BAF             >
  41+ 6BAF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BAF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BAF             >
  41+ 6BAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BAF
  43+ 6BAF 5C 70                        dw      QCSP                    // ?csp
  44+ 6BB1 95 70 D0 68                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BB5 E5 70                        dw      SMUDGE                  // smudge
  46+ 6BB7 C0 70                        dw      SQUARED_OPEN            // [
  47+ 6BB9 D0 68                        dw      EXIT                    // ; immediate
  48+ 6BBB
  49+ 6BBB              //  ______________________________________________________________________
  50+ 6BBB              //
  51+ 6BBB              // noop         --
  52+ 6BBB
  53+ 6BBB                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6BBB             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6BBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BBB             >
  53+ 6BBB             >                // dummy db directives used to calculate length of namec
  53+ 6BBB 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BBF             >len_NFA         defl    $ - temp_NFA
  53+ 6BBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BBB             >
  53+ 6BBB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BBC 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BC0             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BBF D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BC0             >
  53+ 6BC0 A8 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BC2             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BC2 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6BC5             >
  53+ 6BC5             >
  53+ 6BC5             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BC5             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BC5             >
  53+ 6BC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BC5 D0 68                        dw      EXIT
  55+ 6BC7
  56+ 6BC7              //  ______________________________________________________________________
  57+ 6BC7              //
  58+ 6BC7              // constant     n -- cccc     ( compile time )
  59+ 6BC7              //              -- n          ( run time )
  60+ 6BC7              // Constant definition.
  61+ 6BC7                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BC7             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BC7             >
  61+ 6BC7             >                // dummy db directives used to calculate length of namec
  61+ 6BC7 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6BCB 54 41 4E 54 >
  61+ 6BCF             >len_NFA         defl    $ - temp_NFA
  61+ 6BCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BC7             >
  61+ 6BC7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BC8 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6BCC 54 41 4E 54 >
  61+ 6BD0             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6BCF D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6BD0             >
  61+ 6BD0 BB 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6BD2             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6BD2 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6BD5             >
  61+ 6BD5             >
  61+ 6BD5             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6BD5             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6BD5             >
  61+ 6BD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6BD5
  63+ 6BD5 5C 76                        dw      CREATE                  // create
  64+ 6BD7 40 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6BD9 3F 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6BDB              Constant_Ptr:
  67+ 6BDB
  68+ 6BDB
  69+ 6BDB E1                           pop     hl
  70+ 6BDC
  71+ 6BDC 5E                           ld      e, (hl)
  72+ 6BDD 23                           inc     hl
  73+ 6BDE 56                           ld      d, (hl)
  74+ 6BDF D5                           push    de
  75+ 6BE0                              next
  75+ 6BE0 DD E9       >                jp      (ix)
  76+ 6BE2
  77+ 6BE2              //  ______________________________________________________________________
  78+ 6BE2              //
  79+ 6BE2              // variable     n -- cccc     ( compile time )
  80+ 6BE2              //              -- a          ( run time )
  81+ 6BE2              // Variable definition, n is the initial value.
  82+ 6BE2                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6BE2             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6BE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6BE2             >
  82+ 6BE2             >                // dummy db directives used to calculate length of namec
  82+ 6BE2 56 41 52 49 >                db      "VARIABLE"
  82+ 6BE6 41 42 4C 45 >
  82+ 6BEA             >len_NFA         defl    $ - temp_NFA
  82+ 6BEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6BE2             >
  82+ 6BE2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6BE3 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6BE7 41 42 4C 45 >
  82+ 6BEB             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6BEA C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6BEB             >
  82+ 6BEB C7 6B       >                dw      last_NFA            // Link to previous definition Name
  82+ 6BED             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6BED CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6BF0             >
  82+ 6BF0             >
  82+ 6BF0             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6BF0             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6BF0             >
  82+ 6BF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6BF0
  84+ 6BF0 D2 6B                        dw      CONSTANT                // constant
  85+ 6BF2 3F 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6BF4              Variable_Ptr:
  87+ 6BF4
  88+ 6BF4
  89+ 6BF4
  90+ 6BF4
  91+ 6BF4                              next
  91+ 6BF4 DD E9       >                jp      (ix)
  92+ 6BF6
  93+ 6BF6              //  ______________________________________________________________________
  94+ 6BF6              //
  95+ 6BF6              // user         b -- cccc     ( compile time )
  96+ 6BF6              //              -- a          ( run time )
  97+ 6BF6              // User variable definition
  98+ 6BF6                              Colon_Def USER, "USER", is_normal
  98+ 6BF6             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6BF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6BF6             >
  98+ 6BF6             >                // dummy db directives used to calculate length of namec
  98+ 6BF6 55 53 45 52 >                db      "USER"
  98+ 6BFA             >len_NFA         defl    $ - temp_NFA
  98+ 6BFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6BF6             >
  98+ 6BF6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6BF7 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6BFB             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6BFA D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6BFB             >
  98+ 6BFB E2 6B       >                dw      last_NFA            // Link to previous definition Name
  98+ 6BFD             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6BFD CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6C00             >
  98+ 6C00             >
  98+ 6C00             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6C00             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6C00             >
  98+ 6C00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6C00
 100+ 6C00 5C 76                        dw      CREATE                  // create
 101+ 6C02 52 6E                        dw      CCOMMA                  // c,
 102+ 6C04 3F 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6C06
 104+ 6C06
 105+ 6C06              User_Ptr:
 106+ 6C06                              // via call coded in CFA
 107+ 6C06 E1                           pop     hl
 108+ 6C07
 109+ 6C07 5E                           ld      e, (hl)
 110+ 6C08 16 00                        ld      d, 0
 111+ 6C0A 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6C0D 19                           add     hl, de
 113+ 6C0E
 114+ 6C0E                              psh1
 114+ 6C0E E5          >                push    hl
 114+ 6C0F DD E9       >                jp      (ix)
 115+ 6C11
 116+ 6C11              //  ______________________________________________________________________
 117+ 6C11              //
 118+ 6C11                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6C11             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6C11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6C11             >
 118+ 6C11             >                // dummy db directives used to calculate length of namec
 118+ 6C11 30          >                db      "0"
 118+ 6C12             >len_NFA         defl    $ - temp_NFA
 118+ 6C12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6C11             >
 118+ 6C11 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6C12 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6C13             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6C12 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6C13             >
 118+ 6C13 F6 6B       >                dw      last_NFA            // Link to previous definition Name
 118+ 6C15             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6C15 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6C18             >
 118+ 6C18             >
 118+ 6C18             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6C18             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6C18             >
 118+ 6C18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6C18 00 00       >                dw      0
 119+ 6C1A                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6C1A             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6C1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C1A             >
 119+ 6C1A             >                // dummy db directives used to calculate length of namec
 119+ 6C1A 31          >                db      "1"
 119+ 6C1B             >len_NFA         defl    $ - temp_NFA
 119+ 6C1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C1A             >
 119+ 6C1A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C1B 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6C1C             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C1B B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C1C             >
 119+ 6C1C 11 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C1E             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C1E CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C21             >
 119+ 6C21             >
 119+ 6C21             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C21             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C21             >
 119+ 6C21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C21 01 00       >                dw      1
 120+ 6C23                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6C23             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6C23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C23             >
 120+ 6C23             >                // dummy db directives used to calculate length of namec
 120+ 6C23 32          >                db      "2"
 120+ 6C24             >len_NFA         defl    $ - temp_NFA
 120+ 6C24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C23             >
 120+ 6C23 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C24 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6C25             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C24 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C25             >
 120+ 6C25 1A 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C27             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C27 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C2A             >
 120+ 6C2A             >
 120+ 6C2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C2A             >
 120+ 6C2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C2A 02 00       >                dw      2
 121+ 6C2C                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6C2C             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6C2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C2C             >
 121+ 6C2C             >                // dummy db directives used to calculate length of namec
 121+ 6C2C 33          >                db      "3"
 121+ 6C2D             >len_NFA         defl    $ - temp_NFA
 121+ 6C2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C2C             >
 121+ 6C2C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C2D 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6C2E             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C2D B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C2E             >
 121+ 6C2E 23 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C30             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C30 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C33             >
 121+ 6C33             >
 121+ 6C33             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C33             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C33             >
 121+ 6C33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C33 03 00       >                dw      3
 122+ 6C35                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6C35             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C35             >
 122+ 6C35             >                // dummy db directives used to calculate length of namec
 122+ 6C35 2D 31       >                db      "-1"
 122+ 6C37             >len_NFA         defl    $ - temp_NFA
 122+ 6C37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C35             >
 122+ 6C35 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C36 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6C38             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C37 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C38             >
 122+ 6C38 2C 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C3A             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C3A CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C3D             >
 122+ 6C3D             >
 122+ 6C3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C3D             >
 122+ 6C3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C3D FF FF       >                dw      -1
 123+ 6C3F                              Constant_Def BL         ,   "BL"    , $20
 123+ 6C3F             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6C3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C3F             >
 123+ 6C3F             >                // dummy db directives used to calculate length of namec
 123+ 6C3F 42 4C       >                db      "BL"
 123+ 6C41             >len_NFA         defl    $ - temp_NFA
 123+ 6C41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C3F             >
 123+ 6C3F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C40 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6C42             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C41 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C42             >
 123+ 6C42 35 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C44             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C44 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C47             >
 123+ 6C47             >
 123+ 6C47             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C47             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C47             >
 123+ 6C47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C47 20 00       >                dw      $20
 124+ 6C49                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6C49             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6C49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C49             >
 124+ 6C49             >                // dummy db directives used to calculate length of namec
 124+ 6C49 43 2F 4C    >                db      "C/L"
 124+ 6C4C             >len_NFA         defl    $ - temp_NFA
 124+ 6C4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C49             >
 124+ 6C49 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C4A 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6C4D             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C4C CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C4D             >
 124+ 6C4D 3F 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C4F             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C4F CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C52             >
 124+ 6C52             >
 124+ 6C52             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C52             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C52             >
 124+ 6C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C52 40 00       >                dw      64
 125+ 6C54                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6C54             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6C54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C54             >
 125+ 6C54             >                // dummy db directives used to calculate length of namec
 125+ 6C54 42 2F 42 55 >                db      "B/BUF"
 125+ 6C58 46          >
 125+ 6C59             >len_NFA         defl    $ - temp_NFA
 125+ 6C59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C54             >
 125+ 6C54 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C55 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6C59 46          >
 125+ 6C5A             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C59 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C5A             >
 125+ 6C5A 49 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C5C             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C5C CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C5F             >
 125+ 6C5F             >
 125+ 6C5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C5F             >
 125+ 6C5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C5F 00 02       >                dw      512
 126+ 6C61                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6C61             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6C61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C61             >
 126+ 6C61             >                // dummy db directives used to calculate length of namec
 126+ 6C61 42 2F 53 43 >                db      "B/SCR"
 126+ 6C65 52          >
 126+ 6C66             >len_NFA         defl    $ - temp_NFA
 126+ 6C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C61             >
 126+ 6C61 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C62 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6C66 52          >
 126+ 6C67             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C66 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C67             >
 126+ 6C67 54 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C69             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C69 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C6C             >
 126+ 6C6C             >
 126+ 6C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C6C             >
 126+ 6C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C6C 02 00       >                dw      2
 127+ 6C6E                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6C6E             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6C6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C6E             >
 127+ 6C6E             >                // dummy db directives used to calculate length of namec
 127+ 6C6E 4C 2F 53 43 >                db      "L/SCR"
 127+ 6C72 52          >
 127+ 6C73             >len_NFA         defl    $ - temp_NFA
 127+ 6C73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C6E             >
 127+ 6C6E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C6F 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6C73 52          >
 127+ 6C74             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C73 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C74             >
 127+ 6C74 61 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C76             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C76 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C79             >
 127+ 6C79             >
 127+ 6C79             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C79             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C79             >
 127+ 6C79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C79 10 00       >                dw      16
 128+ 6C7B
 129+ 6C7B              //  ______________________________________________________________________
 130+ 6C7B              //
 131+ 6C7B              // +origin         --
 132+ 6C7B                              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 132+ 6C7B             >                New_Def  PLUS_ORIGIN, "+ORIGIN", Enter_Ptr, is_normal ; ok
 132+ 6C7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ 6C7B             >
 132+ 6C7B             >                // dummy db directives used to calculate length of namec
 132+ 6C7B 2B 4F 52 49 >                db      "+ORIGIN"
 132+ 6C7F 47 49 4E    >
 132+ 6C82             >len_NFA         defl    $ - temp_NFA
 132+ 6C82             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ 6C7B             >
 132+ 6C7B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ 6C7C 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 132+ 6C80 47 49 4E    >
 132+ 6C83             >                org     $-1                 // alter last byte of Name just above to set
 132+ 6C82 CE          >                db      {b $} | END_BIT     // msb as name end
 132+ 6C83             >
 132+ 6C83 6E 6C       >                dw      last_NFA            // Link to previous definition Name
 132+ 6C85             >PLUS_ORIGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 6C85 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 6C88             >
 132+ 6C88             >
 132+ 6C88             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 6C88             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 6C88             >
 132+ 6C88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 6C88 A5 63 66 63                  dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6C8C 6B 69                        dw      PLUS                    // +
 135+ 6C8E D0 68                        dw      EXIT                    // ;
 136+ 6C90
 137+ 6C90              //  ______________________________________________________________________
 138+ 6C90              //
 139+ 6C90                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 139+ 6C90             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 139+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 6C90             >
 139+ 6C90             >                // dummy db directives used to calculate length of namec
 139+ 6C90 28 4E 45 58 >                db      "(NEXT)"
 139+ 6C94 54 29       >
 139+ 6C96             >len_NFA         defl    $ - temp_NFA
 139+ 6C96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 6C90             >
 139+ 6C90 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 6C91 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 139+ 6C95 54 29       >
 139+ 6C97             >                org     $-1                 // alter last byte of Name just above to set
 139+ 6C96 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 6C97             >
 139+ 6C97 7B 6C       >                dw      last_NFA            // Link to previous definition Name
 139+ 6C99             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 6C99 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 139+ 6C9C             >
 139+ 6C9C             >
 139+ 6C9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 6C9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 6C9C             >
 139+ 6C9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6C9C 98 63       >                dw      Next_Ptr
 140+ 6C9E
 141+ 6C9E              //  ______________________________________________________________________
 142+ 6C9E              //
 143+ 6C9E
 144+ 6C9E                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 144+ 6C9E             >                New_Def  S0, "S0", User_Ptr, is_normal
 144+ 6C9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 6C9E             >
 144+ 6C9E             >                // dummy db directives used to calculate length of namec
 144+ 6C9E 53 30       >                db      "S0"
 144+ 6CA0             >len_NFA         defl    $ - temp_NFA
 144+ 6CA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 6C9E             >
 144+ 6C9E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 6C9F 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 144+ 6CA1             >                org     $-1                 // alter last byte of Name just above to set
 144+ 6CA0 B0          >                db      {b $} | END_BIT     // msb as name end
 144+ 6CA1             >
 144+ 6CA1 90 6C       >                dw      last_NFA            // Link to previous definition Name
 144+ 6CA3             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 6CA3 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 144+ 6CA6             >
 144+ 6CA6             >
 144+ 6CA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 6CA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 6CA6             >
 144+ 6CA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 6CA6 06          >                db      06
 145+ 6CA7                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 145+ 6CA7             >                New_Def  R0, "R0", User_Ptr, is_normal
 145+ 6CA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 145+ 6CA7             >
 145+ 6CA7             >                // dummy db directives used to calculate length of namec
 145+ 6CA7 52 30       >                db      "R0"
 145+ 6CA9             >len_NFA         defl    $ - temp_NFA
 145+ 6CA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 145+ 6CA7             >
 145+ 6CA7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 145+ 6CA8 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 145+ 6CAA             >                org     $-1                 // alter last byte of Name just above to set
 145+ 6CA9 B0          >                db      {b $} | END_BIT     // msb as name end
 145+ 6CAA             >
 145+ 6CAA 9E 6C       >                dw      last_NFA            // Link to previous definition Name
 145+ 6CAC             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 145+ 6CAC CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 145+ 6CAF             >
 145+ 6CAF             >
 145+ 6CAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 145+ 6CAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 145+ 6CAF             >
 145+ 6CAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 6CAF 08          >                db      08
 146+ 6CB0                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 146+ 6CB0             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 146+ 6CB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6CB0             >
 146+ 6CB0             >                // dummy db directives used to calculate length of namec
 146+ 6CB0 54 49 42    >                db      "TIB"
 146+ 6CB3             >len_NFA         defl    $ - temp_NFA
 146+ 6CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6CB0             >
 146+ 6CB0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6CB1 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 146+ 6CB4             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6CB3 C2          >                db      {b $} | END_BIT     // msb as name end
 146+ 6CB4             >
 146+ 6CB4 A7 6C       >                dw      last_NFA            // Link to previous definition Name
 146+ 6CB6             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6CB6 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 146+ 6CB9             >
 146+ 6CB9             >
 146+ 6CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6CB9             >
 146+ 6CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6CB9 0A          >                db      10
 147+ 6CBA                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 147+ 6CBA             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 147+ 6CBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CBA             >
 147+ 6CBA             >                // dummy db directives used to calculate length of namec
 147+ 6CBA 57 49 44 54 >                db      "WIDTH"
 147+ 6CBE 48          >
 147+ 6CBF             >len_NFA         defl    $ - temp_NFA
 147+ 6CBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CBA             >
 147+ 6CBA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CBB 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 147+ 6CBF 48          >
 147+ 6CC0             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CBF C8          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CC0             >
 147+ 6CC0 B0 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CC2             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CC2 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CC5             >
 147+ 6CC5             >
 147+ 6CC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CC5             >
 147+ 6CC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CC5 0C          >                db      12
 148+ 6CC6                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 148+ 6CC6             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 148+ 6CC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 148+ 6CC6             >
 148+ 6CC6             >                // dummy db directives used to calculate length of namec
 148+ 6CC6 57 41 52 4E >                db      "WARNING"
 148+ 6CCA 49 4E 47    >
 148+ 6CCD             >len_NFA         defl    $ - temp_NFA
 148+ 6CCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 148+ 6CC6             >
 148+ 6CC6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 148+ 6CC7 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 148+ 6CCB 49 4E 47    >
 148+ 6CCE             >                org     $-1                 // alter last byte of Name just above to set
 148+ 6CCD C7          >                db      {b $} | END_BIT     // msb as name end
 148+ 6CCE             >
 148+ 6CCE BA 6C       >                dw      last_NFA            // Link to previous definition Name
 148+ 6CD0             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 148+ 6CD0 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 148+ 6CD3             >
 148+ 6CD3             >
 148+ 6CD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 148+ 6CD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 148+ 6CD3             >
 148+ 6CD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148+ 6CD3 0E          >                db      14
 149+ 6CD4                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 149+ 6CD4             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 149+ 6CD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6CD4             >
 149+ 6CD4             >                // dummy db directives used to calculate length of namec
 149+ 6CD4 46 45 4E 43 >                db      "FENCE"
 149+ 6CD8 45          >
 149+ 6CD9             >len_NFA         defl    $ - temp_NFA
 149+ 6CD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6CD4             >
 149+ 6CD4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6CD5 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 149+ 6CD9 45          >
 149+ 6CDA             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6CD9 C5          >                db      {b $} | END_BIT     // msb as name end
 149+ 6CDA             >
 149+ 6CDA C6 6C       >                dw      last_NFA            // Link to previous definition Name
 149+ 6CDC             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6CDC CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 149+ 6CDF             >
 149+ 6CDF             >
 149+ 6CDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6CDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6CDF             >
 149+ 6CDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6CDF 10          >                db      16
 150+ 6CE0                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 150+ 6CE0             >                New_Def  DP, "DP", User_Ptr, is_normal
 150+ 6CE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ 6CE0             >
 150+ 6CE0             >                // dummy db directives used to calculate length of namec
 150+ 6CE0 44 50       >                db      "DP"
 150+ 6CE2             >len_NFA         defl    $ - temp_NFA
 150+ 6CE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ 6CE0             >
 150+ 6CE0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ 6CE1 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 150+ 6CE3             >                org     $-1                 // alter last byte of Name just above to set
 150+ 6CE2 D0          >                db      {b $} | END_BIT     // msb as name end
 150+ 6CE3             >
 150+ 6CE3 D4 6C       >                dw      last_NFA            // Link to previous definition Name
 150+ 6CE5             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6CE5 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 150+ 6CE8             >
 150+ 6CE8             >
 150+ 6CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6CE8             >
 150+ 6CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6CE8 12          >                db      18
 151+ 6CE9                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 151+ 6CE9             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 151+ 6CE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6CE9             >
 151+ 6CE9             >                // dummy db directives used to calculate length of namec
 151+ 6CE9 56 4F 43 2D >                db      "VOC-LINK"
 151+ 6CED 4C 49 4E 4B >
 151+ 6CF1             >len_NFA         defl    $ - temp_NFA
 151+ 6CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6CE9             >
 151+ 6CE9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6CEA 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 151+ 6CEE 4C 49 4E 4B >
 151+ 6CF2             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6CF1 CB          >                db      {b $} | END_BIT     // msb as name end
 151+ 6CF2             >
 151+ 6CF2 E0 6C       >                dw      last_NFA            // Link to previous definition Name
 151+ 6CF4             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6CF4 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6CF7             >
 151+ 6CF7             >
 151+ 6CF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6CF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6CF7             >
 151+ 6CF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6CF7 14          >                db      20
 152+ 6CF8                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 152+ 6CF8             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 152+ 6CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CF8             >
 152+ 6CF8             >                // dummy db directives used to calculate length of namec
 152+ 6CF8 46 49 52 53 >                db      "FIRST"
 152+ 6CFC 54          >
 152+ 6CFD             >len_NFA         defl    $ - temp_NFA
 152+ 6CFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CF8             >
 152+ 6CF8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CF9 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 152+ 6CFD 54          >
 152+ 6CFE             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CFD D4          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CFE             >
 152+ 6CFE E9 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6D00             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6D00 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6D03             >
 152+ 6D03             >
 152+ 6D03             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6D03             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6D03             >
 152+ 6D03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6D03 16          >                db      22
 153+ 6D04                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 153+ 6D04             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 153+ 6D04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6D04             >
 153+ 6D04             >                // dummy db directives used to calculate length of namec
 153+ 6D04 4C 49 4D 49 >                db      "LIMIT"
 153+ 6D08 54          >
 153+ 6D09             >len_NFA         defl    $ - temp_NFA
 153+ 6D09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6D04             >
 153+ 6D04 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6D05 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 153+ 6D09 54          >
 153+ 6D0A             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6D09 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 6D0A             >
 153+ 6D0A F8 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6D0C             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6D0C CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6D0F             >
 153+ 6D0F             >
 153+ 6D0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6D0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6D0F             >
 153+ 6D0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6D0F 18          >                db      24
 154+ 6D10                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 154+ 6D10             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 154+ 6D10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6D10             >
 154+ 6D10             >                // dummy db directives used to calculate length of namec
 154+ 6D10 45 58 50    >                db      "EXP"
 154+ 6D13             >len_NFA         defl    $ - temp_NFA
 154+ 6D13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6D10             >
 154+ 6D10 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6D11 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 154+ 6D14             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6D13 D0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6D14             >
 154+ 6D14 04 6D       >                dw      last_NFA            // Link to previous definition Name
 154+ 6D16             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6D16 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6D19             >
 154+ 6D19             >
 154+ 6D19             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6D19             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6D19             >
 154+ 6D19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6D19 1A          >                db      26
 155+ 6D1A                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 155+ 6D1A             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 155+ 6D1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6D1A             >
 155+ 6D1A             >                // dummy db directives used to calculate length of namec
 155+ 6D1A 4E 4D 4F 44 >                db      "NMODE"
 155+ 6D1E 45          >
 155+ 6D1F             >len_NFA         defl    $ - temp_NFA
 155+ 6D1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6D1A             >
 155+ 6D1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6D1B 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 155+ 6D1F 45          >
 155+ 6D20             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D1F C5          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D20             >
 155+ 6D20 10 6D       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D22             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D22 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D25             >
 155+ 6D25             >
 155+ 6D25             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D25             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D25             >
 155+ 6D25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D25 1C          >                db      28
 156+ 6D26                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 156+ 6D26             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 156+ 6D26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D26             >
 156+ 6D26             >                // dummy db directives used to calculate length of namec
 156+ 6D26 42 4C 4B    >                db      "BLK"
 156+ 6D29             >len_NFA         defl    $ - temp_NFA
 156+ 6D29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D26             >
 156+ 6D26 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D27 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 156+ 6D2A             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D29 CB          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D2A             >
 156+ 6D2A 1A 6D       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D2C             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D2C CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D2F             >
 156+ 6D2F             >
 156+ 6D2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D2F             >
 156+ 6D2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D2F 1E          >                db      30
 157+ 6D30                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 157+ 6D30             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 157+ 6D30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D30             >
 157+ 6D30             >                // dummy db directives used to calculate length of namec
 157+ 6D30 3E 49 4E    >                db      ">IN"
 157+ 6D33             >len_NFA         defl    $ - temp_NFA
 157+ 6D33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D30             >
 157+ 6D30 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D31 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 157+ 6D34             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D33 CE          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D34             >
 157+ 6D34 26 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D36             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D36 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D39             >
 157+ 6D39             >
 157+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D39             >
 157+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D39 20          >                db      32
 158+ 6D3A                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 158+ 6D3A             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 158+ 6D3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D3A             >
 158+ 6D3A             >                // dummy db directives used to calculate length of namec
 158+ 6D3A 4F 55 54    >                db      "OUT"
 158+ 6D3D             >len_NFA         defl    $ - temp_NFA
 158+ 6D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D3A             >
 158+ 6D3A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D3B 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 158+ 6D3E             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D3D D4          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D3E             >
 158+ 6D3E 30 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D40             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D40 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D43             >
 158+ 6D43             >
 158+ 6D43             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D43             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D43             >
 158+ 6D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D43 22          >                db      34
 159+ 6D44                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 159+ 6D44             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 159+ 6D44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D44             >
 159+ 6D44             >                // dummy db directives used to calculate length of namec
 159+ 6D44 53 43 52    >                db      "SCR"
 159+ 6D47             >len_NFA         defl    $ - temp_NFA
 159+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D44             >
 159+ 6D44 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D45 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 159+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D47 D2          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D48             >
 159+ 6D48 3A 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D4A             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D4A CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D4D             >
 159+ 6D4D             >
 159+ 6D4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D4D             >
 159+ 6D4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D4D 24          >                db      36
 160+ 6D4E                              User_Def OFFSET     , "OFFSET"    , 38 //
 160+ 6D4E             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 160+ 6D4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D4E             >
 160+ 6D4E             >                // dummy db directives used to calculate length of namec
 160+ 6D4E 4F 46 46 53 >                db      "OFFSET"
 160+ 6D52 45 54       >
 160+ 6D54             >len_NFA         defl    $ - temp_NFA
 160+ 6D54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D4E             >
 160+ 6D4E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D4F 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 160+ 6D53 45 54       >
 160+ 6D55             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D54 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D55             >
 160+ 6D55 44 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D57             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D57 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D5A             >
 160+ 6D5A             >
 160+ 6D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D5A             >
 160+ 6D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D5A 26          >                db      38
 161+ 6D5B                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 161+ 6D5B             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 161+ 6D5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D5B             >
 161+ 6D5B             >                // dummy db directives used to calculate length of namec
 161+ 6D5B 43 4F 4E 54 >                db      "CONTEXT"
 161+ 6D5F 45 58 54    >
 161+ 6D62             >len_NFA         defl    $ - temp_NFA
 161+ 6D62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D5B             >
 161+ 6D5B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D5C 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 161+ 6D60 45 58 54    >
 161+ 6D63             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D62 D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D63             >
 161+ 6D63 4E 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D65             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D65 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D68             >
 161+ 6D68             >
 161+ 6D68             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D68             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D68             >
 161+ 6D68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D68 28          >                db      40
 162+ 6D69                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 162+ 6D69             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 162+ 6D69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D69             >
 162+ 6D69             >                // dummy db directives used to calculate length of namec
 162+ 6D69 43 55 52 52 >                db      "CURRENT"
 162+ 6D6D 45 4E 54    >
 162+ 6D70             >len_NFA         defl    $ - temp_NFA
 162+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D69             >
 162+ 6D69 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D6A 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 162+ 6D6E 45 4E 54    >
 162+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D70 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D71             >
 162+ 6D71 5B 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D73             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D73 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D76             >
 162+ 6D76             >
 162+ 6D76             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D76             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D76             >
 162+ 6D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D76 2A          >                db      42
 163+ 6D77                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 163+ 6D77             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 163+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D77             >
 163+ 6D77             >                // dummy db directives used to calculate length of namec
 163+ 6D77 53 54 41 54 >                db      "STATE"
 163+ 6D7B 45          >
 163+ 6D7C             >len_NFA         defl    $ - temp_NFA
 163+ 6D7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D77             >
 163+ 6D77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D78 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 163+ 6D7C 45          >
 163+ 6D7D             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D7C C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D7D             >
 163+ 6D7D 69 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D7F             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D7F CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D82             >
 163+ 6D82             >
 163+ 6D82             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D82             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D82             >
 163+ 6D82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D82 2C          >                db      44
 164+ 6D83                              User_Def BASE       , "BASE"      , 46 //
 164+ 6D83             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 164+ 6D83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D83             >
 164+ 6D83             >                // dummy db directives used to calculate length of namec
 164+ 6D83 42 41 53 45 >                db      "BASE"
 164+ 6D87             >len_NFA         defl    $ - temp_NFA
 164+ 6D87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D83             >
 164+ 6D83 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D84 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 164+ 6D88             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D87 C5          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D88             >
 164+ 6D88 77 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D8A             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D8A CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D8D             >
 164+ 6D8D             >
 164+ 6D8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D8D             >
 164+ 6D8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D8D 2E          >                db      46
 165+ 6D8E                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 165+ 6D8E             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 165+ 6D8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D8E             >
 165+ 6D8E             >                // dummy db directives used to calculate length of namec
 165+ 6D8E 44 50 4C    >                db      "DPL"
 165+ 6D91             >len_NFA         defl    $ - temp_NFA
 165+ 6D91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D8E             >
 165+ 6D8E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D8F 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 165+ 6D92             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D91 CC          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D92             >
 165+ 6D92 83 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D94             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D94 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D97             >
 165+ 6D97             >
 165+ 6D97             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D97             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D97             >
 165+ 6D97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D97 30          >                db      48
 166+ 6D98                              User_Def FLD        , "FLD"       , 50 // output field width
 166+ 6D98             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 166+ 6D98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D98             >
 166+ 6D98             >                // dummy db directives used to calculate length of namec
 166+ 6D98 46 4C 44    >                db      "FLD"
 166+ 6D9B             >len_NFA         defl    $ - temp_NFA
 166+ 6D9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D98             >
 166+ 6D98 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D99 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 166+ 6D9C             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D9B C4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D9C             >
 166+ 6D9C 8E 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D9E             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D9E CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6DA1             >
 166+ 6DA1             >
 166+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6DA1             >
 166+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6DA1 32          >                db      50
 167+ 6DA2                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 167+ 6DA2             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 167+ 6DA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6DA2             >
 167+ 6DA2             >                // dummy db directives used to calculate length of namec
 167+ 6DA2 43 53 50    >                db      "CSP"
 167+ 6DA5             >len_NFA         defl    $ - temp_NFA
 167+ 6DA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6DA2             >
 167+ 6DA2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6DA3 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 167+ 6DA6             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6DA5 D0          >                db      {b $} | END_BIT     // msb as name end
 167+ 6DA6             >
 167+ 6DA6 98 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6DA8             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6DA8 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6DAB             >
 167+ 6DAB             >
 167+ 6DAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6DAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6DAB             >
 167+ 6DAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6DAB 34          >                db      52
 168+ 6DAC                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 168+ 6DAC             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 168+ 6DAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6DAC             >
 168+ 6DAC             >                // dummy db directives used to calculate length of namec
 168+ 6DAC 52 23       >                db      "R#"
 168+ 6DAE             >len_NFA         defl    $ - temp_NFA
 168+ 6DAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6DAC             >
 168+ 6DAC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6DAD 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 168+ 6DAF             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6DAE A3          >                db      {b $} | END_BIT     // msb as name end
 168+ 6DAF             >
 168+ 6DAF A2 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6DB1             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6DB1 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6DB4             >
 168+ 6DB4             >
 168+ 6DB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6DB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6DB4             >
 168+ 6DB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6DB4 36          >                db      54
 169+ 6DB5                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 169+ 6DB5             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 169+ 6DB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6DB5             >
 169+ 6DB5             >                // dummy db directives used to calculate length of namec
 169+ 6DB5 48 4C 44    >                db      "HLD"
 169+ 6DB8             >len_NFA         defl    $ - temp_NFA
 169+ 6DB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6DB5             >
 169+ 6DB5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6DB6 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 169+ 6DB9             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6DB8 C4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6DB9             >
 169+ 6DB9 AC 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6DBB             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6DBB CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DBE             >
 169+ 6DBE             >
 169+ 6DBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DBE             >
 169+ 6DBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DBE 38          >                db      56
 170+ 6DBF                              User_Def USE        , "USE"       , 58 // address of last used block
 170+ 6DBF             >                New_Def  USE, "USE", User_Ptr, is_normal
 170+ 6DBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DBF             >
 170+ 6DBF             >                // dummy db directives used to calculate length of namec
 170+ 6DBF 55 53 45    >                db      "USE"
 170+ 6DC2             >len_NFA         defl    $ - temp_NFA
 170+ 6DC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DBF             >
 170+ 6DBF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DC0 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 170+ 6DC3             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DC2 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DC3             >
 170+ 6DC3 B5 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DC5             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DC5 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DC8             >
 170+ 6DC8             >
 170+ 6DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DC8             >
 170+ 6DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DC8 3A          >                db      58
 171+ 6DC9                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 171+ 6DC9             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 171+ 6DC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DC9             >
 171+ 6DC9             >                // dummy db directives used to calculate length of namec
 171+ 6DC9 50 52 45 56 >                db      "PREV"
 171+ 6DCD             >len_NFA         defl    $ - temp_NFA
 171+ 6DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DC9             >
 171+ 6DC9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DCA 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 171+ 6DCE             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DCD D6          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DCE             >
 171+ 6DCE BF 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DD0             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DD0 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DD3             >
 171+ 6DD3             >
 171+ 6DD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DD3             >
 171+ 6DD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DD3 3C          >                db      60
 172+ 6DD4                              User_Def LP         , "LP"        , 62 // line printer (not used)
 172+ 6DD4             >                New_Def  LP, "LP", User_Ptr, is_normal
 172+ 6DD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DD4             >
 172+ 6DD4             >                // dummy db directives used to calculate length of namec
 172+ 6DD4 4C 50       >                db      "LP"
 172+ 6DD6             >len_NFA         defl    $ - temp_NFA
 172+ 6DD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DD4             >
 172+ 6DD4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DD5 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 172+ 6DD7             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DD6 D0          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DD7             >
 172+ 6DD7 C9 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DD9             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DD9 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DDC             >
 172+ 6DDC             >
 172+ 6DDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DDC             >
 172+ 6DDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DDC 3E          >                db      62
 173+ 6DDD                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 173+ 6DDD             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 173+ 6DDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DDD             >
 173+ 6DDD             >                // dummy db directives used to calculate length of namec
 173+ 6DDD 50 4C 41 43 >                db      "PLACE"
 173+ 6DE1 45          >
 173+ 6DE2             >len_NFA         defl    $ - temp_NFA
 173+ 6DE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DDD             >
 173+ 6DDD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DDE 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 173+ 6DE2 45          >
 173+ 6DE3             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DE2 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DE3             >
 173+ 6DE3 D4 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DE5             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DE5 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DE8             >
 173+ 6DE8             >
 173+ 6DE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DE8             >
 173+ 6DE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DE8 40          >                db      64
 174+ 6DE9                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 174+ 6DE9             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 174+ 6DE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DE9             >
 174+ 6DE9             >                // dummy db directives used to calculate length of namec
 174+ 6DE9 53 4F 55 52 >                db      "SOURCE-ID"
 174+ 6DED 43 45 2D 49 >
 174+ 6DF1 44          >
 174+ 6DF2             >len_NFA         defl    $ - temp_NFA
 174+ 6DF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DE9             >
 174+ 6DE9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DEA 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 174+ 6DEE 43 45 2D 49 >
 174+ 6DF2 44          >
 174+ 6DF3             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DF2 C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DF3             >
 174+ 6DF3 DD 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DF5             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DF5 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DF8             >
 174+ 6DF8             >
 174+ 6DF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DF8             >
 174+ 6DF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DF8 42          >                db      66
 175+ 6DF9                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 175+ 6DF9             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 175+ 6DF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DF9             >
 175+ 6DF9             >                // dummy db directives used to calculate length of namec
 175+ 6DF9 53 50 41 4E >                db      "SPAN"
 175+ 6DFD             >len_NFA         defl    $ - temp_NFA
 175+ 6DFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DF9             >
 175+ 6DF9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DFA 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 175+ 6DFE             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DFD CE          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DFE             >
 175+ 6DFE E9 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6E00             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6E00 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6E03             >
 175+ 6E03             >
 175+ 6E03             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6E03             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6E03             >
 175+ 6E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6E03 44          >                db      68
 176+ 6E04                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 176+ 6E04             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 176+ 6E04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6E04             >
 176+ 6E04             >                // dummy db directives used to calculate length of namec
 176+ 6E04 48 41 4E 44 >                db      "HANDLER"
 176+ 6E08 4C 45 52    >
 176+ 6E0B             >len_NFA         defl    $ - temp_NFA
 176+ 6E0B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6E04             >
 176+ 6E04 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6E05 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 176+ 6E09 4C 45 52    >
 176+ 6E0C             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6E0B D2          >                db      {b $} | END_BIT     // msb as name end
 176+ 6E0C             >
 176+ 6E0C F9 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6E0E             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6E0E CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6E11             >
 176+ 6E11             >
 176+ 6E11             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6E11             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6E11             >
 176+ 6E11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6E11 46          >                db      70
 177+ 6E12                              User_Def HP         , "HP"        , 72 // heap-pointer address
 177+ 6E12             >                New_Def  HP, "HP", User_Ptr, is_normal
 177+ 6E12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6E12             >
 177+ 6E12             >                // dummy db directives used to calculate length of namec
 177+ 6E12 48 50       >                db      "HP"
 177+ 6E14             >len_NFA         defl    $ - temp_NFA
 177+ 6E14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6E12             >
 177+ 6E12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6E13 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 177+ 6E15             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6E14 D0          >                db      {b $} | END_BIT     // msb as name end
 177+ 6E15             >
 177+ 6E15 04 6E       >                dw      last_NFA            // Link to previous definition Name
 177+ 6E17             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6E17 CD 06 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E1A             >
 177+ 6E1A             >
 177+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E1A             >
 177+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E1A 48          >                db      72
 178+ 6E1B
 179+ 6E1B              //  ______________________________________________________________________
 180+ 6E1B              //
 181+ 6E1B              // here         -- a
 182+ 6E1B                              Colon_Def HERE, "HERE", is_normal
 182+ 6E1B             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 182+ 6E1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E1B             >
 182+ 6E1B             >                // dummy db directives used to calculate length of namec
 182+ 6E1B 48 45 52 45 >                db      "HERE"
 182+ 6E1F             >len_NFA         defl    $ - temp_NFA
 182+ 6E1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E1B             >
 182+ 6E1B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E1C 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 182+ 6E20             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E1F C5          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E20             >
 182+ 6E20 12 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E22             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E22 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E25             >
 182+ 6E25             >
 182+ 6E25             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E25             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E25             >
 182+ 6E25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E25 E5 6C C0 6A                  dw      DP, FETCH               // dp @
 184+ 6E29 D0 68                        dw      EXIT                    // ;
 185+ 6E2B
 186+ 6E2B              //  ______________________________________________________________________
 187+ 6E2B              //
 188+ 6E2B              // allot        n --
 189+ 6E2B                              Colon_Def ALLOT, "ALLOT", is_normal
 189+ 6E2B             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 189+ 6E2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E2B             >
 189+ 6E2B             >                // dummy db directives used to calculate length of namec
 189+ 6E2B 41 4C 4C 4F >                db      "ALLOT"
 189+ 6E2F 54          >
 189+ 6E30             >len_NFA         defl    $ - temp_NFA
 189+ 6E30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E2B             >
 189+ 6E2B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E2C 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 189+ 6E30 54          >
 189+ 6E31             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6E30 D4          >                db      {b $} | END_BIT     // msb as name end
 189+ 6E31             >
 189+ 6E31 1B 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6E33             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6E33 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6E36             >
 189+ 6E36             >
 189+ 6E36             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6E36             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6E36             >
 189+ 6E36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6E36 E5 6C A1 6A                  dw      DP,  PLUSSTORE          // dp +!
 191+ 6E3A D0 68                        dw      EXIT                    // ;
 192+ 6E3C
 193+ 6E3C              //  ______________________________________________________________________
 194+ 6E3C              //
 195+ 6E3C              // comma        n --
 196+ 6E3C                              Colon_Def COMMA, ",", is_normal
 196+ 6E3C             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 196+ 6E3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6E3C             >
 196+ 6E3C             >                // dummy db directives used to calculate length of namec
 196+ 6E3C 2C          >                db      ","
 196+ 6E3D             >len_NFA         defl    $ - temp_NFA
 196+ 6E3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6E3C             >
 196+ 6E3C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6E3D 2C          >                db      ","               // name string in 7-bit ascii, but
 196+ 6E3E             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6E3D AC          >                db      {b $} | END_BIT     // msb as name end
 196+ 6E3E             >
 196+ 6E3E 2B 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6E40             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6E40 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6E43             >
 196+ 6E43             >
 196+ 6E43             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6E43             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6E43             >
 196+ 6E43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6E43 22 6E CB 6A                  dw      HERE, STORE             // here !
 198+ 6E47 27 6C 33 6E                  dw      TWO, ALLOT              // 2 allot
 199+ 6E4B D0 68                        dw      EXIT                    // ;
 200+ 6E4D
 201+ 6E4D              //  ______________________________________________________________________
 202+ 6E4D              //
 203+ 6E4D              // ccomma       c --
 204+ 6E4D                              Colon_Def CCOMMA, "C,", is_normal
 204+ 6E4D             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 204+ 6E4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E4D             >
 204+ 6E4D             >                // dummy db directives used to calculate length of namec
 204+ 6E4D 43 2C       >                db      "C,"
 204+ 6E4F             >len_NFA         defl    $ - temp_NFA
 204+ 6E4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E4D             >
 204+ 6E4D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E4E 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 204+ 6E50             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E4F AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E50             >
 204+ 6E50 3C 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E52             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E52 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E55             >
 204+ 6E55             >
 204+ 6E55             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E55             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E55             >
 204+ 6E55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E55 22 6E E3 6A                  dw      HERE, CSTORE            // here c!
 206+ 6E59 1E 6C 33 6E                  dw      ONE, ALLOT              // 1 allot
 207+ 6E5D D0 68                        dw      EXIT                    // ;
 208+ 6E5F
 209+ 6E5F              //  ______________________________________________________________________
 210+ 6E5F              //
 211+ 6E5F              // s>d          n -- d
 212+ 6E5F              // converts a single precision integer in a double precision
 213+ 6E5F                              New_Def S_TO_D, "S>D", is_code, is_normal
 213+ 6E5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 213+ 6E5F             >
 213+ 6E5F             >                // dummy db directives used to calculate length of namec
 213+ 6E5F 53 3E 44    >                db      "S>D"
 213+ 6E62             >len_NFA         defl    $ - temp_NFA
 213+ 6E62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 213+ 6E5F             >
 213+ 6E5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 213+ 6E60 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 213+ 6E63             >                org     $-1                 // alter last byte of Name just above to set
 213+ 6E62 C4          >                db      {b $} | END_BIT     // msb as name end
 213+ 6E63             >
 213+ 6E63 4D 6E       >                dw      last_NFA            // Link to previous definition Name
 213+ 6E65             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 213+ 6E65 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 213+ 6E65 ~           >
 213+ 6E65 ~           >
 213+ 6E65             >                endif           ; ok        // for other definitions it "points" the correct handler
 213+ 6E65             >                // Use of "; ok" to suppress "warning[fwdref]"
 213+ 6E65             >
 213+ 6E65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 214+ 6E65 D1                           pop     de
 215+ 6E66 21 00 00                     ld      hl, 0
 216+ 6E69 7A                           ld      a, d
 217+ 6E6A E6 80                        and     $80
 218+ 6E6C 28 01                        jr      z, S_to_D_Skip
 219+ 6E6E 2B                           dec     hl                  // $FFFF
 220+ 6E6F              S_to_D_Skip:
 221+ 6E6F D5                           push    de
 222+ 6E70 E5                           push    hl
 223+ 6E71                              next
 223+ 6E71 DD E9       >                jp      (ix)
 224+ 6E73
 225+ 6E73              //  ______________________________________________________________________
 226+ 6E73              //
 227+ 6E73              // -            n1 n2 -- n3
 228+ 6E73              // subtraction
 229+ 6E73                              New_Def SUBTRACT, "-", is_code, is_normal
 229+ 6E73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 229+ 6E73             >
 229+ 6E73             >                // dummy db directives used to calculate length of namec
 229+ 6E73 2D          >                db      "-"
 229+ 6E74             >len_NFA         defl    $ - temp_NFA
 229+ 6E74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 229+ 6E73             >
 229+ 6E73 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 229+ 6E74 2D          >                db      "-"               // name string in 7-bit ascii, but
 229+ 6E75             >                org     $-1                 // alter last byte of Name just above to set
 229+ 6E74 AD          >                db      {b $} | END_BIT     // msb as name end
 229+ 6E75             >
 229+ 6E75 5F 6E       >                dw      last_NFA            // Link to previous definition Name
 229+ 6E77             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 229+ 6E77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 229+ 6E77 ~           >
 229+ 6E77 ~           >
 229+ 6E77             >                endif           ; ok        // for other definitions it "points" the correct handler
 229+ 6E77             >                // Use of "; ok" to suppress "warning[fwdref]"
 229+ 6E77             >
 229+ 6E77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 230+ 6E77 D1                           pop     de
 231+ 6E78 E1                           pop     hl
 232+ 6E79 A7                           and     a
 233+ 6E7A ED 52                        sbc     hl, de
 234+ 6E7C
 235+ 6E7C                              psh1
 235+ 6E7C E5          >                push    hl
 235+ 6E7D DD E9       >                jp      (ix)
 236+ 6E7F
 237+ 6E7F              //  ______________________________________________________________________
 238+ 6E7F              //
 239+ 6E7F              // =            n1 n2 -- n3
 240+ 6E7F              // equals
 241+ 6E7F                              Colon_Def EQUALS, "=", is_normal
 241+ 6E7F             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 241+ 6E7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 241+ 6E7F             >
 241+ 6E7F             >                // dummy db directives used to calculate length of namec
 241+ 6E7F 3D          >                db      "="
 241+ 6E80             >len_NFA         defl    $ - temp_NFA
 241+ 6E80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 241+ 6E7F             >
 241+ 6E7F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 241+ 6E80 3D          >                db      "="               // name string in 7-bit ascii, but
 241+ 6E81             >                org     $-1                 // alter last byte of Name just above to set
 241+ 6E80 BD          >                db      {b $} | END_BIT     // msb as name end
 241+ 6E81             >
 241+ 6E81 73 6E       >                dw      last_NFA            // Link to previous definition Name
 241+ 6E83             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 241+ 6E83 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 241+ 6E86             >
 241+ 6E86             >
 241+ 6E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 241+ 6E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 241+ 6E86             >
 241+ 6E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 242+ 6E86 77 6E 2D 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 243+ 6E8A D0 68                        dw      EXIT                    // ;
 244+ 6E8C
 245+ 6E8C              //  ______________________________________________________________________
 246+ 6E8C              //
 247+ 6E8C              // u<           u1 u2 -- u3
 248+ 6E8C              // unsigned less-than
 249+ 6E8C                              New_Def ULESS, "U<", is_code, is_normal
 249+ 6E8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6E8C             >
 249+ 6E8C             >                // dummy db directives used to calculate length of namec
 249+ 6E8C 55 3C       >                db      "U<"
 249+ 6E8E             >len_NFA         defl    $ - temp_NFA
 249+ 6E8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6E8C             >
 249+ 6E8C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6E8D 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 249+ 6E8F             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6E8E BC          >                db      {b $} | END_BIT     // msb as name end
 249+ 6E8F             >
 249+ 6E8F 7F 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6E91             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6E91 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 249+ 6E91 ~           >
 249+ 6E91 ~           >
 249+ 6E91             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6E91             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6E91             >
 249+ 6E91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6E91 D1                           pop     de
 251+ 6E92 E1                           pop     hl
 252+ 6E93 A7                           and     a
 253+ 6E94 ED 52                        sbc     hl, de
 254+ 6E96 21 FF FF                     ld      hl, -1
 255+ 6E99 38 01                        jr      c, ULess_Skip
 256+ 6E9B 23                               inc     hl
 257+ 6E9C              ULess_Skip:
 258+ 6E9C
 259+ 6E9C                              psh1
 259+ 6E9C E5          >                push    hl
 259+ 6E9D DD E9       >                jp      (ix)
 260+ 6E9F
 261+ 6E9F              //  ______________________________________________________________________
 262+ 6E9F              //
 263+ 6E9F              // <           n1 n2 -- n3
 264+ 6E9F              // less-than
 265+ 6E9F                              New_Def LESS, "<", is_code, is_normal
 265+ 6E9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 265+ 6E9F             >
 265+ 6E9F             >                // dummy db directives used to calculate length of namec
 265+ 6E9F 3C          >                db      "<"
 265+ 6EA0             >len_NFA         defl    $ - temp_NFA
 265+ 6EA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 265+ 6E9F             >
 265+ 6E9F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 265+ 6EA0 3C          >                db      "<"               // name string in 7-bit ascii, but
 265+ 6EA1             >                org     $-1                 // alter last byte of Name just above to set
 265+ 6EA0 BC          >                db      {b $} | END_BIT     // msb as name end
 265+ 6EA1             >
 265+ 6EA1 8C 6E       >                dw      last_NFA            // Link to previous definition Name
 265+ 6EA3             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 265+ 6EA3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 265+ 6EA3 ~           >
 265+ 6EA3 ~           >
 265+ 6EA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 265+ 6EA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 265+ 6EA3             >
 265+ 6EA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 266+ 6EA3 D1                           pop     de
 267+ 6EA4 E1                           pop     hl
 268+ 6EA5 7C                           ld      a, h
 269+ 6EA6 EE 80                        xor     $80
 270+ 6EA8 67                           ld      h, a
 271+ 6EA9 7A                           ld      a, d
 272+ 6EAA EE 80                        xor     $80
 273+ 6EAC 57                           ld      d, a
 274+ 6EAD A7                           and     a
 275+ 6EAE ED 52                        sbc     hl, de
 276+ 6EB0 21 FF FF                     ld      hl, -1
 277+ 6EB3 38 01                        jr      c, Less_Skip
 278+ 6EB5 23                               inc     hl
 279+ 6EB6              Less_Skip:
 280+ 6EB6
 281+ 6EB6                              psh1
 281+ 6EB6 E5          >                push    hl
 281+ 6EB7 DD E9       >                jp      (ix)
 282+ 6EB9
 283+ 6EB9              //  ______________________________________________________________________
 284+ 6EB9              //
 285+ 6EB9              // >            n1 n2 -- n3
 286+ 6EB9              // greater than
 287+ 6EB9                              Colon_Def GREATER, ">", is_normal
 287+ 6EB9             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 287+ 6EB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ 6EB9             >
 287+ 6EB9             >                // dummy db directives used to calculate length of namec
 287+ 6EB9 3E          >                db      ">"
 287+ 6EBA             >len_NFA         defl    $ - temp_NFA
 287+ 6EBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ 6EB9             >
 287+ 6EB9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ 6EBA 3E          >                db      ">"               // name string in 7-bit ascii, but
 287+ 6EBB             >                org     $-1                 // alter last byte of Name just above to set
 287+ 6EBA BE          >                db      {b $} | END_BIT     // msb as name end
 287+ 6EBB             >
 287+ 6EBB 9F 6E       >                dw      last_NFA            // Link to previous definition Name
 287+ 6EBD             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 6EBD CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 287+ 6EC0             >
 287+ 6EC0             >
 287+ 6EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 6EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 6EC0             >
 287+ 6EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 6EC0 34 6A A3 6E                  dw      SWAP, LESS              // swap <
 289+ 6EC4 D0 68                        dw      EXIT                    // ;
 290+ 6EC6              //  ______________________________________________________________________
 291+ 6EC6              //
 292+ 6EC6              // min          n1 n2 -- n3
 293+ 6EC6              // minimum between n1 and n2
 294+ 6EC6                              Colon_Def MIN, "MIN" , is_normal
 294+ 6EC6             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 294+ 6EC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6EC6             >
 294+ 6EC6             >                // dummy db directives used to calculate length of namec
 294+ 6EC6 4D 49 4E    >                db      "MIN"
 294+ 6EC9             >len_NFA         defl    $ - temp_NFA
 294+ 6EC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6EC6             >
 294+ 6EC6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6EC7 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 294+ 6ECA             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6EC9 CE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6ECA             >
 294+ 6ECA B9 6E       >                dw      last_NFA            // Link to previous definition Name
 294+ 6ECC             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6ECC CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6ECF             >
 294+ 6ECF             >
 294+ 6ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6ECF             >
 294+ 6ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6ECF 94 6A                        dw      TWO_DUP                 // 2dup
 296+ 6ED1 BD 6E                        dw      GREATER                 // >
 297+ 6ED3 D8 63                        dw      ZBRANCH
 298+ 6ED5 04 00                        dw      Min_Skip - $   // if
 299+ 6ED7 34 6A                        dw          SWAP                //      swap
 300+ 6ED9              Min_Skip:                                       // endif
 301+ 6ED9 12 6A                        dw      DROP                    // drop
 302+ 6EDB D0 68                        dw      EXIT                    // ;
 303+ 6EDD
 304+ 6EDD              //  ______________________________________________________________________
 305+ 6EDD              //
 306+ 6EDD              // max          n1 n2 -- n3
 307+ 6EDD              // maximum between n1 and n2
 308+ 6EDD                              Colon_Def MAX, "MAX", is_normal
 308+ 6EDD             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 308+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 308+ 6EDD             >
 308+ 6EDD             >                // dummy db directives used to calculate length of namec
 308+ 6EDD 4D 41 58    >                db      "MAX"
 308+ 6EE0             >len_NFA         defl    $ - temp_NFA
 308+ 6EE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 308+ 6EDD             >
 308+ 6EDD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 308+ 6EDE 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 308+ 6EE1             >                org     $-1                 // alter last byte of Name just above to set
 308+ 6EE0 D8          >                db      {b $} | END_BIT     // msb as name end
 308+ 6EE1             >
 308+ 6EE1 C6 6E       >                dw      last_NFA            // Link to previous definition Name
 308+ 6EE3             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 308+ 6EE3 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 308+ 6EE6             >
 308+ 6EE6             >
 308+ 6EE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 308+ 6EE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 308+ 6EE6             >
 308+ 6EE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 309+ 6EE6 94 6A                        dw      TWO_DUP                 // 2dup
 310+ 6EE8 A3 6E                        dw      LESS                    // <
 311+ 6EEA D8 63                        dw      ZBRANCH
 312+ 6EEC 04 00                        dw      Max_Skip - $   // if
 313+ 6EEE 34 6A                        dw          SWAP                //      swap
 314+ 6EF0              Max_Skip:                                       // endif
 315+ 6EF0 12 6A                        dw      DROP                    // drop
 316+ 6EF2 D0 68                        dw      EXIT                    // ;
 317+ 6EF4
 318+ 6EF4              //  ______________________________________________________________________
 319+ 6EF4              //
 320+ 6EF4              // ?dup         n -- 0 | n n
 321+ 6EF4              // duplicate if not zero
 322+ 6EF4                              New_Def QDUP, "?DUP", is_code, is_normal
 322+ 6EF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 6EF4             >
 322+ 6EF4             >                // dummy db directives used to calculate length of namec
 322+ 6EF4 3F 44 55 50 >                db      "?DUP"
 322+ 6EF8             >len_NFA         defl    $ - temp_NFA
 322+ 6EF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 6EF4             >
 322+ 6EF4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 6EF5 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 322+ 6EF9             >                org     $-1                 // alter last byte of Name just above to set
 322+ 6EF8 D0          >                db      {b $} | END_BIT     // msb as name end
 322+ 6EF9             >
 322+ 6EF9 DD 6E       >                dw      last_NFA            // Link to previous definition Name
 322+ 6EFB             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 6EFB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 322+ 6EFB ~           >
 322+ 6EFB ~           >
 322+ 6EFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 6EFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 6EFB             >
 322+ 6EFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 6EFB              QDup_Ptr:
 324+ 6EFB E1                           pop     hl
 325+ 6EFC 7C                           ld      a, h
 326+ 6EFD B5                           or      l
 327+ 6EFE 28 01                        jr      z, QDup_Skip
 328+ 6F00 E5                               push    hl
 329+ 6F01              QDup_Skip:
 330+ 6F01                              psh1
 330+ 6F01 E5          >                push    hl
 330+ 6F02 DD E9       >                jp      (ix)
 331+ 6F04
 332+ 6F04              //  ______________________________________________________________________
 333+ 6F04              //
 334+ 6F04              // -dup         n -- 0 | n n
 335+ 6F04              // duplicate if not zero
 336+ 6F04                              New_Def LDUP, "-DUP", is_code, is_normal
 336+ 6F04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 6F04             >
 336+ 6F04             >                // dummy db directives used to calculate length of namec
 336+ 6F04 2D 44 55 50 >                db      "-DUP"
 336+ 6F08             >len_NFA         defl    $ - temp_NFA
 336+ 6F08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 6F04             >
 336+ 6F04 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 6F05 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 336+ 6F09             >                org     $-1                 // alter last byte of Name just above to set
 336+ 6F08 D0          >                db      {b $} | END_BIT     // msb as name end
 336+ 6F09             >
 336+ 6F09 F4 6E       >                dw      last_NFA            // Link to previous definition Name
 336+ 6F0B             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 6F0B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 336+ 6F0B ~           >
 336+ 6F0B ~           >
 336+ 6F0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 6F0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 6F0B             >
 336+ 6F0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 6F0B C3 FB 6E                     jp      QDup_Ptr
 338+ 6F0E
 339+ 6F0E              //  ______________________________________________________________________
 340+ 6F0E              //
 341+ 6F0E              // emit         c --
 342+ 6F0E                              Colon_Def EMIT, "EMIT", is_normal
 342+ 6F0E             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 342+ 6F0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 342+ 6F0E             >
 342+ 6F0E             >                // dummy db directives used to calculate length of namec
 342+ 6F0E 45 4D 49 54 >                db      "EMIT"
 342+ 6F12             >len_NFA         defl    $ - temp_NFA
 342+ 6F12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 342+ 6F0E             >
 342+ 6F0E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 342+ 6F0F 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 342+ 6F13             >                org     $-1                 // alter last byte of Name just above to set
 342+ 6F12 D4          >                db      {b $} | END_BIT     // msb as name end
 342+ 6F13             >
 342+ 6F13 04 6F       >                dw      last_NFA            // Link to previous definition Name
 342+ 6F15             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 342+ 6F15 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 342+ 6F18             >
 342+ 6F18             >
 342+ 6F18             >                endif           ; ok        // for other definitions it "points" the correct handler
 342+ 6F18             >                // Use of "; ok" to suppress "warning[fwdref]"
 342+ 6F18             >
 342+ 6F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 343+ 6F18 F6 65                        dw      C_EMIT                      // (?emit)
 344+ 6F1A FB 6E                        dw      QDUP                        // ?dup
 345+ 6F1C                                                                  // if
 346+ 6F1C D8 63                        dw      ZBRANCH
 347+ 6F1E 0A 00                        dw      Emit_Skip - $
 348+ 6F20 C4 65                        dw          EMITC                   //      emitc
 349+ 6F22 1E 6C                        dw          ONE                     //      1
 350+ 6F24 40 6D A1 6A                  dw          OUT, PLUSSTORE        //      out +!
 351+ 6F28              Emit_Skip:                                          // endif
 352+ 6F28 D0 68                        dw      EXIT                        // ;
 353+ 6F2A
 354+ 6F2A              //  ______________________________________________________________________
 355+ 6F2A              //
 356+ 6F2A              // space        --
 357+ 6F2A                              Colon_Def SPACE, "SPACE", is_normal
 357+ 6F2A             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 357+ 6F2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 6F2A             >
 357+ 6F2A             >                // dummy db directives used to calculate length of namec
 357+ 6F2A 53 50 41 43 >                db      "SPACE"
 357+ 6F2E 45          >
 357+ 6F2F             >len_NFA         defl    $ - temp_NFA
 357+ 6F2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 6F2A             >
 357+ 6F2A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 6F2B 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 357+ 6F2F 45          >
 357+ 6F30             >                org     $-1                 // alter last byte of Name just above to set
 357+ 6F2F C5          >                db      {b $} | END_BIT     // msb as name end
 357+ 6F30             >
 357+ 6F30 0E 6F       >                dw      last_NFA            // Link to previous definition Name
 357+ 6F32             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 6F32 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 357+ 6F35             >
 357+ 6F35             >
 357+ 6F35             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 6F35             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 6F35             >
 357+ 6F35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 6F35 44 6C 15 6F                  dw      BL, EMIT                // bl emit
 359+ 6F39 D0 68                        dw      EXIT                    // ;
 360+ 6F3B
 361+ 6F3B              //  ______________________________________________________________________
 362+ 6F3B              //
 363+ 6F3B              // traverse     a n -- a
 364+ 6F3B              // A dictionary entry is structured as follows
 365+ 6F3B              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 366+ 6F3B              //      +1   word name, last character is toggled with $80
 367+ 6F3B              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 368+ 6F3B              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 369+ 6F3B              // PFA: +6+n "is_code", definitions have no PFA. // +5
 370+ 6F3B              //
 371+ 6F3B                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 371+ 6F3B             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 371+ 6F3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 6F3B             >
 371+ 6F3B             >                // dummy db directives used to calculate length of namec
 371+ 6F3B 54 52 41 56 >                db      "TRAVERSE"
 371+ 6F3F 45 52 53 45 >
 371+ 6F43             >len_NFA         defl    $ - temp_NFA
 371+ 6F43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 6F3B             >
 371+ 6F3B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 6F3C 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 371+ 6F40 45 52 53 45 >
 371+ 6F44             >                org     $-1                 // alter last byte of Name just above to set
 371+ 6F43 C5          >                db      {b $} | END_BIT     // msb as name end
 371+ 6F44             >
 371+ 6F44 2A 6F       >                dw      last_NFA            // Link to previous definition Name
 371+ 6F46             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 6F46 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 6F49             >
 371+ 6F49             >
 371+ 6F49             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 6F49             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 6F49             >
 371+ 6F49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 6F49 34 6A                        dw      SWAP                    // swap
 373+ 6F4B              Traverse_Begin:                                 // begin
 374+ 6F4B 04 6A 6B 69                  dw          OVER, PLUS          //      over +
 375+ 6F4F A5 63 7F 00                  dw          LIT, 127            //      127
 376+ 6F53 04 6A D7 6A                  dw          OVER, CFETCH        //      over @
 377+ 6F57 A3 6E                        dw          LESS                //      <
 378+ 6F59                                                              // until
 379+ 6F59 D8 63                        dw      ZBRANCH
 380+ 6F5B F0 FF                        dw      Traverse_Begin - $
 381+ 6F5D 1B 6A                        dw      NIP                     //  nip
 382+ 6F5F D0 68                        dw      EXIT                    //  ;
 383+ 6F61
 384+ 6F61              //  ______________________________________________________________________
 385+ 6F61              //
 386+ 6F61              // latest       -- nfa
 387+ 6F61                              Colon_Def LATEST, "LATEST", is_normal
 387+ 6F61             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 387+ 6F61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 387+ 6F61             >
 387+ 6F61             >                // dummy db directives used to calculate length of namec
 387+ 6F61 4C 41 54 45 >                db      "LATEST"
 387+ 6F65 53 54       >
 387+ 6F67             >len_NFA         defl    $ - temp_NFA
 387+ 6F67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 387+ 6F61             >
 387+ 6F61 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 387+ 6F62 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 387+ 6F66 53 54       >
 387+ 6F68             >                org     $-1                 // alter last byte of Name just above to set
 387+ 6F67 D4          >                db      {b $} | END_BIT     // msb as name end
 387+ 6F68             >
 387+ 6F68 3B 6F       >                dw      last_NFA            // Link to previous definition Name
 387+ 6F6A             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 387+ 6F6A CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 387+ 6F6D             >
 387+ 6F6D             >
 387+ 6F6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 387+ 6F6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 387+ 6F6D             >
 387+ 6F6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 388+ 6F6D 73 6D                        dw      CURRENT                 // current
 389+ 6F6F C0 6A C0 6A                  dw      FETCH, FETCH            // @ @
 390+ 6F73 D0 68                        dw      EXIT                    // ;
 391+ 6F75
 392+ 6F75              //  ______________________________________________________________________
 393+ 6F75              //
 394+ 6F75              // lfa          pfa -- lfa
 395+ 6F75                              Colon_Def LFA, "LFA", is_normal
 395+ 6F75             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 395+ 6F75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 6F75             >
 395+ 6F75             >                // dummy db directives used to calculate length of namec
 395+ 6F75 4C 46 41    >                db      "LFA"
 395+ 6F78             >len_NFA         defl    $ - temp_NFA
 395+ 6F78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 6F75             >
 395+ 6F75 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 6F76 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 395+ 6F79             >                org     $-1                 // alter last byte of Name just above to set
 395+ 6F78 C1          >                db      {b $} | END_BIT     // msb as name end
 395+ 6F79             >
 395+ 6F79 61 6F       >                dw      last_NFA            // Link to previous definition Name
 395+ 6F7B             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 6F7B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 6F7E             >
 395+ 6F7E             >
 395+ 6F7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 6F7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 6F7E             >
 395+ 6F7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 6F7E A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 397+ 6F82 77 6E                        dw      SUBTRACT                // cell- --> -
 398+ 6F84 D0 68                        dw      EXIT                    // ;
 399+ 6F86
 400+ 6F86              //  ______________________________________________________________________
 401+ 6F86              //
 402+ 6F86              // cfa          pfa -- cfa
 403+ 6F86                              Colon_Def CFA, "CFA", is_normal
 403+ 6F86             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 403+ 6F86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 6F86             >
 403+ 6F86             >                // dummy db directives used to calculate length of namec
 403+ 6F86 43 46 41    >                db      "CFA"
 403+ 6F89             >len_NFA         defl    $ - temp_NFA
 403+ 6F89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 6F86             >
 403+ 6F86 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 6F87 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 403+ 6F8A             >                org     $-1                 // alter last byte of Name just above to set
 403+ 6F89 C1          >                db      {b $} | END_BIT     // msb as name end
 403+ 6F8A             >
 403+ 6F8A 75 6F       >                dw      last_NFA            // Link to previous definition Name
 403+ 6F8C             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6F8C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 6F8F             >
 403+ 6F8F             >
 403+ 6F8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6F8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6F8F             >
 403+ 6F8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6F8F              //              dw      CELL_MINUS              // cell-
 405+ 6F8F 30 6C 77 6E                  dw      THREE, SUBTRACT         // 3 -
 406+ 6F93 D0 68                        dw      EXIT                    // ;
 407+ 6F95
 408+ 6F95              //  ______________________________________________________________________
 409+ 6F95              //
 410+ 6F95              // nfa          pfa -- nfa
 411+ 6F95                              Colon_Def NFA, "NFA", is_normal
 411+ 6F95             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 411+ 6F95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 6F95             >
 411+ 6F95             >                // dummy db directives used to calculate length of namec
 411+ 6F95 4E 46 41    >                db      "NFA"
 411+ 6F98             >len_NFA         defl    $ - temp_NFA
 411+ 6F98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 6F95             >
 411+ 6F95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 6F96 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 411+ 6F99             >                org     $-1                 // alter last byte of Name just above to set
 411+ 6F98 C1          >                db      {b $} | END_BIT     // msb as name end
 411+ 6F99             >
 411+ 6F99 86 6F       >                dw      last_NFA            // Link to previous definition Name
 411+ 6F9B             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 6F9B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 6F9E             >
 411+ 6F9E             >
 411+ 6F9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 6F9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 6F9E             >
 411+ 6F9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 6F9E A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 413+ 6FA2 77 6E                        dw      SUBTRACT                // -
 414+ 6FA4 3A 6C                        dw      NEG_ONE                 // -1
 415+ 6FA6 46 6F                        dw      TRAVERSE                // traverse
 416+ 6FA8 D0 68                        dw      EXIT                    // ;
 417+ 6FAA
 418+ 6FAA              //  ______________________________________________________________________
 419+ 6FAA              //
 420+ 6FAA              // pfa          nfa -- pfa
 421+ 6FAA                              Colon_Def PFA, "PFA", is_normal
 421+ 6FAA             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 421+ 6FAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 6FAA             >
 421+ 6FAA             >                // dummy db directives used to calculate length of namec
 421+ 6FAA 50 46 41    >                db      "PFA"
 421+ 6FAD             >len_NFA         defl    $ - temp_NFA
 421+ 6FAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 6FAA             >
 421+ 6FAA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 6FAB 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 421+ 6FAE             >                org     $-1                 // alter last byte of Name just above to set
 421+ 6FAD C1          >                db      {b $} | END_BIT     // msb as name end
 421+ 6FAE             >
 421+ 6FAE 95 6F       >                dw      last_NFA            // Link to previous definition Name
 421+ 6FB0             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6FB0 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 6FB3             >
 421+ 6FB3             >
 421+ 6FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6FB3             >
 421+ 6FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6FB3 1E 6C                        dw      ONE                     // 1
 423+ 6FB5 46 6F                        dw      TRAVERSE                // traverse
 424+ 6FB7 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 425+ 6FBB 6B 69                        dw      PLUS                    // +
 426+ 6FBD D0 68                        dw      EXIT                    // ;
 427+ 6FBF
 428+ 6FBF              //  ______________________________________________________________________
 429+ 6FBF              //
 430+ 6FBF              // >body        cfa -- pfa
 431+ 6FBF                              Colon_Def TO_BODY, ">BODY", is_normal
 431+ 6FBF             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 431+ 6FBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 431+ 6FBF             >
 431+ 6FBF             >                // dummy db directives used to calculate length of namec
 431+ 6FBF 3E 42 4F 44 >                db      ">BODY"
 431+ 6FC3 59          >
 431+ 6FC4             >len_NFA         defl    $ - temp_NFA
 431+ 6FC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 431+ 6FBF             >
 431+ 6FBF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 431+ 6FC0 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 431+ 6FC4 59          >
 431+ 6FC5             >                org     $-1                 // alter last byte of Name just above to set
 431+ 6FC4 D9          >                db      {b $} | END_BIT     // msb as name end
 431+ 6FC5             >
 431+ 6FC5 AA 6F       >                dw      last_NFA            // Link to previous definition Name
 431+ 6FC7             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 431+ 6FC7 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 431+ 6FCA             >
 431+ 6FCA             >
 431+ 6FCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 431+ 6FCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 431+ 6FCA             >
 431+ 6FCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 432+ 6FCA 30 6C 6B 69                  dw      THREE, PLUS             // cell+ --> 3 +
 433+ 6FCE D0 68                        dw      EXIT                    // ;
 434+ 6FD0
 435+ 6FD0              //  ______________________________________________________________________
 436+ 6FD0              //
 437+ 6FD0              // <name        cfa -- nfa
 438+ 6FD0                              Colon_Def TO_NAME, "<NAME", is_normal
 438+ 6FD0             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 438+ 6FD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ 6FD0             >
 438+ 6FD0             >                // dummy db directives used to calculate length of namec
 438+ 6FD0 3C 4E 41 4D >                db      "<NAME"
 438+ 6FD4 45          >
 438+ 6FD5             >len_NFA         defl    $ - temp_NFA
 438+ 6FD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ 6FD0             >
 438+ 6FD0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ 6FD1 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 438+ 6FD5 45          >
 438+ 6FD6             >                org     $-1                 // alter last byte of Name just above to set
 438+ 6FD5 C5          >                db      {b $} | END_BIT     // msb as name end
 438+ 6FD6             >
 438+ 6FD6 BF 6F       >                dw      last_NFA            // Link to previous definition Name
 438+ 6FD8             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6FD8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 6FDB             >
 438+ 6FDB             >
 438+ 6FDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6FDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6FDB             >
 438+ 6FDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6FDB C7 6F                        dw      TO_BODY                 // >body
 440+ 6FDD 9B 6F                        dw      NFA                     // nfa
 441+ 6FDF D0 68                        dw      EXIT                    // ;
 442+ 6FE1
 443+ 6FE1              //  ______________________________________________________________________
 444+ 6FE1              //
 445+ 6FE1              // !csp         --
 446+ 6FE1              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 447+ 6FE1                              Colon_Def STORE_CSP, "!CSP", is_normal
 447+ 6FE1             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 447+ 6FE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ 6FE1             >
 447+ 6FE1             >                // dummy db directives used to calculate length of namec
 447+ 6FE1 21 43 53 50 >                db      "!CSP"
 447+ 6FE5             >len_NFA         defl    $ - temp_NFA
 447+ 6FE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ 6FE1             >
 447+ 6FE1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ 6FE2 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 447+ 6FE6             >                org     $-1                 // alter last byte of Name just above to set
 447+ 6FE5 D0          >                db      {b $} | END_BIT     // msb as name end
 447+ 6FE6             >
 447+ 6FE6 D0 6F       >                dw      last_NFA            // Link to previous definition Name
 447+ 6FE8             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 6FE8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 447+ 6FEB             >
 447+ 6FEB             >
 447+ 6FEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 6FEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 6FEB             >
 447+ 6FEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 6FEB A0 68                        dw      SPFETCH                 // sp@
 449+ 6FED A8 6D CB 6A                  dw      CSP, STORE              // csp !
 450+ 6FF1 D0 68                        dw      EXIT                    // ;
 451+ 6FF3
 452+ 6FF3              //  ______________________________________________________________________
 453+ 6FF3              //
 454+ 6FF3              // ?error       f n --
 455+ 6FF3              // rase error n if flag f it true
 456+ 6FF3                              Colon_Def QERROR, "?ERROR", is_normal
 456+ 6FF3             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 456+ 6FF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 6FF3             >
 456+ 6FF3             >                // dummy db directives used to calculate length of namec
 456+ 6FF3 3F 45 52 52 >                db      "?ERROR"
 456+ 6FF7 4F 52       >
 456+ 6FF9             >len_NFA         defl    $ - temp_NFA
 456+ 6FF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 6FF3             >
 456+ 6FF3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 6FF4 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 456+ 6FF8 4F 52       >
 456+ 6FFA             >                org     $-1                 // alter last byte of Name just above to set
 456+ 6FF9 D2          >                db      {b $} | END_BIT     // msb as name end
 456+ 6FFA             >
 456+ 6FFA E1 6F       >                dw      last_NFA            // Link to previous definition Name
 456+ 6FFC             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 6FFC CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 6FFF             >
 456+ 6FFF             >
 456+ 6FFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 6FFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 6FFF             >
 456+ 6FFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 6FFF 34 6A                        dw      SWAP                    // swap
 458+ 7001                                                              // if
 459+ 7001 D8 63                        dw      ZBRANCH
 460+ 7003 08 00                        dw      QError_Else - $
 461+ 7005 9C 75                        dw          ERROR               //      error  ( is a forward-ref )
 462+ 7007                                                              // else
 463+ 7007 C3 63                        dw      BRANCH
 464+ 7009 04 00                        dw      QError_Endif - $
 465+ 700B              QError_Else:
 466+ 700B 12 6A                        dw          DROP                //      drop
 467+ 700D              QError_Endif:                                   // endif
 468+ 700D D0 68                        dw      EXIT                    // ;
 469+ 700F
 470+ 700F              //  ______________________________________________________________________
 471+ 700F              //
 472+ 700F              // ?comp       --
 473+ 700F              // raise msg #17 if not compiling
 474+ 700F                              Colon_Def QCOMP, "?COMP", is_normal
 474+ 700F             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 474+ 700F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ 700F             >
 474+ 700F             >                // dummy db directives used to calculate length of namec
 474+ 700F 3F 43 4F 4D >                db      "?COMP"
 474+ 7013 50          >
 474+ 7014             >len_NFA         defl    $ - temp_NFA
 474+ 7014             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ 700F             >
 474+ 700F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ 7010 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 474+ 7014 50          >
 474+ 7015             >                org     $-1                 // alter last byte of Name just above to set
 474+ 7014 D0          >                db      {b $} | END_BIT     // msb as name end
 474+ 7015             >
 474+ 7015 F3 6F       >                dw      last_NFA            // Link to previous definition Name
 474+ 7017             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 7017 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 701A             >
 474+ 701A             >
 474+ 701A             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 701A             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 701A             >
 474+ 701A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 701A 7F 6D C0 6A                  dw      STATE, FETCH            // state @
 476+ 701E 2D 69                        dw      ZEQUAL                  // 0=
 477+ 7020 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 478+ 7024 FC 6F                        dw      QERROR                  // ?error
 479+ 7026 D0 68                        dw      EXIT                    // ;
 480+ 7028
 481+ 7028              //  ______________________________________________________________________
 482+ 7028              //
 483+ 7028              // ?exec       --
 484+ 7028              // raise msg #18 if compiling
 485+ 7028                              Colon_Def QEXEC, "?EXEC", is_normal
 485+ 7028             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 485+ 7028             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 485+ 7028             >
 485+ 7028             >                // dummy db directives used to calculate length of namec
 485+ 7028 3F 45 58 45 >                db      "?EXEC"
 485+ 702C 43          >
 485+ 702D             >len_NFA         defl    $ - temp_NFA
 485+ 702D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 485+ 7028             >
 485+ 7028 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 485+ 7029 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 485+ 702D 43          >
 485+ 702E             >                org     $-1                 // alter last byte of Name just above to set
 485+ 702D C3          >                db      {b $} | END_BIT     // msb as name end
 485+ 702E             >
 485+ 702E 0F 70       >                dw      last_NFA            // Link to previous definition Name
 485+ 7030             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 485+ 7030 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 485+ 7033             >
 485+ 7033             >
 485+ 7033             >                endif           ; ok        // for other definitions it "points" the correct handler
 485+ 7033             >                // Use of "; ok" to suppress "warning[fwdref]"
 485+ 7033             >
 485+ 7033             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 486+ 7033 7F 6D C0 6A                  dw      STATE, FETCH            // state @
 487+ 7037 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 488+ 703B FC 6F                        dw      QERROR                  // ?error
 489+ 703D D0 68                        dw      EXIT                    // ;
 490+ 703F
 491+ 703F              //  ______________________________________________________________________
 492+ 703F              //
 493+ 703F              // ?pairs       n1 n2 --
 494+ 703F              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 495+ 703F                              Colon_Def QPAIRS, "?PAIRS", is_normal
 495+ 703F             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 495+ 703F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 495+ 703F             >
 495+ 703F             >                // dummy db directives used to calculate length of namec
 495+ 703F 3F 50 41 49 >                db      "?PAIRS"
 495+ 7043 52 53       >
 495+ 7045             >len_NFA         defl    $ - temp_NFA
 495+ 7045             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 495+ 703F             >
 495+ 703F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 495+ 7040 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 495+ 7044 52 53       >
 495+ 7046             >                org     $-1                 // alter last byte of Name just above to set
 495+ 7045 D3          >                db      {b $} | END_BIT     // msb as name end
 495+ 7046             >
 495+ 7046 28 70       >                dw      last_NFA            // Link to previous definition Name
 495+ 7048             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 495+ 7048 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 495+ 704B             >
 495+ 704B             >
 495+ 704B             >                endif           ; ok        // for other definitions it "points" the correct handler
 495+ 704B             >                // Use of "; ok" to suppress "warning[fwdref]"
 495+ 704B             >
 495+ 704B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 496+ 704B 77 6E                        dw      SUBTRACT                // -
 497+ 704D A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 498+ 7051 FC 6F                        dw      QERROR                  // ?error
 499+ 7053 D0 68                        dw      EXIT                    // ;
 500+ 7055
 501+ 7055              //  ______________________________________________________________________
 502+ 7055              //
 503+ 7055              // ?csp       --
 504+ 7055              // raise msg #20 if surrent SP in not what previously saved in CSP.
 505+ 7055              // Compiler relies on that for  syntax checking of structures
 506+ 7055                              Colon_Def QCSP, "?CSP", is_normal
 506+ 7055             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 506+ 7055             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 506+ 7055             >
 506+ 7055             >                // dummy db directives used to calculate length of namec
 506+ 7055 3F 43 53 50 >                db      "?CSP"
 506+ 7059             >len_NFA         defl    $ - temp_NFA
 506+ 7059             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 506+ 7055             >
 506+ 7055 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 506+ 7056 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 506+ 705A             >                org     $-1                 // alter last byte of Name just above to set
 506+ 7059 D0          >                db      {b $} | END_BIT     // msb as name end
 506+ 705A             >
 506+ 705A 3F 70       >                dw      last_NFA            // Link to previous definition Name
 506+ 705C             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 506+ 705C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 506+ 705F             >
 506+ 705F             >
 506+ 705F             >                endif           ; ok        // for other definitions it "points" the correct handler
 506+ 705F             >                // Use of "; ok" to suppress "warning[fwdref]"
 506+ 705F             >
 506+ 705F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 507+ 705F A0 68                        dw      SPFETCH                 // sp@
 508+ 7061 A8 6D C0 6A                  dw      CSP, FETCH              // csp @
 509+ 7065 77 6E                        dw      SUBTRACT                // -
 510+ 7067 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 511+ 706B FC 6F                        dw      QERROR                  // ?error
 512+ 706D D0 68                        dw      EXIT                    // ;
 513+ 706F
 514+ 706F              //  ______________________________________________________________________
 515+ 706F              //
 516+ 706F              // ?loading      --
 517+ 706F              // raise msg #22 if not loading
 518+ 706F                              Colon_Def QLOADING, "?LOADING", is_normal
 518+ 706F             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 518+ 706F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ 706F             >
 518+ 706F             >                // dummy db directives used to calculate length of namec
 518+ 706F 3F 4C 4F 41 >                db      "?LOADING"
 518+ 7073 44 49 4E 47 >
 518+ 7077             >len_NFA         defl    $ - temp_NFA
 518+ 7077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ 706F             >
 518+ 706F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ 7070 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 518+ 7074 44 49 4E 47 >
 518+ 7078             >                org     $-1                 // alter last byte of Name just above to set
 518+ 7077 C7          >                db      {b $} | END_BIT     // msb as name end
 518+ 7078             >
 518+ 7078 55 70       >                dw      last_NFA            // Link to previous definition Name
 518+ 707A             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 707A CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 707D             >
 518+ 707D             >
 518+ 707D             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 707D             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 707D             >
 518+ 707D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 707D 2C 6D C0 6A                  dw      BLK, FETCH              // blk @
 520+ 7081 2D 69                        dw      ZEQUAL                  // 0=
 521+ 7083 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 522+ 7087 FC 6F                        dw      QERROR                  // ?error
 523+ 7089 D0 68                        dw      EXIT                    // ;
 524+ 708B
 525+ 708B              //  ______________________________________________________________________
 526+ 708B              //
 527+ 708B              // compile      --
 528+ 708B              // compiles the following word
 529+ 708B                              Colon_Def COMPILE, "COMPILE", is_normal
 529+ 708B             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 529+ 708B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 529+ 708B             >
 529+ 708B             >                // dummy db directives used to calculate length of namec
 529+ 708B 43 4F 4D 50 >                db      "COMPILE"
 529+ 708F 49 4C 45    >
 529+ 7092             >len_NFA         defl    $ - temp_NFA
 529+ 7092             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 529+ 708B             >
 529+ 708B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 529+ 708C 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 529+ 7090 49 4C 45    >
 529+ 7093             >                org     $-1                 // alter last byte of Name just above to set
 529+ 7092 C5          >                db      {b $} | END_BIT     // msb as name end
 529+ 7093             >
 529+ 7093 6F 70       >                dw      last_NFA            // Link to previous definition Name
 529+ 7095             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 529+ 7095 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 529+ 7098             >
 529+ 7098             >
 529+ 7098             >                endif           ; ok        // for other definitions it "points" the correct handler
 529+ 7098             >                // Use of "; ok" to suppress "warning[fwdref]"
 529+ 7098             >
 529+ 7098             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 530+ 7098 17 70                        dw      QCOMP                   // ?comp
 531+ 709A 0C 69                        dw      R_TO                    // r>
 532+ 709C 3F 6A B2 69                  dw      DUP, CELL_PLUS          // dup, cell+
 533+ 70A0 FA 68                        dw      TO_R                    // >r
 534+ 70A2 C0 6A 40 6E                  dw      FETCH, COMMA            // @ ,
 535+ 70A6 D0 68                        dw      EXIT                    // ;
 536+ 70A8
 537+ 70A8              //  ______________________________________________________________________
 538+ 70A8              //
 539+ 70A8              // compile,     --
 540+ 70A8              // compiles the following word
 541+ 70A8                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 541+ 70A8             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 541+ 70A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 70A8             >
 541+ 70A8             >                // dummy db directives used to calculate length of namec
 541+ 70A8 43 4F 4D 50 >                db      "COMPILE,"
 541+ 70AC 49 4C 45 2C >
 541+ 70B0             >len_NFA         defl    $ - temp_NFA
 541+ 70B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 70A8             >
 541+ 70A8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 70A9 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 541+ 70AD 49 4C 45 2C >
 541+ 70B1             >                org     $-1                 // alter last byte of Name just above to set
 541+ 70B0 AC          >                db      {b $} | END_BIT     // msb as name end
 541+ 70B1             >
 541+ 70B1 8B 70       >                dw      last_NFA            // Link to previous definition Name
 541+ 70B3             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 70B3 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 70B6             >
 541+ 70B6             >
 541+ 70B6             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 70B6             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 70B6             >
 541+ 70B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 70B6 17 70                        dw      QCOMP                   // ?comp
 543+ 70B8 40 6E                        dw      COMMA                   // ,
 544+ 70BA D0 68                        dw      EXIT                    // ;
 545+ 70BC
 546+ 70BC              //  ______________________________________________________________________
 547+ 70BC              //
 548+ 70BC              // [            --
 549+ 70BC              // stop compilation
 550+ 70BC                              Colon_Def SQUARED_OPEN, "[", is_immediate
 550+ 70BC             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 550+ 70BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 550+ 70BC             >
 550+ 70BC             >                // dummy db directives used to calculate length of namec
 550+ 70BC 5B          >                db      "["
 550+ 70BD             >len_NFA         defl    $ - temp_NFA
 550+ 70BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 550+ 70BC             >
 550+ 70BC C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 550+ 70BD 5B          >                db      "["               // name string in 7-bit ascii, but
 550+ 70BE             >                org     $-1                 // alter last byte of Name just above to set
 550+ 70BD DB          >                db      {b $} | END_BIT     // msb as name end
 550+ 70BE             >
 550+ 70BE A8 70       >                dw      last_NFA            // Link to previous definition Name
 550+ 70C0             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 550+ 70C0 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 550+ 70C3             >
 550+ 70C3             >
 550+ 70C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 550+ 70C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 550+ 70C3             >
 550+ 70C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 551+ 70C3 15 6C                        dw      ZERO                    // 0
 552+ 70C5 7F 6D CB 6A                  dw      STATE, STORE            // state !
 553+ 70C9 D0 68                        dw      EXIT                    // ; immediate
 554+ 70CB
 555+ 70CB              //  ______________________________________________________________________
 556+ 70CB              //
 557+ 70CB              // ]            --
 558+ 70CB              // start compilation
 559+ 70CB                              Colon_Def SQUARED_CLOSE, "]", is_normal
 559+ 70CB             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 559+ 70CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 559+ 70CB             >
 559+ 70CB             >                // dummy db directives used to calculate length of namec
 559+ 70CB 5D          >                db      "]"
 559+ 70CC             >len_NFA         defl    $ - temp_NFA
 559+ 70CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 559+ 70CB             >
 559+ 70CB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 559+ 70CC 5D          >                db      "]"               // name string in 7-bit ascii, but
 559+ 70CD             >                org     $-1                 // alter last byte of Name just above to set
 559+ 70CC DD          >                db      {b $} | END_BIT     // msb as name end
 559+ 70CD             >
 559+ 70CD BC 70       >                dw      last_NFA            // Link to previous definition Name
 559+ 70CF             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 559+ 70CF CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 559+ 70D2             >
 559+ 70D2             >
 559+ 70D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 559+ 70D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 559+ 70D2             >
 559+ 70D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 560+ 70D2 A5 63 C0 00                  dw      LIT, $C0                // 192
 561+ 70D6 7F 6D CB 6A                  dw      STATE, STORE            // state !
 562+ 70DA D0 68                        dw      EXIT                    // ;
 563+ 70DC
 564+ 70DC              //  ______________________________________________________________________
 565+ 70DC              //
 566+ 70DC              // smudge       --
 567+ 70DC              // toggle smudge bit of latest definition
 568+ 70DC                              Colon_Def SMUDGE, "SMUDGE", is_normal
 568+ 70DC             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 568+ 70DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 568+ 70DC             >
 568+ 70DC             >                // dummy db directives used to calculate length of namec
 568+ 70DC 53 4D 55 44 >                db      "SMUDGE"
 568+ 70E0 47 45       >
 568+ 70E2             >len_NFA         defl    $ - temp_NFA
 568+ 70E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 568+ 70DC             >
 568+ 70DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 568+ 70DD 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 568+ 70E1 47 45       >
 568+ 70E3             >                org     $-1                 // alter last byte of Name just above to set
 568+ 70E2 C5          >                db      {b $} | END_BIT     // msb as name end
 568+ 70E3             >
 568+ 70E3 CB 70       >                dw      last_NFA            // Link to previous definition Name
 568+ 70E5             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 568+ 70E5 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 568+ 70E8             >
 568+ 70E8             >
 568+ 70E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 568+ 70E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 568+ 70E8             >
 568+ 70E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 569+ 70E8 6A 6F                        dw      LATEST                  // latest
 570+ 70EA A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 571+ 70EE B5 6A                        dw      TOGGLE                  // toggle
 572+ 70F0 D0 68                        dw      EXIT                    // ;
 573+ 70F2
 574+ 70F2              //  ______________________________________________________________________
 575+ 70F2              //
 576+ 70F2              // immediate    --
 577+ 70F2              // make immediate the latest definition
 578+ 70F2                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 578+ 70F2             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 578+ 70F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 578+ 70F2             >
 578+ 70F2             >                // dummy db directives used to calculate length of namec
 578+ 70F2 49 4D 4D 45 >                db      "IMMEDIATE"
 578+ 70F6 44 49 41 54 >
 578+ 70FA 45          >
 578+ 70FB             >len_NFA         defl    $ - temp_NFA
 578+ 70FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 578+ 70F2             >
 578+ 70F2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 578+ 70F3 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 578+ 70F7 44 49 41 54 >
 578+ 70FB 45          >
 578+ 70FC             >                org     $-1                 // alter last byte of Name just above to set
 578+ 70FB C5          >                db      {b $} | END_BIT     // msb as name end
 578+ 70FC             >
 578+ 70FC DC 70       >                dw      last_NFA            // Link to previous definition Name
 578+ 70FE             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 578+ 70FE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 578+ 7101             >
 578+ 7101             >
 578+ 7101             >                endif           ; ok        // for other definitions it "points" the correct handler
 578+ 7101             >                // Use of "; ok" to suppress "warning[fwdref]"
 578+ 7101             >
 578+ 7101             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 579+ 7101 6A 6F                        dw      LATEST                  // latest
 580+ 7103 A5 63 40 00                  dw      LIT, $40                // 64
 581+ 7107 B5 6A                        dw      TOGGLE                  // toggle
 582+ 7109 D0 68                        dw      EXIT                    // ;
 583+ 710B
 584+ 710B              //  ______________________________________________________________________
 585+ 710B              //
 586+ 710B              // hex          --
 587+ 710B              // change numeration base
 588+ 710B                              Colon_Def HEX, "HEX", is_normal
 588+ 710B             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 588+ 710B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 588+ 710B             >
 588+ 710B             >                // dummy db directives used to calculate length of namec
 588+ 710B 48 45 58    >                db      "HEX"
 588+ 710E             >len_NFA         defl    $ - temp_NFA
 588+ 710E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 588+ 710B             >
 588+ 710B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 588+ 710C 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 588+ 710F             >                org     $-1                 // alter last byte of Name just above to set
 588+ 710E D8          >                db      {b $} | END_BIT     // msb as name end
 588+ 710F             >
 588+ 710F F2 70       >                dw      last_NFA            // Link to previous definition Name
 588+ 7111             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 588+ 7111 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 588+ 7114             >
 588+ 7114             >
 588+ 7114             >                endif           ; ok        // for other definitions it "points" the correct handler
 588+ 7114             >                // Use of "; ok" to suppress "warning[fwdref]"
 588+ 7114             >
 588+ 7114             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 589+ 7114 A5 63 10 00                  dw      LIT, 16                 // 16
 590+ 7118 8A 6D CB 6A                  dw      BASE, STORE             // base !
 591+ 711C D0 68                        dw      EXIT                    // ;
 592+ 711E
 593+ 711E              //  ______________________________________________________________________
 594+ 711E              //
 595+ 711E              // decimal      --
 596+ 711E              // change numeration base
 597+ 711E                              Colon_Def DECIMAL, "DECIMAL", is_normal
 597+ 711E             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 597+ 711E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 597+ 711E             >
 597+ 711E             >                // dummy db directives used to calculate length of namec
 597+ 711E 44 45 43 49 >                db      "DECIMAL"
 597+ 7122 4D 41 4C    >
 597+ 7125             >len_NFA         defl    $ - temp_NFA
 597+ 7125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 597+ 711E             >
 597+ 711E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 597+ 711F 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 597+ 7123 4D 41 4C    >
 597+ 7126             >                org     $-1                 // alter last byte of Name just above to set
 597+ 7125 CC          >                db      {b $} | END_BIT     // msb as name end
 597+ 7126             >
 597+ 7126 0B 71       >                dw      last_NFA            // Link to previous definition Name
 597+ 7128             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 597+ 7128 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 597+ 712B             >
 597+ 712B             >
 597+ 712B             >                endif           ; ok        // for other definitions it "points" the correct handler
 597+ 712B             >                // Use of "; ok" to suppress "warning[fwdref]"
 597+ 712B             >
 597+ 712B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 598+ 712B A5 63 0A 00                  dw      LIT, 10                 // 10
 599+ 712F 8A 6D CB 6A                  dw      BASE, STORE             // base !
 600+ 7133 D0 68                        dw      EXIT                    // ;
 601+ 7135
 602+ 7135              //  ______________________________________________________________________
 603+ 7135              //
 604+ 7135              // (;code)       --
 605+ 7135              // patch to CFA to call/jump to the "following code"
 606+ 7135                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 606+ 7135             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 606+ 7135             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 7135             >
 606+ 7135             >                // dummy db directives used to calculate length of namec
 606+ 7135 28 3B 43 4F >                db      "(;CODE)"
 606+ 7139 44 45 29    >
 606+ 713C             >len_NFA         defl    $ - temp_NFA
 606+ 713C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 7135             >
 606+ 7135 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 7136 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 606+ 713A 44 45 29    >
 606+ 713D             >                org     $-1                 // alter last byte of Name just above to set
 606+ 713C A9          >                db      {b $} | END_BIT     // msb as name end
 606+ 713D             >
 606+ 713D 1E 71       >                dw      last_NFA            // Link to previous definition Name
 606+ 713F             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 713F CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 7142             >
 606+ 7142             >
 606+ 7142             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 7142             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 7142             >
 606+ 7142             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 7142 0C 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 608+ 7144 6A 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 609+ 7146 B0 6F 8C 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 610+ 714A
 611+ 714A A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 612+ 714E 04 6A E3 6A                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 613+ 7152 90 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 614+ 7154
 615+ 7154 CB 6A                        dw      STORE                   // !
 616+ 7156 D0 68                        dw      EXIT                    // ;
 617+ 7158
 618+ 7158              //  ______________________________________________________________________
 619+ 7158              //
 620+ 7158              // ;code        --
 621+ 7158                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 621+ 7158             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 621+ 7158             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 621+ 7158             >
 621+ 7158             >                // dummy db directives used to calculate length of namec
 621+ 7158 3B 43 4F 44 >                db      ";CODE"
 621+ 715C 45          >
 621+ 715D             >len_NFA         defl    $ - temp_NFA
 621+ 715D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 621+ 7158             >
 621+ 7158 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 621+ 7159 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 621+ 715D 45          >
 621+ 715E             >                org     $-1                 // alter last byte of Name just above to set
 621+ 715D C5          >                db      {b $} | END_BIT     // msb as name end
 621+ 715E             >
 621+ 715E 35 71       >                dw      last_NFA            // Link to previous definition Name
 621+ 7160             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 621+ 7160 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 621+ 7163             >
 621+ 7163             >
 621+ 7163             >                endif           ; ok        // for other definitions it "points" the correct handler
 621+ 7163             >                // Use of "; ok" to suppress "warning[fwdref]"
 621+ 7163             >
 621+ 7163             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 622+ 7163 5C 70                        dw      QCSP                    // ?csp
 623+ 7165 95 70                        dw      COMPILE                 // compile
 624+ 7167 3F 71                        dw      C_SEMICOLON_CODE        // (;code)
 625+ 7169 C0 70                        dw      SQUARED_OPEN            // [
 626+ 716B C2 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 627+ 716D D0 68                        dw      EXIT                    // ; immediate
 628+ 716F
 629+ 716F              //  ______________________________________________________________________
 630+ 716F              //
 631+ 716F              // <builds      --
 632+ 716F                              Colon_Def CBUILDS, "<BUILDS", is_normal
 632+ 716F             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 632+ 716F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 632+ 716F             >
 632+ 716F             >                // dummy db directives used to calculate length of namec
 632+ 716F 3C 42 55 49 >                db      "<BUILDS"
 632+ 7173 4C 44 53    >
 632+ 7176             >len_NFA         defl    $ - temp_NFA
 632+ 7176             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 632+ 716F             >
 632+ 716F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 632+ 7170 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 632+ 7174 4C 44 53    >
 632+ 7177             >                org     $-1                 // alter last byte of Name just above to set
 632+ 7176 D3          >                db      {b $} | END_BIT     // msb as name end
 632+ 7177             >
 632+ 7177 58 71       >                dw      last_NFA            // Link to previous definition Name
 632+ 7179             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 632+ 7179 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 632+ 717C             >
 632+ 717C             >
 632+ 717C             >                endif           ; ok        // for other definitions it "points" the correct handler
 632+ 717C             >                // Use of "; ok" to suppress "warning[fwdref]"
 632+ 717C             >
 632+ 717C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 633+ 717C 15 6C                        dw      ZERO                    // 0
 634+ 717E D2 6B                        dw      CONSTANT                // constant
 635+ 7180 D0 68                        dw      EXIT                    // ;
 636+ 7182
 637+ 7182              //  ______________________________________________________________________
 638+ 7182              //
 639+ 7182              // recurse      --
 640+ 7182              //              Colon_Def RECURSE, "RECURSE", is_immediate
 641+ 7182              //              dw      QCOMP                   // ?comp
 642+ 7182              //              dw      LATEST                  // latest
 643+ 7182              //              dw      PFA, CFA                // pfa cfa
 644+ 7182              //              dw      COMMA                   // ,
 645+ 7182              //              dw      EXIT                    // ; immediate
 646+ 7182
 647+ 7182              //  ______________________________________________________________________
 648+ 7182              //
 649+ 7182              // does>     --
 650+ 7182                              Colon_Def DOES_TO, "DOES>", is_normal
 650+ 7182             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 650+ 7182             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ 7182             >
 650+ 7182             >                // dummy db directives used to calculate length of namec
 650+ 7182 44 4F 45 53 >                db      "DOES>"
 650+ 7186 3E          >
 650+ 7187             >len_NFA         defl    $ - temp_NFA
 650+ 7187             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ 7182             >
 650+ 7182 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ 7183 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 650+ 7187 3E          >
 650+ 7188             >                org     $-1                 // alter last byte of Name just above to set
 650+ 7187 BE          >                db      {b $} | END_BIT     // msb as name end
 650+ 7188             >
 650+ 7188 6F 71       >                dw      last_NFA            // Link to previous definition Name
 650+ 718A             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 718A CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 718D             >
 650+ 718D             >
 650+ 718D             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 718D             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 718D             >
 650+ 718D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 718D 0C 69                        dw      R_TO                    // r>
 652+ 718F 6A 6F                        dw      LATEST                  // latest
 653+ 7191 B0 6F                        dw      PFA                     // pfa
 654+ 7193 CB 6A                        dw      STORE                   // !
 655+ 7195 3F 71                        dw      C_SEMICOLON_CODE        // ;code
 656+ 7197              Does_Ptr:
 657+ 7197                              // via call coded in CFA
 658+ 7197                              ldhlrp
 658+ 7197 2A 96 63    >                ld      hl,(RP_Pointer)
 659+ 719A 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 660+ 719B 70                           ld      (hl), b
 661+ 719C 2B                           dec     hl
 662+ 719D 71                           ld      (hl), c
 663+ 719E                              ldrphl
 663+ 719E 22 96 63    >                ld      (RP_Pointer),hl
 664+ 71A1 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 665+ 71A2
 666+ 71A2 4E                           ld      c, (hl)
 667+ 71A3 23                           inc     hl
 668+ 71A4 46                           ld      b, (hl)
 669+ 71A5 23                           inc     hl
 670+ 71A6
 671+ 71A6                              psh1
 671+ 71A6 E5          >                push    hl
 671+ 71A7 DD E9       >                jp      (ix)
 672+ 71A9                              // SMUDGE !
 673+ 71A9
 674+ 71A9              //  ______________________________________________________________________
 675+ 71A9              //
 676+ 71A9              // count        a -- a2 n
 677+ 71A9              // expects a counted string at address a, returns string address and counter
 678+ 71A9                              Colon_Def COUNT, "COUNT", is_normal
 678+ 71A9             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 678+ 71A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 678+ 71A9             >
 678+ 71A9             >                // dummy db directives used to calculate length of namec
 678+ 71A9 43 4F 55 4E >                db      "COUNT"
 678+ 71AD 54          >
 678+ 71AE             >len_NFA         defl    $ - temp_NFA
 678+ 71AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 678+ 71A9             >
 678+ 71A9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 678+ 71AA 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 678+ 71AE 54          >
 678+ 71AF             >                org     $-1                 // alter last byte of Name just above to set
 678+ 71AE D4          >                db      {b $} | END_BIT     // msb as name end
 678+ 71AF             >
 678+ 71AF 82 71       >                dw      last_NFA            // Link to previous definition Name
 678+ 71B1             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 678+ 71B1 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 678+ 71B4             >
 678+ 71B4             >
 678+ 71B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 678+ 71B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 678+ 71B4             >
 678+ 71B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 679+ 71B4 3F 6A                        dw      DUP                     // dup
 680+ 71B6 90 69                        dw      ONE_PLUS                // 1+
 681+ 71B8 34 6A D7 6A                  dw      SWAP, CFETCH             // swap @
 682+ 71BC D0 68                        dw      EXIT                    // ;
 683+ 71BE
 684+ 71BE              //  ______________________________________________________________________
 685+ 71BE              //
 686+ 71BE              // bounds       a n -- a+n n
 687+ 71BE              // given an address and a length ( a n ) calculate the bound addresses
 688+ 71BE              // suitable for DO-LOOP
 689+ 71BE                              Colon_Def BOUNDS, "BOUNDS", is_normal
 689+ 71BE             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 689+ 71BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ 71BE             >
 689+ 71BE             >                // dummy db directives used to calculate length of namec
 689+ 71BE 42 4F 55 4E >                db      "BOUNDS"
 689+ 71C2 44 53       >
 689+ 71C4             >len_NFA         defl    $ - temp_NFA
 689+ 71C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ 71BE             >
 689+ 71BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ 71BF 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 689+ 71C3 44 53       >
 689+ 71C5             >                org     $-1                 // alter last byte of Name just above to set
 689+ 71C4 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ 71C5             >
 689+ 71C5 A9 71       >                dw      last_NFA            // Link to previous definition Name
 689+ 71C7             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 71C7 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 71CA             >
 689+ 71CA             >
 689+ 71CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 71CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 71CA             >
 689+ 71CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 71CA 04 6A 6B 69                  dw      OVER, PLUS, SWAP        // over + swap
 690+ 71CE 34 6A
 691+ 71D0 D0 68                        dw      EXIT                    // ;
 692+ 71D2
 693+ 71D2              //  ______________________________________________________________________
 694+ 71D2              //
 695+ 71D2              // type         a n --
 696+ 71D2              // Sends to current output channel n characters starting at address a.
 697+ 71D2                              Colon_Def TYPE, "TYPE", is_normal
 697+ 71D2             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 697+ 71D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 71D2             >
 697+ 71D2             >                // dummy db directives used to calculate length of namec
 697+ 71D2 54 59 50 45 >                db      "TYPE"
 697+ 71D6             >len_NFA         defl    $ - temp_NFA
 697+ 71D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 71D2             >
 697+ 71D2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 71D3 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 697+ 71D7             >                org     $-1                 // alter last byte of Name just above to set
 697+ 71D6 C5          >                db      {b $} | END_BIT     // msb as name end
 697+ 71D7             >
 697+ 71D7 BE 71       >                dw      last_NFA            // Link to previous definition Name
 697+ 71D9             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 71D9 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 71DC             >
 697+ 71DC             >
 697+ 71DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 71DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 71DC             >
 697+ 71DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 71DC C7 71                        dw      BOUNDS                  // bounds
 699+ 71DE 2C 64                        dw      C_Q_DO                  // ?do
 700+ 71E0 0C 00                        dw      Type_Skip - $
 701+ 71E2              Type_Loop:
 702+ 71E2 61 64 D7 6A                  dw          I, CFETCH           //      i c@
 703+ 71E6 15 6F                        dw          EMIT                //      emit
 704+ 71E8 EB 63                        dw      C_LOOP                  // loop
 705+ 71EA F8 FF                        dw      Type_Loop - $
 706+ 71EC              Type_Skip:
 707+ 71EC D0 68                        dw      EXIT                    // ;
 708+ 71EE
 709+ 71EE              //  ______________________________________________________________________
 710+ 71EE              //
 711+ 71EE              // leave        --
 712+ 71EE              // Compile (leave) to leave current LOOP and jump just after it
 713+ 71EE                              Colon_Def LEAVE, "LEAVE", is_immediate
 713+ 71EE             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 713+ 71EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 71EE             >
 713+ 71EE             >                // dummy db directives used to calculate length of namec
 713+ 71EE 4C 45 41 56 >                db      "LEAVE"
 713+ 71F2 45          >
 713+ 71F3             >len_NFA         defl    $ - temp_NFA
 713+ 71F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 71EE             >
 713+ 71EE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 71EF 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 713+ 71F3 45          >
 713+ 71F4             >                org     $-1                 // alter last byte of Name just above to set
 713+ 71F3 C5          >                db      {b $} | END_BIT     // msb as name end
 713+ 71F4             >
 713+ 71F4 D2 71       >                dw      last_NFA            // Link to previous definition Name
 713+ 71F6             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 71F6 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 71F9             >
 713+ 71F9             >
 713+ 71F9             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 71F9             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 71F9             >
 713+ 71F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 71F9 95 70 E6 68                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 715+ 71FD 22 6E FA 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 715+ 7201 15 6C 40 6E
 716+ 7205 15 6C 15 6C                  dw      ZERO, ZERO
 717+ 7209 A0 68 3F 6A                  dw      SPFETCH, DUP
 718+ 720D B2 69 B2 69                  dw      CELL_PLUS, CELL_PLUS
 719+ 7211 26 6A                        dw      TUCK
 720+ 7213 A8 6D C0 6A                  dw      CSP, FETCH
 721+ 7217 34 6A 77 6E                  dw      SWAP, SUBTRACT
 722+ 721B D2 67                        dw      CMOVE
 723+ 721D A8 6D C0 6A                  dw      CSP, FETCH, CELL_MINUS
 723+ 7221 BD 69
 724+ 7223 0C 69 04 6A                  dw      R_TO, OVER, STORE
 724+ 7227 CB 6A
 725+ 7229 BD 69 15 6C                  dw      CELL_MINUS, ZERO
 726+ 722D 34 6A CB 6A                  dw      SWAP, STORE
 727+ 7231 D0 68                        dw      EXIT                    // ;
 728+ 7233
 729+ 7233              //  ______________________________________________________________________
 730+ 7233              //
 731+ 7233              // -trailing    a n1 -- a n2
 732+ 7233              // Assumes that an n1 bytes-long string is stored at address a
 733+ 7233              // and the string contains a space delimited word,
 734+ 7233              // Finds n2 as the position of the first character after the word.
 735+ 7233                              Colon_Def LTRAILING, "-TRAILING", is_normal
 735+ 7233             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 735+ 7233             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ 7233             >
 735+ 7233             >                // dummy db directives used to calculate length of namec
 735+ 7233 2D 54 52 41 >                db      "-TRAILING"
 735+ 7237 49 4C 49 4E >
 735+ 723B 47          >
 735+ 723C             >len_NFA         defl    $ - temp_NFA
 735+ 723C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ 7233             >
 735+ 7233 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ 7234 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 735+ 7238 49 4C 49 4E >
 735+ 723C 47          >
 735+ 723D             >                org     $-1                 // alter last byte of Name just above to set
 735+ 723C C7          >                db      {b $} | END_BIT     // msb as name end
 735+ 723D             >
 735+ 723D EE 71       >                dw      last_NFA            // Link to previous definition Name
 735+ 723F             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 723F CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 7242             >
 735+ 7242             >
 735+ 7242             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 7242             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 7242             >
 735+ 7242             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 7242 3F 6A 15 6C                  dw      DUP, ZERO               // dup 0
 737+ 7246                                                              // do
 738+ 7246 2C 64                        dw      C_Q_DO
 739+ 7248 20 00                        dw      LTrailing_Leave - $
 740+ 724A              LTrailing_Loop:
 741+ 724A 94 6A 6B 69                  dw          TWO_DUP, PLUS       //      2dup +
 742+ 724E 9A 69                        dw          ONE_SUBTRACT        //      1-
 743+ 7250 D7 6A                        dw          CFETCH              //      c@
 744+ 7252 44 6C 77 6E                  dw          BL, SUBTRACT        //      bl -
 745+ 7256                                                              //      if
 746+ 7256 D8 63                        dw          ZBRANCH
 747+ 7258 0A 00                        dw          LTrailing_Else - $
 748+ 725A E6 68                        dw              C_LEAVE         //          leave
 749+ 725C 0C 00                        dw              LTrailing_Leave - $
 750+ 725E C3 63                        dw          BRANCH              //      else
 751+ 7260 04 00                        dw          LTrailing_Endif - $
 752+ 7262              LTrailing_Else:
 753+ 7262 9A 69                        dw              ONE_SUBTRACT    //          1-
 754+ 7264              LTrailing_Endif:                                //      endif
 755+ 7264                                                              // loop
 756+ 7264 EB 63                        dw      C_LOOP
 757+ 7266 E4 FF                        dw      LTrailing_Loop - $
 758+ 7268              LTrailing_Leave:
 759+ 7268 D0 68                        dw      EXIT                    // ;
 760+ 726A
 761+ 726A              //  ______________________________________________________________________
 762+ 726A              //
 763+ 726A              // accept       a n1 -- n2
 764+ 726A              // Accepts at most n1 characters from terminal and stores them at address a
 765+ 726A              // CR stops input. A 'nul' is added as trailer.
 766+ 726A              // n2 is the string length. n2 is kept in span user variable also.
 767+ 726A                              Colon_Def ACCEPT, "ACCEPT", is_normal
 767+ 726A             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 767+ 726A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 767+ 726A             >
 767+ 726A             >                // dummy db directives used to calculate length of namec
 767+ 726A 41 43 43 45 >                db      "ACCEPT"
 767+ 726E 50 54       >
 767+ 7270             >len_NFA         defl    $ - temp_NFA
 767+ 7270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 767+ 726A             >
 767+ 726A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 767+ 726B 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 767+ 726F 50 54       >
 767+ 7271             >                org     $-1                 // alter last byte of Name just above to set
 767+ 7270 D4          >                db      {b $} | END_BIT     // msb as name end
 767+ 7271             >
 767+ 7271 33 72       >                dw      last_NFA            // Link to previous definition Name
 767+ 7273             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 767+ 7273 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 767+ 7276             >
 767+ 7276             >
 767+ 7276             >                endif           ; ok        // for other definitions it "points" the correct handler
 767+ 7276             >                // Use of "; ok" to suppress "warning[fwdref]"
 767+ 7276             >
 767+ 7276             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 768+ 7276 04 6A 6B 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 768+ 727A 04 6A
 769+ 727C 15 6C 58 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 770+ 7280                                                              // do
 771+ 7280 2C 64                        dw      C_Q_DO
 772+ 7282 8C 00                        dw      Accept_Leave - $
 773+ 7284              Accept_Loop:
 774+ 7284 12 6A 5A 66                  dw          DROP, KEY           //      drop key        ( a  c )
 775+ 7288 3F 6A                        dw          DUP                 //      dup             ( a  c  c )
 776+ 728A A5 63 0E 00                  dw          LIT, $0E            //      0E
 777+ 728E 85 6C                        dw          PLUS_ORIGIN         //      +origin
 778+ 7290 C0 6A                        dw          FETCH               //      @               ( a  c  c  del )
 779+ 7292 83 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 780+ 7294                                                              //      if
 781+ 7294 D8 63                        dw          ZBRANCH
 782+ 7296 2E 00                        dw          Accept_Else_0 - $
 783+ 7298 12 6A                        dw              DROP            //          drop        ( a  )
 784+ 729A 3F 6A 61 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 784+ 729E 83 6E
 785+ 72A0 1E 6C 6E 68                  dw              ONE, AND_OP     //          1 and
 786+ 72A4 3F 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 787+ 72A6 0C 69                        dw              R_TO            //          r> 2 - + r>
 788+ 72A8 27 6C 77 6E                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 788+ 72AC 6B 69
 789+ 72AE FA 68                        dw              TO_R            //
 790+ 72B0                                                              //          if
 791+ 72B0 D8 63                        dw              ZBRANCH
 792+ 72B2 0A 00                        dw              Accept_Else_1 - $
 793+ 72B4 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 794+ 72B8                                                              //          else
 795+ 72B8 C3 63                        dw              BRANCH
 796+ 72BA 06 00                        dw              Accept_Endif_1 - $
 797+ 72BC              Accept_Else_1:
 798+ 72BC A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 799+ 72C0              Accept_Endif_1:                                 //          endif
 800+ 72C0 C3 63                        dw          BRANCH
 801+ 72C2 2E 00                        dw          Accept_Endif_0 - $
 802+ 72C4              Accept_Else_0:                                  //      else
 803+ 72C4 3F 6A                        dw              DUP             //          dup         ( a  c  c )
 804+ 72C6 A5 63 0D 00                  dw              LIT, 13         //          13
 805+ 72CA 83 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 806+ 72CC                                                              //          if
 807+ 72CC D8 63                        dw              ZBRANCH
 808+ 72CE 0C 00                        dw              Accept_Else_2 - $
 809+ 72D0 12 6A 44 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 810+ 72D4 15 6C                        dw                  ZERO        //              0       ( a  c  0 )
 811+ 72D6                                                              //          else
 812+ 72D6 C3 63                        dw              BRANCH
 813+ 72D8 04 00                        dw              Accept_Endif_2 - $
 814+ 72DA              Accept_Else_2:
 815+ 72DA 3F 6A                        dw                  DUP         //              dup     ( a  c  c )
 816+ 72DC                                                              //          endif
 817+ 72DC              Accept_Endif_2:
 818+ 72DC 61 64 E3 6A                  dw              I, CSTORE       //          i           ( a  c )
 819+ 72E0 3F 6A 44 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 819+ 72E4 A3 6E
 820+ 72E6                                                              //          if
 821+ 72E6 D8 63                        dw              ZBRANCH
 822+ 72E8 08 00                        dw              Accept_Endif_3 - $
 823+ 72EA 0C 69                        dw                  R_TO        //              r>
 824+ 72EC 9A 69                        dw                  ONE_SUBTRACT//              1-
 825+ 72EE FA 68                        dw                  TO_R        //              >r
 826+ 72F0                                                              //          endif
 827+ 72F0              Accept_Endif_3:
 828+ 72F0              Accept_Endif_0:                                 //      endif
 829+ 72F0 15 6F                        dw          EMIT                //      emit
 830+ 72F2 15 6C 61 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 830+ 72F6 90 69
 831+ 72F8 CB 6A                        dw          STORE               //          ( zero pad )
 832+ 72FA 61 64                        dw          I                   //      i
 833+ 72FC 61 64 D7 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 833+ 7300 2D 69
 834+ 7302 D8 63                        dw          ZBRANCH             //
 835+ 7304 06 00                        dw              Accept_Endif_4 - $
 836+ 7306 E6 68                        dw                  C_LEAVE     //              leave
 837+ 7308 06 00                        dw                  Accept_Leave - $
 838+ 730A              Accept_Endif_4:                                 //      endif
 839+ 730A                                                              // loop
 840+ 730A EB 63                        dw      C_LOOP
 841+ 730C 78 FF                        dw      Accept_Loop - $
 842+ 730E              Accept_Leave:
 843+ 730E 34 6A 77 6E                  dw      SWAP, SUBTRACT          // swap -
 844+ 7312 90 69                        dw      ONE_PLUS                // 1+
 845+ 7314 3F 6A 00 6E                  dw      DUP, SPAN, STORE        // dup span !
 845+ 7318 CB 6A
 846+ 731A D0 68                        dw      EXIT                    // ;
 847+ 731C
 848+ 731C              //  ______________________________________________________________________
 849+ 731C              //
 850+ 731C              // expect      a n --
 851+ 731C              // Accepts at most n1 characters from terminal and stores them at address a
 852+ 731C              // CR stops input. A 'nul' is added as trailer.
 853+ 731C              // n2 is the string length. n2 is kept in span user variable also.
 854+ 731C              //              Colon_Def EXPECT, "EXPECT", is_normal
 855+ 731C              //              dw      ACCEPT, DROP            // accept drop
 856+ 731C              //              dw      EXIT                    // ;
 857+ 731C
 858+ 731C              //  ______________________________________________________________________
 859+ 731C              //
 860+ 731C              // query        --
 861+ 731C              // Accept at most 80 character from console. CR stops.
 862+ 731C              // Text is stored in TIB. Variable IN is zeroed.
 863+ 731C                              Colon_Def QUERY, "QUERY", is_normal
 863+ 731C             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 863+ 731C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 731C             >
 863+ 731C             >                // dummy db directives used to calculate length of namec
 863+ 731C 51 55 45 52 >                db      "QUERY"
 863+ 7320 59          >
 863+ 7321             >len_NFA         defl    $ - temp_NFA
 863+ 7321             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 731C             >
 863+ 731C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 731D 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 863+ 7321 59          >
 863+ 7322             >                org     $-1                 // alter last byte of Name just above to set
 863+ 7321 D9          >                db      {b $} | END_BIT     // msb as name end
 863+ 7322             >
 863+ 7322 6A 72       >                dw      last_NFA            // Link to previous definition Name
 863+ 7324             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 7324 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 7327             >
 863+ 7327             >
 863+ 7327             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 7327             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 7327             >
 863+ 7327             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 7327 B6 6C C0 6A                  dw      TIB, FETCH              // tib @
 865+ 732B A5 63 50 00                  dw      LIT, 80                 // 80
 866+ 732F 73 72 12 6A                  dw      ACCEPT, DROP            // accept drop
 867+ 7333 15 6C 36 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 867+ 7337 CB 6A
 868+ 7339 D0 68                        dw      EXIT                    // ;
 869+ 733B
 870+ 733B              //  ______________________________________________________________________
 871+ 733B              //
 872+ 733B              // fill        a n c --
 873+ 733B              // If n > 0, fills n locations starting from address a with the value c.
 874+ 733B                              New_Def FILL, "FILL", is_code, is_normal
 874+ 733B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ 733B             >
 874+ 733B             >                // dummy db directives used to calculate length of namec
 874+ 733B 46 49 4C 4C >                db      "FILL"
 874+ 733F             >len_NFA         defl    $ - temp_NFA
 874+ 733F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ 733B             >
 874+ 733B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ 733C 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 874+ 7340             >                org     $-1                 // alter last byte of Name just above to set
 874+ 733F CC          >                db      {b $} | END_BIT     // msb as name end
 874+ 7340             >
 874+ 7340 1C 73       >                dw      last_NFA            // Link to previous definition Name
 874+ 7342             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 7342 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 874+ 7342 ~           >
 874+ 7342 ~           >
 874+ 7342             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 7342             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 7342             >
 874+ 7342             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 7342 69                           ld      l, c
 876+ 7343 60                           ld      h, b
 877+ 7344 D1                           pop     de                  // de has character
 878+ 7345 C1                           pop     bc                  // bc has counter
 879+ 7346 E3                           ex      (sp), hl            // hl has address, save Instruction Pointer
 880+ 7347              Fill_Loop:
 881+ 7347 78                               ld      a, b
 882+ 7348 B1                               or      c
 883+ 7349 28 05                        jr      z, Fill_While_End
 884+ 734B 73                               ld      (hl), e
 885+ 734C 0B                               dec     bc
 886+ 734D 23                               inc     hl
 887+ 734E 18 F7                        jr      Fill_Loop
 888+ 7350              Fill_While_End:
 889+ 7350 C1                           pop     bc                  // Restore Instruction Pointer
 890+ 7351
 891+ 7351                              next
 891+ 7351 DD E9       >                jp      (ix)
 892+ 7353
 893+ 7353              //  ______________________________________________________________________
 894+ 7353              //
 895+ 7353              // erase        a n --
 896+ 7353              // If n > 0, fills n locations starting from address a with 'nul' characters.
 897+ 7353                              Colon_Def ERASE, "ERASE", is_normal
 897+ 7353             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 897+ 7353             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 7353             >
 897+ 7353             >                // dummy db directives used to calculate length of namec
 897+ 7353 45 52 41 53 >                db      "ERASE"
 897+ 7357 45          >
 897+ 7358             >len_NFA         defl    $ - temp_NFA
 897+ 7358             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 7353             >
 897+ 7353 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 7354 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 897+ 7358 45          >
 897+ 7359             >                org     $-1                 // alter last byte of Name just above to set
 897+ 7358 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 7359             >
 897+ 7359 3B 73       >                dw      last_NFA            // Link to previous definition Name
 897+ 735B             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 735B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 735E             >
 897+ 735E             >
 897+ 735E             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 735E             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 735E             >
 897+ 735E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 735E 15 6C 42 73                  dw      ZERO, FILL              // 0 fill
 899+ 7362 D0 68                        dw      EXIT                    // ;
 900+ 7364
 901+ 7364              //  ______________________________________________________________________
 902+ 7364              //
 903+ 7364              // blanks       a n --
 904+ 7364              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 7364                              Colon_Def BLANKS, "BLANKS", is_normal
 905+ 7364             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 905+ 7364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 7364             >
 905+ 7364             >                // dummy db directives used to calculate length of namec
 905+ 7364 42 4C 41 4E >                db      "BLANKS"
 905+ 7368 4B 53       >
 905+ 736A             >len_NFA         defl    $ - temp_NFA
 905+ 736A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 7364             >
 905+ 7364 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 7365 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 905+ 7369 4B 53       >
 905+ 736B             >                org     $-1                 // alter last byte of Name just above to set
 905+ 736A D3          >                db      {b $} | END_BIT     // msb as name end
 905+ 736B             >
 905+ 736B 53 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 736D             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 736D CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 7370             >
 905+ 7370             >
 905+ 7370             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 7370             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 7370             >
 905+ 7370             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 7370 44 6C 42 73                  dw      BL, FILL                // bl fill
 907+ 7374 D0 68                        dw      EXIT                    // ;
 908+ 7376
 909+ 7376              //  ______________________________________________________________________
 910+ 7376              //
 911+ 7376              // hold         c --
 912+ 7376              // Used between <# and #> to insert a character c in numeric formatting.
 913+ 7376                              Colon_Def HOLD, "HOLD", is_normal
 913+ 7376             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 913+ 7376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 7376             >
 913+ 7376             >                // dummy db directives used to calculate length of namec
 913+ 7376 48 4F 4C 44 >                db      "HOLD"
 913+ 737A             >len_NFA         defl    $ - temp_NFA
 913+ 737A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 7376             >
 913+ 7376 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 7377 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 913+ 737B             >                org     $-1                 // alter last byte of Name just above to set
 913+ 737A C4          >                db      {b $} | END_BIT     // msb as name end
 913+ 737B             >
 913+ 737B 64 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 737D             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 737D CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 7380             >
 913+ 7380             >
 913+ 7380             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 7380             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 7380             >
 913+ 7380             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 7380 3A 6C                        dw      NEG_ONE                 // -1
 915+ 7382 BB 6D A1 6A                  dw      HLD, PLUSSTORE          // hld +!
 916+ 7386 BB 6D C0 6A                  dw      HLD, FETCH, CSTORE      // hld @ c!
 916+ 738A E3 6A
 917+ 738C D0 68                        dw      EXIT                    // ;
 918+ 738E
 919+ 738E              //  ______________________________________________________________________
 920+ 738E              //
 921+ 738E              // pad         -- a
 922+ 738E              // leaves the buffer text address. This is at a fixed distance over HERE.
 923+ 738E                              Colon_Def PAD, "PAD", is_normal
 923+ 738E             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 923+ 738E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 738E             >
 923+ 738E             >                // dummy db directives used to calculate length of namec
 923+ 738E 50 41 44    >                db      "PAD"
 923+ 7391             >len_NFA         defl    $ - temp_NFA
 923+ 7391             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 738E             >
 923+ 738E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 738F 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 923+ 7392             >                org     $-1                 // alter last byte of Name just above to set
 923+ 7391 C4          >                db      {b $} | END_BIT     // msb as name end
 923+ 7392             >
 923+ 7392 76 73       >                dw      last_NFA            // Link to previous definition Name
 923+ 7394             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 7394 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 7397             >
 923+ 7397             >
 923+ 7397             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 7397             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 7397             >
 923+ 7397             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 7397 22 6E                        dw      HERE                    // here
 925+ 7399 A5 63 44 00                  dw      LIT, 68                 // 68
 926+ 739D 6B 69                        dw      PLUS                    // +
 927+ 739F D0 68                        dw      EXIT                    // ;
 928+ 73A1
 929+ 73A1              //  ______________________________________________________________________
 930+ 73A1              //
 931+ 73A1              // word         c -- a
 932+ 73A1              // reads characters from input streams until it encouners a c delimiter.
 933+ 73A1              // Stores that packet so it starts from HERE
 934+ 73A1              // WORD leaves a counter as first byte and ends the packet with two spaces.
 935+ 73A1              // Other occurrences of c are ignored.
 936+ 73A1              // If BLK is zero, text is taken from terminal buffer TIB.
 937+ 73A1              // Otherwise text is taken from the disk-block given by BLK.
 938+ 73A1              // "in" variable is incremented of the number of character read.
 939+ 73A1              // The number of characters read is given by ENCLOSE.
 940+ 73A1                              Colon_Def WORD, "WORD", is_normal
 940+ 73A1             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 940+ 73A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 940+ 73A1             >
 940+ 73A1             >                // dummy db directives used to calculate length of namec
 940+ 73A1 57 4F 52 44 >                db      "WORD"
 940+ 73A5             >len_NFA         defl    $ - temp_NFA
 940+ 73A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 940+ 73A1             >
 940+ 73A1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 940+ 73A2 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 940+ 73A6             >                org     $-1                 // alter last byte of Name just above to set
 940+ 73A5 C4          >                db      {b $} | END_BIT     // msb as name end
 940+ 73A6             >
 940+ 73A6 8E 73       >                dw      last_NFA            // Link to previous definition Name
 940+ 73A8             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 940+ 73A8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 940+ 73AB             >
 940+ 73AB             >
 940+ 73AB             >                endif           ; ok        // for other definitions it "points" the correct handler
 940+ 73AB             >                // Use of "; ok" to suppress "warning[fwdref]"
 940+ 73AB             >
 940+ 73AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 941+ 73AB 2C 6D C0 6A                  dw      BLK, FETCH              // blk @
 942+ 73AF                                                              // if
 943+ 73AF D8 63                        dw      ZBRANCH
 944+ 73B1 0C 00                        dw      Word_Else - $
 945+ 73B3 2C 6D C0 6A                  dw          BLK, FETCH          //      blk @
 946+ 73B7 70 7D                        dw          BLOCK               //      block ( forward )
 947+ 73B9                                                              // else
 948+ 73B9 C3 63                        dw      BRANCH
 949+ 73BB 06 00                        dw      Word_Endif - $
 950+ 73BD              Word_Else:
 951+ 73BD B6 6C C0 6A                  dw         TIB, FETCH           //      tib @
 952+ 73C1              Word_Endif:                                     // endif
 953+ 73C1 36 6D C0 6A                  dw      TO_IN, FETCH, PLUS      // >in @ +
 953+ 73C5 6B 69
 954+ 73C7 34 6A 35 65                  dw      SWAP, ENCLOSE           // swap enclose
 955+ 73CB 22 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 955+ 73CF 22 00 6D 73
 956+ 73D3 36 6D A1 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 957+ 73D7 04 6A 77 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 957+ 73DB FA 68
 958+ 73DD 1E 69 22 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 958+ 73E1 E3 6A
 959+ 73E3 6B 69                        dw      PLUS                    // +
 960+ 73E5 22 6E 90 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 960+ 73E9 0C 69
 961+ 73EB D2 67                        dw      CMOVE                   // cmove
 962+ 73ED 22 6E                        dw      HERE                    // here
 963+ 73EF D0 68                        dw      EXIT                    // ;
 964+ 73F1
 965+ 73F1              //  ______________________________________________________________________
 966+ 73F1              //
 967+ 73F1              // (.")         --
 968+ 73F1              // Direct procedure compiled by ." and  .(  It executes TYPE.
 969+ 73F1                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 969+ 73F1             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 969+ 73F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 73F1             >
 969+ 73F1             >                // dummy db directives used to calculate length of namec
 969+ 73F1 28 2E 22 29 >                db      '(.")'
 969+ 73F5             >len_NFA         defl    $ - temp_NFA
 969+ 73F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 73F1             >
 969+ 73F1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 73F2 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 969+ 73F6             >                org     $-1                 // alter last byte of Name just above to set
 969+ 73F5 A9          >                db      {b $} | END_BIT     // msb as name end
 969+ 73F6             >
 969+ 73F6 A1 73       >                dw      last_NFA            // Link to previous definition Name
 969+ 73F8             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 73F8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 73FB             >
 969+ 73FB             >
 969+ 73FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 73FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 73FB             >
 969+ 73FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 73FB 1E 69 B1 71                  dw      R_OP, COUNT             // r count
 971+ 73FF 3F 6A 90 69                  dw      DUP, ONE_PLUS           // dup 1+
 972+ 7403 0C 69 6B 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 972+ 7407 FA 68
 973+ 7409 D9 71                        dw      TYPE                    // type
 974+ 740B D0 68                        dw      EXIT                    // ;
 975+ 740D
 976+ 740D              //  ______________________________________________________________________
 977+ 740D              //
 978+ 740D              // char         -- c
 979+ 740D              // get first character from next input word
 980+ 740D                              Colon_Def CHAR,  "CHAR", is_normal
 980+ 740D             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 980+ 740D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 980+ 740D             >
 980+ 740D             >                // dummy db directives used to calculate length of namec
 980+ 740D 43 48 41 52 >                db      "CHAR"
 980+ 7411             >len_NFA         defl    $ - temp_NFA
 980+ 7411             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 980+ 740D             >
 980+ 740D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 980+ 740E 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 980+ 7412             >                org     $-1                 // alter last byte of Name just above to set
 980+ 7411 D2          >                db      {b $} | END_BIT     // msb as name end
 980+ 7412             >
 980+ 7412 F1 73       >                dw      last_NFA            // Link to previous definition Name
 980+ 7414             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 980+ 7414 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 980+ 7417             >
 980+ 7417             >
 980+ 7417             >                endif           ; ok        // for other definitions it "points" the correct handler
 980+ 7417             >                // Use of "; ok" to suppress "warning[fwdref]"
 980+ 7417             >
 980+ 7417             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 981+ 7417 44 6C A8 73                  dw      BL, WORD                // bl word
 982+ 741B 90 69 D7 6A                  dw      ONE_PLUS, CFETCH        // 1+ c@
 983+ 741F D0 68                        dw      EXIT                    // ;
 984+ 7421
 985+ 7421              //  ______________________________________________________________________
 986+ 7421              //
 987+ 7421              // ,"           --
 988+ 7421              // compiles a string terminated by " as a counted string from next input stream
 989+ 7421                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 989+ 7421             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 989+ 7421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 7421             >
 989+ 7421             >                // dummy db directives used to calculate length of namec
 989+ 7421 2C 22       >                db      ',"'
 989+ 7423             >len_NFA         defl    $ - temp_NFA
 989+ 7423             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 7421             >
 989+ 7421 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 7422 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 989+ 7424             >                org     $-1                 // alter last byte of Name just above to set
 989+ 7423 A2          >                db      {b $} | END_BIT     // msb as name end
 989+ 7424             >
 989+ 7424 0D 74       >                dw      last_NFA            // Link to previous definition Name
 989+ 7426             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 7426 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 7429             >
 989+ 7429             >
 989+ 7429             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 7429             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 7429             >
 989+ 7429             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 7429 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 991+ 742D A8 73                        dw      WORD                    // word
 992+ 742F D7 6A 90 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 993+ 7433 33 6E                        dw      ALLOT                   // allot
 994+ 7435 15 6C 52 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
 995+ 7439 D0 68                        dw      EXIT
 996+ 743B
 997+ 743B              //  ______________________________________________________________________
 998+ 743B              //
 999+ 743B              // .c           c --
1000+ 743B              // intermediate general purpose string builder, used by ." and .(
1001+ 743B                              Colon_Def DOT_C,  ".C", is_immediate
1001+ 743B             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1001+ 743B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 743B             >
1001+ 743B             >                // dummy db directives used to calculate length of namec
1001+ 743B 2E 43       >                db      ".C"
1001+ 743D             >len_NFA         defl    $ - temp_NFA
1001+ 743D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 743B             >
1001+ 743B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 743C 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1001+ 743E             >                org     $-1                 // alter last byte of Name just above to set
1001+ 743D C3          >                db      {b $} | END_BIT     // msb as name end
1001+ 743E             >
1001+ 743E 21 74       >                dw      last_NFA            // Link to previous definition Name
1001+ 7440             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 7440 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1001+ 7443             >
1001+ 7443             >
1001+ 7443             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 7443             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 7443             >
1001+ 7443             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 7443 7F 6D C0 6A                  dw      STATE, FETCH            // state @
1003+ 7447                                                              // if
1004+ 7447 D8 63                        dw      ZBRANCH
1005+ 7449 12 00                        dw      Dot_C_Else - $
1006+ 744B 95 70 F8 73                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1007+ 744F A8 73 D7 6A                  dw          WORD, CFETCH        //      word c@
1008+ 7453 90 69 33 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1009+ 7457                                                              // else
1010+ 7457 C3 63                        dw      BRANCH
1011+ 7459 08 00                        dw      Dot_C_Endif - $
1012+ 745B              Dot_C_Else:
1013+ 745B A8 73 B1 71                  dw          WORD, COUNT, TYPE   //      word count type
1013+ 745F D9 71
1014+ 7461              Dot_C_Endif:                                    // endif
1015+ 7461 D0 68                        dw      EXIT                    ;
1016+ 7463
1017+ 7463              //  ______________________________________________________________________
1018+ 7463              //
1019+ 7463              // ."           c --
1020+ 7463                              Colon_Def DOT_QUOTE,  '."', is_immediate
1020+ 7463             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1020+ 7463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 7463             >
1020+ 7463             >                // dummy db directives used to calculate length of namec
1020+ 7463 2E 22       >                db      '."'
1020+ 7465             >len_NFA         defl    $ - temp_NFA
1020+ 7465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 7463             >
1020+ 7463 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 7464 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1020+ 7466             >                org     $-1                 // alter last byte of Name just above to set
1020+ 7465 A2          >                db      {b $} | END_BIT     // msb as name end
1020+ 7466             >
1020+ 7466 3B 74       >                dw      last_NFA            // Link to previous definition Name
1020+ 7468             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 7468 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 746B             >
1020+ 746B             >
1020+ 746B             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 746B             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 746B             >
1020+ 746B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 746B A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1022+ 746F 40 74                        dw      DOT_C                   // [compile] .c
1023+ 7471 D0 68                        dw      EXIT                    // ; immediate
1024+ 7473
1025+ 7473              //  ______________________________________________________________________
1026+ 7473              //
1027+ 7473              // .(           c --
1028+ 7473                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1028+ 7473             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1028+ 7473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 7473             >
1028+ 7473             >                // dummy db directives used to calculate length of namec
1028+ 7473 2E 28       >                db      ".("
1028+ 7475             >len_NFA         defl    $ - temp_NFA
1028+ 7475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 7473             >
1028+ 7473 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 7474 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1028+ 7476             >                org     $-1                 // alter last byte of Name just above to set
1028+ 7475 A8          >                db      {b $} | END_BIT     // msb as name end
1028+ 7476             >
1028+ 7476 63 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 7478             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 7478 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 747B             >
1028+ 747B             >
1028+ 747B             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 747B             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 747B             >
1028+ 747B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 747B A5 63 29 00                  dw      LIT, ")"                // [char] )
1030+ 747F 40 74                        dw      DOT_C                   // [compile] .c
1031+ 7481 D0 68                        dw      EXIT                    // ; immediate
1032+ 7483
1033+ 7483              //  ______________________________________________________________________
1034+ 7483              //
1035+ 7483              // (sgn)        a -- a f
1036+ 7483              // determines if char in addr a is a sign (+ or -), and in that case increments
1037+ 7483              // a flag. Returns f as the sign, true for negative, false for positive.
1038+ 7483              // called by NUMBER and (EXP)
1039+ 7483                              Colon_Def CSGN,  "(SGN)", is_normal
1039+ 7483             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1039+ 7483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1039+ 7483             >
1039+ 7483             >                // dummy db directives used to calculate length of namec
1039+ 7483 28 53 47 4E >                db      "(SGN)"
1039+ 7487 29          >
1039+ 7488             >len_NFA         defl    $ - temp_NFA
1039+ 7488             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1039+ 7483             >
1039+ 7483 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1039+ 7484 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1039+ 7488 29          >
1039+ 7489             >                org     $-1                 // alter last byte of Name just above to set
1039+ 7488 A9          >                db      {b $} | END_BIT     // msb as name end
1039+ 7489             >
1039+ 7489 73 74       >                dw      last_NFA            // Link to previous definition Name
1039+ 748B             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1039+ 748B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1039+ 748E             >
1039+ 748E             >
1039+ 748E             >                endif           ; ok        // for other definitions it "points" the correct handler
1039+ 748E             >                // Use of "; ok" to suppress "warning[fwdref]"
1039+ 748E             >
1039+ 748E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1040+ 748E 3F 6A 90 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1040+ 7492 D7 6A
1041+ 7494 3F 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1041+ 7498 2D 00 83 6E
1042+ 749C                                                              // if
1043+ 749C D8 63                        dw      ZBRANCH
1044+ 749E 12 00                        dw      CSgn_Else_0 - $
1045+ 74A0 12 6A                        dw          DROP                //      drop
1046+ 74A2 90 69                        dw          ONE_PLUS            //      1+
1047+ 74A4 1E 6C 94 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1047+ 74A8 A1 6A
1048+ 74AA 1E 6C                        dw          ONE                 //      1
1049+ 74AC                                                              // else
1050+ 74AC C3 63                        dw      BRANCH
1051+ 74AE 16 00                        dw      CSgn_Endif_0 - $
1052+ 74B0              CSgn_Else_0:
1053+ 74B0 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1053+ 74B4 83 6E
1054+ 74B6                                                              //      if
1055+ 74B6 D8 63                        dw          ZBRANCH
1056+ 74B8 0A 00                        dw          CSgn_Endif_1 - $
1057+ 74BA 90 69                        dw              ONE_PLUS        //          1+
1058+ 74BC 1E 6C 94 6D                  dw              ONE, DPL        //          1 dpl
1059+ 74C0 A1 6A                        dw              PLUSSTORE       //          +!
1060+ 74C2              CSgn_Endif_1                                    //      endif
1061+ 74C2 15 6C                        dw          ZERO                //      0
1062+ 74C4              CSgn_Endif_0:                                   // endif
1063+ 74C4 D0 68                        dw      EXIT
1064+ 74C6
1065+ 74C6              //  ______________________________________________________________________
1066+ 74C6              //
1067+ 74C6              // (number)     d a -- d1 a1
1068+ 74C6              // using the current BASE parse characters stored in address a
1069+ 74C6              // accumulating a double precision integer d
1070+ 74C6              // the process stops at the first not-convertible character
1071+ 74C6              // A double-number is kept in CPU registers as HLDE.
1072+ 74C6              // On the stack a double number is treated as two single numbers
1073+ 74C6              // where HL is on the top of the stack and DE is the second from top,
1074+ 74C6              // so in the stack memory it appears as LHED.
1075+ 74C6              // Instead, in 2VARIABLE a double number is stored as EDLH.
1076+ 74C6                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1076+ 74C6             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1076+ 74C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ 74C6             >
1076+ 74C6             >                // dummy db directives used to calculate length of namec
1076+ 74C6 28 4E 55 4D >                db      "(NUMBER)"
1076+ 74CA 42 45 52 29 >
1076+ 74CE             >len_NFA         defl    $ - temp_NFA
1076+ 74CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ 74C6             >
1076+ 74C6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ 74C7 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1076+ 74CB 42 45 52 29 >
1076+ 74CF             >                org     $-1                 // alter last byte of Name just above to set
1076+ 74CE A9          >                db      {b $} | END_BIT     // msb as name end
1076+ 74CF             >
1076+ 74CF 83 74       >                dw      last_NFA            // Link to previous definition Name
1076+ 74D1             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 74D1 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1076+ 74D4             >
1076+ 74D4             >
1076+ 74D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 74D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 74D4             >
1076+ 74D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 74D4                                                              // begin
1078+ 74D4              CNumber_Begin:
1079+ 74D4 90 69                        dw          ONE_PLUS            //      1+
1080+ 74D6 3F 6A FA 68                  dw          DUP, TO_R           //      dup >r
1081+ 74DA D7 6A                        dw          CFETCH              //      @
1082+ 74DC 8A 6D C0 6A                  dw          BASE, FETCH         //      base @
1083+ 74E0 72 64                        dw          DIGIT               //      digit
1084+ 74E2                                                              // while
1085+ 74E2 D8 63                        dw      ZBRANCH
1086+ 74E4 2C 00                        dw      CNumber_While_end - $
1087+ 74E6 34 6A                        dw          SWAP                //      swap
1088+ 74E8 8A 6D C0 6A                  dw          BASE, FETCH         //      base @
1089+ 74EC 03 68                        dw          UM_MUL              //      um*
1090+ 74EE 12 6A 4A 6A                  dw          DROP, ROT           //      drop rot
1091+ 74F2 8A 6D C0 6A                  dw          BASE, FETCH         //      base @
1092+ 74F6 03 68                        dw          UM_MUL              //      um*
1093+ 74F8 76 69                        dw          DPLUS               //      d+
1094+ 74FA 94 6D C0 6A                  dw          DPL, FETCH          //      dpl @
1095+ 74FE 90 69                        dw          ONE_PLUS            //      1+
1096+ 7500                                                              //      if
1097+ 7500 D8 63                        dw          ZBRANCH
1098+ 7502 08 00                        dw          CNumber_Endif - $
1099+ 7504 1E 6C 94 6D                  dw              ONE, DPL        //          1 dpl
1100+ 7508 A1 6A                        dw              PLUSSTORE       //          +!
1101+ 750A              CNumber_Endif:                                  //      endif
1102+ 750A 0C 69                        dw             R_TO             //      r>  ( balance rp )
1103+ 750C C3 63                        dw      BRANCH
1104+ 750E C6 FF                        dw      CNumber_Begin - $
1105+ 7510              CNumber_While_end:                              // repeat
1106+ 7510 0C 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1107+ 7512 D0 68                        dw      EXIT                    // ;
1108+ 7514
1109+ 7514              //  ______________________________________________________________________
1110+ 7514              //
1111+ 7514              // number       a -- d
1112+ 7514                              Colon_Def NUMBER,  "NUMBER", is_normal
1112+ 7514             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1112+ 7514             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ 7514             >
1112+ 7514             >                // dummy db directives used to calculate length of namec
1112+ 7514 4E 55 4D 42 >                db      "NUMBER"
1112+ 7518 45 52       >
1112+ 751A             >len_NFA         defl    $ - temp_NFA
1112+ 751A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ 7514             >
1112+ 7514 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ 7515 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1112+ 7519 45 52       >
1112+ 751B             >                org     $-1                 // alter last byte of Name just above to set
1112+ 751A D2          >                db      {b $} | END_BIT     // msb as name end
1112+ 751B             >
1112+ 751B C6 74       >                dw      last_NFA            // Link to previous definition Name
1112+ 751D             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 751D CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1112+ 7520             >
1112+ 7520             >
1112+ 7520             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 7520             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 7520             >
1112+ 7520             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 7520 15 6C 15 6C                  dw      ZERO, ZERO              // 0 0
1114+ 7524 4A 6A                        dw      ROT                     // rot
1115+ 7526 8B 74 FA 68                  dw      CSGN, TO_R              // (sgn) >r
1116+ 752A 3A 6C 94 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1116+ 752E CB 6A
1117+ 7530 D1 74                        dw      CNUMBER                 // (number)
1118+ 7532 3F 6A D7 6A                  dw      DUP, CFETCH             // dup c@
1119+ 7536 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1119+ 753A 83 6E
1120+ 753C                                                              // if
1121+ 753C D8 63                        dw      ZBRANCH
1122+ 753E 0A 00                        dw      Number_Endif_1 - $
1123+ 7540 15 6C 94 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1123+ 7544 CB 6A
1124+ 7546 D1 74                        dw          CNUMBER             //      (number)
1125+ 7548              Number_Endif_1:                                 // endif
1126+ 7548 D7 6A 44 6C                  dw      CFETCH, BL              // c@ bl
1127+ 754C 77 6E 15 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1127+ 7550 FC 6F
1128+ 7552 0C 69                        dw      R_TO                    // r>
1129+ 7554                                                              // if
1130+ 7554 D8 63                        dw      ZBRANCH
1131+ 7556 04 00                        dw      Number_Endif_2 - $
1132+ 7558 E8 69                        dw          DMINUS              //      dminus
1133+ 755A              Number_Endif_2:                                 // endif
1134+ 755A D0 68                        dw      EXIT                    // ;
1135+ 755C
1136+ 755C              //  ______________________________________________________________________
1137+ 755C              //
1138+ 755C              // -find        a -- d
1139+ 755C                              Colon_Def LFIND,  "-FIND", is_normal
1139+ 755C             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1139+ 755C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1139+ 755C             >
1139+ 755C             >                // dummy db directives used to calculate length of namec
1139+ 755C 2D 46 49 4E >                db      "-FIND"
1139+ 7560 44          >
1139+ 7561             >len_NFA         defl    $ - temp_NFA
1139+ 7561             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1139+ 755C             >
1139+ 755C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1139+ 755D 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1139+ 7561 44          >
1139+ 7562             >                org     $-1                 // alter last byte of Name just above to set
1139+ 7561 C4          >                db      {b $} | END_BIT     // msb as name end
1139+ 7562             >
1139+ 7562 14 75       >                dw      last_NFA            // Link to previous definition Name
1139+ 7564             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1139+ 7564 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1139+ 7567             >
1139+ 7567             >
1139+ 7567             >                endif           ; ok        // for other definitions it "points" the correct handler
1139+ 7567             >                // Use of "; ok" to suppress "warning[fwdref]"
1139+ 7567             >
1139+ 7567             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1140+ 7567 44 6C A8 73                  dw      BL, WORD                // bl word
1141+ 756B 65 6D C0 6A                  dw      CONTEXT, FETCH, FETCH   // context @ @
1141+ 756F C0 6A
1142+ 7571 DF 64                        dw      C_FIND                  // (find)
1143+ 7573 FB 6E                        dw      QDUP                    // ?dup
1144+ 7575 2D 69                        dw      ZEQUAL                  // 0=
1145+ 7577                                                              // if
1146+ 7577 D8 63                        dw      ZBRANCH
1147+ 7579 08 00                        dw      LFind_Endif - $
1148+ 757B 22 6E                        dw          HERE                //      here
1149+ 757D 6A 6F                        dw          LATEST              //      latest
1150+ 757F DF 64                        dw          C_FIND              //      (find)
1151+ 7581              LFind_Endif:                                    // endif
1152+ 7581 D0 68                        dw      EXIT                    // ;
1153+ 7583
1154+ 7583              //  ______________________________________________________________________
1155+ 7583              //
1156+ 7583              // (abort)      --
1157+ 7583                              Colon_Def CABORT,  "(ABORT)", is_normal
1157+ 7583             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1157+ 7583             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ 7583             >
1157+ 7583             >                // dummy db directives used to calculate length of namec
1157+ 7583 28 41 42 4F >                db      "(ABORT)"
1157+ 7587 52 54 29    >
1157+ 758A             >len_NFA         defl    $ - temp_NFA
1157+ 758A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ 7583             >
1157+ 7583 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ 7584 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1157+ 7588 52 54 29    >
1157+ 758B             >                org     $-1                 // alter last byte of Name just above to set
1157+ 758A A9          >                db      {b $} | END_BIT     // msb as name end
1157+ 758B             >
1157+ 758B 5C 75       >                dw      last_NFA            // Link to previous definition Name
1157+ 758D             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 758D CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1157+ 7590             >
1157+ 7590             >
1157+ 7590             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 7590             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 7590             >
1157+ 7590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 7590 69 78                        dw      ABORT                   // abort
1159+ 7592 D0 68                        dw      EXIT                    // ;
1160+ 7594
1161+ 7594              //  ______________________________________________________________________
1162+ 7594              //
1163+ 7594              // error        n --
1164+ 7594              // raise an error
1165+ 7594              // if WARNING is 0, prints "MSG#n".
1166+ 7594              // if WARNING is 1, prints line n of screen 4.
1167+ 7594              // if WARNING is -1 does (ABORT) that normally does ABORT
1168+ 7594              // value can be negative or beyond block 4.
1169+ 7594                              Colon_Def ERROR,  "ERROR", is_normal
1169+ 7594             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1169+ 7594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1169+ 7594             >
1169+ 7594             >                // dummy db directives used to calculate length of namec
1169+ 7594 45 52 52 4F >                db      "ERROR"
1169+ 7598 52          >
1169+ 7599             >len_NFA         defl    $ - temp_NFA
1169+ 7599             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1169+ 7594             >
1169+ 7594 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1169+ 7595 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1169+ 7599 52          >
1169+ 759A             >                org     $-1                 // alter last byte of Name just above to set
1169+ 7599 D2          >                db      {b $} | END_BIT     // msb as name end
1169+ 759A             >
1169+ 759A 83 75       >                dw      last_NFA            // Link to previous definition Name
1169+ 759C             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1169+ 759C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1169+ 759F             >
1169+ 759F             >
1169+ 759F             >                endif           ; ok        // for other definitions it "points" the correct handler
1169+ 759F             >                // Use of "; ok" to suppress "warning[fwdref]"
1169+ 759F             >
1169+ 759F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1170+ 759F D0 6C C0 6A                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1170+ 75A3 47 69
1171+ 75A5                                                              // if
1172+ 75A5 D8 63                        dw      ZBRANCH
1173+ 75A7 04 00                        dw      Error_Endif_1 - $
1174+ 75A9 8D 75                        dw          CABORT              //      (abort)
1175+ 75AB              Error_Endif_1:                                  // endif
1176+ 75AB 22 6E B1 71                  dw      HERE, COUNT, TYPE       // here count type
1176+ 75AF D9 71
1177+ 75B1 F8 73                        dw      C_DOT_QUOTE             // .( ? )
1178+ 75B3 02 3F 20                     db      2, "? "
1179+ 75B6 5E 7A                        dw      MESSAGE                 // message  ( forward )
1180+ 75B8 A3 6C C0 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1180+ 75BC AD 68
1181+ 75BE 2C 6D C0 6A                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1181+ 75C2 FB 6E
1182+ 75C4                                                              // if
1183+ 75C4 D8 63                        dw      ZBRANCH
1184+ 75C6 08 00                        dw      Error_Endif_2 - $
1185+ 75C8 36 6D C0 6A                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1185+ 75CC 34 6A
1186+ 75CE              Error_Endif_2:                                  // endif
1187+ 75CE 27 78                        dw      QUIT                    // quit ( forward )
1188+ 75D0 D0 68                        dw      EXIT                    // ;
1189+ 75D2              //  ______________________________________________________________________
1190+ 75D2              //
1191+ 75D2              // id.          nfa --
1192+ 75D2                              Colon_Def ID_DOT,  "ID.", is_normal
1192+ 75D2             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1192+ 75D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1192+ 75D2             >
1192+ 75D2             >                // dummy db directives used to calculate length of namec
1192+ 75D2 49 44 2E    >                db      "ID."
1192+ 75D5             >len_NFA         defl    $ - temp_NFA
1192+ 75D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1192+ 75D2             >
1192+ 75D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1192+ 75D3 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1192+ 75D6             >                org     $-1                 // alter last byte of Name just above to set
1192+ 75D5 AE          >                db      {b $} | END_BIT     // msb as name end
1192+ 75D6             >
1192+ 75D6 94 75       >                dw      last_NFA            // Link to previous definition Name
1192+ 75D8             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1192+ 75D8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1192+ 75DB             >
1192+ 75DB             >
1192+ 75DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1192+ 75DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1192+ 75DB             >
1192+ 75DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1193+ 75DB 94 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1193+ 75DF 20 00 A5 63
1193+ 75E3 60 00
1194+ 75E5 42 73                        dw      FILL                    // fill
1195+ 75E7 3F 6A B0 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1195+ 75EB 7B 6F
1196+ 75ED 04 6A 77 6E                  dw      OVER, SUBTRACT          // over -
1197+ 75F1 94 73 34 6A                  dw      PAD, SWAP               // pad swap
1198+ 75F5 D2 67                        dw      CMOVE                   // cmove
1199+ 75F7 94 73 B1 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1199+ 75FB A5 63 1F 00
1200+ 75FF 6E 68                        dw      AND_OP                  // and  ( use only lower bits )
1201+ 7601 D9 71 32 6F                  dw      TYPE, SPACE             // type
1202+ 7605 D0 68                        dw      EXIT                    // ;
1203+ 7607
1204+ 7607              //  ______________________________________________________________________
1205+ 7607              //
1206+ 7607              // code         -- cccc
1207+ 7607                              Colon_Def CODE,  "CODE", is_normal
1207+ 7607             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1207+ 7607             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ 7607             >
1207+ 7607             >                // dummy db directives used to calculate length of namec
1207+ 7607 43 4F 44 45 >                db      "CODE"
1207+ 760B             >len_NFA         defl    $ - temp_NFA
1207+ 760B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ 7607             >
1207+ 7607 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ 7608 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1207+ 760C             >                org     $-1                 // alter last byte of Name just above to set
1207+ 760B C5          >                db      {b $} | END_BIT     // msb as name end
1207+ 760C             >
1207+ 760C D2 75       >                dw      last_NFA            // Link to previous definition Name
1207+ 760E             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 760E CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 7611             >
1207+ 7611             >
1207+ 7611             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 7611             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 7611             >
1207+ 7611             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 7611 64 75                        dw      LFIND                   // -find
1209+ 7613                                                              // if
1210+ 7613 D8 63                        dw      ZBRANCH
1211+ 7615 10 00                        dw      Code_Endif - $
1212+ 7617 12 6A                        dw          DROP                //      drop
1213+ 7619 D8 6F D8 75                  dw          TO_NAME, ID_DOT     //      >name id.
1214+ 761D A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1214+ 7621 5E 7A
1215+ 7623 32 6F                        dw          SPACE               //      space
1216+ 7625              Code_Endif:                                     // endif
1217+ 7625 22 6E                        dw      HERE                    // here
1218+ 7627                                                              // ( ---- here begins NFA ---- )
1219+ 7627 3F 6A D7 6A                  dw      DUP, CFETCH             // dup c@
1220+ 762B C2 6C C0 6A                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1220+ 762F CC 6E
1221+ 7631 90 69 33 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1222+ 7635 3F 6A                        dw      DUP                     // dup
1223+ 7637 A5 63                        dw      LIT
1224+ 7639 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1225+ 763B B5 6A                        dw      TOGGLE                  // toggle
1226+ 763D 22 6E 9A 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1227+ 7641 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1227+ 7645 B5 6A
1228+ 7647                                                              // ( ---- here is LFA ---- )
1229+ 7647 6A 6F 40 6E                  dw      LATEST, COMMA           // latest ,
1230+ 764B 73 6D C0 6A                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1230+ 764F CB 6A
1231+ 7651                                                              // ( ---- here is LFA ---- )
1232+ 7651              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1233+ 7651 D0 68                        dw      EXIT                    // ;
1234+ 7653
1235+ 7653              //  ______________________________________________________________________
1236+ 7653              //
1237+ 7653              // create       -- cccc     ( compile time )
1238+ 7653              //              -- a        ( run time )
1239+ 7653                              Colon_Def CREATE,  "CREATE", is_normal
1239+ 7653             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1239+ 7653             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1239+ 7653             >
1239+ 7653             >                // dummy db directives used to calculate length of namec
1239+ 7653 43 52 45 41 >                db      "CREATE"
1239+ 7657 54 45       >
1239+ 7659             >len_NFA         defl    $ - temp_NFA
1239+ 7659             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1239+ 7653             >
1239+ 7653 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1239+ 7654 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1239+ 7658 54 45       >
1239+ 765A             >                org     $-1                 // alter last byte of Name just above to set
1239+ 7659 C5          >                db      {b $} | END_BIT     // msb as name end
1239+ 765A             >
1239+ 765A 07 76       >                dw      last_NFA            // Link to previous definition Name
1239+ 765C             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1239+ 765C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1239+ 765F             >
1239+ 765F             >
1239+ 765F             >                endif           ; ok        // for other definitions it "points" the correct handler
1239+ 765F             >                // Use of "; ok" to suppress "warning[fwdref]"
1239+ 765F             >
1239+ 765F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1240+ 765F 0E 76 E5 70                  dw      CODE, SMUDGE            // code smudge
1241+ 7663 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1241+ 7667 52 6E
1242+ 7669 A5 63 F4 6B                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1242+ 766D 40 6E
1243+ 766F 3F 71                        dw      C_SEMICOLON_CODE
1244+ 7671                              // this routine is called from the call coded in CFA
1245+ 7671              Create_Ptr:
1246+ 7671
1247+ 7671
1248+ 7671
1249+ 7671                              next
1249+ 7671 DD E9       >                jp      (ix)
1250+ 7673
1251+ 7673              //  ______________________________________________________________________
1252+ 7673              //
1253+ 7673              // [compile]    -- cccc     ( compile time )
1254+ 7673                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1254+ 7673             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1254+ 7673             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1254+ 7673             >
1254+ 7673             >                // dummy db directives used to calculate length of namec
1254+ 7673 5B 43 4F 4D >                db      "[COMPILE]"
1254+ 7677 50 49 4C 45 >
1254+ 767B 5D          >
1254+ 767C             >len_NFA         defl    $ - temp_NFA
1254+ 767C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1254+ 7673             >
1254+ 7673 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1254+ 7674 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1254+ 7678 50 49 4C 45 >
1254+ 767C 5D          >
1254+ 767D             >                org     $-1                 // alter last byte of Name just above to set
1254+ 767C DD          >                db      {b $} | END_BIT     // msb as name end
1254+ 767D             >
1254+ 767D 53 76       >                dw      last_NFA            // Link to previous definition Name
1254+ 767F             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1254+ 767F CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1254+ 7682             >
1254+ 7682             >
1254+ 7682             >                endif           ; ok        // for other definitions it "points" the correct handler
1254+ 7682             >                // Use of "; ok" to suppress "warning[fwdref]"
1254+ 7682             >
1254+ 7682             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1255+ 7682 64 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1256+ 7684 2D 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1257+ 7686 15 6C FC 6F                  dw      ZERO, QERROR            // 0 ?error
1258+ 768A 12 6A                        dw      DROP                    // drop       (  cfa  )
1259+ 768C 40 6E                        dw      COMMA                   // ,
1260+ 768E D0 68                        dw      EXIT                    // ; immediate
1261+ 7690
1262+ 7690              //  ______________________________________________________________________
1263+ 7690              //
1264+ 7690              // literal      n --      ( compile time )
1265+ 7690                              Colon_Def LITERAL,  "LITERAL", is_immediate
1265+ 7690             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1265+ 7690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1265+ 7690             >
1265+ 7690             >                // dummy db directives used to calculate length of namec
1265+ 7690 4C 49 54 45 >                db      "LITERAL"
1265+ 7694 52 41 4C    >
1265+ 7697             >len_NFA         defl    $ - temp_NFA
1265+ 7697             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1265+ 7690             >
1265+ 7690 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1265+ 7691 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1265+ 7695 52 41 4C    >
1265+ 7698             >                org     $-1                 // alter last byte of Name just above to set
1265+ 7697 CC          >                db      {b $} | END_BIT     // msb as name end
1265+ 7698             >
1265+ 7698 73 76       >                dw      last_NFA            // Link to previous definition Name
1265+ 769A             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1265+ 769A CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1265+ 769D             >
1265+ 769D             >
1265+ 769D             >                endif           ; ok        // for other definitions it "points" the correct handler
1265+ 769D             >                // Use of "; ok" to suppress "warning[fwdref]"
1265+ 769D             >
1265+ 769D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1266+ 769D 7F 6D C0 6A                  dw      STATE, FETCH            // state @
1267+ 76A1                                                              // if
1268+ 76A1 D8 63                        dw      ZBRANCH
1269+ 76A3 08 00                        dw      Literal_Endif - $
1270+ 76A5 95 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1271+ 76A9 40 6E                        dw          COMMA               //      ,
1272+ 76AB              Literal_Endif:                                  // endif
1273+ 76AB D0 68                        dw      EXIT                    // ; immediate
1274+ 76AD
1275+ 76AD              //  ______________________________________________________________________
1276+ 76AD              //
1277+ 76AD              // dliteral     n --      ( compile time )
1278+ 76AD                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1278+ 76AD             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1278+ 76AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1278+ 76AD             >
1278+ 76AD             >                // dummy db directives used to calculate length of namec
1278+ 76AD 44 4C 49 54 >                db      "DLITERAL"
1278+ 76B1 45 52 41 4C >
1278+ 76B5             >len_NFA         defl    $ - temp_NFA
1278+ 76B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1278+ 76AD             >
1278+ 76AD C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1278+ 76AE 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1278+ 76B2 45 52 41 4C >
1278+ 76B6             >                org     $-1                 // alter last byte of Name just above to set
1278+ 76B5 CC          >                db      {b $} | END_BIT     // msb as name end
1278+ 76B6             >
1278+ 76B6 90 76       >                dw      last_NFA            // Link to previous definition Name
1278+ 76B8             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1278+ 76B8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1278+ 76BB             >
1278+ 76BB             >
1278+ 76BB             >                endif           ; ok        // for other definitions it "points" the correct handler
1278+ 76BB             >                // Use of "; ok" to suppress "warning[fwdref]"
1278+ 76BB             >
1278+ 76BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1279+ 76BB 7F 6D C0 6A                  dw      STATE, FETCH            // state @
1280+ 76BF                                                              // if
1281+ 76BF D8 63                        dw      ZBRANCH
1282+ 76C1 08 00                        dw      DLiteral_Endif - $
1283+ 76C3 34 6A                        dw          SWAP                //      swap
1284+ 76C5 9A 76 9A 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1285+ 76C9              DLiteral_Endif:                                 // endif
1286+ 76C9 D0 68                        dw      EXIT                    // ; immediate
1287+ 76CB
1288+ 76CB              //  ______________________________________________________________________
1289+ 76CB              //
1290+ 76CB              // [char]       n --      ( compile time )
1291+ 76CB              // inside colon definition, gets first character from next input word
1292+ 76CB              // and compiles it as literal.
1293+ 76CB                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1293+ 76CB             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1293+ 76CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1293+ 76CB             >
1293+ 76CB             >                // dummy db directives used to calculate length of namec
1293+ 76CB 5B 43 48 41 >                db      "[CHAR]"
1293+ 76CF 52 5D       >
1293+ 76D1             >len_NFA         defl    $ - temp_NFA
1293+ 76D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1293+ 76CB             >
1293+ 76CB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1293+ 76CC 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1293+ 76D0 52 5D       >
1293+ 76D2             >                org     $-1                 // alter last byte of Name just above to set
1293+ 76D1 DD          >                db      {b $} | END_BIT     // msb as name end
1293+ 76D2             >
1293+ 76D2 AD 76       >                dw      last_NFA            // Link to previous definition Name
1293+ 76D4             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1293+ 76D4 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1293+ 76D7             >
1293+ 76D7             >
1293+ 76D7             >                endif           ; ok        // for other definitions it "points" the correct handler
1293+ 76D7             >                // Use of "; ok" to suppress "warning[fwdref]"
1293+ 76D7             >
1293+ 76D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1294+ 76D7 14 74 9A 76                  dw      CHAR, LITERAL           // char [compile] literal
1295+ 76DB D0 68                        dw      EXIT                    // ; immediate
1296+ 76DD
1297+ 76DD              //  ______________________________________________________________________
1298+ 76DD              //
1299+ 76DD              // 0x00         n --      ( compile time )
1300+ 76DD                              Colon_Def NUL_WORD,  $00, is_immediate
1300+ 76DD             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1300+ 76DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1300+ 76DD             >
1300+ 76DD             >                // dummy db directives used to calculate length of namec
1300+ 76DD 00          >                db      $00
1300+ 76DE             >len_NFA         defl    $ - temp_NFA
1300+ 76DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1300+ 76DD             >
1300+ 76DD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1300+ 76DE 00          >                db      $00               // name string in 7-bit ascii, but
1300+ 76DF             >                org     $-1                 // alter last byte of Name just above to set
1300+ 76DE 80          >                db      {b $} | END_BIT     // msb as name end
1300+ 76DF             >
1300+ 76DF CB 76       >                dw      last_NFA            // Link to previous definition Name
1300+ 76E1             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1300+ 76E1 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1300+ 76E4             >
1300+ 76E4             >
1300+ 76E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1300+ 76E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1300+ 76E4             >
1300+ 76E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1301+ 76E4 2C 6D C0 6A                  dw      BLK, FETCH, ONE         // blk @ 1
1301+ 76E8 1E 6C
1302+ 76EA BD 6E                        dw      GREATER                 // > if
1303+ 76EC                                                              // if
1304+ 76EC D8 63                        dw      ZBRANCH
1305+ 76EE 28 00                        dw      Nul_Else_1 - $
1306+ 76F0 1E 6C 2C 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1306+ 76F4 A1 6A
1307+ 76F6 15 6C 36 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1307+ 76FA CB 6A
1308+ 76FC 2C 6D C0 6A                  dw          BLK, FETCH          //      blk @
1309+ 7700 69 6C                        dw          BSCR                //      b/scr
1310+ 7702 9A 69                        dw          ONE_SUBTRACT        //      1 -
1311+ 7704 6E 68                        dw          AND_OP              //      and  ( this is tricky )
1312+ 7706 2D 69                        dw          ZEQUAL              //      0=
1313+ 7708                                                              //      if
1314+ 7708 D8 63                        dw          ZBRANCH
1315+ 770A 08 00                        dw          Nul_Endif_2 - $
1316+ 770C 30 70                        dw              QEXEC           //          ?exec
1317+ 770E 0C 69 12 6A                  dw              R_TO, DROP      //          r> drop
1318+ 7712              Nul_Endif_2:                                    //      endif
1319+ 7712 C3 63                        dw      BRANCH
1320+ 7714 06 00                        dw      Nul_Endif_1 - $
1321+ 7716              Nul_Else_1:                                     // else
1322+ 7716 0C 69 12 6A                  dw          R_TO, DROP          //      r> drop
1323+ 771A              Nul_Endif_1:                                    // endif
1324+ 771A D0 68                        dw      EXIT                    // ;
1325+ 771C
1326+ 771C              //  ______________________________________________________________________
1327+ 771C              //
1328+ 771C              // ?stack       --
1329+ 771C              // Raise error #1 if stack is empty and you pop it
1330+ 771C              // Raise error #7 if stack is full.
1331+ 771C              // This means SP must always stay between HERE and FFFF
1332+ 771C              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1333+ 771C              // for Next 8K MMU paging this is $DOE8
1334+ 771C                              Colon_Def QSTACK, "?STACK", is_normal
1334+ 771C             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1334+ 771C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ 771C             >
1334+ 771C             >                // dummy db directives used to calculate length of namec
1334+ 771C 3F 53 54 41 >                db      "?STACK"
1334+ 7720 43 4B       >
1334+ 7722             >len_NFA         defl    $ - temp_NFA
1334+ 7722             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ 771C             >
1334+ 771C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ 771D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1334+ 7721 43 4B       >
1334+ 7723             >                org     $-1                 // alter last byte of Name just above to set
1334+ 7722 CB          >                db      {b $} | END_BIT     // msb as name end
1334+ 7723             >
1334+ 7723 DD 76       >                dw      last_NFA            // Link to previous definition Name
1334+ 7725             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 7725 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1334+ 7728             >
1334+ 7728             >
1334+ 7728             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 7728             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 7728             >
1334+ 7728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 7728 A0 68                        dw      SPFETCH                 // sp@
1336+ 772A A3 6C C0 6A                  dw      S0, FETCH               // s0 @
1337+ 772E 34 6A 91 6E                  dw      SWAP, ULESS             // swap u<
1338+ 7732 1E 6C FC 6F                  dw      ONE, QERROR             // 1 ?error
1339+ 7736 22 6E                        dw      HERE                    // here
1340+ 7738 A3 6C C0 6A                  dw      S0, FETCH, LESS         // s0 @ <
1340+ 773C A3 6E
1341+ 773E                                                              // if
1342+ 773E D8 63                        dw      ZBRANCH
1343+ 7740 14 00                        dw      QStack_Endif - $
1344+ 7742 A0 68                        dw          SPFETCH             //      sp@
1345+ 7744 22 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1345+ 7748 80 00
1346+ 774A 6B 69 91 6E                  dw          PLUS, ULESS         //      plus u<
1347+ 774E A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1347+ 7752 FC 6F
1348+ 7754              QStack_Endif:                                   // endif
1349+ 7754 D0 68                        dw      EXIT                    // ;
1350+ 7756
1351+ 7756
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 111  7756                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7756              //  ______________________________________________________________________
   2+ 7756              //
   3+ 7756              //  L2.asm
   4+ 7756              //
   5+ 7756              //  Level-2
   6+ 7756              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7756              //  ______________________________________________________________________
   8+ 7756
   9+ 7756
  10+ 7756              //  ______________________________________________________________________
  11+ 7756              //
  12+ 7756              // interpret    --
  13+ 7756              // This is the text interpreter.
  14+ 7756              // It executes or compiles, depending on STATE, the text coming from
  15+ 7756              // current input stream.
  16+ 7756              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7756              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7756              // leaving on top of stack a single or double precision number, depending
  19+ 7756              // on the presence of a decimal point.
  20+ 7756              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7756              // by the offending word.
  22+ 7756                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7756             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7756             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7756             >
  22+ 7756             >                // dummy db directives used to calculate length of namec
  22+ 7756 49 4E 54 45 >                db      "INTERPRET"
  22+ 775A 52 50 52 45 >
  22+ 775E 54          >
  22+ 775F             >len_NFA         defl    $ - temp_NFA
  22+ 775F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7756             >
  22+ 7756 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7757 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 775B 52 50 52 45 >
  22+ 775F 54          >
  22+ 7760             >                org     $-1                 // alter last byte of Name just above to set
  22+ 775F D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7760             >
  22+ 7760 1C 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7762             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7762 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7765             >
  22+ 7765             >
  22+ 7765             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7765             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7765             >
  22+ 7765             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7765
  24+ 7765              Interpret_Begin:                                        // begin
  25+ 7765 64 75                        dw          LFIND                       //      -find
  26+ 7767                                                                      //      if
  27+ 7767 D8 63                        dw          ZBRANCH
  28+ 7769 1A 00                        dw          Interpret_Else_1 - $
  29+ 776B 7F 6D C0 6A                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 776F A3 6E
  30+ 7771                                                                      //          if
  31+ 7771 D8 63                        dw              ZBRANCH
  32+ 7773 08 00                        dw              Interpret_Else_2 - $
  33+ 7775 B3 70                        dw                  COMPILE_XT          //              compile,
  34+ 7777                                                                      //          else
  35+ 7777 C3 63                        dw              BRANCH
  36+ 7779 06 00                        dw              Interpret_Endif_2 - $
  37+ 777B              Interpret_Else_2:
  38+ 777B B8 63 C2 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 777F              Interpret_Endif_2:                                      //          endif
  40+ 777F                                                                      //      else
  41+ 777F C3 63                        dw          BRANCH
  42+ 7781 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7783              Interpret_Else_1:
  44+ 7783 22 6E 1D 75                  dw              HERE, NUMBER            //          here number
  45+ 7787 94 6D C0 6A                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 778B 90 69
  46+ 778D                                                                      //          if
  47+ 778D D8 63                        dw              ZBRANCH
  48+ 778F 08 00                        dw              Interpret_Else_3 - $
  49+ 7791              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7791              //                                                      //              if
  51+ 7791              //              dw                  ZBRANCH
  52+ 7791              //              dw                  Interpret_Endif_4 - $
  53+ 7791              //              dw                      ONE, ZERO       //                  1 0
  54+ 7791              //              dw                      TWO_DROP        //                  2drop
  55+ 7791              //Interpret_Endif_4:                                      //              endif
  56+ 7791 B8 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 7793                                                                      //          else
  58+ 7793 C3 63                        dw              BRANCH
  59+ 7795 06 00                        dw              Interpret_Endif_3 - $
  60+ 7797              Interpret_Else_3:
  61+ 7797 12 6A                        dw                  DROP                //              drop
  62+ 7799 9A 76                        dw                  LITERAL             //              [compile]  literal
  63+ 779B              Interpret_Endif_3:                                      //          endif
  64+ 779B              Interpret_Endif_1:                                      //      endif
  65+ 779B 25 77                        dw          QSTACK                      //      ?stack
  66+ 779D DF 66                        dw          QTERMINAL                   //      ?terminal
  67+ 779F                                                                      //      if
  68+ 779F D8 63                        dw          ZBRANCH
  69+ 77A1 04 00                        dw          Interpret_Endif_5 - $
  70+ 77A3 8D 75                        dw              CABORT                  //          (abort)
  71+ 77A5              Interpret_Endif_5:                                      //      endif
  72+ 77A5 C3 63                        dw      BRANCH
  73+ 77A7 BE FF                        dw      Interpret_Begin - $
  74+ 77A9 D0 68                        dw      EXIT                            // ;
  75+ 77AB
  76+ 77AB              //  ______________________________________________________________________
  77+ 77AB              //
  78+ 77AB              // vocabulary   -- cccc     ( compile time )
  79+ 77AB              // Defining word used in the form   VOCABULARY cccc
  80+ 77AB              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77AB              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77AB              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77AB              // so new definitions can be inserted in that vocabulary.
  84+ 77AB                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77AB             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77AB             >
  84+ 77AB             >                // dummy db directives used to calculate length of namec
  84+ 77AB 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77AF 42 55 4C 41 >
  84+ 77B3 52 59       >
  84+ 77B5             >len_NFA         defl    $ - temp_NFA
  84+ 77B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77AB             >
  84+ 77AB 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77AC 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77B0 42 55 4C 41 >
  84+ 77B4 52 59       >
  84+ 77B6             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77B5 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77B6             >
  84+ 77B6 56 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77B8             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77B8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77BB             >
  84+ 77BB             >
  84+ 77BB             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77BB             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77BB             >
  84+ 77BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77BB
  86+ 77BB 79 71                        dw      CBUILDS
  87+ 77BD
  88+ 77BD A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77C1 40 6E
  89+ 77C3 73 6D C0 6A                  dw      CURRENT, FETCH          // current @
  90+ 77C7 BD 69 40 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77CB 22 6E                        dw      HERE                    // here
  92+ 77CD F4 6C C0 6A                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77D1 40 6E
  93+ 77D3 F4 6C CB 6A                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77D7
  95+ 77D7 8A 71                        dw      DOES_TO                 // does>
  96+ 77D9              Vocabulary_Does:
  97+ 77D9 B2 69                        dw      CELL_PLUS               // cell+
  98+ 77DB 65 6D CB 6A                  dw      CONTEXT, STORE          // context !
  99+ 77DF D0 68                        dw      EXIT                    // ;
 100+ 77E1
 101+ 77E1              //  ______________________________________________________________________
 102+ 77E1              //
 103+ 77E1              // forth        --
 104+ 77E1              // Name of the first vocabulary.
 105+ 77E1              // It makes FORTH the CONTEXT vocabulary.
 106+ 77E1              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77E1              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77E1              // of a colon definition to be able to select the vocabulary.
 109+ 77E1
 110+ 77E1                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77E1             >
 110+ 77E1             >                // dummy db directives used to calculate length of namec
 110+ 77E1 46 4F 52 54 >                db      "FORTH"
 110+ 77E5 48          >
 110+ 77E6             >len_NFA         defl    $ - temp_NFA
 110+ 77E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77E1             >
 110+ 77E1 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77E2 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77E6 48          >
 110+ 77E7             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77E6 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77E7             >
 110+ 77E7 AB 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77E9             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77E9 CD 97 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77EC             >
 110+ 77EC             >
 110+ 77EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77EC             >
 110+ 77EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77EC D9 77                        dw      Vocabulary_Does
 112+ 77EE 81 A0                        db      $81, $A0
 113+ 77F0              Forth_Latest_Ptr:
 114+ 77F0 8E 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 77F2              Voclink_Ptr:
 116+ 77F2 00 00                        dw      0
 117+ 77F4              // Any new vocabulary is structured as follow:
 118+ 77F4              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 77F4              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 77F4              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 77F4              //       at creations it points to the null-word of its parent vocabulary
 122+ 77F4              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 77F4              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 77F4              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 77F4              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 77F4              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 77F4              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 77F4
 129+ 77F4              //  ______________________________________________________________________
 130+ 77F4              //
 131+ 77F4              // definitions  --
 132+ 77F4              // Used in the form  cccc DEFINITIONS
 133+ 77F4              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 77F4              // vocabulary cccc.
 135+ 77F4                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 77F4             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 77F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 77F4             >
 135+ 77F4             >                // dummy db directives used to calculate length of namec
 135+ 77F4 44 45 46 49 >                db      "DEFINITIONS"
 135+ 77F8 4E 49 54 49 >
 135+ 77FC 4F 4E 53    >
 135+ 77FF             >len_NFA         defl    $ - temp_NFA
 135+ 77FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 77F4             >
 135+ 77F4 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 77F5 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 77F9 4E 49 54 49 >
 135+ 77FD 4F 4E 53    >
 135+ 7800             >                org     $-1                 // alter last byte of Name just above to set
 135+ 77FF D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7800             >
 135+ 7800 E1 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 7802             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7802 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7805             >
 135+ 7805             >
 135+ 7805             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7805             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7805             >
 135+ 7805             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7805 65 6D C0 6A                  dw      CONTEXT, FETCH          // context @
 137+ 7809 73 6D CB 6A                  dw      CURRENT, STORE          // current !
 138+ 780D D0 68                        dw      EXIT                    // ;
 139+ 780F
 140+ 780F              //  ______________________________________________________________________
 141+ 780F              //
 142+ 780F              // (            -- cccc )
 143+ 780F              // the following text is interpreted as a comment until a closing )
 144+ 780F                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 780F             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 780F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 780F             >
 144+ 780F             >                // dummy db directives used to calculate length of namec
 144+ 780F 28          >                db      "("
 144+ 7810             >len_NFA         defl    $ - temp_NFA
 144+ 7810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 780F             >
 144+ 780F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7810 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7811             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7810 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7811             >
 144+ 7811 F4 77       >                dw      last_NFA            // Link to previous definition Name
 144+ 7813             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7813 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7816             >
 144+ 7816             >
 144+ 7816             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7816             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7816             >
 144+ 7816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7816 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 781A A8 73 12 6A                  dw      WORD, DROP              // word drop
 147+ 781E D0 68                        dw      EXIT                    // ;
 148+ 7820
 149+ 7820              //  ______________________________________________________________________
 150+ 7820              //
 151+ 7820              // quit         --
 152+ 7820              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7820                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7820             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7820             >
 153+ 7820             >                // dummy db directives used to calculate length of namec
 153+ 7820 51 55 49 54 >                db      "QUIT"
 153+ 7824             >len_NFA         defl    $ - temp_NFA
 153+ 7824             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7820             >
 153+ 7820 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7821 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7825             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7824 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7825             >
 153+ 7825 0F 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7827             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7827 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 782A             >
 153+ 782A             >
 153+ 782A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 782A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 782A             >
 153+ 782A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 782A
 155+ 782A F5 6D C0 6A                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 782E 78 67 12 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7832 15 6C F5 6D                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7836 CB 6A
 158+ 7838 15 6C 2C 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 783C CB 6A
 159+ 783E C0 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7840                                                              // begin
 161+ 7840              Quit_Begin:
 162+ 7840 AC 6C C0 6A                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7844 C3 68
 163+ 7846 C5 67                        dw      CR                      //      cr
 164+ 7848 24 73                        dw      QUERY                   //      query
 165+ 784A              Next_Breakpoint_1:
 166+ 784A 62 77                        dw      INTERPRET               //      interpret
 167+ 784C 7F 6D C0 6A                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7850 2D 69
 168+ 7852                                                              //      if
 169+ 7852 D8 63                        dw      ZBRANCH
 170+ 7854 07 00                        dw      Quit_Endif - $
 171+ 7856 F8 73                        dw          C_DOT_QUOTE
 172+ 7858 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 785B              Quit_Endif:                                     //      else
 174+ 785B                                                              // again
 175+ 785B C3 63                        dw      BRANCH
 176+ 785D E3 FF                        dw      Quit_Begin - $
 177+ 785F D0 68                        dw      EXIT                    // ;
 178+ 7861
 179+ 7861              //  ______________________________________________________________________
 180+ 7861              //
 181+ 7861              // abort        --
 182+ 7861                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7861             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7861             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7861             >
 182+ 7861             >                // dummy db directives used to calculate length of namec
 182+ 7861 41 42 4F 52 >                db      "ABORT"
 182+ 7865 54          >
 182+ 7866             >len_NFA         defl    $ - temp_NFA
 182+ 7866             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7861             >
 182+ 7861 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7862 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7866 54          >
 182+ 7867             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7866 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7867             >
 182+ 7867 20 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7869             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7869 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 786C             >
 182+ 786C             >
 182+ 786C             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 786C             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 786C             >
 182+ 786C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 786C A3 6C C0 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7870 AD 68
 184+ 7872 28 71                        dw      DECIMAL                 // decimal
 185+ 7874 E9 77                        dw      FORTH                   // [compile] forth
 186+ 7876 02 78                        dw      DEFINITIONS             // definitions
 187+ 7878              Autoexec_Ptr:
 188+ 7878 C2 6B                        dw      NOOP                    // autoexec, patched to noop
 189+ 787A 27 78                        dw      QUIT                    // quit
 190+ 787C D0 68                        dw      EXIT                    // ;
 191+ 787E
 192+ 787E              //  ______________________________________________________________________
 193+ 787E              //
 194+ 787E              // warm         --
 195+ 787E                              Colon_Def WARM, "WARM", is_normal
 195+ 787E             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 787E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 787E             >
 195+ 787E             >                // dummy db directives used to calculate length of namec
 195+ 787E 57 41 52 4D >                db      "WARM"
 195+ 7882             >len_NFA         defl    $ - temp_NFA
 195+ 7882             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 787E             >
 195+ 787E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 787F 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 7883             >                org     $-1                 // alter last byte of Name just above to set
 195+ 7882 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 7883             >
 195+ 7883 61 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 7885             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7885 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7888             >
 195+ 7888             >
 195+ 7888             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7888             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7888             >
 195+ 7888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7888 51 7C                        dw      BLK_INIT                // blk-init
 197+ 788A 46 84                        dw      SPLASH                  // splash
 198+ 788C A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7890 15 6F
 199+ 7892 69 78                        dw      ABORT                   // abort
 200+ 7894 D0 68                        dw      EXIT                    // exit
 201+ 7896
 202+ 7896              //  ______________________________________________________________________
 203+ 7896              //
 204+ 7896              // cold         --
 205+ 7896                              Colon_Def COLD, "COLD", is_normal
 205+ 7896             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 7896             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 7896             >
 205+ 7896             >                // dummy db directives used to calculate length of namec
 205+ 7896 43 4F 4C 44 >                db      "COLD"
 205+ 789A             >len_NFA         defl    $ - temp_NFA
 205+ 789A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 7896             >
 205+ 7896 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 7897 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 789B             >                org     $-1                 // alter last byte of Name just above to set
 205+ 789A C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 789B             >
 205+ 789B 7E 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 789D             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 789D CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78A0             >
 205+ 78A0             >
 205+ 78A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78A0             >
 205+ 78A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78A0 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78A4 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78A8 C0 6A                        dw      FETCH                   // @
 209+ 78AA A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78AE 6B 69
 210+ 78B0 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78B4 D2 67                        dw      CMOVE
 212+ 78B6 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78BA C0 6A                        dw      FETCH                   // @
 214+ 78BC A5 63 F0 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78C0 CB 6A                        dw      STORE                   // !
 216+ 78C2 15 6C 22 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78C6 CB 6A
 217+ 78C8 00 6D C0 6A                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78CC 3F 6A
 218+ 78CE C5 6D CB 6A                  dw      USE, STORE              // use !
 219+ 78D2 D0 6D CB 6A                  dw      PREV, STORE             // prev !
 220+ 78D6 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78DA E5 6D CB 6A
 221+ 78DE              //              dw      LIT, 8
 222+ 78DE              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78DE 27 6C 17 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78E2 CB 6A
 224+ 78E4 85 78        Warm_Start:     dw      WARM
 225+ 78E6 9D 78        Cold_Start:     dw      COLD
 226+ 78E8 D0 68                        dw      EXIT
 227+ 78EA
 228+ 78EA              //  ______________________________________________________________________
 229+ 78EA              WarmRoutine:
 230+ 78EA              ColdRoutine:
 231+ 78EA DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78EE D9                           exx
 233+ 78EF E5                           push    hl
 234+ 78F0 D9                           exx
 235+ 78F1
 236+ 78F1 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 78F5 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 78F9              //              nop
 239+ 78F9 2A 7A 63                     ld      hl, (R0_origin)
 240+ 78FC              //              nop
 241+ 78FC                              ldrphl
 241+ 78FC 22 96 63    >                ld      (RP_Pointer),hl
 242+ 78FF 01 E4 78                     ld      bc, Warm_Start
 243+ 7902 38 02                        jr      c, Warm_Skip
 244+ 7904 03                           inc     bc
 245+ 7905 03                           inc     bc
 246+ 7906              Warm_Skip:
 247+ 7906                              next
 247+ 7906 DD E9       >                jp      (ix)
 248+ 7908
 249+ 7908              //  ______________________________________________________________________
 250+ 7908              //
 251+ 7908              // basic        --
 252+ 7908                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7908             >
 252+ 7908             >                // dummy db directives used to calculate length of namec
 252+ 7908 42 41 53 49 >                db      "BASIC"
 252+ 790C 43          >
 252+ 790D             >len_NFA         defl    $ - temp_NFA
 252+ 790D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7908             >
 252+ 7908 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7909 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 790D 43          >
 252+ 790E             >                org     $-1                 // alter last byte of Name just above to set
 252+ 790D C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 790E             >
 252+ 790E 96 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7910             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7910 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7910 ~           >
 252+ 7910 ~           >
 252+ 7910             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7910             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7910             >
 252+ 7910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7910 C1                           pop     bc
 254+ 7911 21 00 00                     ld      hl, 0
 255+ 7914 39                           add     hl, sp
 256+ 7915 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7919              //              nop
 258+ 7919 22 6E 63                     ld      (SP_Basic),hl
 259+ 791C D9                           exx
 260+ 791D E1                           pop     hl
 261+ 791E D9                           exx
 262+ 791F C9                           ret     // to Basic
 263+ 7920
 264+ 7920              //  ______________________________________________________________________
 265+ 7920              //
 266+ 7920              // +-           n1 n2 -- n3
 267+ 7920              // leaves n1 with the sign of n2 as n3.
 268+ 7920                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7920             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7920             >
 268+ 7920             >                // dummy db directives used to calculate length of namec
 268+ 7920 2B 2D       >                db      "+-"
 268+ 7922             >len_NFA         defl    $ - temp_NFA
 268+ 7922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7920             >
 268+ 7920 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7921 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7923             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7922 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7923             >
 268+ 7923 08 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7925             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7925 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7928             >
 268+ 7928             >
 268+ 7928             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7928             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7928             >
 268+ 7928             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7928 47 69                        dw      ZLESS                   // 0<
 270+ 792A                                                              // if
 271+ 792A D8 63                        dw      ZBRANCH
 272+ 792C 04 00                        dw      Plus_Minus_Endif - $
 273+ 792E D4 69                        dw          MINUS               //      minus
 274+ 7930              Plus_Minus_Endif:                               // endif
 275+ 7930 D0 68                        dw      EXIT                    // ;
 276+ 7932
 277+ 7932              //  ______________________________________________________________________
 278+ 7932              //
 279+ 7932              // d+-          d1 n -- d2
 280+ 7932              // leaves d1 with the sign of n as d2.
 281+ 7932                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7932             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7932             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7932             >
 281+ 7932             >                // dummy db directives used to calculate length of namec
 281+ 7932 44 2B 2D    >                db      "D+-"
 281+ 7935             >len_NFA         defl    $ - temp_NFA
 281+ 7935             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7932             >
 281+ 7932 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7933 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7936             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7935 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7936             >
 281+ 7936 20 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7938             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7938 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 793B             >
 281+ 793B             >
 281+ 793B             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 793B             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 793B             >
 281+ 793B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 793B 47 69                        dw      ZLESS                   // 0<
 283+ 793D                                                              // if
 284+ 793D D8 63                        dw      ZBRANCH
 285+ 793F 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7941 E8 69                        dw          DMINUS              //      dminus
 287+ 7943              DPlus_Minus_Endif:                              // endif
 288+ 7943 D0 68                        dw      EXIT                    // ;
 289+ 7945
 290+ 7945              //  ______________________________________________________________________
 291+ 7945              //
 292+ 7945              // abs          n1 -- n2
 293+ 7945                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7945             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7945             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7945             >
 293+ 7945             >                // dummy db directives used to calculate length of namec
 293+ 7945 41 42 53    >                db      "ABS"
 293+ 7948             >len_NFA         defl    $ - temp_NFA
 293+ 7948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7945             >
 293+ 7945 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7946 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7949             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7948 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7949             >
 293+ 7949 32 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 794B             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 794B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 794E             >
 293+ 794E             >
 293+ 794E             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 794E             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 794E             >
 293+ 794E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 794E 3F 6A                        dw      DUP                     // dup
 295+ 7950 25 79                        dw      PLUS_MINUS              // +-
 296+ 7952 D0 68                        dw      EXIT                    // ;
 297+ 7954
 298+ 7954              //  ______________________________________________________________________
 299+ 7954              //
 300+ 7954              // dabs         d1 -- d2
 301+ 7954                              Colon_Def DABS, "DABS", is_normal
 301+ 7954             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7954             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7954             >
 301+ 7954             >                // dummy db directives used to calculate length of namec
 301+ 7954 44 41 42 53 >                db      "DABS"
 301+ 7958             >len_NFA         defl    $ - temp_NFA
 301+ 7958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7954             >
 301+ 7954 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7955 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7959             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7958 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7959             >
 301+ 7959 45 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 795B             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 795B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 795E             >
 301+ 795E             >
 301+ 795E             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 795E             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 795E             >
 301+ 795E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 795E 3F 6A                        dw      DUP                     // dup
 303+ 7960 38 79                        dw      DPLUS_MINUS             // d+-
 304+ 7962 D0 68                        dw      EXIT                    // ;
 305+ 7964
 306+ 7964              //  ______________________________________________________________________
 307+ 7964              //
 308+ 7964              // m*           n1 n2 -- d
 309+ 7964              // multiply two integer giving a double
 310+ 7964                              Colon_Def MMUL, "M*", is_normal
 310+ 7964             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7964             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7964             >
 310+ 7964             >                // dummy db directives used to calculate length of namec
 310+ 7964 4D 2A       >                db      "M*"
 310+ 7966             >len_NFA         defl    $ - temp_NFA
 310+ 7966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7964             >
 310+ 7964 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7965 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7967             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7966 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7967             >
 310+ 7967 54 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7969             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7969 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 796C             >
 310+ 796C             >
 310+ 796C             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 796C             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 796C             >
 310+ 796C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 796C 94 6A 8F 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7970 FA 68
 312+ 7972 4B 79 34 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 7976 4B 79 03 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 797A 0C 69 38 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 797E D0 68                        dw      EXIT                    // ;
 316+ 7980
 317+ 7980              //  ______________________________________________________________________
 318+ 7980              //
 319+ 7980              // m/mod        d n -- q r
 320+ 7980              // multiply two integer giving a double
 321+ 7980                              Colon_Def MDIVM, "M/MOD", is_normal
 321+ 7980             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 321+ 7980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7980             >
 321+ 7980             >                // dummy db directives used to calculate length of namec
 321+ 7980 4D 2F 4D 4F >                db      "M/MOD"
 321+ 7984 44          >
 321+ 7985             >len_NFA         defl    $ - temp_NFA
 321+ 7985             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7980             >
 321+ 7980 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 7981 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 321+ 7985 44          >
 321+ 7986             >                org     $-1                 // alter last byte of Name just above to set
 321+ 7985 C4          >                db      {b $} | END_BIT     // msb as name end
 321+ 7986             >
 321+ 7986 64 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 7988             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 7988 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 798B             >
 321+ 798B             >
 321+ 798B             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 798B             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 798B             >
 321+ 798B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 798B 04 6A FA 68                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 798F FA 68
 323+ 7991 5B 79 1E 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 7995 4B 79
 324+ 7997 32 68                        dw      UMDIVMOD                // um/mod
 325+ 7999 0C 69                        dw      R_TO                    // r>
 326+ 799B 1E 69 8F 68                  dw      R_OP, XOR_OP            // r xor
 327+ 799F 25 79 34 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 79A3 0C 69                        dw      R_TO                    // r>
 329+ 79A5 25 79 34 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 79A9 D0 68                        dw      EXIT                    // ;
 331+ 79AB
 332+ 79AB              //  ______________________________________________________________________
 333+ 79AB              //
 334+ 79AB              // m/           d n -- q
 335+ 79AB              // multiply two integer giving a double
 336+ 79AB                              Colon_Def MDIV, "M/", is_normal
 336+ 79AB             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 336+ 79AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 79AB             >
 336+ 79AB             >                // dummy db directives used to calculate length of namec
 336+ 79AB 4D 2F       >                db      "M/"
 336+ 79AD             >len_NFA         defl    $ - temp_NFA
 336+ 79AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 79AB             >
 336+ 79AB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 79AC 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 336+ 79AE             >                org     $-1                 // alter last byte of Name just above to set
 336+ 79AD AF          >                db      {b $} | END_BIT     // msb as name end
 336+ 79AE             >
 336+ 79AE 80 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 79B0             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 79B0 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 79B3             >
 336+ 79B3             >
 336+ 79B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 79B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 79B3             >
 336+ 79B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 79B3 88 79 1B 6A                  dw      MDIVM, NIP
 338+ 79B7 D0 68                        dw      EXIT                    // ;
 339+ 79B9
 340+ 79B9              //  ______________________________________________________________________
 341+ 79B9              //
 342+ 79B9              // *            n1 n2 -- n3
 343+ 79B9              // multiply two integer
 344+ 79B9                              Colon_Def MUL, "*", is_normal
 344+ 79B9             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 344+ 79B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 79B9             >
 344+ 79B9             >                // dummy db directives used to calculate length of namec
 344+ 79B9 2A          >                db      "*"
 344+ 79BA             >len_NFA         defl    $ - temp_NFA
 344+ 79BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 79B9             >
 344+ 79B9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 79BA 2A          >                db      "*"               // name string in 7-bit ascii, but
 344+ 79BB             >                org     $-1                 // alter last byte of Name just above to set
 344+ 79BA AA          >                db      {b $} | END_BIT     // msb as name end
 344+ 79BB             >
 344+ 79BB AB 79       >                dw      last_NFA            // Link to previous definition Name
 344+ 79BD             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 79BD CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 79C0             >
 344+ 79C0             >
 344+ 79C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 79C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 79C0             >
 344+ 79C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 79C0 69 79 12 6A                  dw      MMUL, DROP              // m* drop
 346+ 79C4 D0 68                        dw      EXIT                    // ;
 347+ 79C6
 348+ 79C6              //  ______________________________________________________________________
 349+ 79C6              //
 350+ 79C6              // /mod         n1 n2 -- n3 n4
 351+ 79C6              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 352+ 79C6              // The remainder has the sign of n1
 353+ 79C6                              Colon_Def DIVMOD, "/MOD", is_normal
 353+ 79C6             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 353+ 79C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 79C6             >
 353+ 79C6             >                // dummy db directives used to calculate length of namec
 353+ 79C6 2F 4D 4F 44 >                db      "/MOD"
 353+ 79CA             >len_NFA         defl    $ - temp_NFA
 353+ 79CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 79C6             >
 353+ 79C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 79C7 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 353+ 79CB             >                org     $-1                 // alter last byte of Name just above to set
 353+ 79CA C4          >                db      {b $} | END_BIT     // msb as name end
 353+ 79CB             >
 353+ 79CB B9 79       >                dw      last_NFA            // Link to previous definition Name
 353+ 79CD             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 79CD CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 79D0             >
 353+ 79D0             >
 353+ 79D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 79D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 79D0             >
 353+ 79D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 79D0 FA 68 65 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 354+ 79D4 0C 69
 355+ 79D6 88 79                        dw      MDIVM                   // m/mod
 356+ 79D8 D0 68                        dw      EXIT                    // ;
 357+ 79DA
 358+ 79DA              //  ______________________________________________________________________
 359+ 79DA              //
 360+ 79DA              // /            n1 n2 -- n3
 361+ 79DA              // division
 362+ 79DA                              Colon_Def DIV, "/", is_normal
 362+ 79DA             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 362+ 79DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 79DA             >
 362+ 79DA             >                // dummy db directives used to calculate length of namec
 362+ 79DA 2F          >                db      "/"
 362+ 79DB             >len_NFA         defl    $ - temp_NFA
 362+ 79DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 79DA             >
 362+ 79DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 79DB 2F          >                db      "/"               // name string in 7-bit ascii, but
 362+ 79DC             >                org     $-1                 // alter last byte of Name just above to set
 362+ 79DB AF          >                db      {b $} | END_BIT     // msb as name end
 362+ 79DC             >
 362+ 79DC C6 79       >                dw      last_NFA            // Link to previous definition Name
 362+ 79DE             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 79DE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 79E1             >
 362+ 79E1             >
 362+ 79E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 79E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 79E1             >
 362+ 79E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 79E1 CD 79 1B 6A                  dw      DIVMOD, NIP             // /mod nip
 364+ 79E5 D0 68                        dw      EXIT                    // ;
 365+ 79E7
 366+ 79E7              //  ______________________________________________________________________
 367+ 79E7              //
 368+ 79E7              // mod          n1 n2 -- n3
 369+ 79E7                              Colon_Def MOD, "MOD", is_normal
 369+ 79E7             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 369+ 79E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 79E7             >
 369+ 79E7             >                // dummy db directives used to calculate length of namec
 369+ 79E7 4D 4F 44    >                db      "MOD"
 369+ 79EA             >len_NFA         defl    $ - temp_NFA
 369+ 79EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 79E7             >
 369+ 79E7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 79E8 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 369+ 79EB             >                org     $-1                 // alter last byte of Name just above to set
 369+ 79EA C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 79EB             >
 369+ 79EB DA 79       >                dw      last_NFA            // Link to previous definition Name
 369+ 79ED             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 79ED CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 79F0             >
 369+ 79F0             >
 369+ 79F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 79F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 79F0             >
 369+ 79F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 79F0 CD 79 12 6A                  dw      DIVMOD, DROP            // /mod drop
 371+ 79F4 D0 68                        dw      EXIT                    // ;
 372+ 79F6
 373+ 79F6              //  ______________________________________________________________________
 374+ 79F6              //
 375+ 79F6              // */mod        n1 n2 n3 -- n4 n5
 376+ 79F6              // leaves the quotient n5 and the remainder n4 of the operation
 377+ 79F6              // (n1 * n2) / n3. The intermediate passage through a double number
 378+ 79F6              // avoids loss of precision
 379+ 79F6                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 379+ 79F6             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 379+ 79F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 79F6             >
 379+ 79F6             >                // dummy db directives used to calculate length of namec
 379+ 79F6 2A 2F 4D 4F >                db      "*/MOD"
 379+ 79FA 44          >
 379+ 79FB             >len_NFA         defl    $ - temp_NFA
 379+ 79FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 79F6             >
 379+ 79F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 79F7 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 379+ 79FB 44          >
 379+ 79FC             >                org     $-1                 // alter last byte of Name just above to set
 379+ 79FB C4          >                db      {b $} | END_BIT     // msb as name end
 379+ 79FC             >
 379+ 79FC E7 79       >                dw      last_NFA            // Link to previous definition Name
 379+ 79FE             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 79FE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 7A01             >
 379+ 7A01             >
 379+ 7A01             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 7A01             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 7A01             >
 379+ 7A01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 7A01 FA 68 69 79                  dw      TO_R, MMUL              // >r  m*
 381+ 7A05 0C 69 88 79                  dw      R_TO, MDIVM             // r>  m/mod
 382+ 7A09 D0 68                        dw      EXIT                    // ;
 383+ 7A0B
 384+ 7A0B              //  ______________________________________________________________________
 385+ 7A0B              //
 386+ 7A0B              // */          n1 n2 n3 -- n4
 387+ 7A0B              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 388+ 7A0B                              Colon_Def MUL_DIV, "*/", is_normal
 388+ 7A0B             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 388+ 7A0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 7A0B             >
 388+ 7A0B             >                // dummy db directives used to calculate length of namec
 388+ 7A0B 2A 2F       >                db      "*/"
 388+ 7A0D             >len_NFA         defl    $ - temp_NFA
 388+ 7A0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 7A0B             >
 388+ 7A0B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 7A0C 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 388+ 7A0E             >                org     $-1                 // alter last byte of Name just above to set
 388+ 7A0D AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 7A0E             >
 388+ 7A0E F6 79       >                dw      last_NFA            // Link to previous definition Name
 388+ 7A10             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 7A10 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 7A13             >
 388+ 7A13             >
 388+ 7A13             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 7A13             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 7A13             >
 388+ 7A13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 7A13 FE 79                        dw     MUL_DIV_MOD              // */mod
 390+ 7A15 1B 6A                        dw     NIP                      // nip
 391+ 7A17 D0 68                        dw     EXIT                     // ;
 392+ 7A19
 393+ 7A19
 394+ 7A19              //  ______________________________________________________________________
 395+ 7A19              //
 396+ 7A19              // m/mod        ud1 u2 -- u3 ud4
 397+ 7A19              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 398+ 7A19              // All terms are unsigned.
 399+ 7A19              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 400+ 7A19              //              dw      TO_R                    // >r           ( ud1 )
 401+ 7A19              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 402+ 7A19              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 403+ 7A19              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 404+ 7A19              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 405+ 7A19              //              dw      EXIT                    // ;
 406+ 7A19
 407+ 7A19              //  ______________________________________________________________________
 408+ 7A19              //
 409+ 7A19              // (line)       n1 n2 -- a b
 410+ 7A19              // sends the line n1 of block n2 to the disk buffer.
 411+ 7A19              // it returns the address a and ca counter b = C/L meaning a whole line.
 412+ 7A19                              Colon_Def CLINE, "(LINE)", is_normal
 412+ 7A19             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 412+ 7A19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7A19             >
 412+ 7A19             >                // dummy db directives used to calculate length of namec
 412+ 7A19 28 4C 49 4E >                db      "(LINE)"
 412+ 7A1D 45 29       >
 412+ 7A1F             >len_NFA         defl    $ - temp_NFA
 412+ 7A1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7A19             >
 412+ 7A19 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7A1A 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 412+ 7A1E 45 29       >
 412+ 7A20             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7A1F A9          >                db      {b $} | END_BIT     // msb as name end
 412+ 7A20             >
 412+ 7A20 0B 7A       >                dw      last_NFA            // Link to previous definition Name
 412+ 7A22             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7A22 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7A25             >
 412+ 7A25             >
 412+ 7A25             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7A25             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7A25             >
 412+ 7A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7A25 FA 68                        dw      TO_R                    // >r
 414+ 7A27 C2 6B                        dw      NOOP                    // noop
 415+ 7A29 4F 6C                        dw      CL                      // c/l
 416+ 7A2B 5C 6C FE 79                  dw      BBUF, MUL_DIV_MOD       // */mod
 417+ 7A2F 0C 69                        dw      R_TO                    // r>
 418+ 7A31 69 6C BD 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 418+ 7A35 6B 69
 419+ 7A37 70 7D                        dw      BLOCK                   // block   ( forward )
 420+ 7A39 6B 69                        dw      PLUS                    // +
 421+ 7A3B C2 6B                        dw      NOOP                    // noop
 422+ 7A3D 4F 6C                        dw      CL                      // c/l
 423+ 7A3F D0 68                        dw      EXIT                    // ;
 424+ 7A41
 425+ 7A41              //  ______________________________________________________________________
 426+ 7A41              //
 427+ 7A41              // .line        n1 n2 --
 428+ 7A41              // Sends to output line  n1  of screen n2.
 429+ 7A41                              Colon_Def DOT_LINE, ".LINE", is_normal
 429+ 7A41             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 429+ 7A41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7A41             >
 429+ 7A41             >                // dummy db directives used to calculate length of namec
 429+ 7A41 2E 4C 49 4E >                db      ".LINE"
 429+ 7A45 45          >
 429+ 7A46             >len_NFA         defl    $ - temp_NFA
 429+ 7A46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7A41             >
 429+ 7A41 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7A42 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 429+ 7A46 45          >
 429+ 7A47             >                org     $-1                 // alter last byte of Name just above to set
 429+ 7A46 C5          >                db      {b $} | END_BIT     // msb as name end
 429+ 7A47             >
 429+ 7A47 19 7A       >                dw      last_NFA            // Link to previous definition Name
 429+ 7A49             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7A49 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7A4C             >
 429+ 7A4C             >
 429+ 7A4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7A4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7A4C             >
 429+ 7A4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7A4C 22 7A 3F 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 430+ 7A50 D9 71
 431+ 7A52 D0 68                        dw      EXIT                    // ;
 432+ 7A54
 433+ 7A54              //  ______________________________________________________________________
 434+ 7A54              //
 435+ 7A54              // message       n1 n2 --
 436+ 7A54              // prints error message to current channel.
 437+ 7A54              // if WARNING is 0, prints "MSG#n".
 438+ 7A54              // if WARNING is 1, prints line n of screen 4.
 439+ 7A54              // if WARNING is -1, see ERROR
 440+ 7A54              // value can be negative or beyond block 4.
 441+ 7A54                              Colon_Def MESSAGE, "MESSAGE", is_normal
 441+ 7A54             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 441+ 7A54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 7A54             >
 441+ 7A54             >                // dummy db directives used to calculate length of namec
 441+ 7A54 4D 45 53 53 >                db      "MESSAGE"
 441+ 7A58 41 47 45    >
 441+ 7A5B             >len_NFA         defl    $ - temp_NFA
 441+ 7A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 7A54             >
 441+ 7A54 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 7A55 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 441+ 7A59 41 47 45    >
 441+ 7A5C             >                org     $-1                 // alter last byte of Name just above to set
 441+ 7A5B C5          >                db      {b $} | END_BIT     // msb as name end
 441+ 7A5C             >
 441+ 7A5C 41 7A       >                dw      last_NFA            // Link to previous definition Name
 441+ 7A5E             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 7A5E CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 7A61             >
 441+ 7A61             >
 441+ 7A61             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 7A61             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 7A61             >
 441+ 7A61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 7A61 D0 6C C0 6A                  dw      WARNING, FETCH          // warning @
 443+ 7A65                                                              // if
 444+ 7A65 D8 63                        dw      ZBRANCH
 445+ 7A67 18 00                        dw      Message_Else - $
 446+ 7A69 A5 63 04 00                  dw          LIT, 4              //      4
 447+ 7A6D 57 6D C0 6A                  dw          OFFSET, FETCH       //      offset @
 448+ 7A71 69 6C DE 79                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 448+ 7A75 77 6E
 449+ 7A77 49 7A                        dw          DOT_LINE            //      .line
 450+ 7A79 32 6F                        dw          SPACE               //      space
 451+ 7A7B                                                              // else
 452+ 7A7B
 453+ 7A7B C3 63                        dw      BRANCH
 454+ 7A7D 0B 00                        dw      Message_ENdif - $
 455+ 7A7F              Message_Else:
 456+ 7A7F F8 73                        dw          C_DOT_QUOTE         //      .( msg#)
 457+ 7A81 04 6D 73 67                  db          4, "msg#"
 457+ 7A85 23
 458+ 7A86 38 83                        dw          DOT                 //      .  ( forward )
 459+ 7A88              Message_ENdif:                                  // endif
 460+ 7A88 D0 68                        dw      EXIT                    // ;
 461+ 7A8A
 462+ 7A8A
 463+ 7A8A              //  ______________________________________________________________________
 464+ 7A8A              //
 465+ 7A8A              // device
 466+ 7A8A                              Variable_Def DEVICE,   "DEVICE",   2
 466+ 7A8A             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 466+ 7A8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 7A8A             >
 466+ 7A8A             >                // dummy db directives used to calculate length of namec
 466+ 7A8A 44 45 56 49 >                db      "DEVICE"
 466+ 7A8E 43 45       >
 466+ 7A90             >len_NFA         defl    $ - temp_NFA
 466+ 7A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 7A8A             >
 466+ 7A8A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 7A8B 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 466+ 7A8F 43 45       >
 466+ 7A91             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7A90 C5          >                db      {b $} | END_BIT     // msb as name end
 466+ 7A91             >
 466+ 7A91 54 7A       >                dw      last_NFA            // Link to previous definition Name
 466+ 7A93             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7A93 CD F4 6B    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 466+ 7A96             >
 466+ 7A96             >
 466+ 7A96             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7A96             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7A96             >
 466+ 7A96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7A96 02 00       >                dw      2
 467+ 7A98
 468+ 7A98              //  ______________________________________________________________________
 469+ 7A98              //
 470+ 7A98              // inkey        -- c | 0
 471+ 7A98              // call ROM inkey$ routine, returns c or "zero".
 472+ 7A98
 473+ 7A98                              New_Def INKEY, "INKEY", is_code, is_normal
 473+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ 7A98             >
 473+ 7A98             >                // dummy db directives used to calculate length of namec
 473+ 7A98 49 4E 4B 45 >                db      "INKEY"
 473+ 7A9C 59          >
 473+ 7A9D             >len_NFA         defl    $ - temp_NFA
 473+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ 7A98             >
 473+ 7A98 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ 7A99 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 473+ 7A9D 59          >
 473+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 473+ 7A9D D9          >                db      {b $} | END_BIT     // msb as name end
 473+ 7A9E             >
 473+ 7A9E 8A 7A       >                dw      last_NFA            // Link to previous definition Name
 473+ 7AA0             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7AA0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 473+ 7AA0 ~           >
 473+ 7AA0 ~           >
 473+ 7AA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7AA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7AA0             >
 473+ 7AA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7AA0
 475+ 7AA0 C5                           push    bc
 476+ 7AA1 ED 73 92 63                  ld      (SP_Saved), sp
 477+ 7AA5 31 61 63                     ld      sp, Cold_origin - 5
 478+ 7AA8 DD E5                        push    ix
 479+ 7AAA CD E6 15                     call    $15E6                   // instead of 15E9
 480+ 7AAD DD E1                        pop     ix
 481+ 7AAF ED 7B 92 63                  ld      sp, (SP_Saved)
 482+ 7AB3 6F                           ld      l, a
 483+ 7AB4 26 00                        ld      h, 0
 484+ 7AB6 C1                           pop     bc
 485+ 7AB7                              psh1
 485+ 7AB7 E5          >                push    hl
 485+ 7AB8 DD E9       >                jp      (ix)
 486+ 7ABA
 487+ 7ABA              //  ______________________________________________________________________
 488+ 7ABA              //
 489+ 7ABA              // select      n --
 490+ 7ABA              // selects the given channel number
 491+ 7ABA
 492+ 7ABA                              New_Def SELECT, "SELECT", is_code, is_normal
 492+ 7ABA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7ABA             >
 492+ 7ABA             >                // dummy db directives used to calculate length of namec
 492+ 7ABA 53 45 4C 45 >                db      "SELECT"
 492+ 7ABE 43 54       >
 492+ 7AC0             >len_NFA         defl    $ - temp_NFA
 492+ 7AC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7ABA             >
 492+ 7ABA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7ABB 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 492+ 7ABF 43 54       >
 492+ 7AC1             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7AC0 D4          >                db      {b $} | END_BIT     // msb as name end
 492+ 7AC1             >
 492+ 7AC1 98 7A       >                dw      last_NFA            // Link to previous definition Name
 492+ 7AC3             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7AC3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 492+ 7AC3 ~           >
 492+ 7AC3 ~           >
 492+ 7AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7AC3             >
 492+ 7AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7AC3 E1                           pop     hl
 494+ 7AC4 C5                           push    bc
 495+ 7AC5 7D                           ld      a, l
 496+ 7AC6 ED 73 92 63                  ld      (SP_Saved), sp
 497+ 7ACA 31 61 63                     ld      sp, Cold_origin - 5
 498+ 7ACD DD E5                        push    ix
 499+ 7ACF CD 01 16                     call    $1601
 500+ 7AD2 DD E1                        pop     ix
 501+ 7AD4 ED 7B 92 63                  ld      sp, (SP_Saved)
 502+ 7AD8 C1                           pop     bc
 503+ 7AD9
 504+ 7AD9                              next
 504+ 7AD9 DD E9       >                jp      (ix)
 505+ 7ADB
 506+ 7ADB              //  ______________________________________________________________________
 507+ 7ADB
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 112  7ADB                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7ADB              //  ______________________________________________________________________
   2+ 7ADB              //
   3+ 7ADB              //  next-opt.asm
   4+ 7ADB              //
   5+ 7ADB              //  ZX Spectrum Next - peculiar definitions
   6+ 7ADB              //  ______________________________________________________________________
   7+ 7ADB
   8+ 7ADB              //  ______________________________________________________________________
   9+ 7ADB              //
  10+ 7ADB              // reg@         n -- b
  11+ 7ADB              // read Next REGister n giving byte b
  12+ 7ADB
  13+ 7ADB                              Colon_Def REG_FETCH, "REG@", is_normal
  13+ 7ADB             >                New_Def  REG_FETCH, "REG@", Enter_Ptr, is_normal ; ok
  13+ 7ADB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 7ADB             >
  13+ 7ADB             >                // dummy db directives used to calculate length of namec
  13+ 7ADB 52 45 47 40 >                db      "REG@"
  13+ 7ADF             >len_NFA         defl    $ - temp_NFA
  13+ 7ADF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 7ADB             >
  13+ 7ADB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 7ADC 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  13+ 7AE0             >                org     $-1                 // alter last byte of Name just above to set
  13+ 7ADF C0          >                db      {b $} | END_BIT     // msb as name end
  13+ 7AE0             >
  13+ 7AE0 BA 7A       >                dw      last_NFA            // Link to previous definition Name
  13+ 7AE2             >REG_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 7AE2 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 7AE5             >
  13+ 7AE5             >
  13+ 7AE5             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 7AE5             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 7AE5             >
  13+ 7AE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 7AE5 A5 63 3B 24                  dw      LIT, $243B
  15+ 7AE9 25 6B                        dw      PSTORE
  16+ 7AEB A5 63 3B 25                  dw      LIT, $253B
  17+ 7AEF 14 6B                        dw      PFETCH
  18+ 7AF1 D0 68                        dw      EXIT
  19+ 7AF3
  20+ 7AF3              //  ______________________________________________________________________
  21+ 7AF3              //
  22+ 7AF3              // reg!         b n --
  23+ 7AF3              // write value b to Next REGister n
  24+ 7AF3
  25+ 7AF3                              Colon_Def REG_STORE, "REG!", is_normal
  25+ 7AF3             >                New_Def  REG_STORE, "REG!", Enter_Ptr, is_normal ; ok
  25+ 7AF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  25+ 7AF3             >
  25+ 7AF3             >                // dummy db directives used to calculate length of namec
  25+ 7AF3 52 45 47 21 >                db      "REG!"
  25+ 7AF7             >len_NFA         defl    $ - temp_NFA
  25+ 7AF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  25+ 7AF3             >
  25+ 7AF3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  25+ 7AF4 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  25+ 7AF8             >                org     $-1                 // alter last byte of Name just above to set
  25+ 7AF7 A1          >                db      {b $} | END_BIT     // msb as name end
  25+ 7AF8             >
  25+ 7AF8 DB 7A       >                dw      last_NFA            // Link to previous definition Name
  25+ 7AFA             >REG_STORE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  25+ 7AFA CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  25+ 7AFD             >
  25+ 7AFD             >
  25+ 7AFD             >                endif           ; ok        // for other definitions it "points" the correct handler
  25+ 7AFD             >                // Use of "; ok" to suppress "warning[fwdref]"
  25+ 7AFD             >
  25+ 7AFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  26+ 7AFD A5 63 3B 24                  dw      LIT, $243B
  27+ 7B01 25 6B                        dw      PSTORE
  28+ 7B03 A5 63 3B 25                  dw      LIT, $253B
  29+ 7B07 25 6B                        dw      PSTORE
  30+ 7B09 D0 68                        dw      EXIT
  31+ 7B0B
  32+ 7B0B              //  ______________________________________________________________________
  33+ 7B0B              //
  34+ 7B0B              // mmu7@        -- n
  35+ 7B0B              // query current page in MMU7 8K-RAM : 0 and 223
  36+ 7B0B
  37+ 7B0B                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  37+ 7B0B             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  37+ 7B0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  37+ 7B0B             >
  37+ 7B0B             >                // dummy db directives used to calculate length of namec
  37+ 7B0B 4D 4D 55 37 >                db      "MMU7@"
  37+ 7B0F 40          >
  37+ 7B10             >len_NFA         defl    $ - temp_NFA
  37+ 7B10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  37+ 7B0B             >
  37+ 7B0B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  37+ 7B0C 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  37+ 7B10 40          >
  37+ 7B11             >                org     $-1                 // alter last byte of Name just above to set
  37+ 7B10 C0          >                db      {b $} | END_BIT     // msb as name end
  37+ 7B11             >
  37+ 7B11 F3 7A       >                dw      last_NFA            // Link to previous definition Name
  37+ 7B13             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  37+ 7B13 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  37+ 7B16             >
  37+ 7B16             >
  37+ 7B16             >                endif           ; ok        // for other definitions it "points" the correct handler
  37+ 7B16             >                // Use of "; ok" to suppress "warning[fwdref]"
  37+ 7B16             >
  37+ 7B16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  38+ 7B16 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  38+ 7B1A E2 7A
  39+ 7B1C D0 68                        dw      EXIT
  40+ 7B1E
  41+ 7B1E              //  ______________________________________________________________________
  42+ 7B1E              //
  43+ 7B1E              // mmu7!        n --
  44+ 7B1E              // set MMU7 8K-RAM page to n given between 0 and 223
  45+ 7B1E              // optimized version that uses NEXTREG n,A Z80n op-code.
  46+ 7B1E
  47+ 7B1E                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  47+ 7B1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  47+ 7B1E             >
  47+ 7B1E             >                // dummy db directives used to calculate length of namec
  47+ 7B1E 4D 4D 55 37 >                db      "MMU7!"
  47+ 7B22 21          >
  47+ 7B23             >len_NFA         defl    $ - temp_NFA
  47+ 7B23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  47+ 7B1E             >
  47+ 7B1E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  47+ 7B1F 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  47+ 7B23 21          >
  47+ 7B24             >                org     $-1                 // alter last byte of Name just above to set
  47+ 7B23 A1          >                db      {b $} | END_BIT     // msb as name end
  47+ 7B24             >
  47+ 7B24 0B 7B       >                dw      last_NFA            // Link to previous definition Name
  47+ 7B26             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  47+ 7B26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  47+ 7B26 ~           >
  47+ 7B26 ~           >
  47+ 7B26             >                endif           ; ok        // for other definitions it "points" the correct handler
  47+ 7B26             >                // Use of "; ok" to suppress "warning[fwdref]"
  47+ 7B26             >
  47+ 7B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  48+ 7B26 E1                           pop     hl
  49+ 7B27 7D                           ld      a, l
  50+ 7B28 ED 92 57                     nextreg 87, a
  51+ 7B2B
  52+ 7B2B                              next
  52+ 7B2B DD E9       >                jp      (ix)
  53+ 7B2D
  54+ 7B2D              //  ______________________________________________________________________
  55+ 7B2D              //
  56+ 7B2D              // >far         ha -- a n
  57+ 7B2D              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  58+ 7B2D              // take lower bits of H and L as an offset from E000h
  59+ 7B2D              // then return address  a  between E000h-FFFFh
  60+ 7B2D              // and page number n  between 64-71 (40h-47h)
  61+ 7B2D              // For example, in hex:
  62+ 7B2D              //   0000 >FAR  gives  40.E000
  63+ 7B2D              //   1FFF >FAR  gives  40.FFFF
  64+ 7B2D              //   2000 >FAR  gives  41.E000
  65+ 7B2D              //   3FFF >FAR  gives  41.FFFF
  66+ 7B2D              //   EFFF >FAR  gives  47.EFFF
  67+ 7B2D              //   FFFF >FAR  gives  47.FFFF
  68+ 7B2D                              New_Def TO_FAR, ">FAR", is_code, is_normal
  68+ 7B2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  68+ 7B2D             >
  68+ 7B2D             >                // dummy db directives used to calculate length of namec
  68+ 7B2D 3E 46 41 52 >                db      ">FAR"
  68+ 7B31             >len_NFA         defl    $ - temp_NFA
  68+ 7B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  68+ 7B2D             >
  68+ 7B2D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  68+ 7B2E 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
  68+ 7B32             >                org     $-1                 // alter last byte of Name just above to set
  68+ 7B31 D2          >                db      {b $} | END_BIT     // msb as name end
  68+ 7B32             >
  68+ 7B32 1E 7B       >                dw      last_NFA            // Link to previous definition Name
  68+ 7B34             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  68+ 7B34 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  68+ 7B34 ~           >
  68+ 7B34 ~           >
  68+ 7B34             >                endif           ; ok        // for other definitions it "points" the correct handler
  68+ 7B34             >                // Use of "; ok" to suppress "warning[fwdref]"
  68+ 7B34             >
  68+ 7B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  69+ 7B34 E1                           pop     hl
  70+ 7B35 7C                           ld      a, h
  71+ 7B36 E6 E0                        and     $E0
  72+ 7B38 07                           rlca
  73+ 7B39 07                           rlca
  74+ 7B3A 07                           rlca
  75+ 7B3B F6 40                        or      $40
  76+ 7B3D 5F                           ld      e, a
  77+ 7B3E 16 00                        ld      d, 0
  78+ 7B40 7C                           ld      a, h
  79+ 7B41 F6 E0                        or      $E0
  80+ 7B43 67                           ld      h, a
  81+ 7B44 EB                           ex      de, hl
  82+ 7B45                              psh2
  82+ 7B45 D5          >                push    de
  82+ 7B46 E5          >                push    hl
  82+ 7B47 DD E9       >                jp      (ix)
  83+ 7B49
  84+ 7B49              //  ______________________________________________________________________
  85+ 7B49              //
  86+ 7B49              // <far         a n  -- ha
  87+ 7B49              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
  88+ 7B49              // reverse of >FAR: encodes a FAR address compressing
  89+ 7B49              // to bits 765 of H, lower bits of HL address offset from E000h
  90+ 7B49                              New_Def FROM_FAR, "<FAR", is_code, is_normal
  90+ 7B49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  90+ 7B49             >
  90+ 7B49             >                // dummy db directives used to calculate length of namec
  90+ 7B49 3C 46 41 52 >                db      "<FAR"
  90+ 7B4D             >len_NFA         defl    $ - temp_NFA
  90+ 7B4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  90+ 7B49             >
  90+ 7B49 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  90+ 7B4A 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
  90+ 7B4E             >                org     $-1                 // alter last byte of Name just above to set
  90+ 7B4D D2          >                db      {b $} | END_BIT     // msb as name end
  90+ 7B4E             >
  90+ 7B4E 2D 7B       >                dw      last_NFA            // Link to previous definition Name
  90+ 7B50             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  90+ 7B50 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  90+ 7B50 ~           >
  90+ 7B50 ~           >
  90+ 7B50             >                endif           ; ok        // for other definitions it "points" the correct handler
  90+ 7B50             >                // Use of "; ok" to suppress "warning[fwdref]"
  90+ 7B50             >
  90+ 7B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  91+ 7B50 D1                           pop     de                  // page number in e
  92+ 7B51 E1                           pop     hl                  // address in hl
  93+ 7B52 7B                           ld      a, e
  94+ 7B53 E6 07                        and     $07                 // reduced to 0-7
  95+ 7B55 0F                           rrca
  96+ 7B56 0F                           rrca
  97+ 7B57 0F                           rrca
  98+ 7B58 57                           ld      d, a                // save to d bits 765
  99+ 7B59 7C                           ld      a, h                // drops
 100+ 7B5A E6 1F                        and     $1F
 101+ 7B5C B2                           or      d
 102+ 7B5D 67                           ld      h, a
 103+ 7B5E
 104+ 7B5E                              psh1
 104+ 7B5E E5          >                push    hl
 104+ 7B5F DD E9       >                jp      (ix)
 105+ 7B61
 106+ 7B61              //  ______________________________________________________________________
 107+ 7B61              //
 108+ 7B61              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 109+ 7B61              // NextZXOS call wrapper.
 110+ 7B61              //  n1 = hl register parameter value
 111+ 7B61              //  n2 = de register parameter value
 112+ 7B61              //  n3 = bc register parameter value
 113+ 7B61              //  n4 =  a register parameter value
 114+ 7B61              //   a = routine address in ROM 3
 115+ 7B61              // ----
 116+ 7B61              //  n5 = hl returned value
 117+ 7B61              //  n6 = de returned value
 118+ 7B61              //  n7 = bc returned value
 119+ 7B61              //  n8 =  a returned value
 120+ 7B61              //   f
 121+ 7B61                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 121+ 7B61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 7B61             >
 121+ 7B61             >                // dummy db directives used to calculate length of namec
 121+ 7B61 4D 5F 50 33 >                db      "M_P3DOS"
 121+ 7B65 44 4F 53    >
 121+ 7B68             >len_NFA         defl    $ - temp_NFA
 121+ 7B68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 7B61             >
 121+ 7B61 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 7B62 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 121+ 7B66 44 4F 53    >
 121+ 7B69             >                org     $-1                 // alter last byte of Name just above to set
 121+ 7B68 D3          >                db      {b $} | END_BIT     // msb as name end
 121+ 7B69             >
 121+ 7B69 49 7B       >                dw      last_NFA            // Link to previous definition Name
 121+ 7B6B             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 7B6B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 121+ 7B6B ~           >
 121+ 7B6B ~           >
 121+ 7B6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 7B6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 7B6B             >
 121+ 7B6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 7B6B D1                           pop     de                  // dos call entry address in de
 123+ 7B6C E1                           pop     hl                  // a register
 124+ 7B6D 7D                           ld      a, l
 125+ 7B6E D9                           exx
 126+ 7B6F C1                           pop     bc
 127+ 7B70 D1                           pop     de
 128+ 7B71 E1                           pop     hl
 129+ 7B72 D9                           exx
 130+ 7B73
 131+ 7B73 C5                           push    bc
 132+ 7B74 DD E5                        push    ix
 133+ 7B76
 134+ 7B76 ED 73 92 63                  ld      (SP_Saved), sp
 135+ 7B7A 31 64 63                     ld      sp, Cold_origin - 2
 136+ 7B7D 0E 07                        ld      c, 7                // use 7 RAM Bank
 137+ 7B7F
 138+ 7B7F CF                           rst     08
 139+ 7B80 94                           db      $94
 140+ 7B81
 141+ 7B81 ED 7B 92 63                  ld      sp, (SP_Saved)
 142+ 7B85 DD E5                        push    ix
 143+ 7B87 E1                           pop     hl
 144+ 7B88 22 90 63                     ld      (IX_Echo), hl
 145+ 7B8B              //              nop
 146+ 7B8B DD E1                        pop     ix
 147+ 7B8D E3                           ex      (sp), hl            // hl argument and retrieve bc
 148+ 7B8E D5                           push    de
 149+ 7B8F C5                           push    bc
 150+ 7B90 4D                           ld      c, l
 151+ 7B91 44                           ld      b, h
 152+ 7B92
 153+ 7B92 26 00                        ld      h, 0
 154+ 7B94 6F                           ld      l, a
 155+ 7B95 E5                           push    hl
 156+ 7B96 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 157+ 7B98 23                           inc     hl                  //  0 for OK ; 1 for ko
 158+ 7B99
 159+ 7B99                              psh1
 159+ 7B99 E5          >                push    hl
 159+ 7B9A DD E9       >                jp      (ix)
 160+ 7B9C
 161+ 7B9C              //  ______________________________________________________________________
 162+ 7B9C              //
 163+ 7B9C              // blk-fh
 164+ 7B9C                              Variable_Def BLK_FH,   "BLK-FH",   1
 164+ 7B9C             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 164+ 7B9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 7B9C             >
 164+ 7B9C             >                // dummy db directives used to calculate length of namec
 164+ 7B9C 42 4C 4B 2D >                db      "BLK-FH"
 164+ 7BA0 46 48       >
 164+ 7BA2             >len_NFA         defl    $ - temp_NFA
 164+ 7BA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 7B9C             >
 164+ 7B9C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 7B9D 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 164+ 7BA1 46 48       >
 164+ 7BA3             >                org     $-1                 // alter last byte of Name just above to set
 164+ 7BA2 C8          >                db      {b $} | END_BIT     // msb as name end
 164+ 7BA3             >
 164+ 7BA3 61 7B       >                dw      last_NFA            // Link to previous definition Name
 164+ 7BA5             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7BA5 CD F4 6B    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 164+ 7BA8             >
 164+ 7BA8             >
 164+ 7BA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 7BA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 7BA8             >
 164+ 7BA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 7BA8 01 00       >                dw      1
 165+ 7BAA
 166+ 7BAA                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 166+ 7BAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 7BAA             >
 166+ 7BAA             >                // dummy db directives used to calculate length of namec
 166+ 7BAA 42 4C 4B 2D >                db      "BLK-FNAME"
 166+ 7BAE 46 4E 41 4D >
 166+ 7BB2 45          >
 166+ 7BB3             >len_NFA         defl    $ - temp_NFA
 166+ 7BB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 7BAA             >
 166+ 7BAA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 7BAB 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 166+ 7BAF 46 4E 41 4D >
 166+ 7BB3 45          >
 166+ 7BB4             >                org     $-1                 // alter last byte of Name just above to set
 166+ 7BB3 C5          >                db      {b $} | END_BIT     // msb as name end
 166+ 7BB4             >
 166+ 7BB4 9C 7B       >                dw      last_NFA            // Link to previous definition Name
 166+ 7BB6             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 7BB6 CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 166+ 7BB9             >
 166+ 7BB9             >
 166+ 7BB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 7BB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 7BB9             >
 166+ 7BB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 7BB9 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 167+ 7BBD 6F 63 6B 73
 167+ 7BC1 2D 36 34 2E
 167+ 7BC5 62 69 6E 00
 168+ 7BC9 00 00 00...                  ds      24
 169+ 7BE1
 170+ 7BE1              //  ______________________________________________________________________
 171+ 7BE1              //
 172+ 7BE1              // blk-seek     n --
 173+ 7BE1              // seek block n  within blocks!.bin  file
 174+ 7BE1                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 174+ 7BE1             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 174+ 7BE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 7BE1             >
 174+ 7BE1             >                // dummy db directives used to calculate length of namec
 174+ 7BE1 42 4C 4B 2D >                db      "BLK-SEEK"
 174+ 7BE5 53 45 45 4B >
 174+ 7BE9             >len_NFA         defl    $ - temp_NFA
 174+ 7BE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 7BE1             >
 174+ 7BE1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 7BE2 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 174+ 7BE6 53 45 45 4B >
 174+ 7BEA             >                org     $-1                 // alter last byte of Name just above to set
 174+ 7BE9 CB          >                db      {b $} | END_BIT     // msb as name end
 174+ 7BEA             >
 174+ 7BEA AA 7B       >                dw      last_NFA            // Link to previous definition Name
 174+ 7BEC             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 7BEC CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 7BEF             >
 174+ 7BEF             >
 174+ 7BEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 7BEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 7BEF             >
 174+ 7BEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 7BEF 5C 6C 69 79                  dw  BBUF, MMUL
 176+ 7BF3 A5 7B C0 6A                  dw  BLK_FH, FETCH
 177+ 7BF7 FF 66                        dw  F_SEEK
 178+ 7BF9 A5 63 2D 00                  dw  LIT, $2D, QERROR
 178+ 7BFD FC 6F
 179+ 7BFF D0 68                        dw  EXIT
 180+ 7C01
 181+ 7C01              //  ______________________________________________________________________
 182+ 7C01              //
 183+ 7C01              // blk-read     n --
 184+ 7C01              // seek block n  within blocks!.bin  file
 185+ 7C01                              Colon_Def BLK_READ, "BLK-READ", is_normal
 185+ 7C01             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 185+ 7C01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 7C01             >
 185+ 7C01             >                // dummy db directives used to calculate length of namec
 185+ 7C01 42 4C 4B 2D >                db      "BLK-READ"
 185+ 7C05 52 45 41 44 >
 185+ 7C09             >len_NFA         defl    $ - temp_NFA
 185+ 7C09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 7C01             >
 185+ 7C01 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 7C02 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 185+ 7C06 52 45 41 44 >
 185+ 7C0A             >                org     $-1                 // alter last byte of Name just above to set
 185+ 7C09 C4          >                db      {b $} | END_BIT     // msb as name end
 185+ 7C0A             >
 185+ 7C0A E1 7B       >                dw      last_NFA            // Link to previous definition Name
 185+ 7C0C             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 7C0C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 185+ 7C0F             >
 185+ 7C0F             >
 185+ 7C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 7C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 7C0F             >
 185+ 7C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 7C0F EC 7B                        dw  BLK_SEEK
 187+ 7C11 5C 6C                        dw  BBUF
 188+ 7C13 A5 7B C0 6A                  dw  BLK_FH, FETCH
 189+ 7C17 3E 67                        dw  F_READ
 190+ 7C19 A5 63 2E 00                  dw  LIT, $2E, QERROR
 190+ 7C1D FC 6F
 191+ 7C1F 12 6A                        dw  DROP
 192+ 7C21 D0 68                        dw  EXIT
 193+ 7C23
 194+ 7C23              //  ______________________________________________________________________
 195+ 7C23              //
 196+ 7C23              // blk-write     n --
 197+ 7C23              // seek block n  within blocks!.bin  file
 198+ 7C23                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 198+ 7C23             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 198+ 7C23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7C23             >
 198+ 7C23             >                // dummy db directives used to calculate length of namec
 198+ 7C23 42 4C 4B 2D >                db      "BLK-WRITE"
 198+ 7C27 57 52 49 54 >
 198+ 7C2B 45          >
 198+ 7C2C             >len_NFA         defl    $ - temp_NFA
 198+ 7C2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7C23             >
 198+ 7C23 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7C24 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 198+ 7C28 57 52 49 54 >
 198+ 7C2C 45          >
 198+ 7C2D             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7C2C C5          >                db      {b $} | END_BIT     // msb as name end
 198+ 7C2D             >
 198+ 7C2D 01 7C       >                dw      last_NFA            // Link to previous definition Name
 198+ 7C2F             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7C2F CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7C32             >
 198+ 7C32             >
 198+ 7C32             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7C32             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7C32             >
 198+ 7C32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7C32 EC 7B                        dw  BLK_SEEK
 200+ 7C34 5C 6C                        dw  BBUF
 201+ 7C36 A5 7B C0 6A                  dw  BLK_FH, FETCH
 202+ 7C3A 5B 67                        dw  F_WRITE
 203+ 7C3C A5 63 2F 00                  dw  LIT, $2F, QERROR
 203+ 7C40 FC 6F
 204+ 7C42 12 6A                        dw  DROP
 205+ 7C44 D0 68                        dw  EXIT
 206+ 7C46
 207+ 7C46              //  ______________________________________________________________________
 208+ 7C46              //
 209+ 7C46              // blk-init     n --
 210+ 7C46              // seek block n  within blocks!.bin  file
 211+ 7C46                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 211+ 7C46             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 211+ 7C46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 7C46             >
 211+ 7C46             >                // dummy db directives used to calculate length of namec
 211+ 7C46 42 4C 4B 2D >                db      "BLK-INIT"
 211+ 7C4A 49 4E 49 54 >
 211+ 7C4E             >len_NFA         defl    $ - temp_NFA
 211+ 7C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 7C46             >
 211+ 7C46 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 7C47 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 211+ 7C4B 49 4E 49 54 >
 211+ 7C4F             >                org     $-1                 // alter last byte of Name just above to set
 211+ 7C4E D4          >                db      {b $} | END_BIT     // msb as name end
 211+ 7C4F             >
 211+ 7C4F 23 7C       >                dw      last_NFA            // Link to previous definition Name
 211+ 7C51             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 7C51 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 7C54             >
 211+ 7C54             >
 211+ 7C54             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 7C54             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 7C54             >
 211+ 7C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 7C54 A5 7B C0 6A                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 212+ 7C58 78 67 12 6A
 213+ 7C5C B6 7B 90 69                  dw  BLK_FNAME, ONE_PLUS
 214+ 7C60 22 6E 30 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 214+ 7C64 90 67
 215+ 7C66 A5 63 2C 00                  dw  LIT, $2C, QERROR
 215+ 7C6A FC 6F
 216+ 7C6C A5 7B CB 6A                  dw  BLK_FH, STORE
 217+ 7C70 D0 68                        dw  EXIT
 218+ 7C72
 219+ 7C72              //  ______________________________________________________________________
 220+ 7C72              //
 221+ 7C72              // #sec
 222+ 7C72              // number of 512 Byte "sector" available on thie sysstem.
 223+ 7C72              // it addd up to 16 MByte of data that can be used as source or pool for almost anything.
 224+ 7C72
 225+ 7C72                              Constant_Def NSEC , "#SEC", 32767
 225+ 7C72             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 225+ 7C72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 7C72             >
 225+ 7C72             >                // dummy db directives used to calculate length of namec
 225+ 7C72 23 53 45 43 >                db      "#SEC"
 225+ 7C76             >len_NFA         defl    $ - temp_NFA
 225+ 7C76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 7C72             >
 225+ 7C72 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 7C73 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 225+ 7C77             >                org     $-1                 // alter last byte of Name just above to set
 225+ 7C76 C3          >                db      {b $} | END_BIT     // msb as name end
 225+ 7C77             >
 225+ 7C77 46 7C       >                dw      last_NFA            // Link to previous definition Name
 225+ 7C79             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 7C79 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 225+ 7C7C             >
 225+ 7C7C             >
 225+ 7C7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 7C7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 7C7C             >
 225+ 7C7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7C7C FF 7F       >                dw      32767
 226+ 7C7E
 227+ 7C7E              //  ______________________________________________________________________
 228+ 7C7E
 229+ 7C7E
 230+ 7C7E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 113  7C7E                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C7E              //  ______________________________________________________________________
   2+ 7C7E              //
   3+ 7C7E              //  L3.asm
   4+ 7C7E              //
   5+ 7C7E              //  Continuation of L2.asm
   6+ 7C7E              //  I/O Block definitions
   7+ 7C7E              //  ______________________________________________________________________
   8+ 7C7E
   9+ 7C7E
  10+ 7C7E              //  ______________________________________________________________________
  11+ 7C7E              //
  12+ 7C7E              // r/w          a n f --
  13+ 7C7E              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C7E                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C7E             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C7E             >
  14+ 7C7E             >                // dummy db directives used to calculate length of namec
  14+ 7C7E 52 2F 57    >                db      "R/W"
  14+ 7C81             >len_NFA         defl    $ - temp_NFA
  14+ 7C81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C7E             >
  14+ 7C7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C7F 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C82             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C81 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C82             >
  14+ 7C82 72 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C84             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C84 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C87             >
  14+ 7C87             >
  14+ 7C87             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C87             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C87             >
  14+ 7C87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C87 FA 68                        dw      TO_R                    // >r
  16+ 7C89 9A 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C8B 3F 6A 47 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C8F 04 6A 79 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C93 9A 69 BD 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C97 7E 68                        dw      OR_OP                   // or
  21+ 7C99 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C9D FC 6F
  22+ 7C9F 0C 69                        dw      R_TO                    // r>
  23+ 7CA1                                                              // if
  24+ 7CA1 D8 63                        dw      ZBRANCH
  25+ 7CA3 08 00                        dw      Read_Write_Else - $
  26+ 7CA5 0C 7C                        dw          BLK_READ            //      blk-read
  27+ 7CA7 C3 63                        dw      BRANCH
  28+ 7CA9 04 00                        dw      Read_Write_Endif - $
  29+ 7CAB              Read_Write_Else:                                // else
  30+ 7CAB 2F 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CAD              Read_Write_Endif:                               // endif
  32+ 7CAD D0 68                        dw      EXIT                    // ;
  33+ 7CAF
  34+ 7CAF
  35+ 7CAF              //  ______________________________________________________________________
  36+ 7CAF              //
  37+ 7CAF              // +buf        a1 -- a2 f
  38+ 7CAF              // advences to next buffer, cyclically rotating along them
  39+ 7CAF                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CAF             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CAF             >
  39+ 7CAF             >                // dummy db directives used to calculate length of namec
  39+ 7CAF 2B 42 55 46 >                db      "+BUF"
  39+ 7CB3             >len_NFA         defl    $ - temp_NFA
  39+ 7CB3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CAF             >
  39+ 7CAF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CB0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CB4             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CB3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CB4             >
  39+ 7CB4 7E 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CB6             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CB6 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CB9             >
  39+ 7CB9             >
  39+ 7CB9             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CB9             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CB9             >
  39+ 7CB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CB9 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CBD 6B 69
  41+ 7CBF 3F 6A 0C 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CC3 C0 6A
  42+ 7CC5 83 6E                        dw      EQUALS                  // =
  43+ 7CC7                                                              // if
  44+ 7CC7 D8 63                        dw      ZBRANCH
  45+ 7CC9 08 00                        dw      PBuf_Endif - $
  46+ 7CCB 12 6A                        dw          DROP                //      drop
  47+ 7CCD 00 6D C0 6A                  dw          FIRST, FETCH        //      first @
  48+ 7CD1              PBuf_Endif:                                     // endif
  49+ 7CD1 3F 6A D0 6D                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CD5 C0 6A
  50+ 7CD7 77 6E                        dw      SUBTRACT                // -
  51+ 7CD9 D0 68                        dw      EXIT                    // ;
  52+ 7CDB
  53+ 7CDB              //  ______________________________________________________________________
  54+ 7CDB              //
  55+ 7CDB              // update       --
  56+ 7CDB              // mark the last used block to be written to disk
  57+ 7CDB                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CDB             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CDB             >
  57+ 7CDB             >                // dummy db directives used to calculate length of namec
  57+ 7CDB 55 50 44 41 >                db      "UPDATE"
  57+ 7CDF 54 45       >
  57+ 7CE1             >len_NFA         defl    $ - temp_NFA
  57+ 7CE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CDB             >
  57+ 7CDB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CDC 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CE0 54 45       >
  57+ 7CE2             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CE1 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CE2             >
  57+ 7CE2 AF 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CE4             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CE4 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CE7             >
  57+ 7CE7             >
  57+ 7CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CE7             >
  57+ 7CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CE7 D0 6D C0 6A                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CEB C0 6A
  59+ 7CED A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CF1 7E 68
  60+ 7CF3 D0 6D C0 6A                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CF7 CB 6A
  61+ 7CF9 D0 68                        dw      EXIT                    // ;
  62+ 7CFB
  63+ 7CFB
  64+ 7CFB              //  ______________________________________________________________________
  65+ 7CFB              //
  66+ 7CFB              // empty-buffers --
  67+ 7CFB                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CFB             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CFB             >
  67+ 7CFB             >                // dummy db directives used to calculate length of namec
  67+ 7CFB 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CFF 59 2D 42 55 >
  67+ 7D03 46 46 45 52 >
  67+ 7D07 53          >
  67+ 7D08             >len_NFA         defl    $ - temp_NFA
  67+ 7D08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CFB             >
  67+ 7CFB 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CFC 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D00 59 2D 42 55 >
  67+ 7D04 46 46 45 52 >
  67+ 7D08 53          >
  67+ 7D09             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D08 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D09             >
  67+ 7D09 DB 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D0B             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D0B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D0E             >
  67+ 7D0E             >
  67+ 7D0E             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D0E             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D0E             >
  67+ 7D0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D0E 00 6D C0 6A                  dw      FIRST, FETCH            // first @
  69+ 7D12 0C 6D C0 6A                  dw      LIMIT, FETCH            // limit @
  70+ 7D16 04 6A 77 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D1A 5B 73
  71+ 7D1C D0 68                        dw      EXIT                    // ;
  72+ 7D1E
  73+ 7D1E              //  ______________________________________________________________________
  74+ 7D1E              //
  75+ 7D1E              // buffer       n -- a
  76+ 7D1E              // read block n and gives the address to a buffer
  77+ 7D1E              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D1E              // disk before reading the block n.
  79+ 7D1E
  80+ 7D1E                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D1E             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D1E             >
  80+ 7D1E             >                // dummy db directives used to calculate length of namec
  80+ 7D1E 42 55 46 46 >                db      "BUFFER"
  80+ 7D22 45 52       >
  80+ 7D24             >len_NFA         defl    $ - temp_NFA
  80+ 7D24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D1E             >
  80+ 7D1E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D1F 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D23 45 52       >
  80+ 7D25             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D24 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D25             >
  80+ 7D25 FB 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D27             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D27 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D2A             >
  80+ 7D2A             >
  80+ 7D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D2A             >
  80+ 7D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D2A C5 6D C0 6A                  dw      USE, FETCH              // use @
  82+ 7D2E 3F 6A FA 68                  dw      DUP, TO_R               // dup >r
  83+ 7D32                                                              // begin
  84+ 7D32              Buffer_Begin:
  85+ 7D32 B6 7C                        dw          PBUF                //      +buf
  86+ 7D34                                                              // until
  87+ 7D34 D8 63                        dw      ZBRANCH
  88+ 7D36 FC FF                        dw      Buffer_Begin - $
  89+ 7D38 C5 6D CB 6A                  dw      USE, STORE              // use !
  90+ 7D3C 1E 69 C0 6A                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D40 47 69
  91+ 7D42                                                              // if
  92+ 7D42 D8 63                        dw      ZBRANCH
  93+ 7D44 14 00                        dw      Buffer_Endif - $
  94+ 7D46 1E 69 B2 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D4A 1E 69 C0 6A                  dw          R_OP, FETCH         //      r fetch
  96+ 7D4E A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D52 6E 68                        dw          AND_OP              //      and
  98+ 7D54 15 6C 84 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D58              Buffer_Endif:                                   // endif
 100+ 7D58 1E 69 CB 6A                  dw      R_OP, STORE             // r !
 101+ 7D5C 1E 69 D0 6D                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D60 CB 6A
 102+ 7D62 0C 69 B2 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D66 D0 68                        dw      EXIT                    // ;
 104+ 7D68
 105+ 7D68              //  ______________________________________________________________________
 106+ 7D68              //
 107+ 7D68              // block        n -- a
 108+ 7D68              // Leaves the buffer address that contains the block n.
 109+ 7D68              // If the block is not already present, it will be loaded from disk
 110+ 7D68              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D68              // disk before reading the block n.
 112+ 7D68              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D68
 114+ 7D68                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D68             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D68             >
 114+ 7D68             >                // dummy db directives used to calculate length of namec
 114+ 7D68 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D6C 4B          >
 114+ 7D6D             >len_NFA         defl    $ - temp_NFA
 114+ 7D6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D68             >
 114+ 7D68 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D69 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D6D 4B          >
 114+ 7D6E             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D6D CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D6E             >
 114+ 7D6E 1E 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D70             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D70 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D73             >
 114+ 7D73             >
 114+ 7D73             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D73             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D73             >
 114+ 7D73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D73 57 6D C0 6A                  dw      OFFSET, FETCH           // offset @
 116+ 7D77 6B 69 FA 68                  dw      PLUS, TO_R              // + >r
 117+ 7D7B D0 6D C0 6A                  dw      PREV, FETCH             // prev @
 118+ 7D7F 3F 6A C0 6A                  dw      DUP, FETCH              // dup @
 119+ 7D83 1E 69 77 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D87 3F 6A 6B 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D8B                                                              // if
 122+ 7D8B D8 63                        dw        ZBRANCH
 123+ 7D8D 34 00                        dw        Block_Endif_1 - $
 124+ 7D8F              Block_Begin:                                    //      begin
 125+ 7D8F B6 7C 2D 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D93                                                              //          if
 127+ 7D93 D8 63                        dw          ZBRANCH
 128+ 7D95 14 00                        dw          Block_Endif_2 - $
 129+ 7D97 12 6A                        dw              DROP            //              drop
 130+ 7D99 1E 69 27 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D9D 3F 6A                        dw              DUP             //              dup
 132+ 7D9F 1E 69 1E 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DA3 84 7C                        dw              READ_WRITE      //              r/w
 134+ 7DA5 27 6C 77 6E                  dw              TWO, SUBTRACT   //              2 -
 135+ 7DA9              Block_Endif_2:                                  //          endif
 136+ 7DA9 3F 6A C0 6A                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DAD 1E 69
 137+ 7DAF 77 6E 3F 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DB3 6B 69 2D 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DB7                                                              //      until
 140+ 7DB7 D8 63                        dw        ZBRANCH
 141+ 7DB9 D6 FF                        dw        Block_Begin - $
 142+ 7DBB 3F 6A D0 6D                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DBF CB 6A
 143+ 7DC1              Block_Endif_1:                                  // endif
 144+ 7DC1 0C 69 12 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DC5 B2 69
 145+ 7DC7 D0 68                        dw      EXIT                    // ;
 146+ 7DC9
 147+ 7DC9              //  ______________________________________________________________________
 148+ 7DC9              //
 149+ 7DC9              // #buff        -- n
 150+ 7DC9              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DC9                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DC9             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DC9             >
 151+ 7DC9             >                // dummy db directives used to calculate length of namec
 151+ 7DC9 23 42 55 46 >                db      "#BUFF"
 151+ 7DCD 46          >
 151+ 7DCE             >len_NFA         defl    $ - temp_NFA
 151+ 7DCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DC9             >
 151+ 7DC9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DCA 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DCE 46          >
 151+ 7DCF             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DCE C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DCF             >
 151+ 7DCF 68 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DD1             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DD1 CD DB 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DD4             >
 151+ 7DD4             >
 151+ 7DD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DD4             >
 151+ 7DD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DD4 07 00       >                dw      7
 152+ 7DD6
 153+ 7DD6              //  ______________________________________________________________________
 154+ 7DD6              //
 155+ 7DD6              // flush        --
 156+ 7DD6                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DD6             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DD6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DD6             >
 156+ 7DD6             >                // dummy db directives used to calculate length of namec
 156+ 7DD6 46 4C 55 53 >                db      "FLUSH"
 156+ 7DDA 48          >
 156+ 7DDB             >len_NFA         defl    $ - temp_NFA
 156+ 7DDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DD6             >
 156+ 7DD6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DD7 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DDB 48          >
 156+ 7DDC             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DDB C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DDC             >
 156+ 7DDC C9 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DDE             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DDE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DE1             >
 156+ 7DE1             >
 156+ 7DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DE1             >
 156+ 7DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DE1 D1 7D 90 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DE5 15 6C
 158+ 7DE7              Flush_Do:                                       // do
 159+ 7DE7 58 64                        dw      C_DO
 160+ 7DE9 15 6C 27 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DED 12 6A
 161+ 7DEF                                                              // loop
 162+ 7DEF EB 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DF3 A5 7B C0 6A                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DF7 B1 67 12 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DFB D0 68                        dw      EXIT                    // exit
 166+ 7DFD
 167+ 7DFD              //  ______________________________________________________________________
 168+ 7DFD              //
 169+ 7DFD              // f_getline    a m fh -- n
 170+ 7DFD              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DFD              // Address a is left for subsequent processing
 172+ 7DFD              // and n as the actual number of byte read, that is the length of line
 173+ 7DFD                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DFD             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DFD             >
 173+ 7DFD             >                // dummy db directives used to calculate length of namec
 173+ 7DFD 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E01 54 4C 49 4E >
 173+ 7E05 45          >
 173+ 7E06             >len_NFA         defl    $ - temp_NFA
 173+ 7E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DFD             >
 173+ 7DFD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DFE 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E02 54 4C 49 4E >
 173+ 7E06 45          >
 173+ 7E07             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E06 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E07             >
 173+ 7E07 D6 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E09             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E09 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E0C             >
 173+ 7E0C             >
 173+ 7E0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E0C             >
 173+ 7E0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E0C FA 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E0E 26 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E10 1E 69 22 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E14 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E18 FC 6F
 178+ 7E1A
 179+ 7E1A 84 6A 04 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E1E 90 69 34 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E22
 182+ 7E22 1E 69 3E 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E26 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E2A FC 6F
 184+ 7E2C                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E2C D8 63                        dw      ZBRANCH
 186+ 7E2E 36 00                        dw      FGetline_Else - $
 187+ 7E30 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E34 35 65
 188+ 7E36 12 6A 1B 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E3A 34 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E3C A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E40 35 65
 191+ 7E42 12 6A 1B 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E46 4A 6A CC 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E4A 3F 6A FA 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7E4E 84 6A 0C 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7E52 15 6C 76 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7E56 0C 69 FF 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7E5A A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7E5E FC 6F
 198+ 7E60                                                              // else
 199+ 7E60 C3 63                        dw      BRANCH
 200+ 7E62 0C 00                        dw      FGetline_Endif - $
 201+ 7E64              FGetline_Else:
 202+ 7E64 0C 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7E66 84 6A 78 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7E6A 12 6A 15 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7E6E              FGetline_Endif:                                 // endif
 206+ 7E6E FA 68 3F 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7E72 3F 6A
 207+ 7E74 90 69 34 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7E78 1E 69 D2 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7E7C 94 6A 6B 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7E80 15 6C 34 6A                  dw      ZERO, SWAP              // 0 swap
 211+ 7E84 BD 69 CB 6A                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7E88 1E 69 6B 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7E8C 9A 69
 213+ 7E8E 34 6A 1E 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7E92 77 6E
 214+ 7E94 6D 73                        dw      BLANKS                  // blanks
 215+ 7E96 0C 69                        dw      R_TO                    // r>                   ( n )
 216+ 7E98 D0 68                        dw      EXIT                    // ;
 217+ 7E9A
 218+ 7E9A              //  ______________________________________________________________________
 219+ 7E9A              //
 220+ 7E9A              // f_include    fh --
 221+ 7E9A              // Given a filehandle includes the source from file
 222+ 7E9A                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7E9A             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7E9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7E9A             >
 222+ 7E9A             >                // dummy db directives used to calculate length of namec
 222+ 7E9A 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7E9E 43 4C 55 44 >
 222+ 7EA2 45          >
 222+ 7EA3             >len_NFA         defl    $ - temp_NFA
 222+ 7EA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7E9A             >
 222+ 7E9A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7E9B 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7E9F 43 4C 55 44 >
 222+ 7EA3 45          >
 222+ 7EA4             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7EA3 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7EA4             >
 222+ 7EA4 FD 7D       >                dw      last_NFA            // Link to previous definition Name
 222+ 7EA6             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7EA6 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7EA9             >
 222+ 7EA9             >
 222+ 7EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7EA9             >
 222+ 7EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7EA9 2C 6D C0 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7EAD FA 68
 224+ 7EAF 36 6D C0 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7EB3 FA 68
 225+ 7EB5 F5 6D C0 6A                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7EB9 FA 68
 226+ 7EBB 1E 69                        dw      R_OP                    // r
 227+ 7EBD                                                              // if
 228+ 7EBD D8 63                        dw      ZBRANCH
 229+ 7EBF 10 00                        dw      FInclude_Else_1 - $
 230+ 7EC1 1E 69 22 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7EC5 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7EC9 FC 6F
 232+ 7ECB                                                              // else
 233+ 7ECB C3 63                        dw      BRANCH
 234+ 7ECD 06 00                        dw      FInclude_Endif_1 - $
 235+ 7ECF              FInclude_Else_1:
 236+ 7ECF 15 6C 15 6C                  dw          ZERO, ZERO          //      0 0
 237+ 7ED3                                                              // endif
 238+ 7ED3              FInclude_Endif_1:
 239+ 7ED3 FA 68 FA 68                  dw      TO_R, TO_R              // >r >r
 240+ 7ED7 F5 6D CB 6A                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7EDB              FInclude_Begin:                                 // begin
 242+ 7EDB 1E 6C 70 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7EDF 5C 6C
 243+ 7EE1 94 6A 6D 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7EE5 34 6A 90 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7EE9 34 6A BD 69                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7EED F5 6D C0 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7EF1 09 7E                        dw          F_GETLINE           //      f_getline
 248+ 7EF3                                                              // while
 249+ 7EF3 D8 63                        dw      ZBRANCH
 250+ 7EF5 14 00                        dw      FInclude_Repeat - $
 251+ 7EF7 1E 6C 2C 6D                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7EFB CB 6A
 252+ 7EFD 15 6C 36 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7F01 CB 6A
 253+ 7F03 62 77                        dw          INTERPRET           //      interpret
 254+ 7F05 C3 63                        dw      BRANCH
 255+ 7F07 D4 FF                        dw      FInclude_Begin - $
 256+ 7F09              FInclude_Repeat:                                // repeat
 257+ 7F09 F5 6D C0 6A                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7F0D 15 6C F5 6D                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7F11 CB 6A
 259+ 7F13 78 67                        dw      F_CLOSE                 // f_close
 260+ 7F15 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7F19 FC 6F
 261+ 7F1B 0C 69 0C 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7F1F 0C 69
 262+ 7F21 3F 6A F5 6D                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7F25 CB 6A
 263+ 7F27                                                              // if
 264+ 7F27 D8 63                        dw      ZBRANCH
 265+ 7F29 12 00                        dw      FInclude_Else_2 - $
 266+ 7F2B F5 6D C0 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7F2F FF 66                        dw          F_SEEK              //      f_seek
 268+ 7F31 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7F35 FC 6F
 269+ 7F37                                                              // else
 270+ 7F37 C3 63                        dw      BRANCH
 271+ 7F39 04 00                        dw      FInclude_Endif_2 - $
 272+ 7F3B              FInclude_Else_2:
 273+ 7F3B 78 6A                        dw          TWO_DROP            //      2drop
 274+ 7F3D              FInclude_Endif_2:                               // endif
 275+ 7F3D 0C 69 36 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7F41 CB 6A
 276+ 7F43 0C 69 2C 6D                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7F47 CB 6A
 277+ 7F49 D0 68                        dw      EXIT                    // ;
 278+ 7F4B
 279+ 7F4B              //  ______________________________________________________________________
 280+ 7F4B              //
 281+ 7F4B              // open<         -- fh
 282+ 7F4B              // Open the following filename and return it file-handle
 283+ 7F4B              // Used in the form OPEN CCCC
 284+ 7F4B                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7F4B             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7F4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7F4B             >
 284+ 7F4B             >                // dummy db directives used to calculate length of namec
 284+ 7F4B 4F 50 45 4E >                db      "OPEN<"
 284+ 7F4F 3C          >
 284+ 7F50             >len_NFA         defl    $ - temp_NFA
 284+ 7F50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7F4B             >
 284+ 7F4B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7F4C 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7F50 3C          >
 284+ 7F51             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7F50 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7F51             >
 284+ 7F51 9A 7E       >                dw      last_NFA            // Link to previous definition Name
 284+ 7F53             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7F53 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7F56             >
 284+ 7F56             >
 284+ 7F56             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7F56             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7F56             >
 284+ 7F56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7F56 44 6C                        dw      BL
 286+ 7F58 A8 73 B1 71                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7F5C 04 6A
 287+ 7F5E 6B 69 15 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7F62 34 6A CB 6A
 288+ 7F66 94 73 1E 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7F6A 90 67
 289+ 7F6C A5 63 2B 00                  dw      LIT, 43                 // 43
 290+ 7F70 FC 6F                        dw      QERROR                  // ?error
 291+ 7F72 D0 68                        dw      EXIT                    // ;
 292+ 7F74
 293+ 7F74              //  ______________________________________________________________________
 294+ 7F74              //
 295+ 7F74              // include      -- cccc
 296+ 7F74              // Include the following filename
 297+ 7F74                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7F74             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7F74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7F74             >
 297+ 7F74             >                // dummy db directives used to calculate length of namec
 297+ 7F74 49 4E 43 4C >                db      "INCLUDE"
 297+ 7F78 55 44 45    >
 297+ 7F7B             >len_NFA         defl    $ - temp_NFA
 297+ 7F7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7F74             >
 297+ 7F74 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7F75 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7F79 55 44 45    >
 297+ 7F7C             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7F7B C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7F7C             >
 297+ 7F7C 4B 7F       >                dw      last_NFA            // Link to previous definition Name
 297+ 7F7E             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7F7E CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7F81             >
 297+ 7F81             >
 297+ 7F81             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7F81             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7F81             >
 297+ 7F81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7F81 53 7F                        dw      OPEN_FH                 // open
 299+ 7F83 3F 6A A6 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7F87 78 67 12 6A                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7F8B D0 68                        dw      EXIT                    // ;
 302+ 7F8D
 303+ 7F8D              //  ______________________________________________________________________
 304+ 7F8D              //
 305+ 7F8D              // needs
 306+ 7F8D              // check for cccc exists in vocabulary
 307+ 7F8D              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7F8D
 309+ 7F8D              // temp filename cccc.f as counted string zero-padded
 310+ 7F8D                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7F8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7F8D             >
 310+ 7F8D             >                // dummy db directives used to calculate length of namec
 310+ 7F8D 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7F91 53 2D 57    >
 310+ 7F94             >len_NFA         defl    $ - temp_NFA
 310+ 7F94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7F8D             >
 310+ 7F8D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7F8E 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7F92 53 2D 57    >
 310+ 7F95             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7F94 D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7F95             >
 310+ 7F95 74 7F       >                dw      last_NFA            // Link to previous definition Name
 310+ 7F97             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7F97 CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7F9A             >
 310+ 7F9A             >
 310+ 7F9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7F9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7F9A             >
 310+ 7F9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7F9A 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7FBD              // temp complete path+filename
 313+ 7FBD                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7FBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7FBD             >
 313+ 7FBD             >                // dummy db directives used to calculate length of namec
 313+ 7FBD 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7FC1 53 2D 46 4E >
 313+ 7FC5             >len_NFA         defl    $ - temp_NFA
 313+ 7FC5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7FBD             >
 313+ 7FBD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7FBE 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7FC2 53 2D 46 4E >
 313+ 7FC6             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7FC5 CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7FC6             >
 313+ 7FC6 8D 7F       >                dw      last_NFA            // Link to previous definition Name
 313+ 7FC8             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7FC8 CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7FCB             >
 313+ 7FCB             >
 313+ 7FCB             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7FCB             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7FCB             >
 313+ 7FCB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7FCB 00 00 00...                  ds      40
 315+ 7FF3              // constant path
 316+ 7FF3                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 7FF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FF3             >
 316+ 7FF3             >                // dummy db directives used to calculate length of namec
 316+ 7FF3 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 7FF7 53 2D 49 4E >
 316+ 7FFB 43          >
 316+ 7FFC             >len_NFA         defl    $ - temp_NFA
 316+ 7FFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FF3             >
 316+ 7FF3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FF4 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 7FF8 53 2D 49 4E >
 316+ 7FFC 43          >
 316+ 7FFD             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FFC C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FFD             >
 316+ 7FFD BD 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FFF             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FFF CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 8002             >
 316+ 8002             >
 316+ 8002             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 8002             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 8002             >
 316+ 8002             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 8002 04 69 6E 63                  db      4, "inc/", 0
 317+ 8006 2F 00
 318+ 8008                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 318+ 8008             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 8008             >
 318+ 8008             >                // dummy db directives used to calculate length of namec
 318+ 8008 4E 45 45 44 >                db      "NEEDS-LIB"
 318+ 800C 53 2D 4C 49 >
 318+ 8010 42          >
 318+ 8011             >len_NFA         defl    $ - temp_NFA
 318+ 8011             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 8008             >
 318+ 8008 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 8009 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 318+ 800D 53 2D 4C 49 >
 318+ 8011 42          >
 318+ 8012             >                org     $-1                 // alter last byte of Name just above to set
 318+ 8011 C2          >                db      {b $} | END_BIT     // msb as name end
 318+ 8012             >
 318+ 8012 F3 7F       >                dw      last_NFA            // Link to previous definition Name
 318+ 8014             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 8014 CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 318+ 8017             >
 318+ 8017             >
 318+ 8017             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 8017             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 8017             >
 318+ 8017             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 8017 04 6C 69 62                  db      4, "lib/", 0
 319+ 801B 2F 00
 320+ 801D
 321+ 801D              // Concatenate path at a and filename and include it
 322+ 801D              // No error is issued if filename doesn't exist.
 323+ 801D                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 323+ 801D             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 323+ 801D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 801D             >
 323+ 801D             >                // dummy db directives used to calculate length of namec
 323+ 801D 4E 45 45 44 >                db      "NEEDS/"
 323+ 8021 53 2F       >
 323+ 8023             >len_NFA         defl    $ - temp_NFA
 323+ 8023             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 801D             >
 323+ 801D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 801E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 323+ 8022 53 2F       >
 323+ 8024             >                org     $-1                 // alter last byte of Name just above to set
 323+ 8023 AF          >                db      {b $} | END_BIT     // msb as name end
 323+ 8024             >
 323+ 8024 08 80       >                dw      last_NFA            // Link to previous definition Name
 323+ 8026             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 8026 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 323+ 8029             >
 323+ 8029             >
 323+ 8029             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 8029             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 8029             >
 323+ 8029             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 8029 B1 71 26 6A                  dw      COUNT, TUCK             // n a n
 325+ 802D C8 7F 34 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 325+ 8031 D2 67
 326+ 8033 C8 7F 6B 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 327+ 8037 97 7F 90 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 327+ 803B 34 6A
 328+ 803D A5 63 23 00                  dw      LIT, 35
 329+ 8041 D2 67                        dw      CMOVE
 330+ 8043 C8 7F                        dw      NEEDS_FN
 331+ 8045 94 73 1E 6C                  dw      PAD, ONE, F_OPEN
 331+ 8049 90 67
 332+ 804B 2D 69                        dw      ZEQUAL
 333+ 804D D8 63                        dw      ZBRANCH
 334+ 804F 08 00                        dw      Needs_1 - $
 335+ 8051 A6 7E                        dw          F_INCLUDE
 336+ 8053 C3 63                        dw      BRANCH
 337+ 8055 04 00                        dw      Needs_2 - $
 338+ 8057              Needs_1:
 339+ 8057              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 340+ 8057              //              dw          LIT, 43, MESSAGE
 341+ 8057 12 6A                        dw          DROP
 342+ 8059              Needs_2:
 343+ 8059 D0 68                        dw      EXIT                    // ;
 344+ 805B
 345+ 805B
 346+ 805B                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 346+ 805B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 805B             >
 346+ 805B             >                // dummy db directives used to calculate length of namec
 346+ 805B 4E 43 44 4D >                db      "NCDM"
 346+ 805F             >len_NFA         defl    $ - temp_NFA
 346+ 805F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 805B             >
 346+ 805B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 805C 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 346+ 8060             >                org     $-1                 // alter last byte of Name just above to set
 346+ 805F CD          >                db      {b $} | END_BIT     // msb as name end
 346+ 8060             >
 346+ 8060 1D 80       >                dw      last_NFA            // Link to previous definition Name
 346+ 8062             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 8062 CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 346+ 8065             >
 346+ 8065             >
 346+ 8065             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 8065             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 8065             >
 346+ 8065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 8065 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 347+ 8069 24 5F 7B 7D
 347+ 806D 7E
 348+ 806E
 349+ 806E                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 349+ 806E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 806E             >
 349+ 806E             >                // dummy db directives used to calculate length of namec
 349+ 806E 4E 44 4F 4D >                db      "NDOM"
 349+ 8072             >len_NFA         defl    $ - temp_NFA
 349+ 8072             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 806E             >
 349+ 806E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 806F 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 349+ 8073             >                org     $-1                 // alter last byte of Name just above to set
 349+ 8072 CD          >                db      {b $} | END_BIT     // msb as name end
 349+ 8073             >
 349+ 8073 5B 80       >                dw      last_NFA            // Link to previous definition Name
 349+ 8075             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 8075 CD 71 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 349+ 8078             >
 349+ 8078             >
 349+ 8078             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 8078             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 8078             >
 349+ 8078             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 8078 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 350+ 807C 7C 5C 3C 3E
 350+ 8080 22
 351+ 8081
 352+ 8081
 353+ 8081              // Replace illegal character in filename using the map here above
 354+ 8081              // at the moment we need only  "
 355+ 8081                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 355+ 8081             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 355+ 8081             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 8081             >
 355+ 8081             >                // dummy db directives used to calculate length of namec
 355+ 8081 4E 45 45 44 >                db      "NEEDS-CH"
 355+ 8085 53 2D 43 48 >
 355+ 8089             >len_NFA         defl    $ - temp_NFA
 355+ 8089             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 8081             >
 355+ 8081 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 8082 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 355+ 8086 53 2D 43 48 >
 355+ 808A             >                org     $-1                 // alter last byte of Name just above to set
 355+ 8089 C8          >                db      {b $} | END_BIT     // msb as name end
 355+ 808A             >
 355+ 808A 6E 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 808C             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 808C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 808F             >
 355+ 808F             >
 355+ 808F             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 808F             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 808F             >
 355+ 808F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 808F B1 71 C7 71                  dw      COUNT, BOUNDS
 357+ 8093 58 64                        dw      C_DO
 358+ 8095              Needs_3:
 359+ 8095 62 80 75 80                  dw          NCDM, NDOM, LIT, 9
 359+ 8099 A5 63 09 00
 360+ 809D 61 64 D7 6A                  dw          I, CFETCH
 361+ 80A1 6D 65                        dw          C_MAP
 362+ 80A3 61 64 E3 6A                  dw          I, CSTORE
 363+ 80A7              Needs_4:
 364+ 80A7 EB 63                        dw      C_LOOP
 365+ 80A9 EC FF                        dw      Needs_3 - $
 366+ 80AB D0 68                        dw      EXIT
 367+ 80AD
 368+ 80AD
 369+ 80AD              // include  "path/cccc.f" if cccc is not defined
 370+ 80AD              // filename cccc.f is temporary stored at NEEDS-W
 371+ 80AD                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 371+ 80AD             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 371+ 80AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 80AD             >
 371+ 80AD             >                // dummy db directives used to calculate length of namec
 371+ 80AD 4E 45 45 44 >                db      "NEEDS-F"
 371+ 80B1 53 2D 46    >
 371+ 80B4             >len_NFA         defl    $ - temp_NFA
 371+ 80B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 80AD             >
 371+ 80AD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 80AE 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 371+ 80B2 53 2D 46    >
 371+ 80B5             >                org     $-1                 // alter last byte of Name just above to set
 371+ 80B4 C6          >                db      {b $} | END_BIT     // msb as name end
 371+ 80B5             >
 371+ 80B5 81 80       >                dw      last_NFA            // Link to previous definition Name
 371+ 80B7             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 80B7 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 80BA             >
 371+ 80BA             >
 371+ 80BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 80BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 80BA             >
 371+ 80BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 80BA 64 75                        dw      LFIND
 373+ 80BC D8 63                        dw      ZBRANCH
 374+ 80BE 0A 00                        dw      Needs_5 - $
 375+ 80C0
 376+ 80C0 12 6A 78 6A                  dw          DROP, TWO_DROP
 377+ 80C4 C3 63                        dw      BRANCH
 378+ 80C6 2C 00                        dw      Needs_6 - $
 379+ 80C8              Needs_5:
 380+ 80C8 97 7F                        dw          NEEDS_W
 381+ 80CA A5 63 23 00                  dw          LIT, 35
 382+ 80CE 5B 73                        dw          ERASE                   // a
 383+ 80D0 22 6E D7 6A                  dw          HERE, CFETCH, ONE_PLUS  // a n
 383+ 80D4 90 69
 384+ 80D6 22 6E 04 6A                  dw          HERE, OVER              // a n here n
 385+ 80DA 97 7F 34 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 385+ 80DE D2 67
 386+ 80E0 97 7F 8C 80                  dw          NEEDS_W, NEEDS_CHECK
 387+ 80E4 97 7F 6B 69                  dw          NEEDS_W, PLUS           // a a1+1
 388+ 80E8 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 389+ 80EC 34 6A CB 6A                  dw          SWAP, STORE             // a
 390+ 80F0 26 80                        dw          NEEDS_SLASH
 391+ 80F2              Needs_6:
 392+ 80F2 D0 68                        dw      EXIT
 393+ 80F4
 394+ 80F4
 395+ 80F4              // check for cccc exists in vocabulary
 396+ 80F4              // if it doesn't then  INCLUDE  inc/cccc.F
 397+ 80F4              // search in inc subdirectory
 398+ 80F4                              Colon_Def NEEDS, "NEEDS", is_normal
 398+ 80F4             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 398+ 80F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ 80F4             >
 398+ 80F4             >                // dummy db directives used to calculate length of namec
 398+ 80F4 4E 45 45 44 >                db      "NEEDS"
 398+ 80F8 53          >
 398+ 80F9             >len_NFA         defl    $ - temp_NFA
 398+ 80F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ 80F4             >
 398+ 80F4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ 80F5 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 398+ 80F9 53          >
 398+ 80FA             >                org     $-1                 // alter last byte of Name just above to set
 398+ 80F9 D3          >                db      {b $} | END_BIT     // msb as name end
 398+ 80FA             >
 398+ 80FA AD 80       >                dw      last_NFA            // Link to previous definition Name
 398+ 80FC             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 80FC CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 80FF             >
 398+ 80FF             >
 398+ 80FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 80FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 80FF             >
 398+ 80FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 80FF 36 6D C0 6A                  dw      TO_IN, FETCH
 400+ 8103 3F 6A                        dw      DUP
 401+ 8105 FF 7F B7 80                  dw      NEEDS_INC, NEEDS_PATH
 402+ 8109 36 6D CB 6A                  dw      TO_IN, STORE
 403+ 810D 14 80 B7 80                  dw      NEEDS_LIB, NEEDS_PATH
 404+ 8111 36 6D CB 6A                  dw      TO_IN, STORE
 405+ 8115 64 75                        dw      LFIND
 406+ 8117 D8 63                        dw      ZBRANCH
 407+ 8119 08 00                        dw      Needs_10 - $
 408+ 811B 78 6A                        dw          TWO_DROP
 409+ 811D C3 63                        dw      BRANCH
 410+ 811F 10 00                        dw      Needs_11 - $
 411+ 8121              Needs_10:
 412+ 8121 97 7F B1 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 412+ 8125 D9 71 32 6F
 413+ 8129 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 413+ 812D 5E 7A
 414+ 812F              Needs_11:
 415+ 812F D0 68                        dw      EXIT
 416+ 8131
 417+ 8131
 418+ 8131              //  ______________________________________________________________________
 419+ 8131              //
 420+ 8131              // load+        n --
 421+ 8131                              Colon_Def LOAD_P, "LOAD+", is_normal
 421+ 8131             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 421+ 8131             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 8131             >
 421+ 8131             >                // dummy db directives used to calculate length of namec
 421+ 8131 4C 4F 41 44 >                db      "LOAD+"
 421+ 8135 2B          >
 421+ 8136             >len_NFA         defl    $ - temp_NFA
 421+ 8136             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 8131             >
 421+ 8131 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 8132 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 421+ 8136 2B          >
 421+ 8137             >                org     $-1                 // alter last byte of Name just above to set
 421+ 8136 AB          >                db      {b $} | END_BIT     // msb as name end
 421+ 8137             >
 421+ 8137 F4 80       >                dw      last_NFA            // Link to previous definition Name
 421+ 8139             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 8139 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 813C             >
 421+ 813C             >
 421+ 813C             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 813C             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 813C             >
 421+ 813C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 813C 2C 6D C0 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 422+ 8140 FA 68
 423+ 8142 36 6D C0 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 423+ 8146 FA 68
 424+ 8148
 425+ 8148 15 6C 36 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 425+ 814C CB 6A
 426+ 814E 69 6C BD 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 426+ 8152 2C 6D CB 6A
 427+ 8156 62 77                        dw      INTERPRET               // interpret
 428+ 8158
 429+ 8158 0C 69 36 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 429+ 815C CB 6A
 430+ 815E 0C 69 2C 6D                  dw      R_TO, BLK, STORE        // r> blk !
 430+ 8162 CB 6A
 431+ 8164 D0 68                        dw      EXIT                    // ;
 432+ 8166
 433+ 8166              //  ______________________________________________________________________
 434+ 8166              //
 435+ 8166              // -->          --
 436+ 8166                              Colon_Def LOAD_NEXT, "-->", is_immediate
 436+ 8166             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 436+ 8166             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 8166             >
 436+ 8166             >                // dummy db directives used to calculate length of namec
 436+ 8166 2D 2D 3E    >                db      "-->"
 436+ 8169             >len_NFA         defl    $ - temp_NFA
 436+ 8169             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 8166             >
 436+ 8166 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 8167 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 436+ 816A             >                org     $-1                 // alter last byte of Name just above to set
 436+ 8169 BE          >                db      {b $} | END_BIT     // msb as name end
 436+ 816A             >
 436+ 816A 31 81       >                dw      last_NFA            // Link to previous definition Name
 436+ 816C             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 816C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 816F             >
 436+ 816F             >
 436+ 816F             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 816F             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 816F             >
 436+ 816F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 816F 7A 70                        dw      QLOADING                // ?loading
 438+ 8171 15 6C 36 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 438+ 8175 CB 6A
 439+ 8177 69 6C                        dw      BSCR                    // b/scr
 440+ 8179 2C 6D C0 6A                  dw      BLK, FETCH              // blk @
 441+ 817D 04 6A                        dw      OVER                    // over
 442+ 817F ED 79                        dw      MOD                     // mod
 443+ 8181 77 6E                        dw      SUBTRACT                // -
 444+ 8183 2C 6D A1 6A                  dw      BLK, PLUSSTORE          // +!
 445+ 8187 D0 68                        dw      EXIT                    // ;
 446+ 8189
 447+ 8189              //  ______________________________________________________________________
 448+ 8189              //
 449+ 8189              // '            -- xt
 450+ 8189                              Colon_Def TICK, "'", is_normal
 450+ 8189             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 450+ 8189             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ 8189             >
 450+ 8189             >                // dummy db directives used to calculate length of namec
 450+ 8189 27          >                db      "'"
 450+ 818A             >len_NFA         defl    $ - temp_NFA
 450+ 818A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ 8189             >
 450+ 8189 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ 818A 27          >                db      "'"               // name string in 7-bit ascii, but
 450+ 818B             >                org     $-1                 // alter last byte of Name just above to set
 450+ 818A A7          >                db      {b $} | END_BIT     // msb as name end
 450+ 818B             >
 450+ 818B 66 81       >                dw      last_NFA            // Link to previous definition Name
 450+ 818D             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 818D CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 8190             >
 450+ 8190             >
 450+ 8190             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 8190             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 8190             >
 450+ 8190             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 8190 64 75                        dw      LFIND                   // -find
 452+ 8192 2D 69                        dw      ZEQUAL                  // 0=
 453+ 8194 15 6C FC 6F                  dw      ZERO, QERROR            // 0 ?error
 454+ 8198 12 6A                        dw      DROP                    // drop
 455+ 819A D0 68                        dw      EXIT                    // ;
 456+ 819C
 457+ 819C              //  ______________________________________________________________________
 458+ 819C              //
 459+ 819C              // forget       -- cccc
 460+ 819C                              Colon_Def FORGET, "FORGET", is_normal
 460+ 819C             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 460+ 819C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 819C             >
 460+ 819C             >                // dummy db directives used to calculate length of namec
 460+ 819C 46 4F 52 47 >                db      "FORGET"
 460+ 81A0 45 54       >
 460+ 81A2             >len_NFA         defl    $ - temp_NFA
 460+ 81A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 819C             >
 460+ 819C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 819D 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 460+ 81A1 45 54       >
 460+ 81A3             >                org     $-1                 // alter last byte of Name just above to set
 460+ 81A2 D4          >                db      {b $} | END_BIT     // msb as name end
 460+ 81A3             >
 460+ 81A3 89 81       >                dw      last_NFA            // Link to previous definition Name
 460+ 81A5             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 81A5 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 81A8             >
 460+ 81A8             >
 460+ 81A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 81A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 81A8             >
 460+ 81A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 81A8 73 6D C0 6A                  dw      CURRENT, FETCH          // current @
 462+ 81AC 65 6D C0 6A                  dw      CONTEXT, FETCH          // context @
 463+ 81B0 77 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 463+ 81B4 17 00 FC 6F
 464+ 81B8 8D 81 C7 6F                  dw      TICK, TO_BODY           // ' >body
 465+ 81BC 3F 6A DC 6C                  dw      DUP, FENCE, FETCH       // dup fence @
 465+ 81C0 C0 6A
 466+ 81C2 91 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 466+ 81C6 15 00 FC 6F
 467+ 81CA 3F 6A 9B 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 467+ 81CE E5 6C CB 6A
 468+ 81D2 7B 6F C0 6A                  dw      LFA, FETCH              // lfa @
 469+ 81D6 65 6D C0 6A                  dw      CONTEXT, FETCH, STORE   // context @ !
 469+ 81DA CB 6A
 470+ 81DC D0 68                        dw      EXIT                    // ;
 471+ 81DE
 472+ 81DE              //  ______________________________________________________________________
 473+ 81DE              //
 474+ 81DE              // marker       -- cccc
 475+ 81DE                              Colon_Def MARKER, "MARKER", is_immediate
 475+ 81DE             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 475+ 81DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 81DE             >
 475+ 81DE             >                // dummy db directives used to calculate length of namec
 475+ 81DE 4D 41 52 4B >                db      "MARKER"
 475+ 81E2 45 52       >
 475+ 81E4             >len_NFA         defl    $ - temp_NFA
 475+ 81E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 81DE             >
 475+ 81DE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 81DF 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 475+ 81E3 45 52       >
 475+ 81E5             >                org     $-1                 // alter last byte of Name just above to set
 475+ 81E4 D2          >                db      {b $} | END_BIT     // msb as name end
 475+ 81E5             >
 475+ 81E5 9C 81       >                dw      last_NFA            // Link to previous definition Name
 475+ 81E7             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 81E7 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 81EA             >
 475+ 81EA             >
 475+ 81EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 81EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 81EA             >
 475+ 81EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 81EA 79 71                        dw      CBUILDS
 477+ 81EC F4 6C C0 6A                  dw      VOC_LINK, FETCH, COMMA
 477+ 81F0 40 6E
 478+ 81F2 73 6D C0 6A                  dw      CURRENT, FETCH, COMMA
 478+ 81F6 40 6E
 479+ 81F8 65 6D C0 6A                  dw      CONTEXT, FETCH, COMMA
 479+ 81FC 40 6E
 480+ 81FE 6A 6F 40 6E                  dw      LATEST, COMMA
 481+ 8202 6A 6F B0 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 481+ 8206 7B 6F C0 6A
 481+ 820A 40 6E
 482+ 820C 8A 71                        dw      DOES_TO
 483+ 820E 3F 6A C0 6A                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 483+ 8212 F4 6C CB 6A
 483+ 8216 B2 69
 484+ 8218 3F 6A C0 6A                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 484+ 821C 73 6D CB 6A
 484+ 8220 B2 69
 485+ 8222 3F 6A C0 6A                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 485+ 8226 65 6D CB 6A
 485+ 822A B2 69
 486+ 822C 3F 6A C0 6A                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 486+ 8230 E5 6C CB 6A
 486+ 8234 B2 69
 487+ 8236 C0 6A 73 6D                  dw           FETCH, CURRENT, FETCH, STORE
 487+ 823A C0 6A CB 6A
 488+ 823E D0 68                        dw      EXIT
 489+ 8240
 490+ 8240              //  ______________________________________________________________________
 491+ 8240              //
 492+ 8240              // spaces       n --
 493+ 8240                              Colon_Def SPACES, "SPACES", is_normal
 493+ 8240             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 493+ 8240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 8240             >
 493+ 8240             >                // dummy db directives used to calculate length of namec
 493+ 8240 53 50 41 43 >                db      "SPACES"
 493+ 8244 45 53       >
 493+ 8246             >len_NFA         defl    $ - temp_NFA
 493+ 8246             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 8240             >
 493+ 8240 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 8241 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 493+ 8245 45 53       >
 493+ 8247             >                org     $-1                 // alter last byte of Name just above to set
 493+ 8246 D3          >                db      {b $} | END_BIT     // msb as name end
 493+ 8247             >
 493+ 8247 DE 81       >                dw      last_NFA            // Link to previous definition Name
 493+ 8249             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 8249 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 824C             >
 493+ 824C             >
 493+ 824C             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 824C             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 824C             >
 493+ 824C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 824C 15 6C E3 6E                  dw      ZERO, MAX
 495+ 8250 15 6C 2C 64                  dw      ZERO, C_Q_DO
 496+ 8254 08 00                        dw      Spaces_Leave - $
 497+ 8256              Spaces_Loop:
 498+ 8256 32 6F                        dw          SPACE
 499+ 8258 EB 63                        dw      C_LOOP
 500+ 825A FC FF                        dw      Spaces_Loop - $
 501+ 825C              Spaces_Leave:
 502+ 825C D0 68                        dw      EXIT                    // ;
 503+ 825E
 504+ 825E              //  ______________________________________________________________________
 505+ 825E              //
 506+ 825E              // <#           --
 507+ 825E                              Colon_Def BEGIN_DASH, "<#", is_normal
 507+ 825E             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 507+ 825E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 825E             >
 507+ 825E             >                // dummy db directives used to calculate length of namec
 507+ 825E 3C 23       >                db      "<#"
 507+ 8260             >len_NFA         defl    $ - temp_NFA
 507+ 8260             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 825E             >
 507+ 825E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 825F 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 507+ 8261             >                org     $-1                 // alter last byte of Name just above to set
 507+ 8260 A3          >                db      {b $} | END_BIT     // msb as name end
 507+ 8261             >
 507+ 8261 40 82       >                dw      last_NFA            // Link to previous definition Name
 507+ 8263             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 8263 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 8266             >
 507+ 8266             >
 507+ 8266             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 8266             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 8266             >
 507+ 8266             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 8266 94 73 BB 6D                  dw      PAD, HLD, STORE
 508+ 826A CB 6A
 509+ 826C D0 68                        dw      EXIT
 510+ 826E
 511+ 826E              //  ______________________________________________________________________
 512+ 826E              //
 513+ 826E              // #>           --
 514+ 826E                              Colon_Def DASH_END, "#>", is_normal
 514+ 826E             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 514+ 826E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 826E             >
 514+ 826E             >                // dummy db directives used to calculate length of namec
 514+ 826E 23 3E       >                db      "#>"
 514+ 8270             >len_NFA         defl    $ - temp_NFA
 514+ 8270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 826E             >
 514+ 826E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 826F 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 514+ 8271             >                org     $-1                 // alter last byte of Name just above to set
 514+ 8270 BE          >                db      {b $} | END_BIT     // msb as name end
 514+ 8271             >
 514+ 8271 5E 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 8273             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 8273 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 8276             >
 514+ 8276             >
 514+ 8276             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 8276             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 8276             >
 514+ 8276             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 8276 78 6A                        dw      TWO_DROP
 516+ 8278 BB 6D C0 6A                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 516+ 827C 94 73 04 6A
 516+ 8280 77 6E
 517+ 8282 D0 68                        dw      EXIT
 518+ 8284
 519+ 8284              //  ______________________________________________________________________
 520+ 8284              //
 521+ 8284              // sign         n d -- d
 522+ 8284                              Colon_Def SIGN, "SIGN", is_normal
 522+ 8284             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 522+ 8284             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 8284             >
 522+ 8284             >                // dummy db directives used to calculate length of namec
 522+ 8284 53 49 47 4E >                db      "SIGN"
 522+ 8288             >len_NFA         defl    $ - temp_NFA
 522+ 8288             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 8284             >
 522+ 8284 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 8285 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 522+ 8289             >                org     $-1                 // alter last byte of Name just above to set
 522+ 8288 CE          >                db      {b $} | END_BIT     // msb as name end
 522+ 8289             >
 522+ 8289 6E 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 828B             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 828B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 828E             >
 522+ 828E             >
 522+ 828E             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 828E             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 828E             >
 522+ 828E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 828E 4A 6A 47 69                  dw      ROT, ZLESS
 524+ 8292 D8 63                        dw      ZBRANCH
 525+ 8294 08 00                        dw      Sign_Endif - $
 526+ 8296 A5 63 2D 00                  dw          LIT, 45, HOLD
 526+ 829A 7D 73
 527+ 829C              Sign_Endif:
 528+ 829C D0 68                        dw      EXIT
 529+ 829E
 530+ 829E              //  ______________________________________________________________________
 531+ 829E              //
 532+ 829E              // #           d1 -- d2
 533+ 829E                              Colon_Def DASH, "#", is_normal
 533+ 829E             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 533+ 829E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 829E             >
 533+ 829E             >                // dummy db directives used to calculate length of namec
 533+ 829E 23          >                db      "#"
 533+ 829F             >len_NFA         defl    $ - temp_NFA
 533+ 829F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 829E             >
 533+ 829E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 829F 23          >                db      "#"               // name string in 7-bit ascii, but
 533+ 82A0             >                org     $-1                 // alter last byte of Name just above to set
 533+ 829F A3          >                db      {b $} | END_BIT     // msb as name end
 533+ 82A0             >
 533+ 82A0 84 82       >                dw      last_NFA            // Link to previous definition Name
 533+ 82A2             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 82A2 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 82A5             >
 533+ 82A5             >
 533+ 82A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 82A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 82A5             >
 533+ 82A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 82A5 8A 6D C0 6A                  dw      BASE, FETCH
 535+ 82A9
 536+ 82A9 FA 68                        dw      TO_R                    // >r           ( ud1 )
 537+ 82AB 15 6C 1E 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 537+ 82AF 32 68
 538+ 82B1 0C 69 34 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 538+ 82B5 FA 68
 539+ 82B7 32 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 540+ 82B9 0C 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 541+ 82BB
 542+ 82BB 4A 6A                        dw      ROT
 543+ 82BD A5 63 09 00                  dw      LIT, 9, OVER, LESS
 543+ 82C1 04 6A A3 6E
 544+ 82C5 D8 63                        dw      ZBRANCH
 545+ 82C7 08 00                        dw      Dash_Endif - $
 546+ 82C9 A5 63 07 00                  dw          LIT, 7, PLUS
 546+ 82CD 6B 69
 547+ 82CF              Dash_Endif:
 548+ 82CF
 549+ 82CF A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 549+ 82D3 6B 69 7D 73
 550+ 82D7 D0 68                        dw      EXIT
 551+ 82D9
 552+ 82D9              //  ______________________________________________________________________
 553+ 82D9              //
 554+ 82D9              // #s           d1 -- d2
 555+ 82D9                              Colon_Def DASHES, "#S", is_normal
 555+ 82D9             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 555+ 82D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 82D9             >
 555+ 82D9             >                // dummy db directives used to calculate length of namec
 555+ 82D9 23 53       >                db      "#S"
 555+ 82DB             >len_NFA         defl    $ - temp_NFA
 555+ 82DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 82D9             >
 555+ 82D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 82DA 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 555+ 82DC             >                org     $-1                 // alter last byte of Name just above to set
 555+ 82DB D3          >                db      {b $} | END_BIT     // msb as name end
 555+ 82DC             >
 555+ 82DC 9E 82       >                dw      last_NFA            // Link to previous definition Name
 555+ 82DE             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 82DE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 82E1             >
 555+ 82E1             >
 555+ 82E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 82E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 82E1             >
 555+ 82E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 82E1              Dashes_Begin:
 557+ 82E1 A2 82 94 6A                  dw      DASH, TWO_DUP
 558+ 82E5 7E 68 2D 69                  dw          OR_OP, ZEQUAL
 559+ 82E9 D8 63                        dw      ZBRANCH
 560+ 82EB F6 FF                        dw      Dashes_Begin - $
 561+ 82ED D0 68                        dw      EXIT
 562+ 82EF
 563+ 82EF              //  ______________________________________________________________________
 564+ 82EF              //
 565+ 82EF              // d.r          d n --
 566+ 82EF                              Colon_Def D_DOT_R, "D.R", is_normal
 566+ 82EF             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 566+ 82EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 82EF             >
 566+ 82EF             >                // dummy db directives used to calculate length of namec
 566+ 82EF 44 2E 52    >                db      "D.R"
 566+ 82F2             >len_NFA         defl    $ - temp_NFA
 566+ 82F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 82EF             >
 566+ 82EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 82F0 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 566+ 82F3             >                org     $-1                 // alter last byte of Name just above to set
 566+ 82F2 D2          >                db      {b $} | END_BIT     // msb as name end
 566+ 82F3             >
 566+ 82F3 D9 82       >                dw      last_NFA            // Link to previous definition Name
 566+ 82F5             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 82F5 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 82F8             >
 566+ 82F8             >
 566+ 82F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 82F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 82F8             >
 566+ 82F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 82F8 FA 68                        dw      TO_R
 568+ 82FA 26 6A 5B 79                  dw      TUCK, DABS
 569+ 82FE 63 82 DE 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 569+ 8302 8B 82 73 82
 570+ 8306 0C 69                        dw      R_TO
 571+ 8308 04 6A 77 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 571+ 830C 49 82 D9 71
 572+ 8310 D0 68                        dw      EXIT
 573+ 8312
 574+ 8312              //  ______________________________________________________________________
 575+ 8312              //
 576+ 8312              // .r           n1 n2 --
 577+ 8312                              Colon_Def DOT_R, ".R", is_normal
 577+ 8312             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 577+ 8312             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ 8312             >
 577+ 8312             >                // dummy db directives used to calculate length of namec
 577+ 8312 2E 52       >                db      ".R"
 577+ 8314             >len_NFA         defl    $ - temp_NFA
 577+ 8314             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ 8312             >
 577+ 8312 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ 8313 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 577+ 8315             >                org     $-1                 // alter last byte of Name just above to set
 577+ 8314 D2          >                db      {b $} | END_BIT     // msb as name end
 577+ 8315             >
 577+ 8315 EF 82       >                dw      last_NFA            // Link to previous definition Name
 577+ 8317             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 8317 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 831A             >
 577+ 831A             >
 577+ 831A             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 831A             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 831A             >
 577+ 831A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 831A FA 68                        dw      TO_R
 579+ 831C 65 6E 0C 69                  dw      S_TO_D, R_TO
 580+ 8320 F5 82                        dw      D_DOT_R
 581+ 8322 D0 68                        dw      EXIT
 582+ 8324
 583+ 8324              //  ______________________________________________________________________
 584+ 8324              //
 585+ 8324              // d.           d --
 586+ 8324                              Colon_Def D_DOT, "D.", is_normal
 586+ 8324             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 586+ 8324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 8324             >
 586+ 8324             >                // dummy db directives used to calculate length of namec
 586+ 8324 44 2E       >                db      "D."
 586+ 8326             >len_NFA         defl    $ - temp_NFA
 586+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 8324             >
 586+ 8324 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 8325 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 586+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 586+ 8326 AE          >                db      {b $} | END_BIT     // msb as name end
 586+ 8327             >
 586+ 8327 12 83       >                dw      last_NFA            // Link to previous definition Name
 586+ 8329             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 8329 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 832C             >
 586+ 832C             >
 586+ 832C             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 832C             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 832C             >
 586+ 832C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 832C 15 6C F5 82                  dw      ZERO, D_DOT_R, SPACE
 587+ 8330 32 6F
 588+ 8332 D0 68                        dw      EXIT
 589+ 8334
 590+ 8334              //  ______________________________________________________________________
 591+ 8334              //
 592+ 8334              // .            n --
 593+ 8334                              Colon_Def DOT, ".", is_normal
 593+ 8334             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 593+ 8334             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 8334             >
 593+ 8334             >                // dummy db directives used to calculate length of namec
 593+ 8334 2E          >                db      "."
 593+ 8335             >len_NFA         defl    $ - temp_NFA
 593+ 8335             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 8334             >
 593+ 8334 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 8335 2E          >                db      "."               // name string in 7-bit ascii, but
 593+ 8336             >                org     $-1                 // alter last byte of Name just above to set
 593+ 8335 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 8336             >
 593+ 8336 24 83       >                dw      last_NFA            // Link to previous definition Name
 593+ 8338             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 8338 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 833B             >
 593+ 833B             >
 593+ 833B             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 833B             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 833B             >
 593+ 833B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 833B 65 6E 29 83                  dw      S_TO_D, D_DOT
 595+ 833F D0 68                        dw      EXIT
 596+ 8341
 597+ 8341              //  ______________________________________________________________________
 598+ 8341              //
 599+ 8341              // ?            n --
 600+ 8341                              Colon_Def QUESTION, "?", is_normal
 600+ 8341             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 600+ 8341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 8341             >
 600+ 8341             >                // dummy db directives used to calculate length of namec
 600+ 8341 3F          >                db      "?"
 600+ 8342             >len_NFA         defl    $ - temp_NFA
 600+ 8342             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 8341             >
 600+ 8341 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 8342 3F          >                db      "?"               // name string in 7-bit ascii, but
 600+ 8343             >                org     $-1                 // alter last byte of Name just above to set
 600+ 8342 BF          >                db      {b $} | END_BIT     // msb as name end
 600+ 8343             >
 600+ 8343 34 83       >                dw      last_NFA            // Link to previous definition Name
 600+ 8345             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 8345 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 8348             >
 600+ 8348             >
 600+ 8348             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 8348             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 8348             >
 600+ 8348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 8348 C0 6A 38 83                  dw      FETCH, DOT
 602+ 834C D0 68                        dw      EXIT
 603+ 834E
 604+ 834E              //  ______________________________________________________________________
 605+ 834E              //
 606+ 834E              // u.           u --
 607+ 834E                              Colon_Def U_DOT, "U.", is_normal
 607+ 834E             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 607+ 834E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 834E             >
 607+ 834E             >                // dummy db directives used to calculate length of namec
 607+ 834E 55 2E       >                db      "U."
 607+ 8350             >len_NFA         defl    $ - temp_NFA
 607+ 8350             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 834E             >
 607+ 834E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 834F 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 607+ 8351             >                org     $-1                 // alter last byte of Name just above to set
 607+ 8350 AE          >                db      {b $} | END_BIT     // msb as name end
 607+ 8351             >
 607+ 8351 41 83       >                dw      last_NFA            // Link to previous definition Name
 607+ 8353             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 8353 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8356             >
 607+ 8356             >
 607+ 8356             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8356             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8356             >
 607+ 8356             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8356 15 6C 29 83                  dw      ZERO, D_DOT
 609+ 835A D0 68                        dw      EXIT
 610+ 835C
 611+ 835C              //  ______________________________________________________________________
 612+ 835C              //
 613+ 835C              // words        --
 614+ 835C                              Colon_Def WORDS, "WORDS", is_normal
 614+ 835C             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 614+ 835C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 835C             >
 614+ 835C             >                // dummy db directives used to calculate length of namec
 614+ 835C 57 4F 52 44 >                db      "WORDS"
 614+ 8360 53          >
 614+ 8361             >len_NFA         defl    $ - temp_NFA
 614+ 8361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 835C             >
 614+ 835C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 835D 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 614+ 8361 53          >
 614+ 8362             >                org     $-1                 // alter last byte of Name just above to set
 614+ 8361 D3          >                db      {b $} | END_BIT     // msb as name end
 614+ 8362             >
 614+ 8362 4E 83       >                dw      last_NFA            // Link to previous definition Name
 614+ 8364             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 8364 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 8367             >
 614+ 8367             >
 614+ 8367             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 8367             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 8367             >
 614+ 8367             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 8367 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 615+ 836B 40 6D CB 6A
 616+ 836F 65 6D C0 6A                  dw      CONTEXT, FETCH, FETCH
 616+ 8373 C0 6A
 617+ 8375              Words_Begin:
 618+ 8375 3F 6A D7 6A                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 618+ 8379 A5 63 1F 00
 618+ 837D 6E 68
 619+ 837F 40 6D C0 6A                  dw          OUT, FETCH, PLUS
 619+ 8383 6B 69
 620+ 8385 4F 6C A3 6E                  dw          CL, LESS, ZEQUAL
 620+ 8389 2D 69
 621+ 838B D8 63                        dw          ZBRANCH
 622+ 838D 0A 00                        dw          Words_Endif - $
 623+ 838F C5 67 15 6C                  dw              CR, ZERO, OUT, STORE
 623+ 8393 40 6D CB 6A
 624+ 8397              Words_Endif:
 625+ 8397 3F 6A D8 75                  dw          DUP, ID_DOT
 626+ 839B B0 6F 7B 6F                  dw          PFA, LFA, FETCH
 626+ 839F C0 6A
 627+ 83A1 3F 6A 2D 69                  dw          DUP, ZEQUAL
 628+ 83A5 DF 66 7E 68                  dw          QTERMINAL, OR_OP
 629+ 83A9 D8 63                        dw      ZBRANCH
 630+ 83AB CA FF                        dw      Words_Begin - $
 631+ 83AD 12 6A                        dw      DROP
 632+ 83AF D0 68                        dw      EXIT
 633+ 83B1
 634+ 83B1              //  ______________________________________________________________________
 635+ 83B1              //
 636+ 83B1              // list         n --
 637+ 83B1                              Colon_Def LIST, "LIST", is_normal
 637+ 83B1             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 637+ 83B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 83B1             >
 637+ 83B1             >                // dummy db directives used to calculate length of namec
 637+ 83B1 4C 49 53 54 >                db      "LIST"
 637+ 83B5             >len_NFA         defl    $ - temp_NFA
 637+ 83B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 83B1             >
 637+ 83B1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 83B2 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 637+ 83B6             >                org     $-1                 // alter last byte of Name just above to set
 637+ 83B5 D4          >                db      {b $} | END_BIT     // msb as name end
 637+ 83B6             >
 637+ 83B6 5C 83       >                dw      last_NFA            // Link to previous definition Name
 637+ 83B8             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 83B8 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 83BB             >
 637+ 83BB             >
 637+ 83BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 83BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 83BB             >
 637+ 83BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 83BB 28 71 C5 67                  dw      DECIMAL, CR
 639+ 83BF 3F 6A 4A 6D                  dw      DUP, SCR, STORE
 639+ 83C3 CB 6A
 640+ 83C5 F8 73                        dw      C_DOT_QUOTE
 641+ 83C7 05 53 63 72                  db      5, "Scr# "
 641+ 83CB 23 20
 642+ 83CD 38 83                        dw      DOT
 643+ 83CF 76 6C 15 6C                  dw      LSCR, ZERO, C_DO
 643+ 83D3 58 64
 644+ 83D5              List_Loop:
 645+ 83D5 C5 67                        dw          CR
 646+ 83D7 61 64 30 6C                  dw          I, THREE
 647+ 83DB 17 83 32 6F                  dw          DOT_R, SPACE
 648+ 83DF 61 64 4A 6D                  dw          I, SCR, FETCH, DOT_LINE
 648+ 83E3 C0 6A 49 7A
 649+ 83E7 DF 66                        dw          QTERMINAL
 650+ 83E9 D8 63                        dw          ZBRANCH
 651+ 83EB 06 00                        dw          List_Endif - $
 652+ 83ED E6 68                        dw              C_LEAVE
 653+ 83EF 06 00                        dw              List_Leave - $
 654+ 83F1              List_Endif:
 655+ 83F1 EB 63                        dw      C_LOOP
 656+ 83F3 E2 FF                        dw      List_Loop - $
 657+ 83F5              List_Leave:
 658+ 83F5 C5 67                        dw      CR
 659+ 83F7 D0 68                        dw      EXIT
 660+ 83F9
 661+ 83F9              //  ______________________________________________________________________
 662+ 83F9              //
 663+ 83F9              // index        n1 n2 --
 664+ 83F9                              Colon_Def INDEX, "INDEX", is_normal
 664+ 83F9             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 664+ 83F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 664+ 83F9             >
 664+ 83F9             >                // dummy db directives used to calculate length of namec
 664+ 83F9 49 4E 44 45 >                db      "INDEX"
 664+ 83FD 58          >
 664+ 83FE             >len_NFA         defl    $ - temp_NFA
 664+ 83FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 664+ 83F9             >
 664+ 83F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 664+ 83FA 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 664+ 83FE 58          >
 664+ 83FF             >                org     $-1                 // alter last byte of Name just above to set
 664+ 83FE D8          >                db      {b $} | END_BIT     // msb as name end
 664+ 83FF             >
 664+ 83FF B1 83       >                dw      last_NFA            // Link to previous definition Name
 664+ 8401             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 664+ 8401 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 664+ 8404             >
 664+ 8404             >
 664+ 8404             >                endif           ; ok        // for other definitions it "points" the correct handler
 664+ 8404             >                // Use of "; ok" to suppress "warning[fwdref]"
 664+ 8404             >
 664+ 8404             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 665+ 8404 90 69 34 6A                  dw      ONE_PLUS, SWAP, C_DO
 665+ 8408 58 64
 666+ 840A              Index_Loop:
 667+ 840A C5 67 61 64                  dw          CR, I, THREE
 667+ 840E 30 6C
 668+ 8410 17 83 32 6F                  dw          DOT_R, SPACE
 669+ 8414 15 6C 61 64                  dw          ZERO, I, DOT_LINE
 669+ 8418 49 7A
 670+ 841A DF 66                        dw          QTERMINAL
 671+ 841C D8 63                        dw          ZBRANCH
 672+ 841E 06 00                        dw          Index_Endif - $
 673+ 8420 E6 68                        dw              C_LEAVE
 674+ 8422 06 00                        dw              Index_Leave - $
 675+ 8424              Index_Endif:
 676+ 8424 EB 63                        dw      C_LOOP
 677+ 8426 E4 FF                        dw      Index_Loop - $
 678+ 8428              Index_Leave:
 679+ 8428 C5 67                        dw      CR
 680+ 842A D0 68                        dw      EXIT
 681+ 842C
 682+ 842C              //  ______________________________________________________________________
 683+ 842C              //
 684+ 842C              // cls          --
 685+ 842C                              Colon_Def CLS, "CLS", is_normal
 685+ 842C             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 685+ 842C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 842C             >
 685+ 842C             >                // dummy db directives used to calculate length of namec
 685+ 842C 43 4C 53    >                db      "CLS"
 685+ 842F             >len_NFA         defl    $ - temp_NFA
 685+ 842F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 842C             >
 685+ 842C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 842D 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 685+ 8430             >                org     $-1                 // alter last byte of Name just above to set
 685+ 842F D3          >                db      {b $} | END_BIT     // msb as name end
 685+ 8430             >
 685+ 8430 F9 83       >                dw      last_NFA            // Link to previous definition Name
 685+ 8432             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 8432 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 8435             >
 685+ 8435             >
 685+ 8435             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 8435             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 8435             >
 685+ 8435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 8435 A5 63 0E 00                  dw      LIT, $0E, EMITC
 686+ 8439 C4 65
 687+ 843B D0 68                        dw      EXIT
 688+ 843D
 689+ 843D              //  ______________________________________________________________________
 690+ 843D              //
 691+ 843D              // splash       --
 692+ 843D                              Colon_Def SPLASH, "SPLASH", is_normal
 692+ 843D             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 692+ 843D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 843D             >
 692+ 843D             >                // dummy db directives used to calculate length of namec
 692+ 843D 53 50 4C 41 >                db      "SPLASH"
 692+ 8441 53 48       >
 692+ 8443             >len_NFA         defl    $ - temp_NFA
 692+ 8443             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 843D             >
 692+ 843D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 843E 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 692+ 8442 53 48       >
 692+ 8444             >                org     $-1                 // alter last byte of Name just above to set
 692+ 8443 C8          >                db      {b $} | END_BIT     // msb as name end
 692+ 8444             >
 692+ 8444 2C 84       >                dw      last_NFA            // Link to previous definition Name
 692+ 8446             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 8446 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 8449             >
 692+ 8449             >
 692+ 8449             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 8449             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 8449             >
 692+ 8449             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 8449 32 84                        dw      CLS
 694+ 844B F8 73                        dw      C_DOT_QUOTE
 695+ 844D 55                           db      85
 696+ 844E 76 2D 46 6F                  db      "v-Forth 1.6 NextZXOS version", 13    // 29
 696+ 8452 72 74 68 20
 696+ 8456 31 2E 36 20
 696+ 845A 4E 65 78 74
 696+ 845E 5A 58 4F 53
 696+ 8462 20 76 65 72
 696+ 8466 73 69 6F 6E
 696+ 846A 0D
 697+ 846B 44 69 72 65                  db      "Direct Thread - build 20211006", 13  // 31
 697+ 846F 63 74 20 54
 697+ 8473 68 72 65 61
 697+ 8477 64 20 2D 20
 697+ 847B 62 75 69 6C
 697+ 847F 64 20 32 30
 697+ 8483 32 31 31 30
 697+ 8487 30 36 0D
 698+ 848A 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13        // 25
 698+ 848E 2D 32 30 32
 698+ 8492 31 20 4D 61
 698+ 8496 74 74 65 6F
 698+ 849A 20 56 69 74
 698+ 849E 74 75 72 69
 698+ 84A2 0D
 699+ 84A3 D0 68                        dw      EXIT
 700+ 84A5
 701+ 84A5              //  ______________________________________________________________________
 702+ 84A5              //
 703+ 84A5              // video        --
 704+ 84A5                              Colon_Def VIDEO, "VIDEO", is_normal
 704+ 84A5             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 704+ 84A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 84A5             >
 704+ 84A5             >                // dummy db directives used to calculate length of namec
 704+ 84A5 56 49 44 45 >                db      "VIDEO"
 704+ 84A9 4F          >
 704+ 84AA             >len_NFA         defl    $ - temp_NFA
 704+ 84AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 84A5             >
 704+ 84A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 84A6 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 704+ 84AA 4F          >
 704+ 84AB             >                org     $-1                 // alter last byte of Name just above to set
 704+ 84AA CF          >                db      {b $} | END_BIT     // msb as name end
 704+ 84AB             >
 704+ 84AB 3D 84       >                dw      last_NFA            // Link to previous definition Name
 704+ 84AD             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 84AD CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 84B0             >
 704+ 84B0             >
 704+ 84B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 84B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 84B0             >
 704+ 84B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 84B0 27 6C 3F 6A                  dw      TWO, DUP, DEVICE, STORE
 705+ 84B4 93 7A CB 6A
 706+ 84B8 C3 7A                        dw      SELECT
 707+ 84BA D0 68                        dw      EXIT
 708+ 84BC
 709+ 84BC              //  ______________________________________________________________________
 710+ 84BC              //
 711+ 84BC              // accept-      a n1 -- n2
 712+ 84BC                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 712+ 84BC             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 712+ 84BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 84BC             >
 712+ 84BC             >                // dummy db directives used to calculate length of namec
 712+ 84BC 41 43 43 45 >                db      "ACCEPT-"
 712+ 84C0 50 54 2D    >
 712+ 84C3             >len_NFA         defl    $ - temp_NFA
 712+ 84C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 84BC             >
 712+ 84BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 84BD 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 712+ 84C1 50 54 2D    >
 712+ 84C4             >                org     $-1                 // alter last byte of Name just above to set
 712+ 84C3 AD          >                db      {b $} | END_BIT     // msb as name end
 712+ 84C4             >
 712+ 84C4 A5 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 84C6             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 84C6 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 84C9             >
 712+ 84C9             >
 712+ 84C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 84C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 84C9             >
 712+ 84C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 84C9 FA 68                        dw      TO_R
 714+ 84CB 15 6C                        dw      ZERO
 715+ 84CD 34 6A                        dw      SWAP
 716+ 84CF 3F 6A                        dw      DUP
 717+ 84D1 0C 69                        dw      R_TO
 718+ 84D3 6B 69                        dw      PLUS
 719+ 84D5 34 6A                        dw      SWAP
 720+ 84D7 58 64                        dw      C_DO
 721+ 84D9              AcceptN_Loop:
 722+ 84D9 13 7B                        dw          MMU7_FETCH
 723+ 84DB A0 7A                        dw          INKEY
 724+ 84DD 34 6A 26 7B                  dw          SWAP, MMU7_STORE
 725+ 84E1 3F 6A 2D 69                  dw          DUP, ZEQUAL
 726+ 84E5 D8 63                        dw          ZBRANCH
 727+ 84E7 06 00                        dw          AcceptN_Endif_1 - $
 728+ 84E9 AD 84 27 78                  dw              VIDEO, QUIT
 729+ 84ED              AcceptN_Endif_1:
 730+ 84ED 3F 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 730+ 84F1 0D 00 83 6E
 731+ 84F5 D8 63                        dw          ZBRANCH
 732+ 84F7 06 00                        dw          AcceptN_Endif_2 - $
 733+ 84F9 12 6A 15 6C                  dw              DROP, ZERO
 734+ 84FD              AcceptN_Endif_2:
 735+ 84FD 3F 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 735+ 8501 0A 00 83 6E
 736+ 8505 D8 63                        dw          ZBRANCH
 737+ 8507 06 00                        dw          AcceptN_Endif_3 - $
 738+ 8509 12 6A 15 6C                  dw              DROP, ZERO
 739+ 850D              AcceptN_Endif_3:
 740+ 850D 61 64 E3 6A                  dw          I, CSTORE, ONE_PLUS
 740+ 8511 90 69
 741+ 8513
 742+ 8513 61 64 D7 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 742+ 8517 2D 69
 743+ 8519 D8 63                        dw          ZBRANCH
 744+ 851B 06 00                        dw              AcceptN_Endif_4 - $
 745+ 851D E6 68                        dw                  C_LEAVE     //              leave
 746+ 851F 06 00                        dw                  AcceptN_Leave - $
 747+ 8521              AcceptN_Endif_4:                                 //      endif
 748+ 8521
 749+ 8521 EB 63                        dw      C_LOOP
 750+ 8523 B6 FF                        dw      AcceptN_Loop -$
 751+ 8525              AcceptN_Leave:
 752+ 8525 D0 68                        dw      EXIT
 753+ 8527
 754+ 8527              //  ______________________________________________________________________
 755+ 8527              //
 756+ 8527              // load-        n --
 757+ 8527              // Provided that a stream n is OPEN# via the standart BASIC
 758+ 8527              // it accepts text from stream #n to the normal INTERPRET
 759+ 8527              // up to now, text-file must end with QUIT
 760+ 8527                              Colon_Def LOAD_N, "LOAD-", is_normal
 760+ 8527             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 760+ 8527             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 760+ 8527             >
 760+ 8527             >                // dummy db directives used to calculate length of namec
 760+ 8527 4C 4F 41 44 >                db      "LOAD-"
 760+ 852B 2D          >
 760+ 852C             >len_NFA         defl    $ - temp_NFA
 760+ 852C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 760+ 8527             >
 760+ 8527 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 760+ 8528 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 760+ 852C 2D          >
 760+ 852D             >                org     $-1                 // alter last byte of Name just above to set
 760+ 852C AD          >                db      {b $} | END_BIT     // msb as name end
 760+ 852D             >
 760+ 852D BC 84       >                dw      last_NFA            // Link to previous definition Name
 760+ 852F             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 760+ 852F CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 760+ 8532             >
 760+ 8532             >
 760+ 8532             >                endif           ; ok        // for other definitions it "points" the correct handler
 760+ 8532             >                // Use of "; ok" to suppress "warning[fwdref]"
 760+ 8532             >
 760+ 8532             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 761+ 8532 F5 6D CB 6A                  dw      SOURCE_ID, STORE
 762+ 8536              Load_N_Begin:
 763+ 8536 B6 6C C0 6A                  dw          TIB, FETCH
 764+ 853A 3F 6A A5 63                  dw          DUP, LIT, 80
 764+ 853E 50 00
 765+ 8540 94 6A 6D 73                  dw          TWO_DUP, BLANKS
 766+ 8544 F5 6D C0 6A                  dw          SOURCE_ID, FETCH
 767+ 8548 4B 79 3F 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 767+ 854C 93 7A CB 6A
 768+ 8550 C3 7A                        dw          SELECT
 769+ 8552 C6 84                        dw          ACCEPT_N
 770+ 8554 AD 84                        dw          VIDEO
 771+ 8556 78 6A                        dw          TWO_DROP
 772+ 8558 15 6C 2C 6D                  dw          ZERO, BLK, STORE
 772+ 855C CB 6A
 773+ 855E 15 6C 36 6D                  dw          ZERO, TO_IN, STORE
 773+ 8562 CB 6A
 774+ 8564 62 77                        dw          INTERPRET
 775+ 8566 DF 66                        dw          QTERMINAL
 776+ 8568 D8 63                        dw      ZBRANCH
 777+ 856A CC FF                        dw      Load_N_Begin - $
 778+ 856C D0 68                        dw      EXIT
 779+ 856E
 780+ 856E              //  ______________________________________________________________________
 781+ 856E              //
 782+ 856E              // load         n --
 783+ 856E              // if n is positive, it loads screen #n (as usual)
 784+ 856E              // if n is negative, it connects stream #n to the normal INTERPRET
 785+ 856E              // this second way is useful if you want to load any kind of file
 786+ 856E              // provied that it is OPEN# the usual BASIC way.
 787+ 856E                              Colon_Def LOAD, "LOAD", is_normal
 787+ 856E             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 787+ 856E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ 856E             >
 787+ 856E             >                // dummy db directives used to calculate length of namec
 787+ 856E 4C 4F 41 44 >                db      "LOAD"
 787+ 8572             >len_NFA         defl    $ - temp_NFA
 787+ 8572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ 856E             >
 787+ 856E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ 856F 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 787+ 8573             >                org     $-1                 // alter last byte of Name just above to set
 787+ 8572 C4          >                db      {b $} | END_BIT     // msb as name end
 787+ 8573             >
 787+ 8573 27 85       >                dw      last_NFA            // Link to previous definition Name
 787+ 8575             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 8575 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 8578             >
 787+ 8578             >
 787+ 8578             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 8578             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 8578             >
 787+ 8578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 8578 3F 6A 47 69                  dw      DUP, ZLESS
 789+ 857C D8 63                        dw      ZBRANCH
 790+ 857E 08 00                        dw      Load_Else - $
 791+ 8580 2F 85                        dw          LOAD_N
 792+ 8582 C3 63                        dw      BRANCH
 793+ 8584 04 00                        dw      Load_Endif - $
 794+ 8586              Load_Else:
 795+ 8586 39 81                        dw          LOAD_P
 796+ 8588              Load_Endif:
 797+ 8588 D0 68                        dw      EXIT
 798+ 858A
 799+ 858A
 800+ 858A              //  ______________________________________________________________________
 801+ 858A              //
 802+ 858A              // autoexec     --
 803+ 858A              // this word is called the first time the Forth system boot to
 804+ 858A              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 805+ 858A                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 805+ 858A             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 805+ 858A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ 858A             >
 805+ 858A             >                // dummy db directives used to calculate length of namec
 805+ 858A 41 55 54 4F >                db      "AUTOEXEC"
 805+ 858E 45 58 45 43 >
 805+ 8592             >len_NFA         defl    $ - temp_NFA
 805+ 8592             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ 858A             >
 805+ 858A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ 858B 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 805+ 858F 45 58 45 43 >
 805+ 8593             >                org     $-1                 // alter last byte of Name just above to set
 805+ 8592 C3          >                db      {b $} | END_BIT     // msb as name end
 805+ 8593             >
 805+ 8593 6E 85       >                dw      last_NFA            // Link to previous definition Name
 805+ 8595             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 8595 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 805+ 8598             >
 805+ 8598             >
 805+ 8598             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 8598             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 8598             >
 805+ 8598             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 8598 A5 63 0B 00                  dw      LIT, 11
 807+ 859C A5 63 C2 6B                  dw      LIT, NOOP
 808+ 85A0 A5 63 78 78                  dw      LIT, Autoexec_Ptr
 809+ 85A4 CB 6A                        dw      STORE
 810+ 85A6 75 85                        dw      LOAD
 811+ 85A8 27 78                        dw      QUIT
 812+ 85AA D0 68                        dw      EXIT
 813+ 85AC
 814+ 85AC
 815+ 85AC              //  ______________________________________________________________________
 816+ 85AC              //
 817+ 85AC              // bye     --
 818+ 85AC              //
 819+ 85AC                              Colon_Def BYE, "BYE", is_normal
 819+ 85AC             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 819+ 85AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ 85AC             >
 819+ 85AC             >                // dummy db directives used to calculate length of namec
 819+ 85AC 42 59 45    >                db      "BYE"
 819+ 85AF             >len_NFA         defl    $ - temp_NFA
 819+ 85AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ 85AC             >
 819+ 85AC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ 85AD 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 819+ 85B0             >                org     $-1                 // alter last byte of Name just above to set
 819+ 85AF C5          >                db      {b $} | END_BIT     // msb as name end
 819+ 85B0             >
 819+ 85B0 8A 85       >                dw      last_NFA            // Link to previous definition Name
 819+ 85B2             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 85B2 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 85B5             >
 819+ 85B5             >
 819+ 85B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 85B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 85B5             >
 819+ 85B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 85B5 DE 7D                        dw      FLUSH
 821+ 85B7 0B 7D                        dw      EMPTY_BUFFERS
 822+ 85B9 A5 7B C0 6A                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 822+ 85BD 78 67 12 6A
 823+ 85C1 15 6C 85 6C                  dw      ZERO, PLUS_ORIGIN
 824+ 85C5 10 79                        dw      BASIC
 825+ 85C7
 826+ 85C7              //  ______________________________________________________________________
 827+ 85C7              //
 828+ 85C7              // invv     --
 829+ 85C7              //
 830+ 85C7              //              Colon_Def INVV, "INVV", is_normal
 831+ 85C7              //              dw      LIT, 20, EMITC, ONE, EMITC
 832+ 85C7              //              dw      EXIT
 833+ 85C7
 834+ 85C7              //  ______________________________________________________________________
 835+ 85C7              //
 836+ 85C7              // truv     --
 837+ 85C7              //
 838+ 85C7              //              Colon_Def TRUV, "TRUV", is_normal
 839+ 85C7              //              dw      LIT, 20, EMITC, ZERO, EMITC
 840+ 85C7              //              dw      EXIT
 841+ 85C7
 842+ 85C7              //  ______________________________________________________________________
 843+ 85C7              //
 844+ 85C7              // mark     --
 845+ 85C7              //
 846+ 85C7              //              Colon_Def MARK, "MARK", is_normal
 847+ 85C7              //              dw      INVV, TYPE, TRUV
 848+ 85C7              //              dw      EXIT
 849+ 85C7
 850+ 85C7              //  ______________________________________________________________________
 851+ 85C7              //
 852+ 85C7              // back     --
 853+ 85C7              //
 854+ 85C7                              Colon_Def BACK, "BACK", is_normal
 854+ 85C7             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 854+ 85C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ 85C7             >
 854+ 85C7             >                // dummy db directives used to calculate length of namec
 854+ 85C7 42 41 43 4B >                db      "BACK"
 854+ 85CB             >len_NFA         defl    $ - temp_NFA
 854+ 85CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ 85C7             >
 854+ 85C7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ 85C8 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 854+ 85CC             >                org     $-1                 // alter last byte of Name just above to set
 854+ 85CB CB          >                db      {b $} | END_BIT     // msb as name end
 854+ 85CC             >
 854+ 85CC AC 85       >                dw      last_NFA            // Link to previous definition Name
 854+ 85CE             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 85CE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 85D1             >
 854+ 85D1             >
 854+ 85D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 85D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 85D1             >
 854+ 85D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 85D1 22 6E 77 6E                  dw      HERE, SUBTRACT, COMMA
 855+ 85D5 40 6E
 856+ 85D7 D0 68                        dw      EXIT
 857+ 85D9
 858+ 85D9              //  ______________________________________________________________________
 859+ 85D9              //
 860+ 85D9              // if          ( -- a 2 ) \ compile-time
 861+ 85D9              // IF ... THEN
 862+ 85D9              // IF ... ELSE ... ENDIF
 863+ 85D9                              Colon_Def IF, "IF", is_immediate
 863+ 85D9             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 863+ 85D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 85D9             >
 863+ 85D9             >                // dummy db directives used to calculate length of namec
 863+ 85D9 49 46       >                db      "IF"
 863+ 85DB             >len_NFA         defl    $ - temp_NFA
 863+ 85DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 85D9             >
 863+ 85D9 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 85DA 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 863+ 85DC             >                org     $-1                 // alter last byte of Name just above to set
 863+ 85DB C6          >                db      {b $} | END_BIT     // msb as name end
 863+ 85DC             >
 863+ 85DC C7 85       >                dw      last_NFA            // Link to previous definition Name
 863+ 85DE             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 85DE CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 85E1             >
 863+ 85E1             >
 863+ 85E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 85E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 85E1             >
 863+ 85E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 85E1 95 70 D8 63                  dw      COMPILE, ZBRANCH
 865+ 85E5 22 6E 15 6C                  dw      HERE, ZERO, COMMA
 865+ 85E9 40 6E
 866+ 85EB 27 6C                        dw      TWO
 867+ 85ED D0 68                        dw      EXIT
 868+ 85EF
 869+ 85EF              //  ______________________________________________________________________
 870+ 85EF              //
 871+ 85EF              // endif        ( a 2 -- ) \ compile-time
 872+ 85EF              //
 873+ 85EF                              Colon_Def ENDIF, "ENDIF", is_immediate
 873+ 85EF             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 873+ 85EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 85EF             >
 873+ 85EF             >                // dummy db directives used to calculate length of namec
 873+ 85EF 45 4E 44 49 >                db      "ENDIF"
 873+ 85F3 46          >
 873+ 85F4             >len_NFA         defl    $ - temp_NFA
 873+ 85F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 85EF             >
 873+ 85EF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 85F0 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 873+ 85F4 46          >
 873+ 85F5             >                org     $-1                 // alter last byte of Name just above to set
 873+ 85F4 C6          >                db      {b $} | END_BIT     // msb as name end
 873+ 85F5             >
 873+ 85F5 D9 85       >                dw      last_NFA            // Link to previous definition Name
 873+ 85F7             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 85F7 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 85FA             >
 873+ 85FA             >
 873+ 85FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 85FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 85FA             >
 873+ 85FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 85FA 17 70                        dw      QCOMP
 875+ 85FC 27 6C 48 70                  dw      TWO, QPAIRS
 876+ 8600 22 6E 04 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 876+ 8604 77 6E 34 6A
 876+ 8608 CB 6A
 877+ 860A D0 68                        dw      EXIT
 878+ 860C
 879+ 860C              //  ______________________________________________________________________
 880+ 860C              //
 881+ 860C              // then        ( a 2 -- ) \ compile-time
 882+ 860C              //
 883+ 860C                              Colon_Def THEN, "THEN", is_immediate
 883+ 860C             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 883+ 860C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ 860C             >
 883+ 860C             >                // dummy db directives used to calculate length of namec
 883+ 860C 54 48 45 4E >                db      "THEN"
 883+ 8610             >len_NFA         defl    $ - temp_NFA
 883+ 8610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ 860C             >
 883+ 860C C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ 860D 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 883+ 8611             >                org     $-1                 // alter last byte of Name just above to set
 883+ 8610 CE          >                db      {b $} | END_BIT     // msb as name end
 883+ 8611             >
 883+ 8611 EF 85       >                dw      last_NFA            // Link to previous definition Name
 883+ 8613             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 8613 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 883+ 8616             >
 883+ 8616             >
 883+ 8616             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 8616             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 8616             >
 883+ 8616             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 8616 F7 85                        dw      ENDIF
 885+ 8618 D0 68                        dw      EXIT
 886+ 861A
 887+ 861A              //  ______________________________________________________________________
 888+ 861A              //
 889+ 861A              // else        ( a1 2 -- a2 2 ) \ compile-time
 890+ 861A              //
 891+ 861A                              Colon_Def ELSE, "ELSE", is_immediate
 891+ 861A             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 891+ 861A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 861A             >
 891+ 861A             >                // dummy db directives used to calculate length of namec
 891+ 861A 45 4C 53 45 >                db      "ELSE"
 891+ 861E             >len_NFA         defl    $ - temp_NFA
 891+ 861E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 861A             >
 891+ 861A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 861B 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 891+ 861F             >                org     $-1                 // alter last byte of Name just above to set
 891+ 861E C5          >                db      {b $} | END_BIT     // msb as name end
 891+ 861F             >
 891+ 861F 0C 86       >                dw      last_NFA            // Link to previous definition Name
 891+ 8621             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 8621 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 8624             >
 891+ 8624             >
 891+ 8624             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 8624             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 8624             >
 891+ 8624             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 8624 17 70                        dw      QCOMP
 893+ 8626 27 6C 48 70                  dw      TWO, QPAIRS
 894+ 862A 95 70 C3 63                  dw      COMPILE, BRANCH
 895+ 862E 22 6E 15 6C                  dw      HERE, ZERO, COMMA
 895+ 8632 40 6E
 896+ 8634 34 6A 27 6C                  dw      SWAP, TWO, ENDIF
 896+ 8638 F7 85
 897+ 863A 27 6C                        dw      TWO
 898+ 863C D0 68                        dw      EXIT
 899+ 863E
 900+ 863E              //  ______________________________________________________________________
 901+ 863E              //
 902+ 863E              // begin        ( -- a 1 ) \ compile-time
 903+ 863E              // BEGIN ... AGAIN
 904+ 863E              // BEGIN ... f UNTIL
 905+ 863E              // BEGIN ... f WHILE ... REPEAT
 906+ 863E                              Colon_Def BEGIN, "BEGIN", is_immediate
 906+ 863E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 906+ 863E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 863E             >
 906+ 863E             >                // dummy db directives used to calculate length of namec
 906+ 863E 42 45 47 49 >                db      "BEGIN"
 906+ 8642 4E          >
 906+ 8643             >len_NFA         defl    $ - temp_NFA
 906+ 8643             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 863E             >
 906+ 863E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 863F 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 906+ 8643 4E          >
 906+ 8644             >                org     $-1                 // alter last byte of Name just above to set
 906+ 8643 CE          >                db      {b $} | END_BIT     // msb as name end
 906+ 8644             >
 906+ 8644 1A 86       >                dw      last_NFA            // Link to previous definition Name
 906+ 8646             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 8646 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 8649             >
 906+ 8649             >
 906+ 8649             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 8649             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 8649             >
 906+ 8649             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 8649 17 70                        dw      QCOMP
 908+ 864B 22 6E                        dw      HERE
 909+ 864D 1E 6C                        dw      ONE
 910+ 864F D0 68                        dw      EXIT
 911+ 8651
 912+ 8651              //  ______________________________________________________________________
 913+ 8651              //
 914+ 8651              // again        ( a 1 -- ) \ compile-time
 915+ 8651                              Colon_Def AGAIN, "AGAIN", is_immediate
 915+ 8651             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 915+ 8651             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ 8651             >
 915+ 8651             >                // dummy db directives used to calculate length of namec
 915+ 8651 41 47 41 49 >                db      "AGAIN"
 915+ 8655 4E          >
 915+ 8656             >len_NFA         defl    $ - temp_NFA
 915+ 8656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ 8651             >
 915+ 8651 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ 8652 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 915+ 8656 4E          >
 915+ 8657             >                org     $-1                 // alter last byte of Name just above to set
 915+ 8656 CE          >                db      {b $} | END_BIT     // msb as name end
 915+ 8657             >
 915+ 8657 3E 86       >                dw      last_NFA            // Link to previous definition Name
 915+ 8659             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 8659 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 865C             >
 915+ 865C             >
 915+ 865C             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 865C             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 865C             >
 915+ 865C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 865C 17 70                        dw      QCOMP
 917+ 865E 1E 6C 48 70                  dw      ONE, QPAIRS
 918+ 8662 95 70 C3 63                  dw      COMPILE, BRANCH
 919+ 8666 CE 85                        dw      BACK
 920+ 8668 D0 68                        dw      EXIT
 921+ 866A
 922+ 866A              //  ______________________________________________________________________
 923+ 866A              //
 924+ 866A              // until        ( a 1 -- ) \ compile-time
 925+ 866A                              Colon_Def UNTIL, "UNTIL", is_immediate
 925+ 866A             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 925+ 866A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 866A             >
 925+ 866A             >                // dummy db directives used to calculate length of namec
 925+ 866A 55 4E 54 49 >                db      "UNTIL"
 925+ 866E 4C          >
 925+ 866F             >len_NFA         defl    $ - temp_NFA
 925+ 866F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 866A             >
 925+ 866A C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 866B 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 925+ 866F 4C          >
 925+ 8670             >                org     $-1                 // alter last byte of Name just above to set
 925+ 866F CC          >                db      {b $} | END_BIT     // msb as name end
 925+ 8670             >
 925+ 8670 51 86       >                dw      last_NFA            // Link to previous definition Name
 925+ 8672             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 8672 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 925+ 8675             >
 925+ 8675             >
 925+ 8675             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 8675             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 8675             >
 925+ 8675             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 8675 17 70                        dw      QCOMP
 927+ 8677 1E 6C 48 70                  dw      ONE, QPAIRS
 928+ 867B 95 70 D8 63                  dw      COMPILE, ZBRANCH
 929+ 867F CE 85                        dw      BACK
 930+ 8681 D0 68                        dw      EXIT
 931+ 8683
 932+ 8683              //  ______________________________________________________________________
 933+ 8683              //
 934+ 8683              // end          ( a 1 -- ) \ compile-time
 935+ 8683                              Colon_Def END, "END", is_immediate
 935+ 8683             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 935+ 8683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ 8683             >
 935+ 8683             >                // dummy db directives used to calculate length of namec
 935+ 8683 45 4E 44    >                db      "END"
 935+ 8686             >len_NFA         defl    $ - temp_NFA
 935+ 8686             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ 8683             >
 935+ 8683 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ 8684 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 935+ 8687             >                org     $-1                 // alter last byte of Name just above to set
 935+ 8686 C4          >                db      {b $} | END_BIT     // msb as name end
 935+ 8687             >
 935+ 8687 6A 86       >                dw      last_NFA            // Link to previous definition Name
 935+ 8689             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 8689 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 868C             >
 935+ 868C             >
 935+ 868C             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 868C             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 868C             >
 935+ 868C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 868C 72 86                        dw      UNTIL
 937+ 868E D0 68                        dw      EXIT
 938+ 8690
 939+ 8690              //  ______________________________________________________________________
 940+ 8690              //
 941+ 8690              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 942+ 8690                              Colon_Def WHILE, "WHILE", is_immediate
 942+ 8690             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 942+ 8690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 8690             >
 942+ 8690             >                // dummy db directives used to calculate length of namec
 942+ 8690 57 48 49 4C >                db      "WHILE"
 942+ 8694 45          >
 942+ 8695             >len_NFA         defl    $ - temp_NFA
 942+ 8695             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 8690             >
 942+ 8690 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 8691 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 942+ 8695 45          >
 942+ 8696             >                org     $-1                 // alter last byte of Name just above to set
 942+ 8695 C5          >                db      {b $} | END_BIT     // msb as name end
 942+ 8696             >
 942+ 8696 83 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 8698             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 8698 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 869B             >
 942+ 869B             >
 942+ 869B             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 869B             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 869B             >
 942+ 869B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 869B DE 85                        dw      IF
 944+ 869D A4 69                        dw      TWO_PLUS // ( that is 4 )
 945+ 869F D0 68                        dw      EXIT
 946+ 86A1
 947+ 86A1              //  ______________________________________________________________________
 948+ 86A1              //
 949+ 86A1              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 950+ 86A1                              Colon_Def REPEAT, "REPEAT", is_immediate
 950+ 86A1             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 950+ 86A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 86A1             >
 950+ 86A1             >                // dummy db directives used to calculate length of namec
 950+ 86A1 52 45 50 45 >                db      "REPEAT"
 950+ 86A5 41 54       >
 950+ 86A7             >len_NFA         defl    $ - temp_NFA
 950+ 86A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 86A1             >
 950+ 86A1 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 86A2 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 950+ 86A6 41 54       >
 950+ 86A8             >                org     $-1                 // alter last byte of Name just above to set
 950+ 86A7 D4          >                db      {b $} | END_BIT     // msb as name end
 950+ 86A8             >
 950+ 86A8 90 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 86AA             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 86AA CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 86AD             >
 950+ 86AD             >
 950+ 86AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 86AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 86AD             >
 950+ 86AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 86AD 84 6A                        dw      TWO_SWAP
 952+ 86AF 59 86                        dw      AGAIN
 953+ 86B1 27 6C 77 6E                  dw      TWO, SUBTRACT
 954+ 86B5 F7 85                        dw      ENDIF
 955+ 86B7 D0 68                        dw      EXIT
 956+ 86B9
 957+ 86B9              //  ______________________________________________________________________
 958+ 86B9              //
 959+ 86B9              // ?do-
 960+ 86B9              // special version of "BACK" used by ?DO and LOOP
 961+ 86B9                              Colon_Def C_DO_BACK, "?DO-", is_normal
 961+ 86B9             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 961+ 86B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 961+ 86B9             >
 961+ 86B9             >                // dummy db directives used to calculate length of namec
 961+ 86B9 3F 44 4F 2D >                db      "?DO-"
 961+ 86BD             >len_NFA         defl    $ - temp_NFA
 961+ 86BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 961+ 86B9             >
 961+ 86B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 961+ 86BA 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 961+ 86BE             >                org     $-1                 // alter last byte of Name just above to set
 961+ 86BD AD          >                db      {b $} | END_BIT     // msb as name end
 961+ 86BE             >
 961+ 86BE A1 86       >                dw      last_NFA            // Link to previous definition Name
 961+ 86C0             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 961+ 86C0 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 961+ 86C3             >
 961+ 86C3             >
 961+ 86C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 961+ 86C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 961+ 86C3             >
 961+ 86C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 962+ 86C3 CE 85                        dw      BACK
 963+ 86C5              CDoBack_Begin:
 964+ 86C5 A0 68 A8 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 964+ 86C9 C0 6A 77 6E
 965+ 86CD D8 63                        dw      ZBRANCH
 966+ 86CF 0A 00                        dw      CDoBack_While - $
 967+ 86D1 A4 69 F7 85                  dw          TWO_PLUS, ENDIF
 968+ 86D5 C3 63                        dw      BRANCH
 969+ 86D7 EE FF                        dw      CDoBack_Begin - $
 970+ 86D9              CDoBack_While:
 971+ 86D9 5C 70 A8 6D                  dw      QCSP, CSP, STORE
 971+ 86DD CB 6A
 972+ 86DF D0 68                        dw      EXIT
 973+ 86E1
 974+ 86E1              //  ______________________________________________________________________
 975+ 86E1              //
 976+ 86E1              // do
 977+ 86E1              // DO  ... LOOP
 978+ 86E1              // DO  ... n +LOOP
 979+ 86E1              // ?DO ... LOOP
 980+ 86E1              // ?DO ... n +LOOP
 981+ 86E1                              Colon_Def DO, "DO", is_immediate
 981+ 86E1             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 981+ 86E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 981+ 86E1             >
 981+ 86E1             >                // dummy db directives used to calculate length of namec
 981+ 86E1 44 4F       >                db      "DO"
 981+ 86E3             >len_NFA         defl    $ - temp_NFA
 981+ 86E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 981+ 86E1             >
 981+ 86E1 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 981+ 86E2 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 981+ 86E4             >                org     $-1                 // alter last byte of Name just above to set
 981+ 86E3 CF          >                db      {b $} | END_BIT     // msb as name end
 981+ 86E4             >
 981+ 86E4 B9 86       >                dw      last_NFA            // Link to previous definition Name
 981+ 86E6             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 981+ 86E6 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 981+ 86E9             >
 981+ 86E9             >
 981+ 86E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 981+ 86E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 981+ 86E9             >
 981+ 86E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 982+ 86E9 95 70 58 64                  dw      COMPILE, C_DO
 983+ 86ED A8 6D C0 6A                  dw      CSP, FETCH, STORE_CSP
 983+ 86F1 E8 6F
 984+ 86F3 22 6E 30 6C                  dw      HERE, THREE
 985+ 86F7 D0 68                        dw      EXIT
 986+ 86F9
 987+ 86F9              //  ______________________________________________________________________
 988+ 86F9              //
 989+ 86F9              // loop
 990+ 86F9                              Colon_Def LOOP, "LOOP", is_immediate
 990+ 86F9             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 990+ 86F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ 86F9             >
 990+ 86F9             >                // dummy db directives used to calculate length of namec
 990+ 86F9 4C 4F 4F 50 >                db      "LOOP"
 990+ 86FD             >len_NFA         defl    $ - temp_NFA
 990+ 86FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ 86F9             >
 990+ 86F9 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ 86FA 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 990+ 86FE             >                org     $-1                 // alter last byte of Name just above to set
 990+ 86FD D0          >                db      {b $} | END_BIT     // msb as name end
 990+ 86FE             >
 990+ 86FE E1 86       >                dw      last_NFA            // Link to previous definition Name
 990+ 8700             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 8700 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 8703             >
 990+ 8703             >
 990+ 8703             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 8703             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 8703             >
 990+ 8703             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 8703 30 6C 48 70                  dw      THREE, QPAIRS
 992+ 8707 95 70 EB 63                  dw      COMPILE, C_LOOP
 993+ 870B C0 86                        dw      C_DO_BACK
 994+ 870D D0 68                        dw      EXIT
 995+ 870F
 996+ 870F              //  ______________________________________________________________________
 997+ 870F              //
 998+ 870F              // +loop
 999+ 870F                              Colon_Def PLOOP, "+LOOP", is_immediate
 999+ 870F             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 999+ 870F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 999+ 870F             >
 999+ 870F             >                // dummy db directives used to calculate length of namec
 999+ 870F 2B 4C 4F 4F >                db      "+LOOP"
 999+ 8713 50          >
 999+ 8714             >len_NFA         defl    $ - temp_NFA
 999+ 8714             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 999+ 870F             >
 999+ 870F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 999+ 8710 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 999+ 8714 50          >
 999+ 8715             >                org     $-1                 // alter last byte of Name just above to set
 999+ 8714 D0          >                db      {b $} | END_BIT     // msb as name end
 999+ 8715             >
 999+ 8715 F9 86       >                dw      last_NFA            // Link to previous definition Name
 999+ 8717             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 999+ 8717 CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 999+ 871A             >
 999+ 871A             >
 999+ 871A             >                endif           ; ok        // for other definitions it "points" the correct handler
 999+ 871A             >                // Use of "; ok" to suppress "warning[fwdref]"
 999+ 871A             >
 999+ 871A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1000+ 871A 30 6C 48 70                  dw      THREE, QPAIRS
1001+ 871E 95 70 20 64                  dw      COMPILE, C_PLOOP
1002+ 8722 C0 86                        dw      C_DO_BACK
1003+ 8724 D0 68                        dw      EXIT
1004+ 8726
1005+ 8726              //  ______________________________________________________________________
1006+ 8726              //
1007+ 8726              // ?do
1008+ 8726                              Colon_Def QDO, "?DO", is_immediate
1008+ 8726             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1008+ 8726             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1008+ 8726             >
1008+ 8726             >                // dummy db directives used to calculate length of namec
1008+ 8726 3F 44 4F    >                db      "?DO"
1008+ 8729             >len_NFA         defl    $ - temp_NFA
1008+ 8729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1008+ 8726             >
1008+ 8726 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1008+ 8727 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1008+ 872A             >                org     $-1                 // alter last byte of Name just above to set
1008+ 8729 CF          >                db      {b $} | END_BIT     // msb as name end
1008+ 872A             >
1008+ 872A 0F 87       >                dw      last_NFA            // Link to previous definition Name
1008+ 872C             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1008+ 872C CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1008+ 872F             >
1008+ 872F             >
1008+ 872F             >                endif           ; ok        // for other definitions it "points" the correct handler
1008+ 872F             >                // Use of "; ok" to suppress "warning[fwdref]"
1008+ 872F             >
1008+ 872F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 872F 95 70 2C 64                  dw      COMPILE, C_Q_DO
1010+ 8733 A8 6D C0 6A                  dw      CSP, FETCH, STORE_CSP
1010+ 8737 E8 6F
1011+ 8739 22 6E 15 6C                  dw      HERE, ZERO, COMMA, ZERO
1011+ 873D 40 6E 15 6C
1012+ 8741 22 6E 30 6C                  dw      HERE, THREE
1013+ 8745 D0 68                        dw      EXIT
1014+ 8747
1015+ 8747              Latest_Definition:
1016+ 8747              //  ______________________________________________________________________
1017+ 8747              //
1018+ 8747              // \
1019+ 8747                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1019+ 8747             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1019+ 8747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1019+ 8747             >
1019+ 8747             >                // dummy db directives used to calculate length of namec
1019+ 8747 5C          >                db      "\\"
1019+ 8748             >len_NFA         defl    $ - temp_NFA
1019+ 8748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1019+ 8747             >
1019+ 8747 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1019+ 8748 5C          >                db      "\\"               // name string in 7-bit ascii, but
1019+ 8749             >                org     $-1                 // alter last byte of Name just above to set
1019+ 8748 DC          >                db      {b $} | END_BIT     // msb as name end
1019+ 8749             >
1019+ 8749 26 87       >                dw      last_NFA            // Link to previous definition Name
1019+ 874B             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1019+ 874B CD 9B 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1019+ 874E             >
1019+ 874E             >
1019+ 874E             >                endif           ; ok        // for other definitions it "points" the correct handler
1019+ 874E             >                // Use of "; ok" to suppress "warning[fwdref]"
1019+ 874E             >
1019+ 874E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1020+ 874E 2C 6D C0 6A                  dw      BLK, FETCH
1021+ 8752 D8 63                        dw      ZBRANCH
1022+ 8754 30 00                        dw      Backslash_Else_1 - $
1023+ 8756 2C 6D C0 6A                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1023+ 875A 1E 6C BD 6E
1024+ 875E D8 63                        dw          ZBRANCH
1025+ 8760 18 00                        dw          Backslash_Else_2 - $
1026+ 8762 36 6D C0 6A                  dw              TO_IN, FETCH, CL, MOD, CL
1026+ 8766 4F 6C ED 79
1026+ 876A 4F 6C
1027+ 876C 34 6A 77 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1027+ 8770 36 6D A1 6A
1028+ 8774 C3 63                        dw          BRANCH
1029+ 8776 0A 00                        dw          Backslash_Endif_2 - $
1030+ 8778              Backslash_Else_2:
1031+ 8778 5C 6C BD 69                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1031+ 877C 36 6D CB 6A
1032+ 8780              Backslash_Endif_2:
1033+ 8780 C3 63                        dw      BRANCH
1034+ 8782 0A 00                        dw      Backslash_Endif_1 - $
1035+ 8784              Backslash_Else_1:
1036+ 8784 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1036+ 8788 36 6D CB 6A
1037+ 878C              Backslash_Endif_1:
1038+ 878C D0 68                        dw      EXIT
1039+ 878E
1040+ 878E              Fence_Word:
1041+ 878E              //  ______________________________________________________________________
1042+ 878E              //
1043+ 878E
1044+ 878E 00           Here_Dictionary db      0
1045+ 878F
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 114  878F
 115  878F              // now we save the compiled file so we can either run it or debug it
 116  878F                              SAVENEX OPEN "output/main.nex", ORIGIN
 117  878F                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 118  878F                              SAVENEX CFG  0
 119  878F                              SAVENEX BANK 2, 0
 120  878F                              SAVENEX AUTO
 121  878F                              SAVENEX CLOSE
 122  878F
 123  878F              //              PAGE 7 ;set 7 page to current slot
 124  878F              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 125  878F              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 126  878F
 127  878F                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 128  878F
 129  878F                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 130  878F
 131  878F                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
