# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20211006
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2021
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 D2 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 D2 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 F6 86        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 3D 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 3D 87        DP_origin       dw      Fence_Word
  39+ 6386 DA 77        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 E1                           pop     hl
 129+ 63B9 E9                           jp      (hl)
 130+ 63BA              //              jr      Exec_Ptr
 131+ 63BA
 132+ 63BA
 133+ 63BA              //  ______________________________________________________________________
 134+ 63BA              //
 135+ 63BA              // branch       --
 136+ 63BA              // unconditional branch in colon definition using the following cell as an offset from current IP value
 137+ 63BA              // compiled by ELSE, AGAIN and some other immediate words
 138+ 63BA
 139+ 63BA                              New_Def BRANCH, "BRANCH", is_code, is_normal
 139+ 63BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63BA             >
 139+ 63BA             >                // dummy db directives used to calculate length of namec
 139+ 63BA 42 52 41 4E >                db      "BRANCH"
 139+ 63BE 43 48       >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63BA             >
 139+ 63BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BB 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 139+ 63BF 43 48       >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 C8          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3              Branch_Ptr:
 141+ 63C3 60                           ld      h, b
 142+ 63C4 69                           ld      l, c
 143+ 63C5 5E                           ld      e, (hl)
 144+ 63C6 23                           inc     hl
 145+ 63C7 56                           ld      d, (hl)
 146+ 63C8 2B                           dec     hl                  // offset is calculated from current IP
 147+ 63C9 19                           add     hl, de
 148+ 63CA 4D                           ld      c, l
 149+ 63CB 44                           ld      b, h
 150+ 63CC                              next
 150+ 63CC DD E9       >                jp      (ix)
 151+ 63CE
 152+ 63CE
 153+ 63CE              //  ______________________________________________________________________
 154+ 63CE              //
 155+ 63CE              // 0branch      f --
 156+ 63CE              // conditional branch if the top-of-stack is ZERO or FALSE.
 157+ 63CE              // compiled by IF, UNTIL and some other immediate words
 158+ 63CE
 159+ 63CE                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 159+ 63CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 63CE             >
 159+ 63CE             >                // dummy db directives used to calculate length of namec
 159+ 63CE 30 42 52 41 >                db      "0BRANCH"
 159+ 63D2 4E 43 48    >
 159+ 63D5             >len_NFA         defl    $ - temp_NFA
 159+ 63D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 63CE             >
 159+ 63CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 63CF 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 159+ 63D3 4E 43 48    >
 159+ 63D6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 63D5 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 63D6             >
 159+ 63D6 BA 63       >                dw      last_NFA            // Link to previous definition Name
 159+ 63D8             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 63D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159+ 63D8 ~           >
 159+ 63D8 ~           >
 159+ 63D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 63D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 63D8             >
 159+ 63D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 63D8              ZBranch_Ptr:
 161+ 63D8 E1                           pop     hl
 162+ 63D9 7D                           ld      a, l
 163+ 63DA B4                           or      h
 164+ 63DB CA C3 63                     jp      z, Branch_Ptr
 165+ 63DE 03                           inc     bc                  // if not branch, skip offset cell.
 166+ 63DF 03                           inc     bc
 167+ 63E0                              next
 167+ 63E0 DD E9       >                jp      (ix)
 168+ 63E2
 169+ 63E2              //  ______________________________________________________________________
 170+ 63E2              //
 171+ 63E2              // (loop)       --
 172+ 63E2              // compiled by +LOOP. it uses the top two values of return-stack to
 173+ 63E2              // keep track of index and limit
 174+ 63E2                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 174+ 63E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 63E2             >
 174+ 63E2             >                // dummy db directives used to calculate length of namec
 174+ 63E2 28 4C 4F 4F >                db      "(LOOP)"
 174+ 63E6 50 29       >
 174+ 63E8             >len_NFA         defl    $ - temp_NFA
 174+ 63E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 63E2             >
 174+ 63E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 63E3 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 174+ 63E7 50 29       >
 174+ 63E9             >                org     $-1                 // alter last byte of Name just above to set
 174+ 63E8 A9          >                db      {b $} | END_BIT     // msb as name end
 174+ 63E9             >
 174+ 63E9 CE 63       >                dw      last_NFA            // Link to previous definition Name
 174+ 63EB             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 63EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 174+ 63EB ~           >
 174+ 63EB ~           >
 174+ 63EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 63EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 63EB             >
 174+ 63EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 63EB
 176+ 63EB
 177+ 63EB 11 01 00                     ld      de, 1               // bc contains increment of 1
 178+ 63EE
 179+ 63EE              Loop_Ptr:
 180+ 63EE                              ldhlrp                      // ld hl,rp macro 30h +Origin
 180+ 63EE 2A 96 63    >                ld      hl,(RP_Pointer)
 181+ 63F1
 182+ 63F1 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 183+ 63F2 83                           add     e
 184+ 63F3 77                           ld      (hl), a
 185+ 63F4 5F                           ld      e, a
 186+ 63F5 23                           inc     hl
 187+ 63F6 7E                           ld      a, (hl)
 188+ 63F7 8A                           adc     d
 189+ 63F8 77                           ld      (hl),a
 190+ 63F9 23                           inc     hl
 191+ 63FA CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 192+ 63FC 57                           ld      d, a
 193+ 63FD
 194+ 63FD 20 07                        jr      nz, Loop_NegativeIncrement
 195+ 63FF 7B                               ld      a, e
 196+ 6400 96                               sub     (hl)
 197+ 6401 7A                               ld      a, d
 198+ 6402 23                               inc     hl
 199+ 6403 9E                               sbc     (hl)
 200+ 6404 18 05                        jr      Loop_Endif              // else
 201+ 6406
 202+ 6406              Loop_NegativeIncrement:
 203+ 6406 7E                               ld      a, (hl)
 204+ 6407 93                               sub     e
 205+ 6408 23                               inc     hl
 206+ 6409 7E                               ld      a, (hl)
 207+ 640A 9A                               sbc     d
 208+ 640B
 209+ 640B              Loop_Endif:
 210+ 640B FA C3 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 211+ 640E 23                           inc     hl
 212+ 640F                              ldrphl                      // ld rp,hl macro 30h +Origin
 212+ 640F 22 96 63    >                ld      (RP_Pointer),hl
 213+ 6412
 214+ 6412 03                           inc     bc                  // skip branch-style offset
 215+ 6413 03                           inc     bc
 216+ 6414                              next
 216+ 6414 DD E9       >                jp      (ix)
 217+ 6416
 218+ 6416              //  ______________________________________________________________________
 219+ 6416              //
 220+ 6416              // (+loop)       n --
 221+ 6416              // same as (LOOP) but index is incremented by n (instead of just 1)
 222+ 6416              // compiled by +LOOP.
 223+ 6416                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 223+ 6416             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 6416             >
 223+ 6416             >                // dummy db directives used to calculate length of namec
 223+ 6416 28 2B 4C 4F >                db      "(+LOOP)"
 223+ 641A 4F 50 29    >
 223+ 641D             >len_NFA         defl    $ - temp_NFA
 223+ 641D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 6416             >
 223+ 6416 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 6417 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 223+ 641B 4F 50 29    >
 223+ 641E             >                org     $-1                 // alter last byte of Name just above to set
 223+ 641D A9          >                db      {b $} | END_BIT     // msb as name end
 223+ 641E             >
 223+ 641E E2 63       >                dw      last_NFA            // Link to previous definition Name
 223+ 6420             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 6420 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 6420 ~           >
 223+ 6420 ~           >
 223+ 6420             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 6420             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 6420             >
 223+ 6420             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 6420 D1                           pop     de
 225+ 6421 C3 EE 63                     jp      Loop_Ptr
 226+ 6424
 227+ 6424              //  ______________________________________________________________________
 228+ 6424              //
 229+ 6424              // (?do)        lim ind --
 230+ 6424              // compiled by ?DO to make a loop checking for lim == ind first
 231+ 6424              // at run-time (?DO) must be followed by a BRANCH offset
 232+ 6424              // used to skip the loop if lim == ind
 233+ 6424                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 233+ 6424             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6424             >
 233+ 6424             >                // dummy db directives used to calculate length of namec
 233+ 6424 28 3F 44 4F >                db      "(?DO)"
 233+ 6428 29          >
 233+ 6429             >len_NFA         defl    $ - temp_NFA
 233+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6424             >
 233+ 6424 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6425 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 233+ 6429 29          >
 233+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 233+ 6429 A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 642A             >
 233+ 642A 16 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 642C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 642C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 642C ~           >
 233+ 642C ~           >
 233+ 642C             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 642C             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 642C             >
 233+ 642C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 642C D1                           pop     de                  // de has the index
 235+ 642D E1                           pop     hl                  // hl has the limit
 236+ 642E E5                           push    hl
 237+ 642F D5                           push    de
 238+ 6430 A7                           and     a                   // reset carry flag
 239+ 6431 ED 52                        sbc     hl, de              // compute limit - index
 240+ 6433 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 241+ 6435 D1                               pop     de
 242+ 6436 E1                               pop     hl
 243+ 6437
 244+ 6437 C3 C3 63                         jp      Branch_Ptr          // perform branch consuming following cell
 245+ 643A              Do_Ptr:
 246+ 643A                              ldhlrp                      // prepare RP
 246+ 643A 2A 96 63    >                ld      hl,(RP_Pointer)
 247+ 643D 2B                           dec     hl
 248+ 643E 2B                           dec     hl
 249+ 643F 2B                           dec     hl
 250+ 6440 2B                           dec     hl
 251+ 6441                              ldrphl
 251+ 6441 22 96 63    >                ld      (RP_Pointer),hl
 252+ 6444
 253+ 6444                              // store index as top RP
 254+ 6444 D1                           pop     de
 255+ 6445 73                           ld      (hl), e
 256+ 6446 23                           inc     hl
 257+ 6447 72                           ld      (hl), d
 258+ 6448 23                           inc     hl
 259+ 6449                              // stores lim as second from top RP
 260+ 6449 D1                           pop     de
 261+ 644A 73                           ld      (hl), e
 262+ 644B 23                           inc     hl
 263+ 644C 72                           ld      (hl), d
 264+ 644D
 265+ 644D                              // skip branch-style offseet
 266+ 644D 03                           inc     bc
 267+ 644E 03                           inc     bc
 268+ 644F                              next
 268+ 644F DD E9       >                jp      (ix)
 269+ 6451
 270+ 6451              //  ______________________________________________________________________
 271+ 6451              //
 272+ 6451              // (do)        lim ind --
 273+ 6451              // compiled by DO to make a loop checking for lim == ind first
 274+ 6451              // this is a simpler version of (?DO)
 275+ 6451                              New_Def C_DO, "(DO)", is_code, is_normal
 275+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ 6451             >
 275+ 6451             >                // dummy db directives used to calculate length of namec
 275+ 6451 28 44 4F 29 >                db      "(DO)"
 275+ 6455             >len_NFA         defl    $ - temp_NFA
 275+ 6455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ 6451             >
 275+ 6451 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ 6452 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 275+ 6456             >                org     $-1                 // alter last byte of Name just above to set
 275+ 6455 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ 6456             >
 275+ 6456 24 64       >                dw      last_NFA            // Link to previous definition Name
 275+ 6458             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6458 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6458 ~           >
 275+ 6458 ~           >
 275+ 6458             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6458             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6458             >
 275+ 6458             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6458 0B                           dec     bc                  // prepare IP beforehand
 277+ 6459 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 278+ 645A C3 3A 64                     jp      Do_Ptr
 279+ 645D
 280+ 645D              //  ______________________________________________________________________
 281+ 645D              //
 282+ 645D              // i            -- n
 283+ 645D              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 284+ 645D              // the current value of the index-loop
 285+ 645D                              New_Def I, "I", is_code, is_normal
 285+ 645D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 285+ 645D             >
 285+ 645D             >                // dummy db directives used to calculate length of namec
 285+ 645D 49          >                db      "I"
 285+ 645E             >len_NFA         defl    $ - temp_NFA
 285+ 645E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 285+ 645D             >
 285+ 645D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 285+ 645E 49          >                db      "I"               // name string in 7-bit ascii, but
 285+ 645F             >                org     $-1                 // alter last byte of Name just above to set
 285+ 645E C9          >                db      {b $} | END_BIT     // msb as name end
 285+ 645F             >
 285+ 645F 51 64       >                dw      last_NFA            // Link to previous definition Name
 285+ 6461             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 285+ 6461 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 285+ 6461 ~           >
 285+ 6461 ~           >
 285+ 6461             >                endif           ; ok        // for other definitions it "points" the correct handler
 285+ 6461             >                // Use of "; ok" to suppress "warning[fwdref]"
 285+ 6461             >
 285+ 6461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 286+ 6461              I_Ptr:
 287+ 6461
 288+ 6461                              ldhlrp
 288+ 6461 2A 96 63    >                ld      hl,(RP_Pointer)
 289+ 6464 5E                           ld      e, (hl)
 290+ 6465 23                           inc     hl
 291+ 6466 56                           ld      d, (hl)
 292+ 6467 D5                           push    de
 293+ 6468                              next
 293+ 6468 DD E9       >                jp      (ix)
 294+ 646A
 295+ 646A              //  ______________________________________________________________________
 296+ 646A              //
 297+ 646A              // digit        c n -- u 1  |  0
 298+ 646A              // convert a character c using base n
 299+ 646A              // returns a unsigned number and a true flag
 300+ 646A              // or just a false flag if the conversion fails
 301+ 646A                              New_Def DIGIT, "DIGIT", is_code, is_normal
 301+ 646A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 646A             >
 301+ 646A             >                // dummy db directives used to calculate length of namec
 301+ 646A 44 49 47 49 >                db      "DIGIT"
 301+ 646E 54          >
 301+ 646F             >len_NFA         defl    $ - temp_NFA
 301+ 646F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 646A             >
 301+ 646A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 646B 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 301+ 646F 54          >
 301+ 6470             >                org     $-1                 // alter last byte of Name just above to set
 301+ 646F D4          >                db      {b $} | END_BIT     // msb as name end
 301+ 6470             >
 301+ 6470 5D 64       >                dw      last_NFA            // Link to previous definition Name
 301+ 6472             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6472 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 301+ 6472 ~           >
 301+ 6472 ~           >
 301+ 6472             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6472             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6472             >
 301+ 6472             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6472 E1                           pop     hl                  // l has the base
 303+ 6473 D1                           pop     de                  // e has the digit
 304+ 6474 7B                           ld      a, e
 305+ 6475 FE 60                        cp      $60                 // check if lowercase
 306+ 6477 38 02                        jr      c, Digit_Uppercase
 307+ 6479 D6 20                            sub     $20                 // quick'n'dirty uppercase
 308+ 647B              Digit_Uppercase:
 309+ 647B D6 30                        sub     $30
 310+ 647D 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 311+ 647F FE 0A                            cp      $0A
 312+ 6481 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 313+ 6483 D6 07                                sub     7                   // try hex and subtract 7
 314+ 6485 FE 0A                                cp      $0A
 315+ 6487 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 316+ 6489
 317+ 6489              Digit_Decimal:
 318+ 6489                              // compare digit
 319+ 6489 BD                           cp      l                   // compare with base
 320+ 648A
 321+ 648A 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 322+ 648C 5F                               ld      e, a                // digit is returned as second from TOS
 323+ 648D 21 01 00                         ld      hl, 1
 324+ 6490
 325+ 6490                                  psh2
 325+ 6490 D5          >                push    de
 325+ 6491 E5          >                push    hl
 325+ 6492 DD E9       >                jp      (ix)
 326+ 6494              Digit_Fail:
 327+ 6494 21 00 00                     ld      hl, 0
 328+ 6497                              psh1
 328+ 6497 E5          >                push    hl
 328+ 6498 DD E9       >                jp      (ix)
 329+ 649A
 330+ 649A              //  ______________________________________________________________________
 331+ 649A              //
 332+ 649A              //  parametric uppercase routine
 333+ 649A              //  depending on the following op-code the routine can be by-passed
 334+ 649A              //  changing the behaviour of some callers.
 335+ 649A              //  If it is "ret" then the system is Case-Sensitive
 336+ 649A              //  If it is "Nop" then the system is Case-Insensitive
 337+ 649A              //  Only A register is touched.
 338+ 649A 00           Case_Sensitive: nop                         // Default is case-insensitive.
 339+ 649B              Case_Upper:
 340+ 649B FE 61                        cp      LC_A_CHAR           // lower-case "a"
 341+ 649D D8                           ret     c                   // no change if A < "a"
 342+ 649E FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 343+ 64A0 D0                           ret     nc                  // no change if A > "z"
 344+ 64A1 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 345+ 64A3 C9                           ret
 346+ 64A4
 347+ 64A4              //  ______________________________________________________________________
 348+ 64A4              //
 349+ 64A4              //  caseon      --
 350+ 64A4              // set system case-sensitivity on
 351+ 64A4              // it patches a RET/NOP at the beginning of the uppercase-routine
 352+ 64A4                              New_Def CASEON, "CASEON", is_code, is_normal
 352+ 64A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 64A4             >
 352+ 64A4             >                // dummy db directives used to calculate length of namec
 352+ 64A4 43 41 53 45 >                db      "CASEON"
 352+ 64A8 4F 4E       >
 352+ 64AA             >len_NFA         defl    $ - temp_NFA
 352+ 64AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 64A4             >
 352+ 64A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 64A5 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 352+ 64A9 4F 4E       >
 352+ 64AB             >                org     $-1                 // alter last byte of Name just above to set
 352+ 64AA CE          >                db      {b $} | END_BIT     // msb as name end
 352+ 64AB             >
 352+ 64AB 6A 64       >                dw      last_NFA            // Link to previous definition Name
 352+ 64AD             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 64AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 352+ 64AD ~           >
 352+ 64AD ~           >
 352+ 64AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 64AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 64AD             >
 352+ 64AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 64AD 3E C9                        ld      a, $C9              // "ret"
 354+ 64AF 32 9A 64                     ld      (Case_Sensitive), a
 355+ 64B2                              next
 355+ 64B2 DD E9       >                jp      (ix)
 356+ 64B4
 357+ 64B4              //  ______________________________________________________________________
 358+ 64B4              //
 359+ 64B4              //  caseoff     --
 360+ 64B4              // set system case-sensitivity on
 361+ 64B4              // it patches a RET/NOP at the beginning of the uppercase-routine
 362+ 64B4                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 362+ 64B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 64B4             >
 362+ 64B4             >                // dummy db directives used to calculate length of namec
 362+ 64B4 43 41 53 45 >                db      "CASEOFF"
 362+ 64B8 4F 46 46    >
 362+ 64BB             >len_NFA         defl    $ - temp_NFA
 362+ 64BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 64B4             >
 362+ 64B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 64B5 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 362+ 64B9 4F 46 46    >
 362+ 64BC             >                org     $-1                 // alter last byte of Name just above to set
 362+ 64BB C6          >                db      {b $} | END_BIT     // msb as name end
 362+ 64BC             >
 362+ 64BC A4 64       >                dw      last_NFA            // Link to previous definition Name
 362+ 64BE             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 64BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 362+ 64BE ~           >
 362+ 64BE ~           >
 362+ 64BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 64BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 64BE             >
 362+ 64BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 64BE 3E 00                        ld      a, $00              // "nop"
 364+ 64C0 32 9A 64                     ld      (Case_Sensitive), a
 365+ 64C3                              next
 365+ 64C3 DD E9       >                jp      (ix)
 366+ 64C5
 367+ 64C5              //  ______________________________________________________________________
 368+ 64C5              //
 369+ 64C5              //  upper       c1 -- c1 | c2
 370+ 64C5              // character on top of stack is forced to Uppercase.
 371+ 64C5                              New_Def UPPER, "UPPER", is_code, is_normal
 371+ 64C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 64C5             >
 371+ 64C5             >                // dummy db directives used to calculate length of namec
 371+ 64C5 55 50 50 45 >                db      "UPPER"
 371+ 64C9 52          >
 371+ 64CA             >len_NFA         defl    $ - temp_NFA
 371+ 64CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 64C5             >
 371+ 64C5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 64C6 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 371+ 64CA 52          >
 371+ 64CB             >                org     $-1                 // alter last byte of Name just above to set
 371+ 64CA D2          >                db      {b $} | END_BIT     // msb as name end
 371+ 64CB             >
 371+ 64CB B4 64       >                dw      last_NFA            // Link to previous definition Name
 371+ 64CD             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 64CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 371+ 64CD ~           >
 371+ 64CD ~           >
 371+ 64CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 64CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 64CD             >
 371+ 64CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 64CD E1                           pop     hl
 373+ 64CE 7D                           ld      a, l
 374+ 64CF CD 9B 64                     call    Case_Upper
 375+ 64D2 6F                           ld      l, a
 376+ 64D3
 377+ 64D3                              psh1
 377+ 64D3 E5          >                push    hl
 377+ 64D4 DD E9       >                jp      (ix)
 378+ 64D6
 379+ 64D6              //  ______________________________________________________________________
 380+ 64D6              //
 381+ 64D6              // (find)       addr voc -- addr 0 | cfa b 1
 382+ 64D6              // vocabulary search,
 383+ 64D6              // - voc is starting word's NFA
 384+ 64D6              // - addr is the string to be searched for
 385+ 64D6              // On success, it returns the CFA of found word, the first NFA byte
 386+ 64D6              // (which contains length and some flags) and a true flag.
 387+ 64D6              // On fail, a false flag  (no more: leaves addr unchanged)
 388+ 64D6                              New_Def C_FIND, "(FIND)", is_code, is_normal
 388+ 64D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 64D6             >
 388+ 64D6             >                // dummy db directives used to calculate length of namec
 388+ 64D6 28 46 49 4E >                db      "(FIND)"
 388+ 64DA 44 29       >
 388+ 64DC             >len_NFA         defl    $ - temp_NFA
 388+ 64DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 64D6             >
 388+ 64D6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 64D7 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 388+ 64DB 44 29       >
 388+ 64DD             >                org     $-1                 // alter last byte of Name just above to set
 388+ 64DC A9          >                db      {b $} | END_BIT     // msb as name end
 388+ 64DD             >
 388+ 64DD C5 64       >                dw      last_NFA            // Link to previous definition Name
 388+ 64DF             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 64DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 388+ 64DF ~           >
 388+ 64DF ~           >
 388+ 64DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 64DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 64DF             >
 388+ 64DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 64DF                                                              // de has dictionary pointer
 390+ 64DF D1                               pop     de
 391+ 64E0              Find_VocabularyLoop:
 392+ 64E0 E1                               pop     hl                  // string pointer to search for
 393+ 64E1 E5                               push    hl                  // keep it on stack too for the end.
 394+ 64E2 1A                               ld      a, (de)             // save NFA length byte
 395+ 64E3 08                               ex      af,af'              // for later use (!)
 396+ 64E4 1A                               ld      a, (de)             // reload NFA length byte
 397+ 64E5 AE                               xor     (hl)                // check if same length
 398+ 64E6 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 399+ 64E8                                  // word an text haven't the same length, skip to next vocabulary entry
 400+ 64E8 20 2C                            jr      nz, Find_DifferentLenght
 401+ 64EA
 402+ 64EA              Find_ThisWord:  // begin loop
 403+ 64EA 23                                   inc     hl
 404+ 64EB 13                                   inc     de
 405+ 64EC 1A                                   ld      a, (de)
 406+ 64ED                                      // case insensitive option - begin
 407+ 64ED C5                                   push    bc
 408+ 64EE E6 80                                and     $80                 // split A in msb and the rest
 409+ 64F0 47                                   ld      b, a
 410+ 64F1 1A                                   ld      a, (de)
 411+ 64F2 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 412+ 64F4 CD 9A 64                             call    Case_Sensitive      // uppercase routine
 413+ 64F7 4F                                   ld      c, a
 414+ 64F8 7E                                   ld      a, (hl)
 415+ 64F9 CD 9A 64                             call    Case_Sensitive      // uppercase routine
 416+ 64FC A9                                   xor     c
 417+ 64FD A8                                   xor     b
 418+ 64FE C1                                   pop     bc
 419+ 64FF                                      // case insensitive option - end
 420+ 64FF 87                                   add     a                   // ignore msb during compare
 421+ 6500 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 422+ 6502
 423+ 6502                                  // loop back until last byte msb is found set
 424+ 6502                                  // that bit marks the ending char of this word
 425+ 6502 30 E6                            jr      nc, Find_ThisWord
 426+ 6504
 427+ 6504                                  // match found !
 428+ 6504 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 429+ 6507 19                                   add     hl, de
 430+ 6508 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 431+ 6509 08                                   ex      af, af'             // retrieve NFA byte (!)
 432+ 650A 5F                                   ld      e, a
 433+ 650B 16 00                                ld      d, 0
 434+ 650D
 435+ 650D
 436+ 650D 21 01 00                             ld      hl, 1
 437+ 6510                                      psh2
 437+ 6510 D5          >                push    de
 437+ 6511 E5          >                push    hl
 437+ 6512 DD E9       >                jp      (ix)
 438+ 6514
 439+ 6514              Find_DidntMatch: // didn't match (*)
 440+ 6514 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 441+ 6516
 442+ 6516              Find_DifferentLenght:
 443+ 6516                              // consume chars until the end of the word
 444+ 6516                              // that is last byte msb is found set
 445+ 6516 13                               inc     de
 446+ 6517 1A                               ld      a, (de)
 447+ 6518 87                               add     a, a
 448+ 6519 30 FB                        jr      nc, Find_DifferentLenght
 449+ 651B
 450+ 651B              Find_WordEnd:   // word-end  found (**)
 451+ 651B                              // take LFA and use it
 452+ 651B 13                           inc     de
 453+ 651C EB                           ex      de, hl
 454+ 651D 5E                           ld      e, (hl)
 455+ 651E 23                           inc     hl
 456+ 651F 56                           ld      d, (hl)
 457+ 6520 7A                           ld      a, d
 458+ 6521 B3                           or      e
 459+ 6522
 460+ 6522                          // loop until end of vocabulary
 461+ 6522 20 BC                    jr      nz, Find_VocabularyLoop
 462+ 6524
 463+ 6524 E1                       pop     hl              // with this, it leaves addr unchanged
 464+ 6525 21 00 00                 ld      hl, FALSE_FLAG
 465+ 6528
 466+ 6528                          psh1
 466+ 6528 E5          >                push    hl
 466+ 6529 DD E9       >                jp      (ix)
 467+ 652B
 468+ 652B              //  ______________________________________________________________________
 469+ 652B              //
 470+ 652B              // enclose      a c -- a  n1 n2 n3
 471+ 652B              // starting from a, using delimiter c, determines the offsets:
 472+ 652B              //   n1   the first character non-delimiter
 473+ 652B              //   n2   the first delimiter after the text
 474+ 652B              //   n3   the first character non enclosed.
 475+ 652B              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 476+ 652B              // an uncoditional delimiter.
 477+ 652B              // Examples:
 478+ 652B              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 479+ 652B              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 480+ 652B              // iii:	c  c  'nul'          -- 2  3  2
 481+ 652B                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 481+ 652B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 652B             >
 481+ 652B             >                // dummy db directives used to calculate length of namec
 481+ 652B 45 4E 43 4C >                db      "ENCLOSE"
 481+ 652F 4F 53 45    >
 481+ 6532             >len_NFA         defl    $ - temp_NFA
 481+ 6532             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 652B             >
 481+ 652B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 652C 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 481+ 6530 4F 53 45    >
 481+ 6533             >                org     $-1                 // alter last byte of Name just above to set
 481+ 6532 C5          >                db      {b $} | END_BIT     // msb as name end
 481+ 6533             >
 481+ 6533 D6 64       >                dw      last_NFA            // Link to previous definition Name
 481+ 6535             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 6535 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 481+ 6535 ~           >
 481+ 6535 ~           >
 481+ 6535             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 6535             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 6535             >
 481+ 6535             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 6535 D1                           pop     de                  //  e has the character
 483+ 6536 E1                           pop     hl                  // hl has the string address
 484+ 6537 E5                           push    hl
 485+ 6538 7B                           ld      a, e
 486+ 6539 11 FF FF                     ld      de, -1              // let's start from -1
 487+ 653C 2B                           dec     hl
 488+ 653D              Enclose_NonDelimiter:
 489+ 653D                              // find first non delimiter
 490+ 653D 23                               inc     hl
 491+ 653E 13                               inc     de
 492+ 653F BE                               cp      (hl)
 493+ 6540 28 FB                        jr      z, Enclose_NonDelimiter
 494+ 6542 D5                           push    de
 495+ 6543
 496+ 6543 C5                           push    bc                  // save Instruction Pointer
 497+ 6544
 498+ 6544 4F                           ld      c, a                // save char
 499+ 6545 7E                           ld      a, (hl)
 500+ 6546 A7                           and     a                   // stop if 0x00
 501+ 6547 20 07                        jr      nz, Enclose_NextChar
 502+ 6549
 503+ 6549                              /// case iii. no more character in string
 504+ 6549 C1                               pop     bc                  // restore Instruction Pointer
 505+ 654A 13                               inc     de
 506+ 654B D5                               push    de
 507+ 654C 1B                               dec     de
 508+ 654D D5                               push    de
 509+ 654E                                  next
 509+ 654E DD E9       >                jp      (ix)
 510+ 6550              Enclose_NextChar:
 511+ 6550 79                               ld      a, c
 512+ 6551 23                               inc     hl
 513+ 6552 13                               inc     de
 514+ 6553 BE                               cp      (hl)
 515+ 6554 20 06                            jr      nz, Enclose_NonSeparator
 516+ 6556
 517+ 6556                                      // case i. first non enclosed
 518+ 6556 C1                                   pop     bc                  // restore Instruction Pointer
 519+ 6557 D5                                   push    de
 520+ 6558 13                                   inc     de
 521+ 6559 D5                                   push    de
 522+ 655A                                      next
 522+ 655A DD E9       >                jp      (ix)
 523+ 655C              Enclose_NonSeparator:
 524+ 655C 7E                               ld      a, (hl)
 525+ 655D A7                               and     a
 526+ 655E 20 F0                        jr      nz, Enclose_NextChar
 527+ 6560
 528+ 6560                              // case ii. separator & terminator
 529+ 6560 C1                           pop     bc                  // restore Instruction Pointer
 530+ 6561 D5                           push    de
 531+ 6562 D5                           push    de
 532+ 6563                              next
 532+ 6563 DD E9       >                jp      (ix)
 533+ 6565
 534+ 6565              //  ______________________________________________________________________
 535+ 6565              //
 536+ 6565              // (map)        a2 a1 n c1 -- c2
 537+ 6565              // translate character c1 using mapping string a2 and a2
 538+ 6565              // if c1 is not present within string a1 then
 539+ 6565              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 540+ 6565                              New_Def C_MAP, "(MAP)", is_code, is_normal
 540+ 6565             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 540+ 6565             >
 540+ 6565             >                // dummy db directives used to calculate length of namec
 540+ 6565 28 4D 41 50 >                db      "(MAP)"
 540+ 6569 29          >
 540+ 656A             >len_NFA         defl    $ - temp_NFA
 540+ 656A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 540+ 6565             >
 540+ 6565 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 540+ 6566 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 540+ 656A 29          >
 540+ 656B             >                org     $-1                 // alter last byte of Name just above to set
 540+ 656A A9          >                db      {b $} | END_BIT     // msb as name end
 540+ 656B             >
 540+ 656B 2B 65       >                dw      last_NFA            // Link to previous definition Name
 540+ 656D             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 540+ 656D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 540+ 656D ~           >
 540+ 656D ~           >
 540+ 656D             >                endif           ; ok        // for other definitions it "points" the correct handler
 540+ 656D             >                // Use of "; ok" to suppress "warning[fwdref]"
 540+ 656D             >
 540+ 656D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 541+ 656D D9                           exx
 542+ 656E E1                           pop     hl
 543+ 656F 7D                           ld      a, l
 544+ 6570 C1                           pop     bc
 545+ 6571 E1                           pop     hl
 546+ 6572 50                           ld      d, b
 547+ 6573 59                           ld      e, c
 548+ 6574 ED B1                        cpir
 549+ 6576 E1                           pop     hl
 550+ 6577 20 05                        jr      nz, C_Map_Then
 550+ 6579
 551+ 6579 19                               add     hl, de
 552+ 657A 2B                               dec     hl
 553+ 657B ED 42                            sbc     hl, bc
 554+ 657D 7E                               ld      a, (hl)
 555+ 657E              C_Map_Then:
 556+ 657E 6F                           ld      l, a
 557+ 657F 26 00                        ld      h, 0
 558+ 6581 E5                           push    hl
 559+ 6582 D9                           exx
 560+ 6583                              next
 560+ 6583 DD E9       >                jp      (ix)
 561+ 6585
 562+ 6585              //  ______________________________________________________________________
 563+ 6585              //
 564+ 6585              // (compare)    a1 a2 n -- b
 565+ 6585              // this word performs a lexicographic compare of n bytes of text at address a1
 566+ 6585              // with n bytes of text at address a2. It returns numeric a value:
 567+ 6585              //  0 : if strings are equal
 568+ 6585              // +1 : if string at a1 greater than string at a2
 569+ 6585              // -1 : if string at a1 less than string at a2
 570+ 6585              // strings can be 256 bytes in length at most.
 571+ 6585                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 571+ 6585             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 571+ 6585             >
 571+ 6585             >                // dummy db directives used to calculate length of namec
 571+ 6585 28 43 4F 4D >                db      "(COMPARE)"
 571+ 6589 50 41 52 45 >
 571+ 658D 29          >
 571+ 658E             >len_NFA         defl    $ - temp_NFA
 571+ 658E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 571+ 6585             >
 571+ 6585 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 571+ 6586 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 571+ 658A 50 41 52 45 >
 571+ 658E 29          >
 571+ 658F             >                org     $-1                 // alter last byte of Name just above to set
 571+ 658E A9          >                db      {b $} | END_BIT     // msb as name end
 571+ 658F             >
 571+ 658F 65 65       >                dw      last_NFA            // Link to previous definition Name
 571+ 6591             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 571+ 6591 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 571+ 6591 ~           >
 571+ 6591 ~           >
 571+ 6591             >                endif           ; ok        // for other definitions it "points" the correct handler
 571+ 6591             >                // Use of "; ok" to suppress "warning[fwdref]"
 571+ 6591             >
 571+ 6591             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 572+ 6591 D9                           exx
 573+ 6592 E1                           pop     hl                  // Number of bytes
 574+ 6593 7D                           ld      a, l
 575+ 6594 E1                           pop     hl                  // hl points string a2
 576+ 6595 D1                           pop     de                  // hl points string a1
 577+ 6596              //              push    bc                  // Instruction pointer on stack
 578+ 6596 47                           ld      b, a
 579+ 6597              C_Compare_Loop:
 580+ 6597 7E                               ld      a, (hl)
 581+ 6598 CD 9A 64                         call    Case_Sensitive
 582+ 659B 4F                               ld      c, a
 583+ 659C 1A                               ld      a, (de)
 584+ 659D CD 9A 64                         call    Case_Sensitive
 585+ 65A0 B9                               cp      c
 586+ 65A1 13                               inc     de
 587+ 65A2 23                               inc     hl
 588+ 65A3 28 0E                            jr      z, C_Compare_Equal
 589+ 65A5 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 590+ 65A7 21 01 00                                 ld      hl, 1               // a1 gt a2
 591+ 65AA 18 03                                jr      C_Compare_Then      // Else
 592+ 65AC              C_Compare_NotLessThan:
 593+ 65AC 21 FF FF                                 ld      hl, -1              // a1 lt a2
 594+ 65AF              C_Compare_Then:                                 // Endif
 595+ 65AF              //                      pop     bc              // restore Instruction Pointer
 596+ 65AF E5                                   push    hl
 597+ 65B0 D9                                   exx
 598+ 65B1
 599+ 65B1                                      next
 599+ 65B1 DD E9       >                jp      (ix)
 600+ 65B3
 601+ 65B3              C_Compare_Equal:
 602+ 65B3 10 E2                        djnz    C_Compare_Loop
 603+ 65B5 21 00 00                     ld      hl, 0               // a1 eq a2
 604+ 65B8              //              pop     bc                  // restore Instruction Pointer
 605+ 65B8 E5                           push    hl
 606+ 65B9 D9                           exx
 607+ 65BA
 608+ 65BA                              next
 608+ 65BA DD E9       >                jp      (ix)
 609+ 65BC
 610+ 65BC              //  ______________________________________________________________________
 611+ 65BC              //
 612+ 65BC              // emitc        c --
 613+ 65BC              // low level emit, calls ROM routine at #10 to send a character to
 614+ 65BC              // the the current channel (see SELECT to change stream-channel)
 615+ 65BC                              New_Def EMITC, "EMITC", is_code, is_normal
 615+ 65BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 65BC             >
 615+ 65BC             >                // dummy db directives used to calculate length of namec
 615+ 65BC 45 4D 49 54 >                db      "EMITC"
 615+ 65C0 43          >
 615+ 65C1             >len_NFA         defl    $ - temp_NFA
 615+ 65C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 65BC             >
 615+ 65BC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 65BD 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 615+ 65C1 43          >
 615+ 65C2             >                org     $-1                 // alter last byte of Name just above to set
 615+ 65C1 C3          >                db      {b $} | END_BIT     // msb as name end
 615+ 65C2             >
 615+ 65C2 85 65       >                dw      last_NFA            // Link to previous definition Name
 615+ 65C4             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 65C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 615+ 65C4 ~           >
 615+ 65C4 ~           >
 615+ 65C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 65C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 65C4             >
 615+ 65C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 65C4 E1                           pop     hl
 617+ 65C5 7D                           ld      a, l
 618+ 65C6              Emitc_Ptr:
 619+ 65C6 C5                           push    bc
 620+ 65C7 DD E5                        push    ix
 621+ 65C9 D7                           rst     $10
 622+ 65CA DD E1                        pop     ix
 623+ 65CC C1                           pop     bc
 624+ 65CD 3E FF                        ld      a, 255            // max possible
 625+ 65CF 32 8C 5C                     ld      (SCR_CT), a
 626+ 65D2
 627+ 65D2                              next
 627+ 65D2 DD E9       >                jp      (ix)
 628+ 65D4
 629+ 65D4              Emitc_Vec:
 630+ 65D4 17 66                        dw      C_Emit_Printable  // comma
 631+ 65D6 1D 66                        dw      C_Emit_Bel        // bel
 632+ 65D8 17 66                        dw      C_Emit_Printable  // bs
 633+ 65DA 32 66                        dw      C_Emit_Tab        // tab
 634+ 65DC 17 66                        dw      C_Emit_Printable  // cr
 635+ 65DE 38 66                        dw      C_Emit_NL         // lf (unix newline)
 636+ 65E0 17 66                        dw      C_Emit_Printable  // blank
 637+ 65E2 17 66                        dw      C_Emit_Printable  // blank
 638+ 65E4
 639+ 65E4              Emit_Selector_Start:
 640+ 65E4 06                           db      $06                 // comma
 641+ 65E5 07                           db      $07                 // bel
 642+ 65E6 08                           db      $08                 // bs
 643+ 65E7 09                           db      $09                 // tab
 644+ 65E8 0D                           db      $0D                 // cr
 645+ 65E9 0A                           db      $0A                 // lf (unix newline)
 646+ 65EA 20                           db      $20
 647+ 65EB              Emit_Selector_End:
 648+ 65EB 20                           db      $20
 649+ 65EC
 650+ 65EC              //  ______________________________________________________________________
 651+ 65EC              //
 652+ 65EC              // (?emit)      c1 -- c2 | c1
 653+ 65EC              // decode a character to be sent via EMIT
 654+ 65EC              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 655+ 65EC              // the routine should resolve anything and convert the character anyway.
 656+ 65EC                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 656+ 65EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 656+ 65EC             >
 656+ 65EC             >                // dummy db directives used to calculate length of namec
 656+ 65EC 28 3F 45 4D >                db      "(?EMIT)"
 656+ 65F0 49 54 29    >
 656+ 65F3             >len_NFA         defl    $ - temp_NFA
 656+ 65F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 656+ 65EC             >
 656+ 65EC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 656+ 65ED 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 656+ 65F1 49 54 29    >
 656+ 65F4             >                org     $-1                 // alter last byte of Name just above to set
 656+ 65F3 A9          >                db      {b $} | END_BIT     // msb as name end
 656+ 65F4             >
 656+ 65F4 BC 65       >                dw      last_NFA            // Link to previous definition Name
 656+ 65F6             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 656+ 65F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 656+ 65F6 ~           >
 656+ 65F6 ~           >
 656+ 65F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 656+ 65F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 656+ 65F6             >
 656+ 65F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 657+ 65F6 D1                           pop     de
 658+ 65F7 7B                           ld      a, e                //  de has c1
 659+ 65F8 E6 7F                        and     $7F                 // 7-bit ascii only
 660+ 65FA C5                           push    bc                  // save Instruction Pointer
 661+ 65FB 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 662+ 65FE 21 EB 65                     ld      hl, Emit_Selector_End
 663+ 6601 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 664+ 6603 20 0B                        jr      nz, C_Emit_Not_Found
 665+ 6605                                  // Found then decode it
 666+ 6605 21 D4 65                         ld      hl, Emitc_Vec
 667+ 6608 09                               add     hl, bc
 668+ 6609 09                               add     hl, bc
 669+ 660A 5E                               ld      e, (hl)
 670+ 660B 23                               inc     hl
 671+ 660C 56                               ld      d, (hl)
 672+ 660D EB                               ex      de, hl
 673+ 660E C1                               pop     bc                  // restore Instruction Pointer
 674+ 660F E9                               jp      (hl)                // one of the following labels
 675+ 6610              C_Emit_Not_Found:
 676+ 6610 C1                           pop     bc                  // restore Instruction Pointer
 677+ 6611 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 678+ 6613 30 02                        jr      nc, C_Emit_Printable
 679+ 6615 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 680+ 6617              C_Emit_Printable:
 681+ 6617 6F                           ld      l, a
 682+ 6618 26 00                        ld      h, 0
 683+ 661A
 684+ 661A                              psh1
 684+ 661A E5          >                push    hl
 684+ 661B DD E9       >                jp      (ix)
 685+ 661D
 686+ 661D              C_Emit_Bel:
 687+ 661D C5                           push    bc                  // save Instruction Pointer
 688+ 661E 11 00 01                     ld      de, $0100
 689+ 6621 21 00 02                     ld      hl, $0200
 690+ 6624 DD E5                        push    ix                  // save Next Pointer
 691+ 6626 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 692+ 6629 DD E1                        pop     ix                  // restore Next Pointer
 693+ 662B C1                           pop     bc                  // restore Instruction Pointer
 694+ 662C 21 00 00                     ld      hl, NUL_CHAR
 695+ 662F
 696+ 662F                              psh1
 696+ 662F E5          >                push    hl
 696+ 6630 DD E9       >                jp      (ix)
 697+ 6632
 698+ 6632 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 699+ 6635
 700+ 6635                              psh1
 700+ 6635 E5          >                push    hl
 700+ 6636 DD E9       >                jp      (ix)
 701+ 6638
 702+ 6638 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 703+ 663B
 704+ 663B                              psh1
 704+ 663B E5          >                push    hl
 704+ 663C DD E9       >                jp      (ix)
 705+ 663E
 706+ 663E              //  ______________________________________________________________________
 707+ 663E
 708+ 663E              Key_Table:
 709+ 663E E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 710+ 663F C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 711+ 6640 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 712+ 6641 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 713+ 6642 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 714+ 6643 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 715+ 6644 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 716+ 6645 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 717+ 6646 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 718+ 6647 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 719+ 6648 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 720+ 6649              Key_MapTo:
 721+ 6649 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 722+ 664A 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 723+ 664B 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 724+ 664C 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 725+ 664D 5D                           db      $5D                 //  6: SYMBOL+U : ]
 726+ 664E 5B                           db      $5B                 //  5: SYMBOL+Y : [
 727+ 664F 7D                           db      $7D                 //  4: SYMBOL+G : }
 728+ 6650 7B                           db      $7B                 //  3: SYMBOL+F : {
 729+ 6651 5C                           db      $5C                 //  2: SYMBOl+D : //
 730+ 6652 7C                           db      $7C                 //  1: SYMBOL+S : |
 731+ 6653 7E                           db      $7E                 //  0: SYMBOL+A : ~
 732+ 6654
 733+ 6654              //  ______________________________________________________________________
 734+ 6654              //
 735+ 6654              // key          -- c
 736+ 6654              // wait for a keypress
 737+ 6654              // This definition need Standard ROM Interrupt to be served
 738+ 6654
 739+ 6654                              New_Def KEY, "KEY", is_code, is_normal
 739+ 6654             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ 6654             >
 739+ 6654             >                // dummy db directives used to calculate length of namec
 739+ 6654 4B 45 59    >                db      "KEY"
 739+ 6657             >len_NFA         defl    $ - temp_NFA
 739+ 6657             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ 6654             >
 739+ 6654 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ 6655 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 739+ 6658             >                org     $-1                 // alter last byte of Name just above to set
 739+ 6657 D9          >                db      {b $} | END_BIT     // msb as name end
 739+ 6658             >
 739+ 6658 EC 65       >                dw      last_NFA            // Link to previous definition Name
 739+ 665A             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 665A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 739+ 665A ~           >
 739+ 665A ~           >
 739+ 665A             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 665A             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 665A             >
 739+ 665A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 665A
 741+ 665A C5                           push    bc                  // save Instruction Pointer
 742+ 665B DD E5                        push    ix
 743+ 665D
 744+ 665D ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 745+ 6661 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 746+ 6664 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 747+ 6668
 748+ 6668              Key_Wait:
 749+ 6668 76                               halt
 750+ 6669 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 751+ 666B CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 752+ 666E
 753+ 666E                                  // software-flash: flips face every 320 ms
 754+ 666E 3E 10                            ld      a, $10              // Timing based
 755+ 6670 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 756+ 6673
 757+ 6673 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 758+ 6676 20 0C                            jr      nz, Key_Cursor
 759+ 6678 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 760+ 667B FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 761+ 667F 28 03                                jr      z, Key_Cursor
 762+ 6681 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 763+ 6684              Key_Cursor:
 764+ 6684 D7                               rst     $10
 765+ 6685 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 766+ 6687 D7                               rst     $10
 767+ 6688
 768+ 6688 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 769+ 668C 28 DA                        jr      z, Key_Wait
 770+ 668E
 771+ 668E 76                           halt    // this is to sync flashing cursor.
 772+ 668F
 773+ 668F 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 774+ 6691 D7                           rst     $10
 775+ 6692 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 776+ 6694 D7                           rst     $10
 777+ 6695 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 778+ 6698
 779+ 6698                              // decode character from above table
 780+ 6698 21 3E 66                     ld      hl, Key_Table
 781+ 669B 01 0B 00                     ld      bc, $000B
 782+ 669E ED B1                        cpir
 783+ 66A0 20 05                        jr      nz, Key_DontMap
 784+ 66A2 21 49 66                         ld      hl, Key_MapTo
 785+ 66A5 09                               add     hl, bc
 786+ 66A6 7E                               ld      a, (hl)
 787+ 66A7 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 788+ 66A9 20 09                        jr      nz, Key_NoCapsLock
 789+ 66AB 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 790+ 66AE 7E                               ld      a, (hl)
 791+ 66AF EE 08                            xor     $08
 792+ 66B1 77                               ld      (hl), a
 793+ 66B2 3E 00                            ld      a, NUL_CHAR
 794+ 66B4 6F           Key_NoCapsLock: ld      l, a
 795+ 66B5 26 00                        ld      h, 0                // Prepare TOS
 796+ 66B7
 797+ 66B7 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 798+ 66BA 1F                           rra
 799+ 66BB 1F                           rra
 800+ 66BC 1F                           rra
 801+ 66BD F6 18                        or      $18                 // quick'n'dirty click
 802+ 66BF D3 FE                        out     ($fe), a
 803+ 66C1 06 00                        ld      b, 0
 804+ 66C3 10 FE                        djnz    $                   // wait loop
 805+ 66C5 EE 18                        xor     $18
 806+ 66C7 D3 FE                        out     ($fe), a
 807+ 66C9
 808+ 66C9 ED 7B 92 63                  ld      sp, (SP_Saved)
 809+ 66CD
 810+ 66CD DD E1                        pop     ix
 811+ 66CF C1                           pop     bc                  // Restore Instruction Pointer
 812+ 66D0
 813+ 66D0                              psh1
 813+ 66D0 E5          >                push    hl
 813+ 66D1 DD E9       >                jp      (ix)
 814+ 66D3
 815+ 66D3              //  ______________________________________________________________________
 816+ 66D3              //
 817+ 66D3              // ?terminal    -- FALSE | TRUE
 818+ 66D3              // test for BREAK keypress
 819+ 66D3                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 819+ 66D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ 66D3             >
 819+ 66D3             >                // dummy db directives used to calculate length of namec
 819+ 66D3 3F 54 45 52 >                db      "?TERMINAL"
 819+ 66D7 4D 49 4E 41 >
 819+ 66DB 4C          >
 819+ 66DC             >len_NFA         defl    $ - temp_NFA
 819+ 66DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ 66D3             >
 819+ 66D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ 66D4 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 819+ 66D8 4D 49 4E 41 >
 819+ 66DC 4C          >
 819+ 66DD             >                org     $-1                 // alter last byte of Name just above to set
 819+ 66DC CC          >                db      {b $} | END_BIT     // msb as name end
 819+ 66DD             >
 819+ 66DD 54 66       >                dw      last_NFA            // Link to previous definition Name
 819+ 66DF             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 66DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 819+ 66DF ~           >
 819+ 66DF ~           >
 819+ 66DF             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 66DF             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 66DF             >
 819+ 66DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 66DF 21 00 00                     ld      hl, 0
 821+ 66E2 ED 73 92 63                  ld      (SP_Saved), sp
 822+ 66E6 31 61 63                     ld      sp, Cold_origin - 5
 823+ 66E9 CD 54 1F                     call    $1F54
 824+ 66EC ED 7B 92 63                  ld      sp, (SP_Saved)
 825+ 66F0
 826+ 66F0 38 01                        jr      c, QTerminal_NoBreak
 827+ 66F2 2B                               dec     hl                  // quick TRUE_FLAG
 828+ 66F3              QTerminal_NoBreak:
 829+ 66F3
 830+ 66F3                              psh1
 830+ 66F3 E5          >                push    hl
 830+ 66F4 DD E9       >                jp      (ix)
 831+ 66F6
 832+ 66F6
 833+ 66F6              //  ______________________________________________________________________
 834+ 66F6              //
 835+ 66F6              // ZX Spectrum Next - Low Level disk primitives.
 836+ 66F6              // this include is "here" for backward compatibility
 837+ 66F6
 838+ 66F6                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++66F6              //  ______________________________________________________________________
   2++66F6              //
   3++66F6              //  next-opt.asm
   4++66F6              //
   5++66F6              //  ZX Spectrum Next - peculiar definitions
   6++66F6              //  ______________________________________________________________________
   7++66F6
   8++66F6              //  ______________________________________________________________________
   9++66F6              //
  10++66F6              // f_seek       d u -- f
  11++66F6              // Seek to position d in file-handle u.
  12++66F6              // Return a false-flag 0 on success, True flag on error
  13++66F6                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++66F6             >
  13++66F6             >                // dummy db directives used to calculate length of namec
  13++66F6 46 5F 53 45 >                db      "F_SEEK"
  13++66FA 45 4B       >
  13++66FC             >len_NFA         defl    $ - temp_NFA
  13++66FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++66F6             >
  13++66F6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++66F7 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++66FB 45 4B       >
  13++66FD             >                org     $-1                 // alter last byte of Name just above to set
  13++66FC CB          >                db      {b $} | END_BIT     // msb as name end
  13++66FD             >
  13++66FD D3 66       >                dw      last_NFA            // Link to previous definition Name
  13++66FF             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66FF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66FF ~           >
  13++66FF ~           >
  13++66FF             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66FF             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66FF             >
  13++66FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66FF E1                           pop     hl                  // file-handle
  15++6700 7D                           ld      a, l                // file-handle
  16++6701 60                           ld      h, b                // save Intruction Pointer
  17++6702 69                           ld      l, c
  18++6703 C1                           pop     bc                  // bc has high-word of d
  19++6704 D1                           pop     de
  20++6705 DD E5                        push    ix
  21++6707 E5                           push    hl                  // save Instruction Pointer
  22++6708 DD 21 00 00                  ld      ix, 0
  23++670C CF                           rst     $08
  24++670D 9F                           db      $9F
  25++670E C1                           pop     bc                  // restore Instruction Pointer
  26++670F DD E1                        pop     ix
  27++6711 ED 62                        sbc     hl, hl              // to get 0 or -1
  28++6713
  29++6713                              psh1
  29++6713 E5          >                push    hl
  29++6714 DD E9       >                jp      (ix)
  30++6716
  31++6716              //  ______________________________________________________________________
  32++6716              //
  33++6716              // f_fgetpos    u -- d f
  34++6716              // Seek to position d in file-handle u.
  35++6716              // Return a false-flag 0 on success, True flag on error
  36++6716                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  36++6716             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  36++6716             >
  36++6716             >                // dummy db directives used to calculate length of namec
  36++6716 46 5F 46 47 >                db      "F_FGETPOS"
  36++671A 45 54 50 4F >
  36++671E 53          >
  36++671F             >len_NFA         defl    $ - temp_NFA
  36++671F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  36++6716             >
  36++6716 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  36++6717 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  36++671B 45 54 50 4F >
  36++671F 53          >
  36++6720             >                org     $-1                 // alter last byte of Name just above to set
  36++671F D3          >                db      {b $} | END_BIT     // msb as name end
  36++6720             >
  36++6720 F6 66       >                dw      last_NFA            // Link to previous definition Name
  36++6722             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  36++6722 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  36++6722 ~           >
  36++6722 ~           >
  36++6722             >                endif           ; ok        // for other definitions it "points" the correct handler
  36++6722             >                // Use of "; ok" to suppress "warning[fwdref]"
  36++6722             >
  36++6722             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  37++6722 E1                           pop     hl
  38++6723 7D                           ld      a, l                // file-handle
  39++6724 DD E5                        push    ix
  40++6726 C5                           push    bc
  41++6727 CF                           rst     $08
  42++6728 A0                           db      $A0
  43++6729 E1                           pop     hl                  // restore Instruction Pointer
  44++672A DD E1                        pop     ix
  45++672C D5                           push    de
  46++672D C5                           push    bc
  47++672E 44                           ld      b, h                // restore Instruction Pointer
  48++672F 4D                           ld      c, l
  49++6730 ED 62                        sbc     hl, hl
  50++6732
  51++6732                              psh1
  51++6732 E5          >                push    hl
  51++6733 DD E9       >                jp      (ix)
  52++6735
  53++6735              //  ______________________________________________________________________
  54++6735              //
  55++6735              // f_read       a b u -- n f
  56++6735              // Read b bytes from file-handle u to address a
  57++6735              // Return the actual number n of bytes read
  58++6735              // Return 0 on success, True flag on error
  59++6735                              New_Def F_READ, "F_READ", is_code, is_normal
  59++6735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59++6735             >
  59++6735             >                // dummy db directives used to calculate length of namec
  59++6735 46 5F 52 45 >                db      "F_READ"
  59++6739 41 44       >
  59++673B             >len_NFA         defl    $ - temp_NFA
  59++673B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59++6735             >
  59++6735 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59++6736 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  59++673A 41 44       >
  59++673C             >                org     $-1                 // alter last byte of Name just above to set
  59++673B C4          >                db      {b $} | END_BIT     // msb as name end
  59++673C             >
  59++673C 16 67       >                dw      last_NFA            // Link to previous definition Name
  59++673E             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  59++673E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  59++673E ~           >
  59++673E ~           >
  59++673E             >                endif           ; ok        // for other definitions it "points" the correct handler
  59++673E             >                // Use of "; ok" to suppress "warning[fwdref]"
  59++673E             >
  59++673E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60++673E
  61++673E 50                           ld      d, b
  62++673F 59                           ld      e, c
  63++6740 E1                           pop     hl
  64++6741 7D                           ld      a, l                // file-handle
  65++6742 C1                           pop     bc                  // bc has bytes to read
  66++6743 DD E3                        ex      (sp), ix            // ix has address
  67++6745 D5                           push    de                  // Save Instruction pointer
  68++6746 CF                           rst     $08
  69++6747 9D                           db      $9D
  70++6748 C1                           pop     bc                  // Restore Instruction pointer
  71++6749 DD E1                        pop     ix                  // Restore ix
  72++674B D5                           push    de                  // bytes written
  73++674C ED 62                        sbc     hl, hl
  74++674E
  75++674E                              psh1
  75++674E E5          >                push    hl
  75++674F DD E9       >                jp      (ix)
  76++6751
  77++6751              //  ______________________________________________________________________
  78++6751              //
  79++6751              // f_write      a b u -- n f
  80++6751              // Write bytes currently stored at address a to file-handle u.
  81++6751              // Return the actual n bytes written and 0 on success, True flag on error.
  82++6751                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
  82++6751             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82++6751             >
  82++6751             >                // dummy db directives used to calculate length of namec
  82++6751 46 5F 57 52 >                db      "F_WRITE"
  82++6755 49 54 45    >
  82++6758             >len_NFA         defl    $ - temp_NFA
  82++6758             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82++6751             >
  82++6751 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82++6752 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
  82++6756 49 54 45    >
  82++6759             >                org     $-1                 // alter last byte of Name just above to set
  82++6758 C5          >                db      {b $} | END_BIT     // msb as name end
  82++6759             >
  82++6759 35 67       >                dw      last_NFA            // Link to previous definition Name
  82++675B             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  82++675B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  82++675B ~           >
  82++675B ~           >
  82++675B             >                endif           ; ok        // for other definitions it "points" the correct handler
  82++675B             >                // Use of "; ok" to suppress "warning[fwdref]"
  82++675B             >
  82++675B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83++675B
  84++675B 50                           ld      d, b
  85++675C 59                           ld      e, c
  86++675D E1                           pop     hl
  87++675E 7D                           ld      a, l                // file-handle
  88++675F C1                           pop     bc                  // bc has bytes to read
  89++6760 DD E3                        ex      (sp), ix            // ix has address
  90++6762 D5                           push    de                  // Save Instruction pointer
  91++6763 CF                           rst     $08
  92++6764 9E                           db      $9E
  93++6765 C1                           pop     bc                  // Restore Instruction pointer
  94++6766 DD E1                        pop     ix                  // Restore ix
  95++6768 D5                           push    de                  // bytes written
  96++6769 ED 62                        sbc     hl, hl
  97++676B
  98++676B                              psh1
  98++676B E5          >                push    hl
  98++676C DD E9       >                jp      (ix)
  99++676E
 100++676E              //  ______________________________________________________________________
 101++676E              //
 102++676E              // f_close      u -- f
 103++676E              // Close file-handle u.
 104++676E              // Return 0 on success, True flag on error
 105++676E
 106++676E                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
 106++676E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 106++676E             >
 106++676E             >                // dummy db directives used to calculate length of namec
 106++676E 46 5F 43 4C >                db      "F_CLOSE"
 106++6772 4F 53 45    >
 106++6775             >len_NFA         defl    $ - temp_NFA
 106++6775             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 106++676E             >
 106++676E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 106++676F 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
 106++6773 4F 53 45    >
 106++6776             >                org     $-1                 // alter last byte of Name just above to set
 106++6775 C5          >                db      {b $} | END_BIT     // msb as name end
 106++6776             >
 106++6776 51 67       >                dw      last_NFA            // Link to previous definition Name
 106++6778             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 106++6778 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 106++6778 ~           >
 106++6778 ~           >
 106++6778             >                endif           ; ok        // for other definitions it "points" the correct handler
 106++6778             >                // Use of "; ok" to suppress "warning[fwdref]"
 106++6778             >
 106++6778             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 107++6778
 108++6778 E1                           pop     hl
 109++6779 7D                           ld      a, l                // file-handle
 110++677A DD E5                        push    ix
 111++677C C5                           push    bc                  // Save Instruction pointer
 112++677D CF                           rst     $08
 113++677E 9B                           db      $9B
 114++677F C1                           pop     bc
 115++6780 DD E1                        pop     ix
 116++6782 ED 62                        sbc     hl, hl
 117++6784
 118++6784                              psh1
 118++6784 E5          >                push    hl
 118++6785 DD E9       >                jp      (ix)
 119++6787
 120++6787              //  ______________________________________________________________________
 121++6787              //
 122++6787              // f_open       a1 a2 b -- u f
 123++6787              // open a file
 124++6787              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 125++6787              // a2 is address to an 8-byte header data used in some cases.
 126++6787              // b is access mode-byte, that is a combination of:
 127++6787              // any/all of:
 128++6787              //   esx_mode_read          $01 request read access
 129++6787              //   esx_mode_write         $02 request write access
 130++6787              //   esx_mode_use_header    $40 read/write +3DOS header
 131++6787              // plus one of:
 132++6787              //   esx_mode_open_exist    $00 only open existing file
 133++6787              //   esx_mode_open_creat    $08 open existing or create file
 134++6787              //   esx_mode_creat_noexist $04 create new file, error if exists
 135++6787              //   esx_mode_creat_trunc   $0c create new file, delete existing
 136++6787              // Return file-handle u and 0 on success, True flag on error
 137++6787                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 137++6787             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137++6787             >
 137++6787             >                // dummy db directives used to calculate length of namec
 137++6787 46 5F 4F 50 >                db      "F_OPEN"
 137++678B 45 4E       >
 137++678D             >len_NFA         defl    $ - temp_NFA
 137++678D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137++6787             >
 137++6787 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137++6788 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 137++678C 45 4E       >
 137++678E             >                org     $-1                 // alter last byte of Name just above to set
 137++678D CE          >                db      {b $} | END_BIT     // msb as name end
 137++678E             >
 137++678E 6E 67       >                dw      last_NFA            // Link to previous definition Name
 137++6790             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137++6790 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137++6790 ~           >
 137++6790 ~           >
 137++6790             >                endif           ; ok        // for other definitions it "points" the correct handler
 137++6790             >                // Use of "; ok" to suppress "warning[fwdref]"
 137++6790             >
 137++6790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138++6790 60                           ld      h, b                // Save Instruction pointer
 139++6791 69                           ld      l, c
 140++6792 C1                           pop     bc                  // file-mode
 141++6793 41                           ld      b, c                // file-mode
 142++6794 D1                           pop     de                  // 8-bytes buffer if any
 143++6795 DD E3                        ex      (sp), ix            // filespec nul-terminated
 144++6797 E5                           push    hl                  // Save Instruction pointer
 145++6798 3E 2A                        ld      a, "*"
 146++679A CF                           rst     $08
 147++679B 9A                           db      $9A
 148++679C C1                           pop     bc
 149++679D DD E1                        pop     ix
 150++679F ED 62                        sbc     hl, hl
 151++67A1 5F                           ld      e, a
 152++67A2 16 00                        ld      d, 0
 153++67A4
 154++67A4
 155++67A4                              psh2
 155++67A4 D5          >                push    de
 155++67A5 E5          >                push    hl
 155++67A6 DD E9       >                jp      (ix)
 156++67A8
 157++67A8              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 158++67A8              //   \ FILENAME 1+ PAD 1 F_OPEN
 159++67A8              //   \ DROP
 160++67A8              //   \ F_CLOSE
 161++67A8
 162++67A8              //  ______________________________________________________________________
 163++67A8              //
 164++67A8              // f_sync      u -- f
 165++67A8              // Close file-handle u.
 166++67A8              // Return 0 on success, True flag on error
 167++67A8
 168++67A8                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
 168++67A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168++67A8             >
 168++67A8             >                // dummy db directives used to calculate length of namec
 168++67A8 46 5F 53 59 >                db      "F_SYNC"
 168++67AC 4E 43       >
 168++67AE             >len_NFA         defl    $ - temp_NFA
 168++67AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168++67A8             >
 168++67A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168++67A9 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
 168++67AD 4E 43       >
 168++67AF             >                org     $-1                 // alter last byte of Name just above to set
 168++67AE C3          >                db      {b $} | END_BIT     // msb as name end
 168++67AF             >
 168++67AF 87 67       >                dw      last_NFA            // Link to previous definition Name
 168++67B1             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 168++67B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 168++67B1 ~           >
 168++67B1 ~           >
 168++67B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 168++67B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 168++67B1             >
 168++67B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169++67B1 E1                           pop     hl
 170++67B2 7D                           ld      a, l                // file-handle
 171++67B3 DD E5                        push    ix
 172++67B5 C5                           push    bc
 173++67B6 CF                           rst     $08
 174++67B7 9C                           db      $9C
 175++67B8 C1                           pop     bc
 176++67B9 DD E1                        pop     ix
 177++67BB ED 62                        sbc     hl, hl
 178++67BD
 179++67BD                              psh1
 179++67BD E5          >                push    hl
 179++67BE DD E9       >                jp      (ix)
 180++67C0
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 839+ 67C0
 840+ 67C0
 841+ 67C0              //  ______________________________________________________________________
 842+ 67C0              //
 843+ 67C0              // cr           --
 844+ 67C0              // send a CR via EMITC
 845+ 67C0                              New_Def CR, "CR", is_code, is_normal
 845+ 67C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ 67C0             >
 845+ 67C0             >                // dummy db directives used to calculate length of namec
 845+ 67C0 43 52       >                db      "CR"
 845+ 67C2             >len_NFA         defl    $ - temp_NFA
 845+ 67C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ 67C0             >
 845+ 67C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ 67C1 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 845+ 67C3             >                org     $-1                 // alter last byte of Name just above to set
 845+ 67C2 D2          >                db      {b $} | END_BIT     // msb as name end
 845+ 67C3             >
 845+ 67C3 A8 67       >                dw      last_NFA            // Link to previous definition Name
 845+ 67C5             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 67C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 845+ 67C5 ~           >
 845+ 67C5 ~           >
 845+ 67C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 67C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 67C5             >
 845+ 67C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 67C5
 847+ 67C5 3E 0D                        ld      a, CR_CHAR
 848+ 67C7 C3 C6 65                     jp      Emitc_Ptr
 849+ 67CA
 850+ 67CA              //  ______________________________________________________________________
 851+ 67CA              //
 852+ 67CA              // cmove    a1 a2 u --
 853+ 67CA              // If u > 0, moves memory content starting at address a1 for n bytes long
 854+ 67CA              // storing then starting at address addr2.
 855+ 67CA              // The content of a1 is moved first. See CMOVE> also.
 856+ 67CA                              New_Def CMOVE, "CMOVE", is_code, is_normal
 856+ 67CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 856+ 67CA             >
 856+ 67CA             >                // dummy db directives used to calculate length of namec
 856+ 67CA 43 4D 4F 56 >                db      "CMOVE"
 856+ 67CE 45          >
 856+ 67CF             >len_NFA         defl    $ - temp_NFA
 856+ 67CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 856+ 67CA             >
 856+ 67CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 856+ 67CB 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 856+ 67CF 45          >
 856+ 67D0             >                org     $-1                 // alter last byte of Name just above to set
 856+ 67CF C5          >                db      {b $} | END_BIT     // msb as name end
 856+ 67D0             >
 856+ 67D0 C0 67       >                dw      last_NFA            // Link to previous definition Name
 856+ 67D2             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 856+ 67D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 856+ 67D2 ~           >
 856+ 67D2 ~           >
 856+ 67D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 856+ 67D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 856+ 67D2             >
 856+ 67D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 857+ 67D2 D9                           exx
 858+ 67D3
 859+ 67D3 C1                           pop     bc                  // bc has counter
 860+ 67D4 D1                           pop     de                  // de now has dest
 861+ 67D5 E1                           pop     hl                 // hl has source, save Instruction Pointer
 862+ 67D6 78                           ld      a, b
 863+ 67D7 B1                           or      c
 864+ 67D8 28 02                        jr      z, Cmove_NoMove
 865+ 67DA ED B0                            ldir
 866+ 67DC              Cmove_NoMove:
 867+ 67DC D9                           exx
 868+ 67DD
 869+ 67DD                              next
 869+ 67DD DD E9       >                jp      (ix)
 870+ 67DF
 871+ 67DF              //  ______________________________________________________________________
 872+ 67DF              //
 873+ 67DF              // cmove>    a1 a2 u --
 874+ 67DF              // If u > 0, moves memory content starting at address a1 for n bytes long
 875+ 67DF              // storing then starting at address addr2.
 876+ 67DF              // The content of a1 is moved last. See cmove.
 877+ 67DF                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 877+ 67DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 877+ 67DF             >
 877+ 67DF             >                // dummy db directives used to calculate length of namec
 877+ 67DF 43 4D 4F 56 >                db      "CMOVE>"
 877+ 67E3 45 3E       >
 877+ 67E5             >len_NFA         defl    $ - temp_NFA
 877+ 67E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 877+ 67DF             >
 877+ 67DF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 877+ 67E0 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 877+ 67E4 45 3E       >
 877+ 67E6             >                org     $-1                 // alter last byte of Name just above to set
 877+ 67E5 BE          >                db      {b $} | END_BIT     // msb as name end
 877+ 67E6             >
 877+ 67E6 CA 67       >                dw      last_NFA            // Link to previous definition Name
 877+ 67E8             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 877+ 67E8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 877+ 67E8 ~           >
 877+ 67E8 ~           >
 877+ 67E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 877+ 67E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 877+ 67E8             >
 877+ 67E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 878+ 67E8 D9                           exx
 879+ 67E9
 880+ 67E9 C1                           pop     bc                  // bc has counter
 881+ 67EA D1                           pop     de                  // de has dest
 882+ 67EB E1                           pop     hl                  // hl has source
 883+ 67EC 78                           ld      a, b
 884+ 67ED B1                           or      c
 885+ 67EE 28 08                        jr      z, CmoveV_NoMove
 886+ 67F0 EB                               ex      de, hl              // compute address to
 887+ 67F1 09                               add     hl, bc              // operate backward
 888+ 67F2 2B                               dec     hl
 889+ 67F3 EB                               ex      de, hl
 890+ 67F4 09                               add     hl, bc
 891+ 67F5 2B                               dec     hl
 892+ 67F6 ED B8                            lddr                        // backward
 893+ 67F8              CmoveV_NoMove:
 894+ 67F8 D9                           exx
 895+ 67F9
 896+ 67F9                              next
 896+ 67F9 DD E9       >                jp      (ix)
 897+ 67FB
 898+ 67FB              //  ______________________________________________________________________
 899+ 67FB              //
 900+ 67FB              // um*      u1 u2 -- ud
 901+ 67FB              // Unsigned multiplication
 902+ 67FB              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 903+ 67FB              // On the stack a double number is treated as two single numbers
 904+ 67FB              // where DE is on the top of the stack and HL is the second from top,
 905+ 67FB              // Instead, in 2VARIABLE a double number is stored as EDLH.
 906+ 67FB              // this definition could use "MUL" Z80N new op-code.
 907+ 67FB                              New_Def UM_MUL, "UM*", is_code, is_normal
 907+ 67FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 907+ 67FB             >
 907+ 67FB             >                // dummy db directives used to calculate length of namec
 907+ 67FB 55 4D 2A    >                db      "UM*"
 907+ 67FE             >len_NFA         defl    $ - temp_NFA
 907+ 67FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 907+ 67FB             >
 907+ 67FB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 907+ 67FC 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 907+ 67FF             >                org     $-1                 // alter last byte of Name just above to set
 907+ 67FE AA          >                db      {b $} | END_BIT     // msb as name end
 907+ 67FF             >
 907+ 67FF DF 67       >                dw      last_NFA            // Link to previous definition Name
 907+ 6801             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 907+ 6801 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 907+ 6801 ~           >
 907+ 6801 ~           >
 907+ 6801             >                endif           ; ok        // for other definitions it "points" the correct handler
 907+ 6801             >                // Use of "; ok" to suppress "warning[fwdref]"
 907+ 6801             >
 907+ 6801             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 908+ 6801 D1                           pop     de                    // de has u2 operand
 909+ 6802 E1                           pop     hl                    // hl has u1 operand
 910+ 6803 C5                           push    bc                    // Save Instruction Pointer
 911+ 6804 45                           ld      b, l
 912+ 6805 4B                           ld      c, e
 913+ 6806 5D                           ld      e, l
 914+ 6807 6A                           ld      l, d
 915+ 6808 E5                           push    hl
 916+ 6809 69                           ld      l, c
 917+ 680A ED 30                        mul
 918+ 680C EB                           ex      de, hl
 919+ 680D ED 30                        mul
 920+ 680F AF                           xor     a
 921+ 6810 19                           add     hl, de
 922+ 6811 8F                           adc     a
 923+ 6812 59                           ld      e, c
 924+ 6813 50                           ld      d, b
 925+ 6814 ED 30                        mul
 926+ 6816 47                           ld      b, a
 927+ 6817 4C                           ld      c, h
 928+ 6818 7A                           ld      a, d
 929+ 6819 85                           add     l
 930+ 681A 67                           ld      h, a
 931+ 681B 6B                           ld      l, e
 932+ 681C D1                           pop     de
 933+ 681D ED 30                        mul
 934+ 681F EB                           ex      de, hl
 935+ 6820 ED 4A                        adc     hl, bc
 936+ 6822 C1                           pop     bc
 937+ 6823 D5                           push    de
 938+ 6824 E5                           push    hl
 939+ 6825                              next
 939+ 6825 DD E9       >                jp      (ix)
 940+ 6827
 941+ 6827              //  ______________________________________________________________________
 942+ 6827              //
 943+ 6827              // um/mod      ud u1 -- q r
 944+ 6827              // divides ud into u1 giving quotient q and remainder r
 945+ 6827              // algorithm takes 16 bit at a time starting from msb
 946+ 6827              // DE grows from lsb upward with quotient result
 947+ 6827              // HL keeps the remainder at each stage of division
 948+ 6827              // each loop 'lowers' the next binary digit to form the current dividend
 949+ 6827                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 949+ 6827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 949+ 6827             >
 949+ 6827             >                // dummy db directives used to calculate length of namec
 949+ 6827 55 4D 2F 4D >                db      "UM/MOD"
 949+ 682B 4F 44       >
 949+ 682D             >len_NFA         defl    $ - temp_NFA
 949+ 682D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 949+ 6827             >
 949+ 6827 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 949+ 6828 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 949+ 682C 4F 44       >
 949+ 682E             >                org     $-1                 // alter last byte of Name just above to set
 949+ 682D C4          >                db      {b $} | END_BIT     // msb as name end
 949+ 682E             >
 949+ 682E FB 67       >                dw      last_NFA            // Link to previous definition Name
 949+ 6830             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 949+ 6830 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 949+ 6830 ~           >
 949+ 6830 ~           >
 949+ 6830             >                endif           ; ok        // for other definitions it "points" the correct handler
 949+ 6830             >                // Use of "; ok" to suppress "warning[fwdref]"
 949+ 6830             >
 949+ 6830             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 950+ 6830 60                           ld      h, b
 951+ 6831 69                           ld      l, c                    // Save Instruction Pointer
 952+ 6832
 953+ 6832 C1                           pop     bc                      // divisor
 954+ 6833
 955+ 6833 D1                           pop     de                      // < high part
 956+ 6834 E3                           ex      (sp), hl                // < low part and > save bc
 957+ 6835 EB                           ex      de, hl                  //
 958+ 6836 7D                           ld      a, l                    // check without changing arguments
 959+ 6837 91                           sub     c                       // if divisor is greater than high part
 960+ 6838 7C                           ld      a, h                    // so quotient will be in range
 961+ 6839 98                           sbc     a, b
 962+ 683A 30 23                        jr      nc, Um_DivMod_OutOfRange
 963+ 683C 3E 10                            ld      a, 16
 964+ 683E              Um_DivMod_Loop:
 965+ 683E A7                                   and     a
 966+ 683F CB 13                                rl      e
 967+ 6841 CB 12                                rl      d
 968+ 6843 CB 15                                rl      l
 969+ 6845 CB 14                                rl      h
 970+ 6847 30 05                                jr      nc, Um_DivMod_Carry
 971+ 6849 A7                                       and     a
 972+ 684A ED 42                                    sbc     hl, bc
 973+ 684C 18 07                                jr      Um_DivMod_Endif    // else
 974+ 684E              Um_DivMod_Carry:
 975+ 684E A7                                       and     a
 976+ 684F ED 42                                    sbc     hl, bc
 977+ 6851 30 02                                    jr      nc, Um_DivMod_Endif
 978+ 6853 09                                           add     hl, bc
 979+ 6854 1B                                           dec     de
 980+ 6855              Um_DivMod_Endif:                                   // endif
 981+ 6855 13                                   inc     de
 982+ 6856 3D                                   dec     a
 983+ 6857 20 E5                            jr      nz, Um_DivMod_Loop
 984+ 6859 EB                               ex      de, hl
 985+ 685A              Um_DivMod_Bailout:
 986+ 685A C1                               pop     bc                  // restore Instruction Pointer
 987+ 685B D5                               push    de                  // de := remanider
 988+ 685C E5                               push    hl                  // hl := quotient
 989+ 685D                                  next
 989+ 685D DD E9       >                jp      (ix)
 990+ 685F
 991+ 685F              Um_DivMod_OutOfRange:
 992+ 685F 21 FF FF                     ld      hl, -1
 993+ 6862 54                           ld      d, h
 994+ 6863 5D                           ld      e, l
 995+ 6864 18 F4                        jr      Um_DivMod_Bailout
 996+ 6866
 997+ 6866              //  ______________________________________________________________________
 998+ 6866              //
 999+ 6866              // and          n1 n2 -- n3
1000+ 6866              // bit logical AND. Returns n3 as n1 & n2
1001+ 6866                              New_Def AND_OP, "AND", is_code, is_normal
1001+ 6866             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1001+ 6866             >
1001+ 6866             >                // dummy db directives used to calculate length of namec
1001+ 6866 41 4E 44    >                db      "AND"
1001+ 6869             >len_NFA         defl    $ - temp_NFA
1001+ 6869             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1001+ 6866             >
1001+ 6866 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1001+ 6867 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1001+ 686A             >                org     $-1                 // alter last byte of Name just above to set
1001+ 6869 C4          >                db      {b $} | END_BIT     // msb as name end
1001+ 686A             >
1001+ 686A 27 68       >                dw      last_NFA            // Link to previous definition Name
1001+ 686C             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1001+ 686C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1001+ 686C ~           >
1001+ 686C ~           >
1001+ 686C             >                endif           ; ok        // for other definitions it "points" the correct handler
1001+ 686C             >                // Use of "; ok" to suppress "warning[fwdref]"
1001+ 686C             >
1001+ 686C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1002+ 686C D1                           pop     de
1003+ 686D E1                           pop     hl
1004+ 686E 7B                           ld      a, e
1005+ 686F A5                           and     l
1006+ 6870 6F                           ld      l, a
1007+ 6871 7A                           ld      a, d
1008+ 6872 A4                           and     h
1009+ 6873 67                           ld      h, a
1010+ 6874
1011+ 6874                              psh1
1011+ 6874 E5          >                push    hl
1011+ 6875 DD E9       >                jp      (ix)
1012+ 6877
1013+ 6877              //  ______________________________________________________________________
1014+ 6877              //
1015+ 6877              // or           n1 n2 -- n3
1016+ 6877              // bit logical OR. Returns n3 as n1 | n2
1017+ 6877                              New_Def OR_OP, "OR", is_code, is_normal
1017+ 6877             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1017+ 6877             >
1017+ 6877             >                // dummy db directives used to calculate length of namec
1017+ 6877 4F 52       >                db      "OR"
1017+ 6879             >len_NFA         defl    $ - temp_NFA
1017+ 6879             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1017+ 6877             >
1017+ 6877 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1017+ 6878 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1017+ 687A             >                org     $-1                 // alter last byte of Name just above to set
1017+ 6879 D2          >                db      {b $} | END_BIT     // msb as name end
1017+ 687A             >
1017+ 687A 66 68       >                dw      last_NFA            // Link to previous definition Name
1017+ 687C             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1017+ 687C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1017+ 687C ~           >
1017+ 687C ~           >
1017+ 687C             >                endif           ; ok        // for other definitions it "points" the correct handler
1017+ 687C             >                // Use of "; ok" to suppress "warning[fwdref]"
1017+ 687C             >
1017+ 687C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1018+ 687C D1                           pop     de
1019+ 687D E1                           pop     hl
1020+ 687E 7B                           ld      a, e
1021+ 687F B5                           or      l
1022+ 6880 6F                           ld      l, a
1023+ 6881 7A                           ld      a, d
1024+ 6882 B4                           or      h
1025+ 6883 67                           ld      h, a
1026+ 6884
1027+ 6884                              psh1
1027+ 6884 E5          >                push    hl
1027+ 6885 DD E9       >                jp      (ix)
1028+ 6887
1029+ 6887              //  ______________________________________________________________________
1030+ 6887              //
1031+ 6887              // xor          n1 n2 -- n3
1032+ 6887              // bit logical OR. Returns n3 as n1 ^ n2
1033+ 6887                              New_Def XOR_OP, "XOR", is_code, is_normal
1033+ 6887             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 6887             >
1033+ 6887             >                // dummy db directives used to calculate length of namec
1033+ 6887 58 4F 52    >                db      "XOR"
1033+ 688A             >len_NFA         defl    $ - temp_NFA
1033+ 688A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 6887             >
1033+ 6887 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 6888 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1033+ 688B             >                org     $-1                 // alter last byte of Name just above to set
1033+ 688A D2          >                db      {b $} | END_BIT     // msb as name end
1033+ 688B             >
1033+ 688B 77 68       >                dw      last_NFA            // Link to previous definition Name
1033+ 688D             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 688D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1033+ 688D ~           >
1033+ 688D ~           >
1033+ 688D             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 688D             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 688D             >
1033+ 688D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 688D D1                           pop     de
1035+ 688E E1                           pop     hl
1036+ 688F 7B                           ld      a, e
1037+ 6890 AD                           xor     l
1038+ 6891 6F                           ld      l, a
1039+ 6892 7A                           ld      a, d
1040+ 6893 AC                           xor     h
1041+ 6894 67                           ld      h, a
1042+ 6895
1043+ 6895                              psh1
1043+ 6895 E5          >                push    hl
1043+ 6896 DD E9       >                jp      (ix)
1044+ 6898
1045+ 6898              //  ______________________________________________________________________
1046+ 6898              //
1047+ 6898              // sp@      -- a
1048+ 6898              // returns on top of stack the value of SP before execution
1049+ 6898                              New_Def SPFETCH, "SP@", is_code, is_normal
1049+ 6898             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1049+ 6898             >
1049+ 6898             >                // dummy db directives used to calculate length of namec
1049+ 6898 53 50 40    >                db      "SP@"
1049+ 689B             >len_NFA         defl    $ - temp_NFA
1049+ 689B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1049+ 6898             >
1049+ 6898 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1049+ 6899 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1049+ 689C             >                org     $-1                 // alter last byte of Name just above to set
1049+ 689B C0          >                db      {b $} | END_BIT     // msb as name end
1049+ 689C             >
1049+ 689C 87 68       >                dw      last_NFA            // Link to previous definition Name
1049+ 689E             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1049+ 689E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1049+ 689E ~           >
1049+ 689E ~           >
1049+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
1049+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
1049+ 689E             >
1049+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1050+ 689E
1051+ 689E 21 00 00                     ld      hl, 0
1052+ 68A1 39                           add     hl, sp
1053+ 68A2
1054+ 68A2                              psh1
1054+ 68A2 E5          >                push    hl
1054+ 68A3 DD E9       >                jp      (ix)
1055+ 68A5
1056+ 68A5              //  ______________________________________________________________________
1057+ 68A5              //
1058+ 68A5              // sp!      a --
1059+ 68A5              // restore SP to the initial value passed
1060+ 68A5              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1061+ 68A5                              New_Def SPSTORE, "SP!", is_code, is_normal
1061+ 68A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1061+ 68A5             >
1061+ 68A5             >                // dummy db directives used to calculate length of namec
1061+ 68A5 53 50 21    >                db      "SP!"
1061+ 68A8             >len_NFA         defl    $ - temp_NFA
1061+ 68A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1061+ 68A5             >
1061+ 68A5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1061+ 68A6 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1061+ 68A9             >                org     $-1                 // alter last byte of Name just above to set
1061+ 68A8 A1          >                db      {b $} | END_BIT     // msb as name end
1061+ 68A9             >
1061+ 68A9 98 68       >                dw      last_NFA            // Link to previous definition Name
1061+ 68AB             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1061+ 68AB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1061+ 68AB ~           >
1061+ 68AB ~           >
1061+ 68AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1061+ 68AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1061+ 68AB             >
1061+ 68AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1062+ 68AB E1                           pop     hl
1063+ 68AC F9                           ld      sp, hl
1064+ 68AD
1065+ 68AD                              next
1065+ 68AD DD E9       >                jp      (ix)
1066+ 68AF
1067+ 68AF              //  ______________________________________________________________________
1068+ 68AF              //
1069+ 68AF              // rp@      -- a
1070+ 68AF              // returns on top of stack the value of Return-Pointer
1071+ 68AF                              New_Def RPFETCH, "RP@", is_code, is_normal
1071+ 68AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1071+ 68AF             >
1071+ 68AF             >                // dummy db directives used to calculate length of namec
1071+ 68AF 52 50 40    >                db      "RP@"
1071+ 68B2             >len_NFA         defl    $ - temp_NFA
1071+ 68B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1071+ 68AF             >
1071+ 68AF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1071+ 68B0 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1071+ 68B3             >                org     $-1                 // alter last byte of Name just above to set
1071+ 68B2 C0          >                db      {b $} | END_BIT     // msb as name end
1071+ 68B3             >
1071+ 68B3 A5 68       >                dw      last_NFA            // Link to previous definition Name
1071+ 68B5             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1071+ 68B5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1071+ 68B5 ~           >
1071+ 68B5 ~           >
1071+ 68B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1071+ 68B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1071+ 68B5             >
1071+ 68B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1072+ 68B5
1073+ 68B5                              ldhlrp
1073+ 68B5 2A 96 63    >                ld      hl,(RP_Pointer)
1074+ 68B8
1075+ 68B8                              psh1
1075+ 68B8 E5          >                push    hl
1075+ 68B9 DD E9       >                jp      (ix)
1076+ 68BB
1077+ 68BB              //  ______________________________________________________________________
1078+ 68BB              //
1079+ 68BB              // rp!      a --
1080+ 68BB              // restore RP to the initial value passed
1081+ 68BB              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1082+ 68BB                              New_Def RPSTORE, "RP!", is_code, is_normal
1082+ 68BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1082+ 68BB             >
1082+ 68BB             >                // dummy db directives used to calculate length of namec
1082+ 68BB 52 50 21    >                db      "RP!"
1082+ 68BE             >len_NFA         defl    $ - temp_NFA
1082+ 68BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1082+ 68BB             >
1082+ 68BB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1082+ 68BC 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1082+ 68BF             >                org     $-1                 // alter last byte of Name just above to set
1082+ 68BE A1          >                db      {b $} | END_BIT     // msb as name end
1082+ 68BF             >
1082+ 68BF AF 68       >                dw      last_NFA            // Link to previous definition Name
1082+ 68C1             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1082+ 68C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1082+ 68C1 ~           >
1082+ 68C1 ~           >
1082+ 68C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1082+ 68C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1082+ 68C1             >
1082+ 68C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1083+ 68C1 E1                           pop     hl
1084+ 68C2                              ldrphl
1084+ 68C2 22 96 63    >                ld      (RP_Pointer),hl
1085+ 68C5
1086+ 68C5                              next
1086+ 68C5 DD E9       >                jp      (ix)
1087+ 68C7
1088+ 68C7              //  ______________________________________________________________________
1089+ 68C7              //
1090+ 68C7              // exit       --
1091+ 68C7              // exits back to the caller word
1092+ 68C7                              New_Def EXIT, "EXIT", is_code, is_normal
1092+ 68C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1092+ 68C7             >
1092+ 68C7             >                // dummy db directives used to calculate length of namec
1092+ 68C7 45 58 49 54 >                db      "EXIT"
1092+ 68CB             >len_NFA         defl    $ - temp_NFA
1092+ 68CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1092+ 68C7             >
1092+ 68C7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1092+ 68C8 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1092+ 68CC             >                org     $-1                 // alter last byte of Name just above to set
1092+ 68CB D4          >                db      {b $} | END_BIT     // msb as name end
1092+ 68CC             >
1092+ 68CC BB 68       >                dw      last_NFA            // Link to previous definition Name
1092+ 68CE             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1092+ 68CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1092+ 68CE ~           >
1092+ 68CE ~           >
1092+ 68CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1092+ 68CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1092+ 68CE             >
1092+ 68CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1093+ 68CE                              ldhlrp                      // Get Return Stack Pointer
1093+ 68CE 2A 96 63    >                ld      hl,(RP_Pointer)
1094+ 68D1 4E                           ld      c, (hl)             // pop Instruction Pointer
1095+ 68D2 23                           inc     hl                  // from Return Stack
1096+ 68D3 46                           ld      b, (hl)
1097+ 68D4 23                           inc     hl
1098+ 68D5                              ldrphl                      // Set Return Stack Pointer
1098+ 68D5 22 96 63    >                ld      (RP_Pointer),hl
1099+ 68D8                              next
1099+ 68D8 DD E9       >                jp      (ix)
1100+ 68DA
1101+ 68DA              //  ______________________________________________________________________
1102+ 68DA              //
1103+ 68DA              // lastl      --
1104+ 68DA              // exits back to the caller word
1105+ 68DA              //              New_Def EXIT, "LASTL", is_code, is_normal
1106+ 68DA              //              ldhlrp                      // Get Return Stack Pointer
1107+ 68DA              //              ld      e, (hl)             // pop Instruction Pointer
1108+ 68DA              //              inc     hl                  // from Return Stack
1109+ 68DA              //              ld      d, (hl)
1110+ 68DA              //              inc     hl
1111+ 68DA              //              ld      (hl), e
1112+ 68DA              //              inc     hl
1113+ 68DA              //              ld      (hl), d
1114+ 68DA              //              next
1115+ 68DA
1116+ 68DA              //  ______________________________________________________________________
1117+ 68DA              //
1118+ 68DA              // (leave)        --
1119+ 68DA              // compiled by LEAVE
1120+ 68DA              // this forces to exit from loop and jump past
1121+ 68DA                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1121+ 68DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1121+ 68DA             >
1121+ 68DA             >                // dummy db directives used to calculate length of namec
1121+ 68DA 28 4C 45 41 >                db      "(LEAVE)"
1121+ 68DE 56 45 29    >
1121+ 68E1             >len_NFA         defl    $ - temp_NFA
1121+ 68E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1121+ 68DA             >
1121+ 68DA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1121+ 68DB 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1121+ 68DF 56 45 29    >
1121+ 68E2             >                org     $-1                 // alter last byte of Name just above to set
1121+ 68E1 A9          >                db      {b $} | END_BIT     // msb as name end
1121+ 68E2             >
1121+ 68E2 C7 68       >                dw      last_NFA            // Link to previous definition Name
1121+ 68E4             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1121+ 68E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1121+ 68E4 ~           >
1121+ 68E4 ~           >
1121+ 68E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1121+ 68E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1121+ 68E4             >
1121+ 68E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1122+ 68E4
1123+ 68E4                              ldhlrp
1123+ 68E4 2A 96 63    >                ld      hl,(RP_Pointer)
1124+ 68E7 11 04 00                     ld      de, 4
1125+ 68EA 19                           add     hl, de
1126+ 68EB                              ldrphl
1126+ 68EB 22 96 63    >                ld      (RP_Pointer),hl
1127+ 68EE
1128+ 68EE C3 C3 63                     jp      Branch_Ptr       // perform branch consuming following cell
1129+ 68F1                              next
1129+ 68F1 DD E9       >                jp      (ix)
1130+ 68F3
1131+ 68F3              //  ______________________________________________________________________
1132+ 68F3              //
1133+ 68F3              // >r      n --
1134+ 68F3              // pop from calculator-stack and push into return-stack
1135+ 68F3                              New_Def TO_R, ">R", is_code, is_normal
1135+ 68F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1135+ 68F3             >
1135+ 68F3             >                // dummy db directives used to calculate length of namec
1135+ 68F3 3E 52       >                db      ">R"
1135+ 68F5             >len_NFA         defl    $ - temp_NFA
1135+ 68F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1135+ 68F3             >
1135+ 68F3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1135+ 68F4 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1135+ 68F6             >                org     $-1                 // alter last byte of Name just above to set
1135+ 68F5 D2          >                db      {b $} | END_BIT     // msb as name end
1135+ 68F6             >
1135+ 68F6 DA 68       >                dw      last_NFA            // Link to previous definition Name
1135+ 68F8             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1135+ 68F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1135+ 68F8 ~           >
1135+ 68F8 ~           >
1135+ 68F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1135+ 68F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1135+ 68F8             >
1135+ 68F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1136+ 68F8 D1                           pop     de
1137+ 68F9                              ldhlrp
1137+ 68F9 2A 96 63    >                ld      hl,(RP_Pointer)
1138+ 68FC 2B                           dec     hl
1139+ 68FD 72                           ld      (hl), d             // store current TOS
1140+ 68FE 2B                           dec     hl                  // to Return Stack
1141+ 68FF 73                           ld      (hl), e
1142+ 6900                              ldrphl
1142+ 6900 22 96 63    >                ld      (RP_Pointer),hl
1143+ 6903
1144+ 6903                              next
1144+ 6903 DD E9       >                jp      (ix)
1145+ 6905
1146+ 6905              //  ______________________________________________________________________
1147+ 6905              //
1148+ 6905              // r>      -- n
1149+ 6905              // pop from return-stack and push into calculator-stack
1150+ 6905                              New_Def R_TO, "R>", is_code, is_normal
1150+ 6905             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ 6905             >
1150+ 6905             >                // dummy db directives used to calculate length of namec
1150+ 6905 52 3E       >                db      "R>"
1150+ 6907             >len_NFA         defl    $ - temp_NFA
1150+ 6907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ 6905             >
1150+ 6905 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ 6906 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1150+ 6908             >                org     $-1                 // alter last byte of Name just above to set
1150+ 6907 BE          >                db      {b $} | END_BIT     // msb as name end
1150+ 6908             >
1150+ 6908 F3 68       >                dw      last_NFA            // Link to previous definition Name
1150+ 690A             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1150+ 690A ~           >
1150+ 690A ~           >
1150+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 690A             >
1150+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 690A
1152+ 690A                              ldhlrp
1152+ 690A 2A 96 63    >                ld      hl,(RP_Pointer)
1153+ 690D 5E                           ld      e, (hl)             // retrieve from Return Stack
1154+ 690E 23                           inc     hl
1155+ 690F 56                           ld      d, (hl)
1156+ 6910 23                           inc     hl
1157+ 6911                              ldrphl
1157+ 6911 22 96 63    >                ld      (RP_Pointer),hl
1158+ 6914 D5                           push    de
1159+ 6915                              next
1159+ 6915 DD E9       >                jp      (ix)
1160+ 6917
1161+ 6917              //  ______________________________________________________________________
1162+ 6917              //
1163+ 6917              // r            -- n
1164+ 6917              // return on top of stack the value of top of return-stack
1165+ 6917              // Since this is the same as I, we alter R's CFA to jump there
1166+ 6917                              New_Def R_OP, "R@", is_code, is_normal
1166+ 6917             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1166+ 6917             >
1166+ 6917             >                // dummy db directives used to calculate length of namec
1166+ 6917 52 40       >                db      "R@"
1166+ 6919             >len_NFA         defl    $ - temp_NFA
1166+ 6919             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1166+ 6917             >
1166+ 6917 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1166+ 6918 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1166+ 691A             >                org     $-1                 // alter last byte of Name just above to set
1166+ 6919 C0          >                db      {b $} | END_BIT     // msb as name end
1166+ 691A             >
1166+ 691A 05 69       >                dw      last_NFA            // Link to previous definition Name
1166+ 691C             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1166+ 691C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1166+ 691C ~           >
1166+ 691C ~           >
1166+ 691C             >                endif           ; ok        // for other definitions it "points" the correct handler
1166+ 691C             >                // Use of "; ok" to suppress "warning[fwdref]"
1166+ 691C             >
1166+ 691C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1167+ 691C C3 61 64                     jp      I_Ptr
1168+ 691F
1169+ 691F              //  ______________________________________________________________________
1170+ 691F              //
1171+ 691F              // r            -- n
1172+ 691F              // return on top of stack the value of top of return-stack
1173+ 691F              // Since this is the same as I, we alter R's CFA to jump there
1174+ 691F                              New_Def R_OLD, "R", is_code, is_normal
1174+ 691F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 691F             >
1174+ 691F             >                // dummy db directives used to calculate length of namec
1174+ 691F 52          >                db      "R"
1174+ 6920             >len_NFA         defl    $ - temp_NFA
1174+ 6920             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 691F             >
1174+ 691F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 6920 52          >                db      "R"               // name string in 7-bit ascii, but
1174+ 6921             >                org     $-1                 // alter last byte of Name just above to set
1174+ 6920 D2          >                db      {b $} | END_BIT     // msb as name end
1174+ 6921             >
1174+ 6921 17 69       >                dw      last_NFA            // Link to previous definition Name
1174+ 6923             >R_OLD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 6923 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1174+ 6923 ~           >
1174+ 6923 ~           >
1174+ 6923             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 6923             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 6923             >
1174+ 6923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 6923 C3 61 64                     jp      I_Ptr
1176+ 6926
1177+ 6926              //  ______________________________________________________________________
1178+ 6926              //
1179+ 6926              // 0=           n -- f
1180+ 6926              // true (non zero) if n is zero, false (0) elsewere
1181+ 6926                              New_Def ZEQUAL, "0=", is_code, is_normal
1181+ 6926             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ 6926             >
1181+ 6926             >                // dummy db directives used to calculate length of namec
1181+ 6926 30 3D       >                db      "0="
1181+ 6928             >len_NFA         defl    $ - temp_NFA
1181+ 6928             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ 6926             >
1181+ 6926 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ 6927 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1181+ 6929             >                org     $-1                 // alter last byte of Name just above to set
1181+ 6928 BD          >                db      {b $} | END_BIT     // msb as name end
1181+ 6929             >
1181+ 6929 1F 69       >                dw      last_NFA            // Link to previous definition Name
1181+ 692B             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 692B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1181+ 692B ~           >
1181+ 692B ~           >
1181+ 692B             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 692B             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 692B             >
1181+ 692B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 692B              Zero_Equal:
1183+ 692B E1                           pop     hl
1184+ 692C 7D                           ld      a, l
1185+ 692D B4                           or      h
1186+ 692E 21 00 00                     ld      hl, FALSE_FLAG
1187+ 6931 20 01                        jr      nz, ZEqual_Skip
1188+ 6933 2B                               dec     hl
1189+ 6934              ZEqual_Skip:
1190+ 6934                              psh1
1190+ 6934 E5          >                push    hl
1190+ 6935 DD E9       >                jp      (ix)
1191+ 6937
1192+ 6937              //  ______________________________________________________________________
1193+ 6937              //
1194+ 6937              // not         a1 -- a2
1195+ 6937              // increment by 2 top of stack
1196+ 6937                              New_Def NOT_OP, "NOT", is_code, is_normal
1196+ 6937             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 6937             >
1196+ 6937             >                // dummy db directives used to calculate length of namec
1196+ 6937 4E 4F 54    >                db      "NOT"
1196+ 693A             >len_NFA         defl    $ - temp_NFA
1196+ 693A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 6937             >
1196+ 6937 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 6938 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1196+ 693B             >                org     $-1                 // alter last byte of Name just above to set
1196+ 693A D4          >                db      {b $} | END_BIT     // msb as name end
1196+ 693B             >
1196+ 693B 26 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 693D             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 693D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1196+ 693D ~           >
1196+ 693D ~           >
1196+ 693D             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 693D             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 693D             >
1196+ 693D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 693D C3 2B 69                     jp      Zero_Equal
1198+ 6940
1199+ 6940              //  ______________________________________________________________________
1200+ 6940              //
1201+ 6940              // 0<           n -- f
1202+ 6940              // true (non zero) if n is less than zero, false (0) elsewere
1203+ 6940                              New_Def ZLESS, "0<", is_code, is_normal
1203+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1203+ 6940             >
1203+ 6940             >                // dummy db directives used to calculate length of namec
1203+ 6940 30 3C       >                db      "0<"
1203+ 6942             >len_NFA         defl    $ - temp_NFA
1203+ 6942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1203+ 6940             >
1203+ 6940 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1203+ 6941 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1203+ 6943             >                org     $-1                 // alter last byte of Name just above to set
1203+ 6942 BC          >                db      {b $} | END_BIT     // msb as name end
1203+ 6943             >
1203+ 6943 37 69       >                dw      last_NFA            // Link to previous definition Name
1203+ 6945             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1203+ 6945 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1203+ 6945 ~           >
1203+ 6945 ~           >
1203+ 6945             >                endif           ; ok        // for other definitions it "points" the correct handler
1203+ 6945             >                // Use of "; ok" to suppress "warning[fwdref]"
1203+ 6945             >
1203+ 6945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1204+ 6945 E1                           pop     hl
1205+ 6946 29                           add     hl, hl
1206+ 6947 21 00 00                     ld      hl, 0
1207+ 694A 30 01                        jr      nc, ZLess_Skip
1208+ 694C 2B                               dec     hl
1209+ 694D              ZLess_Skip:
1210+ 694D                              psh1
1210+ 694D E5          >                push    hl
1210+ 694E DD E9       >                jp      (ix)
1211+ 6950
1212+ 6950              //  ______________________________________________________________________
1213+ 6950              //
1214+ 6950              // 0>           n -- f
1215+ 6950              // true (non zero) if n is less than zero, false (0) elsewere
1216+ 6950                              New_Def ZGREATER, "0>", is_code, is_normal
1216+ 6950             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1216+ 6950             >
1216+ 6950             >                // dummy db directives used to calculate length of namec
1216+ 6950 30 3E       >                db      "0>"
1216+ 6952             >len_NFA         defl    $ - temp_NFA
1216+ 6952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1216+ 6950             >
1216+ 6950 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1216+ 6951 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1216+ 6953             >                org     $-1                 // alter last byte of Name just above to set
1216+ 6952 BE          >                db      {b $} | END_BIT     // msb as name end
1216+ 6953             >
1216+ 6953 40 69       >                dw      last_NFA            // Link to previous definition Name
1216+ 6955             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1216+ 6955 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1216+ 6955 ~           >
1216+ 6955 ~           >
1216+ 6955             >                endif           ; ok        // for other definitions it "points" the correct handler
1216+ 6955             >                // Use of "; ok" to suppress "warning[fwdref]"
1216+ 6955             >
1216+ 6955             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1217+ 6955 E1                           pop     hl
1218+ 6956 7D                           ld      a, l
1219+ 6957 B4                           or      h
1220+ 6958 29                           add     hl, hl
1221+ 6959 21 00 00                     ld      hl, FALSE_FLAG
1222+ 695C 38 04                        jr      c, ZGreater_Skip
1223+ 695E A7                               and     a
1224+ 695F 28 01                            jr      z, ZGreater_Skip
1225+ 6961 2B                                   dec     hl
1226+ 6962              ZGreater_Skip:
1227+ 6962                              psh1
1227+ 6962 E5          >                push    hl
1227+ 6963 DD E9       >                jp      (ix)
1228+ 6965
1229+ 6965              //  ______________________________________________________________________
1230+ 6965              //
1231+ 6965              // +            n1 n2 -- n3
1232+ 6965              // returns the unsigned sum of two top values
1233+ 6965                              New_Def PLUS, "+", is_code, is_normal
1233+ 6965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1233+ 6965             >
1233+ 6965             >                // dummy db directives used to calculate length of namec
1233+ 6965 2B          >                db      "+"
1233+ 6966             >len_NFA         defl    $ - temp_NFA
1233+ 6966             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1233+ 6965             >
1233+ 6965 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1233+ 6966 2B          >                db      "+"               // name string in 7-bit ascii, but
1233+ 6967             >                org     $-1                 // alter last byte of Name just above to set
1233+ 6966 AB          >                db      {b $} | END_BIT     // msb as name end
1233+ 6967             >
1233+ 6967 50 69       >                dw      last_NFA            // Link to previous definition Name
1233+ 6969             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1233+ 6969 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1233+ 6969 ~           >
1233+ 6969 ~           >
1233+ 6969             >                endif           ; ok        // for other definitions it "points" the correct handler
1233+ 6969             >                // Use of "; ok" to suppress "warning[fwdref]"
1233+ 6969             >
1233+ 6969             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1234+ 6969 E1                           pop     hl
1235+ 696A D1                           pop     de
1236+ 696B 19                           add     hl, de
1237+ 696C
1238+ 696C                              psh1
1238+ 696C E5          >                push    hl
1238+ 696D DD E9       >                jp      (ix)
1239+ 696F
1240+ 696F
1241+ 696F              //  ______________________________________________________________________
1242+ 696F              //
1243+ 696F              // d+           d1 d2 -- d3
1244+ 696F              // returns the unsigned sum of two top double-numbers
1245+ 696F              //      d2  d1
1246+ 696F              //      h l h l
1247+ 696F              // SP   LHEDLHED
1248+ 696F              // SP  +01234567
1249+ 696F                              New_Def DPLUS, "D+", is_code, is_normal
1249+ 696F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1249+ 696F             >
1249+ 696F             >                // dummy db directives used to calculate length of namec
1249+ 696F 44 2B       >                db      "D+"
1249+ 6971             >len_NFA         defl    $ - temp_NFA
1249+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1249+ 696F             >
1249+ 696F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1249+ 6970 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1249+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1249+ 6971 AB          >                db      {b $} | END_BIT     // msb as name end
1249+ 6972             >
1249+ 6972 65 69       >                dw      last_NFA            // Link to previous definition Name
1249+ 6974             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1249+ 6974 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1249+ 6974 ~           >
1249+ 6974 ~           >
1249+ 6974             >                endif           ; ok        // for other definitions it "points" the correct handler
1249+ 6974             >                // Use of "; ok" to suppress "warning[fwdref]"
1249+ 6974             >
1249+ 6974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1250+ 6974
1251+ 6974 D9                           exx
1252+ 6975 C1                           pop     bc                  // bc := d2.H
1253+ 6976 D1                           pop     de                  // hl := d2.L
1254+ 6977 E1                           pop     hl                  // d1.H
1255+ 6978 E3                           ex      (sp), hl            // d1.L
1256+ 6979 19                           add     hl, de              // hl := d2.L + d1.L
1257+ 697A E3                           ex      (sp), hl            // d1.H
1258+ 697B ED 4A                        adc     hl, bc              // d1.H + d2.H
1259+ 697D E5                           push    hl
1260+ 697E D9                           exx
1261+ 697F                              next
1261+ 697F DD E9       >                jp      (ix)
1262+ 6981
1263+ 6981              //  ______________________________________________________________________
1264+ 6981              //
1265+ 6981              // 1+           n1 -- n2
1266+ 6981              // increment by 1 top of stack
1267+ 6981                              New_Def ONE_PLUS, "1+", is_code, is_normal
1267+ 6981             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1267+ 6981             >
1267+ 6981             >                // dummy db directives used to calculate length of namec
1267+ 6981 31 2B       >                db      "1+"
1267+ 6983             >len_NFA         defl    $ - temp_NFA
1267+ 6983             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1267+ 6981             >
1267+ 6981 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1267+ 6982 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1267+ 6984             >                org     $-1                 // alter last byte of Name just above to set
1267+ 6983 AB          >                db      {b $} | END_BIT     // msb as name end
1267+ 6984             >
1267+ 6984 6F 69       >                dw      last_NFA            // Link to previous definition Name
1267+ 6986             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1267+ 6986 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1267+ 6986 ~           >
1267+ 6986 ~           >
1267+ 6986             >                endif           ; ok        // for other definitions it "points" the correct handler
1267+ 6986             >                // Use of "; ok" to suppress "warning[fwdref]"
1267+ 6986             >
1267+ 6986             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1268+ 6986 E1                           pop     hl
1269+ 6987 23                           inc     hl
1270+ 6988
1271+ 6988                              psh1
1271+ 6988 E5          >                push    hl
1271+ 6989 DD E9       >                jp      (ix)
1272+ 698B
1273+ 698B              //  ______________________________________________________________________
1274+ 698B              //
1275+ 698B              // 1-           n1 -- n2
1276+ 698B              // decrement by 1 top of stack
1277+ 698B                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1277+ 698B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1277+ 698B             >
1277+ 698B             >                // dummy db directives used to calculate length of namec
1277+ 698B 31 2D       >                db      "1-"
1277+ 698D             >len_NFA         defl    $ - temp_NFA
1277+ 698D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1277+ 698B             >
1277+ 698B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1277+ 698C 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1277+ 698E             >                org     $-1                 // alter last byte of Name just above to set
1277+ 698D AD          >                db      {b $} | END_BIT     // msb as name end
1277+ 698E             >
1277+ 698E 81 69       >                dw      last_NFA            // Link to previous definition Name
1277+ 6990             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1277+ 6990 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1277+ 6990 ~           >
1277+ 6990 ~           >
1277+ 6990             >                endif           ; ok        // for other definitions it "points" the correct handler
1277+ 6990             >                // Use of "; ok" to suppress "warning[fwdref]"
1277+ 6990             >
1277+ 6990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1278+ 6990 E1                           pop     hl
1279+ 6991 2B                           dec     hl
1280+ 6992
1281+ 6992                              psh1
1281+ 6992 E5          >                push    hl
1281+ 6993 DD E9       >                jp      (ix)
1282+ 6995
1283+ 6995              //  ______________________________________________________________________
1284+ 6995              //
1285+ 6995              // 2+           n1 -- n2
1286+ 6995              // increment by 2 top of stack
1287+ 6995                              New_Def TWO_PLUS, "2+", is_code, is_normal
1287+ 6995             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1287+ 6995             >
1287+ 6995             >                // dummy db directives used to calculate length of namec
1287+ 6995 32 2B       >                db      "2+"
1287+ 6997             >len_NFA         defl    $ - temp_NFA
1287+ 6997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1287+ 6995             >
1287+ 6995 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1287+ 6996 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1287+ 6998             >                org     $-1                 // alter last byte of Name just above to set
1287+ 6997 AB          >                db      {b $} | END_BIT     // msb as name end
1287+ 6998             >
1287+ 6998 8B 69       >                dw      last_NFA            // Link to previous definition Name
1287+ 699A             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1287+ 699A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1287+ 699A ~           >
1287+ 699A ~           >
1287+ 699A             >                endif           ; ok        // for other definitions it "points" the correct handler
1287+ 699A             >                // Use of "; ok" to suppress "warning[fwdref]"
1287+ 699A             >
1287+ 699A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1288+ 699A              Two_Plus:
1289+ 699A E1                           pop     hl
1290+ 699B 23                           inc     hl
1291+ 699C 23                           inc     hl
1292+ 699D
1293+ 699D                              psh1
1293+ 699D E5          >                push    hl
1293+ 699E DD E9       >                jp      (ix)
1294+ 69A0
1295+ 69A0              //  ______________________________________________________________________
1296+ 69A0              //
1297+ 69A0              // cell+        a1 -- a2
1298+ 69A0              // increment by 2 top of stack
1299+ 69A0                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1299+ 69A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 69A0             >
1299+ 69A0             >                // dummy db directives used to calculate length of namec
1299+ 69A0 43 45 4C 4C >                db      "CELL+"
1299+ 69A4 2B          >
1299+ 69A5             >len_NFA         defl    $ - temp_NFA
1299+ 69A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 69A0             >
1299+ 69A0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 69A1 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1299+ 69A5 2B          >
1299+ 69A6             >                org     $-1                 // alter last byte of Name just above to set
1299+ 69A5 AB          >                db      {b $} | END_BIT     // msb as name end
1299+ 69A6             >
1299+ 69A6 95 69       >                dw      last_NFA            // Link to previous definition Name
1299+ 69A8             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 69A8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1299+ 69A8 ~           >
1299+ 69A8 ~           >
1299+ 69A8             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 69A8             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 69A8             >
1299+ 69A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 69A8 C3 9A 69                     jp      Two_Plus
1301+ 69AB
1302+ 69AB              //  ______________________________________________________________________
1303+ 69AB              //
1304+ 69AB              // align        a1 -- a2
1305+ 69AB              // align memory : not used
1306+ 69AB              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1307+ 69AB              //            next
1308+ 69AB
1309+ 69AB              //  ______________________________________________________________________
1310+ 69AB              //
1311+ 69AB              // cell-        a1 -- a2
1312+ 69AB              // decrement by 2 top of stack
1313+ 69AB                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1313+ 69AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1313+ 69AB             >
1313+ 69AB             >                // dummy db directives used to calculate length of namec
1313+ 69AB 43 45 4C 4C >                db      "CELL-"
1313+ 69AF 2D          >
1313+ 69B0             >len_NFA         defl    $ - temp_NFA
1313+ 69B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1313+ 69AB             >
1313+ 69AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1313+ 69AC 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1313+ 69B0 2D          >
1313+ 69B1             >                org     $-1                 // alter last byte of Name just above to set
1313+ 69B0 AD          >                db      {b $} | END_BIT     // msb as name end
1313+ 69B1             >
1313+ 69B1 A0 69       >                dw      last_NFA            // Link to previous definition Name
1313+ 69B3             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1313+ 69B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1313+ 69B3 ~           >
1313+ 69B3 ~           >
1313+ 69B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1313+ 69B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1313+ 69B3             >
1313+ 69B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1314+ 69B3              CellMinus:
1315+ 69B3 E1                           pop     hl
1316+ 69B4 2B                           dec     hl
1317+ 69B5 2B                           dec     hl
1318+ 69B6
1319+ 69B6                              psh1
1319+ 69B6 E5          >                push    hl
1319+ 69B7 DD E9       >                jp      (ix)
1320+ 69B9
1321+ 69B9              //  ______________________________________________________________________
1322+ 69B9              //
1323+ 69B9              // 2-           a1 -- a2
1324+ 69B9              // decrement by 2 top of stack
1325+ 69B9                              New_Def TWO_MINUS, "2-", is_code, is_normal
1325+ 69B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1325+ 69B9             >
1325+ 69B9             >                // dummy db directives used to calculate length of namec
1325+ 69B9 32 2D       >                db      "2-"
1325+ 69BB             >len_NFA         defl    $ - temp_NFA
1325+ 69BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1325+ 69B9             >
1325+ 69B9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1325+ 69BA 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1325+ 69BC             >                org     $-1                 // alter last byte of Name just above to set
1325+ 69BB AD          >                db      {b $} | END_BIT     // msb as name end
1325+ 69BC             >
1325+ 69BC AB 69       >                dw      last_NFA            // Link to previous definition Name
1325+ 69BE             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1325+ 69BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1325+ 69BE ~           >
1325+ 69BE ~           >
1325+ 69BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1325+ 69BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1325+ 69BE             >
1325+ 69BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1326+ 69BE C3 B3 69                     jp      CellMinus
1327+ 69C1
1328+ 69C1              //  ______________________________________________________________________
1329+ 69C1              //
1330+ 69C1              // negate       n1 -- n2
1331+ 69C1              // change the sign of number
1332+ 69C1                              New_Def MINUS, "NEGATE", is_code, is_normal
1332+ 69C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1332+ 69C1             >
1332+ 69C1             >                // dummy db directives used to calculate length of namec
1332+ 69C1 4E 45 47 41 >                db      "NEGATE"
1332+ 69C5 54 45       >
1332+ 69C7             >len_NFA         defl    $ - temp_NFA
1332+ 69C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1332+ 69C1             >
1332+ 69C1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1332+ 69C2 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1332+ 69C6 54 45       >
1332+ 69C8             >                org     $-1                 // alter last byte of Name just above to set
1332+ 69C7 C5          >                db      {b $} | END_BIT     // msb as name end
1332+ 69C8             >
1332+ 69C8 B9 69       >                dw      last_NFA            // Link to previous definition Name
1332+ 69CA             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1332+ 69CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1332+ 69CA ~           >
1332+ 69CA ~           >
1332+ 69CA             >                endif           ; ok        // for other definitions it "points" the correct handler
1332+ 69CA             >                // Use of "; ok" to suppress "warning[fwdref]"
1332+ 69CA             >
1332+ 69CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1333+ 69CA 21 00 00                     ld      hl, 0               // subtract from 0
1334+ 69CD D1                           pop     de
1335+ 69CE B7                           or      a
1336+ 69CF ED 52                        sbc     hl, de
1337+ 69D1
1338+ 69D1                              psh1
1338+ 69D1 E5          >                push    hl
1338+ 69D2 DD E9       >                jp      (ix)
1339+ 69D4
1340+ 69D4              //  ______________________________________________________________________
1341+ 69D4              //
1342+ 69D4              // dminus       d1 -- d2
1343+ 69D4              // change the sign of a double number
1344+ 69D4                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1344+ 69D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1344+ 69D4             >
1344+ 69D4             >                // dummy db directives used to calculate length of namec
1344+ 69D4 44 4E 45 47 >                db      "DNEGATE"
1344+ 69D8 41 54 45    >
1344+ 69DB             >len_NFA         defl    $ - temp_NFA
1344+ 69DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1344+ 69D4             >
1344+ 69D4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1344+ 69D5 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1344+ 69D9 41 54 45    >
1344+ 69DC             >                org     $-1                 // alter last byte of Name just above to set
1344+ 69DB C5          >                db      {b $} | END_BIT     // msb as name end
1344+ 69DC             >
1344+ 69DC C1 69       >                dw      last_NFA            // Link to previous definition Name
1344+ 69DE             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1344+ 69DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1344+ 69DE ~           >
1344+ 69DE ~           >
1344+ 69DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1344+ 69DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1344+ 69DE             >
1344+ 69DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1345+ 69DE D9                           exx
1346+ 69DF C1                           pop     bc                  // d1.H
1347+ 69E0 D1                           pop     de                  // d1.L
1348+ 69E1 AF                           xor     a
1349+ 69E2 67                           ld      h, a
1350+ 69E3 6F                           ld      l, a
1351+ 69E4 ED 52                        sbc     hl, de              // subtact from zero
1352+ 69E6 E5                           push    hl                  // > d2-L
1353+ 69E7 67                           ld      h, a
1354+ 69E8 6F                           ld      l, a
1355+ 69E9 ED 42                        sbc     hl, bc              // subtract from zero with carry
1356+ 69EB E5                           push    hl                  // > d2-H
1357+ 69EC D9                           exx
1358+ 69ED                              next
1358+ 69ED DD E9       >                jp      (ix)
1359+ 69EF
1360+ 69EF              //  ______________________________________________________________________
1361+ 69EF              //
1362+ 69EF              // over         n1 n2 -- n1 n2 n1
1363+ 69EF              // copy the second value of stack and put it on top.
1364+ 69EF                              New_Def OVER, "OVER", is_code, is_normal
1364+ 69EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1364+ 69EF             >
1364+ 69EF             >                // dummy db directives used to calculate length of namec
1364+ 69EF 4F 56 45 52 >                db      "OVER"
1364+ 69F3             >len_NFA         defl    $ - temp_NFA
1364+ 69F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1364+ 69EF             >
1364+ 69EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1364+ 69F0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1364+ 69F4             >                org     $-1                 // alter last byte of Name just above to set
1364+ 69F3 D2          >                db      {b $} | END_BIT     // msb as name end
1364+ 69F4             >
1364+ 69F4 D4 69       >                dw      last_NFA            // Link to previous definition Name
1364+ 69F6             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1364+ 69F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1364+ 69F6 ~           >
1364+ 69F6 ~           >
1364+ 69F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1364+ 69F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1364+ 69F6             >
1364+ 69F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1365+ 69F6 D1                           pop     de                  //   n2
1366+ 69F7 E1                           pop     hl                  // < n1
1367+ 69F8 E5                           push    hl                  // > n1
1368+ 69F9 D5                           push    de                  // > n2
1369+ 69FA E5                           push    hl                  // > n1
1370+ 69FB                              next
1370+ 69FB DD E9       >                jp      (ix)
1371+ 69FD
1372+ 69FD              //  ______________________________________________________________________
1373+ 69FD              //
1374+ 69FD              // drop         n1 --
1375+ 69FD              // drops the top of stack
1376+ 69FD                              New_Def DROP, "DROP", is_code, is_normal
1376+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1376+ 69FD             >
1376+ 69FD             >                // dummy db directives used to calculate length of namec
1376+ 69FD 44 52 4F 50 >                db      "DROP"
1376+ 6A01             >len_NFA         defl    $ - temp_NFA
1376+ 6A01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1376+ 69FD             >
1376+ 69FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1376+ 69FE 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1376+ 6A02             >                org     $-1                 // alter last byte of Name just above to set
1376+ 6A01 D0          >                db      {b $} | END_BIT     // msb as name end
1376+ 6A02             >
1376+ 6A02 EF 69       >                dw      last_NFA            // Link to previous definition Name
1376+ 6A04             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1376+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1376+ 6A04 ~           >
1376+ 6A04 ~           >
1376+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1376+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1376+ 6A04             >
1376+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1377+ 6A04 E1                           pop     hl                  // < n1 and discard previous TOS
1378+ 6A05                              next
1378+ 6A05 DD E9       >                jp      (ix)
1379+ 6A07
1380+ 6A07              //  ______________________________________________________________________
1381+ 6A07              //
1382+ 6A07              // nip          n1 n2 -- n2
1383+ 6A07              // drops the second elemento on the stack
1384+ 6A07                              New_Def NIP, "NIP", is_code, is_normal
1384+ 6A07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1384+ 6A07             >
1384+ 6A07             >                // dummy db directives used to calculate length of namec
1384+ 6A07 4E 49 50    >                db      "NIP"
1384+ 6A0A             >len_NFA         defl    $ - temp_NFA
1384+ 6A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1384+ 6A07             >
1384+ 6A07 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1384+ 6A08 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1384+ 6A0B             >                org     $-1                 // alter last byte of Name just above to set
1384+ 6A0A D0          >                db      {b $} | END_BIT     // msb as name end
1384+ 6A0B             >
1384+ 6A0B FD 69       >                dw      last_NFA            // Link to previous definition Name
1384+ 6A0D             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1384+ 6A0D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1384+ 6A0D ~           >
1384+ 6A0D ~           >
1384+ 6A0D             >                endif           ; ok        // for other definitions it "points" the correct handler
1384+ 6A0D             >                // Use of "; ok" to suppress "warning[fwdref]"
1384+ 6A0D             >
1384+ 6A0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1385+ 6A0D
1386+ 6A0D E1                           pop     hl                  // < n1 discarded
1387+ 6A0E E3                           ex      (sp), hl
1388+ 6A0F                              next
1388+ 6A0F DD E9       >                jp      (ix)
1389+ 6A11
1390+ 6A11              //  ______________________________________________________________________
1391+ 6A11              //
1392+ 6A11              // tuck         n1 n2 -- n2 n1 n2
1393+ 6A11              // copy the top element after the second.
1394+ 6A11                              New_Def TUCK, "TUCK", is_code, is_normal
1394+ 6A11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1394+ 6A11             >
1394+ 6A11             >                // dummy db directives used to calculate length of namec
1394+ 6A11 54 55 43 4B >                db      "TUCK"
1394+ 6A15             >len_NFA         defl    $ - temp_NFA
1394+ 6A15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1394+ 6A11             >
1394+ 6A11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1394+ 6A12 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1394+ 6A16             >                org     $-1                 // alter last byte of Name just above to set
1394+ 6A15 CB          >                db      {b $} | END_BIT     // msb as name end
1394+ 6A16             >
1394+ 6A16 07 6A       >                dw      last_NFA            // Link to previous definition Name
1394+ 6A18             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1394+ 6A18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1394+ 6A18 ~           >
1394+ 6A18 ~           >
1394+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
1394+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
1394+ 6A18             >
1394+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1395+ 6A18 E1                           pop     hl
1396+ 6A19 D1                           pop     de                  // < n1
1397+ 6A1A E5                           push    hl                  // > n2  and TOS
1398+ 6A1B D5                           push    de                  // > n1
1399+ 6A1C E5                           push    hl
1400+ 6A1D                              next
1400+ 6A1D DD E9       >                jp      (ix)
1401+ 6A1F
1402+ 6A1F              //  ______________________________________________________________________
1403+ 6A1F              //
1404+ 6A1F              // swap         n1 n2 -- n2 n1
1405+ 6A1F              // swaps the two values on top of stack
1406+ 6A1F                              New_Def SWAP, "SWAP", is_code, is_normal
1406+ 6A1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1406+ 6A1F             >
1406+ 6A1F             >                // dummy db directives used to calculate length of namec
1406+ 6A1F 53 57 41 50 >                db      "SWAP"
1406+ 6A23             >len_NFA         defl    $ - temp_NFA
1406+ 6A23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1406+ 6A1F             >
1406+ 6A1F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1406+ 6A20 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1406+ 6A24             >                org     $-1                 // alter last byte of Name just above to set
1406+ 6A23 D0          >                db      {b $} | END_BIT     // msb as name end
1406+ 6A24             >
1406+ 6A24 11 6A       >                dw      last_NFA            // Link to previous definition Name
1406+ 6A26             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1406+ 6A26 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1406+ 6A26 ~           >
1406+ 6A26 ~           >
1406+ 6A26             >                endif           ; ok        // for other definitions it "points" the correct handler
1406+ 6A26             >                // Use of "; ok" to suppress "warning[fwdref]"
1406+ 6A26             >
1406+ 6A26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1407+ 6A26 E1                           pop     hl                  // < n1
1408+ 6A27 E3                           ex      (sp),hl             // > n2
1409+ 6A28 E5                           push    hl                  // copy n1 to TOS
1410+ 6A29                              next
1410+ 6A29 DD E9       >                jp      (ix)
1411+ 6A2B
1412+ 6A2B              //  ______________________________________________________________________
1413+ 6A2B              //
1414+ 6A2B              // dup         n -- n n
1415+ 6A2B              // duplicates the top value of stack
1416+ 6A2B                              New_Def DUP, "DUP", is_code, is_normal
1416+ 6A2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1416+ 6A2B             >
1416+ 6A2B             >                // dummy db directives used to calculate length of namec
1416+ 6A2B 44 55 50    >                db      "DUP"
1416+ 6A2E             >len_NFA         defl    $ - temp_NFA
1416+ 6A2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1416+ 6A2B             >
1416+ 6A2B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1416+ 6A2C 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1416+ 6A2F             >                org     $-1                 // alter last byte of Name just above to set
1416+ 6A2E D0          >                db      {b $} | END_BIT     // msb as name end
1416+ 6A2F             >
1416+ 6A2F 1F 6A       >                dw      last_NFA            // Link to previous definition Name
1416+ 6A31             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1416+ 6A31 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1416+ 6A31 ~           >
1416+ 6A31 ~           >
1416+ 6A31             >                endif           ; ok        // for other definitions it "points" the correct handler
1416+ 6A31             >                // Use of "; ok" to suppress "warning[fwdref]"
1416+ 6A31             >
1416+ 6A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1417+ 6A31 E1                           pop     hl
1418+ 6A32 E5                           push    hl                  // > n duplicate TOS
1419+ 6A33 E5                           push    hl
1420+ 6A34                              next
1420+ 6A34 DD E9       >                jp      (ix)
1421+ 6A36
1422+ 6A36              //  ______________________________________________________________________
1423+ 6A36              //
1424+ 6A36              // rot         n1 n2 n3 -- n2 n3 n1
1425+ 6A36              // Rotates the 3 top values of stack by picking the 3rd in access-order
1426+ 6A36              // and putting it on top. The other two are shifted down one place.
1427+ 6A36                              New_Def ROT, "ROT", is_code, is_normal
1427+ 6A36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1427+ 6A36             >
1427+ 6A36             >                // dummy db directives used to calculate length of namec
1427+ 6A36 52 4F 54    >                db      "ROT"
1427+ 6A39             >len_NFA         defl    $ - temp_NFA
1427+ 6A39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1427+ 6A36             >
1427+ 6A36 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1427+ 6A37 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1427+ 6A3A             >                org     $-1                 // alter last byte of Name just above to set
1427+ 6A39 D4          >                db      {b $} | END_BIT     // msb as name end
1427+ 6A3A             >
1427+ 6A3A 2B 6A       >                dw      last_NFA            // Link to previous definition Name
1427+ 6A3C             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1427+ 6A3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1427+ 6A3C ~           >
1427+ 6A3C ~           >
1427+ 6A3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1427+ 6A3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1427+ 6A3C             >
1427+ 6A3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1428+ 6A3C D1                           pop     de                  // < n3
1429+ 6A3D E1                           pop     hl                  // < n2
1430+ 6A3E E3                           ex      (sp),hl             // > n2 < n1
1431+ 6A3F D5                           push    de                  // > n3
1432+ 6A40 E5                           push    hl                  // copy n1 to TOS
1433+ 6A41                              next
1433+ 6A41 DD E9       >                jp      (ix)
1434+ 6A43
1435+ 6A43              //  ______________________________________________________________________
1436+ 6A43              //
1437+ 6A43              // -rot         n1 n2 n3 -- n3 n1 n2
1438+ 6A43              // Rotates the 3 top values of stack by picking the 1st in access-order
1439+ 6A43              // and putting back to 3rd place. The other two are shifted down one place.
1440+ 6A43                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1440+ 6A43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1440+ 6A43             >
1440+ 6A43             >                // dummy db directives used to calculate length of namec
1440+ 6A43 2D 52 4F 54 >                db      "-ROT"
1440+ 6A47             >len_NFA         defl    $ - temp_NFA
1440+ 6A47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1440+ 6A43             >
1440+ 6A43 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1440+ 6A44 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1440+ 6A48             >                org     $-1                 // alter last byte of Name just above to set
1440+ 6A47 D4          >                db      {b $} | END_BIT     // msb as name end
1440+ 6A48             >
1440+ 6A48 36 6A       >                dw      last_NFA            // Link to previous definition Name
1440+ 6A4A             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1440+ 6A4A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1440+ 6A4A ~           >
1440+ 6A4A ~           >
1440+ 6A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
1440+ 6A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
1440+ 6A4A             >
1440+ 6A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1441+ 6A4A E1                           pop     hl                  // < n3
1442+ 6A4B D1                           pop     de                  // < n2
1443+ 6A4C E3                           ex      (sp),hl             // > n3 < n1
1444+ 6A4D E5                           push    hl                  // > n1
1445+ 6A4E D5                           push    de                  // copy n3 to TOS
1446+ 6A4F                              next
1446+ 6A4F DD E9       >                jp      (ix)
1447+ 6A51
1448+ 6A51              //  ______________________________________________________________________
1449+ 6A51              //
1450+ 6A51              // pick        n1 -- nx
1451+ 6A51              // picks the nth element from TOS
1452+ 6A51                              New_Def PICK, "PICK", is_code, is_normal
1452+ 6A51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ 6A51             >
1452+ 6A51             >                // dummy db directives used to calculate length of namec
1452+ 6A51 50 49 43 4B >                db      "PICK"
1452+ 6A55             >len_NFA         defl    $ - temp_NFA
1452+ 6A55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ 6A51             >
1452+ 6A51 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ 6A52 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1452+ 6A56             >                org     $-1                 // alter last byte of Name just above to set
1452+ 6A55 CB          >                db      {b $} | END_BIT     // msb as name end
1452+ 6A56             >
1452+ 6A56 43 6A       >                dw      last_NFA            // Link to previous definition Name
1452+ 6A58             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 6A58 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1452+ 6A58 ~           >
1452+ 6A58 ~           >
1452+ 6A58             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 6A58             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 6A58             >
1452+ 6A58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 6A58 E1                           pop     hl                  // take TOS as index
1454+ 6A59 29                           add     hl, hl              // as cells
1455+ 6A5A 39                           add     hl, sp              // from Stack Pointer
1456+ 6A5B 7E                           ld      a, (hl)             // replace TOS
1457+ 6A5C 23                           inc     hl
1458+ 6A5D 66                           ld      h, (hl)
1459+ 6A5E 6F                           ld      l, a
1460+ 6A5F
1461+ 6A5F                              psh1
1461+ 6A5F E5          >                push    hl
1461+ 6A60 DD E9       >                jp      (ix)
1462+ 6A62
1463+ 6A62
1464+ 6A62              //  ______________________________________________________________________
1465+ 6A62              //
1466+ 6A62              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1467+ 6A62              // picks the nth element from TOS
1468+ 6A62              //              New_Def ROLL, "ROLL", is_code, is_normal
1469+ 6A62              //              exx                     // we need all registers free
1470+ 6A62              //              pop     hl              // number of cells to roll
1471+ 6A62              //              ld      a, h
1472+ 6A62              //              or       l
1473+ 6A62              //              jr      z, Roll_Zero
1474+ 6A62              //                  add     hl, hl              // number of bytes to move
1475+ 6A62              //                  ld      b, h
1476+ 6A62              //                  ld      c, l
1477+ 6A62              //                  add     hl, sp          // address of n1
1478+ 6A62              //                  ld      a, (hl)         // take n1 into a and a,
1479+ 6A62              //                  inc     hl
1480+ 6A62              //                  ex      af, af'
1481+ 6A62              //                  ld      a, (hl)         // take n1 into a and a,
1482+ 6A62              //                  ld      d, h
1483+ 6A62              //                  ld      e, l
1484+ 6A62              //                  dec     hl
1485+ 6A62              //                  dec     hl
1486+ 6A62              //                  lddr
1487+ 6A62              //                  ex      de, hl
1488+ 6A62              //                  ld      (hl), a
1489+ 6A62              //                  dec     hl
1490+ 6A62              //                  ex      af, af'
1491+ 6A62              //                  ld      (hl), a
1492+ 6A62              //Roll_Zero:
1493+ 6A62              //              exx
1494+ 6A62              //              next
1495+ 6A62
1496+ 6A62
1497+ 6A62              //  ______________________________________________________________________
1498+ 6A62              //
1499+ 6A62              // 2over        d1 d2 -- d1 d2 d1
1500+ 6A62              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1501+ 6A62              // copy the second double of stack and put on top.
1502+ 6A62              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1503+ 6A62              //
1504+ 6A62              //              ld      hl, 7
1505+ 6A62              //              add     hl, sp
1506+ 6A62              //              ld      d, (hl)
1507+ 6A62              //              dec     hl
1508+ 6A62              //              ld      e, (hl)             // d1-L
1509+ 6A62              //              push    de
1510+ 6A62              //              dec     hl
1511+ 6A62              //              ld      d, (hl)
1512+ 6A62              //              dec     hl
1513+ 6A62              //              ld      e, (hl)             // d1-H
1514+ 6A62              //              push    de
1515+ 6A62              //              next
1516+ 6A62
1517+ 6A62              //  ______________________________________________________________________
1518+ 6A62              //
1519+ 6A62              // 2drop        d --
1520+ 6A62              //              n1 n2 --
1521+ 6A62              // drops the top double from stack
1522+ 6A62                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1522+ 6A62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1522+ 6A62             >
1522+ 6A62             >                // dummy db directives used to calculate length of namec
1522+ 6A62 32 44 52 4F >                db      "2DROP"
1522+ 6A66 50          >
1522+ 6A67             >len_NFA         defl    $ - temp_NFA
1522+ 6A67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1522+ 6A62             >
1522+ 6A62 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1522+ 6A63 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1522+ 6A67 50          >
1522+ 6A68             >                org     $-1                 // alter last byte of Name just above to set
1522+ 6A67 D0          >                db      {b $} | END_BIT     // msb as name end
1522+ 6A68             >
1522+ 6A68 51 6A       >                dw      last_NFA            // Link to previous definition Name
1522+ 6A6A             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1522+ 6A6A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1522+ 6A6A ~           >
1522+ 6A6A ~           >
1522+ 6A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
1522+ 6A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
1522+ 6A6A             >
1522+ 6A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1523+ 6A6A E1                           pop     hl
1524+ 6A6B E1                           pop     hl
1525+ 6A6C                              next
1525+ 6A6C DD E9       >                jp      (ix)
1526+ 6A6E
1527+ 6A6E              //  ______________________________________________________________________
1528+ 6A6E              //
1529+ 6A6E              // 2nip         d1 d2 -- d2
1530+ 6A6E              //              n1 n2 n3 n4 -- n3 n4
1531+ 6A6E              // drops the second double on the stack
1532+ 6A6E              //              New_Def TWO_NIP, 4, "2nip"
1533+ 6A6E              //              ...
1534+ 6A6E
1535+ 6A6E              //  ______________________________________________________________________
1536+ 6A6E              //
1537+ 6A6E              // 2tuck         d1 d2 -- d2 d1 d2
1538+ 6A6E              // copy the top element after the second.
1539+ 6A6E              //              New_Def TWO_TUCK, 5, "2tuck"
1540+ 6A6E              //              ...
1541+ 6A6E
1542+ 6A6E              //  ______________________________________________________________________
1543+ 6A6E              //
1544+ 6A6E              // 2swap         d1 d2 -- d2 d1
1545+ 6A6E              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1546+ 6A6E              // swaps the two doubles on top of stack
1547+ 6A6E                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1547+ 6A6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1547+ 6A6E             >
1547+ 6A6E             >                // dummy db directives used to calculate length of namec
1547+ 6A6E 32 53 57 41 >                db      "2SWAP"
1547+ 6A72 50          >
1547+ 6A73             >len_NFA         defl    $ - temp_NFA
1547+ 6A73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1547+ 6A6E             >
1547+ 6A6E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1547+ 6A6F 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1547+ 6A73 50          >
1547+ 6A74             >                org     $-1                 // alter last byte of Name just above to set
1547+ 6A73 D0          >                db      {b $} | END_BIT     // msb as name end
1547+ 6A74             >
1547+ 6A74 62 6A       >                dw      last_NFA            // Link to previous definition Name
1547+ 6A76             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1547+ 6A76 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1547+ 6A76 ~           >
1547+ 6A76 ~           >
1547+ 6A76             >                endif           ; ok        // for other definitions it "points" the correct handler
1547+ 6A76             >                // Use of "; ok" to suppress "warning[fwdref]"
1547+ 6A76             >
1547+ 6A76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1548+ 6A76 F1                           pop     af                  //   d2-H
1549+ 6A77 E1                           pop     hl                  // < d2-L
1550+ 6A78 D1                           pop     de                  // < d1-H
1551+ 6A79 E3                           ex      (sp), hl            // < d1-L > d2-L
1552+ 6A7A F5                           push    af                  // > d2-H
1553+ 6A7B E5                           push    hl                  // > d1-L
1554+ 6A7C D5                           push    de
1555+ 6A7D
1556+ 6A7D                              next
1556+ 6A7D DD E9       >                jp      (ix)
1557+ 6A7F
1558+ 6A7F              //  ______________________________________________________________________
1559+ 6A7F              //
1560+ 6A7F              // 2dup         d -- d d
1561+ 6A7F              //              n1 n2 -- n1 n2 n1 n2
1562+ 6A7F              // duplicates the top double of stack
1563+ 6A7F                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1563+ 6A7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ 6A7F             >
1563+ 6A7F             >                // dummy db directives used to calculate length of namec
1563+ 6A7F 32 44 55 50 >                db      "2DUP"
1563+ 6A83             >len_NFA         defl    $ - temp_NFA
1563+ 6A83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ 6A7F             >
1563+ 6A7F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ 6A80 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1563+ 6A84             >                org     $-1                 // alter last byte of Name just above to set
1563+ 6A83 D0          >                db      {b $} | END_BIT     // msb as name end
1563+ 6A84             >
1563+ 6A84 6E 6A       >                dw      last_NFA            // Link to previous definition Name
1563+ 6A86             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 6A86 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1563+ 6A86 ~           >
1563+ 6A86 ~           >
1563+ 6A86             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 6A86             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 6A86             >
1563+ 6A86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 6A86 E1                           pop     hl                  // < d-H
1565+ 6A87 D1                           pop     de                  // < d-L
1566+ 6A88 D5                           push    de                  // < d-L
1567+ 6A89 E5                           push    hl                  // > d-H
1568+ 6A8A D5                           push    de                  // > d-L
1569+ 6A8B E5                           push    hl                  // > d-H
1570+ 6A8C                              next
1570+ 6A8C DD E9       >                jp      (ix)
1571+ 6A8E
1572+ 6A8E              //  ______________________________________________________________________
1573+ 6A8E              //
1574+ 6A8E              // 2rot         d1 d2 d3 -- d2 d3 d1
1575+ 6A8E              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1576+ 6A8E              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1577+ 6A8E              // and putting it on top. The other two are shifted down one place.
1578+ 6A8E              //              New_Def TWO?ROT, 4, "2rot"
1579+ 6A8E              //              ...
1580+ 6A8E              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1581+ 6A8E              //
1582+ 6A8E              //      d3  |d2  |d1  |
1583+ 6A8E              //      h l |h l |h l |
1584+ 6A8E              // SP   LHED|LHED|LHED|
1585+ 6A8E              // SP  +0123|4567|89ab|
1586+ 6A8E              //              ld      hl, $000B
1587+ 6A8E              //              add     hl, sp
1588+ 6A8E              //              ld      d, (hl)
1589+ 6A8E              //              dec     hl
1590+ 6A8E              //              ld      e, (hl)
1591+ 6A8E              //              dec     hl
1592+ 6A8E              //              push    de
1593+ 6A8E              //              ld      d, (hl)
1594+ 6A8E              //              dec     hl
1595+ 6A8E              //              ld      e, (hl)
1596+ 6A8E              //              dec     hl
1597+ 6A8E              //              push    de
1598+ 6A8E
1599+ 6A8E              //      d1  |d3  |d2  |d1  |
1600+ 6A8E              //      h l |h l |h l |h l |
1601+ 6A8E              // SP   LHED|LHED|LHED|LHED|
1602+ 6A8E              // SP       +0123|4567|89ab|
1603+ 6A8E
1604+ 6A8E              //              ld      d, h
1605+ 6A8E              //              ld      e, l
1606+ 6A8E              //              inc     de
1607+ 6A8E              //              inc     de
1608+ 6A8E              //              inc     de
1609+ 6A8E              //              inc     de
1610+ 6A8E              //              push    bc
1611+ 6A8E              //              ld      bc, $000C
1612+ 6A8E              //              lddr
1613+ 6A8E              //              pop     bc
1614+ 6A8E              //              pop     de
1615+ 6A8E              //              pop     de
1616+ 6A8E              //
1617+ 6A8E              //              next
1618+ 6A8E
1619+ 6A8E
1620+ 6A8E              //  ______________________________________________________________________
1621+ 6A8E              //
1622+ 6A8E              // +!           n a --
1623+ 6A8E              // Sums to the content of address a the number n.
1624+ 6A8E              // It is the same of  a @ n + a !
1625+ 6A8E                              New_Def PLUSSTORE, "+!", is_code, is_normal
1625+ 6A8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1625+ 6A8E             >
1625+ 6A8E             >                // dummy db directives used to calculate length of namec
1625+ 6A8E 2B 21       >                db      "+!"
1625+ 6A90             >len_NFA         defl    $ - temp_NFA
1625+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1625+ 6A8E             >
1625+ 6A8E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1625+ 6A8F 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1625+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1625+ 6A90 A1          >                db      {b $} | END_BIT     // msb as name end
1625+ 6A91             >
1625+ 6A91 7F 6A       >                dw      last_NFA            // Link to previous definition Name
1625+ 6A93             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1625+ 6A93 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1625+ 6A93 ~           >
1625+ 6A93 ~           >
1625+ 6A93             >                endif           ; ok        // for other definitions it "points" the correct handler
1625+ 6A93             >                // Use of "; ok" to suppress "warning[fwdref]"
1625+ 6A93             >
1625+ 6A93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1626+ 6A93 E1                           pop     hl                  // hl is the address
1627+ 6A94 D1                           pop     de                  // de is the number
1628+ 6A95 7E                           ld      a, (hl)
1629+ 6A96 83                           add     e
1630+ 6A97 77                           ld      (hl), a
1631+ 6A98 23                           inc     hl
1632+ 6A99 7E                           ld      a, (hl)
1633+ 6A9A 8A                           adc     d
1634+ 6A9B 77                           ld      (hl), a
1635+ 6A9C
1636+ 6A9C                              next
1636+ 6A9C DD E9       >                jp      (ix)
1637+ 6A9E
1638+ 6A9E              //  ______________________________________________________________________
1639+ 6A9E              //
1640+ 6A9E              // toggle       a n --
1641+ 6A9E              // Complements (xor) the byte at addrress  a  with the model n.
1642+ 6A9E                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1642+ 6A9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ 6A9E             >
1642+ 6A9E             >                // dummy db directives used to calculate length of namec
1642+ 6A9E 54 4F 47 47 >                db      "TOGGLE"
1642+ 6AA2 4C 45       >
1642+ 6AA4             >len_NFA         defl    $ - temp_NFA
1642+ 6AA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ 6A9E             >
1642+ 6A9E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ 6A9F 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1642+ 6AA3 4C 45       >
1642+ 6AA5             >                org     $-1                 // alter last byte of Name just above to set
1642+ 6AA4 C5          >                db      {b $} | END_BIT     // msb as name end
1642+ 6AA5             >
1642+ 6AA5 8E 6A       >                dw      last_NFA            // Link to previous definition Name
1642+ 6AA7             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 6AA7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1642+ 6AA7 ~           >
1642+ 6AA7 ~           >
1642+ 6AA7             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 6AA7             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 6AA7             >
1642+ 6AA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 6AA7 D1                           pop     de
1644+ 6AA8 E1                           pop     hl
1645+ 6AA9 7E                           ld      a, (hl)
1646+ 6AAA AB                           xor     e
1647+ 6AAB 77                           ld      (hl), a
1648+ 6AAC
1649+ 6AAC                              next
1649+ 6AAC DD E9       >                jp      (ix)
1650+ 6AAE
1651+ 6AAE              //  ______________________________________________________________________
1652+ 6AAE              //
1653+ 6AAE              // @            a -- n
1654+ 6AAE              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1655+ 6AAE                              New_Def FETCH, "@", is_code, is_normal
1655+ 6AAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1655+ 6AAE             >
1655+ 6AAE             >                // dummy db directives used to calculate length of namec
1655+ 6AAE 40          >                db      "@"
1655+ 6AAF             >len_NFA         defl    $ - temp_NFA
1655+ 6AAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1655+ 6AAE             >
1655+ 6AAE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1655+ 6AAF 40          >                db      "@"               // name string in 7-bit ascii, but
1655+ 6AB0             >                org     $-1                 // alter last byte of Name just above to set
1655+ 6AAF C0          >                db      {b $} | END_BIT     // msb as name end
1655+ 6AB0             >
1655+ 6AB0 9E 6A       >                dw      last_NFA            // Link to previous definition Name
1655+ 6AB2             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1655+ 6AB2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1655+ 6AB2 ~           >
1655+ 6AB2 ~           >
1655+ 6AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
1655+ 6AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
1655+ 6AB2             >
1655+ 6AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1656+ 6AB2 E1                           pop     hl
1657+ 6AB3 5E                           ld      e, (hl)             // low-byte
1658+ 6AB4 23                           inc     hl
1659+ 6AB5 56                           ld      d, (hl)             // high-byte
1660+ 6AB6 D5                           push    de
1661+ 6AB7                              next
1661+ 6AB7 DD E9       >                jp      (ix)
1662+ 6AB9
1663+ 6AB9              //  ______________________________________________________________________
1664+ 6AB9              //
1665+ 6AB9              // !            n a --
1666+ 6AB9              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1667+ 6AB9                              New_Def STORE, "!", is_code, is_normal
1667+ 6AB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1667+ 6AB9             >
1667+ 6AB9             >                // dummy db directives used to calculate length of namec
1667+ 6AB9 21          >                db      "!"
1667+ 6ABA             >len_NFA         defl    $ - temp_NFA
1667+ 6ABA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1667+ 6AB9             >
1667+ 6AB9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1667+ 6ABA 21          >                db      "!"               // name string in 7-bit ascii, but
1667+ 6ABB             >                org     $-1                 // alter last byte of Name just above to set
1667+ 6ABA A1          >                db      {b $} | END_BIT     // msb as name end
1667+ 6ABB             >
1667+ 6ABB AE 6A       >                dw      last_NFA            // Link to previous definition Name
1667+ 6ABD             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1667+ 6ABD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1667+ 6ABD ~           >
1667+ 6ABD ~           >
1667+ 6ABD             >                endif           ; ok        // for other definitions it "points" the correct handler
1667+ 6ABD             >                // Use of "; ok" to suppress "warning[fwdref]"
1667+ 6ABD             >
1667+ 6ABD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1668+ 6ABD E1                           pop     hl                  // address
1669+ 6ABE D1                           pop     de                  // < n
1670+ 6ABF 73                           ld      (hl), e             // low-byte
1671+ 6AC0 23                           inc     hl
1672+ 6AC1 72                           ld      (hl), d             // high-byte
1673+ 6AC2
1674+ 6AC2                              next
1674+ 6AC2 DD E9       >                jp      (ix)
1675+ 6AC4
1676+ 6AC4              //  ______________________________________________________________________
1677+ 6AC4              //
1678+ 6AC4              // c@           a -- c
1679+ 6AC4              // fetch a character n from address a
1680+ 6AC4                              New_Def CFETCH, "C@", is_code, is_normal
1680+ 6AC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1680+ 6AC4             >
1680+ 6AC4             >                // dummy db directives used to calculate length of namec
1680+ 6AC4 43 40       >                db      "C@"
1680+ 6AC6             >len_NFA         defl    $ - temp_NFA
1680+ 6AC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1680+ 6AC4             >
1680+ 6AC4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1680+ 6AC5 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1680+ 6AC7             >                org     $-1                 // alter last byte of Name just above to set
1680+ 6AC6 C0          >                db      {b $} | END_BIT     // msb as name end
1680+ 6AC7             >
1680+ 6AC7 B9 6A       >                dw      last_NFA            // Link to previous definition Name
1680+ 6AC9             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1680+ 6AC9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1680+ 6AC9 ~           >
1680+ 6AC9 ~           >
1680+ 6AC9             >                endif           ; ok        // for other definitions it "points" the correct handler
1680+ 6AC9             >                // Use of "; ok" to suppress "warning[fwdref]"
1680+ 6AC9             >
1680+ 6AC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1681+ 6AC9 E1                           pop     hl
1682+ 6ACA 6E                           ld      l, (hl)             // low-byte
1683+ 6ACB 26 00                        ld      h, 0
1684+ 6ACD
1685+ 6ACD                              psh1
1685+ 6ACD E5          >                push    hl
1685+ 6ACE DD E9       >                jp      (ix)
1686+ 6AD0
1687+ 6AD0              //  ______________________________________________________________________
1688+ 6AD0              //
1689+ 6AD0              // c!           c a --
1690+ 6AD0              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1691+ 6AD0                              New_Def CSTORE, "C!", is_code, is_normal
1691+ 6AD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1691+ 6AD0             >
1691+ 6AD0             >                // dummy db directives used to calculate length of namec
1691+ 6AD0 43 21       >                db      "C!"
1691+ 6AD2             >len_NFA         defl    $ - temp_NFA
1691+ 6AD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1691+ 6AD0             >
1691+ 6AD0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1691+ 6AD1 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1691+ 6AD3             >                org     $-1                 // alter last byte of Name just above to set
1691+ 6AD2 A1          >                db      {b $} | END_BIT     // msb as name end
1691+ 6AD3             >
1691+ 6AD3 C4 6A       >                dw      last_NFA            // Link to previous definition Name
1691+ 6AD5             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1691+ 6AD5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1691+ 6AD5 ~           >
1691+ 6AD5 ~           >
1691+ 6AD5             >                endif           ; ok        // for other definitions it "points" the correct handler
1691+ 6AD5             >                // Use of "; ok" to suppress "warning[fwdref]"
1691+ 6AD5             >
1691+ 6AD5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1692+ 6AD5 E1                           pop     hl                  // < address
1693+ 6AD6 D1                           pop     de
1694+ 6AD7 73                           ld      (hl), e             // low-byte
1695+ 6AD8
1696+ 6AD8                              next
1696+ 6AD8 DD E9       >                jp      (ix)
1697+ 6ADA
1698+ 6ADA              //  ______________________________________________________________________
1699+ 6ADA              //
1700+ 6ADA              // 2@           a -- d
1701+ 6ADA              // fetch a 32 bits number d from address a and leaves it on top of the
1702+ 6ADA              // stack as two single numbers, high part as top of the stack.
1703+ 6ADA              // A double number is normally kept in CPU registers as HLDE.
1704+ 6ADA              // On stack a double number is treated as two single numbers
1705+ 6ADA              // where BC is on the top of the stack and HL is the second from top,
1706+ 6ADA              // so the sign of the number can be checked on top of stack
1707+ 6ADA              // and in the stack memory it appears as LHED.
1708+ 6ADA                              New_Def TWO_FETCH, "2@", is_code, is_normal
1708+ 6ADA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1708+ 6ADA             >
1708+ 6ADA             >                // dummy db directives used to calculate length of namec
1708+ 6ADA 32 40       >                db      "2@"
1708+ 6ADC             >len_NFA         defl    $ - temp_NFA
1708+ 6ADC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1708+ 6ADA             >
1708+ 6ADA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1708+ 6ADB 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1708+ 6ADD             >                org     $-1                 // alter last byte of Name just above to set
1708+ 6ADC C0          >                db      {b $} | END_BIT     // msb as name end
1708+ 6ADD             >
1708+ 6ADD D0 6A       >                dw      last_NFA            // Link to previous definition Name
1708+ 6ADF             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1708+ 6ADF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1708+ 6ADF ~           >
1708+ 6ADF ~           >
1708+ 6ADF             >                endif           ; ok        // for other definitions it "points" the correct handler
1708+ 6ADF             >                // Use of "; ok" to suppress "warning[fwdref]"
1708+ 6ADF             >
1708+ 6ADF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1709+ 6ADF E1                           pop     hl                  // address
1710+ 6AE0 5E                           ld      e, (hl)             // low-byte
1711+ 6AE1 23                           inc     hl
1712+ 6AE2 56                           ld      d, (hl)             // high-byte
1713+ 6AE3 23                           inc     hl
1714+ 6AE4 7E                           ld      a, (hl)             // low-byte
1715+ 6AE5 23                           inc     hl
1716+ 6AE6 66                           ld      h, (hl)             // high-byte
1717+ 6AE7 6F                           ld      l, a
1718+ 6AE8 E5                           push    hl
1719+ 6AE9 D5                           push    de
1720+ 6AEA                              next
1720+ 6AEA DD E9       >                jp      (ix)
1721+ 6AEC
1722+ 6AEC              //  ______________________________________________________________________
1723+ 6AEC              //
1724+ 6AEC              // 2!           d a --
1725+ 6AEC              // stores a 32 bits number d from address a and leaves it on top of the
1726+ 6AEC              // stack as two single numbers, high part as top of the stack.
1727+ 6AEC              // A double number is normally kept in CPU registers as HLDE.
1728+ 6AEC              // On stack a double number is treated as two single numbers
1729+ 6AEC              // where BC is on the top of the stack and HL is the second from top,
1730+ 6AEC              // so the sign of the number can be checked on top of stack
1731+ 6AEC              // and in the stack memory it appears as LHED.
1732+ 6AEC                              New_Def TWO_STORE, "2!", is_code, is_normal
1732+ 6AEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1732+ 6AEC             >
1732+ 6AEC             >                // dummy db directives used to calculate length of namec
1732+ 6AEC 32 21       >                db      "2!"
1732+ 6AEE             >len_NFA         defl    $ - temp_NFA
1732+ 6AEE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1732+ 6AEC             >
1732+ 6AEC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1732+ 6AED 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1732+ 6AEF             >                org     $-1                 // alter last byte of Name just above to set
1732+ 6AEE A1          >                db      {b $} | END_BIT     // msb as name end
1732+ 6AEF             >
1732+ 6AEF DA 6A       >                dw      last_NFA            // Link to previous definition Name
1732+ 6AF1             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1732+ 6AF1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1732+ 6AF1 ~           >
1732+ 6AF1 ~           >
1732+ 6AF1             >                endif           ; ok        // for other definitions it "points" the correct handler
1732+ 6AF1             >                // Use of "; ok" to suppress "warning[fwdref]"
1732+ 6AF1             >
1732+ 6AF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1733+ 6AF1 D9                           exx
1734+ 6AF2 E1                           pop     hl                  // address
1735+ 6AF3 C1                           pop     bc                  // < high-part
1736+ 6AF4 D1                           pop     de                  // < low-part > Instruction Pointer
1737+ 6AF5 71                           ld      (hl), c
1738+ 6AF6 23                           inc     hl
1739+ 6AF7 70                           ld      (hl), b
1740+ 6AF8 23                           inc     hl
1741+ 6AF9 73                           ld      (hl), e
1742+ 6AFA 23                           inc     hl
1743+ 6AFB 72                           ld      (hl), d
1744+ 6AFC D9                           exx
1745+ 6AFD                              next
1745+ 6AFD DD E9       >                jp      (ix)
1746+ 6AFF
1747+ 6AFF              //  ______________________________________________________________________
1748+ 6AFF              //
1749+ 6AFF              // p@           a -- c
1750+ 6AFF              // Read one byte from port a and leave the result on top of stack
1751+ 6AFF                              New_Def PFETCH, "P@", is_code, is_normal
1751+ 6AFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1751+ 6AFF             >
1751+ 6AFF             >                // dummy db directives used to calculate length of namec
1751+ 6AFF 50 40       >                db      "P@"
1751+ 6B01             >len_NFA         defl    $ - temp_NFA
1751+ 6B01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1751+ 6AFF             >
1751+ 6AFF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1751+ 6B00 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1751+ 6B02             >                org     $-1                 // alter last byte of Name just above to set
1751+ 6B01 C0          >                db      {b $} | END_BIT     // msb as name end
1751+ 6B02             >
1751+ 6B02 EC 6A       >                dw      last_NFA            // Link to previous definition Name
1751+ 6B04             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1751+ 6B04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1751+ 6B04 ~           >
1751+ 6B04 ~           >
1751+ 6B04             >                endif           ; ok        // for other definitions it "points" the correct handler
1751+ 6B04             >                // Use of "; ok" to suppress "warning[fwdref]"
1751+ 6B04             >
1751+ 6B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1752+ 6B04 D9                           exx
1753+ 6B05 C1                           pop     bc
1754+ 6B06 26 00                        ld      h, 0
1755+ 6B08 ED 68                        in      l, (c)
1756+ 6B0A E5                           push    hl
1757+ 6B0B D9                           exx
1758+ 6B0C                              next
1758+ 6B0C DD E9       >                jp      (ix)
1759+ 6B0E
1760+ 6B0E              //  ______________________________________________________________________
1761+ 6B0E              //
1762+ 6B0E              // p!           c a --
1763+ 6B0E              // Send one byte (top of stack) to port a
1764+ 6B0E                              New_Def PSTORE, "P!", is_code, is_normal
1764+ 6B0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1764+ 6B0E             >
1764+ 6B0E             >                // dummy db directives used to calculate length of namec
1764+ 6B0E 50 21       >                db      "P!"
1764+ 6B10             >len_NFA         defl    $ - temp_NFA
1764+ 6B10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1764+ 6B0E             >
1764+ 6B0E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1764+ 6B0F 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1764+ 6B11             >                org     $-1                 // alter last byte of Name just above to set
1764+ 6B10 A1          >                db      {b $} | END_BIT     // msb as name end
1764+ 6B11             >
1764+ 6B11 FF 6A       >                dw      last_NFA            // Link to previous definition Name
1764+ 6B13             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1764+ 6B13 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1764+ 6B13 ~           >
1764+ 6B13 ~           >
1764+ 6B13             >                endif           ; ok        // for other definitions it "points" the correct handler
1764+ 6B13             >                // Use of "; ok" to suppress "warning[fwdref]"
1764+ 6B13             >
1764+ 6B13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1765+ 6B13 D9                           exx
1766+ 6B14 C1                           pop     bc
1767+ 6B15 E1                           pop     hl                  // < c
1768+ 6B16 ED 69                        out     (c), l              // low-byte
1769+ 6B18 D9                           exx
1770+ 6B19                              next
1770+ 6B19 DD E9       >                jp      (ix)
1771+ 6B1B
1772+ 6B1B
1773+ 6B1B              //  ______________________________________________________________________
1774+ 6B1B              //
1775+ 6B1B              // 2*           n1 -- n2
1776+ 6B1B              // doubles the number at top of stack
1777+ 6B1B                              New_Def TWO_MUL, "2*", is_code, is_normal
1777+ 6B1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1777+ 6B1B             >
1777+ 6B1B             >                // dummy db directives used to calculate length of namec
1777+ 6B1B 32 2A       >                db      "2*"
1777+ 6B1D             >len_NFA         defl    $ - temp_NFA
1777+ 6B1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1777+ 6B1B             >
1777+ 6B1B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1777+ 6B1C 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1777+ 6B1E             >                org     $-1                 // alter last byte of Name just above to set
1777+ 6B1D AA          >                db      {b $} | END_BIT     // msb as name end
1777+ 6B1E             >
1777+ 6B1E 0E 6B       >                dw      last_NFA            // Link to previous definition Name
1777+ 6B20             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1777+ 6B20 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1777+ 6B20 ~           >
1777+ 6B20 ~           >
1777+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
1777+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
1777+ 6B20             >
1777+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1778+ 6B20              Two_Mul_Ptr:
1779+ 6B20 E1                           pop     hl
1780+ 6B21 29                           add     hl, hl
1781+ 6B22
1782+ 6B22                              psh1
1782+ 6B22 E5          >                push    hl
1782+ 6B23 DD E9       >                jp      (ix)
1783+ 6B25
1784+ 6B25              //  ______________________________________________________________________
1785+ 6B25              //
1786+ 6B25              // 2/           n1 -- n2
1787+ 6B25              // halves the top of stack, sign is unchanged
1788+ 6B25                              New_Def TWO_DIV, "2/", is_code, is_normal
1788+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1788+ 6B25             >
1788+ 6B25             >                // dummy db directives used to calculate length of namec
1788+ 6B25 32 2F       >                db      "2/"
1788+ 6B27             >len_NFA         defl    $ - temp_NFA
1788+ 6B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1788+ 6B25             >
1788+ 6B25 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1788+ 6B26 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1788+ 6B28             >                org     $-1                 // alter last byte of Name just above to set
1788+ 6B27 AF          >                db      {b $} | END_BIT     // msb as name end
1788+ 6B28             >
1788+ 6B28 1B 6B       >                dw      last_NFA            // Link to previous definition Name
1788+ 6B2A             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1788+ 6B2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1788+ 6B2A ~           >
1788+ 6B2A ~           >
1788+ 6B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1788+ 6B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1788+ 6B2A             >
1788+ 6B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1789+ 6B2A E1                           pop     hl
1790+ 6B2B CB 2C                        sra     h
1791+ 6B2D CB 1D                        rr      l
1792+ 6B2F
1793+ 6B2F                              psh1
1793+ 6B2F E5          >                push    hl
1793+ 6B30 DD E9       >                jp      (ix)
1794+ 6B32
1795+ 6B32              //  ______________________________________________________________________
1796+ 6B32              //
1797+ 6B32              // lshift       n1 u -- n2
1798+ 6B32              // bit left shift of u bits
1799+ 6B32                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1799+ 6B32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1799+ 6B32             >
1799+ 6B32             >                // dummy db directives used to calculate length of namec
1799+ 6B32 4C 53 48 49 >                db      "LSHIFT"
1799+ 6B36 46 54       >
1799+ 6B38             >len_NFA         defl    $ - temp_NFA
1799+ 6B38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1799+ 6B32             >
1799+ 6B32 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1799+ 6B33 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1799+ 6B37 46 54       >
1799+ 6B39             >                org     $-1                 // alter last byte of Name just above to set
1799+ 6B38 D4          >                db      {b $} | END_BIT     // msb as name end
1799+ 6B39             >
1799+ 6B39 25 6B       >                dw      last_NFA            // Link to previous definition Name
1799+ 6B3B             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1799+ 6B3B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1799+ 6B3B ~           >
1799+ 6B3B ~           >
1799+ 6B3B             >                endif           ; ok        // for other definitions it "points" the correct handler
1799+ 6B3B             >                // Use of "; ok" to suppress "warning[fwdref]"
1799+ 6B3B             >
1799+ 6B3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1800+ 6B3B D1                           pop     de
1801+ 6B3C
1802+ 6B3C E1                           pop     hl
1803+ 6B3D 7B                           ld      a, e
1804+ 6B3E B7                           or      a
1805+ 6B3F 28 04                        jr      z, Lshift_Zero
1806+ 6B41              Lshift_Loop:
1807+ 6B41 29                                   add     hl, hl
1808+ 6B42 3D                                   dec     a
1809+ 6B43 20 FC                            jr      nz, Lshift_Loop
1810+ 6B45              Lshift_Zero:
1811+ 6B45
1812+ 6B45
1813+ 6B45                              psh1
1813+ 6B45 E5          >                push    hl
1813+ 6B46 DD E9       >                jp      (ix)
1814+ 6B48
1815+ 6B48              //  ______________________________________________________________________
1816+ 6B48              //
1817+ 6B48              // rshift       n1 u -- n2
1818+ 6B48              // bit right shift of u bits
1819+ 6B48                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1819+ 6B48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1819+ 6B48             >
1819+ 6B48             >                // dummy db directives used to calculate length of namec
1819+ 6B48 52 53 48 49 >                db      "RSHIFT"
1819+ 6B4C 46 54       >
1819+ 6B4E             >len_NFA         defl    $ - temp_NFA
1819+ 6B4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1819+ 6B48             >
1819+ 6B48 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1819+ 6B49 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1819+ 6B4D 46 54       >
1819+ 6B4F             >                org     $-1                 // alter last byte of Name just above to set
1819+ 6B4E D4          >                db      {b $} | END_BIT     // msb as name end
1819+ 6B4F             >
1819+ 6B4F 32 6B       >                dw      last_NFA            // Link to previous definition Name
1819+ 6B51             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1819+ 6B51 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1819+ 6B51 ~           >
1819+ 6B51 ~           >
1819+ 6B51             >                endif           ; ok        // for other definitions it "points" the correct handler
1819+ 6B51             >                // Use of "; ok" to suppress "warning[fwdref]"
1819+ 6B51             >
1819+ 6B51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1820+ 6B51 D1                           pop     de
1821+ 6B52
1822+ 6B52 E1                           pop     hl
1823+ 6B53 7B                           ld      a, e
1824+ 6B54 B7                           or      a
1825+ 6B55 28 07                        jr      z, Rshift_Zero
1826+ 6B57              Rshift_Loop:
1827+ 6B57 CB 3C                                srl     h
1828+ 6B59 CB 1D                                rr      l
1829+ 6B5B 3D                                   dec     a
1830+ 6B5C 20 F9                            jr      nz, Rshift_Loop
1831+ 6B5E              Rshift_Zero:
1832+ 6B5E
1833+ 6B5E
1834+ 6B5E                              psh1
1834+ 6B5E E5          >                push    hl
1834+ 6B5F DD E9       >                jp      (ix)
1835+ 6B61
1836+ 6B61              //  ______________________________________________________________________
1837+ 6B61              //
1838+ 6B61              // cells        n1 -- n2
1839+ 6B61              // decrement by 2 top of stack
1840+ 6B61                              New_Def CELLS, "CELLS", is_code, is_normal
1840+ 6B61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1840+ 6B61             >
1840+ 6B61             >                // dummy db directives used to calculate length of namec
1840+ 6B61 43 45 4C 4C >                db      "CELLS"
1840+ 6B65 53          >
1840+ 6B66             >len_NFA         defl    $ - temp_NFA
1840+ 6B66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1840+ 6B61             >
1840+ 6B61 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1840+ 6B62 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1840+ 6B66 53          >
1840+ 6B67             >                org     $-1                 // alter last byte of Name just above to set
1840+ 6B66 D3          >                db      {b $} | END_BIT     // msb as name end
1840+ 6B67             >
1840+ 6B67 48 6B       >                dw      last_NFA            // Link to previous definition Name
1840+ 6B69             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1840+ 6B69 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1840+ 6B69 ~           >
1840+ 6B69 ~           >
1840+ 6B69             >                endif           ; ok        // for other definitions it "points" the correct handler
1840+ 6B69             >                // Use of "; ok" to suppress "warning[fwdref]"
1840+ 6B69             >
1840+ 6B69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1841+ 6B69 C3 20 6B                     jp      Two_Mul_Ptr
1842+ 6B6C
1843+ 6B6C
1844+ 6B6C              //  ______________________________________________________________________
1845+ 6B6C
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6B6C                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6B6C              //  ______________________________________________________________________
   2+ 6B6C              //
   3+ 6B6C              //  L1.asm
   4+ 6B6C              //
   5+ 6B6C              //  Level-1 definitions and derivate
   6+ 6B6C              //  ______________________________________________________________________
   7+ 6B6C
   8+ 6B6C              //  ______________________________________________________________________
   9+ 6B6C              //
  10+ 6B6C              // :            -- cccc     ( compile time )
  11+ 6B6C              //              i*x -- j*x  ( run time )
  12+ 6B6C              // Colon Definition
  13+ 6B6C                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6B6C             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6B6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6B6C             >
  13+ 6B6C             >                // dummy db directives used to calculate length of namec
  13+ 6B6C 3A          >                db      ":"
  13+ 6B6D             >len_NFA         defl    $ - temp_NFA
  13+ 6B6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6B6C             >
  13+ 6B6C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6B6D 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6B6E             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6B6D BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6B6E             >
  13+ 6B6E 61 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6B70             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6B70 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6B73             >
  13+ 6B73             >
  13+ 6B73             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6B73             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6B73             >
  13+ 6B73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6B73
  15+ 6B73 19 70                        dw      QEXEC                   // ?exec
  16+ 6B75 D1 6F                        dw      STORE_CSP               // !csp
  17+ 6B77 5C 6D B2 6A                  dw      CURRENT, FETCH          // current @
  18+ 6B7B 4E 6D BD 6A                  dw      CONTEXT, STORE          // context !
  19+ 6B7F 44 76                        dw      CREATE                  // create  ( forward )
  20+ 6B81 CE 70                        dw      SMUDGE                  // dmudge
  21+ 6B83 B8 70                        dw      SQUARED_CLOSE           // ]
  22+ 6B85 28 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6B87                                                              // ... immediate
  24+ 6B87              Enter_Ptr:
  25+ 6B87                              // via call coded in CFA
  26+ 6B87                              ldhlrp
  26+ 6B87 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6B8A 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6B8B 70                           ld      (hl), b
  29+ 6B8C 2B                           dec     hl
  30+ 6B8D 71                           ld      (hl), c
  31+ 6B8E                              ldrphl
  31+ 6B8E 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6B91
  33+ 6B91
  34+ 6B91 C1                           pop     bc                  // points to PFA of "this" word
  35+ 6B92                              next
  35+ 6B92 DD E9       >                jp      (ix)
  36+ 6B94
  37+ 6B94              //  ______________________________________________________________________
  38+ 6B94              //
  39+ 6B94              // ;            --
  40+ 6B94              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6B94                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6B94             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6B94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6B94             >
  41+ 6B94             >                // dummy db directives used to calculate length of namec
  41+ 6B94 3B          >                db      ";"
  41+ 6B95             >len_NFA         defl    $ - temp_NFA
  41+ 6B95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6B94             >
  41+ 6B94 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6B95 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6B96             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6B95 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6B96             >
  41+ 6B96 6C 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6B98             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6B98 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6B9B             >
  41+ 6B9B             >
  41+ 6B9B             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6B9B             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6B9B             >
  41+ 6B9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6B9B
  43+ 6B9B 45 70                        dw      QCSP                    // ?csp
  44+ 6B9D 7E 70 CE 68                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BA1 CE 70                        dw      SMUDGE                  // smudge
  46+ 6BA3 A9 70                        dw      SQUARED_OPEN            // [
  47+ 6BA5 CE 68                        dw      EXIT                    // ; immediate
  48+ 6BA7
  49+ 6BA7              //  ______________________________________________________________________
  50+ 6BA7              //
  51+ 6BA7              // noop         --
  52+ 6BA7
  53+ 6BA7                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6BA7             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6BA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BA7             >
  53+ 6BA7             >                // dummy db directives used to calculate length of namec
  53+ 6BA7 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BAB             >len_NFA         defl    $ - temp_NFA
  53+ 6BAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BA7             >
  53+ 6BA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BA8 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BAC             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BAB D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BAC             >
  53+ 6BAC 94 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BAE             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BAE CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6BB1             >
  53+ 6BB1             >
  53+ 6BB1             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BB1             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BB1             >
  53+ 6BB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BB1 CE 68                        dw      EXIT
  55+ 6BB3
  56+ 6BB3              //  ______________________________________________________________________
  57+ 6BB3              //
  58+ 6BB3              // constant     n -- cccc     ( compile time )
  59+ 6BB3              //              -- n          ( run time )
  60+ 6BB3              // Constant definition.
  61+ 6BB3                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BB3             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BB3             >
  61+ 6BB3             >                // dummy db directives used to calculate length of namec
  61+ 6BB3 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6BB7 54 41 4E 54 >
  61+ 6BBB             >len_NFA         defl    $ - temp_NFA
  61+ 6BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BB3             >
  61+ 6BB3 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BB4 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6BB8 54 41 4E 54 >
  61+ 6BBC             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6BBB D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6BBC             >
  61+ 6BBC A7 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6BBE             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6BBE CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6BC1             >
  61+ 6BC1             >
  61+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6BC1             >
  61+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6BC1
  63+ 6BC1 44 76                        dw      CREATE                  // create
  64+ 6BC3 29 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6BC5 28 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6BC7              Constant_Ptr:
  67+ 6BC7
  68+ 6BC7
  69+ 6BC7 E1                           pop     hl
  70+ 6BC8
  71+ 6BC8 5E                           ld      e, (hl)
  72+ 6BC9 23                           inc     hl
  73+ 6BCA 56                           ld      d, (hl)
  74+ 6BCB D5                           push    de
  75+ 6BCC                              next
  75+ 6BCC DD E9       >                jp      (ix)
  76+ 6BCE
  77+ 6BCE              //  ______________________________________________________________________
  78+ 6BCE              //
  79+ 6BCE              // variable     n -- cccc     ( compile time )
  80+ 6BCE              //              -- a          ( run time )
  81+ 6BCE              // Variable definition, n is the initial value.
  82+ 6BCE                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6BCE             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6BCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6BCE             >
  82+ 6BCE             >                // dummy db directives used to calculate length of namec
  82+ 6BCE 56 41 52 49 >                db      "VARIABLE"
  82+ 6BD2 41 42 4C 45 >
  82+ 6BD6             >len_NFA         defl    $ - temp_NFA
  82+ 6BD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6BCE             >
  82+ 6BCE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6BCF 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6BD3 41 42 4C 45 >
  82+ 6BD7             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6BD6 C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6BD7             >
  82+ 6BD7 B3 6B       >                dw      last_NFA            // Link to previous definition Name
  82+ 6BD9             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6BD9 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6BDC             >
  82+ 6BDC             >
  82+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6BDC             >
  82+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6BDC
  84+ 6BDC BE 6B                        dw      CONSTANT                // constant
  85+ 6BDE 28 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6BE0              Variable_Ptr:
  87+ 6BE0
  88+ 6BE0
  89+ 6BE0
  90+ 6BE0
  91+ 6BE0                              next
  91+ 6BE0 DD E9       >                jp      (ix)
  92+ 6BE2
  93+ 6BE2              //  ______________________________________________________________________
  94+ 6BE2              //
  95+ 6BE2              // user         b -- cccc     ( compile time )
  96+ 6BE2              //              -- a          ( run time )
  97+ 6BE2              // User variable definition
  98+ 6BE2                              Colon_Def USER, "USER", is_normal
  98+ 6BE2             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6BE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6BE2             >
  98+ 6BE2             >                // dummy db directives used to calculate length of namec
  98+ 6BE2 55 53 45 52 >                db      "USER"
  98+ 6BE6             >len_NFA         defl    $ - temp_NFA
  98+ 6BE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6BE2             >
  98+ 6BE2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6BE3 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6BE7             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6BE6 D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6BE7             >
  98+ 6BE7 CE 6B       >                dw      last_NFA            // Link to previous definition Name
  98+ 6BE9             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6BE9 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6BEC             >
  98+ 6BEC             >
  98+ 6BEC             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6BEC             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6BEC             >
  98+ 6BEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6BEC
 100+ 6BEC 44 76                        dw      CREATE                  // create
 101+ 6BEE 3B 6E                        dw      CCOMMA                  // c,
 102+ 6BF0 28 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6BF2
 104+ 6BF2
 105+ 6BF2              User_Ptr:
 106+ 6BF2                              // via call coded in CFA
 107+ 6BF2 E1                           pop     hl
 108+ 6BF3
 109+ 6BF3 5E                           ld      e, (hl)
 110+ 6BF4 16 00                        ld      d, 0
 111+ 6BF6 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6BF9 19                           add     hl, de
 113+ 6BFA
 114+ 6BFA                              psh1
 114+ 6BFA E5          >                push    hl
 114+ 6BFB DD E9       >                jp      (ix)
 115+ 6BFD
 116+ 6BFD              //  ______________________________________________________________________
 117+ 6BFD              //
 118+ 6BFD                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6BFD             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6BFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6BFD             >
 118+ 6BFD             >                // dummy db directives used to calculate length of namec
 118+ 6BFD 30          >                db      "0"
 118+ 6BFE             >len_NFA         defl    $ - temp_NFA
 118+ 6BFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6BFD             >
 118+ 6BFD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6BFE 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6BFF             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6BFE B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6BFF             >
 118+ 6BFF E2 6B       >                dw      last_NFA            // Link to previous definition Name
 118+ 6C01             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6C01 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6C04             >
 118+ 6C04             >
 118+ 6C04             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6C04             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6C04             >
 118+ 6C04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6C04 00 00       >                dw      0
 119+ 6C06                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6C06             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6C06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C06             >
 119+ 6C06             >                // dummy db directives used to calculate length of namec
 119+ 6C06 31          >                db      "1"
 119+ 6C07             >len_NFA         defl    $ - temp_NFA
 119+ 6C07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C06             >
 119+ 6C06 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C07 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6C08             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C07 B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C08             >
 119+ 6C08 FD 6B       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C0A             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C0A CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C0D             >
 119+ 6C0D             >
 119+ 6C0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C0D             >
 119+ 6C0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C0D 01 00       >                dw      1
 120+ 6C0F                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6C0F             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6C0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C0F             >
 120+ 6C0F             >                // dummy db directives used to calculate length of namec
 120+ 6C0F 32          >                db      "2"
 120+ 6C10             >len_NFA         defl    $ - temp_NFA
 120+ 6C10             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C0F             >
 120+ 6C0F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C10 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6C11             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C10 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C11             >
 120+ 6C11 06 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C13             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C13 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C16             >
 120+ 6C16             >
 120+ 6C16             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C16             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C16             >
 120+ 6C16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C16 02 00       >                dw      2
 121+ 6C18                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6C18             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6C18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C18             >
 121+ 6C18             >                // dummy db directives used to calculate length of namec
 121+ 6C18 33          >                db      "3"
 121+ 6C19             >len_NFA         defl    $ - temp_NFA
 121+ 6C19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C18             >
 121+ 6C18 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C19 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6C1A             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C19 B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C1A             >
 121+ 6C1A 0F 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C1C             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C1C CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C1F             >
 121+ 6C1F             >
 121+ 6C1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C1F             >
 121+ 6C1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C1F 03 00       >                dw      3
 122+ 6C21                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6C21             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6C21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C21             >
 122+ 6C21             >                // dummy db directives used to calculate length of namec
 122+ 6C21 2D 31       >                db      "-1"
 122+ 6C23             >len_NFA         defl    $ - temp_NFA
 122+ 6C23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C21             >
 122+ 6C21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C22 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6C24             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C23 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C24             >
 122+ 6C24 18 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C26             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C26 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C29             >
 122+ 6C29             >
 122+ 6C29             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C29             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C29             >
 122+ 6C29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C29 FF FF       >                dw      -1
 123+ 6C2B                              Constant_Def BL         ,   "BL"    , $20
 123+ 6C2B             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6C2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C2B             >
 123+ 6C2B             >                // dummy db directives used to calculate length of namec
 123+ 6C2B 42 4C       >                db      "BL"
 123+ 6C2D             >len_NFA         defl    $ - temp_NFA
 123+ 6C2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C2B             >
 123+ 6C2B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C2C 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6C2E             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C2D CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C2E             >
 123+ 6C2E 21 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C30             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C30 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C33             >
 123+ 6C33             >
 123+ 6C33             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C33             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C33             >
 123+ 6C33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C33 20 00       >                dw      $20
 124+ 6C35                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6C35             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C35             >
 124+ 6C35             >                // dummy db directives used to calculate length of namec
 124+ 6C35 43 2F 4C    >                db      "C/L"
 124+ 6C38             >len_NFA         defl    $ - temp_NFA
 124+ 6C38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C35             >
 124+ 6C35 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C36 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6C39             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C38 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C39             >
 124+ 6C39 2B 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C3B             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C3B CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C3E             >
 124+ 6C3E             >
 124+ 6C3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C3E             >
 124+ 6C3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C3E 40 00       >                dw      64
 125+ 6C40                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6C40             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6C40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C40             >
 125+ 6C40             >                // dummy db directives used to calculate length of namec
 125+ 6C40 42 2F 42 55 >                db      "B/BUF"
 125+ 6C44 46          >
 125+ 6C45             >len_NFA         defl    $ - temp_NFA
 125+ 6C45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C40             >
 125+ 6C40 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C41 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6C45 46          >
 125+ 6C46             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C45 C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C46             >
 125+ 6C46 35 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C48             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C48 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C4B             >
 125+ 6C4B             >
 125+ 6C4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C4B             >
 125+ 6C4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C4B 00 02       >                dw      512
 126+ 6C4D                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6C4D             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6C4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C4D             >
 126+ 6C4D             >                // dummy db directives used to calculate length of namec
 126+ 6C4D 42 2F 53 43 >                db      "B/SCR"
 126+ 6C51 52          >
 126+ 6C52             >len_NFA         defl    $ - temp_NFA
 126+ 6C52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C4D             >
 126+ 6C4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C4E 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6C52 52          >
 126+ 6C53             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C52 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C53             >
 126+ 6C53 40 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C55             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C55 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C58             >
 126+ 6C58             >
 126+ 6C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C58             >
 126+ 6C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C58 02 00       >                dw      2
 127+ 6C5A                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6C5A             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C5A             >
 127+ 6C5A             >                // dummy db directives used to calculate length of namec
 127+ 6C5A 4C 2F 53 43 >                db      "L/SCR"
 127+ 6C5E 52          >
 127+ 6C5F             >len_NFA         defl    $ - temp_NFA
 127+ 6C5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C5A             >
 127+ 6C5A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C5B 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6C5F 52          >
 127+ 6C60             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C5F D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C60             >
 127+ 6C60 4D 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C62             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C62 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C65             >
 127+ 6C65             >
 127+ 6C65             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C65             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C65             >
 127+ 6C65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C65 10 00       >                dw      16
 128+ 6C67
 129+ 6C67              //  ______________________________________________________________________
 130+ 6C67              //
 131+ 6C67              // +origin         --
 132+ 6C67              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6C67              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6C67              //              dw      PLUS                    // +
 135+ 6C67              //              dw      EXIT                    // ;
 136+ 6C67                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6C67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6C67             >
 136+ 6C67             >                // dummy db directives used to calculate length of namec
 136+ 6C67 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6C6B 47 49 4E    >
 136+ 6C6E             >len_NFA         defl    $ - temp_NFA
 136+ 6C6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6C67             >
 136+ 6C67 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6C68 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6C6C 47 49 4E    >
 136+ 6C6F             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6C6E CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6C6F             >
 136+ 6C6F 5A 6C       >                dw      last_NFA            // Link to previous definition Name
 136+ 6C71             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6C71 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 136+ 6C71 ~           >
 136+ 6C71 ~           >
 136+ 6C71             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6C71             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6C71             >
 136+ 6C71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6C71 E1                           pop     hl
 138+ 6C72 21 66 63                     ld      hl, Cold_origin
 139+ 6C75 19                           add     hl, de
 140+ 6C76 E5                           push    hl
 141+ 6C77                              next
 141+ 6C77 DD E9       >                jp      (ix)
 142+ 6C79
 143+ 6C79
 144+ 6C79              //  ______________________________________________________________________
 145+ 6C79              //
 146+ 6C79                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6C79             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6C79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6C79             >
 146+ 6C79             >                // dummy db directives used to calculate length of namec
 146+ 6C79 28 4E 45 58 >                db      "(NEXT)"
 146+ 6C7D 54 29       >
 146+ 6C7F             >len_NFA         defl    $ - temp_NFA
 146+ 6C7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6C79             >
 146+ 6C79 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6C7A 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6C7E 54 29       >
 146+ 6C80             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6C7F A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6C80             >
 146+ 6C80 67 6C       >                dw      last_NFA            // Link to previous definition Name
 146+ 6C82             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6C82 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6C85             >
 146+ 6C85             >
 146+ 6C85             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6C85             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6C85             >
 146+ 6C85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6C85 98 63       >                dw      Next_Ptr
 147+ 6C87
 148+ 6C87              //  ______________________________________________________________________
 149+ 6C87              //
 150+ 6C87
 151+ 6C87                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6C87             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6C87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6C87             >
 151+ 6C87             >                // dummy db directives used to calculate length of namec
 151+ 6C87 53 30       >                db      "S0"
 151+ 6C89             >len_NFA         defl    $ - temp_NFA
 151+ 6C89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6C87             >
 151+ 6C87 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6C88 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6C8A             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6C89 B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6C8A             >
 151+ 6C8A 79 6C       >                dw      last_NFA            // Link to previous definition Name
 151+ 6C8C             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6C8C CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6C8F             >
 151+ 6C8F             >
 151+ 6C8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6C8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6C8F             >
 151+ 6C8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6C8F 06          >                db      06
 152+ 6C90                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6C90             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6C90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6C90             >
 152+ 6C90             >                // dummy db directives used to calculate length of namec
 152+ 6C90 52 30       >                db      "R0"
 152+ 6C92             >len_NFA         defl    $ - temp_NFA
 152+ 6C92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6C90             >
 152+ 6C90 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6C91 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6C93             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6C92 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6C93             >
 152+ 6C93 87 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6C95             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6C95 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6C98             >
 152+ 6C98             >
 152+ 6C98             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6C98             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6C98             >
 152+ 6C98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6C98 08          >                db      08
 153+ 6C99                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6C99             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6C99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6C99             >
 153+ 6C99             >                // dummy db directives used to calculate length of namec
 153+ 6C99 54 49 42    >                db      "TIB"
 153+ 6C9C             >len_NFA         defl    $ - temp_NFA
 153+ 6C9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6C99             >
 153+ 6C99 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6C9A 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6C9D             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6C9C C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6C9D             >
 153+ 6C9D 90 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6C9F             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6C9F CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CA2             >
 153+ 6CA2             >
 153+ 6CA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CA2             >
 153+ 6CA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CA2 0A          >                db      10
 154+ 6CA3                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6CA3             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6CA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CA3             >
 154+ 6CA3             >                // dummy db directives used to calculate length of namec
 154+ 6CA3 57 49 44 54 >                db      "WIDTH"
 154+ 6CA7 48          >
 154+ 6CA8             >len_NFA         defl    $ - temp_NFA
 154+ 6CA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CA3             >
 154+ 6CA3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CA4 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6CA8 48          >
 154+ 6CA9             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CA8 C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CA9             >
 154+ 6CA9 99 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CAB             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CAB CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CAE             >
 154+ 6CAE             >
 154+ 6CAE             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CAE             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CAE             >
 154+ 6CAE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CAE 0C          >                db      12
 155+ 6CAF                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6CAF             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6CAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CAF             >
 155+ 6CAF             >                // dummy db directives used to calculate length of namec
 155+ 6CAF 57 41 52 4E >                db      "WARNING"
 155+ 6CB3 49 4E 47    >
 155+ 6CB6             >len_NFA         defl    $ - temp_NFA
 155+ 6CB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CAF             >
 155+ 6CAF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CB0 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6CB4 49 4E 47    >
 155+ 6CB7             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CB6 C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CB7             >
 155+ 6CB7 A3 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CB9             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CB9 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CBC             >
 155+ 6CBC             >
 155+ 6CBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CBC             >
 155+ 6CBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CBC 0E          >                db      14
 156+ 6CBD                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6CBD             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6CBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CBD             >
 156+ 6CBD             >                // dummy db directives used to calculate length of namec
 156+ 6CBD 46 45 4E 43 >                db      "FENCE"
 156+ 6CC1 45          >
 156+ 6CC2             >len_NFA         defl    $ - temp_NFA
 156+ 6CC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CBD             >
 156+ 6CBD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CBE 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6CC2 45          >
 156+ 6CC3             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CC2 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CC3             >
 156+ 6CC3 AF 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CC5             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CC5 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CC8             >
 156+ 6CC8             >
 156+ 6CC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CC8             >
 156+ 6CC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CC8 10          >                db      16
 157+ 6CC9                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6CC9             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6CC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CC9             >
 157+ 6CC9             >                // dummy db directives used to calculate length of namec
 157+ 6CC9 44 50       >                db      "DP"
 157+ 6CCB             >len_NFA         defl    $ - temp_NFA
 157+ 6CCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CC9             >
 157+ 6CC9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CCA 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6CCC             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6CCB D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6CCC             >
 157+ 6CCC BD 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6CCE             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6CCE CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6CD1             >
 157+ 6CD1             >
 157+ 6CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6CD1             >
 157+ 6CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6CD1 12          >                db      18
 158+ 6CD2                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6CD2             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6CD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6CD2             >
 158+ 6CD2             >                // dummy db directives used to calculate length of namec
 158+ 6CD2 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6CD6 4C 49 4E 4B >
 158+ 6CDA             >len_NFA         defl    $ - temp_NFA
 158+ 6CDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6CD2             >
 158+ 6CD2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6CD3 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6CD7 4C 49 4E 4B >
 158+ 6CDB             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6CDA CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6CDB             >
 158+ 6CDB C9 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6CDD             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6CDD CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6CE0             >
 158+ 6CE0             >
 158+ 6CE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6CE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6CE0             >
 158+ 6CE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6CE0 14          >                db      20
 159+ 6CE1                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6CE1             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6CE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6CE1             >
 159+ 6CE1             >                // dummy db directives used to calculate length of namec
 159+ 6CE1 46 49 52 53 >                db      "FIRST"
 159+ 6CE5 54          >
 159+ 6CE6             >len_NFA         defl    $ - temp_NFA
 159+ 6CE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6CE1             >
 159+ 6CE1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6CE2 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6CE6 54          >
 159+ 6CE7             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6CE6 D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6CE7             >
 159+ 6CE7 D2 6C       >                dw      last_NFA            // Link to previous definition Name
 159+ 6CE9             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6CE9 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6CEC             >
 159+ 6CEC             >
 159+ 6CEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6CEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6CEC             >
 159+ 6CEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6CEC 16          >                db      22
 160+ 6CED                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6CED             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6CED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6CED             >
 160+ 6CED             >                // dummy db directives used to calculate length of namec
 160+ 6CED 4C 49 4D 49 >                db      "LIMIT"
 160+ 6CF1 54          >
 160+ 6CF2             >len_NFA         defl    $ - temp_NFA
 160+ 6CF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6CED             >
 160+ 6CED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6CEE 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6CF2 54          >
 160+ 6CF3             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6CF2 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6CF3             >
 160+ 6CF3 E1 6C       >                dw      last_NFA            // Link to previous definition Name
 160+ 6CF5             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6CF5 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6CF8             >
 160+ 6CF8             >
 160+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6CF8             >
 160+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6CF8 18          >                db      24
 161+ 6CF9                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6CF9             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6CF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6CF9             >
 161+ 6CF9             >                // dummy db directives used to calculate length of namec
 161+ 6CF9 45 58 50    >                db      "EXP"
 161+ 6CFC             >len_NFA         defl    $ - temp_NFA
 161+ 6CFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6CF9             >
 161+ 6CF9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6CFA 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6CFD             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6CFC D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6CFD             >
 161+ 6CFD ED 6C       >                dw      last_NFA            // Link to previous definition Name
 161+ 6CFF             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6CFF CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D02             >
 161+ 6D02             >
 161+ 6D02             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D02             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D02             >
 161+ 6D02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D02 1A          >                db      26
 162+ 6D03                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6D03             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6D03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D03             >
 162+ 6D03             >                // dummy db directives used to calculate length of namec
 162+ 6D03 4E 4D 4F 44 >                db      "NMODE"
 162+ 6D07 45          >
 162+ 6D08             >len_NFA         defl    $ - temp_NFA
 162+ 6D08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D03             >
 162+ 6D03 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D04 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6D08 45          >
 162+ 6D09             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D08 C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D09             >
 162+ 6D09 F9 6C       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D0B             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D0B CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D0E             >
 162+ 6D0E             >
 162+ 6D0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D0E             >
 162+ 6D0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D0E 1C          >                db      28
 163+ 6D0F                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6D0F             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6D0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D0F             >
 163+ 6D0F             >                // dummy db directives used to calculate length of namec
 163+ 6D0F 42 4C 4B    >                db      "BLK"
 163+ 6D12             >len_NFA         defl    $ - temp_NFA
 163+ 6D12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D0F             >
 163+ 6D0F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D10 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6D13             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D12 CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D13             >
 163+ 6D13 03 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D15             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D15 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D18             >
 163+ 6D18             >
 163+ 6D18             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D18             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D18             >
 163+ 6D18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D18 1E          >                db      30
 164+ 6D19                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6D19             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6D19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D19             >
 164+ 6D19             >                // dummy db directives used to calculate length of namec
 164+ 6D19 3E 49 4E    >                db      ">IN"
 164+ 6D1C             >len_NFA         defl    $ - temp_NFA
 164+ 6D1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D19             >
 164+ 6D19 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D1A 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6D1D             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D1C CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D1D             >
 164+ 6D1D 0F 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D1F             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D1F CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D22             >
 164+ 6D22             >
 164+ 6D22             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D22             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D22             >
 164+ 6D22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D22 20          >                db      32
 165+ 6D23                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6D23             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6D23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D23             >
 165+ 6D23             >                // dummy db directives used to calculate length of namec
 165+ 6D23 4F 55 54    >                db      "OUT"
 165+ 6D26             >len_NFA         defl    $ - temp_NFA
 165+ 6D26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D23             >
 165+ 6D23 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D24 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6D27             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D26 D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D27             >
 165+ 6D27 19 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D29             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D29 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D2C             >
 165+ 6D2C             >
 165+ 6D2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D2C             >
 165+ 6D2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D2C 22          >                db      34
 166+ 6D2D                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6D2D             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6D2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D2D             >
 166+ 6D2D             >                // dummy db directives used to calculate length of namec
 166+ 6D2D 53 43 52    >                db      "SCR"
 166+ 6D30             >len_NFA         defl    $ - temp_NFA
 166+ 6D30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D2D             >
 166+ 6D2D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D2E 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6D31             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D30 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D31             >
 166+ 6D31 23 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D33             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D33 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D36             >
 166+ 6D36             >
 166+ 6D36             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D36             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D36             >
 166+ 6D36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D36 24          >                db      36
 167+ 6D37                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6D37             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6D37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D37             >
 167+ 6D37             >                // dummy db directives used to calculate length of namec
 167+ 6D37 4F 46 46 53 >                db      "OFFSET"
 167+ 6D3B 45 54       >
 167+ 6D3D             >len_NFA         defl    $ - temp_NFA
 167+ 6D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D37             >
 167+ 6D37 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D38 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6D3C 45 54       >
 167+ 6D3E             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D3D D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D3E             >
 167+ 6D3E 2D 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D40             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D40 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D43             >
 167+ 6D43             >
 167+ 6D43             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D43             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D43             >
 167+ 6D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D43 26          >                db      38
 168+ 6D44                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6D44             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6D44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D44             >
 168+ 6D44             >                // dummy db directives used to calculate length of namec
 168+ 6D44 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6D48 45 58 54    >
 168+ 6D4B             >len_NFA         defl    $ - temp_NFA
 168+ 6D4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D44             >
 168+ 6D44 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D45 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6D49 45 58 54    >
 168+ 6D4C             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D4B D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D4C             >
 168+ 6D4C 37 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D4E             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D4E CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D51             >
 168+ 6D51             >
 168+ 6D51             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D51             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D51             >
 168+ 6D51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D51 28          >                db      40
 169+ 6D52                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6D52             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6D52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D52             >
 169+ 6D52             >                // dummy db directives used to calculate length of namec
 169+ 6D52 43 55 52 52 >                db      "CURRENT"
 169+ 6D56 45 4E 54    >
 169+ 6D59             >len_NFA         defl    $ - temp_NFA
 169+ 6D59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D52             >
 169+ 6D52 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D53 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6D57 45 4E 54    >
 169+ 6D5A             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D59 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D5A             >
 169+ 6D5A 44 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D5C             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D5C CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D5F             >
 169+ 6D5F             >
 169+ 6D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D5F             >
 169+ 6D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D5F 2A          >                db      42
 170+ 6D60                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6D60             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6D60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D60             >
 170+ 6D60             >                // dummy db directives used to calculate length of namec
 170+ 6D60 53 54 41 54 >                db      "STATE"
 170+ 6D64 45          >
 170+ 6D65             >len_NFA         defl    $ - temp_NFA
 170+ 6D65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D60             >
 170+ 6D60 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D61 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6D65 45          >
 170+ 6D66             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D65 C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D66             >
 170+ 6D66 52 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D68             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D68 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D6B             >
 170+ 6D6B             >
 170+ 6D6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D6B             >
 170+ 6D6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D6B 2C          >                db      44
 171+ 6D6C                              User_Def BASE       , "BASE"      , 46 //
 171+ 6D6C             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6D6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D6C             >
 171+ 6D6C             >                // dummy db directives used to calculate length of namec
 171+ 6D6C 42 41 53 45 >                db      "BASE"
 171+ 6D70             >len_NFA         defl    $ - temp_NFA
 171+ 6D70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D6C             >
 171+ 6D6C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D6D 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6D71             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6D70 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6D71             >
 171+ 6D71 60 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6D73             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6D73 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6D76             >
 171+ 6D76             >
 171+ 6D76             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6D76             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6D76             >
 171+ 6D76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6D76 2E          >                db      46
 172+ 6D77                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6D77             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6D77             >
 172+ 6D77             >                // dummy db directives used to calculate length of namec
 172+ 6D77 44 50 4C    >                db      "DPL"
 172+ 6D7A             >len_NFA         defl    $ - temp_NFA
 172+ 6D7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6D77             >
 172+ 6D77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6D78 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6D7B             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6D7A CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6D7B             >
 172+ 6D7B 6C 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6D7D             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6D7D CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6D80             >
 172+ 6D80             >
 172+ 6D80             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6D80             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6D80             >
 172+ 6D80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6D80 30          >                db      48
 173+ 6D81                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6D81             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6D81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6D81             >
 173+ 6D81             >                // dummy db directives used to calculate length of namec
 173+ 6D81 46 4C 44    >                db      "FLD"
 173+ 6D84             >len_NFA         defl    $ - temp_NFA
 173+ 6D84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6D81             >
 173+ 6D81 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6D82 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6D85             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6D84 C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6D85             >
 173+ 6D85 77 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6D87             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6D87 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6D8A             >
 173+ 6D8A             >
 173+ 6D8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6D8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6D8A             >
 173+ 6D8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6D8A 32          >                db      50
 174+ 6D8B                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6D8B             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6D8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6D8B             >
 174+ 6D8B             >                // dummy db directives used to calculate length of namec
 174+ 6D8B 43 53 50    >                db      "CSP"
 174+ 6D8E             >len_NFA         defl    $ - temp_NFA
 174+ 6D8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6D8B             >
 174+ 6D8B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6D8C 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6D8F             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6D8E D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6D8F             >
 174+ 6D8F 81 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6D91             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6D91 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6D94             >
 174+ 6D94             >
 174+ 6D94             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6D94             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6D94             >
 174+ 6D94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6D94 34          >                db      52
 175+ 6D95                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6D95             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6D95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6D95             >
 175+ 6D95             >                // dummy db directives used to calculate length of namec
 175+ 6D95 52 23       >                db      "R#"
 175+ 6D97             >len_NFA         defl    $ - temp_NFA
 175+ 6D97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6D95             >
 175+ 6D95 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6D96 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6D98             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6D97 A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6D98             >
 175+ 6D98 8B 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6D9A             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6D9A CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6D9D             >
 175+ 6D9D             >
 175+ 6D9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6D9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6D9D             >
 175+ 6D9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6D9D 36          >                db      54
 176+ 6D9E                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6D9E             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6D9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6D9E             >
 176+ 6D9E             >                // dummy db directives used to calculate length of namec
 176+ 6D9E 48 4C 44    >                db      "HLD"
 176+ 6DA1             >len_NFA         defl    $ - temp_NFA
 176+ 6DA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6D9E             >
 176+ 6D9E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6D9F 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6DA2             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DA1 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DA2             >
 176+ 6DA2 95 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DA4             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DA4 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DA7             >
 176+ 6DA7             >
 176+ 6DA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DA7             >
 176+ 6DA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DA7 38          >                db      56
 177+ 6DA8                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6DA8             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6DA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DA8             >
 177+ 6DA8             >                // dummy db directives used to calculate length of namec
 177+ 6DA8 55 53 45    >                db      "USE"
 177+ 6DAB             >len_NFA         defl    $ - temp_NFA
 177+ 6DAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DA8             >
 177+ 6DA8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DA9 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6DAC             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DAB C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DAC             >
 177+ 6DAC 9E 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DAE             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DAE CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DB1             >
 177+ 6DB1             >
 177+ 6DB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DB1             >
 177+ 6DB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DB1 3A          >                db      58
 178+ 6DB2                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6DB2             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6DB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DB2             >
 178+ 6DB2             >                // dummy db directives used to calculate length of namec
 178+ 6DB2 50 52 45 56 >                db      "PREV"
 178+ 6DB6             >len_NFA         defl    $ - temp_NFA
 178+ 6DB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DB2             >
 178+ 6DB2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DB3 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6DB7             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DB6 D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DB7             >
 178+ 6DB7 A8 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DB9             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DB9 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DBC             >
 178+ 6DBC             >
 178+ 6DBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DBC             >
 178+ 6DBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DBC 3C          >                db      60
 179+ 6DBD                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6DBD             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6DBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DBD             >
 179+ 6DBD             >                // dummy db directives used to calculate length of namec
 179+ 6DBD 4C 50       >                db      "LP"
 179+ 6DBF             >len_NFA         defl    $ - temp_NFA
 179+ 6DBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DBD             >
 179+ 6DBD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DBE 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6DC0             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DBF D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DC0             >
 179+ 6DC0 B2 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DC2             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DC2 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DC5             >
 179+ 6DC5             >
 179+ 6DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DC5             >
 179+ 6DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DC5 3E          >                db      62
 180+ 6DC6                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6DC6             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6DC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DC6             >
 180+ 6DC6             >                // dummy db directives used to calculate length of namec
 180+ 6DC6 50 4C 41 43 >                db      "PLACE"
 180+ 6DCA 45          >
 180+ 6DCB             >len_NFA         defl    $ - temp_NFA
 180+ 6DCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DC6             >
 180+ 6DC6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DC7 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6DCB 45          >
 180+ 6DCC             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6DCB C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6DCC             >
 180+ 6DCC BD 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6DCE             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6DCE CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6DD1             >
 180+ 6DD1             >
 180+ 6DD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6DD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6DD1             >
 180+ 6DD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6DD1 40          >                db      64
 181+ 6DD2                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6DD2             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6DD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6DD2             >
 181+ 6DD2             >                // dummy db directives used to calculate length of namec
 181+ 6DD2 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6DD6 43 45 2D 49 >
 181+ 6DDA 44          >
 181+ 6DDB             >len_NFA         defl    $ - temp_NFA
 181+ 6DDB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6DD2             >
 181+ 6DD2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6DD3 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6DD7 43 45 2D 49 >
 181+ 6DDB 44          >
 181+ 6DDC             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6DDB C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6DDC             >
 181+ 6DDC C6 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6DDE             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6DDE CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6DE1             >
 181+ 6DE1             >
 181+ 6DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6DE1             >
 181+ 6DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6DE1 42          >                db      66
 182+ 6DE2                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6DE2             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6DE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6DE2             >
 182+ 6DE2             >                // dummy db directives used to calculate length of namec
 182+ 6DE2 53 50 41 4E >                db      "SPAN"
 182+ 6DE6             >len_NFA         defl    $ - temp_NFA
 182+ 6DE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6DE2             >
 182+ 6DE2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6DE3 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6DE7             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6DE6 CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6DE7             >
 182+ 6DE7 D2 6D       >                dw      last_NFA            // Link to previous definition Name
 182+ 6DE9             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6DE9 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6DEC             >
 182+ 6DEC             >
 182+ 6DEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6DEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6DEC             >
 182+ 6DEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6DEC 44          >                db      68
 183+ 6DED                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6DED             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6DED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6DED             >
 183+ 6DED             >                // dummy db directives used to calculate length of namec
 183+ 6DED 48 41 4E 44 >                db      "HANDLER"
 183+ 6DF1 4C 45 52    >
 183+ 6DF4             >len_NFA         defl    $ - temp_NFA
 183+ 6DF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6DED             >
 183+ 6DED 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6DEE 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6DF2 4C 45 52    >
 183+ 6DF5             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6DF4 D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6DF5             >
 183+ 6DF5 E2 6D       >                dw      last_NFA            // Link to previous definition Name
 183+ 6DF7             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6DF7 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6DFA             >
 183+ 6DFA             >
 183+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6DFA             >
 183+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6DFA 46          >                db      70
 184+ 6DFB                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6DFB             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6DFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6DFB             >
 184+ 6DFB             >                // dummy db directives used to calculate length of namec
 184+ 6DFB 48 50       >                db      "HP"
 184+ 6DFD             >len_NFA         defl    $ - temp_NFA
 184+ 6DFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6DFB             >
 184+ 6DFB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6DFC 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6DFE             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6DFD D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6DFE             >
 184+ 6DFE ED 6D       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E00             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E00 CD F2 6B    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E03             >
 184+ 6E03             >
 184+ 6E03             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E03             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E03             >
 184+ 6E03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E03 48          >                db      72
 185+ 6E04
 186+ 6E04              //  ______________________________________________________________________
 187+ 6E04              //
 188+ 6E04              // here         -- a
 189+ 6E04                              Colon_Def HERE, "HERE", is_normal
 189+ 6E04             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6E04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E04             >
 189+ 6E04             >                // dummy db directives used to calculate length of namec
 189+ 6E04 48 45 52 45 >                db      "HERE"
 189+ 6E08             >len_NFA         defl    $ - temp_NFA
 189+ 6E08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E04             >
 189+ 6E04 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E05 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6E09             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6E08 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6E09             >
 189+ 6E09 FB 6D       >                dw      last_NFA            // Link to previous definition Name
 189+ 6E0B             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6E0B CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6E0E             >
 189+ 6E0E             >
 189+ 6E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6E0E             >
 189+ 6E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6E0E CE 6C B2 6A                  dw      DP, FETCH               // dp @
 191+ 6E12 CE 68                        dw      EXIT                    // ;
 192+ 6E14
 193+ 6E14              //  ______________________________________________________________________
 194+ 6E14              //
 195+ 6E14              // allot        n --
 196+ 6E14                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6E14             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6E14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6E14             >
 196+ 6E14             >                // dummy db directives used to calculate length of namec
 196+ 6E14 41 4C 4C 4F >                db      "ALLOT"
 196+ 6E18 54          >
 196+ 6E19             >len_NFA         defl    $ - temp_NFA
 196+ 6E19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6E14             >
 196+ 6E14 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6E15 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6E19 54          >
 196+ 6E1A             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6E19 D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6E1A             >
 196+ 6E1A 04 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6E1C             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6E1C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6E1F             >
 196+ 6E1F             >
 196+ 6E1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6E1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6E1F             >
 196+ 6E1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6E1F CE 6C 93 6A                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6E23 CE 68                        dw      EXIT                    // ;
 199+ 6E25
 200+ 6E25              //  ______________________________________________________________________
 201+ 6E25              //
 202+ 6E25              // comma        n --
 203+ 6E25                              Colon_Def COMMA, ",", is_normal
 203+ 6E25             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6E25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6E25             >
 203+ 6E25             >                // dummy db directives used to calculate length of namec
 203+ 6E25 2C          >                db      ","
 203+ 6E26             >len_NFA         defl    $ - temp_NFA
 203+ 6E26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6E25             >
 203+ 6E25 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6E26 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6E27             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6E26 AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6E27             >
 203+ 6E27 14 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6E29             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6E29 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6E2C             >
 203+ 6E2C             >
 203+ 6E2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6E2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6E2C             >
 203+ 6E2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6E2C 0B 6E BD 6A                  dw      HERE, STORE             // here !
 205+ 6E30 13 6C 1C 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6E34 CE 68                        dw      EXIT                    // ;
 207+ 6E36
 208+ 6E36              //  ______________________________________________________________________
 209+ 6E36              //
 210+ 6E36              // ccomma       c --
 211+ 6E36                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6E36             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6E36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6E36             >
 211+ 6E36             >                // dummy db directives used to calculate length of namec
 211+ 6E36 43 2C       >                db      "C,"
 211+ 6E38             >len_NFA         defl    $ - temp_NFA
 211+ 6E38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6E36             >
 211+ 6E36 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6E37 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6E39             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6E38 AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6E39             >
 211+ 6E39 25 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6E3B             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6E3B CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6E3E             >
 211+ 6E3E             >
 211+ 6E3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6E3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6E3E             >
 211+ 6E3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6E3E 0B 6E D5 6A                  dw      HERE, CSTORE            // here c!
 213+ 6E42 0A 6C 1C 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6E46 CE 68                        dw      EXIT                    // ;
 215+ 6E48
 216+ 6E48              //  ______________________________________________________________________
 217+ 6E48              //
 218+ 6E48              // s>d          n -- d
 219+ 6E48              // converts a single precision integer in a double precision
 220+ 6E48                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6E48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6E48             >
 220+ 6E48             >                // dummy db directives used to calculate length of namec
 220+ 6E48 53 3E 44    >                db      "S>D"
 220+ 6E4B             >len_NFA         defl    $ - temp_NFA
 220+ 6E4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6E48             >
 220+ 6E48 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6E49 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6E4C             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6E4B C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6E4C             >
 220+ 6E4C 36 6E       >                dw      last_NFA            // Link to previous definition Name
 220+ 6E4E             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6E4E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 6E4E ~           >
 220+ 6E4E ~           >
 220+ 6E4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6E4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6E4E             >
 220+ 6E4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6E4E D1                           pop     de
 222+ 6E4F 21 00 00                     ld      hl, 0
 223+ 6E52 7A                           ld      a, d
 224+ 6E53 E6 80                        and     $80
 225+ 6E55 28 01                        jr      z, S_to_D_Skip
 226+ 6E57 2B                           dec     hl                  // $FFFF
 227+ 6E58              S_to_D_Skip:
 228+ 6E58 D5                           push    de
 229+ 6E59 E5                           push    hl
 230+ 6E5A                              next
 230+ 6E5A DD E9       >                jp      (ix)
 231+ 6E5C
 232+ 6E5C              //  ______________________________________________________________________
 233+ 6E5C              //
 234+ 6E5C              // -            n1 n2 -- n3
 235+ 6E5C              // subtraction
 236+ 6E5C                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6E5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6E5C             >
 236+ 6E5C             >                // dummy db directives used to calculate length of namec
 236+ 6E5C 2D          >                db      "-"
 236+ 6E5D             >len_NFA         defl    $ - temp_NFA
 236+ 6E5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6E5C             >
 236+ 6E5C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6E5D 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6E5E             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6E5D AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6E5E             >
 236+ 6E5E 48 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6E60             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6E60 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236+ 6E60 ~           >
 236+ 6E60 ~           >
 236+ 6E60             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6E60             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6E60             >
 236+ 6E60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6E60 D1                           pop     de
 238+ 6E61 E1                           pop     hl
 239+ 6E62 A7                           and     a
 240+ 6E63 ED 52                        sbc     hl, de
 241+ 6E65
 242+ 6E65                              psh1
 242+ 6E65 E5          >                push    hl
 242+ 6E66 DD E9       >                jp      (ix)
 243+ 6E68
 244+ 6E68              //  ______________________________________________________________________
 245+ 6E68              //
 246+ 6E68              // =            n1 n2 -- n3
 247+ 6E68              // equals
 248+ 6E68                              Colon_Def EQUALS, "=", is_normal
 248+ 6E68             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6E68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6E68             >
 248+ 6E68             >                // dummy db directives used to calculate length of namec
 248+ 6E68 3D          >                db      "="
 248+ 6E69             >len_NFA         defl    $ - temp_NFA
 248+ 6E69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6E68             >
 248+ 6E68 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6E69 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6E6A             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6E69 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6E6A             >
 248+ 6E6A 5C 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6E6C             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6E6C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6E6F             >
 248+ 6E6F             >
 248+ 6E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6E6F             >
 248+ 6E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6E6F 60 6E 2B 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6E73 CE 68                        dw      EXIT                    // ;
 251+ 6E75
 252+ 6E75              //  ______________________________________________________________________
 253+ 6E75              //
 254+ 6E75              // u<           u1 u2 -- u3
 255+ 6E75              // unsigned less-than
 256+ 6E75                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6E75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6E75             >
 256+ 6E75             >                // dummy db directives used to calculate length of namec
 256+ 6E75 55 3C       >                db      "U<"
 256+ 6E77             >len_NFA         defl    $ - temp_NFA
 256+ 6E77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6E75             >
 256+ 6E75 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6E76 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6E78             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6E77 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6E78             >
 256+ 6E78 68 6E       >                dw      last_NFA            // Link to previous definition Name
 256+ 6E7A             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6E7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 256+ 6E7A ~           >
 256+ 6E7A ~           >
 256+ 6E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6E7A             >
 256+ 6E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6E7A D1                           pop     de
 258+ 6E7B E1                           pop     hl
 259+ 6E7C A7                           and     a
 260+ 6E7D ED 52                        sbc     hl, de
 261+ 6E7F 21 FF FF                     ld      hl, -1
 262+ 6E82 38 01                        jr      c, ULess_Skip
 263+ 6E84 23                               inc     hl
 264+ 6E85              ULess_Skip:
 265+ 6E85
 266+ 6E85                              psh1
 266+ 6E85 E5          >                push    hl
 266+ 6E86 DD E9       >                jp      (ix)
 267+ 6E88
 268+ 6E88              //  ______________________________________________________________________
 269+ 6E88              //
 270+ 6E88              // <           n1 n2 -- n3
 271+ 6E88              // less-than
 272+ 6E88                              New_Def LESS, "<", is_code, is_normal
 272+ 6E88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6E88             >
 272+ 6E88             >                // dummy db directives used to calculate length of namec
 272+ 6E88 3C          >                db      "<"
 272+ 6E89             >len_NFA         defl    $ - temp_NFA
 272+ 6E89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6E88             >
 272+ 6E88 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6E89 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6E8A             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6E89 BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6E8A             >
 272+ 6E8A 75 6E       >                dw      last_NFA            // Link to previous definition Name
 272+ 6E8C             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6E8C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 272+ 6E8C ~           >
 272+ 6E8C ~           >
 272+ 6E8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6E8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6E8C             >
 272+ 6E8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6E8C D1                           pop     de
 274+ 6E8D E1                           pop     hl
 275+ 6E8E 7C                           ld      a, h
 276+ 6E8F EE 80                        xor     $80
 277+ 6E91 67                           ld      h, a
 278+ 6E92 7A                           ld      a, d
 279+ 6E93 EE 80                        xor     $80
 280+ 6E95 57                           ld      d, a
 281+ 6E96 A7                           and     a
 282+ 6E97 ED 52                        sbc     hl, de
 283+ 6E99 21 FF FF                     ld      hl, -1
 284+ 6E9C 38 01                        jr      c, Less_Skip
 285+ 6E9E 23                               inc     hl
 286+ 6E9F              Less_Skip:
 287+ 6E9F
 288+ 6E9F                              psh1
 288+ 6E9F E5          >                push    hl
 288+ 6EA0 DD E9       >                jp      (ix)
 289+ 6EA2
 290+ 6EA2              //  ______________________________________________________________________
 291+ 6EA2              //
 292+ 6EA2              // >            n1 n2 -- n3
 293+ 6EA2              // greater than
 294+ 6EA2                              Colon_Def GREATER, ">", is_normal
 294+ 6EA2             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 294+ 6EA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6EA2             >
 294+ 6EA2             >                // dummy db directives used to calculate length of namec
 294+ 6EA2 3E          >                db      ">"
 294+ 6EA3             >len_NFA         defl    $ - temp_NFA
 294+ 6EA3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6EA2             >
 294+ 6EA2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6EA3 3E          >                db      ">"               // name string in 7-bit ascii, but
 294+ 6EA4             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6EA3 BE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6EA4             >
 294+ 6EA4 88 6E       >                dw      last_NFA            // Link to previous definition Name
 294+ 6EA6             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6EA6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6EA9             >
 294+ 6EA9             >
 294+ 6EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6EA9             >
 294+ 6EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6EA9 26 6A 8C 6E                  dw      SWAP, LESS              // swap <
 296+ 6EAD CE 68                        dw      EXIT                    // ;
 297+ 6EAF              //  ______________________________________________________________________
 298+ 6EAF              //
 299+ 6EAF              // min          n1 n2 -- n3
 300+ 6EAF              // minimum between n1 and n2
 301+ 6EAF                              Colon_Def MIN, "MIN" , is_normal
 301+ 6EAF             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 301+ 6EAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6EAF             >
 301+ 6EAF             >                // dummy db directives used to calculate length of namec
 301+ 6EAF 4D 49 4E    >                db      "MIN"
 301+ 6EB2             >len_NFA         defl    $ - temp_NFA
 301+ 6EB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6EAF             >
 301+ 6EAF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6EB0 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 301+ 6EB3             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6EB2 CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 6EB3             >
 301+ 6EB3 A2 6E       >                dw      last_NFA            // Link to previous definition Name
 301+ 6EB5             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6EB5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 6EB8             >
 301+ 6EB8             >
 301+ 6EB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6EB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6EB8             >
 301+ 6EB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6EB8 86 6A                        dw      TWO_DUP                 // 2dup
 303+ 6EBA A6 6E                        dw      GREATER                 // >
 304+ 6EBC D8 63                        dw      ZBRANCH
 305+ 6EBE 04 00                        dw      Min_Skip - $   // if
 306+ 6EC0 26 6A                        dw          SWAP                //      swap
 307+ 6EC2              Min_Skip:                                       // endif
 308+ 6EC2 04 6A                        dw      DROP                    // drop
 309+ 6EC4 CE 68                        dw      EXIT                    // ;
 310+ 6EC6
 311+ 6EC6              //  ______________________________________________________________________
 312+ 6EC6              //
 313+ 6EC6              // max          n1 n2 -- n3
 314+ 6EC6              // maximum between n1 and n2
 315+ 6EC6                              Colon_Def MAX, "MAX", is_normal
 315+ 6EC6             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 315+ 6EC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ 6EC6             >
 315+ 6EC6             >                // dummy db directives used to calculate length of namec
 315+ 6EC6 4D 41 58    >                db      "MAX"
 315+ 6EC9             >len_NFA         defl    $ - temp_NFA
 315+ 6EC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ 6EC6             >
 315+ 6EC6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ 6EC7 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 315+ 6ECA             >                org     $-1                 // alter last byte of Name just above to set
 315+ 6EC9 D8          >                db      {b $} | END_BIT     // msb as name end
 315+ 6ECA             >
 315+ 6ECA AF 6E       >                dw      last_NFA            // Link to previous definition Name
 315+ 6ECC             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 6ECC CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 6ECF             >
 315+ 6ECF             >
 315+ 6ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 6ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 6ECF             >
 315+ 6ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 6ECF 86 6A                        dw      TWO_DUP                 // 2dup
 317+ 6ED1 8C 6E                        dw      LESS                    // <
 318+ 6ED3 D8 63                        dw      ZBRANCH
 319+ 6ED5 04 00                        dw      Max_Skip - $   // if
 320+ 6ED7 26 6A                        dw          SWAP                //      swap
 321+ 6ED9              Max_Skip:                                       // endif
 322+ 6ED9 04 6A                        dw      DROP                    // drop
 323+ 6EDB CE 68                        dw      EXIT                    // ;
 324+ 6EDD
 325+ 6EDD              //  ______________________________________________________________________
 326+ 6EDD              //
 327+ 6EDD              // ?dup         n -- 0 | n n
 328+ 6EDD              // duplicate if not zero
 329+ 6EDD                              New_Def QDUP, "?DUP", is_code, is_normal
 329+ 6EDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 6EDD             >
 329+ 6EDD             >                // dummy db directives used to calculate length of namec
 329+ 6EDD 3F 44 55 50 >                db      "?DUP"
 329+ 6EE1             >len_NFA         defl    $ - temp_NFA
 329+ 6EE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 6EDD             >
 329+ 6EDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 6EDE 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 329+ 6EE2             >                org     $-1                 // alter last byte of Name just above to set
 329+ 6EE1 D0          >                db      {b $} | END_BIT     // msb as name end
 329+ 6EE2             >
 329+ 6EE2 C6 6E       >                dw      last_NFA            // Link to previous definition Name
 329+ 6EE4             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 6EE4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 329+ 6EE4 ~           >
 329+ 6EE4 ~           >
 329+ 6EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 6EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 6EE4             >
 329+ 6EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 6EE4              QDup_Ptr:
 331+ 6EE4 E1                           pop     hl
 332+ 6EE5 7C                           ld      a, h
 333+ 6EE6 B5                           or      l
 334+ 6EE7 28 01                        jr      z, QDup_Skip
 335+ 6EE9 E5                               push    hl
 336+ 6EEA              QDup_Skip:
 337+ 6EEA                              psh1
 337+ 6EEA E5          >                push    hl
 337+ 6EEB DD E9       >                jp      (ix)
 338+ 6EED
 339+ 6EED              //  ______________________________________________________________________
 340+ 6EED              //
 341+ 6EED              // -dup         n -- 0 | n n
 342+ 6EED              // duplicate if not zero
 343+ 6EED                              New_Def LDUP, "-DUP", is_code, is_normal
 343+ 6EED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6EED             >
 343+ 6EED             >                // dummy db directives used to calculate length of namec
 343+ 6EED 2D 44 55 50 >                db      "-DUP"
 343+ 6EF1             >len_NFA         defl    $ - temp_NFA
 343+ 6EF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6EED             >
 343+ 6EED 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6EEE 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 343+ 6EF2             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6EF1 D0          >                db      {b $} | END_BIT     // msb as name end
 343+ 6EF2             >
 343+ 6EF2 DD 6E       >                dw      last_NFA            // Link to previous definition Name
 343+ 6EF4             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6EF4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 343+ 6EF4 ~           >
 343+ 6EF4 ~           >
 343+ 6EF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6EF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6EF4             >
 343+ 6EF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6EF4 C3 E4 6E                     jp      QDup_Ptr
 345+ 6EF7
 346+ 6EF7              //  ______________________________________________________________________
 347+ 6EF7              //
 348+ 6EF7              // emit         c --
 349+ 6EF7                              Colon_Def EMIT, "EMIT", is_normal
 349+ 6EF7             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 349+ 6EF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 6EF7             >
 349+ 6EF7             >                // dummy db directives used to calculate length of namec
 349+ 6EF7 45 4D 49 54 >                db      "EMIT"
 349+ 6EFB             >len_NFA         defl    $ - temp_NFA
 349+ 6EFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 6EF7             >
 349+ 6EF7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 6EF8 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 349+ 6EFC             >                org     $-1                 // alter last byte of Name just above to set
 349+ 6EFB D4          >                db      {b $} | END_BIT     // msb as name end
 349+ 6EFC             >
 349+ 6EFC ED 6E       >                dw      last_NFA            // Link to previous definition Name
 349+ 6EFE             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 6EFE CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 349+ 6F01             >
 349+ 6F01             >
 349+ 6F01             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 6F01             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 6F01             >
 349+ 6F01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 6F01 F6 65                        dw      C_EMIT                      // (?emit)
 351+ 6F03 E4 6E                        dw      QDUP                        // ?dup
 352+ 6F05                                                                  // if
 353+ 6F05 D8 63                        dw      ZBRANCH
 354+ 6F07 0A 00                        dw      Emit_Skip - $
 355+ 6F09 C4 65                        dw          EMITC                   //      emitc
 356+ 6F0B 0A 6C                        dw          ONE                     //      1
 357+ 6F0D 29 6D 93 6A                  dw          OUT, PLUSSTORE        //      out +!
 358+ 6F11              Emit_Skip:                                          // endif
 359+ 6F11 CE 68                        dw      EXIT                        // ;
 360+ 6F13
 361+ 6F13              //  ______________________________________________________________________
 362+ 6F13              //
 363+ 6F13              // space        --
 364+ 6F13                              Colon_Def SPACE, "SPACE", is_normal
 364+ 6F13             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 364+ 6F13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 6F13             >
 364+ 6F13             >                // dummy db directives used to calculate length of namec
 364+ 6F13 53 50 41 43 >                db      "SPACE"
 364+ 6F17 45          >
 364+ 6F18             >len_NFA         defl    $ - temp_NFA
 364+ 6F18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 6F13             >
 364+ 6F13 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 6F14 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 364+ 6F18 45          >
 364+ 6F19             >                org     $-1                 // alter last byte of Name just above to set
 364+ 6F18 C5          >                db      {b $} | END_BIT     // msb as name end
 364+ 6F19             >
 364+ 6F19 F7 6E       >                dw      last_NFA            // Link to previous definition Name
 364+ 6F1B             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 6F1B CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 6F1E             >
 364+ 6F1E             >
 364+ 6F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 6F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 6F1E             >
 364+ 6F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 6F1E 30 6C FE 6E                  dw      BL, EMIT                // bl emit
 366+ 6F22 CE 68                        dw      EXIT                    // ;
 367+ 6F24
 368+ 6F24              //  ______________________________________________________________________
 369+ 6F24              //
 370+ 6F24              // traverse     a n -- a
 371+ 6F24              // A dictionary entry is structured as follows
 372+ 6F24              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 373+ 6F24              //      +1   word name, last character is toggled with $80
 374+ 6F24              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 375+ 6F24              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 376+ 6F24              // PFA: +6+n "is_code", definitions have no PFA. // +5
 377+ 6F24              //
 378+ 6F24                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 378+ 6F24             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 378+ 6F24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 6F24             >
 378+ 6F24             >                // dummy db directives used to calculate length of namec
 378+ 6F24 54 52 41 56 >                db      "TRAVERSE"
 378+ 6F28 45 52 53 45 >
 378+ 6F2C             >len_NFA         defl    $ - temp_NFA
 378+ 6F2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 6F24             >
 378+ 6F24 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 6F25 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 378+ 6F29 45 52 53 45 >
 378+ 6F2D             >                org     $-1                 // alter last byte of Name just above to set
 378+ 6F2C C5          >                db      {b $} | END_BIT     // msb as name end
 378+ 6F2D             >
 378+ 6F2D 13 6F       >                dw      last_NFA            // Link to previous definition Name
 378+ 6F2F             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 6F2F CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 6F32             >
 378+ 6F32             >
 378+ 6F32             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 6F32             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 6F32             >
 378+ 6F32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 6F32 26 6A                        dw      SWAP                    // swap
 380+ 6F34              Traverse_Begin:                                 // begin
 381+ 6F34 F6 69 69 69                  dw          OVER, PLUS          //      over +
 382+ 6F38 A5 63 7F 00                  dw          LIT, 127            //      127
 383+ 6F3C F6 69 C9 6A                  dw          OVER, CFETCH        //      over @
 384+ 6F40 8C 6E                        dw          LESS                //      <
 385+ 6F42                                                              // until
 386+ 6F42 D8 63                        dw      ZBRANCH
 387+ 6F44 F0 FF                        dw      Traverse_Begin - $
 388+ 6F46 0D 6A                        dw      NIP                     //  nip
 389+ 6F48 CE 68                        dw      EXIT                    //  ;
 390+ 6F4A
 391+ 6F4A              //  ______________________________________________________________________
 392+ 6F4A              //
 393+ 6F4A              // latest       -- nfa
 394+ 6F4A                              Colon_Def LATEST, "LATEST", is_normal
 394+ 6F4A             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 394+ 6F4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 6F4A             >
 394+ 6F4A             >                // dummy db directives used to calculate length of namec
 394+ 6F4A 4C 41 54 45 >                db      "LATEST"
 394+ 6F4E 53 54       >
 394+ 6F50             >len_NFA         defl    $ - temp_NFA
 394+ 6F50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 6F4A             >
 394+ 6F4A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 6F4B 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 394+ 6F4F 53 54       >
 394+ 6F51             >                org     $-1                 // alter last byte of Name just above to set
 394+ 6F50 D4          >                db      {b $} | END_BIT     // msb as name end
 394+ 6F51             >
 394+ 6F51 24 6F       >                dw      last_NFA            // Link to previous definition Name
 394+ 6F53             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 6F53 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 6F56             >
 394+ 6F56             >
 394+ 6F56             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 6F56             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 6F56             >
 394+ 6F56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 6F56 5C 6D                        dw      CURRENT                 // current
 396+ 6F58 B2 6A B2 6A                  dw      FETCH, FETCH            // @ @
 397+ 6F5C CE 68                        dw      EXIT                    // ;
 398+ 6F5E
 399+ 6F5E              //  ______________________________________________________________________
 400+ 6F5E              //
 401+ 6F5E              // lfa          pfa -- lfa
 402+ 6F5E                              Colon_Def LFA, "LFA", is_normal
 402+ 6F5E             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 402+ 6F5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 6F5E             >
 402+ 6F5E             >                // dummy db directives used to calculate length of namec
 402+ 6F5E 4C 46 41    >                db      "LFA"
 402+ 6F61             >len_NFA         defl    $ - temp_NFA
 402+ 6F61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 6F5E             >
 402+ 6F5E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 6F5F 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 402+ 6F62             >                org     $-1                 // alter last byte of Name just above to set
 402+ 6F61 C1          >                db      {b $} | END_BIT     // msb as name end
 402+ 6F62             >
 402+ 6F62 4A 6F       >                dw      last_NFA            // Link to previous definition Name
 402+ 6F64             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 6F64 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 6F67             >
 402+ 6F67             >
 402+ 6F67             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 6F67             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 6F67             >
 402+ 6F67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 6F67 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 404+ 6F6B 60 6E                        dw      SUBTRACT                // cell- --> -
 405+ 6F6D CE 68                        dw      EXIT                    // ;
 406+ 6F6F
 407+ 6F6F              //  ______________________________________________________________________
 408+ 6F6F              //
 409+ 6F6F              // cfa          pfa -- cfa
 410+ 6F6F                              Colon_Def CFA, "CFA", is_normal
 410+ 6F6F             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 410+ 6F6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 410+ 6F6F             >
 410+ 6F6F             >                // dummy db directives used to calculate length of namec
 410+ 6F6F 43 46 41    >                db      "CFA"
 410+ 6F72             >len_NFA         defl    $ - temp_NFA
 410+ 6F72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 410+ 6F6F             >
 410+ 6F6F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 410+ 6F70 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 410+ 6F73             >                org     $-1                 // alter last byte of Name just above to set
 410+ 6F72 C1          >                db      {b $} | END_BIT     // msb as name end
 410+ 6F73             >
 410+ 6F73 5E 6F       >                dw      last_NFA            // Link to previous definition Name
 410+ 6F75             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 410+ 6F75 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 410+ 6F78             >
 410+ 6F78             >
 410+ 6F78             >                endif           ; ok        // for other definitions it "points" the correct handler
 410+ 6F78             >                // Use of "; ok" to suppress "warning[fwdref]"
 410+ 6F78             >
 410+ 6F78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 411+ 6F78              //              dw      CELL_MINUS              // cell-
 412+ 6F78 1C 6C 60 6E                  dw      THREE, SUBTRACT         // 3 -
 413+ 6F7C CE 68                        dw      EXIT                    // ;
 414+ 6F7E
 415+ 6F7E              //  ______________________________________________________________________
 416+ 6F7E              //
 417+ 6F7E              // nfa          pfa -- nfa
 418+ 6F7E                              Colon_Def NFA, "NFA", is_normal
 418+ 6F7E             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 418+ 6F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 6F7E             >
 418+ 6F7E             >                // dummy db directives used to calculate length of namec
 418+ 6F7E 4E 46 41    >                db      "NFA"
 418+ 6F81             >len_NFA         defl    $ - temp_NFA
 418+ 6F81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 6F7E             >
 418+ 6F7E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 6F7F 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 418+ 6F82             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6F81 C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 6F82             >
 418+ 6F82 6F 6F       >                dw      last_NFA            // Link to previous definition Name
 418+ 6F84             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6F84 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 6F87             >
 418+ 6F87             >
 418+ 6F87             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6F87             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6F87             >
 418+ 6F87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6F87 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 420+ 6F8B 60 6E                        dw      SUBTRACT                // -
 421+ 6F8D 26 6C                        dw      NEG_ONE                 // -1
 422+ 6F8F 2F 6F                        dw      TRAVERSE                // traverse
 423+ 6F91 CE 68                        dw      EXIT                    // ;
 424+ 6F93
 425+ 6F93              //  ______________________________________________________________________
 426+ 6F93              //
 427+ 6F93              // pfa          nfa -- pfa
 428+ 6F93                              Colon_Def PFA, "PFA", is_normal
 428+ 6F93             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 428+ 6F93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 6F93             >
 428+ 6F93             >                // dummy db directives used to calculate length of namec
 428+ 6F93 50 46 41    >                db      "PFA"
 428+ 6F96             >len_NFA         defl    $ - temp_NFA
 428+ 6F96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 6F93             >
 428+ 6F93 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 6F94 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 428+ 6F97             >                org     $-1                 // alter last byte of Name just above to set
 428+ 6F96 C1          >                db      {b $} | END_BIT     // msb as name end
 428+ 6F97             >
 428+ 6F97 7E 6F       >                dw      last_NFA            // Link to previous definition Name
 428+ 6F99             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 6F99 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 6F9C             >
 428+ 6F9C             >
 428+ 6F9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 6F9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 6F9C             >
 428+ 6F9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 6F9C 0A 6C                        dw      ONE                     // 1
 430+ 6F9E 2F 6F                        dw      TRAVERSE                // traverse
 431+ 6FA0 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 432+ 6FA4 69 69                        dw      PLUS                    // +
 433+ 6FA6 CE 68                        dw      EXIT                    // ;
 434+ 6FA8
 435+ 6FA8              //  ______________________________________________________________________
 436+ 6FA8              //
 437+ 6FA8              // >body        cfa -- pfa
 438+ 6FA8                              Colon_Def TO_BODY, ">BODY", is_normal
 438+ 6FA8             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 438+ 6FA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ 6FA8             >
 438+ 6FA8             >                // dummy db directives used to calculate length of namec
 438+ 6FA8 3E 42 4F 44 >                db      ">BODY"
 438+ 6FAC 59          >
 438+ 6FAD             >len_NFA         defl    $ - temp_NFA
 438+ 6FAD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ 6FA8             >
 438+ 6FA8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ 6FA9 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 438+ 6FAD 59          >
 438+ 6FAE             >                org     $-1                 // alter last byte of Name just above to set
 438+ 6FAD D9          >                db      {b $} | END_BIT     // msb as name end
 438+ 6FAE             >
 438+ 6FAE 93 6F       >                dw      last_NFA            // Link to previous definition Name
 438+ 6FB0             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6FB0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 6FB3             >
 438+ 6FB3             >
 438+ 6FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6FB3             >
 438+ 6FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6FB3 1C 6C 69 69                  dw      THREE, PLUS             // cell+ --> 3 +
 440+ 6FB7 CE 68                        dw      EXIT                    // ;
 441+ 6FB9
 442+ 6FB9              //  ______________________________________________________________________
 443+ 6FB9              //
 444+ 6FB9              // <name        cfa -- nfa
 445+ 6FB9                              Colon_Def TO_NAME, "<NAME", is_normal
 445+ 6FB9             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 445+ 6FB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 6FB9             >
 445+ 6FB9             >                // dummy db directives used to calculate length of namec
 445+ 6FB9 3C 4E 41 4D >                db      "<NAME"
 445+ 6FBD 45          >
 445+ 6FBE             >len_NFA         defl    $ - temp_NFA
 445+ 6FBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 6FB9             >
 445+ 6FB9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 6FBA 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 445+ 6FBE 45          >
 445+ 6FBF             >                org     $-1                 // alter last byte of Name just above to set
 445+ 6FBE C5          >                db      {b $} | END_BIT     // msb as name end
 445+ 6FBF             >
 445+ 6FBF A8 6F       >                dw      last_NFA            // Link to previous definition Name
 445+ 6FC1             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 6FC1 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 6FC4             >
 445+ 6FC4             >
 445+ 6FC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 6FC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 6FC4             >
 445+ 6FC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 6FC4 B0 6F                        dw      TO_BODY                 // >body
 447+ 6FC6 84 6F                        dw      NFA                     // nfa
 448+ 6FC8 CE 68                        dw      EXIT                    // ;
 449+ 6FCA
 450+ 6FCA              //  ______________________________________________________________________
 451+ 6FCA              //
 452+ 6FCA              // !csp         --
 453+ 6FCA              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 454+ 6FCA                              Colon_Def STORE_CSP, "!CSP", is_normal
 454+ 6FCA             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 454+ 6FCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ 6FCA             >
 454+ 6FCA             >                // dummy db directives used to calculate length of namec
 454+ 6FCA 21 43 53 50 >                db      "!CSP"
 454+ 6FCE             >len_NFA         defl    $ - temp_NFA
 454+ 6FCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ 6FCA             >
 454+ 6FCA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ 6FCB 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 454+ 6FCF             >                org     $-1                 // alter last byte of Name just above to set
 454+ 6FCE D0          >                db      {b $} | END_BIT     // msb as name end
 454+ 6FCF             >
 454+ 6FCF B9 6F       >                dw      last_NFA            // Link to previous definition Name
 454+ 6FD1             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 6FD1 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 6FD4             >
 454+ 6FD4             >
 454+ 6FD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 6FD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 6FD4             >
 454+ 6FD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 6FD4 9E 68                        dw      SPFETCH                 // sp@
 456+ 6FD6 91 6D BD 6A                  dw      CSP, STORE              // csp !
 457+ 6FDA CE 68                        dw      EXIT                    // ;
 458+ 6FDC
 459+ 6FDC              //  ______________________________________________________________________
 460+ 6FDC              //
 461+ 6FDC              // ?error       f n --
 462+ 6FDC              // rase error n if flag f it true
 463+ 6FDC                              Colon_Def QERROR, "?ERROR", is_normal
 463+ 6FDC             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 463+ 6FDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ 6FDC             >
 463+ 6FDC             >                // dummy db directives used to calculate length of namec
 463+ 6FDC 3F 45 52 52 >                db      "?ERROR"
 463+ 6FE0 4F 52       >
 463+ 6FE2             >len_NFA         defl    $ - temp_NFA
 463+ 6FE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ 6FDC             >
 463+ 6FDC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ 6FDD 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 463+ 6FE1 4F 52       >
 463+ 6FE3             >                org     $-1                 // alter last byte of Name just above to set
 463+ 6FE2 D2          >                db      {b $} | END_BIT     // msb as name end
 463+ 6FE3             >
 463+ 6FE3 CA 6F       >                dw      last_NFA            // Link to previous definition Name
 463+ 6FE5             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 6FE5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 6FE8             >
 463+ 6FE8             >
 463+ 6FE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 6FE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 6FE8             >
 463+ 6FE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 6FE8 26 6A                        dw      SWAP                    // swap
 465+ 6FEA                                                              // if
 466+ 6FEA D8 63                        dw      ZBRANCH
 467+ 6FEC 08 00                        dw      QError_Else - $
 468+ 6FEE 84 75                        dw          ERROR               //      error  ( is a forward-ref )
 469+ 6FF0                                                              // else
 470+ 6FF0 C3 63                        dw      BRANCH
 471+ 6FF2 04 00                        dw      QError_Endif - $
 472+ 6FF4              QError_Else:
 473+ 6FF4 04 6A                        dw          DROP                //      drop
 474+ 6FF6              QError_Endif:                                   // endif
 475+ 6FF6 CE 68                        dw      EXIT                    // ;
 476+ 6FF8
 477+ 6FF8              //  ______________________________________________________________________
 478+ 6FF8              //
 479+ 6FF8              // ?comp       --
 480+ 6FF8              // raise msg #17 if not compiling
 481+ 6FF8                              Colon_Def QCOMP, "?COMP", is_normal
 481+ 6FF8             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 481+ 6FF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 6FF8             >
 481+ 6FF8             >                // dummy db directives used to calculate length of namec
 481+ 6FF8 3F 43 4F 4D >                db      "?COMP"
 481+ 6FFC 50          >
 481+ 6FFD             >len_NFA         defl    $ - temp_NFA
 481+ 6FFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 6FF8             >
 481+ 6FF8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 6FF9 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 481+ 6FFD 50          >
 481+ 6FFE             >                org     $-1                 // alter last byte of Name just above to set
 481+ 6FFD D0          >                db      {b $} | END_BIT     // msb as name end
 481+ 6FFE             >
 481+ 6FFE DC 6F       >                dw      last_NFA            // Link to previous definition Name
 481+ 7000             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7000 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 7003             >
 481+ 7003             >
 481+ 7003             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 7003             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 7003             >
 481+ 7003             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 7003 68 6D B2 6A                  dw      STATE, FETCH            // state @
 483+ 7007 2B 69                        dw      ZEQUAL                  // 0=
 484+ 7009 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 485+ 700D E5 6F                        dw      QERROR                  // ?error
 486+ 700F CE 68                        dw      EXIT                    // ;
 487+ 7011
 488+ 7011              //  ______________________________________________________________________
 489+ 7011              //
 490+ 7011              // ?exec       --
 491+ 7011              // raise msg #18 if compiling
 492+ 7011                              Colon_Def QEXEC, "?EXEC", is_normal
 492+ 7011             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 492+ 7011             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7011             >
 492+ 7011             >                // dummy db directives used to calculate length of namec
 492+ 7011 3F 45 58 45 >                db      "?EXEC"
 492+ 7015 43          >
 492+ 7016             >len_NFA         defl    $ - temp_NFA
 492+ 7016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7011             >
 492+ 7011 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7012 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 492+ 7016 43          >
 492+ 7017             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7016 C3          >                db      {b $} | END_BIT     // msb as name end
 492+ 7017             >
 492+ 7017 F8 6F       >                dw      last_NFA            // Link to previous definition Name
 492+ 7019             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7019 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 701C             >
 492+ 701C             >
 492+ 701C             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 701C             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 701C             >
 492+ 701C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 701C 68 6D B2 6A                  dw      STATE, FETCH            // state @
 494+ 7020 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 495+ 7024 E5 6F                        dw      QERROR                  // ?error
 496+ 7026 CE 68                        dw      EXIT                    // ;
 497+ 7028
 498+ 7028              //  ______________________________________________________________________
 499+ 7028              //
 500+ 7028              // ?pairs       n1 n2 --
 501+ 7028              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 502+ 7028                              Colon_Def QPAIRS, "?PAIRS", is_normal
 502+ 7028             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 502+ 7028             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 7028             >
 502+ 7028             >                // dummy db directives used to calculate length of namec
 502+ 7028 3F 50 41 49 >                db      "?PAIRS"
 502+ 702C 52 53       >
 502+ 702E             >len_NFA         defl    $ - temp_NFA
 502+ 702E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 7028             >
 502+ 7028 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 7029 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 502+ 702D 52 53       >
 502+ 702F             >                org     $-1                 // alter last byte of Name just above to set
 502+ 702E D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 702F             >
 502+ 702F 11 70       >                dw      last_NFA            // Link to previous definition Name
 502+ 7031             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 7031 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 7034             >
 502+ 7034             >
 502+ 7034             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 7034             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 7034             >
 502+ 7034             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 7034 60 6E                        dw      SUBTRACT                // -
 504+ 7036 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 505+ 703A E5 6F                        dw      QERROR                  // ?error
 506+ 703C CE 68                        dw      EXIT                    // ;
 507+ 703E
 508+ 703E              //  ______________________________________________________________________
 509+ 703E              //
 510+ 703E              // ?csp       --
 511+ 703E              // raise msg #20 if surrent SP in not what previously saved in CSP.
 512+ 703E              // Compiler relies on that for  syntax checking of structures
 513+ 703E                              Colon_Def QCSP, "?CSP", is_normal
 513+ 703E             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 513+ 703E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 703E             >
 513+ 703E             >                // dummy db directives used to calculate length of namec
 513+ 703E 3F 43 53 50 >                db      "?CSP"
 513+ 7042             >len_NFA         defl    $ - temp_NFA
 513+ 7042             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 703E             >
 513+ 703E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 703F 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 513+ 7043             >                org     $-1                 // alter last byte of Name just above to set
 513+ 7042 D0          >                db      {b $} | END_BIT     // msb as name end
 513+ 7043             >
 513+ 7043 28 70       >                dw      last_NFA            // Link to previous definition Name
 513+ 7045             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 7045 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 7048             >
 513+ 7048             >
 513+ 7048             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 7048             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 7048             >
 513+ 7048             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 7048 9E 68                        dw      SPFETCH                 // sp@
 515+ 704A 91 6D B2 6A                  dw      CSP, FETCH              // csp @
 516+ 704E 60 6E                        dw      SUBTRACT                // -
 517+ 7050 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 518+ 7054 E5 6F                        dw      QERROR                  // ?error
 519+ 7056 CE 68                        dw      EXIT                    // ;
 520+ 7058
 521+ 7058              //  ______________________________________________________________________
 522+ 7058              //
 523+ 7058              // ?loading      --
 524+ 7058              // raise msg #22 if not loading
 525+ 7058                              Colon_Def QLOADING, "?LOADING", is_normal
 525+ 7058             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 525+ 7058             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 525+ 7058             >
 525+ 7058             >                // dummy db directives used to calculate length of namec
 525+ 7058 3F 4C 4F 41 >                db      "?LOADING"
 525+ 705C 44 49 4E 47 >
 525+ 7060             >len_NFA         defl    $ - temp_NFA
 525+ 7060             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 525+ 7058             >
 525+ 7058 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 525+ 7059 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 525+ 705D 44 49 4E 47 >
 525+ 7061             >                org     $-1                 // alter last byte of Name just above to set
 525+ 7060 C7          >                db      {b $} | END_BIT     // msb as name end
 525+ 7061             >
 525+ 7061 3E 70       >                dw      last_NFA            // Link to previous definition Name
 525+ 7063             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 525+ 7063 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 525+ 7066             >
 525+ 7066             >
 525+ 7066             >                endif           ; ok        // for other definitions it "points" the correct handler
 525+ 7066             >                // Use of "; ok" to suppress "warning[fwdref]"
 525+ 7066             >
 525+ 7066             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 526+ 7066 15 6D B2 6A                  dw      BLK, FETCH              // blk @
 527+ 706A 2B 69                        dw      ZEQUAL                  // 0=
 528+ 706C A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 529+ 7070 E5 6F                        dw      QERROR                  // ?error
 530+ 7072 CE 68                        dw      EXIT                    // ;
 531+ 7074
 532+ 7074              //  ______________________________________________________________________
 533+ 7074              //
 534+ 7074              // compile      --
 535+ 7074              // compiles the following word
 536+ 7074                              Colon_Def COMPILE, "COMPILE", is_normal
 536+ 7074             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 536+ 7074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ 7074             >
 536+ 7074             >                // dummy db directives used to calculate length of namec
 536+ 7074 43 4F 4D 50 >                db      "COMPILE"
 536+ 7078 49 4C 45    >
 536+ 707B             >len_NFA         defl    $ - temp_NFA
 536+ 707B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ 7074             >
 536+ 7074 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ 7075 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 536+ 7079 49 4C 45    >
 536+ 707C             >                org     $-1                 // alter last byte of Name just above to set
 536+ 707B C5          >                db      {b $} | END_BIT     // msb as name end
 536+ 707C             >
 536+ 707C 58 70       >                dw      last_NFA            // Link to previous definition Name
 536+ 707E             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 707E CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 7081             >
 536+ 7081             >
 536+ 7081             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 7081             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 7081             >
 536+ 7081             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 7081 00 70                        dw      QCOMP                   // ?comp
 538+ 7083 0A 69                        dw      R_TO                    // r>
 539+ 7085 31 6A A8 69                  dw      DUP, CELL_PLUS          // dup, cell+
 540+ 7089 F8 68                        dw      TO_R                    // >r
 541+ 708B B2 6A 29 6E                  dw      FETCH, COMMA            // @ ,
 542+ 708F CE 68                        dw      EXIT                    // ;
 543+ 7091
 544+ 7091              //  ______________________________________________________________________
 545+ 7091              //
 546+ 7091              // compile,     --
 547+ 7091              // compiles the following word
 548+ 7091                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 548+ 7091             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 548+ 7091             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 7091             >
 548+ 7091             >                // dummy db directives used to calculate length of namec
 548+ 7091 43 4F 4D 50 >                db      "COMPILE,"
 548+ 7095 49 4C 45 2C >
 548+ 7099             >len_NFA         defl    $ - temp_NFA
 548+ 7099             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 7091             >
 548+ 7091 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 7092 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 548+ 7096 49 4C 45 2C >
 548+ 709A             >                org     $-1                 // alter last byte of Name just above to set
 548+ 7099 AC          >                db      {b $} | END_BIT     // msb as name end
 548+ 709A             >
 548+ 709A 74 70       >                dw      last_NFA            // Link to previous definition Name
 548+ 709C             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 709C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 709F             >
 548+ 709F             >
 548+ 709F             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 709F             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 709F             >
 548+ 709F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 709F 00 70                        dw      QCOMP                   // ?comp
 550+ 70A1 29 6E                        dw      COMMA                   // ,
 551+ 70A3 CE 68                        dw      EXIT                    // ;
 552+ 70A5
 553+ 70A5              //  ______________________________________________________________________
 554+ 70A5              //
 555+ 70A5              // [            --
 556+ 70A5              // stop compilation
 557+ 70A5                              Colon_Def SQUARED_OPEN, "[", is_immediate
 557+ 70A5             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 557+ 70A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 70A5             >
 557+ 70A5             >                // dummy db directives used to calculate length of namec
 557+ 70A5 5B          >                db      "["
 557+ 70A6             >len_NFA         defl    $ - temp_NFA
 557+ 70A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 70A5             >
 557+ 70A5 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 70A6 5B          >                db      "["               // name string in 7-bit ascii, but
 557+ 70A7             >                org     $-1                 // alter last byte of Name just above to set
 557+ 70A6 DB          >                db      {b $} | END_BIT     // msb as name end
 557+ 70A7             >
 557+ 70A7 91 70       >                dw      last_NFA            // Link to previous definition Name
 557+ 70A9             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 70A9 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 557+ 70AC             >
 557+ 70AC             >
 557+ 70AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 70AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 70AC             >
 557+ 70AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 70AC 01 6C                        dw      ZERO                    // 0
 559+ 70AE 68 6D BD 6A                  dw      STATE, STORE            // state !
 560+ 70B2 CE 68                        dw      EXIT                    // ; immediate
 561+ 70B4
 562+ 70B4              //  ______________________________________________________________________
 563+ 70B4              //
 564+ 70B4              // ]            --
 565+ 70B4              // start compilation
 566+ 70B4                              Colon_Def SQUARED_CLOSE, "]", is_normal
 566+ 70B4             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 566+ 70B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 70B4             >
 566+ 70B4             >                // dummy db directives used to calculate length of namec
 566+ 70B4 5D          >                db      "]"
 566+ 70B5             >len_NFA         defl    $ - temp_NFA
 566+ 70B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 70B4             >
 566+ 70B4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 70B5 5D          >                db      "]"               // name string in 7-bit ascii, but
 566+ 70B6             >                org     $-1                 // alter last byte of Name just above to set
 566+ 70B5 DD          >                db      {b $} | END_BIT     // msb as name end
 566+ 70B6             >
 566+ 70B6 A5 70       >                dw      last_NFA            // Link to previous definition Name
 566+ 70B8             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 70B8 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 70BB             >
 566+ 70BB             >
 566+ 70BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 70BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 70BB             >
 566+ 70BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 70BB A5 63 C0 00                  dw      LIT, $C0                // 192
 568+ 70BF 68 6D BD 6A                  dw      STATE, STORE            // state !
 569+ 70C3 CE 68                        dw      EXIT                    // ;
 570+ 70C5
 571+ 70C5              //  ______________________________________________________________________
 572+ 70C5              //
 573+ 70C5              // smudge       --
 574+ 70C5              // toggle smudge bit of latest definition
 575+ 70C5                              Colon_Def SMUDGE, "SMUDGE", is_normal
 575+ 70C5             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 575+ 70C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 70C5             >
 575+ 70C5             >                // dummy db directives used to calculate length of namec
 575+ 70C5 53 4D 55 44 >                db      "SMUDGE"
 575+ 70C9 47 45       >
 575+ 70CB             >len_NFA         defl    $ - temp_NFA
 575+ 70CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 70C5             >
 575+ 70C5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 70C6 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 575+ 70CA 47 45       >
 575+ 70CC             >                org     $-1                 // alter last byte of Name just above to set
 575+ 70CB C5          >                db      {b $} | END_BIT     // msb as name end
 575+ 70CC             >
 575+ 70CC B4 70       >                dw      last_NFA            // Link to previous definition Name
 575+ 70CE             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 70CE CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 70D1             >
 575+ 70D1             >
 575+ 70D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 70D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 70D1             >
 575+ 70D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 70D1 53 6F                        dw      LATEST                  // latest
 577+ 70D3 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 578+ 70D7 A7 6A                        dw      TOGGLE                  // toggle
 579+ 70D9 CE 68                        dw      EXIT                    // ;
 580+ 70DB
 581+ 70DB              //  ______________________________________________________________________
 582+ 70DB              //
 583+ 70DB              // immediate    --
 584+ 70DB              // make immediate the latest definition
 585+ 70DB                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 585+ 70DB             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 585+ 70DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 70DB             >
 585+ 70DB             >                // dummy db directives used to calculate length of namec
 585+ 70DB 49 4D 4D 45 >                db      "IMMEDIATE"
 585+ 70DF 44 49 41 54 >
 585+ 70E3 45          >
 585+ 70E4             >len_NFA         defl    $ - temp_NFA
 585+ 70E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 70DB             >
 585+ 70DB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 70DC 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 585+ 70E0 44 49 41 54 >
 585+ 70E4 45          >
 585+ 70E5             >                org     $-1                 // alter last byte of Name just above to set
 585+ 70E4 C5          >                db      {b $} | END_BIT     // msb as name end
 585+ 70E5             >
 585+ 70E5 C5 70       >                dw      last_NFA            // Link to previous definition Name
 585+ 70E7             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 70E7 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 70EA             >
 585+ 70EA             >
 585+ 70EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 70EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 70EA             >
 585+ 70EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 70EA 53 6F                        dw      LATEST                  // latest
 587+ 70EC A5 63 40 00                  dw      LIT, $40                // 64
 588+ 70F0 A7 6A                        dw      TOGGLE                  // toggle
 589+ 70F2 CE 68                        dw      EXIT                    // ;
 590+ 70F4
 591+ 70F4              //  ______________________________________________________________________
 592+ 70F4              //
 593+ 70F4              // hex          --
 594+ 70F4              // change numeration base
 595+ 70F4                              Colon_Def HEX, "HEX", is_normal
 595+ 70F4             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 595+ 70F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 70F4             >
 595+ 70F4             >                // dummy db directives used to calculate length of namec
 595+ 70F4 48 45 58    >                db      "HEX"
 595+ 70F7             >len_NFA         defl    $ - temp_NFA
 595+ 70F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 70F4             >
 595+ 70F4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 70F5 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 595+ 70F8             >                org     $-1                 // alter last byte of Name just above to set
 595+ 70F7 D8          >                db      {b $} | END_BIT     // msb as name end
 595+ 70F8             >
 595+ 70F8 DB 70       >                dw      last_NFA            // Link to previous definition Name
 595+ 70FA             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 70FA CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 70FD             >
 595+ 70FD             >
 595+ 70FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 70FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 70FD             >
 595+ 70FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 70FD A5 63 10 00                  dw      LIT, 16                 // 16
 597+ 7101 73 6D BD 6A                  dw      BASE, STORE             // base !
 598+ 7105 CE 68                        dw      EXIT                    // ;
 599+ 7107
 600+ 7107              //  ______________________________________________________________________
 601+ 7107              //
 602+ 7107              // decimal      --
 603+ 7107              // change numeration base
 604+ 7107                              Colon_Def DECIMAL, "DECIMAL", is_normal
 604+ 7107             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 604+ 7107             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 7107             >
 604+ 7107             >                // dummy db directives used to calculate length of namec
 604+ 7107 44 45 43 49 >                db      "DECIMAL"
 604+ 710B 4D 41 4C    >
 604+ 710E             >len_NFA         defl    $ - temp_NFA
 604+ 710E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 7107             >
 604+ 7107 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 7108 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 604+ 710C 4D 41 4C    >
 604+ 710F             >                org     $-1                 // alter last byte of Name just above to set
 604+ 710E CC          >                db      {b $} | END_BIT     // msb as name end
 604+ 710F             >
 604+ 710F F4 70       >                dw      last_NFA            // Link to previous definition Name
 604+ 7111             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 7111 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 604+ 7114             >
 604+ 7114             >
 604+ 7114             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 7114             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 7114             >
 604+ 7114             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 7114 A5 63 0A 00                  dw      LIT, 10                 // 10
 606+ 7118 73 6D BD 6A                  dw      BASE, STORE             // base !
 607+ 711C CE 68                        dw      EXIT                    // ;
 608+ 711E
 609+ 711E              //  ______________________________________________________________________
 610+ 711E              //
 611+ 711E              // (;code)       --
 612+ 711E              // patch to CFA to call/jump to the "following code"
 613+ 711E                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 613+ 711E             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 613+ 711E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 711E             >
 613+ 711E             >                // dummy db directives used to calculate length of namec
 613+ 711E 28 3B 43 4F >                db      "(;CODE)"
 613+ 7122 44 45 29    >
 613+ 7125             >len_NFA         defl    $ - temp_NFA
 613+ 7125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 711E             >
 613+ 711E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 711F 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 613+ 7123 44 45 29    >
 613+ 7126             >                org     $-1                 // alter last byte of Name just above to set
 613+ 7125 A9          >                db      {b $} | END_BIT     // msb as name end
 613+ 7126             >
 613+ 7126 07 71       >                dw      last_NFA            // Link to previous definition Name
 613+ 7128             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 7128 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 712B             >
 613+ 712B             >
 613+ 712B             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 712B             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 712B             >
 613+ 712B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 712B 0A 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 615+ 712D 53 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 616+ 712F 99 6F 75 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 617+ 7133
 618+ 7133 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 619+ 7137 F6 69 D5 6A                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 620+ 713B 86 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 621+ 713D
 622+ 713D BD 6A                        dw      STORE                   // !
 623+ 713F CE 68                        dw      EXIT                    // ;
 624+ 7141
 625+ 7141              //  ______________________________________________________________________
 626+ 7141              //
 627+ 7141              // ;code        --
 628+ 7141                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 628+ 7141             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 628+ 7141             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 7141             >
 628+ 7141             >                // dummy db directives used to calculate length of namec
 628+ 7141 3B 43 4F 44 >                db      ";CODE"
 628+ 7145 45          >
 628+ 7146             >len_NFA         defl    $ - temp_NFA
 628+ 7146             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 7141             >
 628+ 7141 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 7142 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 628+ 7146 45          >
 628+ 7147             >                org     $-1                 // alter last byte of Name just above to set
 628+ 7146 C5          >                db      {b $} | END_BIT     // msb as name end
 628+ 7147             >
 628+ 7147 1E 71       >                dw      last_NFA            // Link to previous definition Name
 628+ 7149             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 7149 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 714C             >
 628+ 714C             >
 628+ 714C             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 714C             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 714C             >
 628+ 714C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 714C 45 70                        dw      QCSP                    // ?csp
 630+ 714E 7E 70                        dw      COMPILE                 // compile
 631+ 7150 28 71                        dw      C_SEMICOLON_CODE        // (;code)
 632+ 7152 A9 70                        dw      SQUARED_OPEN            // [
 633+ 7154 AE 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 634+ 7156 CE 68                        dw      EXIT                    // ; immediate
 635+ 7158
 636+ 7158              //  ______________________________________________________________________
 637+ 7158              //
 638+ 7158              // <builds      --
 639+ 7158                              Colon_Def CBUILDS, "<BUILDS", is_normal
 639+ 7158             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 639+ 7158             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 639+ 7158             >
 639+ 7158             >                // dummy db directives used to calculate length of namec
 639+ 7158 3C 42 55 49 >                db      "<BUILDS"
 639+ 715C 4C 44 53    >
 639+ 715F             >len_NFA         defl    $ - temp_NFA
 639+ 715F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 639+ 7158             >
 639+ 7158 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 639+ 7159 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 639+ 715D 4C 44 53    >
 639+ 7160             >                org     $-1                 // alter last byte of Name just above to set
 639+ 715F D3          >                db      {b $} | END_BIT     // msb as name end
 639+ 7160             >
 639+ 7160 41 71       >                dw      last_NFA            // Link to previous definition Name
 639+ 7162             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 639+ 7162 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 639+ 7165             >
 639+ 7165             >
 639+ 7165             >                endif           ; ok        // for other definitions it "points" the correct handler
 639+ 7165             >                // Use of "; ok" to suppress "warning[fwdref]"
 639+ 7165             >
 639+ 7165             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 640+ 7165 01 6C                        dw      ZERO                    // 0
 641+ 7167 BE 6B                        dw      CONSTANT                // constant
 642+ 7169 CE 68                        dw      EXIT                    // ;
 643+ 716B
 644+ 716B              //  ______________________________________________________________________
 645+ 716B              //
 646+ 716B              // recurse      --
 647+ 716B              //              Colon_Def RECURSE, "RECURSE", is_immediate
 648+ 716B              //              dw      QCOMP                   // ?comp
 649+ 716B              //              dw      LATEST                  // latest
 650+ 716B              //              dw      PFA, CFA                // pfa cfa
 651+ 716B              //              dw      COMMA                   // ,
 652+ 716B              //              dw      EXIT                    // ; immediate
 653+ 716B
 654+ 716B              //  ______________________________________________________________________
 655+ 716B              //
 656+ 716B              // does>     --
 657+ 716B                              Colon_Def DOES_TO, "DOES>", is_normal
 657+ 716B             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 657+ 716B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 657+ 716B             >
 657+ 716B             >                // dummy db directives used to calculate length of namec
 657+ 716B 44 4F 45 53 >                db      "DOES>"
 657+ 716F 3E          >
 657+ 7170             >len_NFA         defl    $ - temp_NFA
 657+ 7170             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 657+ 716B             >
 657+ 716B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 657+ 716C 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 657+ 7170 3E          >
 657+ 7171             >                org     $-1                 // alter last byte of Name just above to set
 657+ 7170 BE          >                db      {b $} | END_BIT     // msb as name end
 657+ 7171             >
 657+ 7171 58 71       >                dw      last_NFA            // Link to previous definition Name
 657+ 7173             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 657+ 7173 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 657+ 7176             >
 657+ 7176             >
 657+ 7176             >                endif           ; ok        // for other definitions it "points" the correct handler
 657+ 7176             >                // Use of "; ok" to suppress "warning[fwdref]"
 657+ 7176             >
 657+ 7176             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 658+ 7176 0A 69                        dw      R_TO                    // r>
 659+ 7178 53 6F                        dw      LATEST                  // latest
 660+ 717A 99 6F                        dw      PFA                     // pfa
 661+ 717C BD 6A                        dw      STORE                   // !
 662+ 717E 28 71                        dw      C_SEMICOLON_CODE        // ;code
 663+ 7180              Does_Ptr:
 664+ 7180                              // via call coded in CFA
 665+ 7180                              ldhlrp
 665+ 7180 2A 96 63    >                ld      hl,(RP_Pointer)
 666+ 7183 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 667+ 7184 70                           ld      (hl), b
 668+ 7185 2B                           dec     hl
 669+ 7186 71                           ld      (hl), c
 670+ 7187                              ldrphl
 670+ 7187 22 96 63    >                ld      (RP_Pointer),hl
 671+ 718A E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 672+ 718B
 673+ 718B 4E                           ld      c, (hl)
 674+ 718C 23                           inc     hl
 675+ 718D 46                           ld      b, (hl)
 676+ 718E 23                           inc     hl
 677+ 718F
 678+ 718F                              psh1
 678+ 718F E5          >                push    hl
 678+ 7190 DD E9       >                jp      (ix)
 679+ 7192                              // SMUDGE !
 680+ 7192
 681+ 7192              //  ______________________________________________________________________
 682+ 7192              //
 683+ 7192              // count        a -- a2 n
 684+ 7192              // expects a counted string at address a, returns string address and counter
 685+ 7192                              Colon_Def COUNT, "COUNT", is_normal
 685+ 7192             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 685+ 7192             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 7192             >
 685+ 7192             >                // dummy db directives used to calculate length of namec
 685+ 7192 43 4F 55 4E >                db      "COUNT"
 685+ 7196 54          >
 685+ 7197             >len_NFA         defl    $ - temp_NFA
 685+ 7197             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 7192             >
 685+ 7192 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 7193 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 685+ 7197 54          >
 685+ 7198             >                org     $-1                 // alter last byte of Name just above to set
 685+ 7197 D4          >                db      {b $} | END_BIT     // msb as name end
 685+ 7198             >
 685+ 7198 6B 71       >                dw      last_NFA            // Link to previous definition Name
 685+ 719A             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 719A CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 719D             >
 685+ 719D             >
 685+ 719D             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 719D             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 719D             >
 685+ 719D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 719D 31 6A                        dw      DUP                     // dup
 687+ 719F 86 69                        dw      ONE_PLUS                // 1+
 688+ 71A1 26 6A C9 6A                  dw      SWAP, CFETCH             // swap @
 689+ 71A5 CE 68                        dw      EXIT                    // ;
 690+ 71A7
 691+ 71A7              //  ______________________________________________________________________
 692+ 71A7              //
 693+ 71A7              // bounds       a n -- a+n n
 694+ 71A7              // given an address and a length ( a n ) calculate the bound addresses
 695+ 71A7              // suitable for DO-LOOP
 696+ 71A7                              Colon_Def BOUNDS, "BOUNDS", is_normal
 696+ 71A7             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 696+ 71A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 71A7             >
 696+ 71A7             >                // dummy db directives used to calculate length of namec
 696+ 71A7 42 4F 55 4E >                db      "BOUNDS"
 696+ 71AB 44 53       >
 696+ 71AD             >len_NFA         defl    $ - temp_NFA
 696+ 71AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 71A7             >
 696+ 71A7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 71A8 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 696+ 71AC 44 53       >
 696+ 71AE             >                org     $-1                 // alter last byte of Name just above to set
 696+ 71AD D3          >                db      {b $} | END_BIT     // msb as name end
 696+ 71AE             >
 696+ 71AE 92 71       >                dw      last_NFA            // Link to previous definition Name
 696+ 71B0             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 71B0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 71B3             >
 696+ 71B3             >
 696+ 71B3             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 71B3             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 71B3             >
 696+ 71B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 71B3 F6 69 69 69                  dw      OVER, PLUS, SWAP        // over + swap
 697+ 71B7 26 6A
 698+ 71B9 CE 68                        dw      EXIT                    // ;
 699+ 71BB
 700+ 71BB              //  ______________________________________________________________________
 701+ 71BB              //
 702+ 71BB              // type         a n --
 703+ 71BB              // Sends to current output channel n characters starting at address a.
 704+ 71BB                              Colon_Def TYPE, "TYPE", is_normal
 704+ 71BB             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 704+ 71BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 71BB             >
 704+ 71BB             >                // dummy db directives used to calculate length of namec
 704+ 71BB 54 59 50 45 >                db      "TYPE"
 704+ 71BF             >len_NFA         defl    $ - temp_NFA
 704+ 71BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 71BB             >
 704+ 71BB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 71BC 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 704+ 71C0             >                org     $-1                 // alter last byte of Name just above to set
 704+ 71BF C5          >                db      {b $} | END_BIT     // msb as name end
 704+ 71C0             >
 704+ 71C0 A7 71       >                dw      last_NFA            // Link to previous definition Name
 704+ 71C2             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 71C2 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 71C5             >
 704+ 71C5             >
 704+ 71C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 71C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 71C5             >
 704+ 71C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 71C5 B0 71                        dw      BOUNDS                  // bounds
 706+ 71C7 2C 64                        dw      C_Q_DO                  // ?do
 707+ 71C9 0C 00                        dw      Type_Skip - $
 708+ 71CB              Type_Loop:
 709+ 71CB 61 64 C9 6A                  dw          I, CFETCH           //      i c@
 710+ 71CF FE 6E                        dw          EMIT                //      emit
 711+ 71D1 EB 63                        dw      C_LOOP                  // loop
 712+ 71D3 F8 FF                        dw      Type_Loop - $
 713+ 71D5              Type_Skip:
 714+ 71D5 CE 68                        dw      EXIT                    // ;
 715+ 71D7
 716+ 71D7              //  ______________________________________________________________________
 717+ 71D7              //
 718+ 71D7              // leave        --
 719+ 71D7              // Compile (leave) to leave current LOOP and jump just after it
 720+ 71D7                              Colon_Def LEAVE, "LEAVE", is_immediate
 720+ 71D7             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 720+ 71D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 71D7             >
 720+ 71D7             >                // dummy db directives used to calculate length of namec
 720+ 71D7 4C 45 41 56 >                db      "LEAVE"
 720+ 71DB 45          >
 720+ 71DC             >len_NFA         defl    $ - temp_NFA
 720+ 71DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 71D7             >
 720+ 71D7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 71D8 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 720+ 71DC 45          >
 720+ 71DD             >                org     $-1                 // alter last byte of Name just above to set
 720+ 71DC C5          >                db      {b $} | END_BIT     // msb as name end
 720+ 71DD             >
 720+ 71DD BB 71       >                dw      last_NFA            // Link to previous definition Name
 720+ 71DF             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 71DF CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 71E2             >
 720+ 71E2             >
 720+ 71E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 71E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 71E2             >
 720+ 71E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 71E2 7E 70 E4 68                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 722+ 71E6 0B 6E F8 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 722+ 71EA 01 6C 29 6E
 723+ 71EE 01 6C 01 6C                  dw      ZERO, ZERO
 724+ 71F2 9E 68 31 6A                  dw      SPFETCH, DUP
 725+ 71F6 A8 69 A8 69                  dw      CELL_PLUS, CELL_PLUS
 726+ 71FA 18 6A                        dw      TUCK
 727+ 71FC 91 6D B2 6A                  dw      CSP, FETCH
 728+ 7200 26 6A 60 6E                  dw      SWAP, SUBTRACT
 729+ 7204 D2 67                        dw      CMOVE
 730+ 7206 91 6D B2 6A                  dw      CSP, FETCH, CELL_MINUS
 730+ 720A B3 69
 731+ 720C 0A 69 F6 69                  dw      R_TO, OVER, STORE
 731+ 7210 BD 6A
 732+ 7212 B3 69 01 6C                  dw      CELL_MINUS, ZERO
 733+ 7216 26 6A BD 6A                  dw      SWAP, STORE
 734+ 721A CE 68                        dw      EXIT                    // ;
 735+ 721C
 736+ 721C              //  ______________________________________________________________________
 737+ 721C              //
 738+ 721C              // -trailing    a n1 -- a n2
 739+ 721C              // Assumes that an n1 bytes-long string is stored at address a
 740+ 721C              // and the string contains a space delimited word,
 741+ 721C              // Finds n2 as the position of the first character after the word.
 742+ 721C                              Colon_Def LTRAILING, "-TRAILING", is_normal
 742+ 721C             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 742+ 721C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 742+ 721C             >
 742+ 721C             >                // dummy db directives used to calculate length of namec
 742+ 721C 2D 54 52 41 >                db      "-TRAILING"
 742+ 7220 49 4C 49 4E >
 742+ 7224 47          >
 742+ 7225             >len_NFA         defl    $ - temp_NFA
 742+ 7225             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 742+ 721C             >
 742+ 721C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 742+ 721D 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 742+ 7221 49 4C 49 4E >
 742+ 7225 47          >
 742+ 7226             >                org     $-1                 // alter last byte of Name just above to set
 742+ 7225 C7          >                db      {b $} | END_BIT     // msb as name end
 742+ 7226             >
 742+ 7226 D7 71       >                dw      last_NFA            // Link to previous definition Name
 742+ 7228             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 742+ 7228 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 742+ 722B             >
 742+ 722B             >
 742+ 722B             >                endif           ; ok        // for other definitions it "points" the correct handler
 742+ 722B             >                // Use of "; ok" to suppress "warning[fwdref]"
 742+ 722B             >
 742+ 722B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 743+ 722B 31 6A 01 6C                  dw      DUP, ZERO               // dup 0
 744+ 722F                                                              // do
 745+ 722F 2C 64                        dw      C_Q_DO
 746+ 7231 20 00                        dw      LTrailing_Leave - $
 747+ 7233              LTrailing_Loop:
 748+ 7233 86 6A 69 69                  dw          TWO_DUP, PLUS       //      2dup +
 749+ 7237 90 69                        dw          ONE_SUBTRACT        //      1-
 750+ 7239 C9 6A                        dw          CFETCH              //      c@
 751+ 723B 30 6C 60 6E                  dw          BL, SUBTRACT        //      bl -
 752+ 723F                                                              //      if
 753+ 723F D8 63                        dw          ZBRANCH
 754+ 7241 0A 00                        dw          LTrailing_Else - $
 755+ 7243 E4 68                        dw              C_LEAVE         //          leave
 756+ 7245 0C 00                        dw              LTrailing_Leave - $
 757+ 7247 C3 63                        dw          BRANCH              //      else
 758+ 7249 04 00                        dw          LTrailing_Endif - $
 759+ 724B              LTrailing_Else:
 760+ 724B 90 69                        dw              ONE_SUBTRACT    //          1-
 761+ 724D              LTrailing_Endif:                                //      endif
 762+ 724D                                                              // loop
 763+ 724D EB 63                        dw      C_LOOP
 764+ 724F E4 FF                        dw      LTrailing_Loop - $
 765+ 7251              LTrailing_Leave:
 766+ 7251 CE 68                        dw      EXIT                    // ;
 767+ 7253
 768+ 7253              //  ______________________________________________________________________
 769+ 7253              //
 770+ 7253              // accept       a n1 -- n2
 771+ 7253              // Accepts at most n1 characters from terminal and stores them at address a
 772+ 7253              // CR stops input. A 'nul' is added as trailer.
 773+ 7253              // n2 is the string length. n2 is kept in span user variable also.
 774+ 7253                              Colon_Def ACCEPT, "ACCEPT", is_normal
 774+ 7253             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 774+ 7253             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ 7253             >
 774+ 7253             >                // dummy db directives used to calculate length of namec
 774+ 7253 41 43 43 45 >                db      "ACCEPT"
 774+ 7257 50 54       >
 774+ 7259             >len_NFA         defl    $ - temp_NFA
 774+ 7259             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ 7253             >
 774+ 7253 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ 7254 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 774+ 7258 50 54       >
 774+ 725A             >                org     $-1                 // alter last byte of Name just above to set
 774+ 7259 D4          >                db      {b $} | END_BIT     // msb as name end
 774+ 725A             >
 774+ 725A 1C 72       >                dw      last_NFA            // Link to previous definition Name
 774+ 725C             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 725C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 725F             >
 774+ 725F             >
 774+ 725F             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 725F             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 725F             >
 774+ 725F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 725F F6 69 69 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 775+ 7263 F6 69
 776+ 7265 01 6C 4A 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 777+ 7269                                                              // do
 778+ 7269 2C 64                        dw      C_Q_DO
 779+ 726B 8C 00                        dw      Accept_Leave - $
 780+ 726D              Accept_Loop:
 781+ 726D 04 6A 5A 66                  dw          DROP, KEY           //      drop key        ( a  c )
 782+ 7271 31 6A                        dw          DUP                 //      dup             ( a  c  c )
 783+ 7273 A5 63 0E 00                  dw          LIT, $0E            //      0E
 784+ 7277 71 6C                        dw          PLUS_ORIGIN         //      +origin
 785+ 7279 B2 6A                        dw          FETCH               //      @               ( a  c  c  del )
 786+ 727B 6C 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 787+ 727D                                                              //      if
 788+ 727D D8 63                        dw          ZBRANCH
 789+ 727F 2E 00                        dw          Accept_Else_0 - $
 790+ 7281 04 6A                        dw              DROP            //          drop        ( a  )
 791+ 7283 31 6A 61 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 791+ 7287 6C 6E
 792+ 7289 0A 6C 6C 68                  dw              ONE, AND_OP     //          1 and
 793+ 728D 31 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 794+ 728F 0A 69                        dw              R_TO            //          r> 2 - + r>
 795+ 7291 13 6C 60 6E                  dw              TWO, SUBTRACT, PLUS //      ( decrement index by 1 or 2 )
 795+ 7295 69 69
 796+ 7297 F8 68                        dw              TO_R            //
 797+ 7299                                                              //          if
 798+ 7299 D8 63                        dw              ZBRANCH
 799+ 729B 0A 00                        dw              Accept_Else_1 - $
 800+ 729D A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 801+ 72A1                                                              //          else
 802+ 72A1 C3 63                        dw              BRANCH
 803+ 72A3 06 00                        dw              Accept_Endif_1 - $
 804+ 72A5              Accept_Else_1:
 805+ 72A5 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 806+ 72A9              Accept_Endif_1:                                 //          endif
 807+ 72A9 C3 63                        dw          BRANCH
 808+ 72AB 2E 00                        dw          Accept_Endif_0 - $
 809+ 72AD              Accept_Else_0:                                  //      else
 810+ 72AD 31 6A                        dw              DUP             //          dup         ( a  c  c )
 811+ 72AF A5 63 0D 00                  dw              LIT, 13         //          13
 812+ 72B3 6C 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 813+ 72B5                                                              //          if
 814+ 72B5 D8 63                        dw              ZBRANCH
 815+ 72B7 0C 00                        dw              Accept_Else_2 - $
 816+ 72B9 04 6A 30 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 817+ 72BD 01 6C                        dw                  ZERO        //              0       ( a  c  0 )
 818+ 72BF                                                              //          else
 819+ 72BF C3 63                        dw              BRANCH
 820+ 72C1 04 00                        dw              Accept_Endif_2 - $
 821+ 72C3              Accept_Else_2:
 822+ 72C3 31 6A                        dw                  DUP         //              dup     ( a  c  c )
 823+ 72C5                                                              //          endif
 824+ 72C5              Accept_Endif_2:
 825+ 72C5 61 64 D5 6A                  dw              I, CSTORE       //          i           ( a  c )
 826+ 72C9 31 6A 30 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 826+ 72CD 8C 6E
 827+ 72CF                                                              //          if
 828+ 72CF D8 63                        dw              ZBRANCH
 829+ 72D1 08 00                        dw              Accept_Endif_3 - $
 830+ 72D3 0A 69                        dw                  R_TO        //              r>
 831+ 72D5 90 69                        dw                  ONE_SUBTRACT//              1-
 832+ 72D7 F8 68                        dw                  TO_R        //              >r
 833+ 72D9                                                              //          endif
 834+ 72D9              Accept_Endif_3:
 835+ 72D9              Accept_Endif_0:                                 //      endif
 836+ 72D9 FE 6E                        dw          EMIT                //      emit
 837+ 72DB 01 6C 61 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 837+ 72DF 86 69
 838+ 72E1 BD 6A                        dw          STORE               //          ( zero pad )
 839+ 72E3 61 64                        dw          I                   //      i
 840+ 72E5 61 64 C9 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 840+ 72E9 2B 69
 841+ 72EB D8 63                        dw          ZBRANCH             //
 842+ 72ED 06 00                        dw              Accept_Endif_4 - $
 843+ 72EF E4 68                        dw                  C_LEAVE     //              leave
 844+ 72F1 06 00                        dw                  Accept_Leave - $
 845+ 72F3              Accept_Endif_4:                                 //      endif
 846+ 72F3                                                              // loop
 847+ 72F3 EB 63                        dw      C_LOOP
 848+ 72F5 78 FF                        dw      Accept_Loop - $
 849+ 72F7              Accept_Leave:
 850+ 72F7 26 6A 60 6E                  dw      SWAP, SUBTRACT          // swap -
 851+ 72FB 86 69                        dw      ONE_PLUS                // 1+
 852+ 72FD 31 6A E9 6D                  dw      DUP, SPAN, STORE        // dup span !
 852+ 7301 BD 6A
 853+ 7303 CE 68                        dw      EXIT                    // ;
 854+ 7305
 855+ 7305              //  ______________________________________________________________________
 856+ 7305              //
 857+ 7305              // expect      a n --
 858+ 7305              // Accepts at most n1 characters from terminal and stores them at address a
 859+ 7305              // CR stops input. A 'nul' is added as trailer.
 860+ 7305              // n2 is the string length. n2 is kept in span user variable also.
 861+ 7305              //              Colon_Def EXPECT, "EXPECT", is_normal
 862+ 7305              //              dw      ACCEPT, DROP            // accept drop
 863+ 7305              //              dw      EXIT                    // ;
 864+ 7305
 865+ 7305              //  ______________________________________________________________________
 866+ 7305              //
 867+ 7305              // query        --
 868+ 7305              // Accept at most 80 character from console. CR stops.
 869+ 7305              // Text is stored in TIB. Variable IN is zeroed.
 870+ 7305                              Colon_Def QUERY, "QUERY", is_normal
 870+ 7305             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 870+ 7305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 7305             >
 870+ 7305             >                // dummy db directives used to calculate length of namec
 870+ 7305 51 55 45 52 >                db      "QUERY"
 870+ 7309 59          >
 870+ 730A             >len_NFA         defl    $ - temp_NFA
 870+ 730A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 7305             >
 870+ 7305 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 7306 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 870+ 730A 59          >
 870+ 730B             >                org     $-1                 // alter last byte of Name just above to set
 870+ 730A D9          >                db      {b $} | END_BIT     // msb as name end
 870+ 730B             >
 870+ 730B 53 72       >                dw      last_NFA            // Link to previous definition Name
 870+ 730D             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 730D CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 7310             >
 870+ 7310             >
 870+ 7310             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 7310             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 7310             >
 870+ 7310             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 7310 9F 6C B2 6A                  dw      TIB, FETCH              // tib @
 872+ 7314 A5 63 50 00                  dw      LIT, 80                 // 80
 873+ 7318 5C 72 04 6A                  dw      ACCEPT, DROP            // accept drop
 874+ 731C 01 6C 1F 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 874+ 7320 BD 6A
 875+ 7322 CE 68                        dw      EXIT                    // ;
 876+ 7324
 877+ 7324              //  ______________________________________________________________________
 878+ 7324              //
 879+ 7324              // fill        a n c --
 880+ 7324              // If n > 0, fills n locations starting from address a with the value c.
 881+ 7324                              New_Def FILL, "FILL", is_code, is_normal
 881+ 7324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 7324             >
 881+ 7324             >                // dummy db directives used to calculate length of namec
 881+ 7324 46 49 4C 4C >                db      "FILL"
 881+ 7328             >len_NFA         defl    $ - temp_NFA
 881+ 7328             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 7324             >
 881+ 7324 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 7325 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 881+ 7329             >                org     $-1                 // alter last byte of Name just above to set
 881+ 7328 CC          >                db      {b $} | END_BIT     // msb as name end
 881+ 7329             >
 881+ 7329 05 73       >                dw      last_NFA            // Link to previous definition Name
 881+ 732B             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 732B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 881+ 732B ~           >
 881+ 732B ~           >
 881+ 732B             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 732B             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 732B             >
 881+ 732B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 732B D9                           exx
 883+ 732C D1                           pop     de                  // de has character
 884+ 732D C1                           pop     bc                  // bc has counter
 885+ 732E E1                           pop     hl                  // hl has address, save Instruction Pointer
 886+ 732F              Fill_Loop:
 887+ 732F 78                               ld      a, b
 888+ 7330 B1                               or      c
 889+ 7331 28 05                        jr      z, Fill_While_End
 890+ 7333 73                               ld      (hl), e
 891+ 7334 0B                               dec     bc
 892+ 7335 23                               inc     hl
 893+ 7336 18 F7                        jr      Fill_Loop
 894+ 7338              Fill_While_End:
 895+ 7338 D9                           exx
 896+ 7339                              next
 896+ 7339 DD E9       >                jp      (ix)
 897+ 733B
 898+ 733B              //  ______________________________________________________________________
 899+ 733B              //
 900+ 733B              // erase        a n --
 901+ 733B              // If n > 0, fills n locations starting from address a with 'nul' characters.
 902+ 733B                              Colon_Def ERASE, "ERASE", is_normal
 902+ 733B             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 902+ 733B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 733B             >
 902+ 733B             >                // dummy db directives used to calculate length of namec
 902+ 733B 45 52 41 53 >                db      "ERASE"
 902+ 733F 45          >
 902+ 7340             >len_NFA         defl    $ - temp_NFA
 902+ 7340             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 733B             >
 902+ 733B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 733C 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 902+ 7340 45          >
 902+ 7341             >                org     $-1                 // alter last byte of Name just above to set
 902+ 7340 C5          >                db      {b $} | END_BIT     // msb as name end
 902+ 7341             >
 902+ 7341 24 73       >                dw      last_NFA            // Link to previous definition Name
 902+ 7343             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 7343 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 7346             >
 902+ 7346             >
 902+ 7346             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 7346             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 7346             >
 902+ 7346             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 7346 01 6C 2B 73                  dw      ZERO, FILL              // 0 fill
 904+ 734A CE 68                        dw      EXIT                    // ;
 905+ 734C
 906+ 734C              //  ______________________________________________________________________
 907+ 734C              //
 908+ 734C              // blanks       a n --
 909+ 734C              // If n > 0, fills n locations starting from address a with 'nul' characters.
 910+ 734C                              Colon_Def BLANKS, "BLANKS", is_normal
 910+ 734C             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 910+ 734C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ 734C             >
 910+ 734C             >                // dummy db directives used to calculate length of namec
 910+ 734C 42 4C 41 4E >                db      "BLANKS"
 910+ 7350 4B 53       >
 910+ 7352             >len_NFA         defl    $ - temp_NFA
 910+ 7352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ 734C             >
 910+ 734C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ 734D 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 910+ 7351 4B 53       >
 910+ 7353             >                org     $-1                 // alter last byte of Name just above to set
 910+ 7352 D3          >                db      {b $} | END_BIT     // msb as name end
 910+ 7353             >
 910+ 7353 3B 73       >                dw      last_NFA            // Link to previous definition Name
 910+ 7355             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 7355 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 7358             >
 910+ 7358             >
 910+ 7358             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 7358             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 7358             >
 910+ 7358             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 7358 30 6C 2B 73                  dw      BL, FILL                // bl fill
 912+ 735C CE 68                        dw      EXIT                    // ;
 913+ 735E
 914+ 735E              //  ______________________________________________________________________
 915+ 735E              //
 916+ 735E              // hold         c --
 917+ 735E              // Used between <# and #> to insert a character c in numeric formatting.
 918+ 735E                              Colon_Def HOLD, "HOLD", is_normal
 918+ 735E             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 918+ 735E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 735E             >
 918+ 735E             >                // dummy db directives used to calculate length of namec
 918+ 735E 48 4F 4C 44 >                db      "HOLD"
 918+ 7362             >len_NFA         defl    $ - temp_NFA
 918+ 7362             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 735E             >
 918+ 735E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 735F 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 918+ 7363             >                org     $-1                 // alter last byte of Name just above to set
 918+ 7362 C4          >                db      {b $} | END_BIT     // msb as name end
 918+ 7363             >
 918+ 7363 4C 73       >                dw      last_NFA            // Link to previous definition Name
 918+ 7365             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 7365 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 7368             >
 918+ 7368             >
 918+ 7368             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 7368             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 7368             >
 918+ 7368             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 7368 26 6C                        dw      NEG_ONE                 // -1
 920+ 736A A4 6D 93 6A                  dw      HLD, PLUSSTORE          // hld +!
 921+ 736E A4 6D B2 6A                  dw      HLD, FETCH, CSTORE      // hld @ c!
 921+ 7372 D5 6A
 922+ 7374 CE 68                        dw      EXIT                    // ;
 923+ 7376
 924+ 7376              //  ______________________________________________________________________
 925+ 7376              //
 926+ 7376              // pad         -- a
 927+ 7376              // leaves the buffer text address. This is at a fixed distance over HERE.
 928+ 7376                              Colon_Def PAD, "PAD", is_normal
 928+ 7376             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 928+ 7376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 7376             >
 928+ 7376             >                // dummy db directives used to calculate length of namec
 928+ 7376 50 41 44    >                db      "PAD"
 928+ 7379             >len_NFA         defl    $ - temp_NFA
 928+ 7379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 7376             >
 928+ 7376 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 7377 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 928+ 737A             >                org     $-1                 // alter last byte of Name just above to set
 928+ 7379 C4          >                db      {b $} | END_BIT     // msb as name end
 928+ 737A             >
 928+ 737A 5E 73       >                dw      last_NFA            // Link to previous definition Name
 928+ 737C             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 737C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 737F             >
 928+ 737F             >
 928+ 737F             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 737F             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 737F             >
 928+ 737F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 737F 0B 6E                        dw      HERE                    // here
 930+ 7381 A5 63 44 00                  dw      LIT, 68                 // 68
 931+ 7385 69 69                        dw      PLUS                    // +
 932+ 7387 CE 68                        dw      EXIT                    // ;
 933+ 7389
 934+ 7389              //  ______________________________________________________________________
 935+ 7389              //
 936+ 7389              // word         c -- a
 937+ 7389              // reads characters from input streams until it encouners a c delimiter.
 938+ 7389              // Stores that packet so it starts from HERE
 939+ 7389              // WORD leaves a counter as first byte and ends the packet with two spaces.
 940+ 7389              // Other occurrences of c are ignored.
 941+ 7389              // If BLK is zero, text is taken from terminal buffer TIB.
 942+ 7389              // Otherwise text is taken from the disk-block given by BLK.
 943+ 7389              // "in" variable is incremented of the number of character read.
 944+ 7389              // The number of characters read is given by ENCLOSE.
 945+ 7389                              Colon_Def WORD, "WORD", is_normal
 945+ 7389             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 945+ 7389             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 7389             >
 945+ 7389             >                // dummy db directives used to calculate length of namec
 945+ 7389 57 4F 52 44 >                db      "WORD"
 945+ 738D             >len_NFA         defl    $ - temp_NFA
 945+ 738D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 7389             >
 945+ 7389 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 738A 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 945+ 738E             >                org     $-1                 // alter last byte of Name just above to set
 945+ 738D C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 738E             >
 945+ 738E 76 73       >                dw      last_NFA            // Link to previous definition Name
 945+ 7390             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 7390 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 7393             >
 945+ 7393             >
 945+ 7393             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 7393             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 7393             >
 945+ 7393             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 7393 15 6D B2 6A                  dw      BLK, FETCH              // blk @
 947+ 7397                                                              // if
 948+ 7397 D8 63                        dw      ZBRANCH
 949+ 7399 0C 00                        dw      Word_Else - $
 950+ 739B 15 6D B2 6A                  dw          BLK, FETCH          //      blk @
 951+ 739F 1E 7D                        dw          BLOCK               //      block ( forward )
 952+ 73A1                                                              // else
 953+ 73A1 C3 63                        dw      BRANCH
 954+ 73A3 06 00                        dw      Word_Endif - $
 955+ 73A5              Word_Else:
 956+ 73A5 9F 6C B2 6A                  dw         TIB, FETCH           //      tib @
 957+ 73A9              Word_Endif:                                     // endif
 958+ 73A9 1F 6D B2 6A                  dw      TO_IN, FETCH, PLUS      // >in @ +
 958+ 73AD 69 69
 959+ 73AF 26 6A 35 65                  dw      SWAP, ENCLOSE           // swap enclose
 960+ 73B3 0B 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 960+ 73B7 22 00 55 73
 961+ 73BB 1F 6D 93 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 962+ 73BF F6 69 60 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 962+ 73C3 F8 68
 963+ 73C5 1C 69 0B 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 963+ 73C9 D5 6A
 964+ 73CB 69 69                        dw      PLUS                    // +
 965+ 73CD 0B 6E 86 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 965+ 73D1 0A 69
 966+ 73D3 D2 67                        dw      CMOVE                   // cmove
 967+ 73D5 0B 6E                        dw      HERE                    // here
 968+ 73D7 CE 68                        dw      EXIT                    // ;
 969+ 73D9
 970+ 73D9              //  ______________________________________________________________________
 971+ 73D9              //
 972+ 73D9              // (.")         --
 973+ 73D9              // Direct procedure compiled by ." and  .(  It executes TYPE.
 974+ 73D9                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 974+ 73D9             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 974+ 73D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ 73D9             >
 974+ 73D9             >                // dummy db directives used to calculate length of namec
 974+ 73D9 28 2E 22 29 >                db      '(.")'
 974+ 73DD             >len_NFA         defl    $ - temp_NFA
 974+ 73DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ 73D9             >
 974+ 73D9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ 73DA 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 974+ 73DE             >                org     $-1                 // alter last byte of Name just above to set
 974+ 73DD A9          >                db      {b $} | END_BIT     // msb as name end
 974+ 73DE             >
 974+ 73DE 89 73       >                dw      last_NFA            // Link to previous definition Name
 974+ 73E0             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 73E0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 73E3             >
 974+ 73E3             >
 974+ 73E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 73E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 73E3             >
 974+ 73E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 73E3 1C 69 9A 71                  dw      R_OP, COUNT             // r count
 976+ 73E7 31 6A 86 69                  dw      DUP, ONE_PLUS           // dup 1+
 977+ 73EB 0A 69 69 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 977+ 73EF F8 68
 978+ 73F1 C2 71                        dw      TYPE                    // type
 979+ 73F3 CE 68                        dw      EXIT                    // ;
 980+ 73F5
 981+ 73F5              //  ______________________________________________________________________
 982+ 73F5              //
 983+ 73F5              // char         -- c
 984+ 73F5              // get first character from next input word
 985+ 73F5                              Colon_Def CHAR,  "CHAR", is_normal
 985+ 73F5             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 985+ 73F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 73F5             >
 985+ 73F5             >                // dummy db directives used to calculate length of namec
 985+ 73F5 43 48 41 52 >                db      "CHAR"
 985+ 73F9             >len_NFA         defl    $ - temp_NFA
 985+ 73F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 73F5             >
 985+ 73F5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 73F6 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 985+ 73FA             >                org     $-1                 // alter last byte of Name just above to set
 985+ 73F9 D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 73FA             >
 985+ 73FA D9 73       >                dw      last_NFA            // Link to previous definition Name
 985+ 73FC             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 73FC CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 73FF             >
 985+ 73FF             >
 985+ 73FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 73FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 73FF             >
 985+ 73FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 73FF 30 6C 90 73                  dw      BL, WORD                // bl word
 987+ 7403 86 69 C9 6A                  dw      ONE_PLUS, CFETCH        // 1+ c@
 988+ 7407 CE 68                        dw      EXIT                    // ;
 989+ 7409
 990+ 7409              //  ______________________________________________________________________
 991+ 7409              //
 992+ 7409              // ,"           --
 993+ 7409              // compiles a string terminated by " as a counted string from next input stream
 994+ 7409                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 994+ 7409             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 994+ 7409             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ 7409             >
 994+ 7409             >                // dummy db directives used to calculate length of namec
 994+ 7409 2C 22       >                db      ',"'
 994+ 740B             >len_NFA         defl    $ - temp_NFA
 994+ 740B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ 7409             >
 994+ 7409 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ 740A 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 994+ 740C             >                org     $-1                 // alter last byte of Name just above to set
 994+ 740B A2          >                db      {b $} | END_BIT     // msb as name end
 994+ 740C             >
 994+ 740C F5 73       >                dw      last_NFA            // Link to previous definition Name
 994+ 740E             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 740E CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 7411             >
 994+ 7411             >
 994+ 7411             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 7411             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 7411             >
 994+ 7411             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 7411 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 996+ 7415 90 73                        dw      WORD                    // word
 997+ 7417 C9 6A 86 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 998+ 741B 1C 6E                        dw      ALLOT                   // allot
 999+ 741D 01 6C 3B 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1000+ 7421 CE 68                        dw      EXIT
1001+ 7423
1002+ 7423              //  ______________________________________________________________________
1003+ 7423              //
1004+ 7423              // .c           c --
1005+ 7423              // intermediate general purpose string builder, used by ." and .(
1006+ 7423                              Colon_Def DOT_C,  ".C", is_immediate
1006+ 7423             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1006+ 7423             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 7423             >
1006+ 7423             >                // dummy db directives used to calculate length of namec
1006+ 7423 2E 43       >                db      ".C"
1006+ 7425             >len_NFA         defl    $ - temp_NFA
1006+ 7425             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 7423             >
1006+ 7423 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 7424 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1006+ 7426             >                org     $-1                 // alter last byte of Name just above to set
1006+ 7425 C3          >                db      {b $} | END_BIT     // msb as name end
1006+ 7426             >
1006+ 7426 09 74       >                dw      last_NFA            // Link to previous definition Name
1006+ 7428             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 7428 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 742B             >
1006+ 742B             >
1006+ 742B             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 742B             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 742B             >
1006+ 742B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 742B 68 6D B2 6A                  dw      STATE, FETCH            // state @
1008+ 742F                                                              // if
1009+ 742F D8 63                        dw      ZBRANCH
1010+ 7431 12 00                        dw      Dot_C_Else - $
1011+ 7433 7E 70 E0 73                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1012+ 7437 90 73 C9 6A                  dw          WORD, CFETCH        //      word c@
1013+ 743B 86 69 1C 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1014+ 743F                                                              // else
1015+ 743F C3 63                        dw      BRANCH
1016+ 7441 08 00                        dw      Dot_C_Endif - $
1017+ 7443              Dot_C_Else:
1018+ 7443 90 73 9A 71                  dw          WORD, COUNT, TYPE   //      word count type
1018+ 7447 C2 71
1019+ 7449              Dot_C_Endif:                                    // endif
1020+ 7449 CE 68                        dw      EXIT                    ;
1021+ 744B
1022+ 744B              //  ______________________________________________________________________
1023+ 744B              //
1024+ 744B              // ."           c --
1025+ 744B                              Colon_Def DOT_QUOTE,  '."', is_immediate
1025+ 744B             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1025+ 744B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 744B             >
1025+ 744B             >                // dummy db directives used to calculate length of namec
1025+ 744B 2E 22       >                db      '."'
1025+ 744D             >len_NFA         defl    $ - temp_NFA
1025+ 744D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 744B             >
1025+ 744B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 744C 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1025+ 744E             >                org     $-1                 // alter last byte of Name just above to set
1025+ 744D A2          >                db      {b $} | END_BIT     // msb as name end
1025+ 744E             >
1025+ 744E 23 74       >                dw      last_NFA            // Link to previous definition Name
1025+ 7450             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 7450 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 7453             >
1025+ 7453             >
1025+ 7453             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 7453             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 7453             >
1025+ 7453             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 7453 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1027+ 7457 28 74                        dw      DOT_C                   // [compile] .c
1028+ 7459 CE 68                        dw      EXIT                    // ; immediate
1029+ 745B
1030+ 745B              //  ______________________________________________________________________
1031+ 745B              //
1032+ 745B              // .(           c --
1033+ 745B                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1033+ 745B             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1033+ 745B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 745B             >
1033+ 745B             >                // dummy db directives used to calculate length of namec
1033+ 745B 2E 28       >                db      ".("
1033+ 745D             >len_NFA         defl    $ - temp_NFA
1033+ 745D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 745B             >
1033+ 745B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 745C 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1033+ 745E             >                org     $-1                 // alter last byte of Name just above to set
1033+ 745D A8          >                db      {b $} | END_BIT     // msb as name end
1033+ 745E             >
1033+ 745E 4B 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 7460             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 7460 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 7463             >
1033+ 7463             >
1033+ 7463             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 7463             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 7463             >
1033+ 7463             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 7463 A5 63 29 00                  dw      LIT, ")"                // [char] )
1035+ 7467 28 74                        dw      DOT_C                   // [compile] .c
1036+ 7469 CE 68                        dw      EXIT                    // ; immediate
1037+ 746B
1038+ 746B              //  ______________________________________________________________________
1039+ 746B              //
1040+ 746B              // (sgn)        a -- a f
1041+ 746B              // determines if char in addr a is a sign (+ or -), and in that case increments
1042+ 746B              // a flag. Returns f as the sign, true for negative, false for positive.
1043+ 746B              // called by NUMBER and (EXP)
1044+ 746B                              Colon_Def CSGN,  "(SGN)", is_normal
1044+ 746B             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1044+ 746B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1044+ 746B             >
1044+ 746B             >                // dummy db directives used to calculate length of namec
1044+ 746B 28 53 47 4E >                db      "(SGN)"
1044+ 746F 29          >
1044+ 7470             >len_NFA         defl    $ - temp_NFA
1044+ 7470             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1044+ 746B             >
1044+ 746B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1044+ 746C 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1044+ 7470 29          >
1044+ 7471             >                org     $-1                 // alter last byte of Name just above to set
1044+ 7470 A9          >                db      {b $} | END_BIT     // msb as name end
1044+ 7471             >
1044+ 7471 5B 74       >                dw      last_NFA            // Link to previous definition Name
1044+ 7473             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1044+ 7473 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1044+ 7476             >
1044+ 7476             >
1044+ 7476             >                endif           ; ok        // for other definitions it "points" the correct handler
1044+ 7476             >                // Use of "; ok" to suppress "warning[fwdref]"
1044+ 7476             >
1044+ 7476             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1045+ 7476 31 6A 86 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1045+ 747A C9 6A
1046+ 747C 31 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1046+ 7480 2D 00 6C 6E
1047+ 7484                                                              // if
1048+ 7484 D8 63                        dw      ZBRANCH
1049+ 7486 12 00                        dw      CSgn_Else_0 - $
1050+ 7488 04 6A                        dw          DROP                //      drop
1051+ 748A 86 69                        dw          ONE_PLUS            //      1+
1052+ 748C 0A 6C 7D 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1052+ 7490 93 6A
1053+ 7492 0A 6C                        dw          ONE                 //      1
1054+ 7494                                                              // else
1055+ 7494 C3 63                        dw      BRANCH
1056+ 7496 16 00                        dw      CSgn_Endif_0 - $
1057+ 7498              CSgn_Else_0:
1058+ 7498 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1058+ 749C 6C 6E
1059+ 749E                                                              //      if
1060+ 749E D8 63                        dw          ZBRANCH
1061+ 74A0 0A 00                        dw          CSgn_Endif_1 - $
1062+ 74A2 86 69                        dw              ONE_PLUS        //          1+
1063+ 74A4 0A 6C 7D 6D                  dw              ONE, DPL        //          1 dpl
1064+ 74A8 93 6A                        dw              PLUSSTORE       //          +!
1065+ 74AA              CSgn_Endif_1                                    //      endif
1066+ 74AA 01 6C                        dw          ZERO                //      0
1067+ 74AC              CSgn_Endif_0:                                   // endif
1068+ 74AC CE 68                        dw      EXIT
1069+ 74AE
1070+ 74AE              //  ______________________________________________________________________
1071+ 74AE              //
1072+ 74AE              // (number)     d a -- d1 a1
1073+ 74AE              // using the current BASE parse characters stored in address a
1074+ 74AE              // accumulating a double precision integer d
1075+ 74AE              // the process stops at the first not-convertible character
1076+ 74AE              // A double-number is kept in CPU registers as HLDE.
1077+ 74AE              // On the stack a double number is treated as two single numbers
1078+ 74AE              // where HL is on the top of the stack and DE is the second from top,
1079+ 74AE              // so in the stack memory it appears as LHED.
1080+ 74AE              // Instead, in 2VARIABLE a double number is stored as EDLH.
1081+ 74AE                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1081+ 74AE             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1081+ 74AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1081+ 74AE             >
1081+ 74AE             >                // dummy db directives used to calculate length of namec
1081+ 74AE 28 4E 55 4D >                db      "(NUMBER)"
1081+ 74B2 42 45 52 29 >
1081+ 74B6             >len_NFA         defl    $ - temp_NFA
1081+ 74B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1081+ 74AE             >
1081+ 74AE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1081+ 74AF 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1081+ 74B3 42 45 52 29 >
1081+ 74B7             >                org     $-1                 // alter last byte of Name just above to set
1081+ 74B6 A9          >                db      {b $} | END_BIT     // msb as name end
1081+ 74B7             >
1081+ 74B7 6B 74       >                dw      last_NFA            // Link to previous definition Name
1081+ 74B9             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1081+ 74B9 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1081+ 74BC             >
1081+ 74BC             >
1081+ 74BC             >                endif           ; ok        // for other definitions it "points" the correct handler
1081+ 74BC             >                // Use of "; ok" to suppress "warning[fwdref]"
1081+ 74BC             >
1081+ 74BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1082+ 74BC                                                              // begin
1083+ 74BC              CNumber_Begin:
1084+ 74BC 86 69                        dw          ONE_PLUS            //      1+
1085+ 74BE 31 6A F8 68                  dw          DUP, TO_R           //      dup >r
1086+ 74C2 C9 6A                        dw          CFETCH              //      @
1087+ 74C4 73 6D B2 6A                  dw          BASE, FETCH         //      base @
1088+ 74C8 72 64                        dw          DIGIT               //      digit
1089+ 74CA                                                              // while
1090+ 74CA D8 63                        dw      ZBRANCH
1091+ 74CC 2C 00                        dw      CNumber_While_end - $
1092+ 74CE 26 6A                        dw          SWAP                //      swap
1093+ 74D0 73 6D B2 6A                  dw          BASE, FETCH         //      base @
1094+ 74D4 01 68                        dw          UM_MUL              //      um*
1095+ 74D6 04 6A 3C 6A                  dw          DROP, ROT           //      drop rot
1096+ 74DA 73 6D B2 6A                  dw          BASE, FETCH         //      base @
1097+ 74DE 01 68                        dw          UM_MUL              //      um*
1098+ 74E0 74 69                        dw          DPLUS               //      d+
1099+ 74E2 7D 6D B2 6A                  dw          DPL, FETCH          //      dpl @
1100+ 74E6 86 69                        dw          ONE_PLUS            //      1+
1101+ 74E8                                                              //      if
1102+ 74E8 D8 63                        dw          ZBRANCH
1103+ 74EA 08 00                        dw          CNumber_Endif - $
1104+ 74EC 0A 6C 7D 6D                  dw              ONE, DPL        //          1 dpl
1105+ 74F0 93 6A                        dw              PLUSSTORE       //          +!
1106+ 74F2              CNumber_Endif:                                  //      endif
1107+ 74F2 0A 69                        dw             R_TO             //      r>  ( balance rp )
1108+ 74F4 C3 63                        dw      BRANCH
1109+ 74F6 C6 FF                        dw      CNumber_Begin - $
1110+ 74F8              CNumber_While_end:                              // repeat
1111+ 74F8 0A 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1112+ 74FA CE 68                        dw      EXIT                    // ;
1113+ 74FC
1114+ 74FC              //  ______________________________________________________________________
1115+ 74FC              //
1116+ 74FC              // number       a -- d
1117+ 74FC                              Colon_Def NUMBER,  "NUMBER", is_normal
1117+ 74FC             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1117+ 74FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 74FC             >
1117+ 74FC             >                // dummy db directives used to calculate length of namec
1117+ 74FC 4E 55 4D 42 >                db      "NUMBER"
1117+ 7500 45 52       >
1117+ 7502             >len_NFA         defl    $ - temp_NFA
1117+ 7502             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 74FC             >
1117+ 74FC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 74FD 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1117+ 7501 45 52       >
1117+ 7503             >                org     $-1                 // alter last byte of Name just above to set
1117+ 7502 D2          >                db      {b $} | END_BIT     // msb as name end
1117+ 7503             >
1117+ 7503 AE 74       >                dw      last_NFA            // Link to previous definition Name
1117+ 7505             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 7505 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1117+ 7508             >
1117+ 7508             >
1117+ 7508             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 7508             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 7508             >
1117+ 7508             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 7508 01 6C 01 6C                  dw      ZERO, ZERO              // 0 0
1119+ 750C 3C 6A                        dw      ROT                     // rot
1120+ 750E 73 74 F8 68                  dw      CSGN, TO_R              // (sgn) >r
1121+ 7512 26 6C 7D 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1121+ 7516 BD 6A
1122+ 7518 B9 74                        dw      CNUMBER                 // (number)
1123+ 751A 31 6A C9 6A                  dw      DUP, CFETCH             // dup c@
1124+ 751E A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1124+ 7522 6C 6E
1125+ 7524                                                              // if
1126+ 7524 D8 63                        dw      ZBRANCH
1127+ 7526 0A 00                        dw      Number_Endif_1 - $
1128+ 7528 01 6C 7D 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1128+ 752C BD 6A
1129+ 752E B9 74                        dw          CNUMBER             //      (number)
1130+ 7530              Number_Endif_1:                                 // endif
1131+ 7530 C9 6A 30 6C                  dw      CFETCH, BL              // c@ bl
1132+ 7534 60 6E 01 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1132+ 7538 E5 6F
1133+ 753A 0A 69                        dw      R_TO                    // r>
1134+ 753C                                                              // if
1135+ 753C D8 63                        dw      ZBRANCH
1136+ 753E 04 00                        dw      Number_Endif_2 - $
1137+ 7540 DE 69                        dw          DMINUS              //      dminus
1138+ 7542              Number_Endif_2:                                 // endif
1139+ 7542 CE 68                        dw      EXIT                    // ;
1140+ 7544
1141+ 7544              //  ______________________________________________________________________
1142+ 7544              //
1143+ 7544              // -find        a -- d
1144+ 7544                              Colon_Def LFIND,  "-FIND", is_normal
1144+ 7544             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1144+ 7544             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 7544             >
1144+ 7544             >                // dummy db directives used to calculate length of namec
1144+ 7544 2D 46 49 4E >                db      "-FIND"
1144+ 7548 44          >
1144+ 7549             >len_NFA         defl    $ - temp_NFA
1144+ 7549             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 7544             >
1144+ 7544 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 7545 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1144+ 7549 44          >
1144+ 754A             >                org     $-1                 // alter last byte of Name just above to set
1144+ 7549 C4          >                db      {b $} | END_BIT     // msb as name end
1144+ 754A             >
1144+ 754A FC 74       >                dw      last_NFA            // Link to previous definition Name
1144+ 754C             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 754C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1144+ 754F             >
1144+ 754F             >
1144+ 754F             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 754F             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 754F             >
1144+ 754F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 754F 30 6C 90 73                  dw      BL, WORD                // bl word
1146+ 7553 4E 6D B2 6A                  dw      CONTEXT, FETCH, FETCH   // context @ @
1146+ 7557 B2 6A
1147+ 7559 DF 64                        dw      C_FIND                  // (find)
1148+ 755B E4 6E                        dw      QDUP                    // ?dup
1149+ 755D 2B 69                        dw      ZEQUAL                  // 0=
1150+ 755F                                                              // if
1151+ 755F D8 63                        dw      ZBRANCH
1152+ 7561 08 00                        dw      LFind_Endif - $
1153+ 7563 0B 6E                        dw          HERE                //      here
1154+ 7565 53 6F                        dw          LATEST              //      latest
1155+ 7567 DF 64                        dw          C_FIND              //      (find)
1156+ 7569              LFind_Endif:                                    // endif
1157+ 7569 CE 68                        dw      EXIT                    // ;
1158+ 756B
1159+ 756B              //  ______________________________________________________________________
1160+ 756B              //
1161+ 756B              // (abort)      --
1162+ 756B                              Colon_Def CABORT,  "(ABORT)", is_normal
1162+ 756B             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1162+ 756B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 756B             >
1162+ 756B             >                // dummy db directives used to calculate length of namec
1162+ 756B 28 41 42 4F >                db      "(ABORT)"
1162+ 756F 52 54 29    >
1162+ 7572             >len_NFA         defl    $ - temp_NFA
1162+ 7572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 756B             >
1162+ 756B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 756C 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1162+ 7570 52 54 29    >
1162+ 7573             >                org     $-1                 // alter last byte of Name just above to set
1162+ 7572 A9          >                db      {b $} | END_BIT     // msb as name end
1162+ 7573             >
1162+ 7573 44 75       >                dw      last_NFA            // Link to previous definition Name
1162+ 7575             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 7575 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1162+ 7578             >
1162+ 7578             >
1162+ 7578             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 7578             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 7578             >
1162+ 7578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 7578 51 78                        dw      ABORT                   // abort
1164+ 757A CE 68                        dw      EXIT                    // ;
1165+ 757C
1166+ 757C              //  ______________________________________________________________________
1167+ 757C              //
1168+ 757C              // error        n --
1169+ 757C              // raise an error
1170+ 757C              // if WARNING is 0, prints "MSG#n".
1171+ 757C              // if WARNING is 1, prints line n of screen 4.
1172+ 757C              // if WARNING is -1 does (ABORT) that normally does ABORT
1173+ 757C              // value can be negative or beyond block 4.
1174+ 757C                              Colon_Def ERROR,  "ERROR", is_normal
1174+ 757C             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1174+ 757C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 757C             >
1174+ 757C             >                // dummy db directives used to calculate length of namec
1174+ 757C 45 52 52 4F >                db      "ERROR"
1174+ 7580 52          >
1174+ 7581             >len_NFA         defl    $ - temp_NFA
1174+ 7581             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 757C             >
1174+ 757C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 757D 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1174+ 7581 52          >
1174+ 7582             >                org     $-1                 // alter last byte of Name just above to set
1174+ 7581 D2          >                db      {b $} | END_BIT     // msb as name end
1174+ 7582             >
1174+ 7582 6B 75       >                dw      last_NFA            // Link to previous definition Name
1174+ 7584             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 7584 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1174+ 7587             >
1174+ 7587             >
1174+ 7587             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 7587             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 7587             >
1174+ 7587             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 7587 B9 6C B2 6A                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1175+ 758B 45 69
1176+ 758D                                                              // if
1177+ 758D D8 63                        dw      ZBRANCH
1178+ 758F 04 00                        dw      Error_Endif_1 - $
1179+ 7591 75 75                        dw          CABORT              //      (abort)
1180+ 7593              Error_Endif_1:                                  // endif
1181+ 7593 0B 6E 9A 71                  dw      HERE, COUNT, TYPE       // here count type
1181+ 7597 C2 71
1182+ 7599 E0 73                        dw      C_DOT_QUOTE             // .( ? )
1183+ 759B 02 3F 20                     db      2, "? "
1184+ 759E 46 7A                        dw      MESSAGE                 // message  ( forward )
1185+ 75A0 8C 6C B2 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1185+ 75A4 AB 68
1186+ 75A6 15 6D B2 6A                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1186+ 75AA E4 6E
1187+ 75AC                                                              // if
1188+ 75AC D8 63                        dw      ZBRANCH
1189+ 75AE 08 00                        dw      Error_Endif_2 - $
1190+ 75B0 1F 6D B2 6A                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1190+ 75B4 26 6A
1191+ 75B6              Error_Endif_2:                                  // endif
1192+ 75B6 0F 78                        dw      QUIT                    // quit ( forward )
1193+ 75B8 CE 68                        dw      EXIT                    // ;
1194+ 75BA              //  ______________________________________________________________________
1195+ 75BA              //
1196+ 75BA              // id.          nfa --
1197+ 75BA                              Colon_Def ID_DOT,  "ID.", is_normal
1197+ 75BA             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1197+ 75BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 75BA             >
1197+ 75BA             >                // dummy db directives used to calculate length of namec
1197+ 75BA 49 44 2E    >                db      "ID."
1197+ 75BD             >len_NFA         defl    $ - temp_NFA
1197+ 75BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 75BA             >
1197+ 75BA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 75BB 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1197+ 75BE             >                org     $-1                 // alter last byte of Name just above to set
1197+ 75BD AE          >                db      {b $} | END_BIT     // msb as name end
1197+ 75BE             >
1197+ 75BE 7C 75       >                dw      last_NFA            // Link to previous definition Name
1197+ 75C0             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 75C0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1197+ 75C3             >
1197+ 75C3             >
1197+ 75C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 75C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 75C3             >
1197+ 75C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 75C3 7C 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1198+ 75C7 20 00 A5 63
1198+ 75CB 60 00
1199+ 75CD 2B 73                        dw      FILL                    // fill
1200+ 75CF 31 6A 99 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1200+ 75D3 64 6F
1201+ 75D5 F6 69 60 6E                  dw      OVER, SUBTRACT          // over -
1202+ 75D9 7C 73 26 6A                  dw      PAD, SWAP               // pad swap
1203+ 75DD D2 67                        dw      CMOVE                   // cmove
1204+ 75DF 7C 73 9A 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1204+ 75E3 A5 63 1F 00
1205+ 75E7 6C 68                        dw      AND_OP                  // and  ( use only lower bits )
1206+ 75E9 C2 71 1B 6F                  dw      TYPE, SPACE             // type
1207+ 75ED CE 68                        dw      EXIT                    // ;
1208+ 75EF
1209+ 75EF              //  ______________________________________________________________________
1210+ 75EF              //
1211+ 75EF              // code         -- cccc
1212+ 75EF                              Colon_Def CODE,  "CODE", is_normal
1212+ 75EF             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1212+ 75EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 75EF             >
1212+ 75EF             >                // dummy db directives used to calculate length of namec
1212+ 75EF 43 4F 44 45 >                db      "CODE"
1212+ 75F3             >len_NFA         defl    $ - temp_NFA
1212+ 75F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 75EF             >
1212+ 75EF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 75F0 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1212+ 75F4             >                org     $-1                 // alter last byte of Name just above to set
1212+ 75F3 C5          >                db      {b $} | END_BIT     // msb as name end
1212+ 75F4             >
1212+ 75F4 BA 75       >                dw      last_NFA            // Link to previous definition Name
1212+ 75F6             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 75F6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 75F9             >
1212+ 75F9             >
1212+ 75F9             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 75F9             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 75F9             >
1212+ 75F9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 75F9 4C 75                        dw      LFIND                   // -find
1214+ 75FB                                                              // if
1215+ 75FB D8 63                        dw      ZBRANCH
1216+ 75FD 10 00                        dw      Code_Endif - $
1217+ 75FF 04 6A                        dw          DROP                //      drop
1218+ 7601 C1 6F C0 75                  dw          TO_NAME, ID_DOT     //      >name id.
1219+ 7605 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1219+ 7609 46 7A
1220+ 760B 1B 6F                        dw          SPACE               //      space
1221+ 760D              Code_Endif:                                     // endif
1222+ 760D 0B 6E                        dw      HERE                    // here
1223+ 760F                                                              // ( ---- here begins NFA ---- )
1224+ 760F 31 6A C9 6A                  dw      DUP, CFETCH             // dup c@
1225+ 7613 AB 6C B2 6A                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1225+ 7617 B5 6E
1226+ 7619 86 69 1C 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1227+ 761D 31 6A                        dw      DUP                     // dup
1228+ 761F A5 63                        dw      LIT
1229+ 7621 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1230+ 7623 A7 6A                        dw      TOGGLE                  // toggle
1231+ 7625 0B 6E 90 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1232+ 7629 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1232+ 762D A7 6A
1233+ 762F                                                              // ( ---- here is LFA ---- )
1234+ 762F 53 6F 29 6E                  dw      LATEST, COMMA           // latest ,
1235+ 7633 5C 6D B2 6A                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1235+ 7637 BD 6A
1236+ 7639                                                              // ( ---- here is LFA ---- )
1237+ 7639              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1238+ 7639 CE 68                        dw      EXIT                    // ;
1239+ 763B
1240+ 763B              //  ______________________________________________________________________
1241+ 763B              //
1242+ 763B              // create       -- cccc     ( compile time )
1243+ 763B              //              -- a        ( run time )
1244+ 763B                              Colon_Def CREATE,  "CREATE", is_normal
1244+ 763B             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1244+ 763B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 763B             >
1244+ 763B             >                // dummy db directives used to calculate length of namec
1244+ 763B 43 52 45 41 >                db      "CREATE"
1244+ 763F 54 45       >
1244+ 7641             >len_NFA         defl    $ - temp_NFA
1244+ 7641             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 763B             >
1244+ 763B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 763C 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1244+ 7640 54 45       >
1244+ 7642             >                org     $-1                 // alter last byte of Name just above to set
1244+ 7641 C5          >                db      {b $} | END_BIT     // msb as name end
1244+ 7642             >
1244+ 7642 EF 75       >                dw      last_NFA            // Link to previous definition Name
1244+ 7644             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 7644 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1244+ 7647             >
1244+ 7647             >
1244+ 7647             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 7647             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 7647             >
1244+ 7647             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 7647 F6 75 CE 70                  dw      CODE, SMUDGE            // code smudge
1246+ 764B A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1246+ 764F 3B 6E
1247+ 7651 A5 63 E0 6B                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1247+ 7655 29 6E
1248+ 7657 28 71                        dw      C_SEMICOLON_CODE
1249+ 7659                              // this routine is called from the call coded in CFA
1250+ 7659              Create_Ptr:
1251+ 7659
1252+ 7659
1253+ 7659
1254+ 7659                              next
1254+ 7659 DD E9       >                jp      (ix)
1255+ 765B
1256+ 765B              //  ______________________________________________________________________
1257+ 765B              //
1258+ 765B              // [compile]    -- cccc     ( compile time )
1259+ 765B                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1259+ 765B             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1259+ 765B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 765B             >
1259+ 765B             >                // dummy db directives used to calculate length of namec
1259+ 765B 5B 43 4F 4D >                db      "[COMPILE]"
1259+ 765F 50 49 4C 45 >
1259+ 7663 5D          >
1259+ 7664             >len_NFA         defl    $ - temp_NFA
1259+ 7664             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 765B             >
1259+ 765B C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 765C 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1259+ 7660 50 49 4C 45 >
1259+ 7664 5D          >
1259+ 7665             >                org     $-1                 // alter last byte of Name just above to set
1259+ 7664 DD          >                db      {b $} | END_BIT     // msb as name end
1259+ 7665             >
1259+ 7665 3B 76       >                dw      last_NFA            // Link to previous definition Name
1259+ 7667             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 7667 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1259+ 766A             >
1259+ 766A             >
1259+ 766A             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 766A             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 766A             >
1259+ 766A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 766A 4C 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1261+ 766C 2B 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1262+ 766E 01 6C E5 6F                  dw      ZERO, QERROR            // 0 ?error
1263+ 7672 04 6A                        dw      DROP                    // drop       (  cfa  )
1264+ 7674 29 6E                        dw      COMMA                   // ,
1265+ 7676 CE 68                        dw      EXIT                    // ; immediate
1266+ 7678
1267+ 7678              //  ______________________________________________________________________
1268+ 7678              //
1269+ 7678              // literal      n --      ( compile time )
1270+ 7678                              Colon_Def LITERAL,  "LITERAL", is_immediate
1270+ 7678             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1270+ 7678             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 7678             >
1270+ 7678             >                // dummy db directives used to calculate length of namec
1270+ 7678 4C 49 54 45 >                db      "LITERAL"
1270+ 767C 52 41 4C    >
1270+ 767F             >len_NFA         defl    $ - temp_NFA
1270+ 767F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 7678             >
1270+ 7678 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 7679 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1270+ 767D 52 41 4C    >
1270+ 7680             >                org     $-1                 // alter last byte of Name just above to set
1270+ 767F CC          >                db      {b $} | END_BIT     // msb as name end
1270+ 7680             >
1270+ 7680 5B 76       >                dw      last_NFA            // Link to previous definition Name
1270+ 7682             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 7682 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1270+ 7685             >
1270+ 7685             >
1270+ 7685             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 7685             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 7685             >
1270+ 7685             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 7685 68 6D B2 6A                  dw      STATE, FETCH            // state @
1272+ 7689                                                              // if
1273+ 7689 D8 63                        dw      ZBRANCH
1274+ 768B 08 00                        dw      Literal_Endif - $
1275+ 768D 7E 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1276+ 7691 29 6E                        dw          COMMA               //      ,
1277+ 7693              Literal_Endif:                                  // endif
1278+ 7693 CE 68                        dw      EXIT                    // ; immediate
1279+ 7695
1280+ 7695              //  ______________________________________________________________________
1281+ 7695              //
1282+ 7695              // dliteral     n --      ( compile time )
1283+ 7695                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1283+ 7695             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1283+ 7695             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 7695             >
1283+ 7695             >                // dummy db directives used to calculate length of namec
1283+ 7695 44 4C 49 54 >                db      "DLITERAL"
1283+ 7699 45 52 41 4C >
1283+ 769D             >len_NFA         defl    $ - temp_NFA
1283+ 769D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 7695             >
1283+ 7695 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 7696 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1283+ 769A 45 52 41 4C >
1283+ 769E             >                org     $-1                 // alter last byte of Name just above to set
1283+ 769D CC          >                db      {b $} | END_BIT     // msb as name end
1283+ 769E             >
1283+ 769E 78 76       >                dw      last_NFA            // Link to previous definition Name
1283+ 76A0             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 76A0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 76A3             >
1283+ 76A3             >
1283+ 76A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 76A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 76A3             >
1283+ 76A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 76A3 68 6D B2 6A                  dw      STATE, FETCH            // state @
1285+ 76A7                                                              // if
1286+ 76A7 D8 63                        dw      ZBRANCH
1287+ 76A9 08 00                        dw      DLiteral_Endif - $
1288+ 76AB 26 6A                        dw          SWAP                //      swap
1289+ 76AD 82 76 82 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1290+ 76B1              DLiteral_Endif:                                 // endif
1291+ 76B1 CE 68                        dw      EXIT                    // ; immediate
1292+ 76B3
1293+ 76B3              //  ______________________________________________________________________
1294+ 76B3              //
1295+ 76B3              // [char]       n --      ( compile time )
1296+ 76B3              // inside colon definition, gets first character from next input word
1297+ 76B3              // and compiles it as literal.
1298+ 76B3                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1298+ 76B3             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1298+ 76B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ 76B3             >
1298+ 76B3             >                // dummy db directives used to calculate length of namec
1298+ 76B3 5B 43 48 41 >                db      "[CHAR]"
1298+ 76B7 52 5D       >
1298+ 76B9             >len_NFA         defl    $ - temp_NFA
1298+ 76B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ 76B3             >
1298+ 76B3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ 76B4 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1298+ 76B8 52 5D       >
1298+ 76BA             >                org     $-1                 // alter last byte of Name just above to set
1298+ 76B9 DD          >                db      {b $} | END_BIT     // msb as name end
1298+ 76BA             >
1298+ 76BA 95 76       >                dw      last_NFA            // Link to previous definition Name
1298+ 76BC             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 76BC CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1298+ 76BF             >
1298+ 76BF             >
1298+ 76BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 76BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 76BF             >
1298+ 76BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 76BF FC 73 82 76                  dw      CHAR, LITERAL           // char [compile] literal
1300+ 76C3 CE 68                        dw      EXIT                    // ; immediate
1301+ 76C5
1302+ 76C5              //  ______________________________________________________________________
1303+ 76C5              //
1304+ 76C5              // 0x00         n --      ( compile time )
1305+ 76C5                              Colon_Def NUL_WORD,  $00, is_immediate
1305+ 76C5             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1305+ 76C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 76C5             >
1305+ 76C5             >                // dummy db directives used to calculate length of namec
1305+ 76C5 00          >                db      $00
1305+ 76C6             >len_NFA         defl    $ - temp_NFA
1305+ 76C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 76C5             >
1305+ 76C5 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 76C6 00          >                db      $00               // name string in 7-bit ascii, but
1305+ 76C7             >                org     $-1                 // alter last byte of Name just above to set
1305+ 76C6 80          >                db      {b $} | END_BIT     // msb as name end
1305+ 76C7             >
1305+ 76C7 B3 76       >                dw      last_NFA            // Link to previous definition Name
1305+ 76C9             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 76C9 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1305+ 76CC             >
1305+ 76CC             >
1305+ 76CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 76CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 76CC             >
1305+ 76CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 76CC 15 6D B2 6A                  dw      BLK, FETCH, ONE         // blk @ 1
1306+ 76D0 0A 6C
1307+ 76D2 A6 6E                        dw      GREATER                 // > if
1308+ 76D4                                                              // if
1309+ 76D4 D8 63                        dw      ZBRANCH
1310+ 76D6 28 00                        dw      Nul_Else_1 - $
1311+ 76D8 0A 6C 15 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1311+ 76DC 93 6A
1312+ 76DE 01 6C 1F 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1312+ 76E2 BD 6A
1313+ 76E4 15 6D B2 6A                  dw          BLK, FETCH          //      blk @
1314+ 76E8 55 6C                        dw          BSCR                //      b/scr
1315+ 76EA 90 69                        dw          ONE_SUBTRACT        //      1 -
1316+ 76EC 6C 68                        dw          AND_OP              //      and  ( this is tricky )
1317+ 76EE 2B 69                        dw          ZEQUAL              //      0=
1318+ 76F0                                                              //      if
1319+ 76F0 D8 63                        dw          ZBRANCH
1320+ 76F2 08 00                        dw          Nul_Endif_2 - $
1321+ 76F4 19 70                        dw              QEXEC           //          ?exec
1322+ 76F6 0A 69 04 6A                  dw              R_TO, DROP      //          r> drop
1323+ 76FA              Nul_Endif_2:                                    //      endif
1324+ 76FA C3 63                        dw      BRANCH
1325+ 76FC 06 00                        dw      Nul_Endif_1 - $
1326+ 76FE              Nul_Else_1:                                     // else
1327+ 76FE 0A 69 04 6A                  dw          R_TO, DROP          //      r> drop
1328+ 7702              Nul_Endif_1:                                    // endif
1329+ 7702 CE 68                        dw      EXIT                    // ;
1330+ 7704
1331+ 7704              //  ______________________________________________________________________
1332+ 7704              //
1333+ 7704              // ?stack       --
1334+ 7704              // Raise error #1 if stack is empty and you pop it
1335+ 7704              // Raise error #7 if stack is full.
1336+ 7704              // This means SP must always stay between HERE and FFFF
1337+ 7704              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1338+ 7704              // for Next 8K MMU paging this is $DOE8
1339+ 7704                              Colon_Def QSTACK, "?STACK", is_normal
1339+ 7704             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1339+ 7704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ 7704             >
1339+ 7704             >                // dummy db directives used to calculate length of namec
1339+ 7704 3F 53 54 41 >                db      "?STACK"
1339+ 7708 43 4B       >
1339+ 770A             >len_NFA         defl    $ - temp_NFA
1339+ 770A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ 7704             >
1339+ 7704 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ 7705 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1339+ 7709 43 4B       >
1339+ 770B             >                org     $-1                 // alter last byte of Name just above to set
1339+ 770A CB          >                db      {b $} | END_BIT     // msb as name end
1339+ 770B             >
1339+ 770B C5 76       >                dw      last_NFA            // Link to previous definition Name
1339+ 770D             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 770D CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1339+ 7710             >
1339+ 7710             >
1339+ 7710             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 7710             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 7710             >
1339+ 7710             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 7710 9E 68                        dw      SPFETCH                 // sp@
1341+ 7712 8C 6C B2 6A                  dw      S0, FETCH               // s0 @
1342+ 7716 26 6A 7A 6E                  dw      SWAP, ULESS             // swap u<
1343+ 771A 0A 6C E5 6F                  dw      ONE, QERROR             // 1 ?error
1344+ 771E 0B 6E                        dw      HERE                    // here
1345+ 7720 8C 6C B2 6A                  dw      S0, FETCH, LESS         // s0 @ <
1345+ 7724 8C 6E
1346+ 7726                                                              // if
1347+ 7726 D8 63                        dw      ZBRANCH
1348+ 7728 14 00                        dw      QStack_Endif - $
1349+ 772A 9E 68                        dw          SPFETCH             //      sp@
1350+ 772C 0B 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1350+ 7730 80 00
1351+ 7732 69 69 7A 6E                  dw          PLUS, ULESS         //      plus u<
1352+ 7736 A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1352+ 773A E5 6F
1353+ 773C              QStack_Endif:                                   // endif
1354+ 773C CE 68                        dw      EXIT                    // ;
1355+ 773E
1356+ 773E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  773E                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 773E              //  ______________________________________________________________________
   2+ 773E              //
   3+ 773E              //  L2.asm
   4+ 773E              //
   5+ 773E              //  Level-2
   6+ 773E              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 773E              //  ______________________________________________________________________
   8+ 773E
   9+ 773E
  10+ 773E              //  ______________________________________________________________________
  11+ 773E              //
  12+ 773E              // interpret    --
  13+ 773E              // This is the text interpreter.
  14+ 773E              // It executes or compiles, depending on STATE, the text coming from
  15+ 773E              // current input stream.
  16+ 773E              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 773E              // the word is interpreted as numeric and converted, using current BASE,
  18+ 773E              // leaving on top of stack a single or double precision number, depending
  19+ 773E              // on the presence of a decimal point.
  20+ 773E              // If the number conversion fails, the terminal is notified with ? followed
  21+ 773E              // by the offending word.
  22+ 773E                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 773E             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 773E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 773E             >
  22+ 773E             >                // dummy db directives used to calculate length of namec
  22+ 773E 49 4E 54 45 >                db      "INTERPRET"
  22+ 7742 52 50 52 45 >
  22+ 7746 54          >
  22+ 7747             >len_NFA         defl    $ - temp_NFA
  22+ 7747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 773E             >
  22+ 773E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 773F 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7743 52 50 52 45 >
  22+ 7747 54          >
  22+ 7748             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7747 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7748             >
  22+ 7748 04 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 774A             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 774A CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 774D             >
  22+ 774D             >
  22+ 774D             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 774D             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 774D             >
  22+ 774D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 774D
  24+ 774D              Interpret_Begin:                                        // begin
  25+ 774D 4C 75                        dw          LFIND                       //      -find
  26+ 774F                                                                      //      if
  27+ 774F D8 63                        dw          ZBRANCH
  28+ 7751 1A 00                        dw          Interpret_Else_1 - $
  29+ 7753 68 6D B2 6A                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7757 8C 6E
  30+ 7759                                                                      //          if
  31+ 7759 D8 63                        dw              ZBRANCH
  32+ 775B 08 00                        dw              Interpret_Else_2 - $
  33+ 775D 9C 70                        dw                  COMPILE_XT          //              compile,
  34+ 775F                                                                      //          else
  35+ 775F C3 63                        dw              BRANCH
  36+ 7761 06 00                        dw              Interpret_Endif_2 - $
  37+ 7763              Interpret_Else_2:
  38+ 7763 B8 63 AE 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7767              Interpret_Endif_2:                                      //          endif
  40+ 7767                                                                      //      else
  41+ 7767 C3 63                        dw          BRANCH
  42+ 7769 1A 00                        dw          Interpret_Endif_1 - $
  43+ 776B              Interpret_Else_1:
  44+ 776B 0B 6E 05 75                  dw              HERE, NUMBER            //          here number
  45+ 776F 7D 6D B2 6A                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7773 86 69
  46+ 7775                                                                      //          if
  47+ 7775 D8 63                        dw              ZBRANCH
  48+ 7777 08 00                        dw              Interpret_Else_3 - $
  49+ 7779              //              dw                  NMODE, FETCH        //              nmode @
  50+ 7779              //                                                      //              if
  51+ 7779              //              dw                  ZBRANCH
  52+ 7779              //              dw                  Interpret_Endif_4 - $
  53+ 7779              //              dw                      ONE, ZERO       //                  1 0
  54+ 7779              //              dw                      TWO_DROP        //                  2drop
  55+ 7779              //Interpret_Endif_4:                                      //              endif
  56+ 7779 A0 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 777B                                                                      //          else
  58+ 777B C3 63                        dw              BRANCH
  59+ 777D 06 00                        dw              Interpret_Endif_3 - $
  60+ 777F              Interpret_Else_3:
  61+ 777F 04 6A                        dw                  DROP                //              drop
  62+ 7781 82 76                        dw                  LITERAL             //              [compile]  literal
  63+ 7783              Interpret_Endif_3:                                      //          endif
  64+ 7783              Interpret_Endif_1:                                      //      endif
  65+ 7783 0D 77                        dw          QSTACK                      //      ?stack
  66+ 7785 DF 66                        dw          QTERMINAL                   //      ?terminal
  67+ 7787                                                                      //      if
  68+ 7787 D8 63                        dw          ZBRANCH
  69+ 7789 04 00                        dw          Interpret_Endif_5 - $
  70+ 778B 75 75                        dw              CABORT                  //          (abort)
  71+ 778D              Interpret_Endif_5:                                      //      endif
  72+ 778D C3 63                        dw      BRANCH
  73+ 778F BE FF                        dw      Interpret_Begin - $
  74+ 7791 CE 68                        dw      EXIT                            // ;
  75+ 7793
  76+ 7793              //  ______________________________________________________________________
  77+ 7793              //
  78+ 7793              // vocabulary   -- cccc     ( compile time )
  79+ 7793              // Defining word used in the form   VOCABULARY cccc
  80+ 7793              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 7793              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 7793              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 7793              // so new definitions can be inserted in that vocabulary.
  84+ 7793                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 7793             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 7793             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 7793             >
  84+ 7793             >                // dummy db directives used to calculate length of namec
  84+ 7793 56 4F 43 41 >                db      "VOCABULARY"
  84+ 7797 42 55 4C 41 >
  84+ 779B 52 59       >
  84+ 779D             >len_NFA         defl    $ - temp_NFA
  84+ 779D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 7793             >
  84+ 7793 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 7794 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 7798 42 55 4C 41 >
  84+ 779C 52 59       >
  84+ 779E             >                org     $-1                 // alter last byte of Name just above to set
  84+ 779D D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 779E             >
  84+ 779E 3E 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77A0             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77A0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77A3             >
  84+ 77A3             >
  84+ 77A3             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77A3             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77A3             >
  84+ 77A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77A3
  86+ 77A3 62 71                        dw      CBUILDS
  87+ 77A5
  88+ 77A5 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77A9 29 6E
  89+ 77AB 5C 6D B2 6A                  dw      CURRENT, FETCH          // current @
  90+ 77AF B3 69 29 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77B3 0B 6E                        dw      HERE                    // here
  92+ 77B5 DD 6C B2 6A                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77B9 29 6E
  93+ 77BB DD 6C BD 6A                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77BF
  95+ 77BF 73 71                        dw      DOES_TO                 // does>
  96+ 77C1              Vocabulary_Does:
  97+ 77C1 A8 69                        dw      CELL_PLUS               // cell+
  98+ 77C3 4E 6D BD 6A                  dw      CONTEXT, STORE          // context !
  99+ 77C7 CE 68                        dw      EXIT                    // ;
 100+ 77C9
 101+ 77C9              //  ______________________________________________________________________
 102+ 77C9              //
 103+ 77C9              // forth        --
 104+ 77C9              // Name of the first vocabulary.
 105+ 77C9              // It makes FORTH the CONTEXT vocabulary.
 106+ 77C9              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77C9              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77C9              // of a colon definition to be able to select the vocabulary.
 109+ 77C9
 110+ 77C9                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77C9             >
 110+ 77C9             >                // dummy db directives used to calculate length of namec
 110+ 77C9 46 4F 52 54 >                db      "FORTH"
 110+ 77CD 48          >
 110+ 77CE             >len_NFA         defl    $ - temp_NFA
 110+ 77CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77C9             >
 110+ 77C9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77CA 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77CE 48          >
 110+ 77CF             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77CE C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77CF             >
 110+ 77CF 93 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77D1             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77D1 CD 80 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77D4             >
 110+ 77D4             >
 110+ 77D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77D4             >
 110+ 77D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77D4 C1 77                        dw      Vocabulary_Does
 112+ 77D6 81 A0                        db      $81, $A0
 113+ 77D8              Forth_Latest_Ptr:
 114+ 77D8 3D 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 77DA              Voclink_Ptr:
 116+ 77DA 00 00                        dw      0
 117+ 77DC              // Any new vocabulary is structured as follow:
 118+ 77DC              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 77DC              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 77DC              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 77DC              //       at creations it points to the null-word of its parent vocabulary
 122+ 77DC              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 77DC              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 77DC              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 77DC              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 77DC              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 77DC              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 77DC
 129+ 77DC              //  ______________________________________________________________________
 130+ 77DC              //
 131+ 77DC              // definitions  --
 132+ 77DC              // Used in the form  cccc DEFINITIONS
 133+ 77DC              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 77DC              // vocabulary cccc.
 135+ 77DC                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 77DC             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 77DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 77DC             >
 135+ 77DC             >                // dummy db directives used to calculate length of namec
 135+ 77DC 44 45 46 49 >                db      "DEFINITIONS"
 135+ 77E0 4E 49 54 49 >
 135+ 77E4 4F 4E 53    >
 135+ 77E7             >len_NFA         defl    $ - temp_NFA
 135+ 77E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 77DC             >
 135+ 77DC 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 77DD 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 77E1 4E 49 54 49 >
 135+ 77E5 4F 4E 53    >
 135+ 77E8             >                org     $-1                 // alter last byte of Name just above to set
 135+ 77E7 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 77E8             >
 135+ 77E8 C9 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 77EA             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 77EA CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 77ED             >
 135+ 77ED             >
 135+ 77ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 77ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 77ED             >
 135+ 77ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 77ED 4E 6D B2 6A                  dw      CONTEXT, FETCH          // context @
 137+ 77F1 5C 6D BD 6A                  dw      CURRENT, STORE          // current !
 138+ 77F5 CE 68                        dw      EXIT                    // ;
 139+ 77F7
 140+ 77F7              //  ______________________________________________________________________
 141+ 77F7              //
 142+ 77F7              // (            -- cccc )
 143+ 77F7              // the following text is interpreted as a comment until a closing )
 144+ 77F7                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 77F7             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 77F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 77F7             >
 144+ 77F7             >                // dummy db directives used to calculate length of namec
 144+ 77F7 28          >                db      "("
 144+ 77F8             >len_NFA         defl    $ - temp_NFA
 144+ 77F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 77F7             >
 144+ 77F7 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 77F8 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 77F9             >                org     $-1                 // alter last byte of Name just above to set
 144+ 77F8 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 77F9             >
 144+ 77F9 DC 77       >                dw      last_NFA            // Link to previous definition Name
 144+ 77FB             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 77FB CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 77FE             >
 144+ 77FE             >
 144+ 77FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 77FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 77FE             >
 144+ 77FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 77FE A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7802 90 73 04 6A                  dw      WORD, DROP              // word drop
 147+ 7806 CE 68                        dw      EXIT                    // ;
 148+ 7808
 149+ 7808              //  ______________________________________________________________________
 150+ 7808              //
 151+ 7808              // quit         --
 152+ 7808              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7808                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7808             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7808             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7808             >
 153+ 7808             >                // dummy db directives used to calculate length of namec
 153+ 7808 51 55 49 54 >                db      "QUIT"
 153+ 780C             >len_NFA         defl    $ - temp_NFA
 153+ 780C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7808             >
 153+ 7808 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7809 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 780D             >                org     $-1                 // alter last byte of Name just above to set
 153+ 780C D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 780D             >
 153+ 780D F7 77       >                dw      last_NFA            // Link to previous definition Name
 153+ 780F             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 780F CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7812             >
 153+ 7812             >
 153+ 7812             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7812             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7812             >
 153+ 7812             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7812
 155+ 7812 DE 6D B2 6A                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7816 78 67 04 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 781A 01 6C DE 6D                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 781E BD 6A
 158+ 7820 01 6C 15 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7824 BD 6A
 159+ 7826 A9 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7828                                                              // begin
 161+ 7828              Quit_Begin:
 162+ 7828 95 6C B2 6A                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 782C C1 68
 163+ 782E C5 67                        dw      CR                      //      cr
 164+ 7830 0D 73                        dw      QUERY                   //      query
 165+ 7832              Next_Breakpoint_1:
 166+ 7832 4A 77                        dw      INTERPRET               //      interpret
 167+ 7834 68 6D B2 6A                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7838 2B 69
 168+ 783A                                                              //      if
 169+ 783A D8 63                        dw      ZBRANCH
 170+ 783C 07 00                        dw      Quit_Endif - $
 171+ 783E E0 73                        dw          C_DOT_QUOTE
 172+ 7840 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7843              Quit_Endif:                                     //      else
 174+ 7843                                                              // again
 175+ 7843 C3 63                        dw      BRANCH
 176+ 7845 E3 FF                        dw      Quit_Begin - $
 177+ 7847 CE 68                        dw      EXIT                    // ;
 178+ 7849
 179+ 7849              //  ______________________________________________________________________
 180+ 7849              //
 181+ 7849              // abort        --
 182+ 7849                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7849             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7849             >
 182+ 7849             >                // dummy db directives used to calculate length of namec
 182+ 7849 41 42 4F 52 >                db      "ABORT"
 182+ 784D 54          >
 182+ 784E             >len_NFA         defl    $ - temp_NFA
 182+ 784E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7849             >
 182+ 7849 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 784A 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 784E 54          >
 182+ 784F             >                org     $-1                 // alter last byte of Name just above to set
 182+ 784E D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 784F             >
 182+ 784F 08 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7851             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7851 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7854             >
 182+ 7854             >
 182+ 7854             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7854             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7854             >
 182+ 7854             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7854 8C 6C B2 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7858 AB 68
 184+ 785A 11 71                        dw      DECIMAL                 // decimal
 185+ 785C D1 77                        dw      FORTH                   // [compile] forth
 186+ 785E EA 77                        dw      DEFINITIONS             // definitions
 187+ 7860              Autoexec_Ptr:
 188+ 7860 44 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7862 0F 78                        dw      QUIT                    // quit
 190+ 7864 CE 68                        dw      EXIT                    // ;
 191+ 7866
 192+ 7866              //  ______________________________________________________________________
 193+ 7866              //
 194+ 7866              // warm         --
 195+ 7866                              Colon_Def WARM, "WARM", is_normal
 195+ 7866             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 7866             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 7866             >
 195+ 7866             >                // dummy db directives used to calculate length of namec
 195+ 7866 57 41 52 4D >                db      "WARM"
 195+ 786A             >len_NFA         defl    $ - temp_NFA
 195+ 786A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 7866             >
 195+ 7866 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 7867 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 786B             >                org     $-1                 // alter last byte of Name just above to set
 195+ 786A CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 786B             >
 195+ 786B 49 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 786D             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 786D CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7870             >
 195+ 7870             >
 195+ 7870             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7870             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7870             >
 195+ 7870             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7870 FF 7B                        dw      BLK_INIT                // blk-init
 197+ 7872 F4 83                        dw      SPLASH                  // splash
 198+ 7874 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7878 FE 6E
 199+ 787A 51 78                        dw      ABORT                   // abort
 200+ 787C CE 68                        dw      EXIT                    // exit
 201+ 787E
 202+ 787E              //  ______________________________________________________________________
 203+ 787E              //
 204+ 787E              // cold         --
 205+ 787E                              Colon_Def COLD, "COLD", is_normal
 205+ 787E             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 787E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 787E             >
 205+ 787E             >                // dummy db directives used to calculate length of namec
 205+ 787E 43 4F 4C 44 >                db      "COLD"
 205+ 7882             >len_NFA         defl    $ - temp_NFA
 205+ 7882             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 787E             >
 205+ 787E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 787F 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 7883             >                org     $-1                 // alter last byte of Name just above to set
 205+ 7882 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 7883             >
 205+ 7883 66 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 7885             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 7885 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 7888             >
 205+ 7888             >
 205+ 7888             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 7888             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 7888             >
 205+ 7888             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 7888 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 788C A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 7890 B2 6A                        dw      FETCH                   // @
 209+ 7892 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 7896 69 69
 210+ 7898 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 789C D2 67                        dw      CMOVE
 212+ 789E A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78A2 B2 6A                        dw      FETCH                   // @
 214+ 78A4 A5 63 D8 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78A8 BD 6A                        dw      STORE                   // !
 216+ 78AA 01 6C 0B 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78AE BD 6A
 217+ 78B0 E9 6C B2 6A                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78B4 31 6A
 218+ 78B6 AE 6D BD 6A                  dw      USE, STORE              // use !
 219+ 78BA B9 6D BD 6A                  dw      PREV, STORE             // prev !
 220+ 78BE A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78C2 CE 6D BD 6A
 221+ 78C6              //              dw      LIT, 8
 222+ 78C6              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78C6 13 6C 00 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78CA BD 6A
 224+ 78CC 6D 78        Warm_Start:     dw      WARM
 225+ 78CE 85 78        Cold_Start:     dw      COLD
 226+ 78D0 CE 68                        dw      EXIT
 227+ 78D2
 228+ 78D2              //  ______________________________________________________________________
 229+ 78D2              WarmRoutine:
 230+ 78D2              ColdRoutine:
 231+ 78D2 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78D6 D9                           exx
 233+ 78D7 E5                           push    hl
 234+ 78D8 D9                           exx
 235+ 78D9
 236+ 78D9 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 78DD ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 78E1              //              nop
 239+ 78E1 2A 7A 63                     ld      hl, (R0_origin)
 240+ 78E4              //              nop
 241+ 78E4                              ldrphl
 241+ 78E4 22 96 63    >                ld      (RP_Pointer),hl
 242+ 78E7 01 CC 78                     ld      bc, Warm_Start
 243+ 78EA 38 02                        jr      c, Warm_Skip
 244+ 78EC 03                           inc     bc
 245+ 78ED 03                           inc     bc
 246+ 78EE              Warm_Skip:
 247+ 78EE                              next
 247+ 78EE DD E9       >                jp      (ix)
 248+ 78F0
 249+ 78F0              //  ______________________________________________________________________
 250+ 78F0              //
 251+ 78F0              // basic        --
 252+ 78F0                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 78F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 78F0             >
 252+ 78F0             >                // dummy db directives used to calculate length of namec
 252+ 78F0 42 41 53 49 >                db      "BASIC"
 252+ 78F4 43          >
 252+ 78F5             >len_NFA         defl    $ - temp_NFA
 252+ 78F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 78F0             >
 252+ 78F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 78F1 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 78F5 43          >
 252+ 78F6             >                org     $-1                 // alter last byte of Name just above to set
 252+ 78F5 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 78F6             >
 252+ 78F6 7E 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 78F8             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 78F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 78F8 ~           >
 252+ 78F8 ~           >
 252+ 78F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 78F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 78F8             >
 252+ 78F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 78F8 C1                           pop     bc
 254+ 78F9 21 00 00                     ld      hl, 0
 255+ 78FC 39                           add     hl, sp
 256+ 78FD ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7901              //              nop
 258+ 7901 22 6E 63                     ld      (SP_Basic),hl
 259+ 7904 D9                           exx
 260+ 7905 E1                           pop     hl
 261+ 7906 D9                           exx
 262+ 7907 C9                           ret     // to Basic
 263+ 7908
 264+ 7908              //  ______________________________________________________________________
 265+ 7908              //
 266+ 7908              // +-           n1 n2 -- n3
 267+ 7908              // leaves n1 with the sign of n2 as n3.
 268+ 7908                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7908             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7908             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7908             >
 268+ 7908             >                // dummy db directives used to calculate length of namec
 268+ 7908 2B 2D       >                db      "+-"
 268+ 790A             >len_NFA         defl    $ - temp_NFA
 268+ 790A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7908             >
 268+ 7908 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7909 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 790B             >                org     $-1                 // alter last byte of Name just above to set
 268+ 790A AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 790B             >
 268+ 790B F0 78       >                dw      last_NFA            // Link to previous definition Name
 268+ 790D             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 790D CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7910             >
 268+ 7910             >
 268+ 7910             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7910             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7910             >
 268+ 7910             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7910 45 69                        dw      ZLESS                   // 0<
 270+ 7912                                                              // if
 271+ 7912 D8 63                        dw      ZBRANCH
 272+ 7914 04 00                        dw      Plus_Minus_Endif - $
 273+ 7916 CA 69                        dw          MINUS               //      minus
 274+ 7918              Plus_Minus_Endif:                               // endif
 275+ 7918 CE 68                        dw      EXIT                    // ;
 276+ 791A
 277+ 791A              //  ______________________________________________________________________
 278+ 791A              //
 279+ 791A              // d+-          d1 n -- d2
 280+ 791A              // leaves d1 with the sign of n as d2.
 281+ 791A                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 791A             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 791A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 791A             >
 281+ 791A             >                // dummy db directives used to calculate length of namec
 281+ 791A 44 2B 2D    >                db      "D+-"
 281+ 791D             >len_NFA         defl    $ - temp_NFA
 281+ 791D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 791A             >
 281+ 791A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 791B 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 791E             >                org     $-1                 // alter last byte of Name just above to set
 281+ 791D AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 791E             >
 281+ 791E 08 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7920             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7920 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7923             >
 281+ 7923             >
 281+ 7923             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7923             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7923             >
 281+ 7923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7923 45 69                        dw      ZLESS                   // 0<
 283+ 7925                                                              // if
 284+ 7925 D8 63                        dw      ZBRANCH
 285+ 7927 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7929 DE 69                        dw          DMINUS              //      dminus
 287+ 792B              DPlus_Minus_Endif:                              // endif
 288+ 792B CE 68                        dw      EXIT                    // ;
 289+ 792D
 290+ 792D              //  ______________________________________________________________________
 291+ 792D              //
 292+ 792D              // abs          n1 -- n2
 293+ 792D                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 792D             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 792D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 792D             >
 293+ 792D             >                // dummy db directives used to calculate length of namec
 293+ 792D 41 42 53    >                db      "ABS"
 293+ 7930             >len_NFA         defl    $ - temp_NFA
 293+ 7930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 792D             >
 293+ 792D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 792E 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7931             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7930 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7931             >
 293+ 7931 1A 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7933             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7933 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7936             >
 293+ 7936             >
 293+ 7936             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7936             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7936             >
 293+ 7936             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7936 31 6A                        dw      DUP                     // dup
 295+ 7938 0D 79                        dw      PLUS_MINUS              // +-
 296+ 793A CE 68                        dw      EXIT                    // ;
 297+ 793C
 298+ 793C              //  ______________________________________________________________________
 299+ 793C              //
 300+ 793C              // dabs         d1 -- d2
 301+ 793C                              Colon_Def DABS, "DABS", is_normal
 301+ 793C             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 793C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 793C             >
 301+ 793C             >                // dummy db directives used to calculate length of namec
 301+ 793C 44 41 42 53 >                db      "DABS"
 301+ 7940             >len_NFA         defl    $ - temp_NFA
 301+ 7940             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 793C             >
 301+ 793C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 793D 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7941             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7940 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7941             >
 301+ 7941 2D 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7943             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7943 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7946             >
 301+ 7946             >
 301+ 7946             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7946             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7946             >
 301+ 7946             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7946 31 6A                        dw      DUP                     // dup
 303+ 7948 20 79                        dw      DPLUS_MINUS             // d+-
 304+ 794A CE 68                        dw      EXIT                    // ;
 305+ 794C
 306+ 794C              //  ______________________________________________________________________
 307+ 794C              //
 308+ 794C              // m*           n1 n2 -- d
 309+ 794C              // multiply two integer giving a double
 310+ 794C                              Colon_Def MMUL, "M*", is_normal
 310+ 794C             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 794C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 794C             >
 310+ 794C             >                // dummy db directives used to calculate length of namec
 310+ 794C 4D 2A       >                db      "M*"
 310+ 794E             >len_NFA         defl    $ - temp_NFA
 310+ 794E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 794C             >
 310+ 794C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 794D 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 794F             >                org     $-1                 // alter last byte of Name just above to set
 310+ 794E AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 794F             >
 310+ 794F 3C 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7951             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7951 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7954             >
 310+ 7954             >
 310+ 7954             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7954             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7954             >
 310+ 7954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7954 86 6A 8D 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7958 F8 68
 312+ 795A 33 79 26 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 795E 33 79 01 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7962 0A 69 20 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 7966 CE 68                        dw      EXIT                    // ;
 316+ 7968
 317+ 7968              //  ______________________________________________________________________
 318+ 7968              //
 319+ 7968              // m/mod        d n -- q r
 320+ 7968              // multiply two integer giving a double
 321+ 7968                              Colon_Def MDIVM, "M/MOD", is_normal
 321+ 7968             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 321+ 7968             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 7968             >
 321+ 7968             >                // dummy db directives used to calculate length of namec
 321+ 7968 4D 2F 4D 4F >                db      "M/MOD"
 321+ 796C 44          >
 321+ 796D             >len_NFA         defl    $ - temp_NFA
 321+ 796D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 7968             >
 321+ 7968 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 7969 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 321+ 796D 44          >
 321+ 796E             >                org     $-1                 // alter last byte of Name just above to set
 321+ 796D C4          >                db      {b $} | END_BIT     // msb as name end
 321+ 796E             >
 321+ 796E 4C 79       >                dw      last_NFA            // Link to previous definition Name
 321+ 7970             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 7970 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 321+ 7973             >
 321+ 7973             >
 321+ 7973             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 7973             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 7973             >
 321+ 7973             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 7973 F6 69 F8 68                  dw      OVER, TO_R, TO_R        // over >r >r
 322+ 7977 F8 68
 323+ 7979 43 79 1C 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 323+ 797D 33 79
 324+ 797F 30 68                        dw      UMDIVMOD                // um/mod
 325+ 7981 0A 69                        dw      R_TO                    // r>
 326+ 7983 1C 69 8D 68                  dw      R_OP, XOR_OP            // r xor
 327+ 7987 0D 79 26 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 328+ 798B 0A 69                        dw      R_TO                    // r>
 329+ 798D 0D 79 26 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 330+ 7991 CE 68                        dw      EXIT                    // ;
 331+ 7993
 332+ 7993              //  ______________________________________________________________________
 333+ 7993              //
 334+ 7993              // m/           d n -- q
 335+ 7993              // multiply two integer giving a double
 336+ 7993                              Colon_Def MDIV, "M/", is_normal
 336+ 7993             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 336+ 7993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ 7993             >
 336+ 7993             >                // dummy db directives used to calculate length of namec
 336+ 7993 4D 2F       >                db      "M/"
 336+ 7995             >len_NFA         defl    $ - temp_NFA
 336+ 7995             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ 7993             >
 336+ 7993 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ 7994 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 336+ 7996             >                org     $-1                 // alter last byte of Name just above to set
 336+ 7995 AF          >                db      {b $} | END_BIT     // msb as name end
 336+ 7996             >
 336+ 7996 68 79       >                dw      last_NFA            // Link to previous definition Name
 336+ 7998             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 7998 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 799B             >
 336+ 799B             >
 336+ 799B             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 799B             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 799B             >
 336+ 799B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 799B 70 79 0D 6A                  dw      MDIVM, NIP
 338+ 799F CE 68                        dw      EXIT                    // ;
 339+ 79A1
 340+ 79A1              //  ______________________________________________________________________
 341+ 79A1              //
 342+ 79A1              // *            n1 n2 -- n3
 343+ 79A1              // multiply two integer
 344+ 79A1                              Colon_Def MUL, "*", is_normal
 344+ 79A1             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 344+ 79A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 79A1             >
 344+ 79A1             >                // dummy db directives used to calculate length of namec
 344+ 79A1 2A          >                db      "*"
 344+ 79A2             >len_NFA         defl    $ - temp_NFA
 344+ 79A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 79A1             >
 344+ 79A1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 79A2 2A          >                db      "*"               // name string in 7-bit ascii, but
 344+ 79A3             >                org     $-1                 // alter last byte of Name just above to set
 344+ 79A2 AA          >                db      {b $} | END_BIT     // msb as name end
 344+ 79A3             >
 344+ 79A3 93 79       >                dw      last_NFA            // Link to previous definition Name
 344+ 79A5             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 79A5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 79A8             >
 344+ 79A8             >
 344+ 79A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 79A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 79A8             >
 344+ 79A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 79A8 51 79 04 6A                  dw      MMUL, DROP              // m* drop
 346+ 79AC CE 68                        dw      EXIT                    // ;
 347+ 79AE
 348+ 79AE              //  ______________________________________________________________________
 349+ 79AE              //
 350+ 79AE              // /mod         n1 n2 -- n3 n4
 351+ 79AE              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 352+ 79AE              // The remainder has the sign of n1
 353+ 79AE                              Colon_Def DIVMOD, "/MOD", is_normal
 353+ 79AE             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 353+ 79AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ 79AE             >
 353+ 79AE             >                // dummy db directives used to calculate length of namec
 353+ 79AE 2F 4D 4F 44 >                db      "/MOD"
 353+ 79B2             >len_NFA         defl    $ - temp_NFA
 353+ 79B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ 79AE             >
 353+ 79AE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ 79AF 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 353+ 79B3             >                org     $-1                 // alter last byte of Name just above to set
 353+ 79B2 C4          >                db      {b $} | END_BIT     // msb as name end
 353+ 79B3             >
 353+ 79B3 A1 79       >                dw      last_NFA            // Link to previous definition Name
 353+ 79B5             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 79B5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 353+ 79B8             >
 353+ 79B8             >
 353+ 79B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 79B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 79B8             >
 353+ 79B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 79B8 F8 68 4E 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 354+ 79BC 0A 69
 355+ 79BE 70 79                        dw      MDIVM                   // m/mod
 356+ 79C0 CE 68                        dw      EXIT                    // ;
 357+ 79C2
 358+ 79C2              //  ______________________________________________________________________
 359+ 79C2              //
 360+ 79C2              // /            n1 n2 -- n3
 361+ 79C2              // division
 362+ 79C2                              Colon_Def DIV, "/", is_normal
 362+ 79C2             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 362+ 79C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 362+ 79C2             >
 362+ 79C2             >                // dummy db directives used to calculate length of namec
 362+ 79C2 2F          >                db      "/"
 362+ 79C3             >len_NFA         defl    $ - temp_NFA
 362+ 79C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 362+ 79C2             >
 362+ 79C2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 362+ 79C3 2F          >                db      "/"               // name string in 7-bit ascii, but
 362+ 79C4             >                org     $-1                 // alter last byte of Name just above to set
 362+ 79C3 AF          >                db      {b $} | END_BIT     // msb as name end
 362+ 79C4             >
 362+ 79C4 AE 79       >                dw      last_NFA            // Link to previous definition Name
 362+ 79C6             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 362+ 79C6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 362+ 79C9             >
 362+ 79C9             >
 362+ 79C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 362+ 79C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 362+ 79C9             >
 362+ 79C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 363+ 79C9 B5 79 0D 6A                  dw      DIVMOD, NIP             // /mod nip
 364+ 79CD CE 68                        dw      EXIT                    // ;
 365+ 79CF
 366+ 79CF              //  ______________________________________________________________________
 367+ 79CF              //
 368+ 79CF              // mod          n1 n2 -- n3
 369+ 79CF                              Colon_Def MOD, "MOD", is_normal
 369+ 79CF             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 369+ 79CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 79CF             >
 369+ 79CF             >                // dummy db directives used to calculate length of namec
 369+ 79CF 4D 4F 44    >                db      "MOD"
 369+ 79D2             >len_NFA         defl    $ - temp_NFA
 369+ 79D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 79CF             >
 369+ 79CF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 79D0 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 369+ 79D3             >                org     $-1                 // alter last byte of Name just above to set
 369+ 79D2 C4          >                db      {b $} | END_BIT     // msb as name end
 369+ 79D3             >
 369+ 79D3 C2 79       >                dw      last_NFA            // Link to previous definition Name
 369+ 79D5             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 79D5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 369+ 79D8             >
 369+ 79D8             >
 369+ 79D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 79D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 79D8             >
 369+ 79D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 79D8 B5 79 04 6A                  dw      DIVMOD, DROP            // /mod drop
 371+ 79DC CE 68                        dw      EXIT                    // ;
 372+ 79DE
 373+ 79DE              //  ______________________________________________________________________
 374+ 79DE              //
 375+ 79DE              // */mod        n1 n2 n3 -- n4 n5
 376+ 79DE              // leaves the quotient n5 and the remainder n4 of the operation
 377+ 79DE              // (n1 * n2) / n3. The intermediate passage through a double number
 378+ 79DE              // avoids loss of precision
 379+ 79DE                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 379+ 79DE             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 379+ 79DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 79DE             >
 379+ 79DE             >                // dummy db directives used to calculate length of namec
 379+ 79DE 2A 2F 4D 4F >                db      "*/MOD"
 379+ 79E2 44          >
 379+ 79E3             >len_NFA         defl    $ - temp_NFA
 379+ 79E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 79DE             >
 379+ 79DE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 79DF 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 379+ 79E3 44          >
 379+ 79E4             >                org     $-1                 // alter last byte of Name just above to set
 379+ 79E3 C4          >                db      {b $} | END_BIT     // msb as name end
 379+ 79E4             >
 379+ 79E4 CF 79       >                dw      last_NFA            // Link to previous definition Name
 379+ 79E6             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 79E6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 79E9             >
 379+ 79E9             >
 379+ 79E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 79E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 79E9             >
 379+ 79E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 79E9 F8 68 51 79                  dw      TO_R, MMUL              // >r  m*
 381+ 79ED 0A 69 70 79                  dw      R_TO, MDIVM             // r>  m/mod
 382+ 79F1 CE 68                        dw      EXIT                    // ;
 383+ 79F3
 384+ 79F3              //  ______________________________________________________________________
 385+ 79F3              //
 386+ 79F3              // */          n1 n2 n3 -- n4
 387+ 79F3              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 388+ 79F3                              Colon_Def MUL_DIV, "*/", is_normal
 388+ 79F3             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 388+ 79F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 79F3             >
 388+ 79F3             >                // dummy db directives used to calculate length of namec
 388+ 79F3 2A 2F       >                db      "*/"
 388+ 79F5             >len_NFA         defl    $ - temp_NFA
 388+ 79F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 79F3             >
 388+ 79F3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 79F4 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 388+ 79F6             >                org     $-1                 // alter last byte of Name just above to set
 388+ 79F5 AF          >                db      {b $} | END_BIT     // msb as name end
 388+ 79F6             >
 388+ 79F6 DE 79       >                dw      last_NFA            // Link to previous definition Name
 388+ 79F8             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 79F8 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 79FB             >
 388+ 79FB             >
 388+ 79FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 79FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 79FB             >
 388+ 79FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 79FB E6 79                        dw     MUL_DIV_MOD              // */mod
 390+ 79FD 0D 6A                        dw     NIP                      // nip
 391+ 79FF CE 68                        dw     EXIT                     // ;
 392+ 7A01
 393+ 7A01
 394+ 7A01              //  ______________________________________________________________________
 395+ 7A01              //
 396+ 7A01              // m/mod        ud1 u2 -- u3 ud4
 397+ 7A01              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 398+ 7A01              // All terms are unsigned.
 399+ 7A01              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 400+ 7A01              //              dw      TO_R                    // >r           ( ud1 )
 401+ 7A01              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 402+ 7A01              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 403+ 7A01              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 404+ 7A01              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 405+ 7A01              //              dw      EXIT                    // ;
 406+ 7A01
 407+ 7A01              //  ______________________________________________________________________
 408+ 7A01              //
 409+ 7A01              // (line)       n1 n2 -- a b
 410+ 7A01              // sends the line n1 of block n2 to the disk buffer.
 411+ 7A01              // it returns the address a and ca counter b = C/L meaning a whole line.
 412+ 7A01                              Colon_Def CLINE, "(LINE)", is_normal
 412+ 7A01             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 412+ 7A01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 7A01             >
 412+ 7A01             >                // dummy db directives used to calculate length of namec
 412+ 7A01 28 4C 49 4E >                db      "(LINE)"
 412+ 7A05 45 29       >
 412+ 7A07             >len_NFA         defl    $ - temp_NFA
 412+ 7A07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 7A01             >
 412+ 7A01 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 7A02 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 412+ 7A06 45 29       >
 412+ 7A08             >                org     $-1                 // alter last byte of Name just above to set
 412+ 7A07 A9          >                db      {b $} | END_BIT     // msb as name end
 412+ 7A08             >
 412+ 7A08 F3 79       >                dw      last_NFA            // Link to previous definition Name
 412+ 7A0A             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 7A0A CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 7A0D             >
 412+ 7A0D             >
 412+ 7A0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 7A0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 7A0D             >
 412+ 7A0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 7A0D F8 68                        dw      TO_R                    // >r
 414+ 7A0F AE 6B                        dw      NOOP                    // noop
 415+ 7A11 3B 6C                        dw      CL                      // c/l
 416+ 7A13 48 6C E6 79                  dw      BBUF, MUL_DIV_MOD       // */mod
 417+ 7A17 0A 69                        dw      R_TO                    // r>
 418+ 7A19 55 6C A5 79                  dw      BSCR, MUL, PLUS         // b/scr * +
 418+ 7A1D 69 69
 419+ 7A1F 1E 7D                        dw      BLOCK                   // block   ( forward )
 420+ 7A21 69 69                        dw      PLUS                    // +
 421+ 7A23 AE 6B                        dw      NOOP                    // noop
 422+ 7A25 3B 6C                        dw      CL                      // c/l
 423+ 7A27 CE 68                        dw      EXIT                    // ;
 424+ 7A29
 425+ 7A29              //  ______________________________________________________________________
 426+ 7A29              //
 427+ 7A29              // .line        n1 n2 --
 428+ 7A29              // Sends to output line  n1  of screen n2.
 429+ 7A29                              Colon_Def DOT_LINE, ".LINE", is_normal
 429+ 7A29             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 429+ 7A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 7A29             >
 429+ 7A29             >                // dummy db directives used to calculate length of namec
 429+ 7A29 2E 4C 49 4E >                db      ".LINE"
 429+ 7A2D 45          >
 429+ 7A2E             >len_NFA         defl    $ - temp_NFA
 429+ 7A2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 7A29             >
 429+ 7A29 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 7A2A 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 429+ 7A2E 45          >
 429+ 7A2F             >                org     $-1                 // alter last byte of Name just above to set
 429+ 7A2E C5          >                db      {b $} | END_BIT     // msb as name end
 429+ 7A2F             >
 429+ 7A2F 01 7A       >                dw      last_NFA            // Link to previous definition Name
 429+ 7A31             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 7A31 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 7A34             >
 429+ 7A34             >
 429+ 7A34             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 7A34             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 7A34             >
 429+ 7A34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 7A34 0A 7A 28 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 430+ 7A38 C2 71
 431+ 7A3A CE 68                        dw      EXIT                    // ;
 432+ 7A3C
 433+ 7A3C              //  ______________________________________________________________________
 434+ 7A3C              //
 435+ 7A3C              // message       n1 n2 --
 436+ 7A3C              // prints error message to current channel.
 437+ 7A3C              // if WARNING is 0, prints "MSG#n".
 438+ 7A3C              // if WARNING is 1, prints line n of screen 4.
 439+ 7A3C              // if WARNING is -1, see ERROR
 440+ 7A3C              // value can be negative or beyond block 4.
 441+ 7A3C                              Colon_Def MESSAGE, "MESSAGE", is_normal
 441+ 7A3C             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 441+ 7A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 441+ 7A3C             >
 441+ 7A3C             >                // dummy db directives used to calculate length of namec
 441+ 7A3C 4D 45 53 53 >                db      "MESSAGE"
 441+ 7A40 41 47 45    >
 441+ 7A43             >len_NFA         defl    $ - temp_NFA
 441+ 7A43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 441+ 7A3C             >
 441+ 7A3C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 441+ 7A3D 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 441+ 7A41 41 47 45    >
 441+ 7A44             >                org     $-1                 // alter last byte of Name just above to set
 441+ 7A43 C5          >                db      {b $} | END_BIT     // msb as name end
 441+ 7A44             >
 441+ 7A44 29 7A       >                dw      last_NFA            // Link to previous definition Name
 441+ 7A46             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 441+ 7A46 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 441+ 7A49             >
 441+ 7A49             >
 441+ 7A49             >                endif           ; ok        // for other definitions it "points" the correct handler
 441+ 7A49             >                // Use of "; ok" to suppress "warning[fwdref]"
 441+ 7A49             >
 441+ 7A49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 442+ 7A49 B9 6C B2 6A                  dw      WARNING, FETCH          // warning @
 443+ 7A4D                                                              // if
 444+ 7A4D D8 63                        dw      ZBRANCH
 445+ 7A4F 18 00                        dw      Message_Else - $
 446+ 7A51 A5 63 04 00                  dw          LIT, 4              //      4
 447+ 7A55 40 6D B2 6A                  dw          OFFSET, FETCH       //      offset @
 448+ 7A59 55 6C C6 79                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 448+ 7A5D 60 6E
 449+ 7A5F 31 7A                        dw          DOT_LINE            //      .line
 450+ 7A61 1B 6F                        dw          SPACE               //      space
 451+ 7A63                                                              // else
 452+ 7A63
 453+ 7A63 C3 63                        dw      BRANCH
 454+ 7A65 0B 00                        dw      Message_ENdif - $
 455+ 7A67              Message_Else:
 456+ 7A67 E0 73                        dw          C_DOT_QUOTE         //      .( msg#)
 457+ 7A69 04 6D 73 67                  db          4, "msg#"
 457+ 7A6D 23
 458+ 7A6E E6 82                        dw          DOT                 //      .  ( forward )
 459+ 7A70              Message_ENdif:                                  // endif
 460+ 7A70 CE 68                        dw      EXIT                    // ;
 461+ 7A72
 462+ 7A72
 463+ 7A72              //  ______________________________________________________________________
 464+ 7A72              //
 465+ 7A72              // device
 466+ 7A72                              Variable_Def DEVICE,   "DEVICE",   2
 466+ 7A72             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 466+ 7A72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 7A72             >
 466+ 7A72             >                // dummy db directives used to calculate length of namec
 466+ 7A72 44 45 56 49 >                db      "DEVICE"
 466+ 7A76 43 45       >
 466+ 7A78             >len_NFA         defl    $ - temp_NFA
 466+ 7A78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 7A72             >
 466+ 7A72 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 7A73 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 466+ 7A77 43 45       >
 466+ 7A79             >                org     $-1                 // alter last byte of Name just above to set
 466+ 7A78 C5          >                db      {b $} | END_BIT     // msb as name end
 466+ 7A79             >
 466+ 7A79 3C 7A       >                dw      last_NFA            // Link to previous definition Name
 466+ 7A7B             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 7A7B CD E0 6B    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 466+ 7A7E             >
 466+ 7A7E             >
 466+ 7A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 7A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 7A7E             >
 466+ 7A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 7A7E 02 00       >                dw      2
 467+ 7A80
 468+ 7A80              //  ______________________________________________________________________
 469+ 7A80              //
 470+ 7A80              // inkey        -- c | 0
 471+ 7A80              // call ROM inkey$ routine, returns c or "zero".
 472+ 7A80
 473+ 7A80                              New_Def INKEY, "INKEY", is_code, is_normal
 473+ 7A80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 473+ 7A80             >
 473+ 7A80             >                // dummy db directives used to calculate length of namec
 473+ 7A80 49 4E 4B 45 >                db      "INKEY"
 473+ 7A84 59          >
 473+ 7A85             >len_NFA         defl    $ - temp_NFA
 473+ 7A85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 473+ 7A80             >
 473+ 7A80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 473+ 7A81 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 473+ 7A85 59          >
 473+ 7A86             >                org     $-1                 // alter last byte of Name just above to set
 473+ 7A85 D9          >                db      {b $} | END_BIT     // msb as name end
 473+ 7A86             >
 473+ 7A86 72 7A       >                dw      last_NFA            // Link to previous definition Name
 473+ 7A88             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 473+ 7A88 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 473+ 7A88 ~           >
 473+ 7A88 ~           >
 473+ 7A88             >                endif           ; ok        // for other definitions it "points" the correct handler
 473+ 7A88             >                // Use of "; ok" to suppress "warning[fwdref]"
 473+ 7A88             >
 473+ 7A88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 474+ 7A88
 475+ 7A88 C5                           push    bc
 476+ 7A89 ED 73 92 63                  ld      (SP_Saved), sp
 477+ 7A8D 31 61 63                     ld      sp, Cold_origin - 5
 478+ 7A90 DD E5                        push    ix
 479+ 7A92 CD E6 15                     call    $15E6                   // instead of 15E9
 480+ 7A95 DD E1                        pop     ix
 481+ 7A97 ED 7B 92 63                  ld      sp, (SP_Saved)
 482+ 7A9B 6F                           ld      l, a
 483+ 7A9C 26 00                        ld      h, 0
 484+ 7A9E C1                           pop     bc
 485+ 7A9F                              psh1
 485+ 7A9F E5          >                push    hl
 485+ 7AA0 DD E9       >                jp      (ix)
 486+ 7AA2
 487+ 7AA2              //  ______________________________________________________________________
 488+ 7AA2              //
 489+ 7AA2              // select      n --
 490+ 7AA2              // selects the given channel number
 491+ 7AA2
 492+ 7AA2                              New_Def SELECT, "SELECT", is_code, is_normal
 492+ 7AA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7AA2             >
 492+ 7AA2             >                // dummy db directives used to calculate length of namec
 492+ 7AA2 53 45 4C 45 >                db      "SELECT"
 492+ 7AA6 43 54       >
 492+ 7AA8             >len_NFA         defl    $ - temp_NFA
 492+ 7AA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7AA2             >
 492+ 7AA2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7AA3 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 492+ 7AA7 43 54       >
 492+ 7AA9             >                org     $-1                 // alter last byte of Name just above to set
 492+ 7AA8 D4          >                db      {b $} | END_BIT     // msb as name end
 492+ 7AA9             >
 492+ 7AA9 80 7A       >                dw      last_NFA            // Link to previous definition Name
 492+ 7AAB             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 7AAB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 492+ 7AAB ~           >
 492+ 7AAB ~           >
 492+ 7AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7AAB             >
 492+ 7AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7AAB E1                           pop     hl
 494+ 7AAC C5                           push    bc
 495+ 7AAD 7D                           ld      a, l
 496+ 7AAE ED 73 92 63                  ld      (SP_Saved), sp
 497+ 7AB2 31 61 63                     ld      sp, Cold_origin - 5
 498+ 7AB5 DD E5                        push    ix
 499+ 7AB7 CD 01 16                     call    $1601
 500+ 7ABA DD E1                        pop     ix
 501+ 7ABC ED 7B 92 63                  ld      sp, (SP_Saved)
 502+ 7AC0 C1                           pop     bc
 503+ 7AC1
 504+ 7AC1                              next
 504+ 7AC1 DD E9       >                jp      (ix)
 505+ 7AC3
 506+ 7AC3              //  ______________________________________________________________________
 507+ 7AC3
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7AC3                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7AC3              //  ______________________________________________________________________
   2+ 7AC3              //
   3+ 7AC3              //  next-opt.asm
   4+ 7AC3              //
   5+ 7AC3              //  ZX Spectrum Next - peculiar definitions
   6+ 7AC3              //  ______________________________________________________________________
   7+ 7AC3
   8+ 7AC3              //  ______________________________________________________________________
   9+ 7AC3              //
  10+ 7AC3              // reg@         n -- b
  11+ 7AC3              // read Next REGister n giving byte b
  12+ 7AC3              //
  13+ 7AC3              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7AC3              //              dw      LIT, $243B
  15+ 7AC3              //              dw      PSTORE
  16+ 7AC3              //              dw      LIT, $253B
  17+ 7AC3              //              dw      PFETCH
  18+ 7AC3              //              dw      EXIT
  19+ 7AC3                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7AC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7AC3             >
  19+ 7AC3             >                // dummy db directives used to calculate length of namec
  19+ 7AC3 52 45 47 40 >                db      "REG@"
  19+ 7AC7             >len_NFA         defl    $ - temp_NFA
  19+ 7AC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7AC3             >
  19+ 7AC3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7AC4 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7AC8             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7AC7 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7AC8             >
  19+ 7AC8 A2 7A       >                dw      last_NFA            // Link to previous definition Name
  19+ 7ACA             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7ACA ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7ACA ~           >
  19+ 7ACA ~           >
  19+ 7ACA             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7ACA             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7ACA             >
  19+ 7ACA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7ACA D9                           exx
  21+ 7ACB 01 3B 24                     ld      bc, $243B
  22+ 7ACE E1                           pop     hl
  23+ 7ACF ED 69                        out     (c), l
  24+ 7AD1 04                           inc     b
  25+ 7AD2 ED 68                        in      l, (c)
  26+ 7AD4 E5                           push    hl
  27+ 7AD5 D9                           exx
  28+ 7AD6                              next
  28+ 7AD6 DD E9       >                jp      (ix)
  29+ 7AD8
  30+ 7AD8
  31+ 7AD8              //  ______________________________________________________________________
  32+ 7AD8              //
  33+ 7AD8              // reg!         b n --
  34+ 7AD8              // write value b to Next REGister n
  35+ 7AD8              //
  36+ 7AD8              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7AD8              //              dw      LIT, $243B
  38+ 7AD8              //              dw      PSTORE
  39+ 7AD8              //              dw      LIT, $253B
  40+ 7AD8              //              dw      PSTORE
  41+ 7AD8              //              dw      EXIT
  42+ 7AD8                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7AD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7AD8             >
  42+ 7AD8             >                // dummy db directives used to calculate length of namec
  42+ 7AD8 52 45 47 21 >                db      "REG!"
  42+ 7ADC             >len_NFA         defl    $ - temp_NFA
  42+ 7ADC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7AD8             >
  42+ 7AD8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7AD9 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7ADD             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7ADC A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7ADD             >
  42+ 7ADD C3 7A       >                dw      last_NFA            // Link to previous definition Name
  42+ 7ADF             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7ADF ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7ADF ~           >
  42+ 7ADF ~           >
  42+ 7ADF             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7ADF             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7ADF             >
  42+ 7ADF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7ADF D9                           exx
  44+ 7AE0 01 3B 24                     ld      bc, $243B
  45+ 7AE3 E1                           pop     hl
  46+ 7AE4 ED 69                        out     (c), l
  47+ 7AE6 04                           inc     b
  48+ 7AE7 E1                           pop     hl
  49+ 7AE8 ED 69                        out     (c), l
  50+ 7AEA D9                           exx
  51+ 7AEB                              next
  51+ 7AEB DD E9       >                jp      (ix)
  52+ 7AED
  53+ 7AED
  54+ 7AED              //  ______________________________________________________________________
  55+ 7AED              //
  56+ 7AED              // mmu7@        -- n
  57+ 7AED              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7AED
  59+ 7AED                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7AED             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7AED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7AED             >
  59+ 7AED             >                // dummy db directives used to calculate length of namec
  59+ 7AED 4D 4D 55 37 >                db      "MMU7@"
  59+ 7AF1 40          >
  59+ 7AF2             >len_NFA         defl    $ - temp_NFA
  59+ 7AF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7AED             >
  59+ 7AED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7AEE 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7AF2 40          >
  59+ 7AF3             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7AF2 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7AF3             >
  59+ 7AF3 D8 7A       >                dw      last_NFA            // Link to previous definition Name
  59+ 7AF5             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7AF5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7AF8             >
  59+ 7AF8             >
  59+ 7AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7AF8             >
  59+ 7AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7AF8 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7AFC CA 7A
  61+ 7AFE CE 68                        dw      EXIT
  62+ 7B00
  63+ 7B00              //  ______________________________________________________________________
  64+ 7B00              //
  65+ 7B00              // mmu7!        n --
  66+ 7B00              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B00              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B00
  69+ 7B00                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B00             >
  69+ 7B00             >                // dummy db directives used to calculate length of namec
  69+ 7B00 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B04 21          >
  69+ 7B05             >len_NFA         defl    $ - temp_NFA
  69+ 7B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B00             >
  69+ 7B00 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B01 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B05 21          >
  69+ 7B06             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B05 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B06             >
  69+ 7B06 ED 7A       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B08             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B08 ~           >
  69+ 7B08 ~           >
  69+ 7B08             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B08             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B08             >
  69+ 7B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B08 E1                           pop     hl
  71+ 7B09 7D                           ld      a, l
  72+ 7B0A ED 92 57                     nextreg 87, a
  73+ 7B0D
  74+ 7B0D                              next
  74+ 7B0D DD E9       >                jp      (ix)
  75+ 7B0F
  76+ 7B0F              //  ______________________________________________________________________
  77+ 7B0F              //
  78+ 7B0F              // >far         ha -- a n
  79+ 7B0F              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B0F              // take lower bits of H and L as an offset from E000h
  81+ 7B0F              // then return address  a  between E000h-FFFFh
  82+ 7B0F              // and page number n  between 64-71 (40h-47h)
  83+ 7B0F              // For example, in hex:
  84+ 7B0F              //   0000 >FAR  gives  40.E000
  85+ 7B0F              //   1FFF >FAR  gives  40.FFFF
  86+ 7B0F              //   2000 >FAR  gives  41.E000
  87+ 7B0F              //   3FFF >FAR  gives  41.FFFF
  88+ 7B0F              //   EFFF >FAR  gives  47.EFFF
  89+ 7B0F              //   FFFF >FAR  gives  47.FFFF
  90+ 7B0F              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B0F              //                pop     de
  92+ 7B0F              //                ld      a, d
  93+ 7B0F              //                and     $E0
  94+ 7B0F              //                rlca
  95+ 7B0F              //                rlca
  96+ 7B0F              //                rlca
  97+ 7B0F              //                add     $40
  98+ 7B0F              //                ld      l, a
  99+ 7B0F              //                ld      h, 0
 100+ 7B0F              //                ld      a, d
 101+ 7B0F              //                or      $E0
 102+ 7B0F              //                ld      d, a
 103+ 7B0F              //                push    hl
 104+ 7B0F              //                push    de
 105+ 7B0F              //                next
 106+ 7B0F
 107+ 7B0F              //  ______________________________________________________________________
 108+ 7B0F              //
 109+ 7B0F              // <far         a n  -- ha
 110+ 7B0F              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B0F              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B0F              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B0F              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B0F              //                pop     de                  // page number in e
 115+ 7B0F              //                pop     hl                  // address in hl
 116+ 7B0F              //                ld      a, e
 117+ 7B0F              //                sub     $40                 // reduced to 0-7
 118+ 7B0F              //                rrca
 119+ 7B0F              //                rrca
 120+ 7B0F              //                rrca
 121+ 7B0F              //                ld      d, a                // save to d bits 765
 122+ 7B0F              //                ld      a, h                // drops
 123+ 7B0F              //                and     $1F
 124+ 7B0F              //                or      d
 125+ 7B0F              //                ld      h, a
 126+ 7B0F              //
 127+ 7B0F              //                psh1
 128+ 7B0F
 129+ 7B0F              //  ______________________________________________________________________
 130+ 7B0F              //
 131+ 7B0F              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B0F              // NextZXOS call wrapper.
 133+ 7B0F              //  n1 = hl register parameter value
 134+ 7B0F              //  n2 = de register parameter value
 135+ 7B0F              //  n3 = bc register parameter value
 136+ 7B0F              //  n4 =  a register parameter value
 137+ 7B0F              //   a = routine address in ROM 3
 138+ 7B0F              // ----
 139+ 7B0F              //  n5 = hl returned value
 140+ 7B0F              //  n6 = de returned value
 141+ 7B0F              //  n7 = bc returned value
 142+ 7B0F              //  n8 =  a returned value
 143+ 7B0F              //   f
 144+ 7B0F                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B0F             >
 144+ 7B0F             >                // dummy db directives used to calculate length of namec
 144+ 7B0F 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B13 44 4F 53    >
 144+ 7B16             >len_NFA         defl    $ - temp_NFA
 144+ 7B16             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B0F             >
 144+ 7B0F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B10 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B14 44 4F 53    >
 144+ 7B17             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B16 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B17             >
 144+ 7B17 00 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B19             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B19 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B19 ~           >
 144+ 7B19 ~           >
 144+ 7B19             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B19             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B19             >
 144+ 7B19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B19 D1                           pop     de                  // dos call entry address in de
 146+ 7B1A E1                           pop     hl                  // a register
 147+ 7B1B 7D                           ld      a, l
 148+ 7B1C D9                           exx
 149+ 7B1D C1                           pop     bc
 150+ 7B1E D1                           pop     de
 151+ 7B1F E1                           pop     hl
 152+ 7B20 D9                           exx
 153+ 7B21
 154+ 7B21 C5                           push    bc
 155+ 7B22 DD E5                        push    ix
 156+ 7B24
 157+ 7B24 ED 73 92 63                  ld      (SP_Saved), sp
 158+ 7B28 31 61 63                     ld      sp, Cold_origin - 5
 159+ 7B2B 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B2D
 161+ 7B2D CF                           rst     08
 162+ 7B2E 94                           db      $94
 163+ 7B2F
 164+ 7B2F ED 7B 92 63                  ld      sp, (SP_Saved)
 165+ 7B33 DD E5                        push    ix
 166+ 7B35 E1                           pop     hl
 167+ 7B36 22 90 63                     ld      (IX_Echo), hl
 168+ 7B39              //              nop
 169+ 7B39 DD E1                        pop     ix
 170+ 7B3B E3                           ex      (sp), hl            // hl argument and retrieve bc
 171+ 7B3C D5                           push    de
 172+ 7B3D C5                           push    bc
 173+ 7B3E 4D                           ld      c, l
 174+ 7B3F 44                           ld      b, h
 175+ 7B40
 176+ 7B40 26 00                        ld      h, 0
 177+ 7B42 6F                           ld      l, a
 178+ 7B43 E5                           push    hl
 179+ 7B44 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 180+ 7B46 23                           inc     hl                  //  0 for OK ; 1 for ko
 181+ 7B47
 182+ 7B47                              psh1
 182+ 7B47 E5          >                push    hl
 182+ 7B48 DD E9       >                jp      (ix)
 183+ 7B4A
 184+ 7B4A              //  ______________________________________________________________________
 185+ 7B4A              //
 186+ 7B4A              // blk-fh
 187+ 7B4A                              Variable_Def BLK_FH,   "BLK-FH",   1
 187+ 7B4A             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 187+ 7B4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 7B4A             >
 187+ 7B4A             >                // dummy db directives used to calculate length of namec
 187+ 7B4A 42 4C 4B 2D >                db      "BLK-FH"
 187+ 7B4E 46 48       >
 187+ 7B50             >len_NFA         defl    $ - temp_NFA
 187+ 7B50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 7B4A             >
 187+ 7B4A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 7B4B 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 187+ 7B4F 46 48       >
 187+ 7B51             >                org     $-1                 // alter last byte of Name just above to set
 187+ 7B50 C8          >                db      {b $} | END_BIT     // msb as name end
 187+ 7B51             >
 187+ 7B51 0F 7B       >                dw      last_NFA            // Link to previous definition Name
 187+ 7B53             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 7B53 CD E0 6B    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 187+ 7B56             >
 187+ 7B56             >
 187+ 7B56             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 7B56             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 7B56             >
 187+ 7B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7B56 01 00       >                dw      1
 188+ 7B58
 189+ 7B58                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 189+ 7B58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 7B58             >
 189+ 7B58             >                // dummy db directives used to calculate length of namec
 189+ 7B58 42 4C 4B 2D >                db      "BLK-FNAME"
 189+ 7B5C 46 4E 41 4D >
 189+ 7B60 45          >
 189+ 7B61             >len_NFA         defl    $ - temp_NFA
 189+ 7B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 7B58             >
 189+ 7B58 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 7B59 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 189+ 7B5D 46 4E 41 4D >
 189+ 7B61 45          >
 189+ 7B62             >                org     $-1                 // alter last byte of Name just above to set
 189+ 7B61 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 7B62             >
 189+ 7B62 4A 7B       >                dw      last_NFA            // Link to previous definition Name
 189+ 7B64             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 7B64 CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 189+ 7B67             >
 189+ 7B67             >
 189+ 7B67             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 7B67             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 7B67             >
 189+ 7B67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 7B67 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 190+ 7B6B 6F 63 6B 73
 190+ 7B6F 2D 36 34 2E
 190+ 7B73 62 69 6E 00
 191+ 7B77 00 00 00...                  ds      24
 192+ 7B8F
 193+ 7B8F              //  ______________________________________________________________________
 194+ 7B8F              //
 195+ 7B8F              // blk-seek     n --
 196+ 7B8F              // seek block n  within blocks!.bin  file
 197+ 7B8F                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 197+ 7B8F             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 197+ 7B8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7B8F             >
 197+ 7B8F             >                // dummy db directives used to calculate length of namec
 197+ 7B8F 42 4C 4B 2D >                db      "BLK-SEEK"
 197+ 7B93 53 45 45 4B >
 197+ 7B97             >len_NFA         defl    $ - temp_NFA
 197+ 7B97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7B8F             >
 197+ 7B8F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7B90 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 197+ 7B94 53 45 45 4B >
 197+ 7B98             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7B97 CB          >                db      {b $} | END_BIT     // msb as name end
 197+ 7B98             >
 197+ 7B98 58 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7B9A             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7B9A CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7B9D             >
 197+ 7B9D             >
 197+ 7B9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7B9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7B9D             >
 197+ 7B9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7B9D 48 6C 51 79                  dw  BBUF, MMUL
 199+ 7BA1 53 7B B2 6A                  dw  BLK_FH, FETCH
 200+ 7BA5 FF 66                        dw  F_SEEK
 201+ 7BA7 A5 63 2D 00                  dw  LIT, $2D, QERROR
 201+ 7BAB E5 6F
 202+ 7BAD CE 68                        dw  EXIT
 203+ 7BAF
 204+ 7BAF              //  ______________________________________________________________________
 205+ 7BAF              //
 206+ 7BAF              // blk-read     n --
 207+ 7BAF              // seek block n  within blocks!.bin  file
 208+ 7BAF                              Colon_Def BLK_READ, "BLK-READ", is_normal
 208+ 7BAF             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 208+ 7BAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 208+ 7BAF             >
 208+ 7BAF             >                // dummy db directives used to calculate length of namec
 208+ 7BAF 42 4C 4B 2D >                db      "BLK-READ"
 208+ 7BB3 52 45 41 44 >
 208+ 7BB7             >len_NFA         defl    $ - temp_NFA
 208+ 7BB7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 208+ 7BAF             >
 208+ 7BAF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 208+ 7BB0 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 208+ 7BB4 52 45 41 44 >
 208+ 7BB8             >                org     $-1                 // alter last byte of Name just above to set
 208+ 7BB7 C4          >                db      {b $} | END_BIT     // msb as name end
 208+ 7BB8             >
 208+ 7BB8 8F 7B       >                dw      last_NFA            // Link to previous definition Name
 208+ 7BBA             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 208+ 7BBA CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 208+ 7BBD             >
 208+ 7BBD             >
 208+ 7BBD             >                endif           ; ok        // for other definitions it "points" the correct handler
 208+ 7BBD             >                // Use of "; ok" to suppress "warning[fwdref]"
 208+ 7BBD             >
 208+ 7BBD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 209+ 7BBD 9A 7B                        dw  BLK_SEEK
 210+ 7BBF 48 6C                        dw  BBUF
 211+ 7BC1 53 7B B2 6A                  dw  BLK_FH, FETCH
 212+ 7BC5 3E 67                        dw  F_READ
 213+ 7BC7 A5 63 2E 00                  dw  LIT, $2E, QERROR
 213+ 7BCB E5 6F
 214+ 7BCD 04 6A                        dw  DROP
 215+ 7BCF CE 68                        dw  EXIT
 216+ 7BD1
 217+ 7BD1              //  ______________________________________________________________________
 218+ 7BD1              //
 219+ 7BD1              // blk-write     n --
 220+ 7BD1              // seek block n  within blocks!.bin  file
 221+ 7BD1                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 221+ 7BD1             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 221+ 7BD1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 7BD1             >
 221+ 7BD1             >                // dummy db directives used to calculate length of namec
 221+ 7BD1 42 4C 4B 2D >                db      "BLK-WRITE"
 221+ 7BD5 57 52 49 54 >
 221+ 7BD9 45          >
 221+ 7BDA             >len_NFA         defl    $ - temp_NFA
 221+ 7BDA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 7BD1             >
 221+ 7BD1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 7BD2 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 221+ 7BD6 57 52 49 54 >
 221+ 7BDA 45          >
 221+ 7BDB             >                org     $-1                 // alter last byte of Name just above to set
 221+ 7BDA C5          >                db      {b $} | END_BIT     // msb as name end
 221+ 7BDB             >
 221+ 7BDB AF 7B       >                dw      last_NFA            // Link to previous definition Name
 221+ 7BDD             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 7BDD CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 221+ 7BE0             >
 221+ 7BE0             >
 221+ 7BE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 7BE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 7BE0             >
 221+ 7BE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 7BE0 9A 7B                        dw  BLK_SEEK
 223+ 7BE2 48 6C                        dw  BBUF
 224+ 7BE4 53 7B B2 6A                  dw  BLK_FH, FETCH
 225+ 7BE8 5B 67                        dw  F_WRITE
 226+ 7BEA A5 63 2F 00                  dw  LIT, $2F, QERROR
 226+ 7BEE E5 6F
 227+ 7BF0 04 6A                        dw  DROP
 228+ 7BF2 CE 68                        dw  EXIT
 229+ 7BF4
 230+ 7BF4              //  ______________________________________________________________________
 231+ 7BF4              //
 232+ 7BF4              // blk-init     n --
 233+ 7BF4              // seek block n  within blocks!.bin  file
 234+ 7BF4                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 234+ 7BF4             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 234+ 7BF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ 7BF4             >
 234+ 7BF4             >                // dummy db directives used to calculate length of namec
 234+ 7BF4 42 4C 4B 2D >                db      "BLK-INIT"
 234+ 7BF8 49 4E 49 54 >
 234+ 7BFC             >len_NFA         defl    $ - temp_NFA
 234+ 7BFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ 7BF4             >
 234+ 7BF4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ 7BF5 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 234+ 7BF9 49 4E 49 54 >
 234+ 7BFD             >                org     $-1                 // alter last byte of Name just above to set
 234+ 7BFC D4          >                db      {b $} | END_BIT     // msb as name end
 234+ 7BFD             >
 234+ 7BFD D1 7B       >                dw      last_NFA            // Link to previous definition Name
 234+ 7BFF             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 7BFF CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 7C02             >
 234+ 7C02             >
 234+ 7C02             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 7C02             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 7C02             >
 234+ 7C02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 7C02 53 7B B2 6A                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 235+ 7C06 78 67 04 6A
 236+ 7C0A 64 7B 86 69                  dw  BLK_FNAME, ONE_PLUS
 237+ 7C0E 0B 6E 1C 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 237+ 7C12 90 67
 238+ 7C14 A5 63 2C 00                  dw  LIT, $2C, QERROR
 238+ 7C18 E5 6F
 239+ 7C1A 53 7B BD 6A                  dw  BLK_FH, STORE
 240+ 7C1E CE 68                        dw  EXIT
 241+ 7C20
 242+ 7C20              //  ______________________________________________________________________
 243+ 7C20              //
 244+ 7C20              // #sec
 245+ 7C20              // number of 512-Byte "sectors" available on thie sysstem.
 246+ 7C20              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 247+ 7C20
 248+ 7C20                              Constant_Def NSEC , "#SEC", 32767
 248+ 7C20             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 248+ 7C20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 7C20             >
 248+ 7C20             >                // dummy db directives used to calculate length of namec
 248+ 7C20 23 53 45 43 >                db      "#SEC"
 248+ 7C24             >len_NFA         defl    $ - temp_NFA
 248+ 7C24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 7C20             >
 248+ 7C20 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 7C21 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 248+ 7C25             >                org     $-1                 // alter last byte of Name just above to set
 248+ 7C24 C3          >                db      {b $} | END_BIT     // msb as name end
 248+ 7C25             >
 248+ 7C25 F4 7B       >                dw      last_NFA            // Link to previous definition Name
 248+ 7C27             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 7C27 CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 248+ 7C2A             >
 248+ 7C2A             >
 248+ 7C2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 7C2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 7C2A             >
 248+ 7C2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 248+ 7C2A FF 7F       >                dw      32767
 249+ 7C2C
 250+ 7C2C              //  ______________________________________________________________________
 251+ 7C2C
 252+ 7C2C
 253+ 7C2C
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C2C                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C2C              //  ______________________________________________________________________
   2+ 7C2C              //
   3+ 7C2C              //  L3.asm
   4+ 7C2C              //
   5+ 7C2C              //  Continuation of L2.asm
   6+ 7C2C              //  I/O Block definitions
   7+ 7C2C              //  ______________________________________________________________________
   8+ 7C2C
   9+ 7C2C
  10+ 7C2C              //  ______________________________________________________________________
  11+ 7C2C              //
  12+ 7C2C              // r/w          a n f --
  13+ 7C2C              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C2C                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C2C             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C2C             >
  14+ 7C2C             >                // dummy db directives used to calculate length of namec
  14+ 7C2C 52 2F 57    >                db      "R/W"
  14+ 7C2F             >len_NFA         defl    $ - temp_NFA
  14+ 7C2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C2C             >
  14+ 7C2C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C2D 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C30             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C2F D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C30             >
  14+ 7C30 20 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C32             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C32 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C35             >
  14+ 7C35             >
  14+ 7C35             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C35             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C35             >
  14+ 7C35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C35 F8 68                        dw      TO_R                    // >r
  16+ 7C37 90 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C39 31 6A 45 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C3D F6 69 27 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C41 90 69 A6 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C45 7C 68                        dw      OR_OP                   // or
  21+ 7C47 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C4B E5 6F
  22+ 7C4D 0A 69                        dw      R_TO                    // r>
  23+ 7C4F                                                              // if
  24+ 7C4F D8 63                        dw      ZBRANCH
  25+ 7C51 08 00                        dw      Read_Write_Else - $
  26+ 7C53 BA 7B                        dw          BLK_READ            //      blk-read
  27+ 7C55 C3 63                        dw      BRANCH
  28+ 7C57 04 00                        dw      Read_Write_Endif - $
  29+ 7C59              Read_Write_Else:                                // else
  30+ 7C59 DD 7B                        dw          BLK_WRITE           //      blk-write
  31+ 7C5B              Read_Write_Endif:                               // endif
  32+ 7C5B CE 68                        dw      EXIT                    // ;
  33+ 7C5D
  34+ 7C5D
  35+ 7C5D              //  ______________________________________________________________________
  36+ 7C5D              //
  37+ 7C5D              // +buf        a1 -- a2 f
  38+ 7C5D              // advences to next buffer, cyclically rotating along them
  39+ 7C5D                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C5D             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C5D             >
  39+ 7C5D             >                // dummy db directives used to calculate length of namec
  39+ 7C5D 2B 42 55 46 >                db      "+BUF"
  39+ 7C61             >len_NFA         defl    $ - temp_NFA
  39+ 7C61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C5D             >
  39+ 7C5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C5E 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C62             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C61 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C62             >
  39+ 7C62 2C 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C64             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C64 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7C67             >
  39+ 7C67             >
  39+ 7C67             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7C67             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7C67             >
  39+ 7C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7C67 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7C6B 69 69
  41+ 7C6D 31 6A F5 6C                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7C71 B2 6A
  42+ 7C73 6C 6E                        dw      EQUALS                  // =
  43+ 7C75                                                              // if
  44+ 7C75 D8 63                        dw      ZBRANCH
  45+ 7C77 08 00                        dw      PBuf_Endif - $
  46+ 7C79 04 6A                        dw          DROP                //      drop
  47+ 7C7B E9 6C B2 6A                  dw          FIRST, FETCH        //      first @
  48+ 7C7F              PBuf_Endif:                                     // endif
  49+ 7C7F 31 6A B9 6D                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7C83 B2 6A
  50+ 7C85 60 6E                        dw      SUBTRACT                // -
  51+ 7C87 CE 68                        dw      EXIT                    // ;
  52+ 7C89
  53+ 7C89              //  ______________________________________________________________________
  54+ 7C89              //
  55+ 7C89              // update       --
  56+ 7C89              // mark the last used block to be written to disk
  57+ 7C89                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7C89             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7C89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7C89             >
  57+ 7C89             >                // dummy db directives used to calculate length of namec
  57+ 7C89 55 50 44 41 >                db      "UPDATE"
  57+ 7C8D 54 45       >
  57+ 7C8F             >len_NFA         defl    $ - temp_NFA
  57+ 7C8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7C89             >
  57+ 7C89 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7C8A 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7C8E 54 45       >
  57+ 7C90             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7C8F C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7C90             >
  57+ 7C90 5D 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7C92             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7C92 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7C95             >
  57+ 7C95             >
  57+ 7C95             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7C95             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7C95             >
  57+ 7C95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7C95 B9 6D B2 6A                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7C99 B2 6A
  59+ 7C9B A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7C9F 7C 68
  60+ 7CA1 B9 6D B2 6A                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CA5 BD 6A
  61+ 7CA7 CE 68                        dw      EXIT                    // ;
  62+ 7CA9
  63+ 7CA9
  64+ 7CA9              //  ______________________________________________________________________
  65+ 7CA9              //
  66+ 7CA9              // empty-buffers --
  67+ 7CA9                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CA9             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CA9             >
  67+ 7CA9             >                // dummy db directives used to calculate length of namec
  67+ 7CA9 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CAD 59 2D 42 55 >
  67+ 7CB1 46 46 45 52 >
  67+ 7CB5 53          >
  67+ 7CB6             >len_NFA         defl    $ - temp_NFA
  67+ 7CB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CA9             >
  67+ 7CA9 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CAA 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CAE 59 2D 42 55 >
  67+ 7CB2 46 46 45 52 >
  67+ 7CB6 53          >
  67+ 7CB7             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CB6 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CB7             >
  67+ 7CB7 89 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CB9             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CB9 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CBC             >
  67+ 7CBC             >
  67+ 7CBC             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CBC             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CBC             >
  67+ 7CBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CBC E9 6C B2 6A                  dw      FIRST, FETCH            // first @
  69+ 7CC0 F5 6C B2 6A                  dw      LIMIT, FETCH            // limit @
  70+ 7CC4 F6 69 60 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7CC8 43 73
  71+ 7CCA CE 68                        dw      EXIT                    // ;
  72+ 7CCC
  73+ 7CCC              //  ______________________________________________________________________
  74+ 7CCC              //
  75+ 7CCC              // buffer       n -- a
  76+ 7CCC              // read block n and gives the address to a buffer
  77+ 7CCC              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7CCC              // disk before reading the block n.
  79+ 7CCC
  80+ 7CCC                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7CCC             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7CCC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7CCC             >
  80+ 7CCC             >                // dummy db directives used to calculate length of namec
  80+ 7CCC 42 55 46 46 >                db      "BUFFER"
  80+ 7CD0 45 52       >
  80+ 7CD2             >len_NFA         defl    $ - temp_NFA
  80+ 7CD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7CCC             >
  80+ 7CCC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7CCD 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7CD1 45 52       >
  80+ 7CD3             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7CD2 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7CD3             >
  80+ 7CD3 A9 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7CD5             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7CD5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7CD8             >
  80+ 7CD8             >
  80+ 7CD8             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7CD8             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7CD8             >
  80+ 7CD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7CD8 AE 6D B2 6A                  dw      USE, FETCH              // use @
  82+ 7CDC 31 6A F8 68                  dw      DUP, TO_R               // dup >r
  83+ 7CE0                                                              // begin
  84+ 7CE0              Buffer_Begin:
  85+ 7CE0 64 7C                        dw          PBUF                //      +buf
  86+ 7CE2                                                              // until
  87+ 7CE2 D8 63                        dw      ZBRANCH
  88+ 7CE4 FC FF                        dw      Buffer_Begin - $
  89+ 7CE6 AE 6D BD 6A                  dw      USE, STORE              // use !
  90+ 7CEA 1C 69 B2 6A                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7CEE 45 69
  91+ 7CF0                                                              // if
  92+ 7CF0 D8 63                        dw      ZBRANCH
  93+ 7CF2 14 00                        dw      Buffer_Endif - $
  94+ 7CF4 1C 69 A8 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7CF8 1C 69 B2 6A                  dw          R_OP, FETCH         //      r fetch
  96+ 7CFC A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D00 6C 68                        dw          AND_OP              //      and
  98+ 7D02 01 6C 32 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D06              Buffer_Endif:                                   // endif
 100+ 7D06 1C 69 BD 6A                  dw      R_OP, STORE             // r !
 101+ 7D0A 1C 69 B9 6D                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D0E BD 6A
 102+ 7D10 0A 69 A8 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D14 CE 68                        dw      EXIT                    // ;
 104+ 7D16
 105+ 7D16              //  ______________________________________________________________________
 106+ 7D16              //
 107+ 7D16              // block        n -- a
 108+ 7D16              // Leaves the buffer address that contains the block n.
 109+ 7D16              // If the block is not already present, it will be loaded from disk
 110+ 7D16              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D16              // disk before reading the block n.
 112+ 7D16              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D16
 114+ 7D16                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D16             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D16             >
 114+ 7D16             >                // dummy db directives used to calculate length of namec
 114+ 7D16 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D1A 4B          >
 114+ 7D1B             >len_NFA         defl    $ - temp_NFA
 114+ 7D1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D16             >
 114+ 7D16 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D17 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D1B 4B          >
 114+ 7D1C             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D1B CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D1C             >
 114+ 7D1C CC 7C       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D1E             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D1E CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D21             >
 114+ 7D21             >
 114+ 7D21             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D21             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D21             >
 114+ 7D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D21 40 6D B2 6A                  dw      OFFSET, FETCH           // offset @
 116+ 7D25 69 69 F8 68                  dw      PLUS, TO_R              // + >r
 117+ 7D29 B9 6D B2 6A                  dw      PREV, FETCH             // prev @
 118+ 7D2D 31 6A B2 6A                  dw      DUP, FETCH              // dup @
 119+ 7D31 1C 69 60 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D35 31 6A 69 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D39                                                              // if
 122+ 7D39 D8 63                        dw        ZBRANCH
 123+ 7D3B 34 00                        dw        Block_Endif_1 - $
 124+ 7D3D              Block_Begin:                                    //      begin
 125+ 7D3D 64 7C 2B 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D41                                                              //          if
 127+ 7D41 D8 63                        dw          ZBRANCH
 128+ 7D43 14 00                        dw          Block_Endif_2 - $
 129+ 7D45 04 6A                        dw              DROP            //              drop
 130+ 7D47 1C 69 D5 7C                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D4B 31 6A                        dw              DUP             //              dup
 132+ 7D4D 1C 69 0A 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D51 32 7C                        dw              READ_WRITE      //              r/w
 134+ 7D53 13 6C 60 6E                  dw              TWO, SUBTRACT   //              2 -
 135+ 7D57              Block_Endif_2:                                  //          endif
 136+ 7D57 31 6A B2 6A                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D5B 1C 69
 137+ 7D5D 60 6E 31 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D61 69 69 2B 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D65                                                              //      until
 140+ 7D65 D8 63                        dw        ZBRANCH
 141+ 7D67 D6 FF                        dw        Block_Begin - $
 142+ 7D69 31 6A B9 6D                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7D6D BD 6A
 143+ 7D6F              Block_Endif_1:                                  // endif
 144+ 7D6F 0A 69 04 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7D73 A8 69
 145+ 7D75 CE 68                        dw      EXIT                    // ;
 146+ 7D77
 147+ 7D77              //  ______________________________________________________________________
 148+ 7D77              //
 149+ 7D77              // #buff        -- n
 150+ 7D77              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7D77                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7D77             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7D77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7D77             >
 151+ 7D77             >                // dummy db directives used to calculate length of namec
 151+ 7D77 23 42 55 46 >                db      "#BUFF"
 151+ 7D7B 46          >
 151+ 7D7C             >len_NFA         defl    $ - temp_NFA
 151+ 7D7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7D77             >
 151+ 7D77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7D78 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7D7C 46          >
 151+ 7D7D             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7D7C C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7D7D             >
 151+ 7D7D 16 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7D7F             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7D7F CD C7 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7D82             >
 151+ 7D82             >
 151+ 7D82             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7D82             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7D82             >
 151+ 7D82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7D82 07 00       >                dw      7
 152+ 7D84
 153+ 7D84              //  ______________________________________________________________________
 154+ 7D84              //
 155+ 7D84              // flush        --
 156+ 7D84                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7D84             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7D84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7D84             >
 156+ 7D84             >                // dummy db directives used to calculate length of namec
 156+ 7D84 46 4C 55 53 >                db      "FLUSH"
 156+ 7D88 48          >
 156+ 7D89             >len_NFA         defl    $ - temp_NFA
 156+ 7D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7D84             >
 156+ 7D84 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7D85 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7D89 48          >
 156+ 7D8A             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7D89 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7D8A             >
 156+ 7D8A 77 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7D8C             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7D8C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7D8F             >
 156+ 7D8F             >
 156+ 7D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7D8F             >
 156+ 7D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7D8F 7F 7D 86 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7D93 01 6C
 158+ 7D95              Flush_Do:                                       // do
 159+ 7D95 58 64                        dw      C_DO
 160+ 7D97 01 6C D5 7C                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7D9B 04 6A
 161+ 7D9D                                                              // loop
 162+ 7D9D EB 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DA1 53 7B B2 6A                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DA5 B1 67 04 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DA9 CE 68                        dw      EXIT                    // exit
 166+ 7DAB
 167+ 7DAB              //  ______________________________________________________________________
 168+ 7DAB              //
 169+ 7DAB              // f_getline    a m fh -- n
 170+ 7DAB              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DAB              // Address a is left for subsequent processing
 172+ 7DAB              // and n as the actual number of byte read, that is the length of line
 173+ 7DAB                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DAB             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DAB             >
 173+ 7DAB             >                // dummy db directives used to calculate length of namec
 173+ 7DAB 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DAF 54 4C 49 4E >
 173+ 7DB3 45          >
 173+ 7DB4             >len_NFA         defl    $ - temp_NFA
 173+ 7DB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DAB             >
 173+ 7DAB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DAC 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DB0 54 4C 49 4E >
 173+ 7DB4 45          >
 173+ 7DB5             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DB4 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DB5             >
 173+ 7DB5 84 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DB7             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DB7 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DBA             >
 173+ 7DBA             >
 173+ 7DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DBA             >
 173+ 7DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DBA F8 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DBC 18 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DBE 1C 69 22 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DC2 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DC6 E5 6F
 178+ 7DC8
 179+ 7DC8 76 6A F6 69                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7DCC 86 69 26 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7DD0
 182+ 7DD0 1C 69 3E 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7DD4 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7DD8 E5 6F
 184+ 7DDA                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7DDA D8 63                        dw      ZBRANCH
 186+ 7DDC 36 00                        dw      FGetline_Else - $
 187+ 7DDE A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7DE2 35 65
 188+ 7DE4 04 6A 0D 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7DE8 26 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7DEA A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7DEE 35 65
 191+ 7DF0 04 6A 0D 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7DF4 3C 6A B5 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7DF8 31 6A F8 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 194+ 7DFC 76 6A 0A 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 195+ 7E00 01 6C 74 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 196+ 7E04 0A 69 FF 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 197+ 7E08 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 197+ 7E0C E5 6F
 198+ 7E0E                                                              // else
 199+ 7E0E C3 63                        dw      BRANCH
 200+ 7E10 0C 00                        dw      FGetline_Endif - $
 201+ 7E12              FGetline_Else:
 202+ 7E12 0A 69                        dw          R_TO                //      r>              ( m d a fh )
 203+ 7E14 76 6A 6A 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 204+ 7E18 04 6A 01 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 205+ 7E1C              FGetline_Endif:                                 // endif
 206+ 7E1C F8 68 31 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 206+ 7E20 31 6A
 207+ 7E22 86 69 26 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 208+ 7E26 1C 69 D2 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 209+ 7E2A 86 6A 69 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 210+ 7E2E 01 6C 26 6A                  dw      ZERO, SWAP              // 0 swap
 211+ 7E32 B3 69 BD 6A                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 212+ 7E36 1C 69 69 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 212+ 7E3A 90 69
 213+ 7E3C 26 6A 1C 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 213+ 7E40 60 6E
 214+ 7E42 55 73                        dw      BLANKS                  // blanks
 215+ 7E44 0A 69                        dw      R_TO                    // r>                   ( n )
 216+ 7E46 CE 68                        dw      EXIT                    // ;
 217+ 7E48
 218+ 7E48              //  ______________________________________________________________________
 219+ 7E48              //
 220+ 7E48              // f_include    fh --
 221+ 7E48              // Given a filehandle includes the source from file
 222+ 7E48                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 222+ 7E48             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 222+ 7E48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7E48             >
 222+ 7E48             >                // dummy db directives used to calculate length of namec
 222+ 7E48 46 5F 49 4E >                db      "F_INCLUDE"
 222+ 7E4C 43 4C 55 44 >
 222+ 7E50 45          >
 222+ 7E51             >len_NFA         defl    $ - temp_NFA
 222+ 7E51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7E48             >
 222+ 7E48 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7E49 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 222+ 7E4D 43 4C 55 44 >
 222+ 7E51 45          >
 222+ 7E52             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7E51 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7E52             >
 222+ 7E52 AB 7D       >                dw      last_NFA            // Link to previous definition Name
 222+ 7E54             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7E54 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7E57             >
 222+ 7E57             >
 222+ 7E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7E57             >
 222+ 7E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7E57 15 6D B2 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 223+ 7E5B F8 68
 224+ 7E5D 1F 6D B2 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 224+ 7E61 F8 68
 225+ 7E63 DE 6D B2 6A                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 225+ 7E67 F8 68
 226+ 7E69 1C 69                        dw      R_OP                    // r
 227+ 7E6B                                                              // if
 228+ 7E6B D8 63                        dw      ZBRANCH
 229+ 7E6D 10 00                        dw      FInclude_Else_1 - $
 230+ 7E6F 1C 69 22 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 231+ 7E73 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 231+ 7E77 E5 6F
 232+ 7E79                                                              // else
 233+ 7E79 C3 63                        dw      BRANCH
 234+ 7E7B 06 00                        dw      FInclude_Endif_1 - $
 235+ 7E7D              FInclude_Else_1:
 236+ 7E7D 01 6C 01 6C                  dw          ZERO, ZERO          //      0 0
 237+ 7E81                                                              // endif
 238+ 7E81              FInclude_Endif_1:
 239+ 7E81 F8 68 F8 68                  dw      TO_R, TO_R              // >r >r
 240+ 7E85 DE 6D BD 6A                  dw      SOURCE_ID, STORE        // source-id !
 241+ 7E89              FInclude_Begin:                                 // begin
 242+ 7E89 0A 6C 1E 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 242+ 7E8D 48 6C
 243+ 7E8F 86 6A 55 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 244+ 7E93 26 6A 86 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 245+ 7E97 26 6A B3 69                  dw          SWAP, CELL_MINUS    //      swap cell-
 246+ 7E9B DE 6D B2 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 247+ 7E9F B7 7D                        dw          F_GETLINE           //      f_getline
 248+ 7EA1                                                              // while
 249+ 7EA1 D8 63                        dw      ZBRANCH
 250+ 7EA3 14 00                        dw      FInclude_Repeat - $
 251+ 7EA5 0A 6C 15 6D                  dw          ONE, BLK, STORE     //      1 blk !
 251+ 7EA9 BD 6A
 252+ 7EAB 01 6C 1F 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 252+ 7EAF BD 6A
 253+ 7EB1 4A 77                        dw          INTERPRET           //      interpret
 254+ 7EB3 C3 63                        dw      BRANCH
 255+ 7EB5 D4 FF                        dw      FInclude_Begin - $
 256+ 7EB7              FInclude_Repeat:                                // repeat
 257+ 7EB7 DE 6D B2 6A                  dw      SOURCE_ID, FETCH        // source-id @
 258+ 7EBB 01 6C DE 6D                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 258+ 7EBF BD 6A
 259+ 7EC1 78 67                        dw      F_CLOSE                 // f_close
 260+ 7EC3 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 260+ 7EC7 E5 6F
 261+ 7EC9 0A 69 0A 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 261+ 7ECD 0A 69
 262+ 7ECF 31 6A DE 6D                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 262+ 7ED3 BD 6A
 263+ 7ED5                                                              // if
 264+ 7ED5 D8 63                        dw      ZBRANCH
 265+ 7ED7 12 00                        dw      FInclude_Else_2 - $
 266+ 7ED9 DE 6D B2 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 267+ 7EDD FF 66                        dw          F_SEEK              //      f_seek
 268+ 7EDF A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 268+ 7EE3 E5 6F
 269+ 7EE5                                                              // else
 270+ 7EE5 C3 63                        dw      BRANCH
 271+ 7EE7 04 00                        dw      FInclude_Endif_2 - $
 272+ 7EE9              FInclude_Else_2:
 273+ 7EE9 6A 6A                        dw          TWO_DROP            //      2drop
 274+ 7EEB              FInclude_Endif_2:                               // endif
 275+ 7EEB 0A 69 1F 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 275+ 7EEF BD 6A
 276+ 7EF1 0A 69 15 6D                  dw      R_TO, BLK, STORE        // r> blk !
 276+ 7EF5 BD 6A
 277+ 7EF7 CE 68                        dw      EXIT                    // ;
 278+ 7EF9
 279+ 7EF9              //  ______________________________________________________________________
 280+ 7EF9              //
 281+ 7EF9              // open<         -- fh
 282+ 7EF9              // Open the following filename and return it file-handle
 283+ 7EF9              // Used in the form OPEN CCCC
 284+ 7EF9                              Colon_Def OPEN_FH, "OPEN<", is_normal
 284+ 7EF9             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 284+ 7EF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ 7EF9             >
 284+ 7EF9             >                // dummy db directives used to calculate length of namec
 284+ 7EF9 4F 50 45 4E >                db      "OPEN<"
 284+ 7EFD 3C          >
 284+ 7EFE             >len_NFA         defl    $ - temp_NFA
 284+ 7EFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ 7EF9             >
 284+ 7EF9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ 7EFA 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 284+ 7EFE 3C          >
 284+ 7EFF             >                org     $-1                 // alter last byte of Name just above to set
 284+ 7EFE BC          >                db      {b $} | END_BIT     // msb as name end
 284+ 7EFF             >
 284+ 7EFF 48 7E       >                dw      last_NFA            // Link to previous definition Name
 284+ 7F01             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 7F01 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 284+ 7F04             >
 284+ 7F04             >
 284+ 7F04             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 7F04             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 7F04             >
 284+ 7F04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 7F04 30 6C                        dw      BL
 286+ 7F06 90 73 9A 71                  dw      WORD, COUNT, OVER       // bl word count over
 286+ 7F0A F6 69
 287+ 7F0C 69 69 01 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 287+ 7F10 26 6A BD 6A
 288+ 7F14 7C 73 0A 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 288+ 7F18 90 67
 289+ 7F1A A5 63 2B 00                  dw      LIT, 43                 // 43
 290+ 7F1E E5 6F                        dw      QERROR                  // ?error
 291+ 7F20 CE 68                        dw      EXIT                    // ;
 292+ 7F22
 293+ 7F22              //  ______________________________________________________________________
 294+ 7F22              //
 295+ 7F22              // include      -- cccc
 296+ 7F22              // Include the following filename
 297+ 7F22                              Colon_Def INCLUDE, "INCLUDE", is_normal
 297+ 7F22             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 297+ 7F22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 297+ 7F22             >
 297+ 7F22             >                // dummy db directives used to calculate length of namec
 297+ 7F22 49 4E 43 4C >                db      "INCLUDE"
 297+ 7F26 55 44 45    >
 297+ 7F29             >len_NFA         defl    $ - temp_NFA
 297+ 7F29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 297+ 7F22             >
 297+ 7F22 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 297+ 7F23 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 297+ 7F27 55 44 45    >
 297+ 7F2A             >                org     $-1                 // alter last byte of Name just above to set
 297+ 7F29 C5          >                db      {b $} | END_BIT     // msb as name end
 297+ 7F2A             >
 297+ 7F2A F9 7E       >                dw      last_NFA            // Link to previous definition Name
 297+ 7F2C             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 297+ 7F2C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 297+ 7F2F             >
 297+ 7F2F             >
 297+ 7F2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 297+ 7F2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 297+ 7F2F             >
 297+ 7F2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 298+ 7F2F 01 7F                        dw      OPEN_FH                 // open
 299+ 7F31 31 6A 54 7E                  dw      DUP, F_INCLUDE          // dup f_include
 300+ 7F35 78 67 04 6A                  dw      F_CLOSE, DROP           // f_close drop
 301+ 7F39 CE 68                        dw      EXIT                    // ;
 302+ 7F3B
 303+ 7F3B              //  ______________________________________________________________________
 304+ 7F3B              //
 305+ 7F3B              // needs
 306+ 7F3B              // check for cccc exists in vocabulary
 307+ 7F3B              // if it doesn't then  INCLUDE  inc/cccc.F
 308+ 7F3B
 309+ 7F3B              // temp filename cccc.f as counted string zero-padded
 310+ 7F3B                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 310+ 7F3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7F3B             >
 310+ 7F3B             >                // dummy db directives used to calculate length of namec
 310+ 7F3B 4E 45 45 44 >                db      "NEEDS-W"
 310+ 7F3F 53 2D 57    >
 310+ 7F42             >len_NFA         defl    $ - temp_NFA
 310+ 7F42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7F3B             >
 310+ 7F3B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7F3C 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 310+ 7F40 53 2D 57    >
 310+ 7F43             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7F42 D7          >                db      {b $} | END_BIT     // msb as name end
 310+ 7F43             >
 310+ 7F43 22 7F       >                dw      last_NFA            // Link to previous definition Name
 310+ 7F45             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7F45 CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 310+ 7F48             >
 310+ 7F48             >
 310+ 7F48             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7F48             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7F48             >
 310+ 7F48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7F48 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 312+ 7F6B              // temp complete path+filename
 313+ 7F6B                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 313+ 7F6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 313+ 7F6B             >
 313+ 7F6B             >                // dummy db directives used to calculate length of namec
 313+ 7F6B 4E 45 45 44 >                db      "NEEDS-FN"
 313+ 7F6F 53 2D 46 4E >
 313+ 7F73             >len_NFA         defl    $ - temp_NFA
 313+ 7F73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 313+ 7F6B             >
 313+ 7F6B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 313+ 7F6C 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 313+ 7F70 53 2D 46 4E >
 313+ 7F74             >                org     $-1                 // alter last byte of Name just above to set
 313+ 7F73 CE          >                db      {b $} | END_BIT     // msb as name end
 313+ 7F74             >
 313+ 7F74 3B 7F       >                dw      last_NFA            // Link to previous definition Name
 313+ 7F76             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 313+ 7F76 CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 313+ 7F79             >
 313+ 7F79             >
 313+ 7F79             >                endif           ; ok        // for other definitions it "points" the correct handler
 313+ 7F79             >                // Use of "; ok" to suppress "warning[fwdref]"
 313+ 7F79             >
 313+ 7F79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 314+ 7F79 00 00 00...                  ds      40
 315+ 7FA1              // constant path
 316+ 7FA1                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 316+ 7FA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FA1             >
 316+ 7FA1             >                // dummy db directives used to calculate length of namec
 316+ 7FA1 4E 45 45 44 >                db      "NEEDS-INC"
 316+ 7FA5 53 2D 49 4E >
 316+ 7FA9 43          >
 316+ 7FAA             >len_NFA         defl    $ - temp_NFA
 316+ 7FAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FA1             >
 316+ 7FA1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FA2 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 316+ 7FA6 53 2D 49 4E >
 316+ 7FAA 43          >
 316+ 7FAB             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FAA C3          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FAB             >
 316+ 7FAB 6B 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FAD             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FAD CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FB0             >
 316+ 7FB0             >
 316+ 7FB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FB0             >
 316+ 7FB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FB0 04 69 6E 63                  db      4, "inc/", 0
 317+ 7FB4 2F 00
 318+ 7FB6                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 318+ 7FB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 7FB6             >
 318+ 7FB6             >                // dummy db directives used to calculate length of namec
 318+ 7FB6 4E 45 45 44 >                db      "NEEDS-LIB"
 318+ 7FBA 53 2D 4C 49 >
 318+ 7FBE 42          >
 318+ 7FBF             >len_NFA         defl    $ - temp_NFA
 318+ 7FBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 7FB6             >
 318+ 7FB6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 7FB7 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 318+ 7FBB 53 2D 4C 49 >
 318+ 7FBF 42          >
 318+ 7FC0             >                org     $-1                 // alter last byte of Name just above to set
 318+ 7FBF C2          >                db      {b $} | END_BIT     // msb as name end
 318+ 7FC0             >
 318+ 7FC0 A1 7F       >                dw      last_NFA            // Link to previous definition Name
 318+ 7FC2             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7FC2 CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 318+ 7FC5             >
 318+ 7FC5             >
 318+ 7FC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7FC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7FC5             >
 318+ 7FC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7FC5 04 6C 69 62                  db      4, "lib/", 0
 319+ 7FC9 2F 00
 320+ 7FCB
 321+ 7FCB              // Concatenate path at a and filename and include it
 322+ 7FCB              // No error is issued if filename doesn't exist.
 323+ 7FCB                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 323+ 7FCB             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 323+ 7FCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 7FCB             >
 323+ 7FCB             >                // dummy db directives used to calculate length of namec
 323+ 7FCB 4E 45 45 44 >                db      "NEEDS/"
 323+ 7FCF 53 2F       >
 323+ 7FD1             >len_NFA         defl    $ - temp_NFA
 323+ 7FD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 7FCB             >
 323+ 7FCB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 7FCC 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 323+ 7FD0 53 2F       >
 323+ 7FD2             >                org     $-1                 // alter last byte of Name just above to set
 323+ 7FD1 AF          >                db      {b $} | END_BIT     // msb as name end
 323+ 7FD2             >
 323+ 7FD2 B6 7F       >                dw      last_NFA            // Link to previous definition Name
 323+ 7FD4             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 7FD4 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 323+ 7FD7             >
 323+ 7FD7             >
 323+ 7FD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 7FD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 7FD7             >
 323+ 7FD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 7FD7 9A 71 18 6A                  dw      COUNT, TUCK             // n a n
 325+ 7FDB 76 7F 26 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 325+ 7FDF D2 67
 326+ 7FE1 76 7F 69 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 327+ 7FE5 45 7F 86 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 327+ 7FE9 26 6A
 328+ 7FEB A5 63 23 00                  dw      LIT, 35
 329+ 7FEF D2 67                        dw      CMOVE
 330+ 7FF1 76 7F                        dw      NEEDS_FN
 331+ 7FF3 7C 73 0A 6C                  dw      PAD, ONE, F_OPEN
 331+ 7FF7 90 67
 332+ 7FF9 2B 69                        dw      ZEQUAL
 333+ 7FFB D8 63                        dw      ZBRANCH
 334+ 7FFD 08 00                        dw      Needs_1 - $
 335+ 7FFF 54 7E                        dw          F_INCLUDE
 336+ 8001 C3 63                        dw      BRANCH
 337+ 8003 04 00                        dw      Needs_2 - $
 338+ 8005              Needs_1:
 339+ 8005              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 340+ 8005              //              dw          LIT, 43, MESSAGE
 341+ 8005 04 6A                        dw          DROP
 342+ 8007              Needs_2:
 343+ 8007 CE 68                        dw      EXIT                    // ;
 344+ 8009
 345+ 8009
 346+ 8009                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 346+ 8009             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 8009             >
 346+ 8009             >                // dummy db directives used to calculate length of namec
 346+ 8009 4E 43 44 4D >                db      "NCDM"
 346+ 800D             >len_NFA         defl    $ - temp_NFA
 346+ 800D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 8009             >
 346+ 8009 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 800A 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 346+ 800E             >                org     $-1                 // alter last byte of Name just above to set
 346+ 800D CD          >                db      {b $} | END_BIT     // msb as name end
 346+ 800E             >
 346+ 800E CB 7F       >                dw      last_NFA            // Link to previous definition Name
 346+ 8010             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 8010 CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 346+ 8013             >
 346+ 8013             >
 346+ 8013             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 8013             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 8013             >
 346+ 8013             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 8013 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 347+ 8017 24 5F 7B 7D
 347+ 801B 7E
 348+ 801C
 349+ 801C                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 349+ 801C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 801C             >
 349+ 801C             >                // dummy db directives used to calculate length of namec
 349+ 801C 4E 44 4F 4D >                db      "NDOM"
 349+ 8020             >len_NFA         defl    $ - temp_NFA
 349+ 8020             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 801C             >
 349+ 801C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 801D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 349+ 8021             >                org     $-1                 // alter last byte of Name just above to set
 349+ 8020 CD          >                db      {b $} | END_BIT     // msb as name end
 349+ 8021             >
 349+ 8021 09 80       >                dw      last_NFA            // Link to previous definition Name
 349+ 8023             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 8023 CD 59 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 349+ 8026             >
 349+ 8026             >
 349+ 8026             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 8026             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 8026             >
 349+ 8026             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 8026 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 350+ 802A 7C 5C 3C 3E
 350+ 802E 22
 351+ 802F
 352+ 802F
 353+ 802F              // Replace illegal character in filename using the map here above
 354+ 802F              // at the moment we need only  "
 355+ 802F                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 355+ 802F             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 355+ 802F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 802F             >
 355+ 802F             >                // dummy db directives used to calculate length of namec
 355+ 802F 4E 45 45 44 >                db      "NEEDS-CH"
 355+ 8033 53 2D 43 48 >
 355+ 8037             >len_NFA         defl    $ - temp_NFA
 355+ 8037             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 802F             >
 355+ 802F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 8030 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 355+ 8034 53 2D 43 48 >
 355+ 8038             >                org     $-1                 // alter last byte of Name just above to set
 355+ 8037 C8          >                db      {b $} | END_BIT     // msb as name end
 355+ 8038             >
 355+ 8038 1C 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 803A             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 803A CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 355+ 803D             >
 355+ 803D             >
 355+ 803D             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 803D             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 803D             >
 355+ 803D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 803D 9A 71 B0 71                  dw      COUNT, BOUNDS
 357+ 8041 58 64                        dw      C_DO
 358+ 8043              Needs_3:
 359+ 8043 10 80 23 80                  dw          NCDM, NDOM, LIT, 9
 359+ 8047 A5 63 09 00
 360+ 804B 61 64 C9 6A                  dw          I, CFETCH
 361+ 804F 6D 65                        dw          C_MAP
 362+ 8051 61 64 D5 6A                  dw          I, CSTORE
 363+ 8055              Needs_4:
 364+ 8055 EB 63                        dw      C_LOOP
 365+ 8057 EC FF                        dw      Needs_3 - $
 366+ 8059 CE 68                        dw      EXIT
 367+ 805B
 368+ 805B
 369+ 805B              // include  "path/cccc.f" if cccc is not defined
 370+ 805B              // filename cccc.f is temporary stored at NEEDS-W
 371+ 805B                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 371+ 805B             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 371+ 805B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ 805B             >
 371+ 805B             >                // dummy db directives used to calculate length of namec
 371+ 805B 4E 45 45 44 >                db      "NEEDS-F"
 371+ 805F 53 2D 46    >
 371+ 8062             >len_NFA         defl    $ - temp_NFA
 371+ 8062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ 805B             >
 371+ 805B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ 805C 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 371+ 8060 53 2D 46    >
 371+ 8063             >                org     $-1                 // alter last byte of Name just above to set
 371+ 8062 C6          >                db      {b $} | END_BIT     // msb as name end
 371+ 8063             >
 371+ 8063 2F 80       >                dw      last_NFA            // Link to previous definition Name
 371+ 8065             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 8065 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 371+ 8068             >
 371+ 8068             >
 371+ 8068             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 8068             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 8068             >
 371+ 8068             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 8068 4C 75                        dw      LFIND
 373+ 806A D8 63                        dw      ZBRANCH
 374+ 806C 0A 00                        dw      Needs_5 - $
 375+ 806E
 376+ 806E 04 6A 6A 6A                  dw          DROP, TWO_DROP
 377+ 8072 C3 63                        dw      BRANCH
 378+ 8074 2C 00                        dw      Needs_6 - $
 379+ 8076              Needs_5:
 380+ 8076 45 7F                        dw          NEEDS_W
 381+ 8078 A5 63 23 00                  dw          LIT, 35
 382+ 807C 43 73                        dw          ERASE                   // a
 383+ 807E 0B 6E C9 6A                  dw          HERE, CFETCH, ONE_PLUS  // a n
 383+ 8082 86 69
 384+ 8084 0B 6E F6 69                  dw          HERE, OVER              // a n here n
 385+ 8088 45 7F 26 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 385+ 808C D2 67
 386+ 808E 45 7F 3A 80                  dw          NEEDS_W, NEEDS_CHECK
 387+ 8092 45 7F 69 69                  dw          NEEDS_W, PLUS           // a a1+1
 388+ 8096 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 389+ 809A 26 6A BD 6A                  dw          SWAP, STORE             // a
 390+ 809E D4 7F                        dw          NEEDS_SLASH
 391+ 80A0              Needs_6:
 392+ 80A0 CE 68                        dw      EXIT
 393+ 80A2
 394+ 80A2
 395+ 80A2              // check for cccc exists in vocabulary
 396+ 80A2              // if it doesn't then  INCLUDE  inc/cccc.F
 397+ 80A2              // search in inc subdirectory
 398+ 80A2                              Colon_Def NEEDS, "NEEDS", is_normal
 398+ 80A2             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 398+ 80A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 398+ 80A2             >
 398+ 80A2             >                // dummy db directives used to calculate length of namec
 398+ 80A2 4E 45 45 44 >                db      "NEEDS"
 398+ 80A6 53          >
 398+ 80A7             >len_NFA         defl    $ - temp_NFA
 398+ 80A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 398+ 80A2             >
 398+ 80A2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 398+ 80A3 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 398+ 80A7 53          >
 398+ 80A8             >                org     $-1                 // alter last byte of Name just above to set
 398+ 80A7 D3          >                db      {b $} | END_BIT     // msb as name end
 398+ 80A8             >
 398+ 80A8 5B 80       >                dw      last_NFA            // Link to previous definition Name
 398+ 80AA             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 398+ 80AA CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 398+ 80AD             >
 398+ 80AD             >
 398+ 80AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 398+ 80AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 398+ 80AD             >
 398+ 80AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 399+ 80AD 1F 6D B2 6A                  dw      TO_IN, FETCH
 400+ 80B1 31 6A                        dw      DUP
 401+ 80B3 AD 7F 65 80                  dw      NEEDS_INC, NEEDS_PATH
 402+ 80B7 1F 6D BD 6A                  dw      TO_IN, STORE
 403+ 80BB C2 7F 65 80                  dw      NEEDS_LIB, NEEDS_PATH
 404+ 80BF 1F 6D BD 6A                  dw      TO_IN, STORE
 405+ 80C3 4C 75                        dw      LFIND
 406+ 80C5 D8 63                        dw      ZBRANCH
 407+ 80C7 08 00                        dw      Needs_10 - $
 408+ 80C9 6A 6A                        dw          TWO_DROP
 409+ 80CB C3 63                        dw      BRANCH
 410+ 80CD 10 00                        dw      Needs_11 - $
 411+ 80CF              Needs_10:
 412+ 80CF 45 7F 9A 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 412+ 80D3 C2 71 1B 6F
 413+ 80D7 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 413+ 80DB 46 7A
 414+ 80DD              Needs_11:
 415+ 80DD CE 68                        dw      EXIT
 416+ 80DF
 417+ 80DF
 418+ 80DF              //  ______________________________________________________________________
 419+ 80DF              //
 420+ 80DF              // load+        n --
 421+ 80DF                              Colon_Def LOAD_P, "LOAD+", is_normal
 421+ 80DF             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 421+ 80DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 80DF             >
 421+ 80DF             >                // dummy db directives used to calculate length of namec
 421+ 80DF 4C 4F 41 44 >                db      "LOAD+"
 421+ 80E3 2B          >
 421+ 80E4             >len_NFA         defl    $ - temp_NFA
 421+ 80E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 80DF             >
 421+ 80DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 80E0 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 421+ 80E4 2B          >
 421+ 80E5             >                org     $-1                 // alter last byte of Name just above to set
 421+ 80E4 AB          >                db      {b $} | END_BIT     // msb as name end
 421+ 80E5             >
 421+ 80E5 A2 80       >                dw      last_NFA            // Link to previous definition Name
 421+ 80E7             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 80E7 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 421+ 80EA             >
 421+ 80EA             >
 421+ 80EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 80EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 80EA             >
 421+ 80EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 80EA 15 6D B2 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 422+ 80EE F8 68
 423+ 80F0 1F 6D B2 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 423+ 80F4 F8 68
 424+ 80F6
 425+ 80F6 01 6C 1F 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 425+ 80FA BD 6A
 426+ 80FC 55 6C A5 79                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 426+ 8100 15 6D BD 6A
 427+ 8104 4A 77                        dw      INTERPRET               // interpret
 428+ 8106
 429+ 8106 0A 69 1F 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 429+ 810A BD 6A
 430+ 810C 0A 69 15 6D                  dw      R_TO, BLK, STORE        // r> blk !
 430+ 8110 BD 6A
 431+ 8112 CE 68                        dw      EXIT                    // ;
 432+ 8114
 433+ 8114              //  ______________________________________________________________________
 434+ 8114              //
 435+ 8114              // -->          --
 436+ 8114                              Colon_Def LOAD_NEXT, "-->", is_immediate
 436+ 8114             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 436+ 8114             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 436+ 8114             >
 436+ 8114             >                // dummy db directives used to calculate length of namec
 436+ 8114 2D 2D 3E    >                db      "-->"
 436+ 8117             >len_NFA         defl    $ - temp_NFA
 436+ 8117             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 436+ 8114             >
 436+ 8114 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 436+ 8115 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 436+ 8118             >                org     $-1                 // alter last byte of Name just above to set
 436+ 8117 BE          >                db      {b $} | END_BIT     // msb as name end
 436+ 8118             >
 436+ 8118 DF 80       >                dw      last_NFA            // Link to previous definition Name
 436+ 811A             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 436+ 811A CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 436+ 811D             >
 436+ 811D             >
 436+ 811D             >                endif           ; ok        // for other definitions it "points" the correct handler
 436+ 811D             >                // Use of "; ok" to suppress "warning[fwdref]"
 436+ 811D             >
 436+ 811D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 437+ 811D 63 70                        dw      QLOADING                // ?loading
 438+ 811F 01 6C 1F 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 438+ 8123 BD 6A
 439+ 8125 55 6C                        dw      BSCR                    // b/scr
 440+ 8127 15 6D B2 6A                  dw      BLK, FETCH              // blk @
 441+ 812B F6 69                        dw      OVER                    // over
 442+ 812D D5 79                        dw      MOD                     // mod
 443+ 812F 60 6E                        dw      SUBTRACT                // -
 444+ 8131 15 6D 93 6A                  dw      BLK, PLUSSTORE          // +!
 445+ 8135 CE 68                        dw      EXIT                    // ;
 446+ 8137
 447+ 8137              //  ______________________________________________________________________
 448+ 8137              //
 449+ 8137              // '            -- xt
 450+ 8137                              Colon_Def TICK, "'", is_normal
 450+ 8137             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 450+ 8137             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 450+ 8137             >
 450+ 8137             >                // dummy db directives used to calculate length of namec
 450+ 8137 27          >                db      "'"
 450+ 8138             >len_NFA         defl    $ - temp_NFA
 450+ 8138             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 450+ 8137             >
 450+ 8137 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 450+ 8138 27          >                db      "'"               // name string in 7-bit ascii, but
 450+ 8139             >                org     $-1                 // alter last byte of Name just above to set
 450+ 8138 A7          >                db      {b $} | END_BIT     // msb as name end
 450+ 8139             >
 450+ 8139 14 81       >                dw      last_NFA            // Link to previous definition Name
 450+ 813B             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 450+ 813B CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 450+ 813E             >
 450+ 813E             >
 450+ 813E             >                endif           ; ok        // for other definitions it "points" the correct handler
 450+ 813E             >                // Use of "; ok" to suppress "warning[fwdref]"
 450+ 813E             >
 450+ 813E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 451+ 813E 4C 75                        dw      LFIND                   // -find
 452+ 8140 2B 69                        dw      ZEQUAL                  // 0=
 453+ 8142 01 6C E5 6F                  dw      ZERO, QERROR            // 0 ?error
 454+ 8146 04 6A                        dw      DROP                    // drop
 455+ 8148 CE 68                        dw      EXIT                    // ;
 456+ 814A
 457+ 814A              //  ______________________________________________________________________
 458+ 814A              //
 459+ 814A              // forget       -- cccc
 460+ 814A                              Colon_Def FORGET, "FORGET", is_normal
 460+ 814A             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 460+ 814A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 814A             >
 460+ 814A             >                // dummy db directives used to calculate length of namec
 460+ 814A 46 4F 52 47 >                db      "FORGET"
 460+ 814E 45 54       >
 460+ 8150             >len_NFA         defl    $ - temp_NFA
 460+ 8150             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 814A             >
 460+ 814A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 814B 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 460+ 814F 45 54       >
 460+ 8151             >                org     $-1                 // alter last byte of Name just above to set
 460+ 8150 D4          >                db      {b $} | END_BIT     // msb as name end
 460+ 8151             >
 460+ 8151 37 81       >                dw      last_NFA            // Link to previous definition Name
 460+ 8153             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 8153 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 8156             >
 460+ 8156             >
 460+ 8156             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 8156             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 8156             >
 460+ 8156             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 8156 5C 6D B2 6A                  dw      CURRENT, FETCH          // current @
 462+ 815A 4E 6D B2 6A                  dw      CONTEXT, FETCH          // context @
 463+ 815E 60 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 463+ 8162 17 00 E5 6F
 464+ 8166 3B 81 B0 6F                  dw      TICK, TO_BODY           // ' >body
 465+ 816A 31 6A C5 6C                  dw      DUP, FENCE, FETCH       // dup fence @
 465+ 816E B2 6A
 466+ 8170 7A 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 466+ 8174 15 00 E5 6F
 467+ 8178 31 6A 84 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 467+ 817C CE 6C BD 6A
 468+ 8180 64 6F B2 6A                  dw      LFA, FETCH              // lfa @
 469+ 8184 4E 6D B2 6A                  dw      CONTEXT, FETCH, STORE   // context @ !
 469+ 8188 BD 6A
 470+ 818A CE 68                        dw      EXIT                    // ;
 471+ 818C
 472+ 818C              //  ______________________________________________________________________
 473+ 818C              //
 474+ 818C              // marker       -- cccc
 475+ 818C                              Colon_Def MARKER, "MARKER", is_immediate
 475+ 818C             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 475+ 818C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 818C             >
 475+ 818C             >                // dummy db directives used to calculate length of namec
 475+ 818C 4D 41 52 4B >                db      "MARKER"
 475+ 8190 45 52       >
 475+ 8192             >len_NFA         defl    $ - temp_NFA
 475+ 8192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 818C             >
 475+ 818C C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 818D 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 475+ 8191 45 52       >
 475+ 8193             >                org     $-1                 // alter last byte of Name just above to set
 475+ 8192 D2          >                db      {b $} | END_BIT     // msb as name end
 475+ 8193             >
 475+ 8193 4A 81       >                dw      last_NFA            // Link to previous definition Name
 475+ 8195             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 8195 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 8198             >
 475+ 8198             >
 475+ 8198             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 8198             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 8198             >
 475+ 8198             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 8198 62 71                        dw      CBUILDS
 477+ 819A DD 6C B2 6A                  dw      VOC_LINK, FETCH, COMMA
 477+ 819E 29 6E
 478+ 81A0 5C 6D B2 6A                  dw      CURRENT, FETCH, COMMA
 478+ 81A4 29 6E
 479+ 81A6 4E 6D B2 6A                  dw      CONTEXT, FETCH, COMMA
 479+ 81AA 29 6E
 480+ 81AC 53 6F 29 6E                  dw      LATEST, COMMA
 481+ 81B0 53 6F 99 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 481+ 81B4 64 6F B2 6A
 481+ 81B8 29 6E
 482+ 81BA 73 71                        dw      DOES_TO
 483+ 81BC 31 6A B2 6A                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 483+ 81C0 DD 6C BD 6A
 483+ 81C4 A8 69
 484+ 81C6 31 6A B2 6A                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 484+ 81CA 5C 6D BD 6A
 484+ 81CE A8 69
 485+ 81D0 31 6A B2 6A                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 485+ 81D4 4E 6D BD 6A
 485+ 81D8 A8 69
 486+ 81DA 31 6A B2 6A                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 486+ 81DE CE 6C BD 6A
 486+ 81E2 A8 69
 487+ 81E4 B2 6A 5C 6D                  dw           FETCH, CURRENT, FETCH, STORE
 487+ 81E8 B2 6A BD 6A
 488+ 81EC CE 68                        dw      EXIT
 489+ 81EE
 490+ 81EE              //  ______________________________________________________________________
 491+ 81EE              //
 492+ 81EE              // spaces       n --
 493+ 81EE                              Colon_Def SPACES, "SPACES", is_normal
 493+ 81EE             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 493+ 81EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 81EE             >
 493+ 81EE             >                // dummy db directives used to calculate length of namec
 493+ 81EE 53 50 41 43 >                db      "SPACES"
 493+ 81F2 45 53       >
 493+ 81F4             >len_NFA         defl    $ - temp_NFA
 493+ 81F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 81EE             >
 493+ 81EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 81EF 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 493+ 81F3 45 53       >
 493+ 81F5             >                org     $-1                 // alter last byte of Name just above to set
 493+ 81F4 D3          >                db      {b $} | END_BIT     // msb as name end
 493+ 81F5             >
 493+ 81F5 8C 81       >                dw      last_NFA            // Link to previous definition Name
 493+ 81F7             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 81F7 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 81FA             >
 493+ 81FA             >
 493+ 81FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 81FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 81FA             >
 493+ 81FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 81FA 01 6C CC 6E                  dw      ZERO, MAX
 495+ 81FE 01 6C 2C 64                  dw      ZERO, C_Q_DO
 496+ 8202 08 00                        dw      Spaces_Leave - $
 497+ 8204              Spaces_Loop:
 498+ 8204 1B 6F                        dw          SPACE
 499+ 8206 EB 63                        dw      C_LOOP
 500+ 8208 FC FF                        dw      Spaces_Loop - $
 501+ 820A              Spaces_Leave:
 502+ 820A CE 68                        dw      EXIT                    // ;
 503+ 820C
 504+ 820C              //  ______________________________________________________________________
 505+ 820C              //
 506+ 820C              // <#           --
 507+ 820C                              Colon_Def BEGIN_DASH, "<#", is_normal
 507+ 820C             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 507+ 820C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 820C             >
 507+ 820C             >                // dummy db directives used to calculate length of namec
 507+ 820C 3C 23       >                db      "<#"
 507+ 820E             >len_NFA         defl    $ - temp_NFA
 507+ 820E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 820C             >
 507+ 820C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 820D 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 507+ 820F             >                org     $-1                 // alter last byte of Name just above to set
 507+ 820E A3          >                db      {b $} | END_BIT     // msb as name end
 507+ 820F             >
 507+ 820F EE 81       >                dw      last_NFA            // Link to previous definition Name
 507+ 8211             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 8211 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 8214             >
 507+ 8214             >
 507+ 8214             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 8214             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 8214             >
 507+ 8214             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 8214 7C 73 A4 6D                  dw      PAD, HLD, STORE
 508+ 8218 BD 6A
 509+ 821A CE 68                        dw      EXIT
 510+ 821C
 511+ 821C              //  ______________________________________________________________________
 512+ 821C              //
 513+ 821C              // #>           --
 514+ 821C                              Colon_Def DASH_END, "#>", is_normal
 514+ 821C             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 514+ 821C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 821C             >
 514+ 821C             >                // dummy db directives used to calculate length of namec
 514+ 821C 23 3E       >                db      "#>"
 514+ 821E             >len_NFA         defl    $ - temp_NFA
 514+ 821E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 821C             >
 514+ 821C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 821D 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 514+ 821F             >                org     $-1                 // alter last byte of Name just above to set
 514+ 821E BE          >                db      {b $} | END_BIT     // msb as name end
 514+ 821F             >
 514+ 821F 0C 82       >                dw      last_NFA            // Link to previous definition Name
 514+ 8221             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 8221 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 8224             >
 514+ 8224             >
 514+ 8224             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 8224             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 8224             >
 514+ 8224             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 8224 6A 6A                        dw      TWO_DROP
 516+ 8226 A4 6D B2 6A                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 516+ 822A 7C 73 F6 69
 516+ 822E 60 6E
 517+ 8230 CE 68                        dw      EXIT
 518+ 8232
 519+ 8232              //  ______________________________________________________________________
 520+ 8232              //
 521+ 8232              // sign         n d -- d
 522+ 8232                              Colon_Def SIGN, "SIGN", is_normal
 522+ 8232             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 522+ 8232             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 8232             >
 522+ 8232             >                // dummy db directives used to calculate length of namec
 522+ 8232 53 49 47 4E >                db      "SIGN"
 522+ 8236             >len_NFA         defl    $ - temp_NFA
 522+ 8236             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 8232             >
 522+ 8232 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 8233 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 522+ 8237             >                org     $-1                 // alter last byte of Name just above to set
 522+ 8236 CE          >                db      {b $} | END_BIT     // msb as name end
 522+ 8237             >
 522+ 8237 1C 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 8239             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 8239 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 823C             >
 522+ 823C             >
 522+ 823C             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 823C             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 823C             >
 522+ 823C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 823C 3C 6A 45 69                  dw      ROT, ZLESS
 524+ 8240 D8 63                        dw      ZBRANCH
 525+ 8242 08 00                        dw      Sign_Endif - $
 526+ 8244 A5 63 2D 00                  dw          LIT, 45, HOLD
 526+ 8248 65 73
 527+ 824A              Sign_Endif:
 528+ 824A CE 68                        dw      EXIT
 529+ 824C
 530+ 824C              //  ______________________________________________________________________
 531+ 824C              //
 532+ 824C              // #           d1 -- d2
 533+ 824C                              Colon_Def DASH, "#", is_normal
 533+ 824C             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 533+ 824C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 824C             >
 533+ 824C             >                // dummy db directives used to calculate length of namec
 533+ 824C 23          >                db      "#"
 533+ 824D             >len_NFA         defl    $ - temp_NFA
 533+ 824D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 824C             >
 533+ 824C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 824D 23          >                db      "#"               // name string in 7-bit ascii, but
 533+ 824E             >                org     $-1                 // alter last byte of Name just above to set
 533+ 824D A3          >                db      {b $} | END_BIT     // msb as name end
 533+ 824E             >
 533+ 824E 32 82       >                dw      last_NFA            // Link to previous definition Name
 533+ 8250             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 8250 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 8253             >
 533+ 8253             >
 533+ 8253             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 8253             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 8253             >
 533+ 8253             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 8253 73 6D B2 6A                  dw      BASE, FETCH
 535+ 8257
 536+ 8257 F8 68                        dw      TO_R                    // >r           ( ud1 )
 537+ 8259 01 6C 1C 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 537+ 825D 30 68
 538+ 825F 0A 69 26 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 538+ 8263 F8 68
 539+ 8265 30 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 540+ 8267 0A 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 541+ 8269
 542+ 8269 3C 6A                        dw      ROT
 543+ 826B A5 63 09 00                  dw      LIT, 9, OVER, LESS
 543+ 826F F6 69 8C 6E
 544+ 8273 D8 63                        dw      ZBRANCH
 545+ 8275 08 00                        dw      Dash_Endif - $
 546+ 8277 A5 63 07 00                  dw          LIT, 7, PLUS
 546+ 827B 69 69
 547+ 827D              Dash_Endif:
 548+ 827D
 549+ 827D A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 549+ 8281 69 69 65 73
 550+ 8285 CE 68                        dw      EXIT
 551+ 8287
 552+ 8287              //  ______________________________________________________________________
 553+ 8287              //
 554+ 8287              // #s           d1 -- d2
 555+ 8287                              Colon_Def DASHES, "#S", is_normal
 555+ 8287             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 555+ 8287             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 8287             >
 555+ 8287             >                // dummy db directives used to calculate length of namec
 555+ 8287 23 53       >                db      "#S"
 555+ 8289             >len_NFA         defl    $ - temp_NFA
 555+ 8289             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 8287             >
 555+ 8287 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 8288 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 555+ 828A             >                org     $-1                 // alter last byte of Name just above to set
 555+ 8289 D3          >                db      {b $} | END_BIT     // msb as name end
 555+ 828A             >
 555+ 828A 4C 82       >                dw      last_NFA            // Link to previous definition Name
 555+ 828C             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 828C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 828F             >
 555+ 828F             >
 555+ 828F             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 828F             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 828F             >
 555+ 828F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 828F              Dashes_Begin:
 557+ 828F 50 82 86 6A                  dw      DASH, TWO_DUP
 558+ 8293 7C 68 2B 69                  dw          OR_OP, ZEQUAL
 559+ 8297 D8 63                        dw      ZBRANCH
 560+ 8299 F6 FF                        dw      Dashes_Begin - $
 561+ 829B CE 68                        dw      EXIT
 562+ 829D
 563+ 829D              //  ______________________________________________________________________
 564+ 829D              //
 565+ 829D              // d.r          d n --
 566+ 829D                              Colon_Def D_DOT_R, "D.R", is_normal
 566+ 829D             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 566+ 829D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 829D             >
 566+ 829D             >                // dummy db directives used to calculate length of namec
 566+ 829D 44 2E 52    >                db      "D.R"
 566+ 82A0             >len_NFA         defl    $ - temp_NFA
 566+ 82A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 829D             >
 566+ 829D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 829E 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 566+ 82A1             >                org     $-1                 // alter last byte of Name just above to set
 566+ 82A0 D2          >                db      {b $} | END_BIT     // msb as name end
 566+ 82A1             >
 566+ 82A1 87 82       >                dw      last_NFA            // Link to previous definition Name
 566+ 82A3             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 82A3 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 82A6             >
 566+ 82A6             >
 566+ 82A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 82A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 82A6             >
 566+ 82A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 82A6 F8 68                        dw      TO_R
 568+ 82A8 18 6A 43 79                  dw      TUCK, DABS
 569+ 82AC 11 82 8C 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 569+ 82B0 39 82 21 82
 570+ 82B4 0A 69                        dw      R_TO
 571+ 82B6 F6 69 60 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 571+ 82BA F7 81 C2 71
 572+ 82BE CE 68                        dw      EXIT
 573+ 82C0
 574+ 82C0              //  ______________________________________________________________________
 575+ 82C0              //
 576+ 82C0              // .r           n1 n2 --
 577+ 82C0                              Colon_Def DOT_R, ".R", is_normal
 577+ 82C0             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 577+ 82C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 577+ 82C0             >
 577+ 82C0             >                // dummy db directives used to calculate length of namec
 577+ 82C0 2E 52       >                db      ".R"
 577+ 82C2             >len_NFA         defl    $ - temp_NFA
 577+ 82C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 577+ 82C0             >
 577+ 82C0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 577+ 82C1 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 577+ 82C3             >                org     $-1                 // alter last byte of Name just above to set
 577+ 82C2 D2          >                db      {b $} | END_BIT     // msb as name end
 577+ 82C3             >
 577+ 82C3 9D 82       >                dw      last_NFA            // Link to previous definition Name
 577+ 82C5             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 577+ 82C5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 577+ 82C8             >
 577+ 82C8             >
 577+ 82C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 577+ 82C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 577+ 82C8             >
 577+ 82C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 578+ 82C8 F8 68                        dw      TO_R
 579+ 82CA 4E 6E 0A 69                  dw      S_TO_D, R_TO
 580+ 82CE A3 82                        dw      D_DOT_R
 581+ 82D0 CE 68                        dw      EXIT
 582+ 82D2
 583+ 82D2              //  ______________________________________________________________________
 584+ 82D2              //
 585+ 82D2              // d.           d --
 586+ 82D2                              Colon_Def D_DOT, "D.", is_normal
 586+ 82D2             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 586+ 82D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 82D2             >
 586+ 82D2             >                // dummy db directives used to calculate length of namec
 586+ 82D2 44 2E       >                db      "D."
 586+ 82D4             >len_NFA         defl    $ - temp_NFA
 586+ 82D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 82D2             >
 586+ 82D2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 82D3 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 586+ 82D5             >                org     $-1                 // alter last byte of Name just above to set
 586+ 82D4 AE          >                db      {b $} | END_BIT     // msb as name end
 586+ 82D5             >
 586+ 82D5 C0 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 82D7             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 82D7 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 82DA             >
 586+ 82DA             >
 586+ 82DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 82DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 82DA             >
 586+ 82DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 82DA 01 6C A3 82                  dw      ZERO, D_DOT_R, SPACE
 587+ 82DE 1B 6F
 588+ 82E0 CE 68                        dw      EXIT
 589+ 82E2
 590+ 82E2              //  ______________________________________________________________________
 591+ 82E2              //
 592+ 82E2              // .            n --
 593+ 82E2                              Colon_Def DOT, ".", is_normal
 593+ 82E2             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 593+ 82E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 593+ 82E2             >
 593+ 82E2             >                // dummy db directives used to calculate length of namec
 593+ 82E2 2E          >                db      "."
 593+ 82E3             >len_NFA         defl    $ - temp_NFA
 593+ 82E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 593+ 82E2             >
 593+ 82E2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 593+ 82E3 2E          >                db      "."               // name string in 7-bit ascii, but
 593+ 82E4             >                org     $-1                 // alter last byte of Name just above to set
 593+ 82E3 AE          >                db      {b $} | END_BIT     // msb as name end
 593+ 82E4             >
 593+ 82E4 D2 82       >                dw      last_NFA            // Link to previous definition Name
 593+ 82E6             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 593+ 82E6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 593+ 82E9             >
 593+ 82E9             >
 593+ 82E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 593+ 82E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 593+ 82E9             >
 593+ 82E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 594+ 82E9 4E 6E D7 82                  dw      S_TO_D, D_DOT
 595+ 82ED CE 68                        dw      EXIT
 596+ 82EF
 597+ 82EF              //  ______________________________________________________________________
 598+ 82EF              //
 599+ 82EF              // ?            n --
 600+ 82EF                              Colon_Def QUESTION, "?", is_normal
 600+ 82EF             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 600+ 82EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 600+ 82EF             >
 600+ 82EF             >                // dummy db directives used to calculate length of namec
 600+ 82EF 3F          >                db      "?"
 600+ 82F0             >len_NFA         defl    $ - temp_NFA
 600+ 82F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 600+ 82EF             >
 600+ 82EF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 600+ 82F0 3F          >                db      "?"               // name string in 7-bit ascii, but
 600+ 82F1             >                org     $-1                 // alter last byte of Name just above to set
 600+ 82F0 BF          >                db      {b $} | END_BIT     // msb as name end
 600+ 82F1             >
 600+ 82F1 E2 82       >                dw      last_NFA            // Link to previous definition Name
 600+ 82F3             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 600+ 82F3 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 600+ 82F6             >
 600+ 82F6             >
 600+ 82F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 600+ 82F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 600+ 82F6             >
 600+ 82F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 601+ 82F6 B2 6A E6 82                  dw      FETCH, DOT
 602+ 82FA CE 68                        dw      EXIT
 603+ 82FC
 604+ 82FC              //  ______________________________________________________________________
 605+ 82FC              //
 606+ 82FC              // u.           u --
 607+ 82FC                              Colon_Def U_DOT, "U.", is_normal
 607+ 82FC             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 607+ 82FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 82FC             >
 607+ 82FC             >                // dummy db directives used to calculate length of namec
 607+ 82FC 55 2E       >                db      "U."
 607+ 82FE             >len_NFA         defl    $ - temp_NFA
 607+ 82FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 82FC             >
 607+ 82FC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 82FD 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 607+ 82FF             >                org     $-1                 // alter last byte of Name just above to set
 607+ 82FE AE          >                db      {b $} | END_BIT     // msb as name end
 607+ 82FF             >
 607+ 82FF EF 82       >                dw      last_NFA            // Link to previous definition Name
 607+ 8301             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 8301 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 8304             >
 607+ 8304             >
 607+ 8304             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 8304             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 8304             >
 607+ 8304             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 8304 01 6C D7 82                  dw      ZERO, D_DOT
 609+ 8308 CE 68                        dw      EXIT
 610+ 830A
 611+ 830A              //  ______________________________________________________________________
 612+ 830A              //
 613+ 830A              // words        --
 614+ 830A                              Colon_Def WORDS, "WORDS", is_normal
 614+ 830A             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 614+ 830A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 830A             >
 614+ 830A             >                // dummy db directives used to calculate length of namec
 614+ 830A 57 4F 52 44 >                db      "WORDS"
 614+ 830E 53          >
 614+ 830F             >len_NFA         defl    $ - temp_NFA
 614+ 830F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 830A             >
 614+ 830A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 830B 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 614+ 830F 53          >
 614+ 8310             >                org     $-1                 // alter last byte of Name just above to set
 614+ 830F D3          >                db      {b $} | END_BIT     // msb as name end
 614+ 8310             >
 614+ 8310 FC 82       >                dw      last_NFA            // Link to previous definition Name
 614+ 8312             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 8312 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 8315             >
 614+ 8315             >
 614+ 8315             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 8315             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 8315             >
 614+ 8315             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 8315 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 615+ 8319 29 6D BD 6A
 616+ 831D 4E 6D B2 6A                  dw      CONTEXT, FETCH, FETCH
 616+ 8321 B2 6A
 617+ 8323              Words_Begin:
 618+ 8323 31 6A C9 6A                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 618+ 8327 A5 63 1F 00
 618+ 832B 6C 68
 619+ 832D 29 6D B2 6A                  dw          OUT, FETCH, PLUS
 619+ 8331 69 69
 620+ 8333 3B 6C 8C 6E                  dw          CL, LESS, ZEQUAL
 620+ 8337 2B 69
 621+ 8339 D8 63                        dw          ZBRANCH
 622+ 833B 0A 00                        dw          Words_Endif - $
 623+ 833D C5 67 01 6C                  dw              CR, ZERO, OUT, STORE
 623+ 8341 29 6D BD 6A
 624+ 8345              Words_Endif:
 625+ 8345 31 6A C0 75                  dw          DUP, ID_DOT
 626+ 8349 99 6F 64 6F                  dw          PFA, LFA, FETCH
 626+ 834D B2 6A
 627+ 834F 31 6A 2B 69                  dw          DUP, ZEQUAL
 628+ 8353 DF 66 7C 68                  dw          QTERMINAL, OR_OP
 629+ 8357 D8 63                        dw      ZBRANCH
 630+ 8359 CA FF                        dw      Words_Begin - $
 631+ 835B 04 6A                        dw      DROP
 632+ 835D CE 68                        dw      EXIT
 633+ 835F
 634+ 835F              //  ______________________________________________________________________
 635+ 835F              //
 636+ 835F              // list         n --
 637+ 835F                              Colon_Def LIST, "LIST", is_normal
 637+ 835F             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 637+ 835F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 637+ 835F             >
 637+ 835F             >                // dummy db directives used to calculate length of namec
 637+ 835F 4C 49 53 54 >                db      "LIST"
 637+ 8363             >len_NFA         defl    $ - temp_NFA
 637+ 8363             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 637+ 835F             >
 637+ 835F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 637+ 8360 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 637+ 8364             >                org     $-1                 // alter last byte of Name just above to set
 637+ 8363 D4          >                db      {b $} | END_BIT     // msb as name end
 637+ 8364             >
 637+ 8364 0A 83       >                dw      last_NFA            // Link to previous definition Name
 637+ 8366             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 637+ 8366 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 637+ 8369             >
 637+ 8369             >
 637+ 8369             >                endif           ; ok        // for other definitions it "points" the correct handler
 637+ 8369             >                // Use of "; ok" to suppress "warning[fwdref]"
 637+ 8369             >
 637+ 8369             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 638+ 8369 11 71 C5 67                  dw      DECIMAL, CR
 639+ 836D 31 6A 33 6D                  dw      DUP, SCR, STORE
 639+ 8371 BD 6A
 640+ 8373 E0 73                        dw      C_DOT_QUOTE
 641+ 8375 05 53 63 72                  db      5, "Scr# "
 641+ 8379 23 20
 642+ 837B E6 82                        dw      DOT
 643+ 837D 62 6C 01 6C                  dw      LSCR, ZERO, C_DO
 643+ 8381 58 64
 644+ 8383              List_Loop:
 645+ 8383 C5 67                        dw          CR
 646+ 8385 61 64 1C 6C                  dw          I, THREE
 647+ 8389 C5 82 1B 6F                  dw          DOT_R, SPACE
 648+ 838D 61 64 33 6D                  dw          I, SCR, FETCH, DOT_LINE
 648+ 8391 B2 6A 31 7A
 649+ 8395 DF 66                        dw          QTERMINAL
 650+ 8397 D8 63                        dw          ZBRANCH
 651+ 8399 06 00                        dw          List_Endif - $
 652+ 839B E4 68                        dw              C_LEAVE
 653+ 839D 06 00                        dw              List_Leave - $
 654+ 839F              List_Endif:
 655+ 839F EB 63                        dw      C_LOOP
 656+ 83A1 E2 FF                        dw      List_Loop - $
 657+ 83A3              List_Leave:
 658+ 83A3 C5 67                        dw      CR
 659+ 83A5 CE 68                        dw      EXIT
 660+ 83A7
 661+ 83A7              //  ______________________________________________________________________
 662+ 83A7              //
 663+ 83A7              // index        n1 n2 --
 664+ 83A7                              Colon_Def INDEX, "INDEX", is_normal
 664+ 83A7             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 664+ 83A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 664+ 83A7             >
 664+ 83A7             >                // dummy db directives used to calculate length of namec
 664+ 83A7 49 4E 44 45 >                db      "INDEX"
 664+ 83AB 58          >
 664+ 83AC             >len_NFA         defl    $ - temp_NFA
 664+ 83AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 664+ 83A7             >
 664+ 83A7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 664+ 83A8 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 664+ 83AC 58          >
 664+ 83AD             >                org     $-1                 // alter last byte of Name just above to set
 664+ 83AC D8          >                db      {b $} | END_BIT     // msb as name end
 664+ 83AD             >
 664+ 83AD 5F 83       >                dw      last_NFA            // Link to previous definition Name
 664+ 83AF             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 664+ 83AF CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 664+ 83B2             >
 664+ 83B2             >
 664+ 83B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 664+ 83B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 664+ 83B2             >
 664+ 83B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 665+ 83B2 86 69 26 6A                  dw      ONE_PLUS, SWAP, C_DO
 665+ 83B6 58 64
 666+ 83B8              Index_Loop:
 667+ 83B8 C5 67 61 64                  dw          CR, I, THREE
 667+ 83BC 1C 6C
 668+ 83BE C5 82 1B 6F                  dw          DOT_R, SPACE
 669+ 83C2 01 6C 61 64                  dw          ZERO, I, DOT_LINE
 669+ 83C6 31 7A
 670+ 83C8 DF 66                        dw          QTERMINAL
 671+ 83CA D8 63                        dw          ZBRANCH
 672+ 83CC 06 00                        dw          Index_Endif - $
 673+ 83CE E4 68                        dw              C_LEAVE
 674+ 83D0 06 00                        dw              Index_Leave - $
 675+ 83D2              Index_Endif:
 676+ 83D2 EB 63                        dw      C_LOOP
 677+ 83D4 E4 FF                        dw      Index_Loop - $
 678+ 83D6              Index_Leave:
 679+ 83D6 C5 67                        dw      CR
 680+ 83D8 CE 68                        dw      EXIT
 681+ 83DA
 682+ 83DA              //  ______________________________________________________________________
 683+ 83DA              //
 684+ 83DA              // cls          --
 685+ 83DA                              Colon_Def CLS, "CLS", is_normal
 685+ 83DA             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 685+ 83DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 83DA             >
 685+ 83DA             >                // dummy db directives used to calculate length of namec
 685+ 83DA 43 4C 53    >                db      "CLS"
 685+ 83DD             >len_NFA         defl    $ - temp_NFA
 685+ 83DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 83DA             >
 685+ 83DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 83DB 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 685+ 83DE             >                org     $-1                 // alter last byte of Name just above to set
 685+ 83DD D3          >                db      {b $} | END_BIT     // msb as name end
 685+ 83DE             >
 685+ 83DE A7 83       >                dw      last_NFA            // Link to previous definition Name
 685+ 83E0             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 83E0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 83E3             >
 685+ 83E3             >
 685+ 83E3             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 83E3             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 83E3             >
 685+ 83E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 83E3 A5 63 0E 00                  dw      LIT, $0E, EMITC
 686+ 83E7 C4 65
 687+ 83E9 CE 68                        dw      EXIT
 688+ 83EB
 689+ 83EB              //  ______________________________________________________________________
 690+ 83EB              //
 691+ 83EB              // splash       --
 692+ 83EB                              Colon_Def SPLASH, "SPLASH", is_normal
 692+ 83EB             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 692+ 83EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ 83EB             >
 692+ 83EB             >                // dummy db directives used to calculate length of namec
 692+ 83EB 53 50 4C 41 >                db      "SPLASH"
 692+ 83EF 53 48       >
 692+ 83F1             >len_NFA         defl    $ - temp_NFA
 692+ 83F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ 83EB             >
 692+ 83EB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ 83EC 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 692+ 83F0 53 48       >
 692+ 83F2             >                org     $-1                 // alter last byte of Name just above to set
 692+ 83F1 C8          >                db      {b $} | END_BIT     // msb as name end
 692+ 83F2             >
 692+ 83F2 DA 83       >                dw      last_NFA            // Link to previous definition Name
 692+ 83F4             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 83F4 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 83F7             >
 692+ 83F7             >
 692+ 83F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 83F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 83F7             >
 692+ 83F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 83F7 E0 83                        dw      CLS
 694+ 83F9 E0 73                        dw      C_DOT_QUOTE
 695+ 83FB 56                           db      86
 696+ 83FC 76 2D 46 6F                  db      "v-Forth 1.51 NextZXOS version", 13    // 29
 696+ 8400 72 74 68 20
 696+ 8404 31 2E 35 31
 696+ 8408 20 4E 65 78
 696+ 840C 74 5A 58 4F
 696+ 8410 53 20 76 65
 696+ 8414 72 73 69 6F
 696+ 8418 6E 0D
 697+ 841A 44 69 72 65                  db      "Direct Thread - build 20211026", 13  // 31
 697+ 841E 63 74 20 54
 697+ 8422 68 72 65 61
 697+ 8426 64 20 2D 20
 697+ 842A 62 75 69 6C
 697+ 842E 64 20 32 30
 697+ 8432 32 31 31 30
 697+ 8436 32 36 0D
 698+ 8439 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13        // 25
 698+ 843D 2D 32 30 32
 698+ 8441 31 20 4D 61
 698+ 8445 74 74 65 6F
 698+ 8449 20 56 69 74
 698+ 844D 74 75 72 69
 698+ 8451 0D
 699+ 8452 CE 68                        dw      EXIT
 700+ 8454
 701+ 8454              //  ______________________________________________________________________
 702+ 8454              //
 703+ 8454              // video        --
 704+ 8454                              Colon_Def VIDEO, "VIDEO", is_normal
 704+ 8454             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 704+ 8454             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 8454             >
 704+ 8454             >                // dummy db directives used to calculate length of namec
 704+ 8454 56 49 44 45 >                db      "VIDEO"
 704+ 8458 4F          >
 704+ 8459             >len_NFA         defl    $ - temp_NFA
 704+ 8459             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 8454             >
 704+ 8454 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 8455 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 704+ 8459 4F          >
 704+ 845A             >                org     $-1                 // alter last byte of Name just above to set
 704+ 8459 CF          >                db      {b $} | END_BIT     // msb as name end
 704+ 845A             >
 704+ 845A EB 83       >                dw      last_NFA            // Link to previous definition Name
 704+ 845C             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 845C CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 845F             >
 704+ 845F             >
 704+ 845F             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 845F             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 845F             >
 704+ 845F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 845F 13 6C 31 6A                  dw      TWO, DUP, DEVICE, STORE
 705+ 8463 7B 7A BD 6A
 706+ 8467 AB 7A                        dw      SELECT
 707+ 8469 CE 68                        dw      EXIT
 708+ 846B
 709+ 846B              //  ______________________________________________________________________
 710+ 846B              //
 711+ 846B              // accept-      a n1 -- n2
 712+ 846B                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 712+ 846B             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 712+ 846B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 846B             >
 712+ 846B             >                // dummy db directives used to calculate length of namec
 712+ 846B 41 43 43 45 >                db      "ACCEPT-"
 712+ 846F 50 54 2D    >
 712+ 8472             >len_NFA         defl    $ - temp_NFA
 712+ 8472             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 846B             >
 712+ 846B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 846C 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 712+ 8470 50 54 2D    >
 712+ 8473             >                org     $-1                 // alter last byte of Name just above to set
 712+ 8472 AD          >                db      {b $} | END_BIT     // msb as name end
 712+ 8473             >
 712+ 8473 54 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 8475             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 8475 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 8478             >
 712+ 8478             >
 712+ 8478             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 8478             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 8478             >
 712+ 8478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 8478 F8 68                        dw      TO_R
 714+ 847A 01 6C                        dw      ZERO
 715+ 847C 26 6A                        dw      SWAP
 716+ 847E 31 6A                        dw      DUP
 717+ 8480 0A 69                        dw      R_TO
 718+ 8482 69 69                        dw      PLUS
 719+ 8484 26 6A                        dw      SWAP
 720+ 8486 58 64                        dw      C_DO
 721+ 8488              AcceptN_Loop:
 722+ 8488 F5 7A                        dw          MMU7_FETCH
 723+ 848A 88 7A                        dw          INKEY
 724+ 848C 26 6A 08 7B                  dw          SWAP, MMU7_STORE
 725+ 8490 31 6A 2B 69                  dw          DUP, ZEQUAL
 726+ 8494 D8 63                        dw          ZBRANCH
 727+ 8496 06 00                        dw          AcceptN_Endif_1 - $
 728+ 8498 5C 84 0F 78                  dw              VIDEO, QUIT
 729+ 849C              AcceptN_Endif_1:
 730+ 849C 31 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 730+ 84A0 0D 00 6C 6E
 731+ 84A4 D8 63                        dw          ZBRANCH
 732+ 84A6 06 00                        dw          AcceptN_Endif_2 - $
 733+ 84A8 04 6A 01 6C                  dw              DROP, ZERO
 734+ 84AC              AcceptN_Endif_2:
 735+ 84AC 31 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 735+ 84B0 0A 00 6C 6E
 736+ 84B4 D8 63                        dw          ZBRANCH
 737+ 84B6 06 00                        dw          AcceptN_Endif_3 - $
 738+ 84B8 04 6A 01 6C                  dw              DROP, ZERO
 739+ 84BC              AcceptN_Endif_3:
 740+ 84BC 61 64 D5 6A                  dw          I, CSTORE, ONE_PLUS
 740+ 84C0 86 69
 741+ 84C2
 742+ 84C2 61 64 C9 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 742+ 84C6 2B 69
 743+ 84C8 D8 63                        dw          ZBRANCH
 744+ 84CA 06 00                        dw              AcceptN_Endif_4 - $
 745+ 84CC E4 68                        dw                  C_LEAVE     //              leave
 746+ 84CE 06 00                        dw                  AcceptN_Leave - $
 747+ 84D0              AcceptN_Endif_4:                                 //      endif
 748+ 84D0
 749+ 84D0 EB 63                        dw      C_LOOP
 750+ 84D2 B6 FF                        dw      AcceptN_Loop -$
 751+ 84D4              AcceptN_Leave:
 752+ 84D4 CE 68                        dw      EXIT
 753+ 84D6
 754+ 84D6              //  ______________________________________________________________________
 755+ 84D6              //
 756+ 84D6              // load-        n --
 757+ 84D6              // Provided that a stream n is OPEN# via the standart BASIC
 758+ 84D6              // it accepts text from stream #n to the normal INTERPRET
 759+ 84D6              // up to now, text-file must end with QUIT
 760+ 84D6                              Colon_Def LOAD_N, "LOAD-", is_normal
 760+ 84D6             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 760+ 84D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 760+ 84D6             >
 760+ 84D6             >                // dummy db directives used to calculate length of namec
 760+ 84D6 4C 4F 41 44 >                db      "LOAD-"
 760+ 84DA 2D          >
 760+ 84DB             >len_NFA         defl    $ - temp_NFA
 760+ 84DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 760+ 84D6             >
 760+ 84D6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 760+ 84D7 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 760+ 84DB 2D          >
 760+ 84DC             >                org     $-1                 // alter last byte of Name just above to set
 760+ 84DB AD          >                db      {b $} | END_BIT     // msb as name end
 760+ 84DC             >
 760+ 84DC 6B 84       >                dw      last_NFA            // Link to previous definition Name
 760+ 84DE             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 760+ 84DE CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 760+ 84E1             >
 760+ 84E1             >
 760+ 84E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 760+ 84E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 760+ 84E1             >
 760+ 84E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 761+ 84E1 DE 6D BD 6A                  dw      SOURCE_ID, STORE
 762+ 84E5              Load_N_Begin:
 763+ 84E5 9F 6C B2 6A                  dw          TIB, FETCH
 764+ 84E9 31 6A A5 63                  dw          DUP, LIT, 80
 764+ 84ED 50 00
 765+ 84EF 86 6A 55 73                  dw          TWO_DUP, BLANKS
 766+ 84F3 DE 6D B2 6A                  dw          SOURCE_ID, FETCH
 767+ 84F7 33 79 31 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 767+ 84FB 7B 7A BD 6A
 768+ 84FF AB 7A                        dw          SELECT
 769+ 8501 75 84                        dw          ACCEPT_N
 770+ 8503 5C 84                        dw          VIDEO
 771+ 8505 6A 6A                        dw          TWO_DROP
 772+ 8507 01 6C 15 6D                  dw          ZERO, BLK, STORE
 772+ 850B BD 6A
 773+ 850D 01 6C 1F 6D                  dw          ZERO, TO_IN, STORE
 773+ 8511 BD 6A
 774+ 8513 4A 77                        dw          INTERPRET
 775+ 8515 DF 66                        dw          QTERMINAL
 776+ 8517 D8 63                        dw      ZBRANCH
 777+ 8519 CC FF                        dw      Load_N_Begin - $
 778+ 851B CE 68                        dw      EXIT
 779+ 851D
 780+ 851D              //  ______________________________________________________________________
 781+ 851D              //
 782+ 851D              // load         n --
 783+ 851D              // if n is positive, it loads screen #n (as usual)
 784+ 851D              // if n is negative, it connects stream #n to the normal INTERPRET
 785+ 851D              // this second way is useful if you want to load any kind of file
 786+ 851D              // provied that it is OPEN# the usual BASIC way.
 787+ 851D                              Colon_Def LOAD, "LOAD", is_normal
 787+ 851D             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 787+ 851D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 787+ 851D             >
 787+ 851D             >                // dummy db directives used to calculate length of namec
 787+ 851D 4C 4F 41 44 >                db      "LOAD"
 787+ 8521             >len_NFA         defl    $ - temp_NFA
 787+ 8521             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 787+ 851D             >
 787+ 851D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 787+ 851E 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 787+ 8522             >                org     $-1                 // alter last byte of Name just above to set
 787+ 8521 C4          >                db      {b $} | END_BIT     // msb as name end
 787+ 8522             >
 787+ 8522 D6 84       >                dw      last_NFA            // Link to previous definition Name
 787+ 8524             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 787+ 8524 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 787+ 8527             >
 787+ 8527             >
 787+ 8527             >                endif           ; ok        // for other definitions it "points" the correct handler
 787+ 8527             >                // Use of "; ok" to suppress "warning[fwdref]"
 787+ 8527             >
 787+ 8527             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 788+ 8527 31 6A 45 69                  dw      DUP, ZLESS
 789+ 852B D8 63                        dw      ZBRANCH
 790+ 852D 08 00                        dw      Load_Else - $
 791+ 852F DE 84                        dw          LOAD_N
 792+ 8531 C3 63                        dw      BRANCH
 793+ 8533 04 00                        dw      Load_Endif - $
 794+ 8535              Load_Else:
 795+ 8535 E7 80                        dw          LOAD_P
 796+ 8537              Load_Endif:
 797+ 8537 CE 68                        dw      EXIT
 798+ 8539
 799+ 8539
 800+ 8539              //  ______________________________________________________________________
 801+ 8539              //
 802+ 8539              // autoexec     --
 803+ 8539              // this word is called the first time the Forth system boot to
 804+ 8539              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 805+ 8539                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 805+ 8539             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 805+ 8539             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 805+ 8539             >
 805+ 8539             >                // dummy db directives used to calculate length of namec
 805+ 8539 41 55 54 4F >                db      "AUTOEXEC"
 805+ 853D 45 58 45 43 >
 805+ 8541             >len_NFA         defl    $ - temp_NFA
 805+ 8541             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 805+ 8539             >
 805+ 8539 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 805+ 853A 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 805+ 853E 45 58 45 43 >
 805+ 8542             >                org     $-1                 // alter last byte of Name just above to set
 805+ 8541 C3          >                db      {b $} | END_BIT     // msb as name end
 805+ 8542             >
 805+ 8542 1D 85       >                dw      last_NFA            // Link to previous definition Name
 805+ 8544             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 805+ 8544 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 805+ 8547             >
 805+ 8547             >
 805+ 8547             >                endif           ; ok        // for other definitions it "points" the correct handler
 805+ 8547             >                // Use of "; ok" to suppress "warning[fwdref]"
 805+ 8547             >
 805+ 8547             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 806+ 8547 A5 63 0B 00                  dw      LIT, 11
 807+ 854B A5 63 AE 6B                  dw      LIT, NOOP
 808+ 854F A5 63 60 78                  dw      LIT, Autoexec_Ptr
 809+ 8553 BD 6A                        dw      STORE
 810+ 8555 24 85                        dw      LOAD
 811+ 8557 0F 78                        dw      QUIT
 812+ 8559 CE 68                        dw      EXIT
 813+ 855B
 814+ 855B
 815+ 855B              //  ______________________________________________________________________
 816+ 855B              //
 817+ 855B              // bye     --
 818+ 855B              //
 819+ 855B                              Colon_Def BYE, "BYE", is_normal
 819+ 855B             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 819+ 855B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 819+ 855B             >
 819+ 855B             >                // dummy db directives used to calculate length of namec
 819+ 855B 42 59 45    >                db      "BYE"
 819+ 855E             >len_NFA         defl    $ - temp_NFA
 819+ 855E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 819+ 855B             >
 819+ 855B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 819+ 855C 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 819+ 855F             >                org     $-1                 // alter last byte of Name just above to set
 819+ 855E C5          >                db      {b $} | END_BIT     // msb as name end
 819+ 855F             >
 819+ 855F 39 85       >                dw      last_NFA            // Link to previous definition Name
 819+ 8561             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 819+ 8561 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 819+ 8564             >
 819+ 8564             >
 819+ 8564             >                endif           ; ok        // for other definitions it "points" the correct handler
 819+ 8564             >                // Use of "; ok" to suppress "warning[fwdref]"
 819+ 8564             >
 819+ 8564             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 820+ 8564 8C 7D                        dw      FLUSH
 821+ 8566 B9 7C                        dw      EMPTY_BUFFERS
 822+ 8568 53 7B B2 6A                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 822+ 856C 78 67 04 6A
 823+ 8570 01 6C 71 6C                  dw      ZERO, PLUS_ORIGIN
 824+ 8574 F8 78                        dw      BASIC
 825+ 8576
 826+ 8576              //  ______________________________________________________________________
 827+ 8576              //
 828+ 8576              // invv     --
 829+ 8576              //
 830+ 8576              //              Colon_Def INVV, "INVV", is_normal
 831+ 8576              //              dw      LIT, 20, EMITC, ONE, EMITC
 832+ 8576              //              dw      EXIT
 833+ 8576
 834+ 8576              //  ______________________________________________________________________
 835+ 8576              //
 836+ 8576              // truv     --
 837+ 8576              //
 838+ 8576              //              Colon_Def TRUV, "TRUV", is_normal
 839+ 8576              //              dw      LIT, 20, EMITC, ZERO, EMITC
 840+ 8576              //              dw      EXIT
 841+ 8576
 842+ 8576              //  ______________________________________________________________________
 843+ 8576              //
 844+ 8576              // mark     --
 845+ 8576              //
 846+ 8576              //              Colon_Def MARK, "MARK", is_normal
 847+ 8576              //              dw      INVV, TYPE, TRUV
 848+ 8576              //              dw      EXIT
 849+ 8576
 850+ 8576              //  ______________________________________________________________________
 851+ 8576              //
 852+ 8576              // back     --
 853+ 8576              //
 854+ 8576                              Colon_Def BACK, "BACK", is_normal
 854+ 8576             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 854+ 8576             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ 8576             >
 854+ 8576             >                // dummy db directives used to calculate length of namec
 854+ 8576 42 41 43 4B >                db      "BACK"
 854+ 857A             >len_NFA         defl    $ - temp_NFA
 854+ 857A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ 8576             >
 854+ 8576 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ 8577 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 854+ 857B             >                org     $-1                 // alter last byte of Name just above to set
 854+ 857A CB          >                db      {b $} | END_BIT     // msb as name end
 854+ 857B             >
 854+ 857B 5B 85       >                dw      last_NFA            // Link to previous definition Name
 854+ 857D             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 857D CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 8580             >
 854+ 8580             >
 854+ 8580             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 8580             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 8580             >
 854+ 8580             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 8580 0B 6E 60 6E                  dw      HERE, SUBTRACT, COMMA
 855+ 8584 29 6E
 856+ 8586 CE 68                        dw      EXIT
 857+ 8588
 858+ 8588              //  ______________________________________________________________________
 859+ 8588              //
 860+ 8588              // if          ( -- a 2 ) \ compile-time
 861+ 8588              // IF ... THEN
 862+ 8588              // IF ... ELSE ... ENDIF
 863+ 8588                              Colon_Def IF, "IF", is_immediate
 863+ 8588             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 863+ 8588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 863+ 8588             >
 863+ 8588             >                // dummy db directives used to calculate length of namec
 863+ 8588 49 46       >                db      "IF"
 863+ 858A             >len_NFA         defl    $ - temp_NFA
 863+ 858A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 863+ 8588             >
 863+ 8588 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 863+ 8589 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 863+ 858B             >                org     $-1                 // alter last byte of Name just above to set
 863+ 858A C6          >                db      {b $} | END_BIT     // msb as name end
 863+ 858B             >
 863+ 858B 76 85       >                dw      last_NFA            // Link to previous definition Name
 863+ 858D             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 863+ 858D CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 863+ 8590             >
 863+ 8590             >
 863+ 8590             >                endif           ; ok        // for other definitions it "points" the correct handler
 863+ 8590             >                // Use of "; ok" to suppress "warning[fwdref]"
 863+ 8590             >
 863+ 8590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 864+ 8590 7E 70 D8 63                  dw      COMPILE, ZBRANCH
 865+ 8594 0B 6E 01 6C                  dw      HERE, ZERO, COMMA
 865+ 8598 29 6E
 866+ 859A 13 6C                        dw      TWO
 867+ 859C CE 68                        dw      EXIT
 868+ 859E
 869+ 859E              //  ______________________________________________________________________
 870+ 859E              //
 871+ 859E              // endif        ( a 2 -- ) \ compile-time
 872+ 859E              //
 873+ 859E                              Colon_Def ENDIF, "ENDIF", is_immediate
 873+ 859E             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 873+ 859E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 859E             >
 873+ 859E             >                // dummy db directives used to calculate length of namec
 873+ 859E 45 4E 44 49 >                db      "ENDIF"
 873+ 85A2 46          >
 873+ 85A3             >len_NFA         defl    $ - temp_NFA
 873+ 85A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 859E             >
 873+ 859E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 859F 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 873+ 85A3 46          >
 873+ 85A4             >                org     $-1                 // alter last byte of Name just above to set
 873+ 85A3 C6          >                db      {b $} | END_BIT     // msb as name end
 873+ 85A4             >
 873+ 85A4 88 85       >                dw      last_NFA            // Link to previous definition Name
 873+ 85A6             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 85A6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 85A9             >
 873+ 85A9             >
 873+ 85A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 85A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 85A9             >
 873+ 85A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 85A9 00 70                        dw      QCOMP
 875+ 85AB 13 6C 31 70                  dw      TWO, QPAIRS
 876+ 85AF 0B 6E F6 69                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 876+ 85B3 60 6E 26 6A
 876+ 85B7 BD 6A
 877+ 85B9 CE 68                        dw      EXIT
 878+ 85BB
 879+ 85BB              //  ______________________________________________________________________
 880+ 85BB              //
 881+ 85BB              // then        ( a 2 -- ) \ compile-time
 882+ 85BB              //
 883+ 85BB                              Colon_Def THEN, "THEN", is_immediate
 883+ 85BB             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 883+ 85BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 883+ 85BB             >
 883+ 85BB             >                // dummy db directives used to calculate length of namec
 883+ 85BB 54 48 45 4E >                db      "THEN"
 883+ 85BF             >len_NFA         defl    $ - temp_NFA
 883+ 85BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 883+ 85BB             >
 883+ 85BB C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 883+ 85BC 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 883+ 85C0             >                org     $-1                 // alter last byte of Name just above to set
 883+ 85BF CE          >                db      {b $} | END_BIT     // msb as name end
 883+ 85C0             >
 883+ 85C0 9E 85       >                dw      last_NFA            // Link to previous definition Name
 883+ 85C2             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 883+ 85C2 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 883+ 85C5             >
 883+ 85C5             >
 883+ 85C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 883+ 85C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 883+ 85C5             >
 883+ 85C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 884+ 85C5 A6 85                        dw      ENDIF
 885+ 85C7 CE 68                        dw      EXIT
 886+ 85C9
 887+ 85C9              //  ______________________________________________________________________
 888+ 85C9              //
 889+ 85C9              // else        ( a1 2 -- a2 2 ) \ compile-time
 890+ 85C9              //
 891+ 85C9                              Colon_Def ELSE, "ELSE", is_immediate
 891+ 85C9             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 891+ 85C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 85C9             >
 891+ 85C9             >                // dummy db directives used to calculate length of namec
 891+ 85C9 45 4C 53 45 >                db      "ELSE"
 891+ 85CD             >len_NFA         defl    $ - temp_NFA
 891+ 85CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 85C9             >
 891+ 85C9 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 85CA 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 891+ 85CE             >                org     $-1                 // alter last byte of Name just above to set
 891+ 85CD C5          >                db      {b $} | END_BIT     // msb as name end
 891+ 85CE             >
 891+ 85CE BB 85       >                dw      last_NFA            // Link to previous definition Name
 891+ 85D0             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 85D0 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 85D3             >
 891+ 85D3             >
 891+ 85D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 85D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 85D3             >
 891+ 85D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 85D3 00 70                        dw      QCOMP
 893+ 85D5 13 6C 31 70                  dw      TWO, QPAIRS
 894+ 85D9 7E 70 C3 63                  dw      COMPILE, BRANCH
 895+ 85DD 0B 6E 01 6C                  dw      HERE, ZERO, COMMA
 895+ 85E1 29 6E
 896+ 85E3 26 6A 13 6C                  dw      SWAP, TWO, ENDIF
 896+ 85E7 A6 85
 897+ 85E9 13 6C                        dw      TWO
 898+ 85EB CE 68                        dw      EXIT
 899+ 85ED
 900+ 85ED              //  ______________________________________________________________________
 901+ 85ED              //
 902+ 85ED              // begin        ( -- a 1 ) \ compile-time
 903+ 85ED              // BEGIN ... AGAIN
 904+ 85ED              // BEGIN ... f UNTIL
 905+ 85ED              // BEGIN ... f WHILE ... REPEAT
 906+ 85ED                              Colon_Def BEGIN, "BEGIN", is_immediate
 906+ 85ED             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 906+ 85ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ 85ED             >
 906+ 85ED             >                // dummy db directives used to calculate length of namec
 906+ 85ED 42 45 47 49 >                db      "BEGIN"
 906+ 85F1 4E          >
 906+ 85F2             >len_NFA         defl    $ - temp_NFA
 906+ 85F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ 85ED             >
 906+ 85ED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ 85EE 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 906+ 85F2 4E          >
 906+ 85F3             >                org     $-1                 // alter last byte of Name just above to set
 906+ 85F2 CE          >                db      {b $} | END_BIT     // msb as name end
 906+ 85F3             >
 906+ 85F3 C9 85       >                dw      last_NFA            // Link to previous definition Name
 906+ 85F5             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 85F5 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 85F8             >
 906+ 85F8             >
 906+ 85F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 85F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 85F8             >
 906+ 85F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 85F8 00 70                        dw      QCOMP
 908+ 85FA 0B 6E                        dw      HERE
 909+ 85FC 0A 6C                        dw      ONE
 910+ 85FE CE 68                        dw      EXIT
 911+ 8600
 912+ 8600              //  ______________________________________________________________________
 913+ 8600              //
 914+ 8600              // again        ( a 1 -- ) \ compile-time
 915+ 8600                              Colon_Def AGAIN, "AGAIN", is_immediate
 915+ 8600             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 915+ 8600             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ 8600             >
 915+ 8600             >                // dummy db directives used to calculate length of namec
 915+ 8600 41 47 41 49 >                db      "AGAIN"
 915+ 8604 4E          >
 915+ 8605             >len_NFA         defl    $ - temp_NFA
 915+ 8605             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ 8600             >
 915+ 8600 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ 8601 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 915+ 8605 4E          >
 915+ 8606             >                org     $-1                 // alter last byte of Name just above to set
 915+ 8605 CE          >                db      {b $} | END_BIT     // msb as name end
 915+ 8606             >
 915+ 8606 ED 85       >                dw      last_NFA            // Link to previous definition Name
 915+ 8608             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 8608 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 860B             >
 915+ 860B             >
 915+ 860B             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 860B             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 860B             >
 915+ 860B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 860B 00 70                        dw      QCOMP
 917+ 860D 0A 6C 31 70                  dw      ONE, QPAIRS
 918+ 8611 7E 70 C3 63                  dw      COMPILE, BRANCH
 919+ 8615 7D 85                        dw      BACK
 920+ 8617 CE 68                        dw      EXIT
 921+ 8619
 922+ 8619              //  ______________________________________________________________________
 923+ 8619              //
 924+ 8619              // until        ( a 1 -- ) \ compile-time
 925+ 8619                              Colon_Def UNTIL, "UNTIL", is_immediate
 925+ 8619             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 925+ 8619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 925+ 8619             >
 925+ 8619             >                // dummy db directives used to calculate length of namec
 925+ 8619 55 4E 54 49 >                db      "UNTIL"
 925+ 861D 4C          >
 925+ 861E             >len_NFA         defl    $ - temp_NFA
 925+ 861E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 925+ 8619             >
 925+ 8619 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 925+ 861A 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 925+ 861E 4C          >
 925+ 861F             >                org     $-1                 // alter last byte of Name just above to set
 925+ 861E CC          >                db      {b $} | END_BIT     // msb as name end
 925+ 861F             >
 925+ 861F 00 86       >                dw      last_NFA            // Link to previous definition Name
 925+ 8621             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 925+ 8621 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 925+ 8624             >
 925+ 8624             >
 925+ 8624             >                endif           ; ok        // for other definitions it "points" the correct handler
 925+ 8624             >                // Use of "; ok" to suppress "warning[fwdref]"
 925+ 8624             >
 925+ 8624             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 926+ 8624 00 70                        dw      QCOMP
 927+ 8626 0A 6C 31 70                  dw      ONE, QPAIRS
 928+ 862A 7E 70 D8 63                  dw      COMPILE, ZBRANCH
 929+ 862E 7D 85                        dw      BACK
 930+ 8630 CE 68                        dw      EXIT
 931+ 8632
 932+ 8632              //  ______________________________________________________________________
 933+ 8632              //
 934+ 8632              // end          ( a 1 -- ) \ compile-time
 935+ 8632                              Colon_Def END, "END", is_immediate
 935+ 8632             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 935+ 8632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ 8632             >
 935+ 8632             >                // dummy db directives used to calculate length of namec
 935+ 8632 45 4E 44    >                db      "END"
 935+ 8635             >len_NFA         defl    $ - temp_NFA
 935+ 8635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ 8632             >
 935+ 8632 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ 8633 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 935+ 8636             >                org     $-1                 // alter last byte of Name just above to set
 935+ 8635 C4          >                db      {b $} | END_BIT     // msb as name end
 935+ 8636             >
 935+ 8636 19 86       >                dw      last_NFA            // Link to previous definition Name
 935+ 8638             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 8638 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 863B             >
 935+ 863B             >
 935+ 863B             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 863B             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 863B             >
 935+ 863B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 863B 21 86                        dw      UNTIL
 937+ 863D CE 68                        dw      EXIT
 938+ 863F
 939+ 863F              //  ______________________________________________________________________
 940+ 863F              //
 941+ 863F              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 942+ 863F                              Colon_Def WHILE, "WHILE", is_immediate
 942+ 863F             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 942+ 863F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ 863F             >
 942+ 863F             >                // dummy db directives used to calculate length of namec
 942+ 863F 57 48 49 4C >                db      "WHILE"
 942+ 8643 45          >
 942+ 8644             >len_NFA         defl    $ - temp_NFA
 942+ 8644             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ 863F             >
 942+ 863F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ 8640 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 942+ 8644 45          >
 942+ 8645             >                org     $-1                 // alter last byte of Name just above to set
 942+ 8644 C5          >                db      {b $} | END_BIT     // msb as name end
 942+ 8645             >
 942+ 8645 32 86       >                dw      last_NFA            // Link to previous definition Name
 942+ 8647             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 8647 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 864A             >
 942+ 864A             >
 942+ 864A             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 864A             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 864A             >
 942+ 864A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 864A 8D 85                        dw      IF
 944+ 864C 9A 69                        dw      TWO_PLUS // ( that is 4 )
 945+ 864E CE 68                        dw      EXIT
 946+ 8650
 947+ 8650              //  ______________________________________________________________________
 948+ 8650              //
 949+ 8650              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 950+ 8650                              Colon_Def REPEAT, "REPEAT", is_immediate
 950+ 8650             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 950+ 8650             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 8650             >
 950+ 8650             >                // dummy db directives used to calculate length of namec
 950+ 8650 52 45 50 45 >                db      "REPEAT"
 950+ 8654 41 54       >
 950+ 8656             >len_NFA         defl    $ - temp_NFA
 950+ 8656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 8650             >
 950+ 8650 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 8651 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 950+ 8655 41 54       >
 950+ 8657             >                org     $-1                 // alter last byte of Name just above to set
 950+ 8656 D4          >                db      {b $} | END_BIT     // msb as name end
 950+ 8657             >
 950+ 8657 3F 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 8659             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 8659 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 865C             >
 950+ 865C             >
 950+ 865C             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 865C             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 865C             >
 950+ 865C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 865C 76 6A                        dw      TWO_SWAP
 952+ 865E 08 86                        dw      AGAIN
 953+ 8660 13 6C 60 6E                  dw      TWO, SUBTRACT
 954+ 8664 A6 85                        dw      ENDIF
 955+ 8666 CE 68                        dw      EXIT
 956+ 8668
 957+ 8668              //  ______________________________________________________________________
 958+ 8668              //
 959+ 8668              // ?do-
 960+ 8668              // special version of "BACK" used by ?DO and LOOP
 961+ 8668                              Colon_Def C_DO_BACK, "?DO-", is_normal
 961+ 8668             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 961+ 8668             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 961+ 8668             >
 961+ 8668             >                // dummy db directives used to calculate length of namec
 961+ 8668 3F 44 4F 2D >                db      "?DO-"
 961+ 866C             >len_NFA         defl    $ - temp_NFA
 961+ 866C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 961+ 8668             >
 961+ 8668 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 961+ 8669 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 961+ 866D             >                org     $-1                 // alter last byte of Name just above to set
 961+ 866C AD          >                db      {b $} | END_BIT     // msb as name end
 961+ 866D             >
 961+ 866D 50 86       >                dw      last_NFA            // Link to previous definition Name
 961+ 866F             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 961+ 866F CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 961+ 8672             >
 961+ 8672             >
 961+ 8672             >                endif           ; ok        // for other definitions it "points" the correct handler
 961+ 8672             >                // Use of "; ok" to suppress "warning[fwdref]"
 961+ 8672             >
 961+ 8672             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 962+ 8672 7D 85                        dw      BACK
 963+ 8674              CDoBack_Begin:
 964+ 8674 9E 68 91 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 964+ 8678 B2 6A 60 6E
 965+ 867C D8 63                        dw      ZBRANCH
 966+ 867E 0A 00                        dw      CDoBack_While - $
 967+ 8680 9A 69 A6 85                  dw          TWO_PLUS, ENDIF
 968+ 8684 C3 63                        dw      BRANCH
 969+ 8686 EE FF                        dw      CDoBack_Begin - $
 970+ 8688              CDoBack_While:
 971+ 8688 45 70 91 6D                  dw      QCSP, CSP, STORE
 971+ 868C BD 6A
 972+ 868E CE 68                        dw      EXIT
 973+ 8690
 974+ 8690              //  ______________________________________________________________________
 975+ 8690              //
 976+ 8690              // do
 977+ 8690              // DO  ... LOOP
 978+ 8690              // DO  ... n +LOOP
 979+ 8690              // ?DO ... LOOP
 980+ 8690              // ?DO ... n +LOOP
 981+ 8690                              Colon_Def DO, "DO", is_immediate
 981+ 8690             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 981+ 8690             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 981+ 8690             >
 981+ 8690             >                // dummy db directives used to calculate length of namec
 981+ 8690 44 4F       >                db      "DO"
 981+ 8692             >len_NFA         defl    $ - temp_NFA
 981+ 8692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 981+ 8690             >
 981+ 8690 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 981+ 8691 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 981+ 8693             >                org     $-1                 // alter last byte of Name just above to set
 981+ 8692 CF          >                db      {b $} | END_BIT     // msb as name end
 981+ 8693             >
 981+ 8693 68 86       >                dw      last_NFA            // Link to previous definition Name
 981+ 8695             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 981+ 8695 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 981+ 8698             >
 981+ 8698             >
 981+ 8698             >                endif           ; ok        // for other definitions it "points" the correct handler
 981+ 8698             >                // Use of "; ok" to suppress "warning[fwdref]"
 981+ 8698             >
 981+ 8698             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 982+ 8698 7E 70 58 64                  dw      COMPILE, C_DO
 983+ 869C 91 6D B2 6A                  dw      CSP, FETCH, STORE_CSP
 983+ 86A0 D1 6F
 984+ 86A2 0B 6E 1C 6C                  dw      HERE, THREE
 985+ 86A6 CE 68                        dw      EXIT
 986+ 86A8
 987+ 86A8              //  ______________________________________________________________________
 988+ 86A8              //
 989+ 86A8              // loop
 990+ 86A8                              Colon_Def LOOP, "LOOP", is_immediate
 990+ 86A8             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 990+ 86A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ 86A8             >
 990+ 86A8             >                // dummy db directives used to calculate length of namec
 990+ 86A8 4C 4F 4F 50 >                db      "LOOP"
 990+ 86AC             >len_NFA         defl    $ - temp_NFA
 990+ 86AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ 86A8             >
 990+ 86A8 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ 86A9 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 990+ 86AD             >                org     $-1                 // alter last byte of Name just above to set
 990+ 86AC D0          >                db      {b $} | END_BIT     // msb as name end
 990+ 86AD             >
 990+ 86AD 90 86       >                dw      last_NFA            // Link to previous definition Name
 990+ 86AF             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 86AF CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 86B2             >
 990+ 86B2             >
 990+ 86B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 86B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 86B2             >
 990+ 86B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 86B2 1C 6C 31 70                  dw      THREE, QPAIRS
 992+ 86B6 7E 70 EB 63                  dw      COMPILE, C_LOOP
 993+ 86BA 6F 86                        dw      C_DO_BACK
 994+ 86BC CE 68                        dw      EXIT
 995+ 86BE
 996+ 86BE              //  ______________________________________________________________________
 997+ 86BE              //
 998+ 86BE              // +loop
 999+ 86BE                              Colon_Def PLOOP, "+LOOP", is_immediate
 999+ 86BE             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 999+ 86BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 999+ 86BE             >
 999+ 86BE             >                // dummy db directives used to calculate length of namec
 999+ 86BE 2B 4C 4F 4F >                db      "+LOOP"
 999+ 86C2 50          >
 999+ 86C3             >len_NFA         defl    $ - temp_NFA
 999+ 86C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 999+ 86BE             >
 999+ 86BE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 999+ 86BF 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 999+ 86C3 50          >
 999+ 86C4             >                org     $-1                 // alter last byte of Name just above to set
 999+ 86C3 D0          >                db      {b $} | END_BIT     // msb as name end
 999+ 86C4             >
 999+ 86C4 A8 86       >                dw      last_NFA            // Link to previous definition Name
 999+ 86C6             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 999+ 86C6 CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 999+ 86C9             >
 999+ 86C9             >
 999+ 86C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 999+ 86C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 999+ 86C9             >
 999+ 86C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1000+ 86C9 1C 6C 31 70                  dw      THREE, QPAIRS
1001+ 86CD 7E 70 20 64                  dw      COMPILE, C_PLOOP
1002+ 86D1 6F 86                        dw      C_DO_BACK
1003+ 86D3 CE 68                        dw      EXIT
1004+ 86D5
1005+ 86D5              //  ______________________________________________________________________
1006+ 86D5              //
1007+ 86D5              // ?do
1008+ 86D5                              Colon_Def QDO, "?DO", is_immediate
1008+ 86D5             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1008+ 86D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1008+ 86D5             >
1008+ 86D5             >                // dummy db directives used to calculate length of namec
1008+ 86D5 3F 44 4F    >                db      "?DO"
1008+ 86D8             >len_NFA         defl    $ - temp_NFA
1008+ 86D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1008+ 86D5             >
1008+ 86D5 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1008+ 86D6 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1008+ 86D9             >                org     $-1                 // alter last byte of Name just above to set
1008+ 86D8 CF          >                db      {b $} | END_BIT     // msb as name end
1008+ 86D9             >
1008+ 86D9 BE 86       >                dw      last_NFA            // Link to previous definition Name
1008+ 86DB             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1008+ 86DB CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1008+ 86DE             >
1008+ 86DE             >
1008+ 86DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1008+ 86DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1008+ 86DE             >
1008+ 86DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1009+ 86DE 7E 70 2C 64                  dw      COMPILE, C_Q_DO
1010+ 86E2 91 6D B2 6A                  dw      CSP, FETCH, STORE_CSP
1010+ 86E6 D1 6F
1011+ 86E8 0B 6E 01 6C                  dw      HERE, ZERO, COMMA, ZERO
1011+ 86EC 29 6E 01 6C
1012+ 86F0 0B 6E 1C 6C                  dw      HERE, THREE
1013+ 86F4 CE 68                        dw      EXIT
1014+ 86F6
1015+ 86F6              Latest_Definition:
1016+ 86F6              //  ______________________________________________________________________
1017+ 86F6              //
1018+ 86F6              // \
1019+ 86F6                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1019+ 86F6             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1019+ 86F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1019+ 86F6             >
1019+ 86F6             >                // dummy db directives used to calculate length of namec
1019+ 86F6 5C          >                db      "\\"
1019+ 86F7             >len_NFA         defl    $ - temp_NFA
1019+ 86F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1019+ 86F6             >
1019+ 86F6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1019+ 86F7 5C          >                db      "\\"               // name string in 7-bit ascii, but
1019+ 86F8             >                org     $-1                 // alter last byte of Name just above to set
1019+ 86F7 DC          >                db      {b $} | END_BIT     // msb as name end
1019+ 86F8             >
1019+ 86F8 D5 86       >                dw      last_NFA            // Link to previous definition Name
1019+ 86FA             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1019+ 86FA CD 87 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1019+ 86FD             >
1019+ 86FD             >
1019+ 86FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1019+ 86FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1019+ 86FD             >
1019+ 86FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1020+ 86FD 15 6D B2 6A                  dw      BLK, FETCH
1021+ 8701 D8 63                        dw      ZBRANCH
1022+ 8703 30 00                        dw      Backslash_Else_1 - $
1023+ 8705 15 6D B2 6A                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1023+ 8709 0A 6C A6 6E
1024+ 870D D8 63                        dw          ZBRANCH
1025+ 870F 18 00                        dw          Backslash_Else_2 - $
1026+ 8711 1F 6D B2 6A                  dw              TO_IN, FETCH, CL, MOD, CL
1026+ 8715 3B 6C D5 79
1026+ 8719 3B 6C
1027+ 871B 26 6A 60 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1027+ 871F 1F 6D 93 6A
1028+ 8723 C3 63                        dw          BRANCH
1029+ 8725 0A 00                        dw          Backslash_Endif_2 - $
1030+ 8727              Backslash_Else_2:
1031+ 8727 48 6C B3 69                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1031+ 872B 1F 6D BD 6A
1032+ 872F              Backslash_Endif_2:
1033+ 872F C3 63                        dw      BRANCH
1034+ 8731 0A 00                        dw      Backslash_Endif_1 - $
1035+ 8733              Backslash_Else_1:
1036+ 8733 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1036+ 8737 1F 6D BD 6A
1037+ 873B              Backslash_Endif_1:
1038+ 873B CE 68                        dw      EXIT
1039+ 873D
1040+ 873D              Fence_Word:
1041+ 873D              //  ______________________________________________________________________
1042+ 873D              //
1043+ 873D
1044+ 873D 00           Here_Dictionary db      0
1045+ 873E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  873E
 116  873E              // now we save the compiled file so we can either run it or debug it
 117  873E                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  873E                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  873E                              SAVENEX CFG  0
 120  873E                              SAVENEX BANK 2, 0
 121  873E                              SAVENEX AUTO
 122  873E                              SAVENEX CLOSE
 123  873E
 124  873E              //              PAGE 7 ;set 7 page to current slot
 125  873E              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  873E              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  873E
 128  873E                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  873E
 130  873E                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  873E
 132  873E                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
