# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220102
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 FB 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 FB 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 6E 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 B5 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 B5 87        DP_origin       dw      Fence_Word
  39+ 6386 03 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 E1                           pop     hl
 129+ 63B9 E9                           jp      (hl)
 130+ 63BA              //              jr      Exec_Ptr
 131+ 63BA
 132+ 63BA
 133+ 63BA              //  ______________________________________________________________________
 134+ 63BA              //
 135+ 63BA              // branch       --
 136+ 63BA              // unconditional branch in colon definition using the following cell as an offset from current IP value
 137+ 63BA              // compiled by ELSE, AGAIN and some other immediate words
 138+ 63BA
 139+ 63BA                              New_Def BRANCH, "BRANCH", is_code, is_normal
 139+ 63BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63BA             >
 139+ 63BA             >                // dummy db directives used to calculate length of namec
 139+ 63BA 42 52 41 4E >                db      "BRANCH"
 139+ 63BE 43 48       >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63BA             >
 139+ 63BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BB 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 139+ 63BF 43 48       >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 C8          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3              Branch_Ptr:
 141+ 63C3 60                           ld      h, b
 142+ 63C4 69                           ld      l, c
 143+ 63C5 5E                           ld      e, (hl)
 144+ 63C6 23                           inc     hl
 145+ 63C7 56                           ld      d, (hl)
 146+ 63C8 2B                           dec     hl                  // offset is calculated from current IP
 147+ 63C9 19                           add     hl, de
 148+ 63CA 4D                           ld      c, l
 149+ 63CB 44                           ld      b, h
 150+ 63CC                              next
 150+ 63CC DD E9       >                jp      (ix)
 151+ 63CE
 152+ 63CE
 153+ 63CE              //  ______________________________________________________________________
 154+ 63CE              //
 155+ 63CE              // 0branch      f --
 156+ 63CE              // conditional branch if the top-of-stack is ZERO or FALSE.
 157+ 63CE              // compiled by IF, UNTIL and some other immediate words
 158+ 63CE
 159+ 63CE                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 159+ 63CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 63CE             >
 159+ 63CE             >                // dummy db directives used to calculate length of namec
 159+ 63CE 30 42 52 41 >                db      "0BRANCH"
 159+ 63D2 4E 43 48    >
 159+ 63D5             >len_NFA         defl    $ - temp_NFA
 159+ 63D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 63CE             >
 159+ 63CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 63CF 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 159+ 63D3 4E 43 48    >
 159+ 63D6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 63D5 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 63D6             >
 159+ 63D6 BA 63       >                dw      last_NFA            // Link to previous definition Name
 159+ 63D8             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 63D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159+ 63D8 ~           >
 159+ 63D8 ~           >
 159+ 63D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 63D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 63D8             >
 159+ 63D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 63D8              ZBranch_Ptr:
 161+ 63D8 E1                           pop     hl
 162+ 63D9 7D                           ld      a, l
 163+ 63DA B4                           or      h
 164+ 63DB CA C3 63                     jp      z, Branch_Ptr
 165+ 63DE 03                           inc     bc                  // if not branch, skip offset cell.
 166+ 63DF 03                           inc     bc
 167+ 63E0                              next
 167+ 63E0 DD E9       >                jp      (ix)
 168+ 63E2
 169+ 63E2              //  ______________________________________________________________________
 170+ 63E2              //
 171+ 63E2              // (+loop)       --
 172+ 63E2              // compiled by +LOOP. it uses the top two values of return-stack to
 173+ 63E2              // keep track of index and limit, they are accessed via I and I'
 174+ 63E2                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 174+ 63E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 63E2             >
 174+ 63E2             >                // dummy db directives used to calculate length of namec
 174+ 63E2 28 2B 4C 4F >                db      "(+LOOP)"
 174+ 63E6 4F 50 29    >
 174+ 63E9             >len_NFA         defl    $ - temp_NFA
 174+ 63E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 63E2             >
 174+ 63E2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 63E3 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 174+ 63E7 4F 50 29    >
 174+ 63EA             >                org     $-1                 // alter last byte of Name just above to set
 174+ 63E9 A9          >                db      {b $} | END_BIT     // msb as name end
 174+ 63EA             >
 174+ 63EA CE 63       >                dw      last_NFA            // Link to previous definition Name
 174+ 63EC             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 63EC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 174+ 63EC ~           >
 174+ 63EC ~           >
 174+ 63EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 63EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 63EC             >
 174+ 63EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 63EC
 176+ 63EC              Loop_Ptr:
 177+ 63EC D9                           exx
 178+ 63ED                              ldhlrp                      // ld hl,rp macro 30h +Origin
 178+ 63ED 2A 96 63    >                ld      hl,(RP_Pointer)
 179+ 63F0
 180+ 63F0 C1                           pop     bc                  // bc is increment
 181+ 63F1
 182+ 63F1 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 183+ 63F2 7B                           ld      a, e                // de keeps index before increment.
 184+ 63F3 81                           add     c
 185+ 63F4 77                           ld      (hl), a
 186+ 63F5 23                           inc     hl
 187+ 63F6 56                           ld      d, (hl)
 188+ 63F7 7A                           ld      a, d
 189+ 63F8 88                           adc     b
 190+ 63F9 77                           ld      (hl),a
 191+ 63FA 23                           inc     hl
 192+ 63FB
 193+ 63FB 7B                           ld      a, e
 194+ 63FC 96                           sub     (hl)
 195+ 63FD 5F                           ld      e, a
 196+ 63FE 23                           inc     hl
 197+ 63FF 7A                           ld      a, d
 198+ 6400 9E                           sbc     (hl)
 199+ 6401 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 200+ 6402
 201+ 6402 EB                           ex      de, hl
 202+ 6403 09                           add     hl, bc
 203+ 6404
 204+ 6404 CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 205+ 6406 28 01                        jr      z, Loop_NegativeIncrement
 206+ 6408 3F                               ccf
 207+ 6409              Loop_NegativeIncrement:
 208+ 6409 38 04                        jr      c, Loop_Endif
 209+ 640B D9                               exx
 210+ 640C C3 C3 63                         jp      Branch_Ptr      // perform branch consuming following cell
 211+ 640F              Loop_Endif:
 212+ 640F EB                           ex      de, hl
 213+ 6410 23                           inc     hl
 214+ 6411                              ldrphl                      // ld rp,hl macro 30h +Origin
 214+ 6411 22 96 63    >                ld      (RP_Pointer),hl
 215+ 6414 D9                           exx
 216+ 6415 03                           inc     bc                  // skip branch-style offset
 217+ 6416 03                           inc     bc
 218+ 6417                              next
 218+ 6417 DD E9       >                jp      (ix)
 219+ 6419
 220+ 6419              //  ______________________________________________________________________
 221+ 6419              //
 222+ 6419              // (loop)       n --
 223+ 6419              // same as (LOOP) but index is incremented by 1
 224+ 6419              // compiled by LOOP.
 225+ 6419                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 225+ 6419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 225+ 6419             >
 225+ 6419             >                // dummy db directives used to calculate length of namec
 225+ 6419 28 4C 4F 4F >                db      "(LOOP)"
 225+ 641D 50 29       >
 225+ 641F             >len_NFA         defl    $ - temp_NFA
 225+ 641F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 225+ 6419             >
 225+ 6419 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 225+ 641A 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 225+ 641E 50 29       >
 225+ 6420             >                org     $-1                 // alter last byte of Name just above to set
 225+ 641F A9          >                db      {b $} | END_BIT     // msb as name end
 225+ 6420             >
 225+ 6420 E2 63       >                dw      last_NFA            // Link to previous definition Name
 225+ 6422             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 225+ 6422 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 225+ 6422 ~           >
 225+ 6422 ~           >
 225+ 6422             >                endif           ; ok        // for other definitions it "points" the correct handler
 225+ 6422             >                // Use of "; ok" to suppress "warning[fwdref]"
 225+ 6422             >
 225+ 6422             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 226+ 6422 ED 8A 00 01                  push    1
 227+ 6426 C3 EC 63                     jp      Loop_Ptr
 228+ 6429
 229+ 6429              //  ______________________________________________________________________
 230+ 6429              //
 231+ 6429              // (?do)        lim ind --
 232+ 6429              // compiled by ?DO to make a loop checking for lim == ind first
 233+ 6429              // at run-time (?DO) must be followed by a BRANCH offset
 234+ 6429              // used to skip the loop if lim == ind
 235+ 6429                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 235+ 6429             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6429             >
 235+ 6429             >                // dummy db directives used to calculate length of namec
 235+ 6429 28 3F 44 4F >                db      "(?DO)"
 235+ 642D 29          >
 235+ 642E             >len_NFA         defl    $ - temp_NFA
 235+ 642E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6429             >
 235+ 6429 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 642A 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 235+ 642E 29          >
 235+ 642F             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642E A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642F             >
 235+ 642F 19 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 6431             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 6431 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 6431 ~           >
 235+ 6431 ~           >
 235+ 6431             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 6431             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 6431             >
 235+ 6431             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 6431 D1                           pop     de                  // de has the index
 237+ 6432 E1                           pop     hl                  // hl has the limit
 238+ 6433 E5                           push    hl
 239+ 6434 D5                           push    de
 240+ 6435 A7                           and     a                   // reset carry flag
 241+ 6436 ED 52                        sbc     hl, de              // compute limit - index
 242+ 6438 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 243+ 643A D1                               pop     de
 244+ 643B E1                               pop     hl
 245+ 643C
 246+ 643C C3 C3 63                         jp      Branch_Ptr          // perform branch consuming following cell
 247+ 643F              Do_Ptr:
 248+ 643F                              ldhlrp                      // prepare RP
 248+ 643F 2A 96 63    >                ld      hl,(RP_Pointer)
 249+ 6442 2B                           dec     hl
 250+ 6443 2B                           dec     hl
 251+ 6444 2B                           dec     hl
 252+ 6445 2B                           dec     hl
 253+ 6446                              ldrphl
 253+ 6446 22 96 63    >                ld      (RP_Pointer),hl
 254+ 6449
 255+ 6449                              // store index as top RP
 256+ 6449 D1                           pop     de
 257+ 644A 73                           ld      (hl), e
 258+ 644B 23                           inc     hl
 259+ 644C 72                           ld      (hl), d
 260+ 644D 23                           inc     hl
 261+ 644E                              // stores lim as second from top RP
 262+ 644E D1                           pop     de
 263+ 644F 73                           ld      (hl), e
 264+ 6450 23                           inc     hl
 265+ 6451 72                           ld      (hl), d
 266+ 6452
 267+ 6452                              // skip branch-style offseet
 268+ 6452 03                           inc     bc
 269+ 6453 03                           inc     bc
 270+ 6454                              next
 270+ 6454 DD E9       >                jp      (ix)
 271+ 6456
 272+ 6456              //  ______________________________________________________________________
 273+ 6456              //
 274+ 6456              // (do)        lim ind --
 275+ 6456              // compiled by DO to make a loop checking for lim == ind first
 276+ 6456              // this is a simpler version of (?DO)
 277+ 6456                              New_Def C_DO, "(DO)", is_code, is_normal
 277+ 6456             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 277+ 6456             >
 277+ 6456             >                // dummy db directives used to calculate length of namec
 277+ 6456 28 44 4F 29 >                db      "(DO)"
 277+ 645A             >len_NFA         defl    $ - temp_NFA
 277+ 645A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 277+ 6456             >
 277+ 6456 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 277+ 6457 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 277+ 645B             >                org     $-1                 // alter last byte of Name just above to set
 277+ 645A A9          >                db      {b $} | END_BIT     // msb as name end
 277+ 645B             >
 277+ 645B 29 64       >                dw      last_NFA            // Link to previous definition Name
 277+ 645D             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 277+ 645D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 277+ 645D ~           >
 277+ 645D ~           >
 277+ 645D             >                endif           ; ok        // for other definitions it "points" the correct handler
 277+ 645D             >                // Use of "; ok" to suppress "warning[fwdref]"
 277+ 645D             >
 277+ 645D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 278+ 645D 0B                           dec     bc                  // prepare IP beforehand
 279+ 645E 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 280+ 645F C3 3F 64                     jp      Do_Ptr
 281+ 6462
 282+ 6462              //  ______________________________________________________________________
 283+ 6462              //
 284+ 6462              // i            -- n
 285+ 6462              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 286+ 6462              // the current value of the index-loop
 287+ 6462                              New_Def I, "I", is_code, is_normal
 287+ 6462             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ 6462             >
 287+ 6462             >                // dummy db directives used to calculate length of namec
 287+ 6462 49          >                db      "I"
 287+ 6463             >len_NFA         defl    $ - temp_NFA
 287+ 6463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ 6462             >
 287+ 6462 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ 6463 49          >                db      "I"               // name string in 7-bit ascii, but
 287+ 6464             >                org     $-1                 // alter last byte of Name just above to set
 287+ 6463 C9          >                db      {b $} | END_BIT     // msb as name end
 287+ 6464             >
 287+ 6464 56 64       >                dw      last_NFA            // Link to previous definition Name
 287+ 6466             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 6466 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 287+ 6466 ~           >
 287+ 6466 ~           >
 287+ 6466             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 6466             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 6466             >
 287+ 6466             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 6466              I_Ptr:
 289+ 6466
 290+ 6466                              ldhlrp
 290+ 6466 2A 96 63    >                ld      hl,(RP_Pointer)
 291+ 6469              I_Ptr_prime
 292+ 6469 5E                           ld      e, (hl)
 293+ 646A 23                           inc     hl
 294+ 646B 56                           ld      d, (hl)
 295+ 646C D5                           push    de
 296+ 646D                              next
 296+ 646D DD E9       >                jp      (ix)
 297+ 646F
 298+ 646F
 299+ 646F              //  ______________________________________________________________________
 300+ 646F              //
 301+ 646F              // i'            -- n
 302+ 646F              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 303+ 646F              // the limit of the index-loop
 304+ 646F
 305+ 646F                              New_Def II, "I'", is_code, is_normal
 305+ 646F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 305+ 646F             >
 305+ 646F             >                // dummy db directives used to calculate length of namec
 305+ 646F 49 27       >                db      "I'"
 305+ 6471             >len_NFA         defl    $ - temp_NFA
 305+ 6471             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 305+ 646F             >
 305+ 646F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 305+ 6470 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 305+ 6472             >                org     $-1                 // alter last byte of Name just above to set
 305+ 6471 A7          >                db      {b $} | END_BIT     // msb as name end
 305+ 6472             >
 305+ 6472 62 64       >                dw      last_NFA            // Link to previous definition Name
 305+ 6474             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 305+ 6474 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 305+ 6474 ~           >
 305+ 6474 ~           >
 305+ 6474             >                endif           ; ok        // for other definitions it "points" the correct handler
 305+ 6474             >                // Use of "; ok" to suppress "warning[fwdref]"
 305+ 6474             >
 305+ 6474             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 306+ 6474                              ldhlrp
 306+ 6474 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 6477 23                           inc     hl
 308+ 6478 23                           inc     hl
 309+ 6479 18 EE                        jr      I_Ptr_prime
 310+ 647B
 311+ 647B
 312+ 647B              //  ______________________________________________________________________
 313+ 647B              //
 314+ 647B              // digit        c n -- u 1  |  0
 315+ 647B              // convert a character c using base n
 316+ 647B              // returns a unsigned number and a true flag
 317+ 647B              // or just a false flag if the conversion fails
 318+ 647B                              New_Def DIGIT, "DIGIT", is_code, is_normal
 318+ 647B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ 647B             >
 318+ 647B             >                // dummy db directives used to calculate length of namec
 318+ 647B 44 49 47 49 >                db      "DIGIT"
 318+ 647F 54          >
 318+ 6480             >len_NFA         defl    $ - temp_NFA
 318+ 6480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ 647B             >
 318+ 647B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ 647C 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 318+ 6480 54          >
 318+ 6481             >                org     $-1                 // alter last byte of Name just above to set
 318+ 6480 D4          >                db      {b $} | END_BIT     // msb as name end
 318+ 6481             >
 318+ 6481 6F 64       >                dw      last_NFA            // Link to previous definition Name
 318+ 6483             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 6483 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 318+ 6483 ~           >
 318+ 6483 ~           >
 318+ 6483             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 6483             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 6483             >
 318+ 6483             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 6483 E1                           pop     hl                  // l has the base
 320+ 6484 D1                           pop     de                  // e has the digit
 321+ 6485 7B                           ld      a, e
 322+ 6486 FE 60                        cp      $60                 // check if lowercase
 323+ 6488 38 02                        jr      c, Digit_Uppercase
 324+ 648A D6 20                            sub     $20                 // quick'n'dirty uppercase
 325+ 648C              Digit_Uppercase:
 326+ 648C D6 30                        sub     $30
 327+ 648E 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 328+ 6490 FE 0A                            cp      $0A
 329+ 6492 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 330+ 6494 D6 07                                sub     7                   // try hex and subtract 7
 331+ 6496 FE 0A                                cp      $0A
 332+ 6498 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 333+ 649A
 334+ 649A              Digit_Decimal:
 335+ 649A                              // compare digit
 336+ 649A BD                           cp      l                   // compare with base
 337+ 649B
 338+ 649B 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 339+ 649D 5F                               ld      e, a                // digit is returned as second from TOS
 340+ 649E 21 01 00                         ld      hl, 1
 341+ 64A1
 342+ 64A1                                  psh2
 342+ 64A1 D5          >                push    de
 342+ 64A2 E5          >                push    hl
 342+ 64A3 DD E9       >                jp      (ix)
 343+ 64A5              Digit_Fail:
 344+ 64A5 21 00 00                     ld      hl, 0
 345+ 64A8                              psh1
 345+ 64A8 E5          >                push    hl
 345+ 64A9 DD E9       >                jp      (ix)
 346+ 64AB
 347+ 64AB              //  ______________________________________________________________________
 348+ 64AB              //
 349+ 64AB              //  parametric uppercase routine
 350+ 64AB              //  depending on the following op-code the routine can be by-passed
 351+ 64AB              //  changing the behaviour of some callers.
 352+ 64AB              //  If it is "ret" then the system is Case-Sensitive
 353+ 64AB              //  If it is "Nop" then the system is Case-Insensitive
 354+ 64AB              //  Only A register is touched.
 355+ 64AB 00           Case_Sensitive: nop                         // Default is case-insensitive.
 356+ 64AC              Case_Upper:
 357+ 64AC FE 61                        cp      LC_A_CHAR           // lower-case "a"
 358+ 64AE D8                           ret     c                   // no change if A < "a"
 359+ 64AF FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 360+ 64B1 D0                           ret     nc                  // no change if A > "z"
 361+ 64B2 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 362+ 64B4 C9                           ret
 363+ 64B5
 364+ 64B5              //  ______________________________________________________________________
 365+ 64B5              //
 366+ 64B5              //  caseon      --
 367+ 64B5              // set system case-sensitivity on
 368+ 64B5              // it patches a RET/NOP at the beginning of the uppercase-routine
 369+ 64B5                              New_Def CASEON, "CASEON", is_code, is_normal
 369+ 64B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 369+ 64B5             >
 369+ 64B5             >                // dummy db directives used to calculate length of namec
 369+ 64B5 43 41 53 45 >                db      "CASEON"
 369+ 64B9 4F 4E       >
 369+ 64BB             >len_NFA         defl    $ - temp_NFA
 369+ 64BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 369+ 64B5             >
 369+ 64B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 369+ 64B6 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 369+ 64BA 4F 4E       >
 369+ 64BC             >                org     $-1                 // alter last byte of Name just above to set
 369+ 64BB CE          >                db      {b $} | END_BIT     // msb as name end
 369+ 64BC             >
 369+ 64BC 7B 64       >                dw      last_NFA            // Link to previous definition Name
 369+ 64BE             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 369+ 64BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 369+ 64BE ~           >
 369+ 64BE ~           >
 369+ 64BE             >                endif           ; ok        // for other definitions it "points" the correct handler
 369+ 64BE             >                // Use of "; ok" to suppress "warning[fwdref]"
 369+ 64BE             >
 369+ 64BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 370+ 64BE 3E C9                        ld      a, $C9              // "ret"
 371+ 64C0 32 AB 64                     ld      (Case_Sensitive), a
 372+ 64C3                              next
 372+ 64C3 DD E9       >                jp      (ix)
 373+ 64C5
 374+ 64C5              //  ______________________________________________________________________
 375+ 64C5              //
 376+ 64C5              //  caseoff     --
 377+ 64C5              // set system case-sensitivity on
 378+ 64C5              // it patches a RET/NOP at the beginning of the uppercase-routine
 379+ 64C5                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 379+ 64C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 64C5             >
 379+ 64C5             >                // dummy db directives used to calculate length of namec
 379+ 64C5 43 41 53 45 >                db      "CASEOFF"
 379+ 64C9 4F 46 46    >
 379+ 64CC             >len_NFA         defl    $ - temp_NFA
 379+ 64CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 64C5             >
 379+ 64C5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 64C6 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 379+ 64CA 4F 46 46    >
 379+ 64CD             >                org     $-1                 // alter last byte of Name just above to set
 379+ 64CC C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 64CD             >
 379+ 64CD B5 64       >                dw      last_NFA            // Link to previous definition Name
 379+ 64CF             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 64CF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 379+ 64CF ~           >
 379+ 64CF ~           >
 379+ 64CF             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 64CF             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 64CF             >
 379+ 64CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 64CF 3E 00                        ld      a, $00              // "nop"
 381+ 64D1 32 AB 64                     ld      (Case_Sensitive), a
 382+ 64D4                              next
 382+ 64D4 DD E9       >                jp      (ix)
 383+ 64D6
 384+ 64D6              //  ______________________________________________________________________
 385+ 64D6              //
 386+ 64D6              //  upper       c1 -- c1 | c2
 387+ 64D6              // character on top of stack is forced to Uppercase.
 388+ 64D6                              New_Def UPPER, "UPPER", is_code, is_normal
 388+ 64D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 64D6             >
 388+ 64D6             >                // dummy db directives used to calculate length of namec
 388+ 64D6 55 50 50 45 >                db      "UPPER"
 388+ 64DA 52          >
 388+ 64DB             >len_NFA         defl    $ - temp_NFA
 388+ 64DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 64D6             >
 388+ 64D6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 64D7 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 388+ 64DB 52          >
 388+ 64DC             >                org     $-1                 // alter last byte of Name just above to set
 388+ 64DB D2          >                db      {b $} | END_BIT     // msb as name end
 388+ 64DC             >
 388+ 64DC C5 64       >                dw      last_NFA            // Link to previous definition Name
 388+ 64DE             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 64DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 388+ 64DE ~           >
 388+ 64DE ~           >
 388+ 64DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 64DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 64DE             >
 388+ 64DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 64DE E1                           pop     hl
 390+ 64DF 7D                           ld      a, l
 391+ 64E0 CD AC 64                     call    Case_Upper
 392+ 64E3 6F                           ld      l, a
 393+ 64E4
 394+ 64E4                              psh1
 394+ 64E4 E5          >                push    hl
 394+ 64E5 DD E9       >                jp      (ix)
 395+ 64E7
 396+ 64E7              //  ______________________________________________________________________
 397+ 64E7              //
 398+ 64E7              // (find)       addr voc -- addr 0 | cfa b 1
 399+ 64E7              // vocabulary search,
 400+ 64E7              // - voc is starting word's NFA
 401+ 64E7              // - addr is the string to be searched for
 402+ 64E7              // On success, it returns the CFA of found word, the first NFA byte
 403+ 64E7              // (which contains length and some flags) and a true flag.
 404+ 64E7              // On fail, a false flag  (no more: leaves addr unchanged)
 405+ 64E7                              New_Def C_FIND, "(FIND)", is_code, is_normal
 405+ 64E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 405+ 64E7             >
 405+ 64E7             >                // dummy db directives used to calculate length of namec
 405+ 64E7 28 46 49 4E >                db      "(FIND)"
 405+ 64EB 44 29       >
 405+ 64ED             >len_NFA         defl    $ - temp_NFA
 405+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 405+ 64E7             >
 405+ 64E7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 405+ 64E8 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 405+ 64EC 44 29       >
 405+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 405+ 64ED A9          >                db      {b $} | END_BIT     // msb as name end
 405+ 64EE             >
 405+ 64EE D6 64       >                dw      last_NFA            // Link to previous definition Name
 405+ 64F0             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 405+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 405+ 64F0 ~           >
 405+ 64F0 ~           >
 405+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 405+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 405+ 64F0             >
 405+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 406+ 64F0                                                              // de has dictionary pointer
 407+ 64F0 D1                               pop     de
 408+ 64F1              Find_VocabularyLoop:
 409+ 64F1 E1                               pop     hl                  // string pointer to search for
 410+ 64F2 E5                               push    hl                  // keep it on stack too for the end.
 411+ 64F3 1A                               ld      a, (de)             // save NFA length byte
 412+ 64F4 08                               ex      af,af'              // for later use (!)
 413+ 64F5 1A                               ld      a, (de)             // reload NFA length byte
 414+ 64F6 AE                               xor     (hl)                // check if same length
 415+ 64F7 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 416+ 64F9                                  // word an text haven't the same length, skip to next vocabulary entry
 417+ 64F9 20 2C                            jr      nz, Find_DifferentLenght
 418+ 64FB
 419+ 64FB              Find_ThisWord:  // begin loop
 420+ 64FB 23                                   inc     hl
 421+ 64FC 13                                   inc     de
 422+ 64FD 1A                                   ld      a, (de)
 423+ 64FE                                      // case insensitive option - begin
 424+ 64FE C5                                   push    bc
 425+ 64FF E6 80                                and     $80                 // split A in msb and the rest
 426+ 6501 47                                   ld      b, a
 427+ 6502 1A                                   ld      a, (de)
 428+ 6503 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 429+ 6505 CD AB 64                             call    Case_Sensitive      // uppercase routine
 430+ 6508 4F                                   ld      c, a
 431+ 6509 7E                                   ld      a, (hl)
 432+ 650A CD AB 64                             call    Case_Sensitive      // uppercase routine
 433+ 650D A9                                   xor     c
 434+ 650E A8                                   xor     b
 435+ 650F C1                                   pop     bc
 436+ 6510                                      // case insensitive option - end
 437+ 6510 87                                   add     a                   // ignore msb during compare
 438+ 6511 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 439+ 6513
 440+ 6513                                  // loop back until last byte msb is found set
 441+ 6513                                  // that bit marks the ending char of this word
 442+ 6513 30 E6                            jr      nc, Find_ThisWord
 443+ 6515
 444+ 6515                                  // match found !
 445+ 6515 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 446+ 6518 19                                   add     hl, de
 447+ 6519 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 448+ 651A 08                                   ex      af, af'             // retrieve NFA byte (!)
 449+ 651B 5F                                   ld      e, a
 450+ 651C 16 00                                ld      d, 0
 451+ 651E
 452+ 651E
 453+ 651E 21 01 00                             ld      hl, 1
 454+ 6521                                      psh2
 454+ 6521 D5          >                push    de
 454+ 6522 E5          >                push    hl
 454+ 6523 DD E9       >                jp      (ix)
 455+ 6525
 456+ 6525              Find_DidntMatch: // didn't match (*)
 457+ 6525 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 458+ 6527
 459+ 6527              Find_DifferentLenght:
 460+ 6527                              // consume chars until the end of the word
 461+ 6527                              // that is last byte msb is found set
 462+ 6527 13                               inc     de
 463+ 6528 1A                               ld      a, (de)
 464+ 6529 87                               add     a, a
 465+ 652A 30 FB                        jr      nc, Find_DifferentLenght
 466+ 652C
 467+ 652C              Find_WordEnd:   // word-end  found (**)
 468+ 652C                              // take LFA and use it
 469+ 652C 13                           inc     de
 470+ 652D EB                           ex      de, hl
 471+ 652E 5E                           ld      e, (hl)
 472+ 652F 23                           inc     hl
 473+ 6530 56                           ld      d, (hl)
 474+ 6531 7A                           ld      a, d
 475+ 6532 B3                           or      e
 476+ 6533
 477+ 6533                          // loop until end of vocabulary
 478+ 6533 20 BC                    jr      nz, Find_VocabularyLoop
 479+ 6535
 480+ 6535 E1                       pop     hl              // with this, it leaves addr unchanged
 481+ 6536 21 00 00                 ld      hl, FALSE_FLAG
 482+ 6539
 483+ 6539                          psh1
 483+ 6539 E5          >                push    hl
 483+ 653A DD E9       >                jp      (ix)
 484+ 653C
 485+ 653C              //  ______________________________________________________________________
 486+ 653C              //
 487+ 653C              // enclose      a c -- a  n1 n2 n3
 488+ 653C              // starting from a, using delimiter c, determines the offsets:
 489+ 653C              //   n1   the first character non-delimiter
 490+ 653C              //   n2   the first delimiter after the text
 491+ 653C              //   n3   the first character non enclosed.
 492+ 653C              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 493+ 653C              // an uncoditional delimiter.
 494+ 653C              // Examples:
 495+ 653C              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 496+ 653C              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 497+ 653C              // iii:	c  c  'nul'          -- 2  3  2
 498+ 653C                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 498+ 653C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ 653C             >
 498+ 653C             >                // dummy db directives used to calculate length of namec
 498+ 653C 45 4E 43 4C >                db      "ENCLOSE"
 498+ 6540 4F 53 45    >
 498+ 6543             >len_NFA         defl    $ - temp_NFA
 498+ 6543             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ 653C             >
 498+ 653C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ 653D 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 498+ 6541 4F 53 45    >
 498+ 6544             >                org     $-1                 // alter last byte of Name just above to set
 498+ 6543 C5          >                db      {b $} | END_BIT     // msb as name end
 498+ 6544             >
 498+ 6544 E7 64       >                dw      last_NFA            // Link to previous definition Name
 498+ 6546             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 6546 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 498+ 6546 ~           >
 498+ 6546 ~           >
 498+ 6546             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 6546             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 6546             >
 498+ 6546             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 6546 D1                           pop     de                  //  e has the character
 500+ 6547 E1                           pop     hl                  // hl has the string address
 501+ 6548 E5                           push    hl
 502+ 6549 7B                           ld      a, e
 503+ 654A 11 FF FF                     ld      de, -1              // let's start from -1
 504+ 654D 2B                           dec     hl
 505+ 654E              Enclose_NonDelimiter:
 506+ 654E                              // find first non delimiter
 507+ 654E 23                               inc     hl
 508+ 654F 13                               inc     de
 509+ 6550 BE                               cp      (hl)
 510+ 6551 28 FB                        jr      z, Enclose_NonDelimiter
 511+ 6553 D5                           push    de
 512+ 6554
 513+ 6554 C5                           push    bc                  // save Instruction Pointer
 514+ 6555
 515+ 6555 4F                           ld      c, a                // save char
 516+ 6556 7E                           ld      a, (hl)
 517+ 6557 A7                           and     a                   // stop if 0x00
 518+ 6558 20 07                        jr      nz, Enclose_NextChar
 519+ 655A
 520+ 655A                              /// case iii. no more character in string
 521+ 655A C1                               pop     bc                  // restore Instruction Pointer
 522+ 655B 13                               inc     de
 523+ 655C D5                               push    de
 524+ 655D 1B                               dec     de
 525+ 655E D5                               push    de
 526+ 655F                                  next
 526+ 655F DD E9       >                jp      (ix)
 527+ 6561              Enclose_NextChar:
 528+ 6561 79                               ld      a, c
 529+ 6562 23                               inc     hl
 530+ 6563 13                               inc     de
 531+ 6564 BE                               cp      (hl)
 532+ 6565 20 06                            jr      nz, Enclose_NonSeparator
 533+ 6567
 534+ 6567                                      // case i. first non enclosed
 535+ 6567 C1                                   pop     bc                  // restore Instruction Pointer
 536+ 6568 D5                                   push    de
 537+ 6569 13                                   inc     de
 538+ 656A D5                                   push    de
 539+ 656B                                      next
 539+ 656B DD E9       >                jp      (ix)
 540+ 656D              Enclose_NonSeparator:
 541+ 656D 7E                               ld      a, (hl)
 542+ 656E A7                               and     a
 543+ 656F 20 F0                        jr      nz, Enclose_NextChar
 544+ 6571
 545+ 6571                              // case ii. separator & terminator
 546+ 6571 C1                           pop     bc                  // restore Instruction Pointer
 547+ 6572 D5                           push    de
 548+ 6573 D5                           push    de
 549+ 6574                              next
 549+ 6574 DD E9       >                jp      (ix)
 550+ 6576
 551+ 6576              //  ______________________________________________________________________
 552+ 6576              //
 553+ 6576              // (map)        a2 a1 n c1 -- c2
 554+ 6576              // translate character c1 using mapping string a2 and a2
 555+ 6576              // if c1 is not present within string a1 then
 556+ 6576              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 557+ 6576                              New_Def C_MAP, "(MAP)", is_code, is_normal
 557+ 6576             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 6576             >
 557+ 6576             >                // dummy db directives used to calculate length of namec
 557+ 6576 28 4D 41 50 >                db      "(MAP)"
 557+ 657A 29          >
 557+ 657B             >len_NFA         defl    $ - temp_NFA
 557+ 657B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 6576             >
 557+ 6576 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 6577 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 557+ 657B 29          >
 557+ 657C             >                org     $-1                 // alter last byte of Name just above to set
 557+ 657B A9          >                db      {b $} | END_BIT     // msb as name end
 557+ 657C             >
 557+ 657C 3C 65       >                dw      last_NFA            // Link to previous definition Name
 557+ 657E             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 657E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 557+ 657E ~           >
 557+ 657E ~           >
 557+ 657E             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 657E             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 657E             >
 557+ 657E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 657E D9                           exx
 559+ 657F E1                           pop     hl
 560+ 6580 7D                           ld      a, l
 561+ 6581 C1                           pop     bc
 562+ 6582 E1                           pop     hl
 563+ 6583 50                           ld      d, b
 564+ 6584 59                           ld      e, c
 565+ 6585 ED B1                        cpir
 566+ 6587 E1                           pop     hl
 567+ 6588 20 05                        jr      nz, C_Map_Then
 567+ 658A
 568+ 658A 19                               add     hl, de
 569+ 658B 2B                               dec     hl
 570+ 658C ED 42                            sbc     hl, bc
 571+ 658E 7E                               ld      a, (hl)
 572+ 658F              C_Map_Then:
 573+ 658F 6F                           ld      l, a
 574+ 6590 26 00                        ld      h, 0
 575+ 6592 E5                           push    hl
 576+ 6593 D9                           exx
 577+ 6594                              next
 577+ 6594 DD E9       >                jp      (ix)
 578+ 6596
 579+ 6596              //  ______________________________________________________________________
 580+ 6596              //
 581+ 6596              // (compare)    a1 a2 n -- b
 582+ 6596              // this word performs a lexicographic compare of n bytes of text at address a1
 583+ 6596              // with n bytes of text at address a2. It returns numeric a value:
 584+ 6596              //  0 : if strings are equal
 585+ 6596              // +1 : if string at a1 greater than string at a2
 586+ 6596              // -1 : if string at a1 less than string at a2
 587+ 6596              // strings can be 256 bytes in length at most.
 588+ 6596                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 588+ 6596             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 588+ 6596             >
 588+ 6596             >                // dummy db directives used to calculate length of namec
 588+ 6596 28 43 4F 4D >                db      "(COMPARE)"
 588+ 659A 50 41 52 45 >
 588+ 659E 29          >
 588+ 659F             >len_NFA         defl    $ - temp_NFA
 588+ 659F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 588+ 6596             >
 588+ 6596 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 588+ 6597 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 588+ 659B 50 41 52 45 >
 588+ 659F 29          >
 588+ 65A0             >                org     $-1                 // alter last byte of Name just above to set
 588+ 659F A9          >                db      {b $} | END_BIT     // msb as name end
 588+ 65A0             >
 588+ 65A0 76 65       >                dw      last_NFA            // Link to previous definition Name
 588+ 65A2             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 588+ 65A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 588+ 65A2 ~           >
 588+ 65A2 ~           >
 588+ 65A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 588+ 65A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 588+ 65A2             >
 588+ 65A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 589+ 65A2 D9                           exx
 590+ 65A3 E1                           pop     hl                  // Number of bytes
 591+ 65A4 7D                           ld      a, l
 592+ 65A5 E1                           pop     hl                  // hl points string a2
 593+ 65A6 D1                           pop     de                  // hl points string a1
 594+ 65A7              //              push    bc                  // Instruction pointer on stack
 595+ 65A7 47                           ld      b, a
 596+ 65A8              C_Compare_Loop:
 597+ 65A8 7E                               ld      a, (hl)
 598+ 65A9 CD AB 64                         call    Case_Sensitive
 599+ 65AC 4F                               ld      c, a
 600+ 65AD 1A                               ld      a, (de)
 601+ 65AE CD AB 64                         call    Case_Sensitive
 602+ 65B1 B9                               cp      c
 603+ 65B2 13                               inc     de
 604+ 65B3 23                               inc     hl
 605+ 65B4 28 0E                            jr      z, C_Compare_Equal
 606+ 65B6 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 607+ 65B8 21 01 00                                 ld      hl, 1               // a1 gt a2
 608+ 65BB 18 03                                jr      C_Compare_Then      // Else
 609+ 65BD              C_Compare_NotLessThan:
 610+ 65BD 21 FF FF                                 ld      hl, -1              // a1 lt a2
 611+ 65C0              C_Compare_Then:                                 // Endif
 612+ 65C0              //                      pop     bc              // restore Instruction Pointer
 613+ 65C0 E5                                   push    hl
 614+ 65C1 D9                                   exx
 615+ 65C2
 616+ 65C2                                      next
 616+ 65C2 DD E9       >                jp      (ix)
 617+ 65C4
 618+ 65C4              C_Compare_Equal:
 619+ 65C4 10 E2                        djnz    C_Compare_Loop
 620+ 65C6 21 00 00                     ld      hl, 0               // a1 eq a2
 621+ 65C9              //              pop     bc                  // restore Instruction Pointer
 622+ 65C9 E5                           push    hl
 623+ 65CA D9                           exx
 624+ 65CB
 625+ 65CB                              next
 625+ 65CB DD E9       >                jp      (ix)
 626+ 65CD
 627+ 65CD              //  ______________________________________________________________________
 628+ 65CD              //
 629+ 65CD              // emitc        c --
 630+ 65CD              // low level emit, calls ROM routine at #10 to send a character to
 631+ 65CD              // the the current channel (see SELECT to change stream-channel)
 632+ 65CD                              New_Def EMITC, "EMITC", is_code, is_normal
 632+ 65CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 632+ 65CD             >
 632+ 65CD             >                // dummy db directives used to calculate length of namec
 632+ 65CD 45 4D 49 54 >                db      "EMITC"
 632+ 65D1 43          >
 632+ 65D2             >len_NFA         defl    $ - temp_NFA
 632+ 65D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 632+ 65CD             >
 632+ 65CD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 632+ 65CE 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 632+ 65D2 43          >
 632+ 65D3             >                org     $-1                 // alter last byte of Name just above to set
 632+ 65D2 C3          >                db      {b $} | END_BIT     // msb as name end
 632+ 65D3             >
 632+ 65D3 96 65       >                dw      last_NFA            // Link to previous definition Name
 632+ 65D5             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 632+ 65D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 632+ 65D5 ~           >
 632+ 65D5 ~           >
 632+ 65D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 632+ 65D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 632+ 65D5             >
 632+ 65D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 633+ 65D5 E1                           pop     hl
 634+ 65D6 7D                           ld      a, l
 635+ 65D7              Emitc_Ptr:
 636+ 65D7 C5                           push    bc
 637+ 65D8 DD E5                        push    ix
 638+ 65DA D7                           rst     $10
 639+ 65DB DD E1                        pop     ix
 640+ 65DD C1                           pop     bc
 641+ 65DE 3E FF                        ld      a, 255            // max possible
 642+ 65E0 32 8C 5C                     ld      (SCR_CT), a
 643+ 65E3
 644+ 65E3                              next
 644+ 65E3 DD E9       >                jp      (ix)
 645+ 65E5
 646+ 65E5              Emitc_Vec:
 647+ 65E5 28 66                        dw      C_Emit_Printable  // comma
 648+ 65E7 2E 66                        dw      C_Emit_Bel        // bel
 649+ 65E9 28 66                        dw      C_Emit_Printable  // bs
 650+ 65EB 43 66                        dw      C_Emit_Tab        // tab
 651+ 65ED 28 66                        dw      C_Emit_Printable  // cr
 652+ 65EF 49 66                        dw      C_Emit_NL         // lf (unix newline)
 653+ 65F1 28 66                        dw      C_Emit_Printable  // blank
 654+ 65F3 28 66                        dw      C_Emit_Printable  // blank
 655+ 65F5
 656+ 65F5              Emit_Selector_Start:
 657+ 65F5 06                           db      $06                 // comma
 658+ 65F6 07                           db      $07                 // bel
 659+ 65F7 08                           db      $08                 // bs
 660+ 65F8 09                           db      $09                 // tab
 661+ 65F9 0D                           db      $0D                 // cr
 662+ 65FA 0A                           db      $0A                 // lf (unix newline)
 663+ 65FB 20                           db      $20
 664+ 65FC              Emit_Selector_End:
 665+ 65FC 20                           db      $20
 666+ 65FD
 667+ 65FD              //  ______________________________________________________________________
 668+ 65FD              //
 669+ 65FD              // (?emit)      c1 -- c2 | c1
 670+ 65FD              // decode a character to be sent via EMIT
 671+ 65FD              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 672+ 65FD              // the routine should resolve anything and convert the character anyway.
 673+ 65FD                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 673+ 65FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 65FD             >
 673+ 65FD             >                // dummy db directives used to calculate length of namec
 673+ 65FD 28 3F 45 4D >                db      "(?EMIT)"
 673+ 6601 49 54 29    >
 673+ 6604             >len_NFA         defl    $ - temp_NFA
 673+ 6604             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 65FD             >
 673+ 65FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 65FE 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 673+ 6602 49 54 29    >
 673+ 6605             >                org     $-1                 // alter last byte of Name just above to set
 673+ 6604 A9          >                db      {b $} | END_BIT     // msb as name end
 673+ 6605             >
 673+ 6605 CD 65       >                dw      last_NFA            // Link to previous definition Name
 673+ 6607             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 6607 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 673+ 6607 ~           >
 673+ 6607 ~           >
 673+ 6607             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 6607             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 6607             >
 673+ 6607             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 6607 D1                           pop     de
 675+ 6608 7B                           ld      a, e                //  de has c1
 676+ 6609 E6 7F                        and     $7F                 // 7-bit ascii only
 677+ 660B C5                           push    bc                  // save Instruction Pointer
 678+ 660C 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 679+ 660F 21 FC 65                     ld      hl, Emit_Selector_End
 680+ 6612 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 681+ 6614 20 0B                        jr      nz, C_Emit_Not_Found
 682+ 6616                                  // Found then decode it
 683+ 6616 21 E5 65                         ld      hl, Emitc_Vec
 684+ 6619 09                               add     hl, bc
 685+ 661A 09                               add     hl, bc
 686+ 661B 5E                               ld      e, (hl)
 687+ 661C 23                               inc     hl
 688+ 661D 56                               ld      d, (hl)
 689+ 661E EB                               ex      de, hl
 690+ 661F C1                               pop     bc                  // restore Instruction Pointer
 691+ 6620 E9                               jp      (hl)                // one of the following labels
 692+ 6621              C_Emit_Not_Found:
 693+ 6621 C1                           pop     bc                  // restore Instruction Pointer
 694+ 6622 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 695+ 6624 30 02                        jr      nc, C_Emit_Printable
 696+ 6626 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 697+ 6628              C_Emit_Printable:
 698+ 6628 6F                           ld      l, a
 699+ 6629 26 00                        ld      h, 0
 700+ 662B
 701+ 662B                              psh1
 701+ 662B E5          >                push    hl
 701+ 662C DD E9       >                jp      (ix)
 702+ 662E
 703+ 662E              C_Emit_Bel:
 704+ 662E C5                           push    bc                  // save Instruction Pointer
 705+ 662F 11 00 01                     ld      de, $0100
 706+ 6632 21 00 02                     ld      hl, $0200
 707+ 6635 DD E5                        push    ix                  // save Next Pointer
 708+ 6637 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 709+ 663A DD E1                        pop     ix                  // restore Next Pointer
 710+ 663C C1                           pop     bc                  // restore Instruction Pointer
 711+ 663D 21 00 00                     ld      hl, NUL_CHAR
 712+ 6640
 713+ 6640                              psh1
 713+ 6640 E5          >                push    hl
 713+ 6641 DD E9       >                jp      (ix)
 714+ 6643
 715+ 6643 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 716+ 6646
 717+ 6646                              psh1
 717+ 6646 E5          >                push    hl
 717+ 6647 DD E9       >                jp      (ix)
 718+ 6649
 719+ 6649 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 720+ 664C
 721+ 664C                              psh1
 721+ 664C E5          >                push    hl
 721+ 664D DD E9       >                jp      (ix)
 722+ 664F
 723+ 664F              //  ______________________________________________________________________
 724+ 664F
 725+ 664F              Key_Table:
 726+ 664F E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 727+ 6650 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 728+ 6651 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 729+ 6652 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 730+ 6653 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 731+ 6654 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 732+ 6655 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 733+ 6656 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 734+ 6657 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 735+ 6658 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 736+ 6659 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 737+ 665A              Key_MapTo:
 738+ 665A 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 739+ 665B 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 740+ 665C 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 741+ 665D 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 742+ 665E 5D                           db      $5D                 //  6: SYMBOL+U : ]
 743+ 665F 5B                           db      $5B                 //  5: SYMBOL+Y : [
 744+ 6660 7D                           db      $7D                 //  4: SYMBOL+G : }
 745+ 6661 7B                           db      $7B                 //  3: SYMBOL+F : {
 746+ 6662 5C                           db      $5C                 //  2: SYMBOl+D : //
 747+ 6663 7C                           db      $7C                 //  1: SYMBOL+S : |
 748+ 6664 7E                           db      $7E                 //  0: SYMBOL+A : ~
 749+ 6665
 750+ 6665              //  ______________________________________________________________________
 751+ 6665              //
 752+ 6665              // key          -- c
 753+ 6665              // wait for a keypress
 754+ 6665              // This definition need Standard ROM Interrupt to be served
 755+ 6665
 756+ 6665                              New_Def KEY, "KEY", is_code, is_normal
 756+ 6665             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 756+ 6665             >
 756+ 6665             >                // dummy db directives used to calculate length of namec
 756+ 6665 4B 45 59    >                db      "KEY"
 756+ 6668             >len_NFA         defl    $ - temp_NFA
 756+ 6668             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 756+ 6665             >
 756+ 6665 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 756+ 6666 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 756+ 6669             >                org     $-1                 // alter last byte of Name just above to set
 756+ 6668 D9          >                db      {b $} | END_BIT     // msb as name end
 756+ 6669             >
 756+ 6669 FD 65       >                dw      last_NFA            // Link to previous definition Name
 756+ 666B             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 756+ 666B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 756+ 666B ~           >
 756+ 666B ~           >
 756+ 666B             >                endif           ; ok        // for other definitions it "points" the correct handler
 756+ 666B             >                // Use of "; ok" to suppress "warning[fwdref]"
 756+ 666B             >
 756+ 666B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 757+ 666B
 758+ 666B C5                           push    bc                  // save Instruction Pointer
 759+ 666C DD E5                        push    ix
 760+ 666E
 761+ 666E ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 762+ 6672 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 763+ 6675 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 764+ 6679
 765+ 6679              Key_Wait:
 766+ 6679 76                               halt
 767+ 667A 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 768+ 667C CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 769+ 667F
 770+ 667F                                  // software-flash: flips face every 320 ms
 771+ 667F 3E 10                            ld      a, $10              // Timing based
 772+ 6681 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 773+ 6684
 774+ 6684 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 775+ 6687 20 0C                            jr      nz, Key_Cursor
 776+ 6689 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 777+ 668C FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 778+ 6690 28 03                                jr      z, Key_Cursor
 779+ 6692 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 780+ 6695              Key_Cursor:
 781+ 6695 D7                               rst     $10
 782+ 6696 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 783+ 6698 D7                               rst     $10
 784+ 6699
 785+ 6699 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 786+ 669D 28 DA                        jr      z, Key_Wait
 787+ 669F
 788+ 669F 76                           halt    // this is to sync flashing cursor.
 789+ 66A0
 790+ 66A0 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 791+ 66A2 D7                           rst     $10
 792+ 66A3 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 793+ 66A5 D7                           rst     $10
 794+ 66A6 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 795+ 66A9
 796+ 66A9                              // decode character from above table
 797+ 66A9 21 4F 66                     ld      hl, Key_Table
 798+ 66AC 01 0B 00                     ld      bc, $000B
 799+ 66AF ED B1                        cpir
 800+ 66B1 20 05                        jr      nz, Key_DontMap
 801+ 66B3 21 5A 66                         ld      hl, Key_MapTo
 802+ 66B6 09                               add     hl, bc
 803+ 66B7 7E                               ld      a, (hl)
 804+ 66B8 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 805+ 66BA 20 09                        jr      nz, Key_NoCapsLock
 806+ 66BC 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 807+ 66BF 7E                               ld      a, (hl)
 808+ 66C0 EE 08                            xor     $08
 809+ 66C2 77                               ld      (hl), a
 810+ 66C3 3E 00                            ld      a, NUL_CHAR
 811+ 66C5 6F           Key_NoCapsLock: ld      l, a
 812+ 66C6 26 00                        ld      h, 0                // Prepare TOS
 813+ 66C8
 814+ 66C8 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 815+ 66CB 1F                           rra
 816+ 66CC 1F                           rra
 817+ 66CD 1F                           rra
 818+ 66CE F6 18                        or      $18                 // quick'n'dirty click
 819+ 66D0 D3 FE                        out     ($fe), a
 820+ 66D2 06 00                        ld      b, 0
 821+ 66D4 10 FE                        djnz    $                   // wait loop
 822+ 66D6 EE 18                        xor     $18
 823+ 66D8 D3 FE                        out     ($fe), a
 824+ 66DA
 825+ 66DA ED 7B 92 63                  ld      sp, (SP_Saved)
 826+ 66DE
 827+ 66DE DD E1                        pop     ix
 828+ 66E0 C1                           pop     bc                  // Restore Instruction Pointer
 829+ 66E1
 830+ 66E1                              psh1
 830+ 66E1 E5          >                push    hl
 830+ 66E2 DD E9       >                jp      (ix)
 831+ 66E4
 832+ 66E4              //  ______________________________________________________________________
 833+ 66E4              //
 834+ 66E4              // ?terminal    -- FALSE | TRUE
 835+ 66E4              // test for BREAK keypress
 836+ 66E4                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 836+ 66E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ 66E4             >
 836+ 66E4             >                // dummy db directives used to calculate length of namec
 836+ 66E4 3F 54 45 52 >                db      "?TERMINAL"
 836+ 66E8 4D 49 4E 41 >
 836+ 66EC 4C          >
 836+ 66ED             >len_NFA         defl    $ - temp_NFA
 836+ 66ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ 66E4             >
 836+ 66E4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ 66E5 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 836+ 66E9 4D 49 4E 41 >
 836+ 66ED 4C          >
 836+ 66EE             >                org     $-1                 // alter last byte of Name just above to set
 836+ 66ED CC          >                db      {b $} | END_BIT     // msb as name end
 836+ 66EE             >
 836+ 66EE 65 66       >                dw      last_NFA            // Link to previous definition Name
 836+ 66F0             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 66F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 836+ 66F0 ~           >
 836+ 66F0 ~           >
 836+ 66F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 66F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 66F0             >
 836+ 66F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 66F0 21 00 00                     ld      hl, 0
 838+ 66F3 ED 73 92 63                  ld      (SP_Saved), sp
 839+ 66F7 31 61 63                     ld      sp, Cold_origin - 5
 840+ 66FA CD 54 1F                     call    $1F54
 841+ 66FD ED 7B 92 63                  ld      sp, (SP_Saved)
 842+ 6701
 843+ 6701 38 01                        jr      c, QTerminal_NoBreak
 844+ 6703 2B                               dec     hl                  // quick TRUE_FLAG
 845+ 6704              QTerminal_NoBreak:
 846+ 6704
 847+ 6704                              psh1
 847+ 6704 E5          >                push    hl
 847+ 6705 DD E9       >                jp      (ix)
 848+ 6707
 849+ 6707
 850+ 6707              //  ______________________________________________________________________
 851+ 6707              //
 852+ 6707              // ZX Spectrum Next - Low Level disk primitives.
 853+ 6707              // this include is "here" for backward compatibility
 854+ 6707
 855+ 6707                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6707              //  ______________________________________________________________________
   2++6707              //
   3++6707              //  next-opt.asm
   4++6707              //
   5++6707              //  ZX Spectrum Next - peculiar definitions
   6++6707              //  ______________________________________________________________________
   7++6707
   8++6707              //  ______________________________________________________________________
   9++6707              //
  10++6707              // f_seek       d u -- f
  11++6707              // Seek to position d in file-handle u.
  12++6707              // Return a false-flag 0 on success, True flag on error
  13++6707                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6707             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6707             >
  13++6707             >                // dummy db directives used to calculate length of namec
  13++6707 46 5F 53 45 >                db      "F_SEEK"
  13++670B 45 4B       >
  13++670D             >len_NFA         defl    $ - temp_NFA
  13++670D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6707             >
  13++6707 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6708 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++670C 45 4B       >
  13++670E             >                org     $-1                 // alter last byte of Name just above to set
  13++670D CB          >                db      {b $} | END_BIT     // msb as name end
  13++670E             >
  13++670E E4 66       >                dw      last_NFA            // Link to previous definition Name
  13++6710             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++6710 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++6710 ~           >
  13++6710 ~           >
  13++6710             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++6710             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++6710             >
  13++6710             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++6710 E1                           pop     hl                  // file-handle
  15++6711 7D                           ld      a, l                // file-handle
  16++6712 60                           ld      h, b                // save Intruction Pointer
  17++6713 69                           ld      l, c
  18++6714 C1                           pop     bc                  // bc has high-word of d
  19++6715 D1                           pop     de
  20++6716 DD E5                        push    ix
  21++6718 E5                           push    hl                  // save Instruction Pointer
  22++6719 DD 21 00 00                  ld      ix, 0
  23++671D CF                           rst     $08
  24++671E 9F                           db      $9F
  25++671F              F_Seek_Exit:
  26++671F C1                           pop     bc                  // restore Instruction Pointer
  27++6720 DD E1                        pop     ix
  28++6722 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6724
  30++6724                              psh1
  30++6724 E5          >                push    hl
  30++6725 DD E9       >                jp      (ix)
  31++6727
  32++6727              //  ______________________________________________________________________
  33++6727              //
  34++6727              // f_close      u -- f
  35++6727              // Close file-handle u.
  36++6727              // Return 0 on success, True flag on error
  37++6727
  38++6727                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6727             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6727             >
  38++6727             >                // dummy db directives used to calculate length of namec
  38++6727 46 5F 43 4C >                db      "F_CLOSE"
  38++672B 4F 53 45    >
  38++672E             >len_NFA         defl    $ - temp_NFA
  38++672E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6727             >
  38++6727 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6728 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++672C 4F 53 45    >
  38++672F             >                org     $-1                 // alter last byte of Name just above to set
  38++672E C5          >                db      {b $} | END_BIT     // msb as name end
  38++672F             >
  38++672F 07 67       >                dw      last_NFA            // Link to previous definition Name
  38++6731             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++6731 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++6731 ~           >
  38++6731 ~           >
  38++6731             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++6731             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++6731             >
  38++6731             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++6731
  40++6731 E1                           pop     hl
  41++6732 7D                           ld      a, l                // file-handle
  42++6733 DD E5                        push    ix
  43++6735 C5                           push    bc                  // Save Instruction pointer
  44++6736 CF                           rst     $08
  45++6737 9B                           db      $9B
  46++6738 18 E5                        jr      F_Seek_Exit
  47++673A              //              pop     bc
  48++673A              //              pop     ix
  49++673A              //              sbc     hl, hl
  50++673A              //              psh1
  51++673A
  52++673A              //  ______________________________________________________________________
  53++673A              //
  54++673A              // f_sync      u -- f
  55++673A              // Close file-handle u.
  56++673A              // Return 0 on success, True flag on error
  57++673A
  58++673A                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++673A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++673A             >
  58++673A             >                // dummy db directives used to calculate length of namec
  58++673A 46 5F 53 59 >                db      "F_SYNC"
  58++673E 4E 43       >
  58++6740             >len_NFA         defl    $ - temp_NFA
  58++6740             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++673A             >
  58++673A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++673B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++673F 4E 43       >
  58++6741             >                org     $-1                 // alter last byte of Name just above to set
  58++6740 C3          >                db      {b $} | END_BIT     // msb as name end
  58++6741             >
  58++6741 27 67       >                dw      last_NFA            // Link to previous definition Name
  58++6743             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++6743 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++6743 ~           >
  58++6743 ~           >
  58++6743             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++6743             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++6743             >
  58++6743             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++6743 E1                           pop     hl
  60++6744 7D                           ld      a, l                // file-handle
  61++6745 DD E5                        push    ix
  62++6747 C5                           push    bc
  63++6748 CF                           rst     $08
  64++6749 9C                           db      $9C
  65++674A 18 D3                        jr      F_Seek_Exit
  66++674C              //              pop     bc
  67++674C              //              pop     ix
  68++674C              //              sbc     hl, hl
  69++674C              //              psh1
  70++674C
  71++674C              //  ______________________________________________________________________
  72++674C              //
  73++674C              // f_fgetpos    u -- d f
  74++674C              // Seek to position d in file-handle u.
  75++674C              // Return a false-flag 0 on success, True flag on error
  76++674C                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++674C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++674C             >
  76++674C             >                // dummy db directives used to calculate length of namec
  76++674C 46 5F 46 47 >                db      "F_FGETPOS"
  76++6750 45 54 50 4F >
  76++6754 53          >
  76++6755             >len_NFA         defl    $ - temp_NFA
  76++6755             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++674C             >
  76++674C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++674D 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++6751 45 54 50 4F >
  76++6755 53          >
  76++6756             >                org     $-1                 // alter last byte of Name just above to set
  76++6755 D3          >                db      {b $} | END_BIT     // msb as name end
  76++6756             >
  76++6756 3A 67       >                dw      last_NFA            // Link to previous definition Name
  76++6758             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++6758 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++6758 ~           >
  76++6758 ~           >
  76++6758             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++6758             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++6758             >
  76++6758             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++6758 E1                           pop     hl
  78++6759 7D                           ld      a, l                // file-handle
  79++675A DD E5                        push    ix
  80++675C C5                           push    bc
  81++675D CF                           rst     $08
  82++675E A0                           db      $A0
  83++675F E1                           pop     hl                  // restore Instruction Pointer
  84++6760 DD E1                        pop     ix
  85++6762 D5                           push    de
  86++6763 C5                           push    bc
  87++6764 44                           ld      b, h                // restore Instruction Pointer
  88++6765 4D                           ld      c, l
  89++6766 ED 62                        sbc     hl, hl
  90++6768
  91++6768                              psh1
  91++6768 E5          >                push    hl
  91++6769 DD E9       >                jp      (ix)
  92++676B
  93++676B              //  ______________________________________________________________________
  94++676B              //
  95++676B              // f_read       a b u -- n f
  96++676B              // Read b bytes from file-handle u to address a
  97++676B              // Return the actual number n of bytes read
  98++676B              // Return 0 on success, True flag on error
  99++676B                              New_Def F_READ, "F_READ", is_code, is_normal
  99++676B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++676B             >
  99++676B             >                // dummy db directives used to calculate length of namec
  99++676B 46 5F 52 45 >                db      "F_READ"
  99++676F 41 44       >
  99++6771             >len_NFA         defl    $ - temp_NFA
  99++6771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++676B             >
  99++676B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++676C 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++6770 41 44       >
  99++6772             >                org     $-1                 // alter last byte of Name just above to set
  99++6771 C4          >                db      {b $} | END_BIT     // msb as name end
  99++6772             >
  99++6772 4C 67       >                dw      last_NFA            // Link to previous definition Name
  99++6774             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++6774 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++6774 ~           >
  99++6774 ~           >
  99++6774             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++6774             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++6774             >
  99++6774             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++6774
 101++6774 50                           ld      d, b
 102++6775 59                           ld      e, c
 103++6776 E1                           pop     hl
 104++6777 7D                           ld      a, l                // file-handle
 105++6778 C1                           pop     bc                  // bc has bytes to read
 106++6779 DD E3                        ex      (sp), ix            // ix has address
 107++677B D5                           push    de                  // Save Instruction pointer
 108++677C CF                           rst     $08
 109++677D 9D                           db      $9D
 110++677E              F_Read_Exit:
 111++677E C1                           pop     bc                  // Restore Instruction pointer
 112++677F DD E1                        pop     ix                  // Restore ix
 113++6781 D5                           push    de                  // bytes written
 114++6782 ED 62                        sbc     hl, hl
 115++6784
 116++6784                              psh1
 116++6784 E5          >                push    hl
 116++6785 DD E9       >                jp      (ix)
 117++6787
 118++6787              //  ______________________________________________________________________
 119++6787              //
 120++6787              // f_write      a b u -- n f
 121++6787              // Write bytes currently stored at address a to file-handle u.
 122++6787              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6787                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6787             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6787             >
 123++6787             >                // dummy db directives used to calculate length of namec
 123++6787 46 5F 57 52 >                db      "F_WRITE"
 123++678B 49 54 45    >
 123++678E             >len_NFA         defl    $ - temp_NFA
 123++678E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6787             >
 123++6787 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++6788 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++678C 49 54 45    >
 123++678F             >                org     $-1                 // alter last byte of Name just above to set
 123++678E C5          >                db      {b $} | END_BIT     // msb as name end
 123++678F             >
 123++678F 6B 67       >                dw      last_NFA            // Link to previous definition Name
 123++6791             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++6791 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++6791 ~           >
 123++6791 ~           >
 123++6791             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++6791             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++6791             >
 123++6791             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++6791
 125++6791 50                           ld      d, b
 126++6792 59                           ld      e, c
 127++6793 E1                           pop     hl
 128++6794 7D                           ld      a, l                // file-handle
 129++6795 C1                           pop     bc                  // bc has bytes to read
 130++6796 DD E3                        ex      (sp), ix            // ix has address
 131++6798 D5                           push    de                  // Save Instruction pointer
 132++6799 CF                           rst     $08
 133++679A 9E                           db      $9E
 134++679B 18 E1                        jr F_Read_Exit
 135++679D              //              pop     bc                  // Restore Instruction pointer
 136++679D              //              pop     ix                  // Restore ix
 137++679D              //              push    de                  // bytes written
 138++679D              //              sbc     hl, hl
 139++679D              //
 140++679D              //              psh1
 141++679D
 142++679D              //  ______________________________________________________________________
 143++679D              //
 144++679D              // f_open       a1 a2 b -- u f
 145++679D              // open a file
 146++679D              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++679D              // a2 is address to an 8-byte header data used in some cases.
 148++679D              // b is access mode-byte, that is a combination of:
 149++679D              // any/all of:
 150++679D              //   esx_mode_read          $01 request read access
 151++679D              //   esx_mode_write         $02 request write access
 152++679D              //   esx_mode_use_header    $40 read/write +3DOS header
 153++679D              // plus one of:
 154++679D              //   esx_mode_open_exist    $00 only open existing file
 155++679D              //   esx_mode_open_creat    $08 open existing or create file
 156++679D              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++679D              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++679D              // Return file-handle u and 0 on success, True flag on error
 159++679D                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++679D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++679D             >
 159++679D             >                // dummy db directives used to calculate length of namec
 159++679D 46 5F 4F 50 >                db      "F_OPEN"
 159++67A1 45 4E       >
 159++67A3             >len_NFA         defl    $ - temp_NFA
 159++67A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++679D             >
 159++679D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++679E 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67A2 45 4E       >
 159++67A4             >                org     $-1                 // alter last byte of Name just above to set
 159++67A3 CE          >                db      {b $} | END_BIT     // msb as name end
 159++67A4             >
 159++67A4 87 67       >                dw      last_NFA            // Link to previous definition Name
 159++67A6             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++67A6 ~           >
 159++67A6 ~           >
 159++67A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67A6             >
 159++67A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67A6 60                           ld      h, b                // Save Instruction pointer
 161++67A7 69                           ld      l, c
 162++67A8 C1                           pop     bc                  // file-mode
 163++67A9 41                           ld      b, c                // file-mode
 164++67AA D1                           pop     de                  // 8-bytes buffer if any
 165++67AB DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++67AD E5                           push    hl                  // Save Instruction pointer
 167++67AE 3E 2A                        ld      a, "*"
 168++67B0 CF                           rst     $08
 169++67B1 9A                           db      $9A
 170++67B2              F_Open_Exit:
 171++67B2 C1                           pop     bc
 172++67B3 DD E1                        pop     ix
 173++67B5 ED 62                        sbc     hl, hl
 174++67B7 5F                           ld      e, a
 175++67B8 16 00                        ld      d, 0
 176++67BA
 177++67BA
 178++67BA                              psh2
 178++67BA D5          >                push    de
 178++67BB E5          >                push    hl
 178++67BC DD E9       >                jp      (ix)
 179++67BE
 180++67BE              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++67BE              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++67BE              //   \ DROP
 183++67BE              //   \ F_CLOSE
 184++67BE
 185++67BE
 186++67BE              //  ______________________________________________________________________
 187++67BE              //
 188++67BE              // f_opendir    a1 a2 b -- u f
 189++67BE              // open a file
 190++67BE                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++67BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++67BE             >
 190++67BE             >                // dummy db directives used to calculate length of namec
 190++67BE 46 5F 4F 50 >                db      "F_OPENDIR"
 190++67C2 45 4E 44 49 >
 190++67C6 52          >
 190++67C7             >len_NFA         defl    $ - temp_NFA
 190++67C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++67BE             >
 190++67BE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++67BF 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++67C3 45 4E 44 49 >
 190++67C7 52          >
 190++67C8             >                org     $-1                 // alter last byte of Name just above to set
 190++67C7 D2          >                db      {b $} | END_BIT     // msb as name end
 190++67C8             >
 190++67C8 9D 67       >                dw      last_NFA            // Link to previous definition Name
 190++67CA             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++67CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++67CA ~           >
 190++67CA ~           >
 190++67CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++67CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++67CA             >
 190++67CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++67CA DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++67CC C5                           push    bc                  // Save Instruction pointer
 193++67CD 06 10                        ld      b, $10              // file-mode
 194++67CF 3E 43                        ld      a, "C"
 195++67D1 CF                           rst     $08
 196++67D2 A3                           db      $A3
 197++67D3 18 DD                        jr      F_Open_Exit
 198++67D5
 199++67D5
 200++67D5              //  ______________________________________________________________________
 201++67D5              //
 202++67D5              // f_readdir    a1 a2 b -- u f
 203++67D5              // open a file
 204++67D5                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++67D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++67D5             >
 204++67D5             >                // dummy db directives used to calculate length of namec
 204++67D5 46 5F 52 45 >                db      "F_READDIR"
 204++67D9 41 44 44 49 >
 204++67DD 52          >
 204++67DE             >len_NFA         defl    $ - temp_NFA
 204++67DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++67D5             >
 204++67D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++67D6 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++67DA 41 44 44 49 >
 204++67DE 52          >
 204++67DF             >                org     $-1                 // alter last byte of Name just above to set
 204++67DE D2          >                db      {b $} | END_BIT     // msb as name end
 204++67DF             >
 204++67DF BE 67       >                dw      last_NFA            // Link to previous definition Name
 204++67E1             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++67E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++67E1 ~           >
 204++67E1 ~           >
 204++67E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++67E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++67E1             >
 204++67E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++67E1 E1                           pop     hl
 206++67E2 7D                           ld      a, l
 207++67E3 D1                           pop     de
 208++67E4 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++67E6 C5                           push    bc                  // Save Instruction pointer
 210++67E7 CF                           rst     $08
 211++67E8 A4                           db      $A4
 212++67E9 18 C7                        jr      F_Open_Exit
 213++67EB
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 856+ 67EB
 857+ 67EB
 858+ 67EB              //  ______________________________________________________________________
 859+ 67EB              //
 860+ 67EB              // cr           --
 861+ 67EB              // send a CR via EMITC
 862+ 67EB                              New_Def CR, "CR", is_code, is_normal
 862+ 67EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 67EB             >
 862+ 67EB             >                // dummy db directives used to calculate length of namec
 862+ 67EB 43 52       >                db      "CR"
 862+ 67ED             >len_NFA         defl    $ - temp_NFA
 862+ 67ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 67EB             >
 862+ 67EB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 67EC 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 862+ 67EE             >                org     $-1                 // alter last byte of Name just above to set
 862+ 67ED D2          >                db      {b $} | END_BIT     // msb as name end
 862+ 67EE             >
 862+ 67EE D5 67       >                dw      last_NFA            // Link to previous definition Name
 862+ 67F0             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 67F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 862+ 67F0 ~           >
 862+ 67F0 ~           >
 862+ 67F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 67F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 67F0             >
 862+ 67F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 67F0
 864+ 67F0 3E 0D                        ld      a, CR_CHAR
 865+ 67F2 C3 D7 65                     jp      Emitc_Ptr
 866+ 67F5
 867+ 67F5              //  ______________________________________________________________________
 868+ 67F5              //
 869+ 67F5              // cmove    a1 a2 u --
 870+ 67F5              // If u > 0, moves memory content starting at address a1 for n bytes long
 871+ 67F5              // storing then starting at address addr2.
 872+ 67F5              // The content of a1 is moved first. See CMOVE> also.
 873+ 67F5                              New_Def CMOVE, "CMOVE", is_code, is_normal
 873+ 67F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 67F5             >
 873+ 67F5             >                // dummy db directives used to calculate length of namec
 873+ 67F5 43 4D 4F 56 >                db      "CMOVE"
 873+ 67F9 45          >
 873+ 67FA             >len_NFA         defl    $ - temp_NFA
 873+ 67FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 67F5             >
 873+ 67F5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 67F6 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 873+ 67FA 45          >
 873+ 67FB             >                org     $-1                 // alter last byte of Name just above to set
 873+ 67FA C5          >                db      {b $} | END_BIT     // msb as name end
 873+ 67FB             >
 873+ 67FB EB 67       >                dw      last_NFA            // Link to previous definition Name
 873+ 67FD             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 67FD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 873+ 67FD ~           >
 873+ 67FD ~           >
 873+ 67FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 67FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 67FD             >
 873+ 67FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 67FD D9                           exx
 875+ 67FE
 876+ 67FE C1                           pop     bc                  // bc has counter
 877+ 67FF D1                           pop     de                  // de now has dest
 878+ 6800 E1                           pop     hl                 // hl has source, save Instruction Pointer
 879+ 6801 78                           ld      a, b
 880+ 6802 B1                           or      c
 881+ 6803 28 02                        jr      z, Cmove_NoMove
 882+ 6805 ED B0                            ldir
 883+ 6807              Cmove_NoMove:
 884+ 6807 D9                           exx
 885+ 6808
 886+ 6808                              next
 886+ 6808 DD E9       >                jp      (ix)
 887+ 680A
 888+ 680A              //  ______________________________________________________________________
 889+ 680A              //
 890+ 680A              // cmove>    a1 a2 u --
 891+ 680A              // If u > 0, moves memory content starting at address a1 for n bytes long
 892+ 680A              // storing then starting at address addr2.
 893+ 680A              // The content of a1 is moved last. See cmove.
 894+ 680A                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 894+ 680A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 894+ 680A             >
 894+ 680A             >                // dummy db directives used to calculate length of namec
 894+ 680A 43 4D 4F 56 >                db      "CMOVE>"
 894+ 680E 45 3E       >
 894+ 6810             >len_NFA         defl    $ - temp_NFA
 894+ 6810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 894+ 680A             >
 894+ 680A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 894+ 680B 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 894+ 680F 45 3E       >
 894+ 6811             >                org     $-1                 // alter last byte of Name just above to set
 894+ 6810 BE          >                db      {b $} | END_BIT     // msb as name end
 894+ 6811             >
 894+ 6811 F5 67       >                dw      last_NFA            // Link to previous definition Name
 894+ 6813             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 894+ 6813 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 894+ 6813 ~           >
 894+ 6813 ~           >
 894+ 6813             >                endif           ; ok        // for other definitions it "points" the correct handler
 894+ 6813             >                // Use of "; ok" to suppress "warning[fwdref]"
 894+ 6813             >
 894+ 6813             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 895+ 6813 D9                           exx
 896+ 6814
 897+ 6814 C1                           pop     bc                  // bc has counter
 898+ 6815 D1                           pop     de                  // de has dest
 899+ 6816 E1                           pop     hl                  // hl has source, save Instruction Pointer
 900+ 6817 78                           ld      a, b
 901+ 6818 B1                           or      c
 902+ 6819 28 08                        jr      z, CmoveV_NoMove
 903+ 681B EB                               ex      de, hl              // compute address to
 904+ 681C 09                               add     hl, bc              // operate backward
 905+ 681D 2B                               dec     hl
 906+ 681E EB                               ex      de, hl
 907+ 681F 09                               add     hl, bc
 908+ 6820 2B                               dec     hl
 909+ 6821 ED B8                            lddr                        // backward
 910+ 6823              CmoveV_NoMove:
 911+ 6823 D9                           exx
 912+ 6824
 913+ 6824                              next
 913+ 6824 DD E9       >                jp      (ix)
 914+ 6826
 915+ 6826              //  ______________________________________________________________________
 916+ 6826              //
 917+ 6826              // um*      u1 u2 -- ud
 918+ 6826              // Unsigned multiplication
 919+ 6826              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 920+ 6826              // On the stack a double number is treated as two single numbers
 921+ 6826              // where DE is on the top of the stack and HL is the second from top,
 922+ 6826              // Instead, in 2VARIABLE a double number is stored as EDLH.
 923+ 6826              // this definition could use "MUL" Z80N new op-code.
 924+ 6826                              New_Def UM_MUL, "UM*", is_code, is_normal
 924+ 6826             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ 6826             >
 924+ 6826             >                // dummy db directives used to calculate length of namec
 924+ 6826 55 4D 2A    >                db      "UM*"
 924+ 6829             >len_NFA         defl    $ - temp_NFA
 924+ 6829             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ 6826             >
 924+ 6826 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ 6827 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 924+ 682A             >                org     $-1                 // alter last byte of Name just above to set
 924+ 6829 AA          >                db      {b $} | END_BIT     // msb as name end
 924+ 682A             >
 924+ 682A 0A 68       >                dw      last_NFA            // Link to previous definition Name
 924+ 682C             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 682C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 924+ 682C ~           >
 924+ 682C ~           >
 924+ 682C             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 682C             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 682C             >
 924+ 682C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 682C D9                           exx
 926+ 682D D1                           pop     de                    // de has u2 operand
 927+ 682E E1                           pop     hl                    // hl has u1 operand
 928+ 682F 45                           ld      b, l
 929+ 6830 4B                           ld      c, e
 930+ 6831 5D                           ld      e, l
 931+ 6832 6A                           ld      l, d
 932+ 6833 E5                           push    hl
 933+ 6834 69                           ld      l, c
 934+ 6835 ED 30                        mul
 935+ 6837 EB                           ex      de, hl
 936+ 6838 ED 30                        mul
 937+ 683A AF                           xor     a
 938+ 683B 19                           add     hl, de
 939+ 683C 8F                           adc     a
 940+ 683D 59                           ld      e, c
 941+ 683E 50                           ld      d, b
 942+ 683F ED 30                        mul
 943+ 6841 47                           ld      b, a
 944+ 6842 4C                           ld      c, h
 945+ 6843 7A                           ld      a, d
 946+ 6844 85                           add     l
 947+ 6845 67                           ld      h, a
 948+ 6846 6B                           ld      l, e
 949+ 6847 D1                           pop     de
 950+ 6848 ED 30                        mul
 951+ 684A EB                           ex      de, hl
 952+ 684B ED 4A                        adc     hl, bc
 953+ 684D D5                           push    de
 954+ 684E E5                           push    hl
 955+ 684F D9                           exx
 956+ 6850                              next
 956+ 6850 DD E9       >                jp      (ix)
 957+ 6852
 958+ 6852              //  ______________________________________________________________________
 959+ 6852              //
 960+ 6852              // um/mod      ud u1 -- q r
 961+ 6852              // divides ud into u1 giving quotient q and remainder r
 962+ 6852              // algorithm takes 16 bit at a time starting from msb
 963+ 6852              // DE grows from lsb upward with quotient result
 964+ 6852              // HL keeps the remainder at each stage of division
 965+ 6852              // each loop 'lowers' the next binary digit to form the current dividend
 966+ 6852                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 966+ 6852             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 966+ 6852             >
 966+ 6852             >                // dummy db directives used to calculate length of namec
 966+ 6852 55 4D 2F 4D >                db      "UM/MOD"
 966+ 6856 4F 44       >
 966+ 6858             >len_NFA         defl    $ - temp_NFA
 966+ 6858             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 966+ 6852             >
 966+ 6852 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 966+ 6853 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 966+ 6857 4F 44       >
 966+ 6859             >                org     $-1                 // alter last byte of Name just above to set
 966+ 6858 C4          >                db      {b $} | END_BIT     // msb as name end
 966+ 6859             >
 966+ 6859 26 68       >                dw      last_NFA            // Link to previous definition Name
 966+ 685B             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 966+ 685B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 966+ 685B ~           >
 966+ 685B ~           >
 966+ 685B             >                endif           ; ok        // for other definitions it "points" the correct handler
 966+ 685B             >                // Use of "; ok" to suppress "warning[fwdref]"
 966+ 685B             >
 966+ 685B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 967+ 685B D9                           exx
 968+ 685C C1                           pop     bc                      // divisor
 969+ 685D
 970+ 685D E1                           pop     hl                      // < high part
 971+ 685E D1                           pop     de                      // < low part and
 972+ 685F
 973+ 685F 7D                           ld      a, l                    // check without changing arguments
 974+ 6860 91                           sub     c                       // if divisor is greater than high part
 975+ 6861 7C                           ld      a, h                    // so quotient will be in range
 976+ 6862 98                           sbc     a, b
 977+ 6863 30 23                        jr      nc, Um_DivMod_OutOfRange
 978+ 6865 3E 10                            ld      a, 16
 979+ 6867              Um_DivMod_Loop:
 980+ 6867 A7                                   and     a
 981+ 6868 CB 13                                rl      e
 982+ 686A CB 12                                rl      d
 983+ 686C CB 15                                rl      l
 984+ 686E CB 14                                rl      h
 985+ 6870 30 05                                jr      nc, Um_DivMod_Carry
 986+ 6872 A7                                       and     a
 987+ 6873 ED 42                                    sbc     hl, bc
 988+ 6875 18 07                                jr      Um_DivMod_Endif    // else
 989+ 6877              Um_DivMod_Carry:
 990+ 6877 A7                                       and     a
 991+ 6878 ED 42                                    sbc     hl, bc
 992+ 687A 30 02                                    jr      nc, Um_DivMod_Endif
 993+ 687C 09                                           add     hl, bc
 994+ 687D 1B                                           dec     de
 995+ 687E              Um_DivMod_Endif:                                   // endif
 996+ 687E 13                                   inc     de
 997+ 687F 3D                                   dec     a
 998+ 6880 20 E5                            jr      nz, Um_DivMod_Loop
 999+ 6882 EB                               ex      de, hl
1000+ 6883              Um_DivMod_Bailout:
1001+ 6883 D5                               push    de                  // de := remanider
1002+ 6884 E5                               push    hl                  // hl := quotient
1003+ 6885 D9                               exx
1004+ 6886                                  next
1004+ 6886 DD E9       >                jp      (ix)
1005+ 6888
1006+ 6888              Um_DivMod_OutOfRange:
1007+ 6888 21 FF FF                     ld      hl, -1
1008+ 688B 54                           ld      d, h
1009+ 688C 5D                           ld      e, l
1010+ 688D 18 F4                        jr      Um_DivMod_Bailout
1011+ 688F
1012+ 688F              //  ______________________________________________________________________
1013+ 688F              //
1014+ 688F              // and          n1 n2 -- n3
1015+ 688F              // bit logical AND. Returns n3 as n1 & n2
1016+ 688F                              New_Def AND_OP, "AND", is_code, is_normal
1016+ 688F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 688F             >
1016+ 688F             >                // dummy db directives used to calculate length of namec
1016+ 688F 41 4E 44    >                db      "AND"
1016+ 6892             >len_NFA         defl    $ - temp_NFA
1016+ 6892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 688F             >
1016+ 688F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 6890 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1016+ 6893             >                org     $-1                 // alter last byte of Name just above to set
1016+ 6892 C4          >                db      {b $} | END_BIT     // msb as name end
1016+ 6893             >
1016+ 6893 52 68       >                dw      last_NFA            // Link to previous definition Name
1016+ 6895             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 6895 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1016+ 6895 ~           >
1016+ 6895 ~           >
1016+ 6895             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 6895             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 6895             >
1016+ 6895             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 6895 D1                           pop     de
1018+ 6896 E1                           pop     hl
1019+ 6897 7B                           ld      a, e
1020+ 6898 A5                           and     l
1021+ 6899 6F                           ld      l, a
1022+ 689A 7A                           ld      a, d
1023+ 689B A4                           and     h
1024+ 689C 67                           ld      h, a
1025+ 689D
1026+ 689D                              psh1
1026+ 689D E5          >                push    hl
1026+ 689E DD E9       >                jp      (ix)
1027+ 68A0
1028+ 68A0              //  ______________________________________________________________________
1029+ 68A0              //
1030+ 68A0              // or           n1 n2 -- n3
1031+ 68A0              // bit logical OR. Returns n3 as n1 | n2
1032+ 68A0                              New_Def OR_OP, "OR", is_code, is_normal
1032+ 68A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ 68A0             >
1032+ 68A0             >                // dummy db directives used to calculate length of namec
1032+ 68A0 4F 52       >                db      "OR"
1032+ 68A2             >len_NFA         defl    $ - temp_NFA
1032+ 68A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ 68A0             >
1032+ 68A0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ 68A1 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1032+ 68A3             >                org     $-1                 // alter last byte of Name just above to set
1032+ 68A2 D2          >                db      {b $} | END_BIT     // msb as name end
1032+ 68A3             >
1032+ 68A3 8F 68       >                dw      last_NFA            // Link to previous definition Name
1032+ 68A5             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 68A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1032+ 68A5 ~           >
1032+ 68A5 ~           >
1032+ 68A5             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 68A5             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 68A5             >
1032+ 68A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 68A5 D1                           pop     de
1034+ 68A6 E1                           pop     hl
1035+ 68A7 7B                           ld      a, e
1036+ 68A8 B5                           or      l
1037+ 68A9 6F                           ld      l, a
1038+ 68AA 7A                           ld      a, d
1039+ 68AB B4                           or      h
1040+ 68AC 67                           ld      h, a
1041+ 68AD
1042+ 68AD                              psh1
1042+ 68AD E5          >                push    hl
1042+ 68AE DD E9       >                jp      (ix)
1043+ 68B0
1044+ 68B0              //  ______________________________________________________________________
1045+ 68B0              //
1046+ 68B0              // xor          n1 n2 -- n3
1047+ 68B0              // bit logical OR. Returns n3 as n1 ^ n2
1048+ 68B0                              New_Def XOR_OP, "XOR", is_code, is_normal
1048+ 68B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1048+ 68B0             >
1048+ 68B0             >                // dummy db directives used to calculate length of namec
1048+ 68B0 58 4F 52    >                db      "XOR"
1048+ 68B3             >len_NFA         defl    $ - temp_NFA
1048+ 68B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1048+ 68B0             >
1048+ 68B0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1048+ 68B1 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1048+ 68B4             >                org     $-1                 // alter last byte of Name just above to set
1048+ 68B3 D2          >                db      {b $} | END_BIT     // msb as name end
1048+ 68B4             >
1048+ 68B4 A0 68       >                dw      last_NFA            // Link to previous definition Name
1048+ 68B6             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1048+ 68B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1048+ 68B6 ~           >
1048+ 68B6 ~           >
1048+ 68B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1048+ 68B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1048+ 68B6             >
1048+ 68B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1049+ 68B6 D1                           pop     de
1050+ 68B7 E1                           pop     hl
1051+ 68B8 7B                           ld      a, e
1052+ 68B9 AD                           xor     l
1053+ 68BA 6F                           ld      l, a
1054+ 68BB 7A                           ld      a, d
1055+ 68BC AC                           xor     h
1056+ 68BD 67                           ld      h, a
1057+ 68BE
1058+ 68BE                              psh1
1058+ 68BE E5          >                push    hl
1058+ 68BF DD E9       >                jp      (ix)
1059+ 68C1
1060+ 68C1              //  ______________________________________________________________________
1061+ 68C1              //
1062+ 68C1              // sp@      -- a
1063+ 68C1              // returns on top of stack the value of SP before execution
1064+ 68C1                              New_Def SPFETCH, "SP@", is_code, is_normal
1064+ 68C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1064+ 68C1             >
1064+ 68C1             >                // dummy db directives used to calculate length of namec
1064+ 68C1 53 50 40    >                db      "SP@"
1064+ 68C4             >len_NFA         defl    $ - temp_NFA
1064+ 68C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1064+ 68C1             >
1064+ 68C1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1064+ 68C2 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1064+ 68C5             >                org     $-1                 // alter last byte of Name just above to set
1064+ 68C4 C0          >                db      {b $} | END_BIT     // msb as name end
1064+ 68C5             >
1064+ 68C5 B0 68       >                dw      last_NFA            // Link to previous definition Name
1064+ 68C7             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1064+ 68C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1064+ 68C7 ~           >
1064+ 68C7 ~           >
1064+ 68C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1064+ 68C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1064+ 68C7             >
1064+ 68C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1065+ 68C7
1066+ 68C7 21 00 00                     ld      hl, 0
1067+ 68CA 39                           add     hl, sp
1068+ 68CB
1069+ 68CB                              psh1
1069+ 68CB E5          >                push    hl
1069+ 68CC DD E9       >                jp      (ix)
1070+ 68CE
1071+ 68CE              //  ______________________________________________________________________
1072+ 68CE              //
1073+ 68CE              // sp!      a --
1074+ 68CE              // restore SP to the initial value passed
1075+ 68CE              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1076+ 68CE                              New_Def SPSTORE, "SP!", is_code, is_normal
1076+ 68CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ 68CE             >
1076+ 68CE             >                // dummy db directives used to calculate length of namec
1076+ 68CE 53 50 21    >                db      "SP!"
1076+ 68D1             >len_NFA         defl    $ - temp_NFA
1076+ 68D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ 68CE             >
1076+ 68CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ 68CF 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1076+ 68D2             >                org     $-1                 // alter last byte of Name just above to set
1076+ 68D1 A1          >                db      {b $} | END_BIT     // msb as name end
1076+ 68D2             >
1076+ 68D2 C1 68       >                dw      last_NFA            // Link to previous definition Name
1076+ 68D4             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 68D4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1076+ 68D4 ~           >
1076+ 68D4 ~           >
1076+ 68D4             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 68D4             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 68D4             >
1076+ 68D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 68D4 E1                           pop     hl
1078+ 68D5 F9                           ld      sp, hl
1079+ 68D6
1080+ 68D6                              next
1080+ 68D6 DD E9       >                jp      (ix)
1081+ 68D8
1082+ 68D8              //  ______________________________________________________________________
1083+ 68D8              //
1084+ 68D8              // rp@      -- a
1085+ 68D8              // returns on top of stack the value of Return-Pointer
1086+ 68D8                              New_Def RPFETCH, "RP@", is_code, is_normal
1086+ 68D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1086+ 68D8             >
1086+ 68D8             >                // dummy db directives used to calculate length of namec
1086+ 68D8 52 50 40    >                db      "RP@"
1086+ 68DB             >len_NFA         defl    $ - temp_NFA
1086+ 68DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1086+ 68D8             >
1086+ 68D8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1086+ 68D9 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1086+ 68DC             >                org     $-1                 // alter last byte of Name just above to set
1086+ 68DB C0          >                db      {b $} | END_BIT     // msb as name end
1086+ 68DC             >
1086+ 68DC CE 68       >                dw      last_NFA            // Link to previous definition Name
1086+ 68DE             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1086+ 68DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1086+ 68DE ~           >
1086+ 68DE ~           >
1086+ 68DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1086+ 68DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1086+ 68DE             >
1086+ 68DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1087+ 68DE
1088+ 68DE                              ldhlrp
1088+ 68DE 2A 96 63    >                ld      hl,(RP_Pointer)
1089+ 68E1
1090+ 68E1                              psh1
1090+ 68E1 E5          >                push    hl
1090+ 68E2 DD E9       >                jp      (ix)
1091+ 68E4
1092+ 68E4              //  ______________________________________________________________________
1093+ 68E4              //
1094+ 68E4              // rp!      a --
1095+ 68E4              // restore RP to the initial value passed
1096+ 68E4              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1097+ 68E4                              New_Def RPSTORE, "RP!", is_code, is_normal
1097+ 68E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1097+ 68E4             >
1097+ 68E4             >                // dummy db directives used to calculate length of namec
1097+ 68E4 52 50 21    >                db      "RP!"
1097+ 68E7             >len_NFA         defl    $ - temp_NFA
1097+ 68E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1097+ 68E4             >
1097+ 68E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1097+ 68E5 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1097+ 68E8             >                org     $-1                 // alter last byte of Name just above to set
1097+ 68E7 A1          >                db      {b $} | END_BIT     // msb as name end
1097+ 68E8             >
1097+ 68E8 D8 68       >                dw      last_NFA            // Link to previous definition Name
1097+ 68EA             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1097+ 68EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1097+ 68EA ~           >
1097+ 68EA ~           >
1097+ 68EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1097+ 68EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1097+ 68EA             >
1097+ 68EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1098+ 68EA E1                           pop     hl
1099+ 68EB                              ldrphl
1099+ 68EB 22 96 63    >                ld      (RP_Pointer),hl
1100+ 68EE
1101+ 68EE                              next
1101+ 68EE DD E9       >                jp      (ix)
1102+ 68F0
1103+ 68F0              //  ______________________________________________________________________
1104+ 68F0              //
1105+ 68F0              // exit       --
1106+ 68F0              // exits back to the caller word
1107+ 68F0                              New_Def EXIT, "EXIT", is_code, is_normal
1107+ 68F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 68F0             >
1107+ 68F0             >                // dummy db directives used to calculate length of namec
1107+ 68F0 45 58 49 54 >                db      "EXIT"
1107+ 68F4             >len_NFA         defl    $ - temp_NFA
1107+ 68F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 68F0             >
1107+ 68F0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 68F1 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1107+ 68F5             >                org     $-1                 // alter last byte of Name just above to set
1107+ 68F4 D4          >                db      {b $} | END_BIT     // msb as name end
1107+ 68F5             >
1107+ 68F5 E4 68       >                dw      last_NFA            // Link to previous definition Name
1107+ 68F7             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 68F7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1107+ 68F7 ~           >
1107+ 68F7 ~           >
1107+ 68F7             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 68F7             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 68F7             >
1107+ 68F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 68F7                              ldhlrp                      // Get Return Stack Pointer
1108+ 68F7 2A 96 63    >                ld      hl,(RP_Pointer)
1109+ 68FA 4E                           ld      c, (hl)             // pop Instruction Pointer
1110+ 68FB 23                           inc     hl                  // from Return Stack
1111+ 68FC 46                           ld      b, (hl)
1112+ 68FD 23                           inc     hl
1113+ 68FE                              ldrphl                      // Set Return Stack Pointer
1113+ 68FE 22 96 63    >                ld      (RP_Pointer),hl
1114+ 6901                              next
1114+ 6901 DD E9       >                jp      (ix)
1115+ 6903
1116+ 6903              //  ______________________________________________________________________
1117+ 6903              //
1118+ 6903              // lastl      --
1119+ 6903              // exits back to the caller word
1120+ 6903              //              New_Def EXIT, "LASTL", is_code, is_normal
1121+ 6903              //              ldhlrp                      // Get Return Stack Pointer
1122+ 6903              //              ld      e, (hl)             // pop Instruction Pointer
1123+ 6903              //              inc     hl                  // from Return Stack
1124+ 6903              //              ld      d, (hl)
1125+ 6903              //              inc     hl
1126+ 6903              //              ld      (hl), e
1127+ 6903              //              inc     hl
1128+ 6903              //              ld      (hl), d
1129+ 6903              //              next
1130+ 6903
1131+ 6903              //  ______________________________________________________________________
1132+ 6903              //
1133+ 6903              // (leave)        --
1134+ 6903              // compiled by LEAVE
1135+ 6903              // this forces to exit from loop and jump past
1136+ 6903                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1136+ 6903             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1136+ 6903             >
1136+ 6903             >                // dummy db directives used to calculate length of namec
1136+ 6903 28 4C 45 41 >                db      "(LEAVE)"
1136+ 6907 56 45 29    >
1136+ 690A             >len_NFA         defl    $ - temp_NFA
1136+ 690A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1136+ 6903             >
1136+ 6903 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1136+ 6904 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1136+ 6908 56 45 29    >
1136+ 690B             >                org     $-1                 // alter last byte of Name just above to set
1136+ 690A A9          >                db      {b $} | END_BIT     // msb as name end
1136+ 690B             >
1136+ 690B F0 68       >                dw      last_NFA            // Link to previous definition Name
1136+ 690D             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1136+ 690D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1136+ 690D ~           >
1136+ 690D ~           >
1136+ 690D             >                endif           ; ok        // for other definitions it "points" the correct handler
1136+ 690D             >                // Use of "; ok" to suppress "warning[fwdref]"
1136+ 690D             >
1136+ 690D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1137+ 690D
1138+ 690D                              ldhlrp
1138+ 690D 2A 96 63    >                ld      hl,(RP_Pointer)
1139+ 6910 11 04 00                     ld      de, 4
1140+ 6913 19                           add     hl, de
1141+ 6914                              ldrphl
1141+ 6914 22 96 63    >                ld      (RP_Pointer),hl
1142+ 6917
1143+ 6917 C3 C3 63                     jp      Branch_Ptr       // perform branch consuming following cell
1144+ 691A                              next
1144+ 691A DD E9       >                jp      (ix)
1145+ 691C
1146+ 691C              //  ______________________________________________________________________
1147+ 691C              //
1148+ 691C              // >r      n --
1149+ 691C              // pop from calculator-stack and push into return-stack
1150+ 691C                              New_Def TO_R, ">R", is_code, is_normal
1150+ 691C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ 691C             >
1150+ 691C             >                // dummy db directives used to calculate length of namec
1150+ 691C 3E 52       >                db      ">R"
1150+ 691E             >len_NFA         defl    $ - temp_NFA
1150+ 691E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ 691C             >
1150+ 691C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ 691D 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1150+ 691F             >                org     $-1                 // alter last byte of Name just above to set
1150+ 691E D2          >                db      {b $} | END_BIT     // msb as name end
1150+ 691F             >
1150+ 691F 03 69       >                dw      last_NFA            // Link to previous definition Name
1150+ 6921             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 6921 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1150+ 6921 ~           >
1150+ 6921 ~           >
1150+ 6921             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 6921             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 6921             >
1150+ 6921             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 6921 D1                           pop     de
1152+ 6922                              ldhlrp
1152+ 6922 2A 96 63    >                ld      hl,(RP_Pointer)
1153+ 6925 2B                           dec     hl
1154+ 6926 72                           ld      (hl), d             // store current TOS
1155+ 6927 2B                           dec     hl                  // to Return Stack
1156+ 6928 73                           ld      (hl), e
1157+ 6929                              ldrphl
1157+ 6929 22 96 63    >                ld      (RP_Pointer),hl
1158+ 692C
1159+ 692C                              next
1159+ 692C DD E9       >                jp      (ix)
1160+ 692E
1161+ 692E              //  ______________________________________________________________________
1162+ 692E              //
1163+ 692E              // r>      -- n
1164+ 692E              // pop from return-stack and push into calculator-stack
1165+ 692E                              New_Def R_TO, "R>", is_code, is_normal
1165+ 692E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 692E             >
1165+ 692E             >                // dummy db directives used to calculate length of namec
1165+ 692E 52 3E       >                db      "R>"
1165+ 6930             >len_NFA         defl    $ - temp_NFA
1165+ 6930             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 692E             >
1165+ 692E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 692F 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1165+ 6931             >                org     $-1                 // alter last byte of Name just above to set
1165+ 6930 BE          >                db      {b $} | END_BIT     // msb as name end
1165+ 6931             >
1165+ 6931 1C 69       >                dw      last_NFA            // Link to previous definition Name
1165+ 6933             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 6933 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1165+ 6933 ~           >
1165+ 6933 ~           >
1165+ 6933             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 6933             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 6933             >
1165+ 6933             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 6933
1167+ 6933                              ldhlrp
1167+ 6933 2A 96 63    >                ld      hl,(RP_Pointer)
1168+ 6936 5E                           ld      e, (hl)             // retrieve from Return Stack
1169+ 6937 23                           inc     hl
1170+ 6938 56                           ld      d, (hl)
1171+ 6939 23                           inc     hl
1172+ 693A                              ldrphl
1172+ 693A 22 96 63    >                ld      (RP_Pointer),hl
1173+ 693D D5                           push    de
1174+ 693E                              next
1174+ 693E DD E9       >                jp      (ix)
1175+ 6940
1176+ 6940              //  ______________________________________________________________________
1177+ 6940              //
1178+ 6940              // r            -- n
1179+ 6940              // return on top of stack the value of top of return-stack
1180+ 6940              // Since this is the same as I, we alter R's CFA to jump there
1181+ 6940                              New_Def R_OP, "R@", is_code, is_normal
1181+ 6940             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ 6940             >
1181+ 6940             >                // dummy db directives used to calculate length of namec
1181+ 6940 52 40       >                db      "R@"
1181+ 6942             >len_NFA         defl    $ - temp_NFA
1181+ 6942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ 6940             >
1181+ 6940 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ 6941 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1181+ 6943             >                org     $-1                 // alter last byte of Name just above to set
1181+ 6942 C0          >                db      {b $} | END_BIT     // msb as name end
1181+ 6943             >
1181+ 6943 2E 69       >                dw      last_NFA            // Link to previous definition Name
1181+ 6945             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 6945 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1181+ 6945 ~           >
1181+ 6945 ~           >
1181+ 6945             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 6945             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 6945             >
1181+ 6945             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 6945 C3 66 64                     jp      I_Ptr
1183+ 6948
1184+ 6948              //  ______________________________________________________________________
1185+ 6948              //
1186+ 6948              // r            -- n
1187+ 6948              // return on top of stack the value of top of return-stack
1188+ 6948              // Since this is the same as I, we alter R's CFA to jump there
1189+ 6948                              New_Def R_OLD, "R", is_code, is_normal
1189+ 6948             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 6948             >
1189+ 6948             >                // dummy db directives used to calculate length of namec
1189+ 6948 52          >                db      "R"
1189+ 6949             >len_NFA         defl    $ - temp_NFA
1189+ 6949             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 6948             >
1189+ 6948 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 6949 52          >                db      "R"               // name string in 7-bit ascii, but
1189+ 694A             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6949 D2          >                db      {b $} | END_BIT     // msb as name end
1189+ 694A             >
1189+ 694A 40 69       >                dw      last_NFA            // Link to previous definition Name
1189+ 694C             >R_OLD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 694C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1189+ 694C ~           >
1189+ 694C ~           >
1189+ 694C             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 694C             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 694C             >
1189+ 694C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 694C C3 66 64                     jp      I_Ptr
1191+ 694F
1192+ 694F              //  ______________________________________________________________________
1193+ 694F              //
1194+ 694F              // 0=           n -- f
1195+ 694F              // true (non zero) if n is zero, false (0) elsewere
1196+ 694F                              New_Def ZEQUAL, "0=", is_code, is_normal
1196+ 694F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 694F             >
1196+ 694F             >                // dummy db directives used to calculate length of namec
1196+ 694F 30 3D       >                db      "0="
1196+ 6951             >len_NFA         defl    $ - temp_NFA
1196+ 6951             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 694F             >
1196+ 694F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 6950 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1196+ 6952             >                org     $-1                 // alter last byte of Name just above to set
1196+ 6951 BD          >                db      {b $} | END_BIT     // msb as name end
1196+ 6952             >
1196+ 6952 48 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 6954             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 6954 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1196+ 6954 ~           >
1196+ 6954 ~           >
1196+ 6954             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 6954             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 6954             >
1196+ 6954             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 6954              Zero_Equal:
1198+ 6954 E1                           pop     hl
1199+ 6955 7D                           ld      a, l
1200+ 6956 B4                           or      h
1201+ 6957 21 00 00                     ld      hl, FALSE_FLAG
1202+ 695A 20 01                        jr      nz, ZEqual_Skip
1203+ 695C 2B                               dec     hl
1204+ 695D              ZEqual_Skip:
1205+ 695D                              psh1
1205+ 695D E5          >                push    hl
1205+ 695E DD E9       >                jp      (ix)
1206+ 6960
1207+ 6960              //  ______________________________________________________________________
1208+ 6960              //
1209+ 6960              // not         a1 -- a2
1210+ 6960              // increment by 2 top of stack
1211+ 6960                              New_Def NOT_OP, "NOT", is_code, is_normal
1211+ 6960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 6960             >
1211+ 6960             >                // dummy db directives used to calculate length of namec
1211+ 6960 4E 4F 54    >                db      "NOT"
1211+ 6963             >len_NFA         defl    $ - temp_NFA
1211+ 6963             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 6960             >
1211+ 6960 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 6961 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1211+ 6964             >                org     $-1                 // alter last byte of Name just above to set
1211+ 6963 D4          >                db      {b $} | END_BIT     // msb as name end
1211+ 6964             >
1211+ 6964 4F 69       >                dw      last_NFA            // Link to previous definition Name
1211+ 6966             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 6966 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1211+ 6966 ~           >
1211+ 6966 ~           >
1211+ 6966             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 6966             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 6966             >
1211+ 6966             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 6966 C3 54 69                     jp      Zero_Equal
1213+ 6969
1214+ 6969              //  ______________________________________________________________________
1215+ 6969              //
1216+ 6969              // 0<           n -- f
1217+ 6969              // true (non zero) if n is less than zero, false (0) elsewere
1218+ 6969                              New_Def ZLESS, "0<", is_code, is_normal
1218+ 6969             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1218+ 6969             >
1218+ 6969             >                // dummy db directives used to calculate length of namec
1218+ 6969 30 3C       >                db      "0<"
1218+ 696B             >len_NFA         defl    $ - temp_NFA
1218+ 696B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1218+ 6969             >
1218+ 6969 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1218+ 696A 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1218+ 696C             >                org     $-1                 // alter last byte of Name just above to set
1218+ 696B BC          >                db      {b $} | END_BIT     // msb as name end
1218+ 696C             >
1218+ 696C 60 69       >                dw      last_NFA            // Link to previous definition Name
1218+ 696E             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1218+ 696E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1218+ 696E ~           >
1218+ 696E ~           >
1218+ 696E             >                endif           ; ok        // for other definitions it "points" the correct handler
1218+ 696E             >                // Use of "; ok" to suppress "warning[fwdref]"
1218+ 696E             >
1218+ 696E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1219+ 696E E1                           pop     hl
1220+ 696F 29                           add     hl, hl
1221+ 6970 21 00 00                     ld      hl, 0
1222+ 6973 30 01                        jr      nc, ZLess_Skip
1223+ 6975 2B                               dec     hl
1224+ 6976              ZLess_Skip:
1225+ 6976                              psh1
1225+ 6976 E5          >                push    hl
1225+ 6977 DD E9       >                jp      (ix)
1226+ 6979
1227+ 6979              //  ______________________________________________________________________
1228+ 6979              //
1229+ 6979              // 0>           n -- f
1230+ 6979              // true (non zero) if n is less than zero, false (0) elsewere
1231+ 6979                              New_Def ZGREATER, "0>", is_code, is_normal
1231+ 6979             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ 6979             >
1231+ 6979             >                // dummy db directives used to calculate length of namec
1231+ 6979 30 3E       >                db      "0>"
1231+ 697B             >len_NFA         defl    $ - temp_NFA
1231+ 697B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ 6979             >
1231+ 6979 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ 697A 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1231+ 697C             >                org     $-1                 // alter last byte of Name just above to set
1231+ 697B BE          >                db      {b $} | END_BIT     // msb as name end
1231+ 697C             >
1231+ 697C 69 69       >                dw      last_NFA            // Link to previous definition Name
1231+ 697E             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 697E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1231+ 697E ~           >
1231+ 697E ~           >
1231+ 697E             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 697E             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 697E             >
1231+ 697E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 697E E1                           pop     hl
1233+ 697F 7D                           ld      a, l
1234+ 6980 B4                           or      h
1235+ 6981 29                           add     hl, hl
1236+ 6982 21 00 00                     ld      hl, FALSE_FLAG
1237+ 6985 38 04                        jr      c, ZGreater_Skip
1238+ 6987 A7                               and     a
1239+ 6988 28 01                            jr      z, ZGreater_Skip
1240+ 698A 2B                                   dec     hl
1241+ 698B              ZGreater_Skip:
1242+ 698B                              psh1
1242+ 698B E5          >                push    hl
1242+ 698C DD E9       >                jp      (ix)
1243+ 698E
1244+ 698E              //  ______________________________________________________________________
1245+ 698E              //
1246+ 698E              // +            n1 n2 -- n3
1247+ 698E              // returns the unsigned sum of two top values
1248+ 698E                              New_Def PLUS, "+", is_code, is_normal
1248+ 698E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ 698E             >
1248+ 698E             >                // dummy db directives used to calculate length of namec
1248+ 698E 2B          >                db      "+"
1248+ 698F             >len_NFA         defl    $ - temp_NFA
1248+ 698F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ 698E             >
1248+ 698E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ 698F 2B          >                db      "+"               // name string in 7-bit ascii, but
1248+ 6990             >                org     $-1                 // alter last byte of Name just above to set
1248+ 698F AB          >                db      {b $} | END_BIT     // msb as name end
1248+ 6990             >
1248+ 6990 79 69       >                dw      last_NFA            // Link to previous definition Name
1248+ 6992             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 6992 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1248+ 6992 ~           >
1248+ 6992 ~           >
1248+ 6992             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 6992             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 6992             >
1248+ 6992             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 6992 E1                           pop     hl
1250+ 6993 D1                           pop     de
1251+ 6994 19                           add     hl, de
1252+ 6995
1253+ 6995                              psh1
1253+ 6995 E5          >                push    hl
1253+ 6996 DD E9       >                jp      (ix)
1254+ 6998
1255+ 6998
1256+ 6998              //  ______________________________________________________________________
1257+ 6998              //
1258+ 6998              // d+           d1 d2 -- d3
1259+ 6998              // returns the unsigned sum of two top double-numbers
1260+ 6998              //      d2  d1
1261+ 6998              //      h l h l
1262+ 6998              // SP   LHEDLHED
1263+ 6998              // SP  +01234567
1264+ 6998                              New_Def DPLUS, "D+", is_code, is_normal
1264+ 6998             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ 6998             >
1264+ 6998             >                // dummy db directives used to calculate length of namec
1264+ 6998 44 2B       >                db      "D+"
1264+ 699A             >len_NFA         defl    $ - temp_NFA
1264+ 699A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ 6998             >
1264+ 6998 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ 6999 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1264+ 699B             >                org     $-1                 // alter last byte of Name just above to set
1264+ 699A AB          >                db      {b $} | END_BIT     // msb as name end
1264+ 699B             >
1264+ 699B 8E 69       >                dw      last_NFA            // Link to previous definition Name
1264+ 699D             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 699D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1264+ 699D ~           >
1264+ 699D ~           >
1264+ 699D             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 699D             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 699D             >
1264+ 699D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 699D
1266+ 699D D9                           exx
1267+ 699E C1                           pop     bc                  // bc := d2.H
1268+ 699F D1                           pop     de                  // hl := d2.L
1269+ 69A0 E1                           pop     hl                  // d1.H
1270+ 69A1 E3                           ex      (sp), hl            // d1.L
1271+ 69A2 19                           add     hl, de              // hl := d2.L + d1.L
1272+ 69A3 E3                           ex      (sp), hl            // d1.H
1273+ 69A4 ED 4A                        adc     hl, bc              // d1.H + d2.H
1274+ 69A6 E5                           push    hl
1275+ 69A7 D9                           exx
1276+ 69A8                              next
1276+ 69A8 DD E9       >                jp      (ix)
1277+ 69AA
1278+ 69AA              //  ______________________________________________________________________
1279+ 69AA              //
1280+ 69AA              // 1+           n1 -- n2
1281+ 69AA              // increment by 1 top of stack
1282+ 69AA                              New_Def ONE_PLUS, "1+", is_code, is_normal
1282+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1282+ 69AA             >
1282+ 69AA             >                // dummy db directives used to calculate length of namec
1282+ 69AA 31 2B       >                db      "1+"
1282+ 69AC             >len_NFA         defl    $ - temp_NFA
1282+ 69AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1282+ 69AA             >
1282+ 69AA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1282+ 69AB 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1282+ 69AD             >                org     $-1                 // alter last byte of Name just above to set
1282+ 69AC AB          >                db      {b $} | END_BIT     // msb as name end
1282+ 69AD             >
1282+ 69AD 98 69       >                dw      last_NFA            // Link to previous definition Name
1282+ 69AF             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1282+ 69AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1282+ 69AF ~           >
1282+ 69AF ~           >
1282+ 69AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1282+ 69AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1282+ 69AF             >
1282+ 69AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1283+ 69AF E1                           pop     hl
1284+ 69B0 23                           inc     hl
1285+ 69B1
1286+ 69B1                              psh1
1286+ 69B1 E5          >                push    hl
1286+ 69B2 DD E9       >                jp      (ix)
1287+ 69B4
1288+ 69B4              //  ______________________________________________________________________
1289+ 69B4              //
1290+ 69B4              // 1-           n1 -- n2
1291+ 69B4              // decrement by 1 top of stack
1292+ 69B4                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1292+ 69B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 69B4             >
1292+ 69B4             >                // dummy db directives used to calculate length of namec
1292+ 69B4 31 2D       >                db      "1-"
1292+ 69B6             >len_NFA         defl    $ - temp_NFA
1292+ 69B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 69B4             >
1292+ 69B4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 69B5 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1292+ 69B7             >                org     $-1                 // alter last byte of Name just above to set
1292+ 69B6 AD          >                db      {b $} | END_BIT     // msb as name end
1292+ 69B7             >
1292+ 69B7 AA 69       >                dw      last_NFA            // Link to previous definition Name
1292+ 69B9             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 69B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1292+ 69B9 ~           >
1292+ 69B9 ~           >
1292+ 69B9             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 69B9             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 69B9             >
1292+ 69B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 69B9 E1                           pop     hl
1294+ 69BA 2B                           dec     hl
1295+ 69BB
1296+ 69BB                              psh1
1296+ 69BB E5          >                push    hl
1296+ 69BC DD E9       >                jp      (ix)
1297+ 69BE
1298+ 69BE              //  ______________________________________________________________________
1299+ 69BE              //
1300+ 69BE              // 2+           n1 -- n2
1301+ 69BE              // increment by 2 top of stack
1302+ 69BE                              New_Def TWO_PLUS, "2+", is_code, is_normal
1302+ 69BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69BE             >
1302+ 69BE             >                // dummy db directives used to calculate length of namec
1302+ 69BE 32 2B       >                db      "2+"
1302+ 69C0             >len_NFA         defl    $ - temp_NFA
1302+ 69C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69BE             >
1302+ 69BE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69BF 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1302+ 69C1             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69C0 AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69C1             >
1302+ 69C1 B4 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69C3             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69C3 ~           >
1302+ 69C3 ~           >
1302+ 69C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69C3             >
1302+ 69C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69C3              Two_Plus:
1304+ 69C3 E1                           pop     hl
1305+ 69C4 23                           inc     hl
1306+ 69C5 23                           inc     hl
1307+ 69C6
1308+ 69C6                              psh1
1308+ 69C6 E5          >                push    hl
1308+ 69C7 DD E9       >                jp      (ix)
1309+ 69C9
1310+ 69C9              //  ______________________________________________________________________
1311+ 69C9              //
1312+ 69C9              // cell+        a1 -- a2
1313+ 69C9              // increment by 2 top of stack
1314+ 69C9                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1314+ 69C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ 69C9             >
1314+ 69C9             >                // dummy db directives used to calculate length of namec
1314+ 69C9 43 45 4C 4C >                db      "CELL+"
1314+ 69CD 2B          >
1314+ 69CE             >len_NFA         defl    $ - temp_NFA
1314+ 69CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ 69C9             >
1314+ 69C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ 69CA 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1314+ 69CE 2B          >
1314+ 69CF             >                org     $-1                 // alter last byte of Name just above to set
1314+ 69CE AB          >                db      {b $} | END_BIT     // msb as name end
1314+ 69CF             >
1314+ 69CF BE 69       >                dw      last_NFA            // Link to previous definition Name
1314+ 69D1             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 69D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 69D1 ~           >
1314+ 69D1 ~           >
1314+ 69D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 69D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 69D1             >
1314+ 69D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 69D1 C3 C3 69                     jp      Two_Plus
1316+ 69D4
1317+ 69D4              //  ______________________________________________________________________
1318+ 69D4              //
1319+ 69D4              // align        a1 -- a2
1320+ 69D4              // align memory : not used
1321+ 69D4              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1322+ 69D4              //            next
1323+ 69D4
1324+ 69D4              //  ______________________________________________________________________
1325+ 69D4              //
1326+ 69D4              // cell-        a1 -- a2
1327+ 69D4              // decrement by 2 top of stack
1328+ 69D4                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1328+ 69D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1328+ 69D4             >
1328+ 69D4             >                // dummy db directives used to calculate length of namec
1328+ 69D4 43 45 4C 4C >                db      "CELL-"
1328+ 69D8 2D          >
1328+ 69D9             >len_NFA         defl    $ - temp_NFA
1328+ 69D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1328+ 69D4             >
1328+ 69D4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1328+ 69D5 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1328+ 69D9 2D          >
1328+ 69DA             >                org     $-1                 // alter last byte of Name just above to set
1328+ 69D9 AD          >                db      {b $} | END_BIT     // msb as name end
1328+ 69DA             >
1328+ 69DA C9 69       >                dw      last_NFA            // Link to previous definition Name
1328+ 69DC             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1328+ 69DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1328+ 69DC ~           >
1328+ 69DC ~           >
1328+ 69DC             >                endif           ; ok        // for other definitions it "points" the correct handler
1328+ 69DC             >                // Use of "; ok" to suppress "warning[fwdref]"
1328+ 69DC             >
1328+ 69DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1329+ 69DC              CellMinus:
1330+ 69DC E1                           pop     hl
1331+ 69DD 2B                           dec     hl
1332+ 69DE 2B                           dec     hl
1333+ 69DF
1334+ 69DF                              psh1
1334+ 69DF E5          >                push    hl
1334+ 69E0 DD E9       >                jp      (ix)
1335+ 69E2
1336+ 69E2              //  ______________________________________________________________________
1337+ 69E2              //
1338+ 69E2              // 2-           a1 -- a2
1339+ 69E2              // decrement by 2 top of stack
1340+ 69E2                              New_Def TWO_MINUS, "2-", is_code, is_normal
1340+ 69E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 69E2             >
1340+ 69E2             >                // dummy db directives used to calculate length of namec
1340+ 69E2 32 2D       >                db      "2-"
1340+ 69E4             >len_NFA         defl    $ - temp_NFA
1340+ 69E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 69E2             >
1340+ 69E2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 69E3 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1340+ 69E5             >                org     $-1                 // alter last byte of Name just above to set
1340+ 69E4 AD          >                db      {b $} | END_BIT     // msb as name end
1340+ 69E5             >
1340+ 69E5 D4 69       >                dw      last_NFA            // Link to previous definition Name
1340+ 69E7             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 69E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 69E7 ~           >
1340+ 69E7 ~           >
1340+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 69E7             >
1340+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 69E7 C3 DC 69                     jp      CellMinus
1342+ 69EA
1343+ 69EA              //  ______________________________________________________________________
1344+ 69EA              //
1345+ 69EA              // negate       n1 -- n2
1346+ 69EA              // change the sign of number
1347+ 69EA                              New_Def MINUS, "NEGATE", is_code, is_normal
1347+ 69EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ 69EA             >
1347+ 69EA             >                // dummy db directives used to calculate length of namec
1347+ 69EA 4E 45 47 41 >                db      "NEGATE"
1347+ 69EE 54 45       >
1347+ 69F0             >len_NFA         defl    $ - temp_NFA
1347+ 69F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ 69EA             >
1347+ 69EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ 69EB 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1347+ 69EF 54 45       >
1347+ 69F1             >                org     $-1                 // alter last byte of Name just above to set
1347+ 69F0 C5          >                db      {b $} | END_BIT     // msb as name end
1347+ 69F1             >
1347+ 69F1 E2 69       >                dw      last_NFA            // Link to previous definition Name
1347+ 69F3             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 69F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1347+ 69F3 ~           >
1347+ 69F3 ~           >
1347+ 69F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 69F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 69F3             >
1347+ 69F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 69F3 21 00 00                     ld      hl, 0               // subtract from 0
1349+ 69F6 D1                           pop     de
1350+ 69F7 B7                           or      a
1351+ 69F8 ED 52                        sbc     hl, de
1352+ 69FA
1353+ 69FA                              psh1
1353+ 69FA E5          >                push    hl
1353+ 69FB DD E9       >                jp      (ix)
1354+ 69FD
1355+ 69FD              //  ______________________________________________________________________
1356+ 69FD              //
1357+ 69FD              // dnegate      d1 -- d2
1358+ 69FD              // change the sign of a double number
1359+ 69FD                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1359+ 69FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1359+ 69FD             >
1359+ 69FD             >                // dummy db directives used to calculate length of namec
1359+ 69FD 44 4E 45 47 >                db      "DNEGATE"
1359+ 6A01 41 54 45    >
1359+ 6A04             >len_NFA         defl    $ - temp_NFA
1359+ 6A04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1359+ 69FD             >
1359+ 69FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1359+ 69FE 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1359+ 6A02 41 54 45    >
1359+ 6A05             >                org     $-1                 // alter last byte of Name just above to set
1359+ 6A04 C5          >                db      {b $} | END_BIT     // msb as name end
1359+ 6A05             >
1359+ 6A05 EA 69       >                dw      last_NFA            // Link to previous definition Name
1359+ 6A07             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1359+ 6A07 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1359+ 6A07 ~           >
1359+ 6A07 ~           >
1359+ 6A07             >                endif           ; ok        // for other definitions it "points" the correct handler
1359+ 6A07             >                // Use of "; ok" to suppress "warning[fwdref]"
1359+ 6A07             >
1359+ 6A07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1360+ 6A07 D9                           exx
1361+ 6A08 C1                           pop     bc                  // d1.H
1362+ 6A09 D1                           pop     de                  // d1.L
1363+ 6A0A AF                           xor     a
1364+ 6A0B 67                           ld      h, a
1365+ 6A0C 6F                           ld      l, a
1366+ 6A0D ED 52                        sbc     hl, de              // subtact from zero
1367+ 6A0F E5                           push    hl                  // > d2-L
1368+ 6A10 67                           ld      h, a
1369+ 6A11 6F                           ld      l, a
1370+ 6A12 ED 42                        sbc     hl, bc              // subtract from zero with carry
1371+ 6A14                                                          // > d2-H
1372+ 6A14 E5                           push    hl
1373+ 6A15 D9                           exx
1374+ 6A16                              next
1374+ 6A16 DD E9       >                jp      (ix)
1375+ 6A18
1376+ 6A18              //  ______________________________________________________________________
1377+ 6A18              //
1378+ 6A18              // over         n1 n2 -- n1 n2 n1
1379+ 6A18              // copy the second value of stack and put it on top.
1380+ 6A18                              New_Def OVER, "OVER", is_code, is_normal
1380+ 6A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1380+ 6A18             >
1380+ 6A18             >                // dummy db directives used to calculate length of namec
1380+ 6A18 4F 56 45 52 >                db      "OVER"
1380+ 6A1C             >len_NFA         defl    $ - temp_NFA
1380+ 6A1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1380+ 6A18             >
1380+ 6A18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1380+ 6A19 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1380+ 6A1D             >                org     $-1                 // alter last byte of Name just above to set
1380+ 6A1C D2          >                db      {b $} | END_BIT     // msb as name end
1380+ 6A1D             >
1380+ 6A1D FD 69       >                dw      last_NFA            // Link to previous definition Name
1380+ 6A1F             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1380+ 6A1F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1380+ 6A1F ~           >
1380+ 6A1F ~           >
1380+ 6A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
1380+ 6A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
1380+ 6A1F             >
1380+ 6A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1381+ 6A1F D1                           pop     de                  //   n2
1382+ 6A20 E1                           pop     hl                  // < n1
1383+ 6A21 E5                           push    hl                  // > n1
1384+ 6A22 D5                           push    de                  // > n2
1385+ 6A23 E5                           push    hl                  // > n1
1386+ 6A24                              next
1386+ 6A24 DD E9       >                jp      (ix)
1387+ 6A26
1388+ 6A26              //  ______________________________________________________________________
1389+ 6A26              //
1390+ 6A26              // drop         n1 --
1391+ 6A26              // drops the top of stack
1392+ 6A26                              New_Def DROP, "DROP", is_code, is_normal
1392+ 6A26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1392+ 6A26             >
1392+ 6A26             >                // dummy db directives used to calculate length of namec
1392+ 6A26 44 52 4F 50 >                db      "DROP"
1392+ 6A2A             >len_NFA         defl    $ - temp_NFA
1392+ 6A2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1392+ 6A26             >
1392+ 6A26 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1392+ 6A27 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1392+ 6A2B             >                org     $-1                 // alter last byte of Name just above to set
1392+ 6A2A D0          >                db      {b $} | END_BIT     // msb as name end
1392+ 6A2B             >
1392+ 6A2B 18 6A       >                dw      last_NFA            // Link to previous definition Name
1392+ 6A2D             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1392+ 6A2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1392+ 6A2D ~           >
1392+ 6A2D ~           >
1392+ 6A2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1392+ 6A2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1392+ 6A2D             >
1392+ 6A2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1393+ 6A2D E1                           pop     hl                  // < n1 and discard previous TOS
1394+ 6A2E                              next
1394+ 6A2E DD E9       >                jp      (ix)
1395+ 6A30
1396+ 6A30              //  ______________________________________________________________________
1397+ 6A30              //
1398+ 6A30              // nip          n1 n2 -- n2
1399+ 6A30              // drops the second elemento on the stack
1400+ 6A30                              New_Def NIP, "NIP", is_code, is_normal
1400+ 6A30             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 6A30             >
1400+ 6A30             >                // dummy db directives used to calculate length of namec
1400+ 6A30 4E 49 50    >                db      "NIP"
1400+ 6A33             >len_NFA         defl    $ - temp_NFA
1400+ 6A33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 6A30             >
1400+ 6A30 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 6A31 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1400+ 6A34             >                org     $-1                 // alter last byte of Name just above to set
1400+ 6A33 D0          >                db      {b $} | END_BIT     // msb as name end
1400+ 6A34             >
1400+ 6A34 26 6A       >                dw      last_NFA            // Link to previous definition Name
1400+ 6A36             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6A36 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1400+ 6A36 ~           >
1400+ 6A36 ~           >
1400+ 6A36             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6A36             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6A36             >
1400+ 6A36             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6A36
1402+ 6A36 E1                           pop     hl                  // < n1 discarded
1403+ 6A37 E3                           ex      (sp), hl
1404+ 6A38                              next
1404+ 6A38 DD E9       >                jp      (ix)
1405+ 6A3A
1406+ 6A3A              //  ______________________________________________________________________
1407+ 6A3A              //
1408+ 6A3A              // tuck         n1 n2 -- n2 n1 n2
1409+ 6A3A              // copy the top element after the second.
1410+ 6A3A                              New_Def TUCK, "TUCK", is_code, is_normal
1410+ 6A3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ 6A3A             >
1410+ 6A3A             >                // dummy db directives used to calculate length of namec
1410+ 6A3A 54 55 43 4B >                db      "TUCK"
1410+ 6A3E             >len_NFA         defl    $ - temp_NFA
1410+ 6A3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ 6A3A             >
1410+ 6A3A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ 6A3B 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1410+ 6A3F             >                org     $-1                 // alter last byte of Name just above to set
1410+ 6A3E CB          >                db      {b $} | END_BIT     // msb as name end
1410+ 6A3F             >
1410+ 6A3F 30 6A       >                dw      last_NFA            // Link to previous definition Name
1410+ 6A41             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 6A41 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1410+ 6A41 ~           >
1410+ 6A41 ~           >
1410+ 6A41             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 6A41             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 6A41             >
1410+ 6A41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 6A41 E1                           pop     hl
1412+ 6A42 D1                           pop     de                  // < n1
1413+ 6A43 E5                           push    hl                  // > n2  and TOS
1414+ 6A44 D5                           push    de                  // > n1
1415+ 6A45 E5                           push    hl
1416+ 6A46                              next
1416+ 6A46 DD E9       >                jp      (ix)
1417+ 6A48
1418+ 6A48              //  ______________________________________________________________________
1419+ 6A48              //
1420+ 6A48              // swap         n1 n2 -- n2 n1
1421+ 6A48              // swaps the two values on top of stack
1422+ 6A48                              New_Def SWAP, "SWAP", is_code, is_normal
1422+ 6A48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ 6A48             >
1422+ 6A48             >                // dummy db directives used to calculate length of namec
1422+ 6A48 53 57 41 50 >                db      "SWAP"
1422+ 6A4C             >len_NFA         defl    $ - temp_NFA
1422+ 6A4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ 6A48             >
1422+ 6A48 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ 6A49 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1422+ 6A4D             >                org     $-1                 // alter last byte of Name just above to set
1422+ 6A4C D0          >                db      {b $} | END_BIT     // msb as name end
1422+ 6A4D             >
1422+ 6A4D 3A 6A       >                dw      last_NFA            // Link to previous definition Name
1422+ 6A4F             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 6A4F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 6A4F ~           >
1422+ 6A4F ~           >
1422+ 6A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 6A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 6A4F             >
1422+ 6A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 6A4F E1                           pop     hl                  // < n1
1424+ 6A50 E3                           ex      (sp),hl             // > n2
1425+ 6A51 E5                           push    hl                  // copy n1 to TOS
1426+ 6A52                              next
1426+ 6A52 DD E9       >                jp      (ix)
1427+ 6A54
1428+ 6A54              //  ______________________________________________________________________
1429+ 6A54              //
1430+ 6A54              // dup         n -- n n
1431+ 6A54              // duplicates the top value of stack
1432+ 6A54                              New_Def DUP, "DUP", is_code, is_normal
1432+ 6A54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ 6A54             >
1432+ 6A54             >                // dummy db directives used to calculate length of namec
1432+ 6A54 44 55 50    >                db      "DUP"
1432+ 6A57             >len_NFA         defl    $ - temp_NFA
1432+ 6A57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ 6A54             >
1432+ 6A54 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ 6A55 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1432+ 6A58             >                org     $-1                 // alter last byte of Name just above to set
1432+ 6A57 D0          >                db      {b $} | END_BIT     // msb as name end
1432+ 6A58             >
1432+ 6A58 48 6A       >                dw      last_NFA            // Link to previous definition Name
1432+ 6A5A             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 6A5A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1432+ 6A5A ~           >
1432+ 6A5A ~           >
1432+ 6A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 6A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 6A5A             >
1432+ 6A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 6A5A E1                           pop     hl
1434+ 6A5B E5                           push    hl                  // > n duplicate TOS
1435+ 6A5C E5                           push    hl
1436+ 6A5D                              next
1436+ 6A5D DD E9       >                jp      (ix)
1437+ 6A5F
1438+ 6A5F              //  ______________________________________________________________________
1439+ 6A5F              //
1440+ 6A5F              // rot         n1 n2 n3 -- n2 n3 n1
1441+ 6A5F              // Rotates the 3 top values of stack by picking the 3rd in access-order
1442+ 6A5F              // and putting it on top. The other two are shifted down one place.
1443+ 6A5F                              New_Def ROT, "ROT", is_code, is_normal
1443+ 6A5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1443+ 6A5F             >
1443+ 6A5F             >                // dummy db directives used to calculate length of namec
1443+ 6A5F 52 4F 54    >                db      "ROT"
1443+ 6A62             >len_NFA         defl    $ - temp_NFA
1443+ 6A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1443+ 6A5F             >
1443+ 6A5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1443+ 6A60 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1443+ 6A63             >                org     $-1                 // alter last byte of Name just above to set
1443+ 6A62 D4          >                db      {b $} | END_BIT     // msb as name end
1443+ 6A63             >
1443+ 6A63 54 6A       >                dw      last_NFA            // Link to previous definition Name
1443+ 6A65             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1443+ 6A65 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1443+ 6A65 ~           >
1443+ 6A65 ~           >
1443+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
1443+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
1443+ 6A65             >
1443+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1444+ 6A65 D1                           pop     de                  // < n3
1445+ 6A66 E1                           pop     hl                  // < n2
1446+ 6A67 E3                           ex      (sp),hl             // > n2 < n1
1447+ 6A68 D5                           push    de                  // > n3
1448+ 6A69 E5                           push    hl                  // copy n1 to TOS
1449+ 6A6A                              next
1449+ 6A6A DD E9       >                jp      (ix)
1450+ 6A6C
1451+ 6A6C              //  ______________________________________________________________________
1452+ 6A6C              //
1453+ 6A6C              // -rot         n1 n2 n3 -- n3 n1 n2
1454+ 6A6C              // Rotates the 3 top values of stack by picking the 1st in access-order
1455+ 6A6C              // and putting back to 3rd place. The other two are shifted down one place.
1456+ 6A6C                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1456+ 6A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1456+ 6A6C             >
1456+ 6A6C             >                // dummy db directives used to calculate length of namec
1456+ 6A6C 2D 52 4F 54 >                db      "-ROT"
1456+ 6A70             >len_NFA         defl    $ - temp_NFA
1456+ 6A70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1456+ 6A6C             >
1456+ 6A6C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1456+ 6A6D 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1456+ 6A71             >                org     $-1                 // alter last byte of Name just above to set
1456+ 6A70 D4          >                db      {b $} | END_BIT     // msb as name end
1456+ 6A71             >
1456+ 6A71 5F 6A       >                dw      last_NFA            // Link to previous definition Name
1456+ 6A73             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1456+ 6A73 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1456+ 6A73 ~           >
1456+ 6A73 ~           >
1456+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
1456+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
1456+ 6A73             >
1456+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1457+ 6A73 E1                           pop     hl                  // < n3
1458+ 6A74 D1                           pop     de                  // < n2
1459+ 6A75 E3                           ex      (sp),hl             // > n3 < n1
1460+ 6A76 E5                           push    hl                  // > n1
1461+ 6A77 D5                           push    de                  // copy n3 to TOS
1462+ 6A78                              next
1462+ 6A78 DD E9       >                jp      (ix)
1463+ 6A7A
1464+ 6A7A              //  ______________________________________________________________________
1465+ 6A7A              //
1466+ 6A7A              // pick        n1 -- nx
1467+ 6A7A              // picks the nth element from TOS
1468+ 6A7A                              New_Def PICK, "PICK", is_code, is_normal
1468+ 6A7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1468+ 6A7A             >
1468+ 6A7A             >                // dummy db directives used to calculate length of namec
1468+ 6A7A 50 49 43 4B >                db      "PICK"
1468+ 6A7E             >len_NFA         defl    $ - temp_NFA
1468+ 6A7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1468+ 6A7A             >
1468+ 6A7A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1468+ 6A7B 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1468+ 6A7F             >                org     $-1                 // alter last byte of Name just above to set
1468+ 6A7E CB          >                db      {b $} | END_BIT     // msb as name end
1468+ 6A7F             >
1468+ 6A7F 6C 6A       >                dw      last_NFA            // Link to previous definition Name
1468+ 6A81             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1468+ 6A81 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1468+ 6A81 ~           >
1468+ 6A81 ~           >
1468+ 6A81             >                endif           ; ok        // for other definitions it "points" the correct handler
1468+ 6A81             >                // Use of "; ok" to suppress "warning[fwdref]"
1468+ 6A81             >
1468+ 6A81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1469+ 6A81 E1                           pop     hl                  // take TOS as index
1470+ 6A82 29                           add     hl, hl              // as cells
1471+ 6A83 39                           add     hl, sp              // from Stack Pointer
1472+ 6A84 7E                           ld      a, (hl)             // replace TOS
1473+ 6A85 23                           inc     hl
1474+ 6A86 66                           ld      h, (hl)
1475+ 6A87 6F                           ld      l, a
1476+ 6A88
1477+ 6A88                              psh1
1477+ 6A88 E5          >                push    hl
1477+ 6A89 DD E9       >                jp      (ix)
1478+ 6A8B
1479+ 6A8B
1480+ 6A8B              //  ______________________________________________________________________
1481+ 6A8B              //
1482+ 6A8B              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1483+ 6A8B              // picks the nth element from TOS
1484+ 6A8B              //              New_Def ROLL, "ROLL", is_code, is_normal
1485+ 6A8B              //              exx                     // we need all registers free
1486+ 6A8B              //              pop     hl              // number of cells to roll
1487+ 6A8B              //              ld      a, h
1488+ 6A8B              //              or       l
1489+ 6A8B              //              jr      z, Roll_Zero
1490+ 6A8B              //                  add     hl, hl              // number of bytes to move
1491+ 6A8B              //                  ld      b, h
1492+ 6A8B              //                  ld      c, l
1493+ 6A8B              //                  add     hl, sp          // address of n1
1494+ 6A8B              //                  ld      a, (hl)         // take n1 into a and a,
1495+ 6A8B              //                  inc     hl
1496+ 6A8B              //                  ex      af, af'
1497+ 6A8B              //                  ld      a, (hl)         // take n1 into a and a,
1498+ 6A8B              //                  ld      d, h
1499+ 6A8B              //                  ld      e, l
1500+ 6A8B              //                  dec     hl
1501+ 6A8B              //                  dec     hl
1502+ 6A8B              //                  lddr
1503+ 6A8B              //                  ex      de, hl
1504+ 6A8B              //                  ld      (hl), a
1505+ 6A8B              //                  dec     hl
1506+ 6A8B              //                  ex      af, af'
1507+ 6A8B              //                  ld      (hl), a
1508+ 6A8B              //Roll_Zero:
1509+ 6A8B              //              exx
1510+ 6A8B              //              next
1511+ 6A8B
1512+ 6A8B
1513+ 6A8B              //  ______________________________________________________________________
1514+ 6A8B              //
1515+ 6A8B              // 2over        d1 d2 -- d1 d2 d1
1516+ 6A8B              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1517+ 6A8B              // copy the second double of stack and put on top.
1518+ 6A8B              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1519+ 6A8B              //
1520+ 6A8B              //              ld      hl, 7
1521+ 6A8B              //              add     hl, sp
1522+ 6A8B              //              ld      d, (hl)
1523+ 6A8B              //              dec     hl
1524+ 6A8B              //              ld      e, (hl)             // d1-L
1525+ 6A8B              //              push    de
1526+ 6A8B              //              dec     hl
1527+ 6A8B              //              ld      d, (hl)
1528+ 6A8B              //              dec     hl
1529+ 6A8B              //              ld      e, (hl)             // d1-H
1530+ 6A8B              //              push    de
1531+ 6A8B              //              next
1532+ 6A8B
1533+ 6A8B              //  ______________________________________________________________________
1534+ 6A8B              //
1535+ 6A8B              // 2drop        d --
1536+ 6A8B              //              n1 n2 --
1537+ 6A8B              // drops the top double from stack
1538+ 6A8B                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1538+ 6A8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ 6A8B             >
1538+ 6A8B             >                // dummy db directives used to calculate length of namec
1538+ 6A8B 32 44 52 4F >                db      "2DROP"
1538+ 6A8F 50          >
1538+ 6A90             >len_NFA         defl    $ - temp_NFA
1538+ 6A90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ 6A8B             >
1538+ 6A8B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ 6A8C 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1538+ 6A90 50          >
1538+ 6A91             >                org     $-1                 // alter last byte of Name just above to set
1538+ 6A90 D0          >                db      {b $} | END_BIT     // msb as name end
1538+ 6A91             >
1538+ 6A91 7A 6A       >                dw      last_NFA            // Link to previous definition Name
1538+ 6A93             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 6A93 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 6A93 ~           >
1538+ 6A93 ~           >
1538+ 6A93             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 6A93             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 6A93             >
1538+ 6A93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 6A93 E1                           pop     hl
1540+ 6A94 E1                           pop     hl
1541+ 6A95                              next
1541+ 6A95 DD E9       >                jp      (ix)
1542+ 6A97
1543+ 6A97              //  ______________________________________________________________________
1544+ 6A97              //
1545+ 6A97              // 2nip         d1 d2 -- d2
1546+ 6A97              //              n1 n2 n3 n4 -- n3 n4
1547+ 6A97              // drops the second double on the stack
1548+ 6A97              //              New_Def TWO_NIP, 4, "2nip"
1549+ 6A97              //              ...
1550+ 6A97
1551+ 6A97              //  ______________________________________________________________________
1552+ 6A97              //
1553+ 6A97              // 2tuck         d1 d2 -- d2 d1 d2
1554+ 6A97              // copy the top element after the second.
1555+ 6A97              //              New_Def TWO_TUCK, 5, "2tuck"
1556+ 6A97              //              ...
1557+ 6A97
1558+ 6A97              //  ______________________________________________________________________
1559+ 6A97              //
1560+ 6A97              // 2swap         d1 d2 -- d2 d1
1561+ 6A97              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1562+ 6A97              // swaps the two doubles on top of stack
1563+ 6A97                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1563+ 6A97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ 6A97             >
1563+ 6A97             >                // dummy db directives used to calculate length of namec
1563+ 6A97 32 53 57 41 >                db      "2SWAP"
1563+ 6A9B 50          >
1563+ 6A9C             >len_NFA         defl    $ - temp_NFA
1563+ 6A9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ 6A97             >
1563+ 6A97 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ 6A98 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1563+ 6A9C 50          >
1563+ 6A9D             >                org     $-1                 // alter last byte of Name just above to set
1563+ 6A9C D0          >                db      {b $} | END_BIT     // msb as name end
1563+ 6A9D             >
1563+ 6A9D 8B 6A       >                dw      last_NFA            // Link to previous definition Name
1563+ 6A9F             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 6A9F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1563+ 6A9F ~           >
1563+ 6A9F ~           >
1563+ 6A9F             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 6A9F             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 6A9F             >
1563+ 6A9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 6A9F F1                           pop     af                  //   d2-H
1565+ 6AA0 E1                           pop     hl                  // < d2-L
1566+ 6AA1 D1                           pop     de                  // < d1-H
1567+ 6AA2 E3                           ex      (sp), hl            // < d1-L > d2-L
1568+ 6AA3 F5                           push    af                  // > d2-H
1569+ 6AA4 E5                           push    hl                  // > d1-L
1570+ 6AA5 D5                           push    de
1571+ 6AA6
1572+ 6AA6                              next
1572+ 6AA6 DD E9       >                jp      (ix)
1573+ 6AA8
1574+ 6AA8              //  ______________________________________________________________________
1575+ 6AA8              //
1576+ 6AA8              // 2dup         d -- d d
1577+ 6AA8              //              n1 n2 -- n1 n2 n1 n2
1578+ 6AA8              // duplicates the top double of stack
1579+ 6AA8                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1579+ 6AA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1579+ 6AA8             >
1579+ 6AA8             >                // dummy db directives used to calculate length of namec
1579+ 6AA8 32 44 55 50 >                db      "2DUP"
1579+ 6AAC             >len_NFA         defl    $ - temp_NFA
1579+ 6AAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1579+ 6AA8             >
1579+ 6AA8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1579+ 6AA9 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1579+ 6AAD             >                org     $-1                 // alter last byte of Name just above to set
1579+ 6AAC D0          >                db      {b $} | END_BIT     // msb as name end
1579+ 6AAD             >
1579+ 6AAD 97 6A       >                dw      last_NFA            // Link to previous definition Name
1579+ 6AAF             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1579+ 6AAF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1579+ 6AAF ~           >
1579+ 6AAF ~           >
1579+ 6AAF             >                endif           ; ok        // for other definitions it "points" the correct handler
1579+ 6AAF             >                // Use of "; ok" to suppress "warning[fwdref]"
1579+ 6AAF             >
1579+ 6AAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1580+ 6AAF E1                           pop     hl                  // < d-H
1581+ 6AB0 D1                           pop     de                  // < d-L
1582+ 6AB1 D5                           push    de                  // < d-L
1583+ 6AB2 E5                           push    hl                  // > d-H
1584+ 6AB3 D5                           push    de                  // > d-L
1585+ 6AB4 E5                           push    hl                  // > d-H
1586+ 6AB5                              next
1586+ 6AB5 DD E9       >                jp      (ix)
1587+ 6AB7
1588+ 6AB7              //  ______________________________________________________________________
1589+ 6AB7              //
1590+ 6AB7              // 2rot         d1 d2 d3 -- d2 d3 d1
1591+ 6AB7              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1592+ 6AB7              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1593+ 6AB7              // and putting it on top. The other two are shifted down one place.
1594+ 6AB7              //              New_Def TWO?ROT, 4, "2rot"
1595+ 6AB7              //              ...
1596+ 6AB7              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1597+ 6AB7              //
1598+ 6AB7              //      d3  |d2  |d1  |
1599+ 6AB7              //      h l |h l |h l |
1600+ 6AB7              // SP   LHED|LHED|LHED|
1601+ 6AB7              // SP  +0123|4567|89ab|
1602+ 6AB7              //              ld      hl, $000B
1603+ 6AB7              //              add     hl, sp
1604+ 6AB7              //              ld      d, (hl)
1605+ 6AB7              //              dec     hl
1606+ 6AB7              //              ld      e, (hl)
1607+ 6AB7              //              dec     hl
1608+ 6AB7              //              push    de
1609+ 6AB7              //              ld      d, (hl)
1610+ 6AB7              //              dec     hl
1611+ 6AB7              //              ld      e, (hl)
1612+ 6AB7              //              dec     hl
1613+ 6AB7              //              push    de
1614+ 6AB7
1615+ 6AB7              //      d1  |d3  |d2  |d1  |
1616+ 6AB7              //      h l |h l |h l |h l |
1617+ 6AB7              // SP   LHED|LHED|LHED|LHED|
1618+ 6AB7              // SP       +0123|4567|89ab|
1619+ 6AB7
1620+ 6AB7              //              ld      d, h
1621+ 6AB7              //              ld      e, l
1622+ 6AB7              //              inc     de
1623+ 6AB7              //              inc     de
1624+ 6AB7              //              inc     de
1625+ 6AB7              //              inc     de
1626+ 6AB7              //              push    bc
1627+ 6AB7              //              ld      bc, $000C
1628+ 6AB7              //              lddr
1629+ 6AB7              //              pop     bc
1630+ 6AB7              //              pop     de
1631+ 6AB7              //              pop     de
1632+ 6AB7              //
1633+ 6AB7              //              next
1634+ 6AB7
1635+ 6AB7
1636+ 6AB7              //  ______________________________________________________________________
1637+ 6AB7              //
1638+ 6AB7              // +!           n a --
1639+ 6AB7              // Sums to the content of address a the number n.
1640+ 6AB7              // It is the same of  a @ n + a !
1641+ 6AB7                              New_Def PLUSSTORE, "+!", is_code, is_normal
1641+ 6AB7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ 6AB7             >
1641+ 6AB7             >                // dummy db directives used to calculate length of namec
1641+ 6AB7 2B 21       >                db      "+!"
1641+ 6AB9             >len_NFA         defl    $ - temp_NFA
1641+ 6AB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ 6AB7             >
1641+ 6AB7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ 6AB8 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1641+ 6ABA             >                org     $-1                 // alter last byte of Name just above to set
1641+ 6AB9 A1          >                db      {b $} | END_BIT     // msb as name end
1641+ 6ABA             >
1641+ 6ABA A8 6A       >                dw      last_NFA            // Link to previous definition Name
1641+ 6ABC             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6ABC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1641+ 6ABC ~           >
1641+ 6ABC ~           >
1641+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6ABC             >
1641+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6ABC E1                           pop     hl                  // hl is the address
1643+ 6ABD D1                           pop     de                  // de is the number
1644+ 6ABE 7E                           ld      a, (hl)
1645+ 6ABF 83                           add     e
1646+ 6AC0 77                           ld      (hl), a
1647+ 6AC1 23                           inc     hl
1648+ 6AC2 7E                           ld      a, (hl)
1649+ 6AC3 8A                           adc     d
1650+ 6AC4 77                           ld      (hl), a
1651+ 6AC5
1652+ 6AC5                              next
1652+ 6AC5 DD E9       >                jp      (ix)
1653+ 6AC7
1654+ 6AC7              //  ______________________________________________________________________
1655+ 6AC7              //
1656+ 6AC7              // toggle       a n --
1657+ 6AC7              // Complements (xor) the byte at addrress  a  with the model n.
1658+ 6AC7                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1658+ 6AC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1658+ 6AC7             >
1658+ 6AC7             >                // dummy db directives used to calculate length of namec
1658+ 6AC7 54 4F 47 47 >                db      "TOGGLE"
1658+ 6ACB 4C 45       >
1658+ 6ACD             >len_NFA         defl    $ - temp_NFA
1658+ 6ACD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1658+ 6AC7             >
1658+ 6AC7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1658+ 6AC8 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1658+ 6ACC 4C 45       >
1658+ 6ACE             >                org     $-1                 // alter last byte of Name just above to set
1658+ 6ACD C5          >                db      {b $} | END_BIT     // msb as name end
1658+ 6ACE             >
1658+ 6ACE B7 6A       >                dw      last_NFA            // Link to previous definition Name
1658+ 6AD0             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1658+ 6AD0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1658+ 6AD0 ~           >
1658+ 6AD0 ~           >
1658+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1658+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1658+ 6AD0             >
1658+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1659+ 6AD0 D1                           pop     de
1660+ 6AD1 E1                           pop     hl
1661+ 6AD2 7E                           ld      a, (hl)
1662+ 6AD3 AB                           xor     e
1663+ 6AD4 77                           ld      (hl), a
1664+ 6AD5
1665+ 6AD5                              next
1665+ 6AD5 DD E9       >                jp      (ix)
1666+ 6AD7
1667+ 6AD7              //  ______________________________________________________________________
1668+ 6AD7              //
1669+ 6AD7              // @            a -- n
1670+ 6AD7              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1671+ 6AD7                              New_Def FETCH, "@", is_code, is_normal
1671+ 6AD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1671+ 6AD7             >
1671+ 6AD7             >                // dummy db directives used to calculate length of namec
1671+ 6AD7 40          >                db      "@"
1671+ 6AD8             >len_NFA         defl    $ - temp_NFA
1671+ 6AD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1671+ 6AD7             >
1671+ 6AD7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1671+ 6AD8 40          >                db      "@"               // name string in 7-bit ascii, but
1671+ 6AD9             >                org     $-1                 // alter last byte of Name just above to set
1671+ 6AD8 C0          >                db      {b $} | END_BIT     // msb as name end
1671+ 6AD9             >
1671+ 6AD9 C7 6A       >                dw      last_NFA            // Link to previous definition Name
1671+ 6ADB             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1671+ 6ADB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1671+ 6ADB ~           >
1671+ 6ADB ~           >
1671+ 6ADB             >                endif           ; ok        // for other definitions it "points" the correct handler
1671+ 6ADB             >                // Use of "; ok" to suppress "warning[fwdref]"
1671+ 6ADB             >
1671+ 6ADB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1672+ 6ADB E1                           pop     hl
1673+ 6ADC 5E                           ld      e, (hl)             // low-byte
1674+ 6ADD 23                           inc     hl
1675+ 6ADE 56                           ld      d, (hl)             // high-byte
1676+ 6ADF D5                           push    de
1677+ 6AE0                              next
1677+ 6AE0 DD E9       >                jp      (ix)
1678+ 6AE2
1679+ 6AE2              //  ______________________________________________________________________
1680+ 6AE2              //
1681+ 6AE2              // !            n a --
1682+ 6AE2              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1683+ 6AE2                              New_Def STORE, "!", is_code, is_normal
1683+ 6AE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ 6AE2             >
1683+ 6AE2             >                // dummy db directives used to calculate length of namec
1683+ 6AE2 21          >                db      "!"
1683+ 6AE3             >len_NFA         defl    $ - temp_NFA
1683+ 6AE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ 6AE2             >
1683+ 6AE2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ 6AE3 21          >                db      "!"               // name string in 7-bit ascii, but
1683+ 6AE4             >                org     $-1                 // alter last byte of Name just above to set
1683+ 6AE3 A1          >                db      {b $} | END_BIT     // msb as name end
1683+ 6AE4             >
1683+ 6AE4 D7 6A       >                dw      last_NFA            // Link to previous definition Name
1683+ 6AE6             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 6AE6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1683+ 6AE6 ~           >
1683+ 6AE6 ~           >
1683+ 6AE6             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 6AE6             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 6AE6             >
1683+ 6AE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 6AE6 E1                           pop     hl                  // address
1685+ 6AE7 D1                           pop     de                  // < n
1686+ 6AE8 73                           ld      (hl), e             // low-byte
1687+ 6AE9 23                           inc     hl
1688+ 6AEA 72                           ld      (hl), d             // high-byte
1689+ 6AEB
1690+ 6AEB                              next
1690+ 6AEB DD E9       >                jp      (ix)
1691+ 6AED
1692+ 6AED              //  ______________________________________________________________________
1693+ 6AED              //
1694+ 6AED              // c@           a -- c
1695+ 6AED              // fetch a character n from address a
1696+ 6AED                              New_Def CFETCH, "C@", is_code, is_normal
1696+ 6AED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6AED             >
1696+ 6AED             >                // dummy db directives used to calculate length of namec
1696+ 6AED 43 40       >                db      "C@"
1696+ 6AEF             >len_NFA         defl    $ - temp_NFA
1696+ 6AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6AED             >
1696+ 6AED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6AEE 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1696+ 6AF0             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6AEF C0          >                db      {b $} | END_BIT     // msb as name end
1696+ 6AF0             >
1696+ 6AF0 E2 6A       >                dw      last_NFA            // Link to previous definition Name
1696+ 6AF2             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6AF2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 6AF2 ~           >
1696+ 6AF2 ~           >
1696+ 6AF2             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6AF2             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6AF2             >
1696+ 6AF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6AF2 E1                           pop     hl
1698+ 6AF3 6E                           ld      l, (hl)             // low-byte
1699+ 6AF4 26 00                        ld      h, 0
1700+ 6AF6
1701+ 6AF6                              psh1
1701+ 6AF6 E5          >                push    hl
1701+ 6AF7 DD E9       >                jp      (ix)
1702+ 6AF9
1703+ 6AF9              //  ______________________________________________________________________
1704+ 6AF9              //
1705+ 6AF9              // c!           c a --
1706+ 6AF9              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1707+ 6AF9                              New_Def CSTORE, "C!", is_code, is_normal
1707+ 6AF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1707+ 6AF9             >
1707+ 6AF9             >                // dummy db directives used to calculate length of namec
1707+ 6AF9 43 21       >                db      "C!"
1707+ 6AFB             >len_NFA         defl    $ - temp_NFA
1707+ 6AFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1707+ 6AF9             >
1707+ 6AF9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1707+ 6AFA 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1707+ 6AFC             >                org     $-1                 // alter last byte of Name just above to set
1707+ 6AFB A1          >                db      {b $} | END_BIT     // msb as name end
1707+ 6AFC             >
1707+ 6AFC ED 6A       >                dw      last_NFA            // Link to previous definition Name
1707+ 6AFE             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1707+ 6AFE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1707+ 6AFE ~           >
1707+ 6AFE ~           >
1707+ 6AFE             >                endif           ; ok        // for other definitions it "points" the correct handler
1707+ 6AFE             >                // Use of "; ok" to suppress "warning[fwdref]"
1707+ 6AFE             >
1707+ 6AFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1708+ 6AFE E1                           pop     hl                  // < address
1709+ 6AFF D1                           pop     de
1710+ 6B00 73                           ld      (hl), e             // low-byte
1711+ 6B01
1712+ 6B01                              next
1712+ 6B01 DD E9       >                jp      (ix)
1713+ 6B03
1714+ 6B03              //  ______________________________________________________________________
1715+ 6B03              //
1716+ 6B03              // 2@           a -- d
1717+ 6B03              // fetch a 32 bits number d from address a and leaves it on top of the
1718+ 6B03              // stack as two single numbers, high part as top of the stack.
1719+ 6B03              // A double number is normally kept in CPU registers as HLDE.
1720+ 6B03              // On stack a double number is treated as two single numbers
1721+ 6B03              // where BC is on the top of the stack and HL is the second from top,
1722+ 6B03              // so the sign of the number can be checked on top of stack
1723+ 6B03              // and in the stack memory it appears as LHED.
1724+ 6B03                              New_Def TWO_FETCH, "2@", is_code, is_normal
1724+ 6B03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1724+ 6B03             >
1724+ 6B03             >                // dummy db directives used to calculate length of namec
1724+ 6B03 32 40       >                db      "2@"
1724+ 6B05             >len_NFA         defl    $ - temp_NFA
1724+ 6B05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1724+ 6B03             >
1724+ 6B03 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1724+ 6B04 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1724+ 6B06             >                org     $-1                 // alter last byte of Name just above to set
1724+ 6B05 C0          >                db      {b $} | END_BIT     // msb as name end
1724+ 6B06             >
1724+ 6B06 F9 6A       >                dw      last_NFA            // Link to previous definition Name
1724+ 6B08             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1724+ 6B08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1724+ 6B08 ~           >
1724+ 6B08 ~           >
1724+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
1724+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
1724+ 6B08             >
1724+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1725+ 6B08 E1                           pop     hl                  // address
1726+ 6B09 5E                           ld      e, (hl)             // low-byte
1727+ 6B0A 23                           inc     hl
1728+ 6B0B 56                           ld      d, (hl)             // high-byte
1729+ 6B0C 23                           inc     hl
1730+ 6B0D 7E                           ld      a, (hl)             // low-byte
1731+ 6B0E 23                           inc     hl
1732+ 6B0F 66                           ld      h, (hl)             // high-byte
1733+ 6B10 6F                           ld      l, a
1734+ 6B11 E5                           push    hl
1735+ 6B12 D5                           push    de
1736+ 6B13                              next
1736+ 6B13 DD E9       >                jp      (ix)
1737+ 6B15
1738+ 6B15              //  ______________________________________________________________________
1739+ 6B15              //
1740+ 6B15              // 2!           d a --
1741+ 6B15              // stores a 32 bits number d from address a and leaves it on top of the
1742+ 6B15              // stack as two single numbers, high part as top of the stack.
1743+ 6B15              // A double number is normally kept in CPU registers as HLDE.
1744+ 6B15              // On stack a double number is treated as two single numbers
1745+ 6B15              // where BC is on the top of the stack and HL is the second from top,
1746+ 6B15              // so the sign of the number can be checked on top of stack
1747+ 6B15              // and in the stack memory it appears as LHED.
1748+ 6B15                              New_Def TWO_STORE, "2!", is_code, is_normal
1748+ 6B15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1748+ 6B15             >
1748+ 6B15             >                // dummy db directives used to calculate length of namec
1748+ 6B15 32 21       >                db      "2!"
1748+ 6B17             >len_NFA         defl    $ - temp_NFA
1748+ 6B17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1748+ 6B15             >
1748+ 6B15 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1748+ 6B16 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1748+ 6B18             >                org     $-1                 // alter last byte of Name just above to set
1748+ 6B17 A1          >                db      {b $} | END_BIT     // msb as name end
1748+ 6B18             >
1748+ 6B18 03 6B       >                dw      last_NFA            // Link to previous definition Name
1748+ 6B1A             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1748+ 6B1A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1748+ 6B1A ~           >
1748+ 6B1A ~           >
1748+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
1748+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
1748+ 6B1A             >
1748+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1749+ 6B1A D9                           exx
1750+ 6B1B E1                           pop     hl                  // address
1751+ 6B1C C1                           pop     bc                  // < high-part
1752+ 6B1D D1                           pop     de                  // < low-part > Instruction Pointer
1753+ 6B1E 71                           ld      (hl), c
1754+ 6B1F 23                           inc     hl
1755+ 6B20 70                           ld      (hl), b
1756+ 6B21 23                           inc     hl
1757+ 6B22 73                           ld      (hl), e
1758+ 6B23 23                           inc     hl
1759+ 6B24 72                           ld      (hl), d
1760+ 6B25 D9                           exx
1761+ 6B26                              next
1761+ 6B26 DD E9       >                jp      (ix)
1762+ 6B28
1763+ 6B28              //  ______________________________________________________________________
1764+ 6B28              //
1765+ 6B28              // p@           a -- c
1766+ 6B28              // Read one byte from port a and leave the result on top of stack
1767+ 6B28                              New_Def PFETCH, "P@", is_code, is_normal
1767+ 6B28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1767+ 6B28             >
1767+ 6B28             >                // dummy db directives used to calculate length of namec
1767+ 6B28 50 40       >                db      "P@"
1767+ 6B2A             >len_NFA         defl    $ - temp_NFA
1767+ 6B2A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1767+ 6B28             >
1767+ 6B28 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1767+ 6B29 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1767+ 6B2B             >                org     $-1                 // alter last byte of Name just above to set
1767+ 6B2A C0          >                db      {b $} | END_BIT     // msb as name end
1767+ 6B2B             >
1767+ 6B2B 15 6B       >                dw      last_NFA            // Link to previous definition Name
1767+ 6B2D             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1767+ 6B2D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1767+ 6B2D ~           >
1767+ 6B2D ~           >
1767+ 6B2D             >                endif           ; ok        // for other definitions it "points" the correct handler
1767+ 6B2D             >                // Use of "; ok" to suppress "warning[fwdref]"
1767+ 6B2D             >
1767+ 6B2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1768+ 6B2D D9                           exx
1769+ 6B2E C1                           pop     bc
1770+ 6B2F 26 00                        ld      h, 0
1771+ 6B31 ED 68                        in      l, (c)
1772+ 6B33 E5                           push    hl
1773+ 6B34 D9                           exx
1774+ 6B35                              next
1774+ 6B35 DD E9       >                jp      (ix)
1775+ 6B37
1776+ 6B37              //  ______________________________________________________________________
1777+ 6B37              //
1778+ 6B37              // p!           c a --
1779+ 6B37              // Send one byte (top of stack) to port a
1780+ 6B37                              New_Def PSTORE, "P!", is_code, is_normal
1780+ 6B37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1780+ 6B37             >
1780+ 6B37             >                // dummy db directives used to calculate length of namec
1780+ 6B37 50 21       >                db      "P!"
1780+ 6B39             >len_NFA         defl    $ - temp_NFA
1780+ 6B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1780+ 6B37             >
1780+ 6B37 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1780+ 6B38 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1780+ 6B3A             >                org     $-1                 // alter last byte of Name just above to set
1780+ 6B39 A1          >                db      {b $} | END_BIT     // msb as name end
1780+ 6B3A             >
1780+ 6B3A 28 6B       >                dw      last_NFA            // Link to previous definition Name
1780+ 6B3C             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1780+ 6B3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1780+ 6B3C ~           >
1780+ 6B3C ~           >
1780+ 6B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
1780+ 6B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
1780+ 6B3C             >
1780+ 6B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1781+ 6B3C D9                           exx
1782+ 6B3D C1                           pop     bc
1783+ 6B3E E1                           pop     hl                  // < c
1784+ 6B3F ED 69                        out     (c), l              // low-byte
1785+ 6B41 D9                           exx
1786+ 6B42                              next
1786+ 6B42 DD E9       >                jp      (ix)
1787+ 6B44
1788+ 6B44
1789+ 6B44              //  ______________________________________________________________________
1790+ 6B44              //
1791+ 6B44              // 2*           n1 -- n2
1792+ 6B44              // doubles the number at top of stack
1793+ 6B44                              New_Def TWO_MUL, "2*", is_code, is_normal
1793+ 6B44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ 6B44             >
1793+ 6B44             >                // dummy db directives used to calculate length of namec
1793+ 6B44 32 2A       >                db      "2*"
1793+ 6B46             >len_NFA         defl    $ - temp_NFA
1793+ 6B46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ 6B44             >
1793+ 6B44 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ 6B45 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1793+ 6B47             >                org     $-1                 // alter last byte of Name just above to set
1793+ 6B46 AA          >                db      {b $} | END_BIT     // msb as name end
1793+ 6B47             >
1793+ 6B47 37 6B       >                dw      last_NFA            // Link to previous definition Name
1793+ 6B49             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6B49 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1793+ 6B49 ~           >
1793+ 6B49 ~           >
1793+ 6B49             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6B49             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6B49             >
1793+ 6B49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6B49              Two_Mul_Ptr:
1795+ 6B49 E1                           pop     hl
1796+ 6B4A 29                           add     hl, hl
1797+ 6B4B
1798+ 6B4B                              psh1
1798+ 6B4B E5          >                push    hl
1798+ 6B4C DD E9       >                jp      (ix)
1799+ 6B4E
1800+ 6B4E              //  ______________________________________________________________________
1801+ 6B4E              //
1802+ 6B4E              // 2/           n1 -- n2
1803+ 6B4E              // halves the top of stack, sign is unchanged
1804+ 6B4E                              New_Def TWO_DIV, "2/", is_code, is_normal
1804+ 6B4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1804+ 6B4E             >
1804+ 6B4E             >                // dummy db directives used to calculate length of namec
1804+ 6B4E 32 2F       >                db      "2/"
1804+ 6B50             >len_NFA         defl    $ - temp_NFA
1804+ 6B50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1804+ 6B4E             >
1804+ 6B4E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1804+ 6B4F 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1804+ 6B51             >                org     $-1                 // alter last byte of Name just above to set
1804+ 6B50 AF          >                db      {b $} | END_BIT     // msb as name end
1804+ 6B51             >
1804+ 6B51 44 6B       >                dw      last_NFA            // Link to previous definition Name
1804+ 6B53             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1804+ 6B53 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1804+ 6B53 ~           >
1804+ 6B53 ~           >
1804+ 6B53             >                endif           ; ok        // for other definitions it "points" the correct handler
1804+ 6B53             >                // Use of "; ok" to suppress "warning[fwdref]"
1804+ 6B53             >
1804+ 6B53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1805+ 6B53 E1                           pop     hl
1806+ 6B54 CB 2C                        sra     h
1807+ 6B56 CB 1D                        rr      l
1808+ 6B58
1809+ 6B58                              psh1
1809+ 6B58 E5          >                push    hl
1809+ 6B59 DD E9       >                jp      (ix)
1810+ 6B5B
1811+ 6B5B              //  ______________________________________________________________________
1812+ 6B5B              //
1813+ 6B5B              // lshift       n1 u -- n2
1814+ 6B5B              // bit left shift of u bits
1815+ 6B5B                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1815+ 6B5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1815+ 6B5B             >
1815+ 6B5B             >                // dummy db directives used to calculate length of namec
1815+ 6B5B 4C 53 48 49 >                db      "LSHIFT"
1815+ 6B5F 46 54       >
1815+ 6B61             >len_NFA         defl    $ - temp_NFA
1815+ 6B61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1815+ 6B5B             >
1815+ 6B5B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1815+ 6B5C 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1815+ 6B60 46 54       >
1815+ 6B62             >                org     $-1                 // alter last byte of Name just above to set
1815+ 6B61 D4          >                db      {b $} | END_BIT     // msb as name end
1815+ 6B62             >
1815+ 6B62 4E 6B       >                dw      last_NFA            // Link to previous definition Name
1815+ 6B64             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1815+ 6B64 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1815+ 6B64 ~           >
1815+ 6B64 ~           >
1815+ 6B64             >                endif           ; ok        // for other definitions it "points" the correct handler
1815+ 6B64             >                // Use of "; ok" to suppress "warning[fwdref]"
1815+ 6B64             >
1815+ 6B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1816+ 6B64 D1                           pop     de
1817+ 6B65
1818+ 6B65 E1                           pop     hl
1819+ 6B66 7B                           ld      a, e
1820+ 6B67 B7                           or      a
1821+ 6B68 28 04                        jr      z, Lshift_Zero
1822+ 6B6A              Lshift_Loop:
1823+ 6B6A 29                                   add     hl, hl
1824+ 6B6B 3D                                   dec     a
1825+ 6B6C 20 FC                            jr      nz, Lshift_Loop
1826+ 6B6E              Lshift_Zero:
1827+ 6B6E
1828+ 6B6E
1829+ 6B6E                              psh1
1829+ 6B6E E5          >                push    hl
1829+ 6B6F DD E9       >                jp      (ix)
1830+ 6B71
1831+ 6B71              //  ______________________________________________________________________
1832+ 6B71              //
1833+ 6B71              // rshift       n1 u -- n2
1834+ 6B71              // bit right shift of u bits
1835+ 6B71                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1835+ 6B71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1835+ 6B71             >
1835+ 6B71             >                // dummy db directives used to calculate length of namec
1835+ 6B71 52 53 48 49 >                db      "RSHIFT"
1835+ 6B75 46 54       >
1835+ 6B77             >len_NFA         defl    $ - temp_NFA
1835+ 6B77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1835+ 6B71             >
1835+ 6B71 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1835+ 6B72 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1835+ 6B76 46 54       >
1835+ 6B78             >                org     $-1                 // alter last byte of Name just above to set
1835+ 6B77 D4          >                db      {b $} | END_BIT     // msb as name end
1835+ 6B78             >
1835+ 6B78 5B 6B       >                dw      last_NFA            // Link to previous definition Name
1835+ 6B7A             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1835+ 6B7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1835+ 6B7A ~           >
1835+ 6B7A ~           >
1835+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1835+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1835+ 6B7A             >
1835+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1836+ 6B7A D1                           pop     de
1837+ 6B7B
1838+ 6B7B E1                           pop     hl
1839+ 6B7C 7B                           ld      a, e
1840+ 6B7D B7                           or      a
1841+ 6B7E 28 07                        jr      z, Rshift_Zero
1842+ 6B80              Rshift_Loop:
1843+ 6B80 CB 3C                                srl     h
1844+ 6B82 CB 1D                                rr      l
1845+ 6B84 3D                                   dec     a
1846+ 6B85 20 F9                            jr      nz, Rshift_Loop
1847+ 6B87              Rshift_Zero:
1848+ 6B87
1849+ 6B87
1850+ 6B87                              psh1
1850+ 6B87 E5          >                push    hl
1850+ 6B88 DD E9       >                jp      (ix)
1851+ 6B8A
1852+ 6B8A              //  ______________________________________________________________________
1853+ 6B8A              //
1854+ 6B8A              // cells        n1 -- n2
1855+ 6B8A              // decrement by 2 top of stack
1856+ 6B8A                              New_Def CELLS, "CELLS", is_code, is_normal
1856+ 6B8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1856+ 6B8A             >
1856+ 6B8A             >                // dummy db directives used to calculate length of namec
1856+ 6B8A 43 45 4C 4C >                db      "CELLS"
1856+ 6B8E 53          >
1856+ 6B8F             >len_NFA         defl    $ - temp_NFA
1856+ 6B8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1856+ 6B8A             >
1856+ 6B8A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1856+ 6B8B 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1856+ 6B8F 53          >
1856+ 6B90             >                org     $-1                 // alter last byte of Name just above to set
1856+ 6B8F D3          >                db      {b $} | END_BIT     // msb as name end
1856+ 6B90             >
1856+ 6B90 71 6B       >                dw      last_NFA            // Link to previous definition Name
1856+ 6B92             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1856+ 6B92 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1856+ 6B92 ~           >
1856+ 6B92 ~           >
1856+ 6B92             >                endif           ; ok        // for other definitions it "points" the correct handler
1856+ 6B92             >                // Use of "; ok" to suppress "warning[fwdref]"
1856+ 6B92             >
1856+ 6B92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1857+ 6B92 C3 49 6B                     jp      Two_Mul_Ptr
1858+ 6B95
1859+ 6B95
1860+ 6B95              //  ______________________________________________________________________
1861+ 6B95
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6B95                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6B95              //  ______________________________________________________________________
   2+ 6B95              //
   3+ 6B95              //  L1.asm
   4+ 6B95              //
   5+ 6B95              //  Level-1 definitions and derivate
   6+ 6B95              //  ______________________________________________________________________
   7+ 6B95
   8+ 6B95              //  ______________________________________________________________________
   9+ 6B95              //
  10+ 6B95              // :            -- cccc     ( compile time )
  11+ 6B95              //              i*x -- j*x  ( run time )
  12+ 6B95              // Colon Definition
  13+ 6B95                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6B95             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6B95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6B95             >
  13+ 6B95             >                // dummy db directives used to calculate length of namec
  13+ 6B95 3A          >                db      ":"
  13+ 6B96             >len_NFA         defl    $ - temp_NFA
  13+ 6B96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6B95             >
  13+ 6B95 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6B96 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6B97             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6B96 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6B97             >
  13+ 6B97 8A 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6B99             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6B99 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6B9C             >
  13+ 6B9C             >
  13+ 6B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6B9C             >
  13+ 6B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6B9C
  15+ 6B9C 44 70                        dw      QEXEC                   // ?exec
  16+ 6B9E FC 6F                        dw      STORE_CSP               // !csp
  17+ 6BA0 87 6D DB 6A                  dw      CURRENT, FETCH          // current @
  18+ 6BA4 79 6D E6 6A                  dw      CONTEXT, STORE          // context !
  19+ 6BA8 6D 76                        dw      CREATE                  // create  ( forward )
  20+ 6BAA F9 70                        dw      SMUDGE                  // dmudge
  21+ 6BAC E3 70                        dw      SQUARED_CLOSE           // ]
  22+ 6BAE 53 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BB0                                                              // ... immediate
  24+ 6BB0              Enter_Ptr:
  25+ 6BB0                              // via call coded in CFA
  26+ 6BB0                              ldhlrp
  26+ 6BB0 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BB3 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BB4 70                           ld      (hl), b
  29+ 6BB5 2B                           dec     hl
  30+ 6BB6 71                           ld      (hl), c
  31+ 6BB7                              ldrphl
  31+ 6BB7 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BBA
  33+ 6BBA
  34+ 6BBA C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BBB                              next
  35+ 6BBB DD E9       >                jp      (ix)
  36+ 6BBD
  37+ 6BBD              //  ______________________________________________________________________
  38+ 6BBD              //
  39+ 6BBD              // ;            --
  40+ 6BBD              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BBD                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BBD             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BBD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BBD             >
  41+ 6BBD             >                // dummy db directives used to calculate length of namec
  41+ 6BBD 3B          >                db      ";"
  41+ 6BBE             >len_NFA         defl    $ - temp_NFA
  41+ 6BBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BBD             >
  41+ 6BBD C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BBE 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BBF             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BBE BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BBF             >
  41+ 6BBF 95 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BC1             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BC1 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BC4             >
  41+ 6BC4             >
  41+ 6BC4             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BC4             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BC4             >
  41+ 6BC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BC4
  43+ 6BC4 70 70                        dw      QCSP                    // ?csp
  44+ 6BC6 A9 70 F7 68                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BCA F9 70                        dw      SMUDGE                  // smudge
  46+ 6BCC D4 70                        dw      SQUARED_OPEN            // [
  47+ 6BCE F7 68                        dw      EXIT                    // ; immediate
  48+ 6BD0
  49+ 6BD0              //  ______________________________________________________________________
  50+ 6BD0              //
  51+ 6BD0              // noop         --
  52+ 6BD0
  53+ 6BD0                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6BD0             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6BD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BD0             >
  53+ 6BD0             >                // dummy db directives used to calculate length of namec
  53+ 6BD0 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BD4             >len_NFA         defl    $ - temp_NFA
  53+ 6BD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BD0             >
  53+ 6BD0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BD1 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BD5             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BD4 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BD5             >
  53+ 6BD5 BD 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BD7             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BD7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6BDA             >
  53+ 6BDA             >
  53+ 6BDA             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BDA             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BDA             >
  53+ 6BDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BDA F7 68                        dw      EXIT
  55+ 6BDC
  56+ 6BDC              //  ______________________________________________________________________
  57+ 6BDC              //
  58+ 6BDC              // constant     n -- cccc     ( compile time )
  59+ 6BDC              //              -- n          ( run time )
  60+ 6BDC              // Constant definition.
  61+ 6BDC                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BDC             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BDC             >
  61+ 6BDC             >                // dummy db directives used to calculate length of namec
  61+ 6BDC 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6BE0 54 41 4E 54 >
  61+ 6BE4             >len_NFA         defl    $ - temp_NFA
  61+ 6BE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BDC             >
  61+ 6BDC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BDD 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6BE1 54 41 4E 54 >
  61+ 6BE5             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6BE4 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6BE5             >
  61+ 6BE5 D0 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6BE7             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6BE7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6BEA             >
  61+ 6BEA             >
  61+ 6BEA             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6BEA             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6BEA             >
  61+ 6BEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6BEA
  63+ 6BEA 6D 76                        dw      CREATE                  // create
  64+ 6BEC 54 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6BEE 53 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6BF0              Constant_Ptr:
  67+ 6BF0
  68+ 6BF0
  69+ 6BF0 E1                           pop     hl
  70+ 6BF1
  71+ 6BF1 5E                           ld      e, (hl)
  72+ 6BF2 23                           inc     hl
  73+ 6BF3 56                           ld      d, (hl)
  74+ 6BF4 D5                           push    de
  75+ 6BF5                              next
  75+ 6BF5 DD E9       >                jp      (ix)
  76+ 6BF7
  77+ 6BF7              //  ______________________________________________________________________
  78+ 6BF7              //
  79+ 6BF7              // variable     n -- cccc     ( compile time )
  80+ 6BF7              //              -- a          ( run time )
  81+ 6BF7              // Variable definition, n is the initial value.
  82+ 6BF7                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6BF7             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6BF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6BF7             >
  82+ 6BF7             >                // dummy db directives used to calculate length of namec
  82+ 6BF7 56 41 52 49 >                db      "VARIABLE"
  82+ 6BFB 41 42 4C 45 >
  82+ 6BFF             >len_NFA         defl    $ - temp_NFA
  82+ 6BFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6BF7             >
  82+ 6BF7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6BF8 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6BFC 41 42 4C 45 >
  82+ 6C00             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6BFF C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C00             >
  82+ 6C00 DC 6B       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C02             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C02 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C05             >
  82+ 6C05             >
  82+ 6C05             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C05             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C05             >
  82+ 6C05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C05
  84+ 6C05 2C 6C                        dw      ZERO
  85+ 6C07 E7 6B                        dw      CONSTANT                // constant
  86+ 6C09 53 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C0B              Variable_Ptr:
  88+ 6C0B
  89+ 6C0B
  90+ 6C0B
  91+ 6C0B
  92+ 6C0B                              next
  92+ 6C0B DD E9       >                jp      (ix)
  93+ 6C0D
  94+ 6C0D              //  ______________________________________________________________________
  95+ 6C0D              //
  96+ 6C0D              // user         b -- cccc     ( compile time )
  97+ 6C0D              //              -- a          ( run time )
  98+ 6C0D              // User variable definition
  99+ 6C0D                              Colon_Def USER, "USER", is_normal
  99+ 6C0D             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C0D             >
  99+ 6C0D             >                // dummy db directives used to calculate length of namec
  99+ 6C0D 55 53 45 52 >                db      "USER"
  99+ 6C11             >len_NFA         defl    $ - temp_NFA
  99+ 6C11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C0D             >
  99+ 6C0D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C0E 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C12             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C11 D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C12             >
  99+ 6C12 F7 6B       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C14             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C14 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C17             >
  99+ 6C17             >
  99+ 6C17             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C17             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C17             >
  99+ 6C17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C17
 101+ 6C17 6D 76                        dw      CREATE                  // create
 102+ 6C19 66 6E                        dw      CCOMMA                  // c,
 103+ 6C1B 53 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C1D
 105+ 6C1D
 106+ 6C1D              User_Ptr:
 107+ 6C1D                              // via call coded in CFA
 108+ 6C1D E1                           pop     hl
 109+ 6C1E
 110+ 6C1E 5E                           ld      e, (hl)
 111+ 6C1F 16 00                        ld      d, 0
 112+ 6C21 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C24 19                           add     hl, de
 114+ 6C25
 115+ 6C25                              psh1
 115+ 6C25 E5          >                push    hl
 115+ 6C26 DD E9       >                jp      (ix)
 116+ 6C28
 117+ 6C28              //  ______________________________________________________________________
 118+ 6C28              //
 119+ 6C28                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C28             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C28             >
 119+ 6C28             >                // dummy db directives used to calculate length of namec
 119+ 6C28 30          >                db      "0"
 119+ 6C29             >len_NFA         defl    $ - temp_NFA
 119+ 6C29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C28             >
 119+ 6C28 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C29 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C2A             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C29 B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C2A             >
 119+ 6C2A 0D 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C2C             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C2C CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C2F             >
 119+ 6C2F             >
 119+ 6C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C2F             >
 119+ 6C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C2F 00 00       >                dw      0
 120+ 6C31                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C31             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C31             >
 120+ 6C31             >                // dummy db directives used to calculate length of namec
 120+ 6C31 31          >                db      "1"
 120+ 6C32             >len_NFA         defl    $ - temp_NFA
 120+ 6C32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C31             >
 120+ 6C31 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C32 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C33             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C32 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C33             >
 120+ 6C33 28 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C35             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C35 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C38             >
 120+ 6C38             >
 120+ 6C38             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C38             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C38             >
 120+ 6C38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C38 01 00       >                dw      1
 121+ 6C3A                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C3A             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C3A             >
 121+ 6C3A             >                // dummy db directives used to calculate length of namec
 121+ 6C3A 32          >                db      "2"
 121+ 6C3B             >len_NFA         defl    $ - temp_NFA
 121+ 6C3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C3A             >
 121+ 6C3A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C3B 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C3C             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C3B B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C3C             >
 121+ 6C3C 31 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C3E             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C3E CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C41             >
 121+ 6C41             >
 121+ 6C41             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C41             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C41             >
 121+ 6C41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C41 02 00       >                dw      2
 122+ 6C43                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C43             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C43             >
 122+ 6C43             >                // dummy db directives used to calculate length of namec
 122+ 6C43 33          >                db      "3"
 122+ 6C44             >len_NFA         defl    $ - temp_NFA
 122+ 6C44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C43             >
 122+ 6C43 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C44 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C45             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C44 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C45             >
 122+ 6C45 3A 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C47             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C47 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C4A             >
 122+ 6C4A             >
 122+ 6C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C4A             >
 122+ 6C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C4A 03 00       >                dw      3
 123+ 6C4C                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C4C             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C4C             >
 123+ 6C4C             >                // dummy db directives used to calculate length of namec
 123+ 6C4C 2D 31       >                db      "-1"
 123+ 6C4E             >len_NFA         defl    $ - temp_NFA
 123+ 6C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C4C             >
 123+ 6C4C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C4D 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C4F             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C4E B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C4F             >
 123+ 6C4F 43 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C51             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C51 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C54             >
 123+ 6C54             >
 123+ 6C54             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C54             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C54             >
 123+ 6C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C54 FF FF       >                dw      -1
 124+ 6C56                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C56             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C56             >
 124+ 6C56             >                // dummy db directives used to calculate length of namec
 124+ 6C56 42 4C       >                db      "BL"
 124+ 6C58             >len_NFA         defl    $ - temp_NFA
 124+ 6C58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C56             >
 124+ 6C56 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C57 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C59             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C58 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C59             >
 124+ 6C59 4C 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C5B             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C5B CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C5E             >
 124+ 6C5E             >
 124+ 6C5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C5E             >
 124+ 6C5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C5E 20 00       >                dw      $20
 125+ 6C60                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C60             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C60             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C60             >
 125+ 6C60             >                // dummy db directives used to calculate length of namec
 125+ 6C60 43 2F 4C    >                db      "C/L"
 125+ 6C63             >len_NFA         defl    $ - temp_NFA
 125+ 6C63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C60             >
 125+ 6C60 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C61 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C64             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C63 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C64             >
 125+ 6C64 56 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C66             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C66 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C69             >
 125+ 6C69             >
 125+ 6C69             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C69             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C69             >
 125+ 6C69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C69 40 00       >                dw      64
 126+ 6C6B                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C6B             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C6B             >
 126+ 6C6B             >                // dummy db directives used to calculate length of namec
 126+ 6C6B 42 2F 42 55 >                db      "B/BUF"
 126+ 6C6F 46          >
 126+ 6C70             >len_NFA         defl    $ - temp_NFA
 126+ 6C70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C6B             >
 126+ 6C6B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C6C 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6C70 46          >
 126+ 6C71             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C70 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C71             >
 126+ 6C71 60 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C73             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C73 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C76             >
 126+ 6C76             >
 126+ 6C76             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C76             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C76             >
 126+ 6C76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C76 00 02       >                dw      512
 127+ 6C78                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6C78             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6C78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C78             >
 127+ 6C78             >                // dummy db directives used to calculate length of namec
 127+ 6C78 42 2F 53 43 >                db      "B/SCR"
 127+ 6C7C 52          >
 127+ 6C7D             >len_NFA         defl    $ - temp_NFA
 127+ 6C7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C78             >
 127+ 6C78 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C79 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6C7D 52          >
 127+ 6C7E             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C7D D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C7E             >
 127+ 6C7E 6B 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C80             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C80 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C83             >
 127+ 6C83             >
 127+ 6C83             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C83             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C83             >
 127+ 6C83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C83 02 00       >                dw      2
 128+ 6C85                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6C85             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6C85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6C85             >
 128+ 6C85             >                // dummy db directives used to calculate length of namec
 128+ 6C85 4C 2F 53 43 >                db      "L/SCR"
 128+ 6C89 52          >
 128+ 6C8A             >len_NFA         defl    $ - temp_NFA
 128+ 6C8A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6C85             >
 128+ 6C85 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6C86 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6C8A 52          >
 128+ 6C8B             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6C8A D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6C8B             >
 128+ 6C8B 78 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6C8D             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6C8D CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6C90             >
 128+ 6C90             >
 128+ 6C90             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6C90             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6C90             >
 128+ 6C90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6C90 10 00       >                dw      16
 129+ 6C92
 130+ 6C92              //  ______________________________________________________________________
 131+ 6C92              //
 132+ 6C92              // +origin         --
 133+ 6C92              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6C92              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6C92              //              dw      PLUS                    // +
 136+ 6C92              //              dw      EXIT                    // ;
 137+ 6C92                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6C92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6C92             >
 137+ 6C92             >                // dummy db directives used to calculate length of namec
 137+ 6C92 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6C96 47 49 4E    >
 137+ 6C99             >len_NFA         defl    $ - temp_NFA
 137+ 6C99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6C92             >
 137+ 6C92 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6C93 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6C97 47 49 4E    >
 137+ 6C9A             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6C99 CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6C9A             >
 137+ 6C9A 85 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6C9C             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6C9C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6C9C ~           >
 137+ 6C9C ~           >
 137+ 6C9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6C9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6C9C             >
 137+ 6C9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6C9C E1                           pop     hl
 139+ 6C9D 11 66 63                     ld      de, Cold_origin
 140+ 6CA0 19                           add     hl, de
 141+ 6CA1 E5                           push    hl
 142+ 6CA2                              next
 142+ 6CA2 DD E9       >                jp      (ix)
 143+ 6CA4
 144+ 6CA4
 145+ 6CA4              //  ______________________________________________________________________
 146+ 6CA4              //
 147+ 6CA4                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CA4             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CA4             >
 147+ 6CA4             >                // dummy db directives used to calculate length of namec
 147+ 6CA4 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CA8 54 29       >
 147+ 6CAA             >len_NFA         defl    $ - temp_NFA
 147+ 6CAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CA4             >
 147+ 6CA4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CA5 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CA9 54 29       >
 147+ 6CAB             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CAA A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CAB             >
 147+ 6CAB 92 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CAD             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CAD CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CB0             >
 147+ 6CB0             >
 147+ 6CB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CB0             >
 147+ 6CB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CB0 98 63       >                dw      Next_Ptr
 148+ 6CB2
 149+ 6CB2              //  ______________________________________________________________________
 150+ 6CB2              //
 151+ 6CB2
 152+ 6CB2                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CB2             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CB2             >
 152+ 6CB2             >                // dummy db directives used to calculate length of namec
 152+ 6CB2 53 30       >                db      "S0"
 152+ 6CB4             >len_NFA         defl    $ - temp_NFA
 152+ 6CB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CB2             >
 152+ 6CB2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CB3 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CB5             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CB4 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CB5             >
 152+ 6CB5 A4 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CB7             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CB7 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CBA             >
 152+ 6CBA             >
 152+ 6CBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CBA             >
 152+ 6CBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CBA 06          >                db      06
 153+ 6CBB                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CBB             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CBB             >
 153+ 6CBB             >                // dummy db directives used to calculate length of namec
 153+ 6CBB 52 30       >                db      "R0"
 153+ 6CBD             >len_NFA         defl    $ - temp_NFA
 153+ 6CBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CBB             >
 153+ 6CBB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CBC 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6CBE             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CBD B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CBE             >
 153+ 6CBE B2 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CC0             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CC0 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CC3             >
 153+ 6CC3             >
 153+ 6CC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CC3             >
 153+ 6CC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CC3 08          >                db      08
 154+ 6CC4                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6CC4             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6CC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CC4             >
 154+ 6CC4             >                // dummy db directives used to calculate length of namec
 154+ 6CC4 54 49 42    >                db      "TIB"
 154+ 6CC7             >len_NFA         defl    $ - temp_NFA
 154+ 6CC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CC4             >
 154+ 6CC4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CC5 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6CC8             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CC7 C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CC8             >
 154+ 6CC8 BB 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CCA             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CCA CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CCD             >
 154+ 6CCD             >
 154+ 6CCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CCD             >
 154+ 6CCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CCD 0A          >                db      10
 155+ 6CCE                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6CCE             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6CCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CCE             >
 155+ 6CCE             >                // dummy db directives used to calculate length of namec
 155+ 6CCE 57 49 44 54 >                db      "WIDTH"
 155+ 6CD2 48          >
 155+ 6CD3             >len_NFA         defl    $ - temp_NFA
 155+ 6CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CCE             >
 155+ 6CCE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CCF 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6CD3 48          >
 155+ 6CD4             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CD3 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CD4             >
 155+ 6CD4 C4 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CD6             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CD6 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CD9             >
 155+ 6CD9             >
 155+ 6CD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CD9             >
 155+ 6CD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CD9 0C          >                db      12
 156+ 6CDA                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6CDA             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6CDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CDA             >
 156+ 6CDA             >                // dummy db directives used to calculate length of namec
 156+ 6CDA 57 41 52 4E >                db      "WARNING"
 156+ 6CDE 49 4E 47    >
 156+ 6CE1             >len_NFA         defl    $ - temp_NFA
 156+ 6CE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CDA             >
 156+ 6CDA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CDB 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6CDF 49 4E 47    >
 156+ 6CE2             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CE1 C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CE2             >
 156+ 6CE2 CE 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CE4             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CE4 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CE7             >
 156+ 6CE7             >
 156+ 6CE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CE7             >
 156+ 6CE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CE7 0E          >                db      14
 157+ 6CE8                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6CE8             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6CE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CE8             >
 157+ 6CE8             >                // dummy db directives used to calculate length of namec
 157+ 6CE8 46 45 4E 43 >                db      "FENCE"
 157+ 6CEC 45          >
 157+ 6CED             >len_NFA         defl    $ - temp_NFA
 157+ 6CED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CE8             >
 157+ 6CE8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CE9 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6CED 45          >
 157+ 6CEE             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6CED C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6CEE             >
 157+ 6CEE DA 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6CF0             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6CF0 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6CF3             >
 157+ 6CF3             >
 157+ 6CF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6CF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6CF3             >
 157+ 6CF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6CF3 10          >                db      16
 158+ 6CF4                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6CF4             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6CF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6CF4             >
 158+ 6CF4             >                // dummy db directives used to calculate length of namec
 158+ 6CF4 44 50       >                db      "DP"
 158+ 6CF6             >len_NFA         defl    $ - temp_NFA
 158+ 6CF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6CF4             >
 158+ 6CF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6CF5 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6CF7             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6CF6 D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6CF7             >
 158+ 6CF7 E8 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6CF9             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6CF9 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6CFC             >
 158+ 6CFC             >
 158+ 6CFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6CFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6CFC             >
 158+ 6CFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6CFC 12          >                db      18
 159+ 6CFD                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6CFD             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6CFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6CFD             >
 159+ 6CFD             >                // dummy db directives used to calculate length of namec
 159+ 6CFD 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D01 4C 49 4E 4B >
 159+ 6D05             >len_NFA         defl    $ - temp_NFA
 159+ 6D05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6CFD             >
 159+ 6CFD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6CFE 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D02 4C 49 4E 4B >
 159+ 6D06             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D05 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D06             >
 159+ 6D06 F4 6C       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D08             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D08 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D0B             >
 159+ 6D0B             >
 159+ 6D0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D0B             >
 159+ 6D0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D0B 14          >                db      20
 160+ 6D0C                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D0C             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D0C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D0C             >
 160+ 6D0C             >                // dummy db directives used to calculate length of namec
 160+ 6D0C 46 49 52 53 >                db      "FIRST"
 160+ 6D10 54          >
 160+ 6D11             >len_NFA         defl    $ - temp_NFA
 160+ 6D11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D0C             >
 160+ 6D0C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D0D 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D11 54          >
 160+ 6D12             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D11 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D12             >
 160+ 6D12 FD 6C       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D14             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D14 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D17             >
 160+ 6D17             >
 160+ 6D17             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D17             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D17             >
 160+ 6D17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D17 16          >                db      22
 161+ 6D18                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D18             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D18             >
 161+ 6D18             >                // dummy db directives used to calculate length of namec
 161+ 6D18 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D1C 54          >
 161+ 6D1D             >len_NFA         defl    $ - temp_NFA
 161+ 6D1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D18             >
 161+ 6D18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D19 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D1D 54          >
 161+ 6D1E             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D1D D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D1E             >
 161+ 6D1E 0C 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D20             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D20 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D23             >
 161+ 6D23             >
 161+ 6D23             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D23             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D23             >
 161+ 6D23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D23 18          >                db      24
 162+ 6D24                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D24             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D24             >
 162+ 6D24             >                // dummy db directives used to calculate length of namec
 162+ 6D24 45 58 50    >                db      "EXP"
 162+ 6D27             >len_NFA         defl    $ - temp_NFA
 162+ 6D27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D24             >
 162+ 6D24 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D25 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D28             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D27 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D28             >
 162+ 6D28 18 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D2A             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D2A CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D2D             >
 162+ 6D2D             >
 162+ 6D2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D2D             >
 162+ 6D2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D2D 1A          >                db      26
 163+ 6D2E                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D2E             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D2E             >
 163+ 6D2E             >                // dummy db directives used to calculate length of namec
 163+ 6D2E 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D32 45          >
 163+ 6D33             >len_NFA         defl    $ - temp_NFA
 163+ 6D33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D2E             >
 163+ 6D2E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D2F 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D33 45          >
 163+ 6D34             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D33 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D34             >
 163+ 6D34 24 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D36             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D36 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D39             >
 163+ 6D39             >
 163+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D39             >
 163+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D39 1C          >                db      28
 164+ 6D3A                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D3A             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D3A             >
 164+ 6D3A             >                // dummy db directives used to calculate length of namec
 164+ 6D3A 42 4C 4B    >                db      "BLK"
 164+ 6D3D             >len_NFA         defl    $ - temp_NFA
 164+ 6D3D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D3A             >
 164+ 6D3A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D3B 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D3E             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D3D CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D3E             >
 164+ 6D3E 2E 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D40             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D40 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D43             >
 164+ 6D43             >
 164+ 6D43             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D43             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D43             >
 164+ 6D43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D43 1E          >                db      30
 165+ 6D44                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D44             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D44             >
 165+ 6D44             >                // dummy db directives used to calculate length of namec
 165+ 6D44 3E 49 4E    >                db      ">IN"
 165+ 6D47             >len_NFA         defl    $ - temp_NFA
 165+ 6D47             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D44             >
 165+ 6D44 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D45 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D48             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D47 CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D48             >
 165+ 6D48 3A 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D4A             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D4A CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D4D             >
 165+ 6D4D             >
 165+ 6D4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D4D             >
 165+ 6D4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D4D 20          >                db      32
 166+ 6D4E                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D4E             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D4E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D4E             >
 166+ 6D4E             >                // dummy db directives used to calculate length of namec
 166+ 6D4E 4F 55 54    >                db      "OUT"
 166+ 6D51             >len_NFA         defl    $ - temp_NFA
 166+ 6D51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D4E             >
 166+ 6D4E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D4F 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D52             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D51 D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D52             >
 166+ 6D52 44 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D54             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D54 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D57             >
 166+ 6D57             >
 166+ 6D57             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D57             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D57             >
 166+ 6D57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D57 22          >                db      34
 167+ 6D58                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D58             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D58             >
 167+ 6D58             >                // dummy db directives used to calculate length of namec
 167+ 6D58 53 43 52    >                db      "SCR"
 167+ 6D5B             >len_NFA         defl    $ - temp_NFA
 167+ 6D5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D58             >
 167+ 6D58 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D59 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D5C             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D5B D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D5C             >
 167+ 6D5C 4E 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D5E             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D5E CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D61             >
 167+ 6D61             >
 167+ 6D61             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D61             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D61             >
 167+ 6D61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D61 24          >                db      36
 168+ 6D62                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6D62             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6D62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D62             >
 168+ 6D62             >                // dummy db directives used to calculate length of namec
 168+ 6D62 4F 46 46 53 >                db      "OFFSET"
 168+ 6D66 45 54       >
 168+ 6D68             >len_NFA         defl    $ - temp_NFA
 168+ 6D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D62             >
 168+ 6D62 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D63 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6D67 45 54       >
 168+ 6D69             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D68 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D69             >
 168+ 6D69 58 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D6B             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D6B CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D6E             >
 168+ 6D6E             >
 168+ 6D6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D6E             >
 168+ 6D6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D6E 26          >                db      38
 169+ 6D6F                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6D6F             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6D6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D6F             >
 169+ 6D6F             >                // dummy db directives used to calculate length of namec
 169+ 6D6F 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6D73 45 58 54    >
 169+ 6D76             >len_NFA         defl    $ - temp_NFA
 169+ 6D76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D6F             >
 169+ 6D6F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D70 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6D74 45 58 54    >
 169+ 6D77             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D76 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D77             >
 169+ 6D77 62 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D79             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D79 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D7C             >
 169+ 6D7C             >
 169+ 6D7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D7C             >
 169+ 6D7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D7C 28          >                db      40
 170+ 6D7D                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6D7D             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6D7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D7D             >
 170+ 6D7D             >                // dummy db directives used to calculate length of namec
 170+ 6D7D 43 55 52 52 >                db      "CURRENT"
 170+ 6D81 45 4E 54    >
 170+ 6D84             >len_NFA         defl    $ - temp_NFA
 170+ 6D84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D7D             >
 170+ 6D7D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D7E 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6D82 45 4E 54    >
 170+ 6D85             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D84 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D85             >
 170+ 6D85 6F 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D87             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D87 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D8A             >
 170+ 6D8A             >
 170+ 6D8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D8A             >
 170+ 6D8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D8A 2A          >                db      42
 171+ 6D8B                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6D8B             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6D8B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D8B             >
 171+ 6D8B             >                // dummy db directives used to calculate length of namec
 171+ 6D8B 53 54 41 54 >                db      "STATE"
 171+ 6D8F 45          >
 171+ 6D90             >len_NFA         defl    $ - temp_NFA
 171+ 6D90             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D8B             >
 171+ 6D8B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D8C 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6D90 45          >
 171+ 6D91             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6D90 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6D91             >
 171+ 6D91 7D 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6D93             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6D93 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6D96             >
 171+ 6D96             >
 171+ 6D96             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6D96             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6D96             >
 171+ 6D96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6D96 2C          >                db      44
 172+ 6D97                              User_Def BASE       , "BASE"      , 46 //
 172+ 6D97             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6D97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6D97             >
 172+ 6D97             >                // dummy db directives used to calculate length of namec
 172+ 6D97 42 41 53 45 >                db      "BASE"
 172+ 6D9B             >len_NFA         defl    $ - temp_NFA
 172+ 6D9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6D97             >
 172+ 6D97 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6D98 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6D9C             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6D9B C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6D9C             >
 172+ 6D9C 8B 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6D9E             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6D9E CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DA1             >
 172+ 6DA1             >
 172+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DA1             >
 172+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DA1 2E          >                db      46
 173+ 6DA2                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DA2             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DA2             >
 173+ 6DA2             >                // dummy db directives used to calculate length of namec
 173+ 6DA2 44 50 4C    >                db      "DPL"
 173+ 6DA5             >len_NFA         defl    $ - temp_NFA
 173+ 6DA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DA2             >
 173+ 6DA2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DA3 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DA6             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DA5 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DA6             >
 173+ 6DA6 97 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DA8             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DA8 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DAB             >
 173+ 6DAB             >
 173+ 6DAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DAB             >
 173+ 6DAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DAB 30          >                db      48
 174+ 6DAC                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DAC             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DAC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DAC             >
 174+ 6DAC             >                // dummy db directives used to calculate length of namec
 174+ 6DAC 46 4C 44    >                db      "FLD"
 174+ 6DAF             >len_NFA         defl    $ - temp_NFA
 174+ 6DAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DAC             >
 174+ 6DAC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DAD 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DB0             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DAF C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DB0             >
 174+ 6DB0 A2 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DB2             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DB2 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DB5             >
 174+ 6DB5             >
 174+ 6DB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DB5             >
 174+ 6DB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DB5 32          >                db      50
 175+ 6DB6                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DB6             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DB6             >
 175+ 6DB6             >                // dummy db directives used to calculate length of namec
 175+ 6DB6 43 53 50    >                db      "CSP"
 175+ 6DB9             >len_NFA         defl    $ - temp_NFA
 175+ 6DB9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DB6             >
 175+ 6DB6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DB7 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DBA             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DB9 D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DBA             >
 175+ 6DBA AC 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DBC             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DBC CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DBF             >
 175+ 6DBF             >
 175+ 6DBF             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DBF             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DBF             >
 175+ 6DBF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DBF 34          >                db      52
 176+ 6DC0                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6DC0             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6DC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DC0             >
 176+ 6DC0             >                // dummy db directives used to calculate length of namec
 176+ 6DC0 52 23       >                db      "R#"
 176+ 6DC2             >len_NFA         defl    $ - temp_NFA
 176+ 6DC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DC0             >
 176+ 6DC0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DC1 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6DC3             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DC2 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DC3             >
 176+ 6DC3 B6 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DC5             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DC5 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DC8             >
 176+ 6DC8             >
 176+ 6DC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DC8             >
 176+ 6DC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DC8 36          >                db      54
 177+ 6DC9                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6DC9             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6DC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DC9             >
 177+ 6DC9             >                // dummy db directives used to calculate length of namec
 177+ 6DC9 48 4C 44    >                db      "HLD"
 177+ 6DCC             >len_NFA         defl    $ - temp_NFA
 177+ 6DCC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DC9             >
 177+ 6DC9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DCA 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6DCD             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DCC C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DCD             >
 177+ 6DCD C0 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DCF             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DCF CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DD2             >
 177+ 6DD2             >
 177+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DD2             >
 177+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DD2 38          >                db      56
 178+ 6DD3                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6DD3             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6DD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DD3             >
 178+ 6DD3             >                // dummy db directives used to calculate length of namec
 178+ 6DD3 55 53 45    >                db      "USE"
 178+ 6DD6             >len_NFA         defl    $ - temp_NFA
 178+ 6DD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DD3             >
 178+ 6DD3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DD4 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6DD7             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DD6 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DD7             >
 178+ 6DD7 C9 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DD9             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DD9 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DDC             >
 178+ 6DDC             >
 178+ 6DDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DDC             >
 178+ 6DDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DDC 3A          >                db      58
 179+ 6DDD                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6DDD             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6DDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DDD             >
 179+ 6DDD             >                // dummy db directives used to calculate length of namec
 179+ 6DDD 50 52 45 56 >                db      "PREV"
 179+ 6DE1             >len_NFA         defl    $ - temp_NFA
 179+ 6DE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DDD             >
 179+ 6DDD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DDE 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6DE2             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DE1 D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DE2             >
 179+ 6DE2 D3 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DE4             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DE4 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DE7             >
 179+ 6DE7             >
 179+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DE7             >
 179+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DE7 3C          >                db      60
 180+ 6DE8                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6DE8             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6DE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DE8             >
 180+ 6DE8             >                // dummy db directives used to calculate length of namec
 180+ 6DE8 4C 50       >                db      "LP"
 180+ 6DEA             >len_NFA         defl    $ - temp_NFA
 180+ 6DEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DE8             >
 180+ 6DE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DE9 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6DEB             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6DEA D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6DEB             >
 180+ 6DEB DD 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6DED             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6DED CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6DF0             >
 180+ 6DF0             >
 180+ 6DF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6DF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6DF0             >
 180+ 6DF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6DF0 3E          >                db      62
 181+ 6DF1                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6DF1             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6DF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6DF1             >
 181+ 6DF1             >                // dummy db directives used to calculate length of namec
 181+ 6DF1 50 4C 41 43 >                db      "PLACE"
 181+ 6DF5 45          >
 181+ 6DF6             >len_NFA         defl    $ - temp_NFA
 181+ 6DF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6DF1             >
 181+ 6DF1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6DF2 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6DF6 45          >
 181+ 6DF7             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6DF6 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6DF7             >
 181+ 6DF7 E8 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6DF9             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6DF9 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6DFC             >
 181+ 6DFC             >
 181+ 6DFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6DFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6DFC             >
 181+ 6DFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6DFC 40          >                db      64
 182+ 6DFD                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6DFD             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6DFD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6DFD             >
 182+ 6DFD             >                // dummy db directives used to calculate length of namec
 182+ 6DFD 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E01 43 45 2D 49 >
 182+ 6E05 44          >
 182+ 6E06             >len_NFA         defl    $ - temp_NFA
 182+ 6E06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6DFD             >
 182+ 6DFD 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6DFE 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E02 43 45 2D 49 >
 182+ 6E06 44          >
 182+ 6E07             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E06 C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E07             >
 182+ 6E07 F1 6D       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E09             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E09 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E0C             >
 182+ 6E0C             >
 182+ 6E0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E0C             >
 182+ 6E0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E0C 42          >                db      66
 183+ 6E0D                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E0D             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E0D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E0D             >
 183+ 6E0D             >                // dummy db directives used to calculate length of namec
 183+ 6E0D 53 50 41 4E >                db      "SPAN"
 183+ 6E11             >len_NFA         defl    $ - temp_NFA
 183+ 6E11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E0D             >
 183+ 6E0D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E0E 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E12             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E11 CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E12             >
 183+ 6E12 FD 6D       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E14             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E14 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E17             >
 183+ 6E17             >
 183+ 6E17             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E17             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E17             >
 183+ 6E17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E17 44          >                db      68
 184+ 6E18                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E18             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E18             >
 184+ 6E18             >                // dummy db directives used to calculate length of namec
 184+ 6E18 48 41 4E 44 >                db      "HANDLER"
 184+ 6E1C 4C 45 52    >
 184+ 6E1F             >len_NFA         defl    $ - temp_NFA
 184+ 6E1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E18             >
 184+ 6E18 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E19 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E1D 4C 45 52    >
 184+ 6E20             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E1F D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E20             >
 184+ 6E20 0D 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E22             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E22 CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E25             >
 184+ 6E25             >
 184+ 6E25             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E25             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E25             >
 184+ 6E25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E25 46          >                db      70
 185+ 6E26                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E26             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E26             >
 185+ 6E26             >                // dummy db directives used to calculate length of namec
 185+ 6E26 48 50       >                db      "HP"
 185+ 6E28             >len_NFA         defl    $ - temp_NFA
 185+ 6E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E26             >
 185+ 6E26 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E27 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E29             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E28 D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E29             >
 185+ 6E29 18 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E2B             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E2B CD 1D 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E2E             >
 185+ 6E2E             >
 185+ 6E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E2E             >
 185+ 6E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E2E 48          >                db      72
 186+ 6E2F
 187+ 6E2F              //  ______________________________________________________________________
 188+ 6E2F              //
 189+ 6E2F              // here         -- a
 190+ 6E2F                              Colon_Def HERE, "HERE", is_normal
 190+ 6E2F             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E2F             >
 190+ 6E2F             >                // dummy db directives used to calculate length of namec
 190+ 6E2F 48 45 52 45 >                db      "HERE"
 190+ 6E33             >len_NFA         defl    $ - temp_NFA
 190+ 6E33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E2F             >
 190+ 6E2F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E30 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E34             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E33 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E34             >
 190+ 6E34 26 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E36             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E36 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E39             >
 190+ 6E39             >
 190+ 6E39             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E39             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E39             >
 190+ 6E39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E39 F9 6C DB 6A                  dw      DP, FETCH               // dp @
 192+ 6E3D F7 68                        dw      EXIT                    // ;
 193+ 6E3F
 194+ 6E3F              //  ______________________________________________________________________
 195+ 6E3F              //
 196+ 6E3F              // allot        n --
 197+ 6E3F                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E3F             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E3F             >
 197+ 6E3F             >                // dummy db directives used to calculate length of namec
 197+ 6E3F 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E43 54          >
 197+ 6E44             >len_NFA         defl    $ - temp_NFA
 197+ 6E44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E3F             >
 197+ 6E3F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E40 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E44 54          >
 197+ 6E45             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E44 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E45             >
 197+ 6E45 2F 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E47             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E47 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E4A             >
 197+ 6E4A             >
 197+ 6E4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E4A             >
 197+ 6E4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E4A F9 6C BC 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E4E F7 68                        dw      EXIT                    // ;
 200+ 6E50
 201+ 6E50              //  ______________________________________________________________________
 202+ 6E50              //
 203+ 6E50              // comma        n --
 204+ 6E50                              Colon_Def COMMA, ",", is_normal
 204+ 6E50             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E50             >
 204+ 6E50             >                // dummy db directives used to calculate length of namec
 204+ 6E50 2C          >                db      ","
 204+ 6E51             >len_NFA         defl    $ - temp_NFA
 204+ 6E51             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E50             >
 204+ 6E50 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E51 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E52             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E51 AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E52             >
 204+ 6E52 3F 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E54             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E54 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E57             >
 204+ 6E57             >
 204+ 6E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E57             >
 204+ 6E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E57 36 6E E6 6A                  dw      HERE, STORE             // here !
 206+ 6E5B 3E 6C 47 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6E5F F7 68                        dw      EXIT                    // ;
 208+ 6E61
 209+ 6E61              //  ______________________________________________________________________
 210+ 6E61              //
 211+ 6E61              // ccomma       c --
 212+ 6E61                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6E61             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6E61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6E61             >
 212+ 6E61             >                // dummy db directives used to calculate length of namec
 212+ 6E61 43 2C       >                db      "C,"
 212+ 6E63             >len_NFA         defl    $ - temp_NFA
 212+ 6E63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6E61             >
 212+ 6E61 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6E62 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6E64             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6E63 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6E64             >
 212+ 6E64 50 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6E66             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6E66 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6E69             >
 212+ 6E69             >
 212+ 6E69             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6E69             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6E69             >
 212+ 6E69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6E69 36 6E FE 6A                  dw      HERE, CSTORE            // here c!
 214+ 6E6D 35 6C 47 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6E71 F7 68                        dw      EXIT                    // ;
 216+ 6E73
 217+ 6E73              //  ______________________________________________________________________
 218+ 6E73              //
 219+ 6E73              // s>d          n -- d
 220+ 6E73              // converts a single precision integer in a double precision
 221+ 6E73                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6E73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6E73             >
 221+ 6E73             >                // dummy db directives used to calculate length of namec
 221+ 6E73 53 3E 44    >                db      "S>D"
 221+ 6E76             >len_NFA         defl    $ - temp_NFA
 221+ 6E76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6E73             >
 221+ 6E73 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6E74 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6E77             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6E76 C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6E77             >
 221+ 6E77 61 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6E79             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6E79 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6E79 ~           >
 221+ 6E79 ~           >
 221+ 6E79             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6E79             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6E79             >
 221+ 6E79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6E79 D1                           pop     de
 223+ 6E7A 21 00 00                     ld      hl, 0
 224+ 6E7D 7A                           ld      a, d
 225+ 6E7E E6 80                        and     $80
 226+ 6E80 28 01                        jr      z, S_to_D_Skip
 227+ 6E82 2B                           dec     hl                  // $FFFF
 228+ 6E83              S_to_D_Skip:
 229+ 6E83 D5                           push    de
 230+ 6E84 E5                           push    hl
 231+ 6E85                              next
 231+ 6E85 DD E9       >                jp      (ix)
 232+ 6E87
 233+ 6E87              //  ______________________________________________________________________
 234+ 6E87              //
 235+ 6E87              // -            n1 n2 -- n3
 236+ 6E87              // subtraction
 237+ 6E87                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6E87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6E87             >
 237+ 6E87             >                // dummy db directives used to calculate length of namec
 237+ 6E87 2D          >                db      "-"
 237+ 6E88             >len_NFA         defl    $ - temp_NFA
 237+ 6E88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6E87             >
 237+ 6E87 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6E88 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6E89             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6E88 AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6E89             >
 237+ 6E89 73 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6E8B             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6E8B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6E8B ~           >
 237+ 6E8B ~           >
 237+ 6E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6E8B             >
 237+ 6E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6E8B D1                           pop     de
 239+ 6E8C E1                           pop     hl
 240+ 6E8D A7                           and     a
 241+ 6E8E ED 52                        sbc     hl, de
 242+ 6E90
 243+ 6E90                              psh1
 243+ 6E90 E5          >                push    hl
 243+ 6E91 DD E9       >                jp      (ix)
 244+ 6E93
 245+ 6E93              //  ______________________________________________________________________
 246+ 6E93              //
 247+ 6E93              // =            n1 n2 -- n3
 248+ 6E93              // equals
 249+ 6E93                              Colon_Def EQUALS, "=", is_normal
 249+ 6E93             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6E93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6E93             >
 249+ 6E93             >                // dummy db directives used to calculate length of namec
 249+ 6E93 3D          >                db      "="
 249+ 6E94             >len_NFA         defl    $ - temp_NFA
 249+ 6E94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6E93             >
 249+ 6E93 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6E94 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6E95             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6E94 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6E95             >
 249+ 6E95 87 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6E97             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6E97 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6E9A             >
 249+ 6E9A             >
 249+ 6E9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6E9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6E9A             >
 249+ 6E9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6E9A 8B 6E 54 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6E9E F7 68                        dw      EXIT                    // ;
 252+ 6EA0
 253+ 6EA0              //  ______________________________________________________________________
 254+ 6EA0              //
 255+ 6EA0              // u<           u1 u2 -- u3
 256+ 6EA0              // unsigned less-than
 257+ 6EA0                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6EA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6EA0             >
 257+ 6EA0             >                // dummy db directives used to calculate length of namec
 257+ 6EA0 55 3C       >                db      "U<"
 257+ 6EA2             >len_NFA         defl    $ - temp_NFA
 257+ 6EA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6EA0             >
 257+ 6EA0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6EA1 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6EA3             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6EA2 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6EA3             >
 257+ 6EA3 93 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6EA5             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6EA5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6EA5 ~           >
 257+ 6EA5 ~           >
 257+ 6EA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6EA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6EA5             >
 257+ 6EA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6EA5 D1                           pop     de
 259+ 6EA6 E1                           pop     hl
 260+ 6EA7 A7                           and     a
 261+ 6EA8 ED 52                        sbc     hl, de
 262+ 6EAA 21 FF FF                     ld      hl, -1
 263+ 6EAD 38 01                        jr      c, ULess_Skip
 264+ 6EAF 23                               inc     hl
 265+ 6EB0              ULess_Skip:
 266+ 6EB0
 267+ 6EB0                              psh1
 267+ 6EB0 E5          >                push    hl
 267+ 6EB1 DD E9       >                jp      (ix)
 268+ 6EB3
 269+ 6EB3              //  ______________________________________________________________________
 270+ 6EB3              //
 271+ 6EB3              // <           n1 n2 -- n3
 272+ 6EB3              // less-than
 273+ 6EB3                              New_Def LESS, "<", is_code, is_normal
 273+ 6EB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6EB3             >
 273+ 6EB3             >                // dummy db directives used to calculate length of namec
 273+ 6EB3 3C          >                db      "<"
 273+ 6EB4             >len_NFA         defl    $ - temp_NFA
 273+ 6EB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6EB3             >
 273+ 6EB3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6EB4 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6EB5             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6EB4 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6EB5             >
 273+ 6EB5 A0 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6EB7             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6EB7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6EB7 ~           >
 273+ 6EB7 ~           >
 273+ 6EB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6EB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6EB7             >
 273+ 6EB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6EB7 D1                           pop     de
 275+ 6EB8 E1                           pop     hl
 276+ 6EB9 7C                           ld      a, h
 277+ 6EBA EE 80                        xor     $80
 278+ 6EBC 67                           ld      h, a
 279+ 6EBD 7A                           ld      a, d
 280+ 6EBE EE 80                        xor     $80
 281+ 6EC0 57                           ld      d, a
 282+ 6EC1 A7                           and     a
 283+ 6EC2 ED 52                        sbc     hl, de
 284+ 6EC4 21 FF FF                     ld      hl, -1
 285+ 6EC7 38 01                        jr      c, Less_Skip
 286+ 6EC9 23                               inc     hl
 287+ 6ECA              Less_Skip:
 288+ 6ECA
 289+ 6ECA                              psh1
 289+ 6ECA E5          >                push    hl
 289+ 6ECB DD E9       >                jp      (ix)
 290+ 6ECD
 291+ 6ECD              //  ______________________________________________________________________
 292+ 6ECD              //
 293+ 6ECD              // >            n1 n2 -- n3
 294+ 6ECD              // greater than
 295+ 6ECD                              Colon_Def GREATER, ">", is_normal
 295+ 6ECD             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 295+ 6ECD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 295+ 6ECD             >
 295+ 6ECD             >                // dummy db directives used to calculate length of namec
 295+ 6ECD 3E          >                db      ">"
 295+ 6ECE             >len_NFA         defl    $ - temp_NFA
 295+ 6ECE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 295+ 6ECD             >
 295+ 6ECD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 295+ 6ECE 3E          >                db      ">"               // name string in 7-bit ascii, but
 295+ 6ECF             >                org     $-1                 // alter last byte of Name just above to set
 295+ 6ECE BE          >                db      {b $} | END_BIT     // msb as name end
 295+ 6ECF             >
 295+ 6ECF B3 6E       >                dw      last_NFA            // Link to previous definition Name
 295+ 6ED1             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 295+ 6ED1 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 295+ 6ED4             >
 295+ 6ED4             >
 295+ 6ED4             >                endif           ; ok        // for other definitions it "points" the correct handler
 295+ 6ED4             >                // Use of "; ok" to suppress "warning[fwdref]"
 295+ 6ED4             >
 295+ 6ED4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 296+ 6ED4 4F 6A B7 6E                  dw      SWAP, LESS              // swap <
 297+ 6ED8 F7 68                        dw      EXIT                    // ;
 298+ 6EDA              //  ______________________________________________________________________
 299+ 6EDA              //
 300+ 6EDA              // min          n1 n2 -- n3
 301+ 6EDA              // minimum between n1 and n2
 302+ 6EDA                              Colon_Def MIN, "MIN" , is_normal
 302+ 6EDA             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 302+ 6EDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 302+ 6EDA             >
 302+ 6EDA             >                // dummy db directives used to calculate length of namec
 302+ 6EDA 4D 49 4E    >                db      "MIN"
 302+ 6EDD             >len_NFA         defl    $ - temp_NFA
 302+ 6EDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 302+ 6EDA             >
 302+ 6EDA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 302+ 6EDB 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 302+ 6EDE             >                org     $-1                 // alter last byte of Name just above to set
 302+ 6EDD CE          >                db      {b $} | END_BIT     // msb as name end
 302+ 6EDE             >
 302+ 6EDE CD 6E       >                dw      last_NFA            // Link to previous definition Name
 302+ 6EE0             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 302+ 6EE0 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 302+ 6EE3             >
 302+ 6EE3             >
 302+ 6EE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 302+ 6EE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 302+ 6EE3             >
 302+ 6EE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 303+ 6EE3 AF 6A                        dw      TWO_DUP                 // 2dup
 304+ 6EE5 D1 6E                        dw      GREATER                 // >
 305+ 6EE7 D8 63                        dw      ZBRANCH
 306+ 6EE9 04 00                        dw      Min_Skip - $   // if
 307+ 6EEB 4F 6A                        dw          SWAP                //      swap
 308+ 6EED              Min_Skip:                                       // endif
 309+ 6EED 2D 6A                        dw      DROP                    // drop
 310+ 6EEF F7 68                        dw      EXIT                    // ;
 311+ 6EF1
 312+ 6EF1              //  ______________________________________________________________________
 313+ 6EF1              //
 314+ 6EF1              // max          n1 n2 -- n3
 315+ 6EF1              // maximum between n1 and n2
 316+ 6EF1                              Colon_Def MAX, "MAX", is_normal
 316+ 6EF1             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 316+ 6EF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 6EF1             >
 316+ 6EF1             >                // dummy db directives used to calculate length of namec
 316+ 6EF1 4D 41 58    >                db      "MAX"
 316+ 6EF4             >len_NFA         defl    $ - temp_NFA
 316+ 6EF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 6EF1             >
 316+ 6EF1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 6EF2 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 316+ 6EF5             >                org     $-1                 // alter last byte of Name just above to set
 316+ 6EF4 D8          >                db      {b $} | END_BIT     // msb as name end
 316+ 6EF5             >
 316+ 6EF5 DA 6E       >                dw      last_NFA            // Link to previous definition Name
 316+ 6EF7             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 6EF7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 316+ 6EFA             >
 316+ 6EFA             >
 316+ 6EFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 6EFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 6EFA             >
 316+ 6EFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 6EFA AF 6A                        dw      TWO_DUP                 // 2dup
 318+ 6EFC B7 6E                        dw      LESS                    // <
 319+ 6EFE D8 63                        dw      ZBRANCH
 320+ 6F00 04 00                        dw      Max_Skip - $   // if
 321+ 6F02 4F 6A                        dw          SWAP                //      swap
 322+ 6F04              Max_Skip:                                       // endif
 323+ 6F04 2D 6A                        dw      DROP                    // drop
 324+ 6F06 F7 68                        dw      EXIT                    // ;
 325+ 6F08
 326+ 6F08              //  ______________________________________________________________________
 327+ 6F08              //
 328+ 6F08              // ?dup         n -- 0 | n n
 329+ 6F08              // duplicate if not zero
 330+ 6F08                              New_Def QDUP, "?DUP", is_code, is_normal
 330+ 6F08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ 6F08             >
 330+ 6F08             >                // dummy db directives used to calculate length of namec
 330+ 6F08 3F 44 55 50 >                db      "?DUP"
 330+ 6F0C             >len_NFA         defl    $ - temp_NFA
 330+ 6F0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ 6F08             >
 330+ 6F08 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ 6F09 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 330+ 6F0D             >                org     $-1                 // alter last byte of Name just above to set
 330+ 6F0C D0          >                db      {b $} | END_BIT     // msb as name end
 330+ 6F0D             >
 330+ 6F0D F1 6E       >                dw      last_NFA            // Link to previous definition Name
 330+ 6F0F             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 6F0F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 330+ 6F0F ~           >
 330+ 6F0F ~           >
 330+ 6F0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 6F0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 6F0F             >
 330+ 6F0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 6F0F              QDup_Ptr:
 332+ 6F0F E1                           pop     hl
 333+ 6F10 7C                           ld      a, h
 334+ 6F11 B5                           or      l
 335+ 6F12 28 01                        jr      z, QDup_Skip
 336+ 6F14 E5                               push    hl
 337+ 6F15              QDup_Skip:
 338+ 6F15                              psh1
 338+ 6F15 E5          >                push    hl
 338+ 6F16 DD E9       >                jp      (ix)
 339+ 6F18
 340+ 6F18              //  ______________________________________________________________________
 341+ 6F18              //
 342+ 6F18              // -dup         n -- 0 | n n
 343+ 6F18              // duplicate if not zero
 344+ 6F18                              New_Def LDUP, "-DUP", is_code, is_normal
 344+ 6F18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ 6F18             >
 344+ 6F18             >                // dummy db directives used to calculate length of namec
 344+ 6F18 2D 44 55 50 >                db      "-DUP"
 344+ 6F1C             >len_NFA         defl    $ - temp_NFA
 344+ 6F1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ 6F18             >
 344+ 6F18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ 6F19 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 344+ 6F1D             >                org     $-1                 // alter last byte of Name just above to set
 344+ 6F1C D0          >                db      {b $} | END_BIT     // msb as name end
 344+ 6F1D             >
 344+ 6F1D 08 6F       >                dw      last_NFA            // Link to previous definition Name
 344+ 6F1F             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 6F1F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 344+ 6F1F ~           >
 344+ 6F1F ~           >
 344+ 6F1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 6F1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 6F1F             >
 344+ 6F1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 6F1F C3 0F 6F                     jp      QDup_Ptr
 346+ 6F22
 347+ 6F22              //  ______________________________________________________________________
 348+ 6F22              //
 349+ 6F22              // emit         c --
 350+ 6F22                              Colon_Def EMIT, "EMIT", is_normal
 350+ 6F22             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 350+ 6F22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 350+ 6F22             >
 350+ 6F22             >                // dummy db directives used to calculate length of namec
 350+ 6F22 45 4D 49 54 >                db      "EMIT"
 350+ 6F26             >len_NFA         defl    $ - temp_NFA
 350+ 6F26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 350+ 6F22             >
 350+ 6F22 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 350+ 6F23 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 350+ 6F27             >                org     $-1                 // alter last byte of Name just above to set
 350+ 6F26 D4          >                db      {b $} | END_BIT     // msb as name end
 350+ 6F27             >
 350+ 6F27 18 6F       >                dw      last_NFA            // Link to previous definition Name
 350+ 6F29             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 350+ 6F29 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 350+ 6F2C             >
 350+ 6F2C             >
 350+ 6F2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 350+ 6F2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 350+ 6F2C             >
 350+ 6F2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 351+ 6F2C 07 66                        dw      C_EMIT                      // (?emit)
 352+ 6F2E 0F 6F                        dw      QDUP                        // ?dup
 353+ 6F30                                                                  // if
 354+ 6F30 D8 63                        dw      ZBRANCH
 355+ 6F32 0A 00                        dw      Emit_Skip - $
 356+ 6F34 D5 65                        dw          EMITC                   //      emitc
 357+ 6F36 35 6C                        dw          ONE                     //      1
 358+ 6F38 54 6D BC 6A                  dw          OUT, PLUSSTORE        //      out +!
 359+ 6F3C              Emit_Skip:                                          // endif
 360+ 6F3C F7 68                        dw      EXIT                        // ;
 361+ 6F3E
 362+ 6F3E              //  ______________________________________________________________________
 363+ 6F3E              //
 364+ 6F3E              // space        --
 365+ 6F3E                              Colon_Def SPACE, "SPACE", is_normal
 365+ 6F3E             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 365+ 6F3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 365+ 6F3E             >
 365+ 6F3E             >                // dummy db directives used to calculate length of namec
 365+ 6F3E 53 50 41 43 >                db      "SPACE"
 365+ 6F42 45          >
 365+ 6F43             >len_NFA         defl    $ - temp_NFA
 365+ 6F43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 365+ 6F3E             >
 365+ 6F3E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 365+ 6F3F 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 365+ 6F43 45          >
 365+ 6F44             >                org     $-1                 // alter last byte of Name just above to set
 365+ 6F43 C5          >                db      {b $} | END_BIT     // msb as name end
 365+ 6F44             >
 365+ 6F44 22 6F       >                dw      last_NFA            // Link to previous definition Name
 365+ 6F46             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 365+ 6F46 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 365+ 6F49             >
 365+ 6F49             >
 365+ 6F49             >                endif           ; ok        // for other definitions it "points" the correct handler
 365+ 6F49             >                // Use of "; ok" to suppress "warning[fwdref]"
 365+ 6F49             >
 365+ 6F49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 366+ 6F49 5B 6C 29 6F                  dw      BL, EMIT                // bl emit
 367+ 6F4D F7 68                        dw      EXIT                    // ;
 368+ 6F4F
 369+ 6F4F              //  ______________________________________________________________________
 370+ 6F4F              //
 371+ 6F4F              // traverse     a n -- a
 372+ 6F4F              // A dictionary entry is structured as follows
 373+ 6F4F              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 374+ 6F4F              //      +1   word name, last character is toggled with $80
 375+ 6F4F              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 376+ 6F4F              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 377+ 6F4F              // PFA: +6+n "is_code", definitions have no PFA. // +5
 378+ 6F4F              //
 379+ 6F4F                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 379+ 6F4F             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 379+ 6F4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 6F4F             >
 379+ 6F4F             >                // dummy db directives used to calculate length of namec
 379+ 6F4F 54 52 41 56 >                db      "TRAVERSE"
 379+ 6F53 45 52 53 45 >
 379+ 6F57             >len_NFA         defl    $ - temp_NFA
 379+ 6F57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 6F4F             >
 379+ 6F4F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 6F50 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 379+ 6F54 45 52 53 45 >
 379+ 6F58             >                org     $-1                 // alter last byte of Name just above to set
 379+ 6F57 C5          >                db      {b $} | END_BIT     // msb as name end
 379+ 6F58             >
 379+ 6F58 3E 6F       >                dw      last_NFA            // Link to previous definition Name
 379+ 6F5A             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 6F5A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 6F5D             >
 379+ 6F5D             >
 379+ 6F5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 6F5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 6F5D             >
 379+ 6F5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 6F5D 4F 6A                        dw      SWAP                    // swap
 381+ 6F5F              Traverse_Begin:                                 // begin
 382+ 6F5F 1F 6A 92 69                  dw          OVER, PLUS          //      over +
 383+ 6F63 A5 63 7F 00                  dw          LIT, 127            //      127
 384+ 6F67 1F 6A F2 6A                  dw          OVER, CFETCH        //      over @
 385+ 6F6B B7 6E                        dw          LESS                //      <
 386+ 6F6D                                                              // until
 387+ 6F6D D8 63                        dw      ZBRANCH
 388+ 6F6F F0 FF                        dw      Traverse_Begin - $
 389+ 6F71 36 6A                        dw      NIP                     //  nip
 390+ 6F73 F7 68                        dw      EXIT                    //  ;
 391+ 6F75
 392+ 6F75              //  ______________________________________________________________________
 393+ 6F75              //
 394+ 6F75              // latest       -- nfa
 395+ 6F75                              Colon_Def LATEST, "LATEST", is_normal
 395+ 6F75             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 395+ 6F75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 6F75             >
 395+ 6F75             >                // dummy db directives used to calculate length of namec
 395+ 6F75 4C 41 54 45 >                db      "LATEST"
 395+ 6F79 53 54       >
 395+ 6F7B             >len_NFA         defl    $ - temp_NFA
 395+ 6F7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 6F75             >
 395+ 6F75 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 6F76 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 395+ 6F7A 53 54       >
 395+ 6F7C             >                org     $-1                 // alter last byte of Name just above to set
 395+ 6F7B D4          >                db      {b $} | END_BIT     // msb as name end
 395+ 6F7C             >
 395+ 6F7C 4F 6F       >                dw      last_NFA            // Link to previous definition Name
 395+ 6F7E             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 6F7E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 395+ 6F81             >
 395+ 6F81             >
 395+ 6F81             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 6F81             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 6F81             >
 395+ 6F81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 6F81 87 6D                        dw      CURRENT                 // current
 397+ 6F83 DB 6A DB 6A                  dw      FETCH, FETCH            // @ @
 398+ 6F87 F7 68                        dw      EXIT                    // ;
 399+ 6F89
 400+ 6F89              //  ______________________________________________________________________
 401+ 6F89              //
 402+ 6F89              // lfa          pfa -- lfa
 403+ 6F89                              Colon_Def LFA, "LFA", is_normal
 403+ 6F89             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 403+ 6F89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 6F89             >
 403+ 6F89             >                // dummy db directives used to calculate length of namec
 403+ 6F89 4C 46 41    >                db      "LFA"
 403+ 6F8C             >len_NFA         defl    $ - temp_NFA
 403+ 6F8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 6F89             >
 403+ 6F89 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 6F8A 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 403+ 6F8D             >                org     $-1                 // alter last byte of Name just above to set
 403+ 6F8C C1          >                db      {b $} | END_BIT     // msb as name end
 403+ 6F8D             >
 403+ 6F8D 75 6F       >                dw      last_NFA            // Link to previous definition Name
 403+ 6F8F             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 6F8F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 403+ 6F92             >
 403+ 6F92             >
 403+ 6F92             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 6F92             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 6F92             >
 403+ 6F92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 6F92 A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 405+ 6F96 8B 6E                        dw      SUBTRACT                // cell- --> -
 406+ 6F98 F7 68                        dw      EXIT                    // ;
 407+ 6F9A
 408+ 6F9A              //  ______________________________________________________________________
 409+ 6F9A              //
 410+ 6F9A              // cfa          pfa -- cfa
 411+ 6F9A                              Colon_Def CFA, "CFA", is_normal
 411+ 6F9A             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 411+ 6F9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 6F9A             >
 411+ 6F9A             >                // dummy db directives used to calculate length of namec
 411+ 6F9A 43 46 41    >                db      "CFA"
 411+ 6F9D             >len_NFA         defl    $ - temp_NFA
 411+ 6F9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 6F9A             >
 411+ 6F9A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 6F9B 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 411+ 6F9E             >                org     $-1                 // alter last byte of Name just above to set
 411+ 6F9D C1          >                db      {b $} | END_BIT     // msb as name end
 411+ 6F9E             >
 411+ 6F9E 89 6F       >                dw      last_NFA            // Link to previous definition Name
 411+ 6FA0             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 6FA0 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 6FA3             >
 411+ 6FA3             >
 411+ 6FA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 6FA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 6FA3             >
 411+ 6FA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 6FA3              //              dw      CELL_MINUS              // cell-
 413+ 6FA3 47 6C 8B 6E                  dw      THREE, SUBTRACT         // 3 -
 414+ 6FA7 F7 68                        dw      EXIT                    // ;
 415+ 6FA9
 416+ 6FA9              //  ______________________________________________________________________
 417+ 6FA9              //
 418+ 6FA9              // nfa          pfa -- nfa
 419+ 6FA9                              Colon_Def NFA, "NFA", is_normal
 419+ 6FA9             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 419+ 6FA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 419+ 6FA9             >
 419+ 6FA9             >                // dummy db directives used to calculate length of namec
 419+ 6FA9 4E 46 41    >                db      "NFA"
 419+ 6FAC             >len_NFA         defl    $ - temp_NFA
 419+ 6FAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 419+ 6FA9             >
 419+ 6FA9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 419+ 6FAA 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 419+ 6FAD             >                org     $-1                 // alter last byte of Name just above to set
 419+ 6FAC C1          >                db      {b $} | END_BIT     // msb as name end
 419+ 6FAD             >
 419+ 6FAD 9A 6F       >                dw      last_NFA            // Link to previous definition Name
 419+ 6FAF             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 419+ 6FAF CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 419+ 6FB2             >
 419+ 6FB2             >
 419+ 6FB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 419+ 6FB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 419+ 6FB2             >
 419+ 6FB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 420+ 6FB2 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 421+ 6FB6 8B 6E                        dw      SUBTRACT                // -
 422+ 6FB8 51 6C                        dw      NEG_ONE                 // -1
 423+ 6FBA 5A 6F                        dw      TRAVERSE                // traverse
 424+ 6FBC F7 68                        dw      EXIT                    // ;
 425+ 6FBE
 426+ 6FBE              //  ______________________________________________________________________
 427+ 6FBE              //
 428+ 6FBE              // pfa          nfa -- pfa
 429+ 6FBE                              Colon_Def PFA, "PFA", is_normal
 429+ 6FBE             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 429+ 6FBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 6FBE             >
 429+ 6FBE             >                // dummy db directives used to calculate length of namec
 429+ 6FBE 50 46 41    >                db      "PFA"
 429+ 6FC1             >len_NFA         defl    $ - temp_NFA
 429+ 6FC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 6FBE             >
 429+ 6FBE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 6FBF 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 429+ 6FC2             >                org     $-1                 // alter last byte of Name just above to set
 429+ 6FC1 C1          >                db      {b $} | END_BIT     // msb as name end
 429+ 6FC2             >
 429+ 6FC2 A9 6F       >                dw      last_NFA            // Link to previous definition Name
 429+ 6FC4             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 6FC4 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 6FC7             >
 429+ 6FC7             >
 429+ 6FC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 6FC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 6FC7             >
 429+ 6FC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 6FC7 35 6C                        dw      ONE                     // 1
 431+ 6FC9 5A 6F                        dw      TRAVERSE                // traverse
 432+ 6FCB A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 433+ 6FCF 92 69                        dw      PLUS                    // +
 434+ 6FD1 F7 68                        dw      EXIT                    // ;
 435+ 6FD3
 436+ 6FD3              //  ______________________________________________________________________
 437+ 6FD3              //
 438+ 6FD3              // >body        cfa -- pfa
 439+ 6FD3                              Colon_Def TO_BODY, ">BODY", is_normal
 439+ 6FD3             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 439+ 6FD3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 6FD3             >
 439+ 6FD3             >                // dummy db directives used to calculate length of namec
 439+ 6FD3 3E 42 4F 44 >                db      ">BODY"
 439+ 6FD7 59          >
 439+ 6FD8             >len_NFA         defl    $ - temp_NFA
 439+ 6FD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 6FD3             >
 439+ 6FD3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 6FD4 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 439+ 6FD8 59          >
 439+ 6FD9             >                org     $-1                 // alter last byte of Name just above to set
 439+ 6FD8 D9          >                db      {b $} | END_BIT     // msb as name end
 439+ 6FD9             >
 439+ 6FD9 BE 6F       >                dw      last_NFA            // Link to previous definition Name
 439+ 6FDB             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 6FDB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 6FDE             >
 439+ 6FDE             >
 439+ 6FDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 6FDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 6FDE             >
 439+ 6FDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 6FDE 47 6C 92 69                  dw      THREE, PLUS             // cell+ --> 3 +
 441+ 6FE2 F7 68                        dw      EXIT                    // ;
 442+ 6FE4
 443+ 6FE4              //  ______________________________________________________________________
 444+ 6FE4              //
 445+ 6FE4              // <name        cfa -- nfa
 446+ 6FE4                              Colon_Def TO_NAME, "<NAME", is_normal
 446+ 6FE4             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 446+ 6FE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ 6FE4             >
 446+ 6FE4             >                // dummy db directives used to calculate length of namec
 446+ 6FE4 3C 4E 41 4D >                db      "<NAME"
 446+ 6FE8 45          >
 446+ 6FE9             >len_NFA         defl    $ - temp_NFA
 446+ 6FE9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ 6FE4             >
 446+ 6FE4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ 6FE5 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 446+ 6FE9 45          >
 446+ 6FEA             >                org     $-1                 // alter last byte of Name just above to set
 446+ 6FE9 C5          >                db      {b $} | END_BIT     // msb as name end
 446+ 6FEA             >
 446+ 6FEA D3 6F       >                dw      last_NFA            // Link to previous definition Name
 446+ 6FEC             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 6FEC CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 446+ 6FEF             >
 446+ 6FEF             >
 446+ 6FEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 6FEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 6FEF             >
 446+ 6FEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 6FEF DB 6F                        dw      TO_BODY                 // >body
 448+ 6FF1 AF 6F                        dw      NFA                     // nfa
 449+ 6FF3 F7 68                        dw      EXIT                    // ;
 450+ 6FF5
 451+ 6FF5              //  ______________________________________________________________________
 452+ 6FF5              //
 453+ 6FF5              // !csp         --
 454+ 6FF5              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 455+ 6FF5                              Colon_Def STORE_CSP, "!CSP", is_normal
 455+ 6FF5             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 455+ 6FF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 455+ 6FF5             >
 455+ 6FF5             >                // dummy db directives used to calculate length of namec
 455+ 6FF5 21 43 53 50 >                db      "!CSP"
 455+ 6FF9             >len_NFA         defl    $ - temp_NFA
 455+ 6FF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 455+ 6FF5             >
 455+ 6FF5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 455+ 6FF6 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 455+ 6FFA             >                org     $-1                 // alter last byte of Name just above to set
 455+ 6FF9 D0          >                db      {b $} | END_BIT     // msb as name end
 455+ 6FFA             >
 455+ 6FFA E4 6F       >                dw      last_NFA            // Link to previous definition Name
 455+ 6FFC             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 455+ 6FFC CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 455+ 6FFF             >
 455+ 6FFF             >
 455+ 6FFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 455+ 6FFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 455+ 6FFF             >
 455+ 6FFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 456+ 6FFF C7 68                        dw      SPFETCH                 // sp@
 457+ 7001 BC 6D E6 6A                  dw      CSP, STORE              // csp !
 458+ 7005 F7 68                        dw      EXIT                    // ;
 459+ 7007
 460+ 7007              //  ______________________________________________________________________
 461+ 7007              //
 462+ 7007              // ?error       f n --
 463+ 7007              // rase error n if flag f it true
 464+ 7007                              Colon_Def QERROR, "?ERROR", is_normal
 464+ 7007             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 464+ 7007             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ 7007             >
 464+ 7007             >                // dummy db directives used to calculate length of namec
 464+ 7007 3F 45 52 52 >                db      "?ERROR"
 464+ 700B 4F 52       >
 464+ 700D             >len_NFA         defl    $ - temp_NFA
 464+ 700D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ 7007             >
 464+ 7007 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ 7008 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 464+ 700C 4F 52       >
 464+ 700E             >                org     $-1                 // alter last byte of Name just above to set
 464+ 700D D2          >                db      {b $} | END_BIT     // msb as name end
 464+ 700E             >
 464+ 700E F5 6F       >                dw      last_NFA            // Link to previous definition Name
 464+ 7010             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7010 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7013             >
 464+ 7013             >
 464+ 7013             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7013             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7013             >
 464+ 7013             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7013 4F 6A                        dw      SWAP                    // swap
 466+ 7015                                                              // if
 467+ 7015 D8 63                        dw      ZBRANCH
 468+ 7017 08 00                        dw      QError_Else - $
 469+ 7019 AD 75                        dw          ERROR               //      error  ( is a forward-ref )
 470+ 701B                                                              // else
 471+ 701B C3 63                        dw      BRANCH
 472+ 701D 04 00                        dw      QError_Endif - $
 473+ 701F              QError_Else:
 474+ 701F 2D 6A                        dw          DROP                //      drop
 475+ 7021              QError_Endif:                                   // endif
 476+ 7021 F7 68                        dw      EXIT                    // ;
 477+ 7023
 478+ 7023              //  ______________________________________________________________________
 479+ 7023              //
 480+ 7023              // ?comp       --
 481+ 7023              // raise msg #17 if not compiling
 482+ 7023                              Colon_Def QCOMP, "?COMP", is_normal
 482+ 7023             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 482+ 7023             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 482+ 7023             >
 482+ 7023             >                // dummy db directives used to calculate length of namec
 482+ 7023 3F 43 4F 4D >                db      "?COMP"
 482+ 7027 50          >
 482+ 7028             >len_NFA         defl    $ - temp_NFA
 482+ 7028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 482+ 7023             >
 482+ 7023 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 482+ 7024 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 482+ 7028 50          >
 482+ 7029             >                org     $-1                 // alter last byte of Name just above to set
 482+ 7028 D0          >                db      {b $} | END_BIT     // msb as name end
 482+ 7029             >
 482+ 7029 07 70       >                dw      last_NFA            // Link to previous definition Name
 482+ 702B             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 482+ 702B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 482+ 702E             >
 482+ 702E             >
 482+ 702E             >                endif           ; ok        // for other definitions it "points" the correct handler
 482+ 702E             >                // Use of "; ok" to suppress "warning[fwdref]"
 482+ 702E             >
 482+ 702E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 483+ 702E 93 6D DB 6A                  dw      STATE, FETCH            // state @
 484+ 7032 54 69                        dw      ZEQUAL                  // 0=
 485+ 7034 A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 486+ 7038 10 70                        dw      QERROR                  // ?error
 487+ 703A F7 68                        dw      EXIT                    // ;
 488+ 703C
 489+ 703C              //  ______________________________________________________________________
 490+ 703C              //
 491+ 703C              // ?exec       --
 492+ 703C              // raise msg #18 if compiling
 493+ 703C                              Colon_Def QEXEC, "?EXEC", is_normal
 493+ 703C             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 493+ 703C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 493+ 703C             >
 493+ 703C             >                // dummy db directives used to calculate length of namec
 493+ 703C 3F 45 58 45 >                db      "?EXEC"
 493+ 7040 43          >
 493+ 7041             >len_NFA         defl    $ - temp_NFA
 493+ 7041             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 493+ 703C             >
 493+ 703C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 493+ 703D 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 493+ 7041 43          >
 493+ 7042             >                org     $-1                 // alter last byte of Name just above to set
 493+ 7041 C3          >                db      {b $} | END_BIT     // msb as name end
 493+ 7042             >
 493+ 7042 23 70       >                dw      last_NFA            // Link to previous definition Name
 493+ 7044             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 493+ 7044 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 493+ 7047             >
 493+ 7047             >
 493+ 7047             >                endif           ; ok        // for other definitions it "points" the correct handler
 493+ 7047             >                // Use of "; ok" to suppress "warning[fwdref]"
 493+ 7047             >
 493+ 7047             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 494+ 7047 93 6D DB 6A                  dw      STATE, FETCH            // state @
 495+ 704B A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 496+ 704F 10 70                        dw      QERROR                  // ?error
 497+ 7051 F7 68                        dw      EXIT                    // ;
 498+ 7053
 499+ 7053              //  ______________________________________________________________________
 500+ 7053              //
 501+ 7053              // ?pairs       n1 n2 --
 502+ 7053              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 503+ 7053                              Colon_Def QPAIRS, "?PAIRS", is_normal
 503+ 7053             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 503+ 7053             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ 7053             >
 503+ 7053             >                // dummy db directives used to calculate length of namec
 503+ 7053 3F 50 41 49 >                db      "?PAIRS"
 503+ 7057 52 53       >
 503+ 7059             >len_NFA         defl    $ - temp_NFA
 503+ 7059             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ 7053             >
 503+ 7053 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ 7054 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 503+ 7058 52 53       >
 503+ 705A             >                org     $-1                 // alter last byte of Name just above to set
 503+ 7059 D3          >                db      {b $} | END_BIT     // msb as name end
 503+ 705A             >
 503+ 705A 3C 70       >                dw      last_NFA            // Link to previous definition Name
 503+ 705C             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 705C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 705F             >
 503+ 705F             >
 503+ 705F             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 705F             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 705F             >
 503+ 705F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 705F 8B 6E                        dw      SUBTRACT                // -
 505+ 7061 A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 506+ 7065 10 70                        dw      QERROR                  // ?error
 507+ 7067 F7 68                        dw      EXIT                    // ;
 508+ 7069
 509+ 7069              //  ______________________________________________________________________
 510+ 7069              //
 511+ 7069              // ?csp       --
 512+ 7069              // raise msg #20 if surrent SP in not what previously saved in CSP.
 513+ 7069              // Compiler relies on that for  syntax checking of structures
 514+ 7069                              Colon_Def QCSP, "?CSP", is_normal
 514+ 7069             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 514+ 7069             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 7069             >
 514+ 7069             >                // dummy db directives used to calculate length of namec
 514+ 7069 3F 43 53 50 >                db      "?CSP"
 514+ 706D             >len_NFA         defl    $ - temp_NFA
 514+ 706D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 7069             >
 514+ 7069 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 706A 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 514+ 706E             >                org     $-1                 // alter last byte of Name just above to set
 514+ 706D D0          >                db      {b $} | END_BIT     // msb as name end
 514+ 706E             >
 514+ 706E 53 70       >                dw      last_NFA            // Link to previous definition Name
 514+ 7070             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 7070 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 514+ 7073             >
 514+ 7073             >
 514+ 7073             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 7073             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 7073             >
 514+ 7073             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7073 C7 68                        dw      SPFETCH                 // sp@
 516+ 7075 BC 6D DB 6A                  dw      CSP, FETCH              // csp @
 517+ 7079 8B 6E                        dw      SUBTRACT                // -
 518+ 707B A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 519+ 707F 10 70                        dw      QERROR                  // ?error
 520+ 7081 F7 68                        dw      EXIT                    // ;
 521+ 7083
 522+ 7083              //  ______________________________________________________________________
 523+ 7083              //
 524+ 7083              // ?loading      --
 525+ 7083              // raise msg #22 if not loading
 526+ 7083                              Colon_Def QLOADING, "?LOADING", is_normal
 526+ 7083             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 526+ 7083             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 526+ 7083             >
 526+ 7083             >                // dummy db directives used to calculate length of namec
 526+ 7083 3F 4C 4F 41 >                db      "?LOADING"
 526+ 7087 44 49 4E 47 >
 526+ 708B             >len_NFA         defl    $ - temp_NFA
 526+ 708B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 526+ 7083             >
 526+ 7083 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 526+ 7084 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 526+ 7088 44 49 4E 47 >
 526+ 708C             >                org     $-1                 // alter last byte of Name just above to set
 526+ 708B C7          >                db      {b $} | END_BIT     // msb as name end
 526+ 708C             >
 526+ 708C 69 70       >                dw      last_NFA            // Link to previous definition Name
 526+ 708E             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 526+ 708E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 526+ 7091             >
 526+ 7091             >
 526+ 7091             >                endif           ; ok        // for other definitions it "points" the correct handler
 526+ 7091             >                // Use of "; ok" to suppress "warning[fwdref]"
 526+ 7091             >
 526+ 7091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 527+ 7091 40 6D DB 6A                  dw      BLK, FETCH              // blk @
 528+ 7095 54 69                        dw      ZEQUAL                  // 0=
 529+ 7097 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 530+ 709B 10 70                        dw      QERROR                  // ?error
 531+ 709D F7 68                        dw      EXIT                    // ;
 532+ 709F
 533+ 709F              //  ______________________________________________________________________
 534+ 709F              //
 535+ 709F              // compile      --
 536+ 709F              // compiles the following word
 537+ 709F                              Colon_Def COMPILE, "COMPILE", is_normal
 537+ 709F             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 537+ 709F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 537+ 709F             >
 537+ 709F             >                // dummy db directives used to calculate length of namec
 537+ 709F 43 4F 4D 50 >                db      "COMPILE"
 537+ 70A3 49 4C 45    >
 537+ 70A6             >len_NFA         defl    $ - temp_NFA
 537+ 70A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 537+ 709F             >
 537+ 709F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 537+ 70A0 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 537+ 70A4 49 4C 45    >
 537+ 70A7             >                org     $-1                 // alter last byte of Name just above to set
 537+ 70A6 C5          >                db      {b $} | END_BIT     // msb as name end
 537+ 70A7             >
 537+ 70A7 83 70       >                dw      last_NFA            // Link to previous definition Name
 537+ 70A9             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 537+ 70A9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 537+ 70AC             >
 537+ 70AC             >
 537+ 70AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 537+ 70AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 537+ 70AC             >
 537+ 70AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 70AC 2B 70                        dw      QCOMP                   // ?comp
 539+ 70AE 33 69                        dw      R_TO                    // r>
 540+ 70B0 5A 6A D1 69                  dw      DUP, CELL_PLUS          // dup, cell+
 541+ 70B4 21 69                        dw      TO_R                    // >r
 542+ 70B6 DB 6A 54 6E                  dw      FETCH, COMMA            // @ ,
 543+ 70BA F7 68                        dw      EXIT                    // ;
 544+ 70BC
 545+ 70BC              //  ______________________________________________________________________
 546+ 70BC              //
 547+ 70BC              // compile,     --
 548+ 70BC              // compiles the following word
 549+ 70BC                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 549+ 70BC             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 549+ 70BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 549+ 70BC             >
 549+ 70BC             >                // dummy db directives used to calculate length of namec
 549+ 70BC 43 4F 4D 50 >                db      "COMPILE,"
 549+ 70C0 49 4C 45 2C >
 549+ 70C4             >len_NFA         defl    $ - temp_NFA
 549+ 70C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 549+ 70BC             >
 549+ 70BC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 549+ 70BD 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 549+ 70C1 49 4C 45 2C >
 549+ 70C5             >                org     $-1                 // alter last byte of Name just above to set
 549+ 70C4 AC          >                db      {b $} | END_BIT     // msb as name end
 549+ 70C5             >
 549+ 70C5 9F 70       >                dw      last_NFA            // Link to previous definition Name
 549+ 70C7             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 549+ 70C7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 549+ 70CA             >
 549+ 70CA             >
 549+ 70CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 549+ 70CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 549+ 70CA             >
 549+ 70CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 550+ 70CA 2B 70                        dw      QCOMP                   // ?comp
 551+ 70CC 54 6E                        dw      COMMA                   // ,
 552+ 70CE F7 68                        dw      EXIT                    // ;
 553+ 70D0
 554+ 70D0              //  ______________________________________________________________________
 555+ 70D0              //
 556+ 70D0              // [            --
 557+ 70D0              // stop compilation
 558+ 70D0                              Colon_Def SQUARED_OPEN, "[", is_immediate
 558+ 70D0             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 558+ 70D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 558+ 70D0             >
 558+ 70D0             >                // dummy db directives used to calculate length of namec
 558+ 70D0 5B          >                db      "["
 558+ 70D1             >len_NFA         defl    $ - temp_NFA
 558+ 70D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 558+ 70D0             >
 558+ 70D0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 558+ 70D1 5B          >                db      "["               // name string in 7-bit ascii, but
 558+ 70D2             >                org     $-1                 // alter last byte of Name just above to set
 558+ 70D1 DB          >                db      {b $} | END_BIT     // msb as name end
 558+ 70D2             >
 558+ 70D2 BC 70       >                dw      last_NFA            // Link to previous definition Name
 558+ 70D4             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 558+ 70D4 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 558+ 70D7             >
 558+ 70D7             >
 558+ 70D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 558+ 70D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 558+ 70D7             >
 558+ 70D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 559+ 70D7 2C 6C                        dw      ZERO                    // 0
 560+ 70D9 93 6D E6 6A                  dw      STATE, STORE            // state !
 561+ 70DD F7 68                        dw      EXIT                    // ; immediate
 562+ 70DF
 563+ 70DF              //  ______________________________________________________________________
 564+ 70DF              //
 565+ 70DF              // ]            --
 566+ 70DF              // start compilation
 567+ 70DF                              Colon_Def SQUARED_CLOSE, "]", is_normal
 567+ 70DF             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 567+ 70DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 567+ 70DF             >
 567+ 70DF             >                // dummy db directives used to calculate length of namec
 567+ 70DF 5D          >                db      "]"
 567+ 70E0             >len_NFA         defl    $ - temp_NFA
 567+ 70E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 567+ 70DF             >
 567+ 70DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 567+ 70E0 5D          >                db      "]"               // name string in 7-bit ascii, but
 567+ 70E1             >                org     $-1                 // alter last byte of Name just above to set
 567+ 70E0 DD          >                db      {b $} | END_BIT     // msb as name end
 567+ 70E1             >
 567+ 70E1 D0 70       >                dw      last_NFA            // Link to previous definition Name
 567+ 70E3             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 567+ 70E3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 567+ 70E6             >
 567+ 70E6             >
 567+ 70E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 567+ 70E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 567+ 70E6             >
 567+ 70E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 568+ 70E6 A5 63 C0 00                  dw      LIT, $C0                // 192
 569+ 70EA 93 6D E6 6A                  dw      STATE, STORE            // state !
 570+ 70EE F7 68                        dw      EXIT                    // ;
 571+ 70F0
 572+ 70F0              //  ______________________________________________________________________
 573+ 70F0              //
 574+ 70F0              // smudge       --
 575+ 70F0              // toggle smudge bit of latest definition
 576+ 70F0                              Colon_Def SMUDGE, "SMUDGE", is_normal
 576+ 70F0             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 576+ 70F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ 70F0             >
 576+ 70F0             >                // dummy db directives used to calculate length of namec
 576+ 70F0 53 4D 55 44 >                db      "SMUDGE"
 576+ 70F4 47 45       >
 576+ 70F6             >len_NFA         defl    $ - temp_NFA
 576+ 70F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ 70F0             >
 576+ 70F0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ 70F1 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 576+ 70F5 47 45       >
 576+ 70F7             >                org     $-1                 // alter last byte of Name just above to set
 576+ 70F6 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ 70F7             >
 576+ 70F7 DF 70       >                dw      last_NFA            // Link to previous definition Name
 576+ 70F9             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 70F9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 70FC             >
 576+ 70FC             >
 576+ 70FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 70FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 70FC             >
 576+ 70FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 70FC 7E 6F                        dw      LATEST                  // latest
 578+ 70FE A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 579+ 7102 D0 6A                        dw      TOGGLE                  // toggle
 580+ 7104 F7 68                        dw      EXIT                    // ;
 581+ 7106
 582+ 7106              //  ______________________________________________________________________
 583+ 7106              //
 584+ 7106              // immediate    --
 585+ 7106              // make immediate the latest definition
 586+ 7106                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 586+ 7106             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 586+ 7106             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 7106             >
 586+ 7106             >                // dummy db directives used to calculate length of namec
 586+ 7106 49 4D 4D 45 >                db      "IMMEDIATE"
 586+ 710A 44 49 41 54 >
 586+ 710E 45          >
 586+ 710F             >len_NFA         defl    $ - temp_NFA
 586+ 710F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 7106             >
 586+ 7106 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 7107 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 586+ 710B 44 49 41 54 >
 586+ 710F 45          >
 586+ 7110             >                org     $-1                 // alter last byte of Name just above to set
 586+ 710F C5          >                db      {b $} | END_BIT     // msb as name end
 586+ 7110             >
 586+ 7110 F0 70       >                dw      last_NFA            // Link to previous definition Name
 586+ 7112             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 7112 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 7115             >
 586+ 7115             >
 586+ 7115             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 7115             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 7115             >
 586+ 7115             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 7115 7E 6F                        dw      LATEST                  // latest
 588+ 7117 A5 63 40 00                  dw      LIT, $40                // 64
 589+ 711B D0 6A                        dw      TOGGLE                  // toggle
 590+ 711D F7 68                        dw      EXIT                    // ;
 591+ 711F
 592+ 711F              //  ______________________________________________________________________
 593+ 711F              //
 594+ 711F              // hex          --
 595+ 711F              // change numeration base
 596+ 711F                              Colon_Def HEX, "HEX", is_normal
 596+ 711F             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 596+ 711F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 596+ 711F             >
 596+ 711F             >                // dummy db directives used to calculate length of namec
 596+ 711F 48 45 58    >                db      "HEX"
 596+ 7122             >len_NFA         defl    $ - temp_NFA
 596+ 7122             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 596+ 711F             >
 596+ 711F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 596+ 7120 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 596+ 7123             >                org     $-1                 // alter last byte of Name just above to set
 596+ 7122 D8          >                db      {b $} | END_BIT     // msb as name end
 596+ 7123             >
 596+ 7123 06 71       >                dw      last_NFA            // Link to previous definition Name
 596+ 7125             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 596+ 7125 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 596+ 7128             >
 596+ 7128             >
 596+ 7128             >                endif           ; ok        // for other definitions it "points" the correct handler
 596+ 7128             >                // Use of "; ok" to suppress "warning[fwdref]"
 596+ 7128             >
 596+ 7128             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 597+ 7128 A5 63 10 00                  dw      LIT, 16                 // 16
 598+ 712C 9E 6D E6 6A                  dw      BASE, STORE             // base !
 599+ 7130 F7 68                        dw      EXIT                    // ;
 600+ 7132
 601+ 7132              //  ______________________________________________________________________
 602+ 7132              //
 603+ 7132              // decimal      --
 604+ 7132              // change numeration base
 605+ 7132                              Colon_Def DECIMAL, "DECIMAL", is_normal
 605+ 7132             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 605+ 7132             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 605+ 7132             >
 605+ 7132             >                // dummy db directives used to calculate length of namec
 605+ 7132 44 45 43 49 >                db      "DECIMAL"
 605+ 7136 4D 41 4C    >
 605+ 7139             >len_NFA         defl    $ - temp_NFA
 605+ 7139             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 605+ 7132             >
 605+ 7132 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 605+ 7133 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 605+ 7137 4D 41 4C    >
 605+ 713A             >                org     $-1                 // alter last byte of Name just above to set
 605+ 7139 CC          >                db      {b $} | END_BIT     // msb as name end
 605+ 713A             >
 605+ 713A 1F 71       >                dw      last_NFA            // Link to previous definition Name
 605+ 713C             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 605+ 713C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 605+ 713F             >
 605+ 713F             >
 605+ 713F             >                endif           ; ok        // for other definitions it "points" the correct handler
 605+ 713F             >                // Use of "; ok" to suppress "warning[fwdref]"
 605+ 713F             >
 605+ 713F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 606+ 713F A5 63 0A 00                  dw      LIT, 10                 // 10
 607+ 7143 9E 6D E6 6A                  dw      BASE, STORE             // base !
 608+ 7147 F7 68                        dw      EXIT                    // ;
 609+ 7149
 610+ 7149              //  ______________________________________________________________________
 611+ 7149              //
 612+ 7149              // (;code)       --
 613+ 7149              // patch to CFA to call/jump to the "following code"
 614+ 7149                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 614+ 7149             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 614+ 7149             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ 7149             >
 614+ 7149             >                // dummy db directives used to calculate length of namec
 614+ 7149 28 3B 43 4F >                db      "(;CODE)"
 614+ 714D 44 45 29    >
 614+ 7150             >len_NFA         defl    $ - temp_NFA
 614+ 7150             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ 7149             >
 614+ 7149 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ 714A 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 614+ 714E 44 45 29    >
 614+ 7151             >                org     $-1                 // alter last byte of Name just above to set
 614+ 7150 A9          >                db      {b $} | END_BIT     // msb as name end
 614+ 7151             >
 614+ 7151 32 71       >                dw      last_NFA            // Link to previous definition Name
 614+ 7153             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 7153 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 7156             >
 614+ 7156             >
 614+ 7156             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 7156             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 7156             >
 614+ 7156             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 7156 33 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 616+ 7158 7E 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 617+ 715A C4 6F A0 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 618+ 715E
 619+ 715E A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 620+ 7162 1F 6A FE 6A                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 621+ 7166 AF 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 622+ 7168
 623+ 7168 E6 6A                        dw      STORE                   // !
 624+ 716A F7 68                        dw      EXIT                    // ;
 625+ 716C
 626+ 716C              //  ______________________________________________________________________
 627+ 716C              //
 628+ 716C              // ;code        --
 629+ 716C                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 629+ 716C             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 629+ 716C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 629+ 716C             >
 629+ 716C             >                // dummy db directives used to calculate length of namec
 629+ 716C 3B 43 4F 44 >                db      ";CODE"
 629+ 7170 45          >
 629+ 7171             >len_NFA         defl    $ - temp_NFA
 629+ 7171             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 629+ 716C             >
 629+ 716C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 629+ 716D 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 629+ 7171 45          >
 629+ 7172             >                org     $-1                 // alter last byte of Name just above to set
 629+ 7171 C5          >                db      {b $} | END_BIT     // msb as name end
 629+ 7172             >
 629+ 7172 49 71       >                dw      last_NFA            // Link to previous definition Name
 629+ 7174             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 629+ 7174 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 629+ 7177             >
 629+ 7177             >
 629+ 7177             >                endif           ; ok        // for other definitions it "points" the correct handler
 629+ 7177             >                // Use of "; ok" to suppress "warning[fwdref]"
 629+ 7177             >
 629+ 7177             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 630+ 7177 70 70                        dw      QCSP                    // ?csp
 631+ 7179 A9 70                        dw      COMPILE                 // compile
 632+ 717B 53 71                        dw      C_SEMICOLON_CODE        // (;code)
 633+ 717D D4 70                        dw      SQUARED_OPEN            // [
 634+ 717F D7 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 635+ 7181 F7 68                        dw      EXIT                    // ; immediate
 636+ 7183
 637+ 7183              //  ______________________________________________________________________
 638+ 7183              //
 639+ 7183              // <builds      --
 640+ 7183                              Colon_Def CBUILDS, "<BUILDS", is_normal
 640+ 7183             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 640+ 7183             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ 7183             >
 640+ 7183             >                // dummy db directives used to calculate length of namec
 640+ 7183 3C 42 55 49 >                db      "<BUILDS"
 640+ 7187 4C 44 53    >
 640+ 718A             >len_NFA         defl    $ - temp_NFA
 640+ 718A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ 7183             >
 640+ 7183 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ 7184 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 640+ 7188 4C 44 53    >
 640+ 718B             >                org     $-1                 // alter last byte of Name just above to set
 640+ 718A D3          >                db      {b $} | END_BIT     // msb as name end
 640+ 718B             >
 640+ 718B 6C 71       >                dw      last_NFA            // Link to previous definition Name
 640+ 718D             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 718D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 7190             >
 640+ 7190             >
 640+ 7190             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 7190             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 7190             >
 640+ 7190             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 7190 2C 6C                        dw      ZERO                    // 0
 642+ 7192 E7 6B                        dw      CONSTANT                // constant
 643+ 7194 F7 68                        dw      EXIT                    // ;
 644+ 7196
 645+ 7196              //  ______________________________________________________________________
 646+ 7196              //
 647+ 7196              // recurse      --
 648+ 7196              //              Colon_Def RECURSE, "RECURSE", is_immediate
 649+ 7196              //              dw      QCOMP                   // ?comp
 650+ 7196              //              dw      LATEST                  // latest
 651+ 7196              //              dw      PFA, CFA                // pfa cfa
 652+ 7196              //              dw      COMMA                   // ,
 653+ 7196              //              dw      EXIT                    // ; immediate
 654+ 7196
 655+ 7196              //  ______________________________________________________________________
 656+ 7196              //
 657+ 7196              // does>     --
 658+ 7196                              Colon_Def DOES_TO, "DOES>", is_normal
 658+ 7196             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 658+ 7196             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 658+ 7196             >
 658+ 7196             >                // dummy db directives used to calculate length of namec
 658+ 7196 44 4F 45 53 >                db      "DOES>"
 658+ 719A 3E          >
 658+ 719B             >len_NFA         defl    $ - temp_NFA
 658+ 719B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 658+ 7196             >
 658+ 7196 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 658+ 7197 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 658+ 719B 3E          >
 658+ 719C             >                org     $-1                 // alter last byte of Name just above to set
 658+ 719B BE          >                db      {b $} | END_BIT     // msb as name end
 658+ 719C             >
 658+ 719C 83 71       >                dw      last_NFA            // Link to previous definition Name
 658+ 719E             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 658+ 719E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 658+ 71A1             >
 658+ 71A1             >
 658+ 71A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 658+ 71A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 658+ 71A1             >
 658+ 71A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 659+ 71A1 33 69                        dw      R_TO                    // r>
 660+ 71A3 7E 6F                        dw      LATEST                  // latest
 661+ 71A5 C4 6F                        dw      PFA                     // pfa
 662+ 71A7 E6 6A                        dw      STORE                   // !
 663+ 71A9 53 71                        dw      C_SEMICOLON_CODE        // ;code
 664+ 71AB              Does_Ptr:
 665+ 71AB                              // via call coded in CFA
 666+ 71AB                              ldhlrp
 666+ 71AB 2A 96 63    >                ld      hl,(RP_Pointer)
 667+ 71AE 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 668+ 71AF 70                           ld      (hl), b
 669+ 71B0 2B                           dec     hl
 670+ 71B1 71                           ld      (hl), c
 671+ 71B2                              ldrphl
 671+ 71B2 22 96 63    >                ld      (RP_Pointer),hl
 672+ 71B5 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 673+ 71B6
 674+ 71B6 4E                           ld      c, (hl)
 675+ 71B7 23                           inc     hl
 676+ 71B8 46                           ld      b, (hl)
 677+ 71B9 23                           inc     hl
 678+ 71BA
 679+ 71BA                              psh1
 679+ 71BA E5          >                push    hl
 679+ 71BB DD E9       >                jp      (ix)
 680+ 71BD                              // SMUDGE !
 681+ 71BD
 682+ 71BD              //  ______________________________________________________________________
 683+ 71BD              //
 684+ 71BD              // count        a -- a2 n
 685+ 71BD              // expects a counted string at address a, returns string address and counter
 686+ 71BD                              Colon_Def COUNT, "COUNT", is_normal
 686+ 71BD             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 686+ 71BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 686+ 71BD             >
 686+ 71BD             >                // dummy db directives used to calculate length of namec
 686+ 71BD 43 4F 55 4E >                db      "COUNT"
 686+ 71C1 54          >
 686+ 71C2             >len_NFA         defl    $ - temp_NFA
 686+ 71C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 686+ 71BD             >
 686+ 71BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 686+ 71BE 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 686+ 71C2 54          >
 686+ 71C3             >                org     $-1                 // alter last byte of Name just above to set
 686+ 71C2 D4          >                db      {b $} | END_BIT     // msb as name end
 686+ 71C3             >
 686+ 71C3 96 71       >                dw      last_NFA            // Link to previous definition Name
 686+ 71C5             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 686+ 71C5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 686+ 71C8             >
 686+ 71C8             >
 686+ 71C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 686+ 71C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 686+ 71C8             >
 686+ 71C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 687+ 71C8 5A 6A                        dw      DUP                     // dup
 688+ 71CA AF 69                        dw      ONE_PLUS                // 1+
 689+ 71CC 4F 6A F2 6A                  dw      SWAP, CFETCH             // swap @
 690+ 71D0 F7 68                        dw      EXIT                    // ;
 691+ 71D2
 692+ 71D2              //  ______________________________________________________________________
 693+ 71D2              //
 694+ 71D2              // bounds       a n -- a+n n
 695+ 71D2              // given an address and a length ( a n ) calculate the bound addresses
 696+ 71D2              // suitable for DO-LOOP
 697+ 71D2                              Colon_Def BOUNDS, "BOUNDS", is_normal
 697+ 71D2             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 697+ 71D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 71D2             >
 697+ 71D2             >                // dummy db directives used to calculate length of namec
 697+ 71D2 42 4F 55 4E >                db      "BOUNDS"
 697+ 71D6 44 53       >
 697+ 71D8             >len_NFA         defl    $ - temp_NFA
 697+ 71D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 71D2             >
 697+ 71D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 71D3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 697+ 71D7 44 53       >
 697+ 71D9             >                org     $-1                 // alter last byte of Name just above to set
 697+ 71D8 D3          >                db      {b $} | END_BIT     // msb as name end
 697+ 71D9             >
 697+ 71D9 BD 71       >                dw      last_NFA            // Link to previous definition Name
 697+ 71DB             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 71DB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 697+ 71DE             >
 697+ 71DE             >
 697+ 71DE             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 71DE             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 71DE             >
 697+ 71DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 71DE 1F 6A 92 69                  dw      OVER, PLUS, SWAP        // over + swap
 698+ 71E2 4F 6A
 699+ 71E4 F7 68                        dw      EXIT                    // ;
 700+ 71E6
 701+ 71E6              //  ______________________________________________________________________
 702+ 71E6              //
 703+ 71E6              // type         a n --
 704+ 71E6              // Sends to current output channel n characters starting at address a.
 705+ 71E6                              Colon_Def TYPE, "TYPE", is_normal
 705+ 71E6             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 705+ 71E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 705+ 71E6             >
 705+ 71E6             >                // dummy db directives used to calculate length of namec
 705+ 71E6 54 59 50 45 >                db      "TYPE"
 705+ 71EA             >len_NFA         defl    $ - temp_NFA
 705+ 71EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 705+ 71E6             >
 705+ 71E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 705+ 71E7 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 705+ 71EB             >                org     $-1                 // alter last byte of Name just above to set
 705+ 71EA C5          >                db      {b $} | END_BIT     // msb as name end
 705+ 71EB             >
 705+ 71EB D2 71       >                dw      last_NFA            // Link to previous definition Name
 705+ 71ED             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 705+ 71ED CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 705+ 71F0             >
 705+ 71F0             >
 705+ 71F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 705+ 71F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 705+ 71F0             >
 705+ 71F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 706+ 71F0 DB 71                        dw      BOUNDS                  // bounds
 707+ 71F2 31 64                        dw      C_Q_DO                  // ?do
 708+ 71F4 0C 00                        dw      Type_Skip - $
 709+ 71F6              Type_Loop:
 710+ 71F6 66 64 F2 6A                  dw          I, CFETCH           //      i c@
 711+ 71FA 29 6F                        dw          EMIT                //      emit
 712+ 71FC 22 64                        dw      C_LOOP                  // loop
 713+ 71FE F8 FF                        dw      Type_Loop - $
 714+ 7200              Type_Skip:
 715+ 7200 F7 68                        dw      EXIT                    // ;
 716+ 7202
 717+ 7202              //  ______________________________________________________________________
 718+ 7202              //
 719+ 7202              // leave        --
 720+ 7202              // Compile (leave) to leave current LOOP and jump just after it
 721+ 7202                              Colon_Def LEAVE, "LEAVE", is_immediate
 721+ 7202             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 721+ 7202             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 7202             >
 721+ 7202             >                // dummy db directives used to calculate length of namec
 721+ 7202 4C 45 41 56 >                db      "LEAVE"
 721+ 7206 45          >
 721+ 7207             >len_NFA         defl    $ - temp_NFA
 721+ 7207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 7202             >
 721+ 7202 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 7203 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 721+ 7207 45          >
 721+ 7208             >                org     $-1                 // alter last byte of Name just above to set
 721+ 7207 C5          >                db      {b $} | END_BIT     // msb as name end
 721+ 7208             >
 721+ 7208 E6 71       >                dw      last_NFA            // Link to previous definition Name
 721+ 720A             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 720A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 720D             >
 721+ 720D             >
 721+ 720D             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 720D             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 720D             >
 721+ 720D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 720D A9 70 0D 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 723+ 7211 36 6E 21 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 723+ 7215 2C 6C 54 6E
 724+ 7219 2C 6C 2C 6C                  dw      ZERO, ZERO
 725+ 721D C7 68 5A 6A                  dw      SPFETCH, DUP
 726+ 7221 D1 69 D1 69                  dw      CELL_PLUS, CELL_PLUS
 727+ 7225 41 6A                        dw      TUCK
 728+ 7227 BC 6D DB 6A                  dw      CSP, FETCH
 729+ 722B 4F 6A 8B 6E                  dw      SWAP, SUBTRACT
 730+ 722F FD 67                        dw      CMOVE
 731+ 7231 BC 6D DB 6A                  dw      CSP, FETCH, CELL_MINUS
 731+ 7235 DC 69
 732+ 7237 33 69 1F 6A                  dw      R_TO, OVER, STORE
 732+ 723B E6 6A
 733+ 723D DC 69 2C 6C                  dw      CELL_MINUS, ZERO
 734+ 7241 4F 6A E6 6A                  dw      SWAP, STORE
 735+ 7245 F7 68                        dw      EXIT                    // ;
 736+ 7247
 737+ 7247              //  ______________________________________________________________________
 738+ 7247              //
 739+ 7247              // -trailing    a n1 -- a n2
 740+ 7247              // Assumes that an n1 bytes-long string is stored at address a
 741+ 7247              // and the string contains a space delimited word,
 742+ 7247              // Finds n2 as the position of the first character after the word.
 743+ 7247                              Colon_Def LTRAILING, "-TRAILING", is_normal
 743+ 7247             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 743+ 7247             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 743+ 7247             >
 743+ 7247             >                // dummy db directives used to calculate length of namec
 743+ 7247 2D 54 52 41 >                db      "-TRAILING"
 743+ 724B 49 4C 49 4E >
 743+ 724F 47          >
 743+ 7250             >len_NFA         defl    $ - temp_NFA
 743+ 7250             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 743+ 7247             >
 743+ 7247 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 743+ 7248 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 743+ 724C 49 4C 49 4E >
 743+ 7250 47          >
 743+ 7251             >                org     $-1                 // alter last byte of Name just above to set
 743+ 7250 C7          >                db      {b $} | END_BIT     // msb as name end
 743+ 7251             >
 743+ 7251 02 72       >                dw      last_NFA            // Link to previous definition Name
 743+ 7253             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 743+ 7253 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 743+ 7256             >
 743+ 7256             >
 743+ 7256             >                endif           ; ok        // for other definitions it "points" the correct handler
 743+ 7256             >                // Use of "; ok" to suppress "warning[fwdref]"
 743+ 7256             >
 743+ 7256             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 744+ 7256 5A 6A 2C 6C                  dw      DUP, ZERO               // dup 0
 745+ 725A                                                              // do
 746+ 725A 31 64                        dw      C_Q_DO
 747+ 725C 20 00                        dw      LTrailing_Leave - $
 748+ 725E              LTrailing_Loop:
 749+ 725E AF 6A 92 69                  dw          TWO_DUP, PLUS       //      2dup +
 750+ 7262 B9 69                        dw          ONE_SUBTRACT        //      1-
 751+ 7264 F2 6A                        dw          CFETCH              //      c@
 752+ 7266 5B 6C 8B 6E                  dw          BL, SUBTRACT        //      bl -
 753+ 726A                                                              //      if
 754+ 726A D8 63                        dw          ZBRANCH
 755+ 726C 0A 00                        dw          LTrailing_Else - $
 756+ 726E 0D 69                        dw              C_LEAVE         //          leave
 757+ 7270 0C 00                        dw              LTrailing_Leave - $
 758+ 7272 C3 63                        dw          BRANCH              //      else
 759+ 7274 04 00                        dw          LTrailing_Endif - $
 760+ 7276              LTrailing_Else:
 761+ 7276 B9 69                        dw              ONE_SUBTRACT    //          1-
 762+ 7278              LTrailing_Endif:                                //      endif
 763+ 7278                                                              // loop
 764+ 7278 22 64                        dw      C_LOOP
 765+ 727A E4 FF                        dw      LTrailing_Loop - $
 766+ 727C              LTrailing_Leave:
 767+ 727C F7 68                        dw      EXIT                    // ;
 768+ 727E
 769+ 727E              //  ______________________________________________________________________
 770+ 727E              //
 771+ 727E              // accept       a n1 -- n2
 772+ 727E              // Accepts at most n1 characters from terminal and stores them at address a
 773+ 727E              // CR stops input. A 'nul' is added as trailer.
 774+ 727E              // n2 is the string length. n2 is kept in span user variable also.
 775+ 727E                              Colon_Def ACCEPT, "ACCEPT", is_normal
 775+ 727E             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 775+ 727E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 775+ 727E             >
 775+ 727E             >                // dummy db directives used to calculate length of namec
 775+ 727E 41 43 43 45 >                db      "ACCEPT"
 775+ 7282 50 54       >
 775+ 7284             >len_NFA         defl    $ - temp_NFA
 775+ 7284             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 775+ 727E             >
 775+ 727E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 775+ 727F 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 775+ 7283 50 54       >
 775+ 7285             >                org     $-1                 // alter last byte of Name just above to set
 775+ 7284 D4          >                db      {b $} | END_BIT     // msb as name end
 775+ 7285             >
 775+ 7285 47 72       >                dw      last_NFA            // Link to previous definition Name
 775+ 7287             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 775+ 7287 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 775+ 728A             >
 775+ 728A             >
 775+ 728A             >                endif           ; ok        // for other definitions it "points" the correct handler
 775+ 728A             >                // Use of "; ok" to suppress "warning[fwdref]"
 775+ 728A             >
 775+ 728A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 776+ 728A 1F 6A 92 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 776+ 728E 1F 6A
 777+ 7290 2C 6C 73 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 778+ 7294                                                              // do
 779+ 7294 31 64                        dw      C_Q_DO
 780+ 7296 8A 00                        dw      Accept_Leave - $
 781+ 7298              Accept_Loop:
 782+ 7298 2D 6A 6B 66                  dw          DROP, KEY           //      drop key        ( a  c )
 783+ 729C 5A 6A                        dw          DUP                 //      dup             ( a  c  c )
 784+ 729E A5 63 0E 00                  dw          LIT, $0E            //      0E
 785+ 72A2 9C 6C                        dw          PLUS_ORIGIN         //      +origin
 786+ 72A4 DB 6A                        dw          FETCH               //      @               ( a  c  c  del )
 787+ 72A6 97 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 788+ 72A8                                                              //      if
 789+ 72A8 D8 63                        dw          ZBRANCH
 790+ 72AA 2C 00                        dw          Accept_Else_0 - $
 791+ 72AC 2D 6A                        dw              DROP            //          drop        ( a  )
 792+ 72AE 5A 6A 66 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 792+ 72B2 97 6E
 793+ 72B4 35 6C 95 68                  dw              ONE, AND_OP     //          1 and
 794+ 72B8 5A 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 795+ 72BA 33 69                        dw              R_TO            //          r> 2 - + r>
 796+ 72BC E7 69 92 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 797+ 72C0 21 69                        dw              TO_R            //
 798+ 72C2                                                              //          if
 799+ 72C2 D8 63                        dw              ZBRANCH
 800+ 72C4 0A 00                        dw              Accept_Else_1 - $
 801+ 72C6 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 802+ 72CA                                                              //          else
 803+ 72CA C3 63                        dw              BRANCH
 804+ 72CC 06 00                        dw              Accept_Endif_1 - $
 805+ 72CE              Accept_Else_1:
 806+ 72CE A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 807+ 72D2              Accept_Endif_1:                                 //          endif
 808+ 72D2 C3 63                        dw          BRANCH
 809+ 72D4 2E 00                        dw          Accept_Endif_0 - $
 810+ 72D6              Accept_Else_0:                                  //      else
 811+ 72D6 5A 6A                        dw              DUP             //          dup         ( a  c  c )
 812+ 72D8 A5 63 0D 00                  dw              LIT, 13         //          13
 813+ 72DC 97 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 814+ 72DE                                                              //          if
 815+ 72DE D8 63                        dw              ZBRANCH
 816+ 72E0 0C 00                        dw              Accept_Else_2 - $
 817+ 72E2 2D 6A 5B 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 818+ 72E6 2C 6C                        dw                  ZERO        //              0       ( a  c  0 )
 819+ 72E8                                                              //          else
 820+ 72E8 C3 63                        dw              BRANCH
 821+ 72EA 04 00                        dw              Accept_Endif_2 - $
 822+ 72EC              Accept_Else_2:
 823+ 72EC 5A 6A                        dw                  DUP         //              dup     ( a  c  c )
 824+ 72EE                                                              //          endif
 825+ 72EE              Accept_Endif_2:
 826+ 72EE 66 64 FE 6A                  dw              I, CSTORE       //          i           ( a  c )
 827+ 72F2 5A 6A 5B 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 827+ 72F6 B7 6E
 828+ 72F8                                                              //          if
 829+ 72F8 D8 63                        dw              ZBRANCH
 830+ 72FA 08 00                        dw              Accept_Endif_3 - $
 831+ 72FC 33 69                        dw                  R_TO        //              r>
 832+ 72FE B9 69                        dw                  ONE_SUBTRACT//              1-
 833+ 7300 21 69                        dw                  TO_R        //              >r
 834+ 7302                                                              //          endif
 835+ 7302              Accept_Endif_3:
 836+ 7302              Accept_Endif_0:                                 //      endif
 837+ 7302 29 6F                        dw          EMIT                //      emit
 838+ 7304 2C 6C 66 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 838+ 7308 AF 69
 839+ 730A E6 6A                        dw          STORE               //          ( zero pad )
 840+ 730C 66 64                        dw          I                   //      i
 841+ 730E 66 64 F2 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 841+ 7312 54 69
 842+ 7314 D8 63                        dw          ZBRANCH             //
 843+ 7316 06 00                        dw              Accept_Endif_4 - $
 844+ 7318 0D 69                        dw                  C_LEAVE     //              leave
 845+ 731A 06 00                        dw                  Accept_Leave - $
 846+ 731C              Accept_Endif_4:                                 //      endif
 847+ 731C                                                              // loop
 848+ 731C 22 64                        dw      C_LOOP
 849+ 731E 7A FF                        dw      Accept_Loop - $
 850+ 7320              Accept_Leave:
 851+ 7320 4F 6A 8B 6E                  dw      SWAP, SUBTRACT          // swap -
 852+ 7324 AF 69                        dw      ONE_PLUS                // 1+
 853+ 7326 5A 6A 14 6E                  dw      DUP, SPAN, STORE        // dup span !
 853+ 732A E6 6A
 854+ 732C F7 68                        dw      EXIT                    // ;
 855+ 732E
 856+ 732E              //  ______________________________________________________________________
 857+ 732E              //
 858+ 732E              // expect      a n --
 859+ 732E              // Accepts at most n1 characters from terminal and stores them at address a
 860+ 732E              // CR stops input. A 'nul' is added as trailer.
 861+ 732E              // n2 is the string length. n2 is kept in span user variable also.
 862+ 732E              //              Colon_Def EXPECT, "EXPECT", is_normal
 863+ 732E              //              dw      ACCEPT, DROP            // accept drop
 864+ 732E              //              dw      EXIT                    // ;
 865+ 732E
 866+ 732E              //  ______________________________________________________________________
 867+ 732E              //
 868+ 732E              // query        --
 869+ 732E              // Accept at most 80 character from console. CR stops.
 870+ 732E              // Text is stored in TIB. Variable IN is zeroed.
 871+ 732E                              Colon_Def QUERY, "QUERY", is_normal
 871+ 732E             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 871+ 732E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 732E             >
 871+ 732E             >                // dummy db directives used to calculate length of namec
 871+ 732E 51 55 45 52 >                db      "QUERY"
 871+ 7332 59          >
 871+ 7333             >len_NFA         defl    $ - temp_NFA
 871+ 7333             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 732E             >
 871+ 732E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 732F 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 871+ 7333 59          >
 871+ 7334             >                org     $-1                 // alter last byte of Name just above to set
 871+ 7333 D9          >                db      {b $} | END_BIT     // msb as name end
 871+ 7334             >
 871+ 7334 7E 72       >                dw      last_NFA            // Link to previous definition Name
 871+ 7336             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 7336 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 7339             >
 871+ 7339             >
 871+ 7339             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 7339             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 7339             >
 871+ 7339             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 7339 CA 6C DB 6A                  dw      TIB, FETCH              // tib @
 873+ 733D A5 63 50 00                  dw      LIT, 80                 // 80
 874+ 7341 87 72 2D 6A                  dw      ACCEPT, DROP            // accept drop
 875+ 7345 2C 6C 4A 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 875+ 7349 E6 6A
 876+ 734B F7 68                        dw      EXIT                    // ;
 877+ 734D
 878+ 734D              //  ______________________________________________________________________
 879+ 734D              //
 880+ 734D              // fill        a n c --
 881+ 734D              // If n > 0, fills n locations starting from address a with the value c.
 882+ 734D                              New_Def FILL, "FILL", is_code, is_normal
 882+ 734D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 734D             >
 882+ 734D             >                // dummy db directives used to calculate length of namec
 882+ 734D 46 49 4C 4C >                db      "FILL"
 882+ 7351             >len_NFA         defl    $ - temp_NFA
 882+ 7351             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 734D             >
 882+ 734D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 734E 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 882+ 7352             >                org     $-1                 // alter last byte of Name just above to set
 882+ 7351 CC          >                db      {b $} | END_BIT     // msb as name end
 882+ 7352             >
 882+ 7352 2E 73       >                dw      last_NFA            // Link to previous definition Name
 882+ 7354             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 7354 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 882+ 7354 ~           >
 882+ 7354 ~           >
 882+ 7354             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 7354             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 7354             >
 882+ 7354             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 7354 D9                           exx
 884+ 7355 D1                           pop     de                  // de has character
 885+ 7356 C1                           pop     bc                  // bc has counter
 886+ 7357 E1                           pop     hl                  // hl has address, save Instruction Pointer
 887+ 7358              Fill_Loop:
 888+ 7358 78                               ld      a, b
 889+ 7359 B1                               or      c
 890+ 735A 28 05                        jr      z, Fill_While_End
 891+ 735C 73                               ld      (hl), e
 892+ 735D 0B                               dec     bc
 893+ 735E 23                               inc     hl
 894+ 735F 18 F7                        jr      Fill_Loop
 895+ 7361              Fill_While_End:
 896+ 7361 D9                           exx
 897+ 7362                              next
 897+ 7362 DD E9       >                jp      (ix)
 898+ 7364
 899+ 7364              //  ______________________________________________________________________
 900+ 7364              //
 901+ 7364              // erase        a n --
 902+ 7364              // If n > 0, fills n locations starting from address a with 'nul' characters.
 903+ 7364                              Colon_Def ERASE, "ERASE", is_normal
 903+ 7364             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 903+ 7364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 7364             >
 903+ 7364             >                // dummy db directives used to calculate length of namec
 903+ 7364 45 52 41 53 >                db      "ERASE"
 903+ 7368 45          >
 903+ 7369             >len_NFA         defl    $ - temp_NFA
 903+ 7369             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 7364             >
 903+ 7364 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 7365 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 903+ 7369 45          >
 903+ 736A             >                org     $-1                 // alter last byte of Name just above to set
 903+ 7369 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 736A             >
 903+ 736A 4D 73       >                dw      last_NFA            // Link to previous definition Name
 903+ 736C             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 736C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 736F             >
 903+ 736F             >
 903+ 736F             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 736F             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 736F             >
 903+ 736F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 736F 2C 6C 54 73                  dw      ZERO, FILL              // 0 fill
 905+ 7373 F7 68                        dw      EXIT                    // ;
 906+ 7375
 907+ 7375              //  ______________________________________________________________________
 908+ 7375              //
 909+ 7375              // blanks       a n --
 910+ 7375              // If n > 0, fills n locations starting from address a with 'nul' characters.
 911+ 7375                              Colon_Def BLANKS, "BLANKS", is_normal
 911+ 7375             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 911+ 7375             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ 7375             >
 911+ 7375             >                // dummy db directives used to calculate length of namec
 911+ 7375 42 4C 41 4E >                db      "BLANKS"
 911+ 7379 4B 53       >
 911+ 737B             >len_NFA         defl    $ - temp_NFA
 911+ 737B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ 7375             >
 911+ 7375 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ 7376 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 911+ 737A 4B 53       >
 911+ 737C             >                org     $-1                 // alter last byte of Name just above to set
 911+ 737B D3          >                db      {b $} | END_BIT     // msb as name end
 911+ 737C             >
 911+ 737C 64 73       >                dw      last_NFA            // Link to previous definition Name
 911+ 737E             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 737E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 7381             >
 911+ 7381             >
 911+ 7381             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 7381             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 7381             >
 911+ 7381             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 7381 5B 6C 54 73                  dw      BL, FILL                // bl fill
 913+ 7385 F7 68                        dw      EXIT                    // ;
 914+ 7387
 915+ 7387              //  ______________________________________________________________________
 916+ 7387              //
 917+ 7387              // hold         c --
 918+ 7387              // Used between <# and #> to insert a character c in numeric formatting.
 919+ 7387                              Colon_Def HOLD, "HOLD", is_normal
 919+ 7387             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 919+ 7387             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 7387             >
 919+ 7387             >                // dummy db directives used to calculate length of namec
 919+ 7387 48 4F 4C 44 >                db      "HOLD"
 919+ 738B             >len_NFA         defl    $ - temp_NFA
 919+ 738B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 7387             >
 919+ 7387 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 7388 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 919+ 738C             >                org     $-1                 // alter last byte of Name just above to set
 919+ 738B C4          >                db      {b $} | END_BIT     // msb as name end
 919+ 738C             >
 919+ 738C 75 73       >                dw      last_NFA            // Link to previous definition Name
 919+ 738E             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 738E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 7391             >
 919+ 7391             >
 919+ 7391             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 7391             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 7391             >
 919+ 7391             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 7391 51 6C                        dw      NEG_ONE                 // -1
 921+ 7393 CF 6D BC 6A                  dw      HLD, PLUSSTORE          // hld +!
 922+ 7397 CF 6D DB 6A                  dw      HLD, FETCH, CSTORE      // hld @ c!
 922+ 739B FE 6A
 923+ 739D F7 68                        dw      EXIT                    // ;
 924+ 739F
 925+ 739F              //  ______________________________________________________________________
 926+ 739F              //
 927+ 739F              // pad         -- a
 928+ 739F              // leaves the buffer text address. This is at a fixed distance over HERE.
 929+ 739F                              Colon_Def PAD, "PAD", is_normal
 929+ 739F             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 929+ 739F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ 739F             >
 929+ 739F             >                // dummy db directives used to calculate length of namec
 929+ 739F 50 41 44    >                db      "PAD"
 929+ 73A2             >len_NFA         defl    $ - temp_NFA
 929+ 73A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ 739F             >
 929+ 739F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ 73A0 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 929+ 73A3             >                org     $-1                 // alter last byte of Name just above to set
 929+ 73A2 C4          >                db      {b $} | END_BIT     // msb as name end
 929+ 73A3             >
 929+ 73A3 87 73       >                dw      last_NFA            // Link to previous definition Name
 929+ 73A5             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 73A5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 73A8             >
 929+ 73A8             >
 929+ 73A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 73A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 73A8             >
 929+ 73A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 73A8 36 6E                        dw      HERE                    // here
 931+ 73AA A5 63 44 00                  dw      LIT, 68                 // 68
 932+ 73AE 92 69                        dw      PLUS                    // +
 933+ 73B0 F7 68                        dw      EXIT                    // ;
 934+ 73B2
 935+ 73B2              //  ______________________________________________________________________
 936+ 73B2              //
 937+ 73B2              // word         c -- a
 938+ 73B2              // reads characters from input streams until it encouners a c delimiter.
 939+ 73B2              // Stores that packet so it starts from HERE
 940+ 73B2              // WORD leaves a counter as first byte and ends the packet with two spaces.
 941+ 73B2              // Other occurrences of c are ignored.
 942+ 73B2              // If BLK is zero, text is taken from terminal buffer TIB.
 943+ 73B2              // Otherwise text is taken from the disk-block given by BLK.
 944+ 73B2              // "in" variable is incremented of the number of character read.
 945+ 73B2              // The number of characters read is given by ENCLOSE.
 946+ 73B2                              Colon_Def WORD, "WORD", is_normal
 946+ 73B2             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 946+ 73B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ 73B2             >
 946+ 73B2             >                // dummy db directives used to calculate length of namec
 946+ 73B2 57 4F 52 44 >                db      "WORD"
 946+ 73B6             >len_NFA         defl    $ - temp_NFA
 946+ 73B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ 73B2             >
 946+ 73B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ 73B3 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 946+ 73B7             >                org     $-1                 // alter last byte of Name just above to set
 946+ 73B6 C4          >                db      {b $} | END_BIT     // msb as name end
 946+ 73B7             >
 946+ 73B7 9F 73       >                dw      last_NFA            // Link to previous definition Name
 946+ 73B9             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 73B9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 73BC             >
 946+ 73BC             >
 946+ 73BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 73BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 73BC             >
 946+ 73BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 73BC 40 6D DB 6A                  dw      BLK, FETCH              // blk @
 948+ 73C0                                                              // if
 949+ 73C0 D8 63                        dw      ZBRANCH
 950+ 73C2 0C 00                        dw      Word_Else - $
 951+ 73C4 40 6D DB 6A                  dw          BLK, FETCH          //      blk @
 952+ 73C8 88 7D                        dw          BLOCK               //      block ( forward )
 953+ 73CA                                                              // else
 954+ 73CA C3 63                        dw      BRANCH
 955+ 73CC 06 00                        dw      Word_Endif - $
 956+ 73CE              Word_Else:
 957+ 73CE CA 6C DB 6A                  dw         TIB, FETCH           //      tib @
 958+ 73D2              Word_Endif:                                     // endif
 959+ 73D2 4A 6D DB 6A                  dw      TO_IN, FETCH, PLUS      // >in @ +
 959+ 73D6 92 69
 960+ 73D8 4F 6A 46 65                  dw      SWAP, ENCLOSE           // swap enclose
 961+ 73DC 36 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 961+ 73E0 22 00 7E 73
 962+ 73E4 4A 6D BC 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 963+ 73E8 1F 6A 8B 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 963+ 73EC 21 69
 964+ 73EE 45 69 36 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 964+ 73F2 FE 6A
 965+ 73F4 92 69                        dw      PLUS                    // +
 966+ 73F6 36 6E AF 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 966+ 73FA 33 69
 967+ 73FC FD 67                        dw      CMOVE                   // cmove
 968+ 73FE 36 6E                        dw      HERE                    // here
 969+ 7400 F7 68                        dw      EXIT                    // ;
 970+ 7402
 971+ 7402              //  ______________________________________________________________________
 972+ 7402              //
 973+ 7402              // (.")         --
 974+ 7402              // Direct procedure compiled by ." and  .(  It executes TYPE.
 975+ 7402                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 975+ 7402             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 975+ 7402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 975+ 7402             >
 975+ 7402             >                // dummy db directives used to calculate length of namec
 975+ 7402 28 2E 22 29 >                db      '(.")'
 975+ 7406             >len_NFA         defl    $ - temp_NFA
 975+ 7406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 975+ 7402             >
 975+ 7402 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 975+ 7403 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 975+ 7407             >                org     $-1                 // alter last byte of Name just above to set
 975+ 7406 A9          >                db      {b $} | END_BIT     // msb as name end
 975+ 7407             >
 975+ 7407 B2 73       >                dw      last_NFA            // Link to previous definition Name
 975+ 7409             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 975+ 7409 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 975+ 740C             >
 975+ 740C             >
 975+ 740C             >                endif           ; ok        // for other definitions it "points" the correct handler
 975+ 740C             >                // Use of "; ok" to suppress "warning[fwdref]"
 975+ 740C             >
 975+ 740C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 976+ 740C 45 69 C5 71                  dw      R_OP, COUNT             // r count
 977+ 7410 5A 6A AF 69                  dw      DUP, ONE_PLUS           // dup 1+
 978+ 7414 33 69 92 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 978+ 7418 21 69
 979+ 741A ED 71                        dw      TYPE                    // type
 980+ 741C F7 68                        dw      EXIT                    // ;
 981+ 741E
 982+ 741E              //  ______________________________________________________________________
 983+ 741E              //
 984+ 741E              // char         -- c
 985+ 741E              // get first character from next input word
 986+ 741E                              Colon_Def CHAR,  "CHAR", is_normal
 986+ 741E             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 986+ 741E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 986+ 741E             >
 986+ 741E             >                // dummy db directives used to calculate length of namec
 986+ 741E 43 48 41 52 >                db      "CHAR"
 986+ 7422             >len_NFA         defl    $ - temp_NFA
 986+ 7422             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 986+ 741E             >
 986+ 741E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 986+ 741F 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 986+ 7423             >                org     $-1                 // alter last byte of Name just above to set
 986+ 7422 D2          >                db      {b $} | END_BIT     // msb as name end
 986+ 7423             >
 986+ 7423 02 74       >                dw      last_NFA            // Link to previous definition Name
 986+ 7425             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 986+ 7425 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 986+ 7428             >
 986+ 7428             >
 986+ 7428             >                endif           ; ok        // for other definitions it "points" the correct handler
 986+ 7428             >                // Use of "; ok" to suppress "warning[fwdref]"
 986+ 7428             >
 986+ 7428             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 987+ 7428 5B 6C B9 73                  dw      BL, WORD                // bl word
 988+ 742C AF 69 F2 6A                  dw      ONE_PLUS, CFETCH        // 1+ c@
 989+ 7430 F7 68                        dw      EXIT                    // ;
 990+ 7432
 991+ 7432              //  ______________________________________________________________________
 992+ 7432              //
 993+ 7432              // ,"           --
 994+ 7432              // compiles a string terminated by " as a counted string from next input stream
 995+ 7432                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 995+ 7432             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 995+ 7432             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 995+ 7432             >
 995+ 7432             >                // dummy db directives used to calculate length of namec
 995+ 7432 2C 22       >                db      ',"'
 995+ 7434             >len_NFA         defl    $ - temp_NFA
 995+ 7434             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 995+ 7432             >
 995+ 7432 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 995+ 7433 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 995+ 7435             >                org     $-1                 // alter last byte of Name just above to set
 995+ 7434 A2          >                db      {b $} | END_BIT     // msb as name end
 995+ 7435             >
 995+ 7435 1E 74       >                dw      last_NFA            // Link to previous definition Name
 995+ 7437             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 995+ 7437 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 995+ 743A             >
 995+ 743A             >
 995+ 743A             >                endif           ; ok        // for other definitions it "points" the correct handler
 995+ 743A             >                // Use of "; ok" to suppress "warning[fwdref]"
 995+ 743A             >
 995+ 743A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 996+ 743A A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 997+ 743E B9 73                        dw      WORD                    // word
 998+ 7440 F2 6A AF 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 999+ 7444 47 6E                        dw      ALLOT                   // allot
1000+ 7446 2C 6C 66 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1001+ 744A F7 68                        dw      EXIT
1002+ 744C
1003+ 744C              //  ______________________________________________________________________
1004+ 744C              //
1005+ 744C              // .c           c --
1006+ 744C              // intermediate general purpose string builder, used by ." and .(
1007+ 744C                              Colon_Def DOT_C,  ".C", is_immediate
1007+ 744C             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1007+ 744C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 744C             >
1007+ 744C             >                // dummy db directives used to calculate length of namec
1007+ 744C 2E 43       >                db      ".C"
1007+ 744E             >len_NFA         defl    $ - temp_NFA
1007+ 744E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 744C             >
1007+ 744C C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 744D 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1007+ 744F             >                org     $-1                 // alter last byte of Name just above to set
1007+ 744E C3          >                db      {b $} | END_BIT     // msb as name end
1007+ 744F             >
1007+ 744F 32 74       >                dw      last_NFA            // Link to previous definition Name
1007+ 7451             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 7451 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 7454             >
1007+ 7454             >
1007+ 7454             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 7454             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 7454             >
1007+ 7454             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 7454 93 6D DB 6A                  dw      STATE, FETCH            // state @
1009+ 7458                                                              // if
1010+ 7458 D8 63                        dw      ZBRANCH
1011+ 745A 12 00                        dw      Dot_C_Else - $
1012+ 745C A9 70 09 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1013+ 7460 B9 73 F2 6A                  dw          WORD, CFETCH        //      word c@
1014+ 7464 AF 69 47 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1015+ 7468                                                              // else
1016+ 7468 C3 63                        dw      BRANCH
1017+ 746A 08 00                        dw      Dot_C_Endif - $
1018+ 746C              Dot_C_Else:
1019+ 746C B9 73 C5 71                  dw          WORD, COUNT, TYPE   //      word count type
1019+ 7470 ED 71
1020+ 7472              Dot_C_Endif:                                    // endif
1021+ 7472 F7 68                        dw      EXIT                    ;
1022+ 7474
1023+ 7474              //  ______________________________________________________________________
1024+ 7474              //
1025+ 7474              // ."           c --
1026+ 7474                              Colon_Def DOT_QUOTE,  '."', is_immediate
1026+ 7474             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1026+ 7474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 7474             >
1026+ 7474             >                // dummy db directives used to calculate length of namec
1026+ 7474 2E 22       >                db      '."'
1026+ 7476             >len_NFA         defl    $ - temp_NFA
1026+ 7476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 7474             >
1026+ 7474 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 7475 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1026+ 7477             >                org     $-1                 // alter last byte of Name just above to set
1026+ 7476 A2          >                db      {b $} | END_BIT     // msb as name end
1026+ 7477             >
1026+ 7477 4C 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 7479             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 7479 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 747C             >
1026+ 747C             >
1026+ 747C             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 747C             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 747C             >
1026+ 747C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 747C A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1028+ 7480 51 74                        dw      DOT_C                   // [compile] .c
1029+ 7482 F7 68                        dw      EXIT                    // ; immediate
1030+ 7484
1031+ 7484              //  ______________________________________________________________________
1032+ 7484              //
1033+ 7484              // .(           c --
1034+ 7484                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1034+ 7484             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1034+ 7484             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ 7484             >
1034+ 7484             >                // dummy db directives used to calculate length of namec
1034+ 7484 2E 28       >                db      ".("
1034+ 7486             >len_NFA         defl    $ - temp_NFA
1034+ 7486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ 7484             >
1034+ 7484 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ 7485 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1034+ 7487             >                org     $-1                 // alter last byte of Name just above to set
1034+ 7486 A8          >                db      {b $} | END_BIT     // msb as name end
1034+ 7487             >
1034+ 7487 74 74       >                dw      last_NFA            // Link to previous definition Name
1034+ 7489             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 7489 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1034+ 748C             >
1034+ 748C             >
1034+ 748C             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 748C             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 748C             >
1034+ 748C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 748C A5 63 29 00                  dw      LIT, ")"                // [char] )
1036+ 7490 51 74                        dw      DOT_C                   // [compile] .c
1037+ 7492 F7 68                        dw      EXIT                    // ; immediate
1038+ 7494
1039+ 7494              //  ______________________________________________________________________
1040+ 7494              //
1041+ 7494              // (sgn)        a -- a f
1042+ 7494              // determines if char in addr a is a sign (+ or -), and in that case increments
1043+ 7494              // a flag. Returns f as the sign, true for negative, false for positive.
1044+ 7494              // called by NUMBER and (EXP)
1045+ 7494                              Colon_Def CSGN,  "(SGN)", is_normal
1045+ 7494             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1045+ 7494             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1045+ 7494             >
1045+ 7494             >                // dummy db directives used to calculate length of namec
1045+ 7494 28 53 47 4E >                db      "(SGN)"
1045+ 7498 29          >
1045+ 7499             >len_NFA         defl    $ - temp_NFA
1045+ 7499             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1045+ 7494             >
1045+ 7494 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1045+ 7495 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1045+ 7499 29          >
1045+ 749A             >                org     $-1                 // alter last byte of Name just above to set
1045+ 7499 A9          >                db      {b $} | END_BIT     // msb as name end
1045+ 749A             >
1045+ 749A 84 74       >                dw      last_NFA            // Link to previous definition Name
1045+ 749C             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1045+ 749C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1045+ 749F             >
1045+ 749F             >
1045+ 749F             >                endif           ; ok        // for other definitions it "points" the correct handler
1045+ 749F             >                // Use of "; ok" to suppress "warning[fwdref]"
1045+ 749F             >
1045+ 749F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1046+ 749F 5A 6A AF 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1046+ 74A3 F2 6A
1047+ 74A5 5A 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1047+ 74A9 2D 00 97 6E
1048+ 74AD                                                              // if
1049+ 74AD D8 63                        dw      ZBRANCH
1050+ 74AF 12 00                        dw      CSgn_Else_0 - $
1051+ 74B1 2D 6A                        dw          DROP                //      drop
1052+ 74B3 AF 69                        dw          ONE_PLUS            //      1+
1053+ 74B5 35 6C A8 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1053+ 74B9 BC 6A
1054+ 74BB 35 6C                        dw          ONE                 //      1
1055+ 74BD                                                              // else
1056+ 74BD C3 63                        dw      BRANCH
1057+ 74BF 16 00                        dw      CSgn_Endif_0 - $
1058+ 74C1              CSgn_Else_0:
1059+ 74C1 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1059+ 74C5 97 6E
1060+ 74C7                                                              //      if
1061+ 74C7 D8 63                        dw          ZBRANCH
1062+ 74C9 0A 00                        dw          CSgn_Endif_1 - $
1063+ 74CB AF 69                        dw              ONE_PLUS        //          1+
1064+ 74CD 35 6C A8 6D                  dw              ONE, DPL        //          1 dpl
1065+ 74D1 BC 6A                        dw              PLUSSTORE       //          +!
1066+ 74D3              CSgn_Endif_1                                    //      endif
1067+ 74D3 2C 6C                        dw          ZERO                //      0
1068+ 74D5              CSgn_Endif_0:                                   // endif
1069+ 74D5 F7 68                        dw      EXIT
1070+ 74D7
1071+ 74D7              //  ______________________________________________________________________
1072+ 74D7              //
1073+ 74D7              // (number)     d a -- d1 a1
1074+ 74D7              // using the current BASE parse characters stored in address a
1075+ 74D7              // accumulating a double precision integer d
1076+ 74D7              // the process stops at the first not-convertible character
1077+ 74D7              // A double-number is kept in CPU registers as HLDE.
1078+ 74D7              // On the stack a double number is treated as two single numbers
1079+ 74D7              // where HL is on the top of the stack and DE is the second from top,
1080+ 74D7              // so in the stack memory it appears as LHED.
1081+ 74D7              // Instead, in 2VARIABLE a double number is stored as EDLH.
1082+ 74D7                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1082+ 74D7             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1082+ 74D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1082+ 74D7             >
1082+ 74D7             >                // dummy db directives used to calculate length of namec
1082+ 74D7 28 4E 55 4D >                db      "(NUMBER)"
1082+ 74DB 42 45 52 29 >
1082+ 74DF             >len_NFA         defl    $ - temp_NFA
1082+ 74DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1082+ 74D7             >
1082+ 74D7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1082+ 74D8 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1082+ 74DC 42 45 52 29 >
1082+ 74E0             >                org     $-1                 // alter last byte of Name just above to set
1082+ 74DF A9          >                db      {b $} | END_BIT     // msb as name end
1082+ 74E0             >
1082+ 74E0 94 74       >                dw      last_NFA            // Link to previous definition Name
1082+ 74E2             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1082+ 74E2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1082+ 74E5             >
1082+ 74E5             >
1082+ 74E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1082+ 74E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1082+ 74E5             >
1082+ 74E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1083+ 74E5                                                              // begin
1084+ 74E5              CNumber_Begin:
1085+ 74E5 AF 69                        dw          ONE_PLUS            //      1+
1086+ 74E7 5A 6A 21 69                  dw          DUP, TO_R           //      dup >r
1087+ 74EB F2 6A                        dw          CFETCH              //      @
1088+ 74ED 9E 6D DB 6A                  dw          BASE, FETCH         //      base @
1089+ 74F1 83 64                        dw          DIGIT               //      digit
1090+ 74F3                                                              // while
1091+ 74F3 D8 63                        dw      ZBRANCH
1092+ 74F5 2C 00                        dw      CNumber_While_end - $
1093+ 74F7 4F 6A                        dw          SWAP                //      swap
1094+ 74F9 9E 6D DB 6A                  dw          BASE, FETCH         //      base @
1095+ 74FD 2C 68                        dw          UM_MUL              //      um*
1096+ 74FF 2D 6A 65 6A                  dw          DROP, ROT           //      drop rot
1097+ 7503 9E 6D DB 6A                  dw          BASE, FETCH         //      base @
1098+ 7507 2C 68                        dw          UM_MUL              //      um*
1099+ 7509 9D 69                        dw          DPLUS               //      d+
1100+ 750B A8 6D DB 6A                  dw          DPL, FETCH          //      dpl @
1101+ 750F AF 69                        dw          ONE_PLUS            //      1+
1102+ 7511                                                              //      if
1103+ 7511 D8 63                        dw          ZBRANCH
1104+ 7513 08 00                        dw          CNumber_Endif - $
1105+ 7515 35 6C A8 6D                  dw              ONE, DPL        //          1 dpl
1106+ 7519 BC 6A                        dw              PLUSSTORE       //          +!
1107+ 751B              CNumber_Endif:                                  //      endif
1108+ 751B 33 69                        dw             R_TO             //      r>  ( balance rp )
1109+ 751D C3 63                        dw      BRANCH
1110+ 751F C6 FF                        dw      CNumber_Begin - $
1111+ 7521              CNumber_While_end:                              // repeat
1112+ 7521 33 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1113+ 7523 F7 68                        dw      EXIT                    // ;
1114+ 7525
1115+ 7525              //  ______________________________________________________________________
1116+ 7525              //
1117+ 7525              // number       a -- d
1118+ 7525                              Colon_Def NUMBER,  "NUMBER", is_normal
1118+ 7525             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1118+ 7525             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1118+ 7525             >
1118+ 7525             >                // dummy db directives used to calculate length of namec
1118+ 7525 4E 55 4D 42 >                db      "NUMBER"
1118+ 7529 45 52       >
1118+ 752B             >len_NFA         defl    $ - temp_NFA
1118+ 752B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1118+ 7525             >
1118+ 7525 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1118+ 7526 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1118+ 752A 45 52       >
1118+ 752C             >                org     $-1                 // alter last byte of Name just above to set
1118+ 752B D2          >                db      {b $} | END_BIT     // msb as name end
1118+ 752C             >
1118+ 752C D7 74       >                dw      last_NFA            // Link to previous definition Name
1118+ 752E             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1118+ 752E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1118+ 7531             >
1118+ 7531             >
1118+ 7531             >                endif           ; ok        // for other definitions it "points" the correct handler
1118+ 7531             >                // Use of "; ok" to suppress "warning[fwdref]"
1118+ 7531             >
1118+ 7531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1119+ 7531 2C 6C 2C 6C                  dw      ZERO, ZERO              // 0 0
1120+ 7535 65 6A                        dw      ROT                     // rot
1121+ 7537 9C 74 21 69                  dw      CSGN, TO_R              // (sgn) >r
1122+ 753B 51 6C A8 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1122+ 753F E6 6A
1123+ 7541 E2 74                        dw      CNUMBER                 // (number)
1124+ 7543 5A 6A F2 6A                  dw      DUP, CFETCH             // dup c@
1125+ 7547 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1125+ 754B 97 6E
1126+ 754D                                                              // if
1127+ 754D D8 63                        dw      ZBRANCH
1128+ 754F 0A 00                        dw      Number_Endif_1 - $
1129+ 7551 2C 6C A8 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1129+ 7555 E6 6A
1130+ 7557 E2 74                        dw          CNUMBER             //      (number)
1131+ 7559              Number_Endif_1:                                 // endif
1132+ 7559 F2 6A 5B 6C                  dw      CFETCH, BL              // c@ bl
1133+ 755D 8B 6E 2C 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1133+ 7561 10 70
1134+ 7563 33 69                        dw      R_TO                    // r>
1135+ 7565                                                              // if
1136+ 7565 D8 63                        dw      ZBRANCH
1137+ 7567 04 00                        dw      Number_Endif_2 - $
1138+ 7569 07 6A                        dw          DMINUS              //      dminus
1139+ 756B              Number_Endif_2:                                 // endif
1140+ 756B F7 68                        dw      EXIT                    // ;
1141+ 756D
1142+ 756D              //  ______________________________________________________________________
1143+ 756D              //
1144+ 756D              // -find        a -- d
1145+ 756D                              Colon_Def LFIND,  "-FIND", is_normal
1145+ 756D             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1145+ 756D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1145+ 756D             >
1145+ 756D             >                // dummy db directives used to calculate length of namec
1145+ 756D 2D 46 49 4E >                db      "-FIND"
1145+ 7571 44          >
1145+ 7572             >len_NFA         defl    $ - temp_NFA
1145+ 7572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1145+ 756D             >
1145+ 756D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1145+ 756E 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1145+ 7572 44          >
1145+ 7573             >                org     $-1                 // alter last byte of Name just above to set
1145+ 7572 C4          >                db      {b $} | END_BIT     // msb as name end
1145+ 7573             >
1145+ 7573 25 75       >                dw      last_NFA            // Link to previous definition Name
1145+ 7575             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1145+ 7575 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1145+ 7578             >
1145+ 7578             >
1145+ 7578             >                endif           ; ok        // for other definitions it "points" the correct handler
1145+ 7578             >                // Use of "; ok" to suppress "warning[fwdref]"
1145+ 7578             >
1145+ 7578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1146+ 7578 5B 6C B9 73                  dw      BL, WORD                // bl word
1147+ 757C 79 6D DB 6A                  dw      CONTEXT, FETCH, FETCH   // context @ @
1147+ 7580 DB 6A
1148+ 7582 F0 64                        dw      C_FIND                  // (find)
1149+ 7584 0F 6F                        dw      QDUP                    // ?dup
1150+ 7586 54 69                        dw      ZEQUAL                  // 0=
1151+ 7588                                                              // if
1152+ 7588 D8 63                        dw      ZBRANCH
1153+ 758A 08 00                        dw      LFind_Endif - $
1154+ 758C 36 6E                        dw          HERE                //      here
1155+ 758E 7E 6F                        dw          LATEST              //      latest
1156+ 7590 F0 64                        dw          C_FIND              //      (find)
1157+ 7592              LFind_Endif:                                    // endif
1158+ 7592 F7 68                        dw      EXIT                    // ;
1159+ 7594
1160+ 7594              //  ______________________________________________________________________
1161+ 7594              //
1162+ 7594              // (abort)      --
1163+ 7594                              Colon_Def CABORT,  "(ABORT)", is_normal
1163+ 7594             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1163+ 7594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1163+ 7594             >
1163+ 7594             >                // dummy db directives used to calculate length of namec
1163+ 7594 28 41 42 4F >                db      "(ABORT)"
1163+ 7598 52 54 29    >
1163+ 759B             >len_NFA         defl    $ - temp_NFA
1163+ 759B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1163+ 7594             >
1163+ 7594 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1163+ 7595 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1163+ 7599 52 54 29    >
1163+ 759C             >                org     $-1                 // alter last byte of Name just above to set
1163+ 759B A9          >                db      {b $} | END_BIT     // msb as name end
1163+ 759C             >
1163+ 759C 6D 75       >                dw      last_NFA            // Link to previous definition Name
1163+ 759E             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1163+ 759E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1163+ 75A1             >
1163+ 75A1             >
1163+ 75A1             >                endif           ; ok        // for other definitions it "points" the correct handler
1163+ 75A1             >                // Use of "; ok" to suppress "warning[fwdref]"
1163+ 75A1             >
1163+ 75A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1164+ 75A1 7A 78                        dw      ABORT                   // abort
1165+ 75A3 F7 68                        dw      EXIT                    // ;
1166+ 75A5
1167+ 75A5              //  ______________________________________________________________________
1168+ 75A5              //
1169+ 75A5              // error        n --
1170+ 75A5              // raise an error
1171+ 75A5              // if WARNING is 0, prints "MSG#n".
1172+ 75A5              // if WARNING is 1, prints line n of screen 4.
1173+ 75A5              // if WARNING is -1 does (ABORT) that normally does ABORT
1174+ 75A5              // value can be negative or beyond block 4.
1175+ 75A5                              Colon_Def ERROR,  "ERROR", is_normal
1175+ 75A5             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1175+ 75A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 75A5             >
1175+ 75A5             >                // dummy db directives used to calculate length of namec
1175+ 75A5 45 52 52 4F >                db      "ERROR"
1175+ 75A9 52          >
1175+ 75AA             >len_NFA         defl    $ - temp_NFA
1175+ 75AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 75A5             >
1175+ 75A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 75A6 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1175+ 75AA 52          >
1175+ 75AB             >                org     $-1                 // alter last byte of Name just above to set
1175+ 75AA D2          >                db      {b $} | END_BIT     // msb as name end
1175+ 75AB             >
1175+ 75AB 94 75       >                dw      last_NFA            // Link to previous definition Name
1175+ 75AD             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 75AD CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1175+ 75B0             >
1175+ 75B0             >
1175+ 75B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 75B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 75B0             >
1175+ 75B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 75B0 E4 6C DB 6A                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1176+ 75B4 6E 69
1177+ 75B6                                                              // if
1178+ 75B6 D8 63                        dw      ZBRANCH
1179+ 75B8 04 00                        dw      Error_Endif_1 - $
1180+ 75BA 9E 75                        dw          CABORT              //      (abort)
1181+ 75BC              Error_Endif_1:                                  // endif
1182+ 75BC 36 6E C5 71                  dw      HERE, COUNT, TYPE       // here count type
1182+ 75C0 ED 71
1183+ 75C2 09 74                        dw      C_DOT_QUOTE             // .( ? )
1184+ 75C4 02 3F 20                     db      2, "? "
1185+ 75C7 BD 7A                        dw      MESSAGE                 // message  ( forward )
1186+ 75C9 B7 6C DB 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1186+ 75CD D4 68
1187+ 75CF 40 6D DB 6A                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1187+ 75D3 0F 6F
1188+ 75D5                                                              // if
1189+ 75D5 D8 63                        dw      ZBRANCH
1190+ 75D7 08 00                        dw      Error_Endif_2 - $
1191+ 75D9 4A 6D DB 6A                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1191+ 75DD 4F 6A
1192+ 75DF              Error_Endif_2:                                  // endif
1193+ 75DF 38 78                        dw      QUIT                    // quit ( forward )
1194+ 75E1 F7 68                        dw      EXIT                    // ;
1195+ 75E3              //  ______________________________________________________________________
1196+ 75E3              //
1197+ 75E3              // id.          nfa --
1198+ 75E3                              Colon_Def ID_DOT,  "ID.", is_normal
1198+ 75E3             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1198+ 75E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ 75E3             >
1198+ 75E3             >                // dummy db directives used to calculate length of namec
1198+ 75E3 49 44 2E    >                db      "ID."
1198+ 75E6             >len_NFA         defl    $ - temp_NFA
1198+ 75E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ 75E3             >
1198+ 75E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ 75E4 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1198+ 75E7             >                org     $-1                 // alter last byte of Name just above to set
1198+ 75E6 AE          >                db      {b $} | END_BIT     // msb as name end
1198+ 75E7             >
1198+ 75E7 A5 75       >                dw      last_NFA            // Link to previous definition Name
1198+ 75E9             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 75E9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 75EC             >
1198+ 75EC             >
1198+ 75EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 75EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 75EC             >
1198+ 75EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 75EC A5 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1199+ 75F0 20 00 A5 63
1199+ 75F4 60 00
1200+ 75F6 54 73                        dw      FILL                    // fill
1201+ 75F8 5A 6A C4 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1201+ 75FC 8F 6F
1202+ 75FE 1F 6A 8B 6E                  dw      OVER, SUBTRACT          // over -
1203+ 7602 A5 73 4F 6A                  dw      PAD, SWAP               // pad swap
1204+ 7606 FD 67                        dw      CMOVE                   // cmove
1205+ 7608 A5 73 C5 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1205+ 760C A5 63 1F 00
1206+ 7610 95 68                        dw      AND_OP                  // and  ( use only lower bits )
1207+ 7612 ED 71 46 6F                  dw      TYPE, SPACE             // type
1208+ 7616 F7 68                        dw      EXIT                    // ;
1209+ 7618
1210+ 7618              //  ______________________________________________________________________
1211+ 7618              //
1212+ 7618              // code         -- cccc
1213+ 7618                              Colon_Def CODE,  "CODE", is_normal
1213+ 7618             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1213+ 7618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1213+ 7618             >
1213+ 7618             >                // dummy db directives used to calculate length of namec
1213+ 7618 43 4F 44 45 >                db      "CODE"
1213+ 761C             >len_NFA         defl    $ - temp_NFA
1213+ 761C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1213+ 7618             >
1213+ 7618 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1213+ 7619 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1213+ 761D             >                org     $-1                 // alter last byte of Name just above to set
1213+ 761C C5          >                db      {b $} | END_BIT     // msb as name end
1213+ 761D             >
1213+ 761D E3 75       >                dw      last_NFA            // Link to previous definition Name
1213+ 761F             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1213+ 761F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1213+ 7622             >
1213+ 7622             >
1213+ 7622             >                endif           ; ok        // for other definitions it "points" the correct handler
1213+ 7622             >                // Use of "; ok" to suppress "warning[fwdref]"
1213+ 7622             >
1213+ 7622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1214+ 7622 75 75                        dw      LFIND                   // -find
1215+ 7624                                                              // if
1216+ 7624 D8 63                        dw      ZBRANCH
1217+ 7626 10 00                        dw      Code_Endif - $
1218+ 7628 2D 6A                        dw          DROP                //      drop
1219+ 762A EC 6F E9 75                  dw          TO_NAME, ID_DOT     //      >name id.
1220+ 762E A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1220+ 7632 BD 7A
1221+ 7634 46 6F                        dw          SPACE               //      space
1222+ 7636              Code_Endif:                                     // endif
1223+ 7636 36 6E                        dw      HERE                    // here
1224+ 7638                                                              // ( ---- here begins NFA ---- )
1225+ 7638 5A 6A F2 6A                  dw      DUP, CFETCH             // dup c@
1226+ 763C D6 6C DB 6A                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1226+ 7640 E0 6E
1227+ 7642 AF 69 47 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1228+ 7646 5A 6A                        dw      DUP                     // dup
1229+ 7648 A5 63                        dw      LIT
1230+ 764A A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1231+ 764C D0 6A                        dw      TOGGLE                  // toggle
1232+ 764E 36 6E B9 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1233+ 7652 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1233+ 7656 D0 6A
1234+ 7658                                                              // ( ---- here is LFA ---- )
1235+ 7658 7E 6F 54 6E                  dw      LATEST, COMMA           // latest ,
1236+ 765C 87 6D DB 6A                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1236+ 7660 E6 6A
1237+ 7662                                                              // ( ---- here is LFA ---- )
1238+ 7662              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1239+ 7662 F7 68                        dw      EXIT                    // ;
1240+ 7664
1241+ 7664              //  ______________________________________________________________________
1242+ 7664              //
1243+ 7664              // create       -- cccc     ( compile time )
1244+ 7664              //              -- a        ( run time )
1245+ 7664                              Colon_Def CREATE,  "CREATE", is_normal
1245+ 7664             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1245+ 7664             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 7664             >
1245+ 7664             >                // dummy db directives used to calculate length of namec
1245+ 7664 43 52 45 41 >                db      "CREATE"
1245+ 7668 54 45       >
1245+ 766A             >len_NFA         defl    $ - temp_NFA
1245+ 766A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 7664             >
1245+ 7664 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 7665 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1245+ 7669 54 45       >
1245+ 766B             >                org     $-1                 // alter last byte of Name just above to set
1245+ 766A C5          >                db      {b $} | END_BIT     // msb as name end
1245+ 766B             >
1245+ 766B 18 76       >                dw      last_NFA            // Link to previous definition Name
1245+ 766D             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 766D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1245+ 7670             >
1245+ 7670             >
1245+ 7670             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 7670             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 7670             >
1245+ 7670             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 7670 1F 76 F9 70                  dw      CODE, SMUDGE            // code smudge
1247+ 7674 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1247+ 7678 66 6E
1248+ 767A A5 63 0B 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1248+ 767E 54 6E
1249+ 7680 53 71                        dw      C_SEMICOLON_CODE
1250+ 7682                              // this routine is called from the call coded in CFA
1251+ 7682              Create_Ptr:
1252+ 7682
1253+ 7682
1254+ 7682
1255+ 7682                              next
1255+ 7682 DD E9       >                jp      (ix)
1256+ 7684
1257+ 7684              //  ______________________________________________________________________
1258+ 7684              //
1259+ 7684              // [compile]    -- cccc     ( compile time )
1260+ 7684                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1260+ 7684             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1260+ 7684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 7684             >
1260+ 7684             >                // dummy db directives used to calculate length of namec
1260+ 7684 5B 43 4F 4D >                db      "[COMPILE]"
1260+ 7688 50 49 4C 45 >
1260+ 768C 5D          >
1260+ 768D             >len_NFA         defl    $ - temp_NFA
1260+ 768D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 7684             >
1260+ 7684 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 7685 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1260+ 7689 50 49 4C 45 >
1260+ 768D 5D          >
1260+ 768E             >                org     $-1                 // alter last byte of Name just above to set
1260+ 768D DD          >                db      {b $} | END_BIT     // msb as name end
1260+ 768E             >
1260+ 768E 64 76       >                dw      last_NFA            // Link to previous definition Name
1260+ 7690             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 7690 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 7693             >
1260+ 7693             >
1260+ 7693             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 7693             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 7693             >
1260+ 7693             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 7693 75 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1262+ 7695 54 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1263+ 7697 2C 6C 10 70                  dw      ZERO, QERROR            // 0 ?error
1264+ 769B 2D 6A                        dw      DROP                    // drop       (  cfa  )
1265+ 769D 54 6E                        dw      COMMA                   // ,
1266+ 769F F7 68                        dw      EXIT                    // ; immediate
1267+ 76A1
1268+ 76A1              //  ______________________________________________________________________
1269+ 76A1              //
1270+ 76A1              // literal      n --      ( compile time )
1271+ 76A1                              Colon_Def LITERAL,  "LITERAL", is_immediate
1271+ 76A1             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1271+ 76A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ 76A1             >
1271+ 76A1             >                // dummy db directives used to calculate length of namec
1271+ 76A1 4C 49 54 45 >                db      "LITERAL"
1271+ 76A5 52 41 4C    >
1271+ 76A8             >len_NFA         defl    $ - temp_NFA
1271+ 76A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ 76A1             >
1271+ 76A1 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ 76A2 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1271+ 76A6 52 41 4C    >
1271+ 76A9             >                org     $-1                 // alter last byte of Name just above to set
1271+ 76A8 CC          >                db      {b $} | END_BIT     // msb as name end
1271+ 76A9             >
1271+ 76A9 84 76       >                dw      last_NFA            // Link to previous definition Name
1271+ 76AB             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 76AB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1271+ 76AE             >
1271+ 76AE             >
1271+ 76AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 76AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 76AE             >
1271+ 76AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 76AE 93 6D DB 6A                  dw      STATE, FETCH            // state @
1273+ 76B2                                                              // if
1274+ 76B2 D8 63                        dw      ZBRANCH
1275+ 76B4 08 00                        dw      Literal_Endif - $
1276+ 76B6 A9 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1277+ 76BA 54 6E                        dw          COMMA               //      ,
1278+ 76BC              Literal_Endif:                                  // endif
1279+ 76BC F7 68                        dw      EXIT                    // ; immediate
1280+ 76BE
1281+ 76BE              //  ______________________________________________________________________
1282+ 76BE              //
1283+ 76BE              // dliteral     n --      ( compile time )
1284+ 76BE                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1284+ 76BE             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1284+ 76BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 76BE             >
1284+ 76BE             >                // dummy db directives used to calculate length of namec
1284+ 76BE 44 4C 49 54 >                db      "DLITERAL"
1284+ 76C2 45 52 41 4C >
1284+ 76C6             >len_NFA         defl    $ - temp_NFA
1284+ 76C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 76BE             >
1284+ 76BE C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 76BF 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1284+ 76C3 45 52 41 4C >
1284+ 76C7             >                org     $-1                 // alter last byte of Name just above to set
1284+ 76C6 CC          >                db      {b $} | END_BIT     // msb as name end
1284+ 76C7             >
1284+ 76C7 A1 76       >                dw      last_NFA            // Link to previous definition Name
1284+ 76C9             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 76C9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 76CC             >
1284+ 76CC             >
1284+ 76CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 76CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 76CC             >
1284+ 76CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 76CC 93 6D DB 6A                  dw      STATE, FETCH            // state @
1286+ 76D0                                                              // if
1287+ 76D0 D8 63                        dw      ZBRANCH
1288+ 76D2 08 00                        dw      DLiteral_Endif - $
1289+ 76D4 4F 6A                        dw          SWAP                //      swap
1290+ 76D6 AB 76 AB 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1291+ 76DA              DLiteral_Endif:                                 // endif
1292+ 76DA F7 68                        dw      EXIT                    // ; immediate
1293+ 76DC
1294+ 76DC              //  ______________________________________________________________________
1295+ 76DC              //
1296+ 76DC              // [char]       n --      ( compile time )
1297+ 76DC              // inside colon definition, gets first character from next input word
1298+ 76DC              // and compiles it as literal.
1299+ 76DC                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1299+ 76DC             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1299+ 76DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 76DC             >
1299+ 76DC             >                // dummy db directives used to calculate length of namec
1299+ 76DC 5B 43 48 41 >                db      "[CHAR]"
1299+ 76E0 52 5D       >
1299+ 76E2             >len_NFA         defl    $ - temp_NFA
1299+ 76E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 76DC             >
1299+ 76DC C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 76DD 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1299+ 76E1 52 5D       >
1299+ 76E3             >                org     $-1                 // alter last byte of Name just above to set
1299+ 76E2 DD          >                db      {b $} | END_BIT     // msb as name end
1299+ 76E3             >
1299+ 76E3 BE 76       >                dw      last_NFA            // Link to previous definition Name
1299+ 76E5             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 76E5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 76E8             >
1299+ 76E8             >
1299+ 76E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 76E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 76E8             >
1299+ 76E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 76E8 25 74 AB 76                  dw      CHAR, LITERAL           // char [compile] literal
1301+ 76EC F7 68                        dw      EXIT                    // ; immediate
1302+ 76EE
1303+ 76EE              //  ______________________________________________________________________
1304+ 76EE              //
1305+ 76EE              // 0x00         n --      ( compile time )
1306+ 76EE                              Colon_Def NUL_WORD,  $00, is_immediate
1306+ 76EE             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1306+ 76EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 76EE             >
1306+ 76EE             >                // dummy db directives used to calculate length of namec
1306+ 76EE 00          >                db      $00
1306+ 76EF             >len_NFA         defl    $ - temp_NFA
1306+ 76EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 76EE             >
1306+ 76EE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 76EF 00          >                db      $00               // name string in 7-bit ascii, but
1306+ 76F0             >                org     $-1                 // alter last byte of Name just above to set
1306+ 76EF 80          >                db      {b $} | END_BIT     // msb as name end
1306+ 76F0             >
1306+ 76F0 DC 76       >                dw      last_NFA            // Link to previous definition Name
1306+ 76F2             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 76F2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 76F5             >
1306+ 76F5             >
1306+ 76F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 76F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 76F5             >
1306+ 76F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 76F5 40 6D DB 6A                  dw      BLK, FETCH, ONE         // blk @ 1
1307+ 76F9 35 6C
1308+ 76FB D1 6E                        dw      GREATER                 // > if
1309+ 76FD                                                              // if
1310+ 76FD D8 63                        dw      ZBRANCH
1311+ 76FF 28 00                        dw      Nul_Else_1 - $
1312+ 7701 35 6C 40 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1312+ 7705 BC 6A
1313+ 7707 2C 6C 4A 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1313+ 770B E6 6A
1314+ 770D 40 6D DB 6A                  dw          BLK, FETCH          //      blk @
1315+ 7711 80 6C                        dw          BSCR                //      b/scr
1316+ 7713 B9 69                        dw          ONE_SUBTRACT        //      1 -
1317+ 7715 95 68                        dw          AND_OP              //      and  ( this is tricky )
1318+ 7717 54 69                        dw          ZEQUAL              //      0=
1319+ 7719                                                              //      if
1320+ 7719 D8 63                        dw          ZBRANCH
1321+ 771B 08 00                        dw          Nul_Endif_2 - $
1322+ 771D 44 70                        dw              QEXEC           //          ?exec
1323+ 771F 33 69 2D 6A                  dw              R_TO, DROP      //          r> drop
1324+ 7723              Nul_Endif_2:                                    //      endif
1325+ 7723 C3 63                        dw      BRANCH
1326+ 7725 06 00                        dw      Nul_Endif_1 - $
1327+ 7727              Nul_Else_1:                                     // else
1328+ 7727 33 69 2D 6A                  dw          R_TO, DROP          //      r> drop
1329+ 772B              Nul_Endif_1:                                    // endif
1330+ 772B F7 68                        dw      EXIT                    // ;
1331+ 772D
1332+ 772D              //  ______________________________________________________________________
1333+ 772D              //
1334+ 772D              // ?stack       --
1335+ 772D              // Raise error #1 if stack is empty and you pop it
1336+ 772D              // Raise error #7 if stack is full.
1337+ 772D              // This means SP must always stay between HERE and FFFF
1338+ 772D              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1339+ 772D              // for Next 8K MMU paging this is $DOE8
1340+ 772D                              Colon_Def QSTACK, "?STACK", is_normal
1340+ 772D             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1340+ 772D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 772D             >
1340+ 772D             >                // dummy db directives used to calculate length of namec
1340+ 772D 3F 53 54 41 >                db      "?STACK"
1340+ 7731 43 4B       >
1340+ 7733             >len_NFA         defl    $ - temp_NFA
1340+ 7733             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 772D             >
1340+ 772D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 772E 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1340+ 7732 43 4B       >
1340+ 7734             >                org     $-1                 // alter last byte of Name just above to set
1340+ 7733 CB          >                db      {b $} | END_BIT     // msb as name end
1340+ 7734             >
1340+ 7734 EE 76       >                dw      last_NFA            // Link to previous definition Name
1340+ 7736             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 7736 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1340+ 7739             >
1340+ 7739             >
1340+ 7739             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 7739             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 7739             >
1340+ 7739             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 7739 C7 68                        dw      SPFETCH                 // sp@
1342+ 773B B7 6C DB 6A                  dw      S0, FETCH               // s0 @
1343+ 773F 4F 6A A5 6E                  dw      SWAP, ULESS             // swap u<
1344+ 7743 35 6C 10 70                  dw      ONE, QERROR             // 1 ?error
1345+ 7747 36 6E                        dw      HERE                    // here
1346+ 7749 B7 6C DB 6A                  dw      S0, FETCH, LESS         // s0 @ <
1346+ 774D B7 6E
1347+ 774F                                                              // if
1348+ 774F D8 63                        dw      ZBRANCH
1349+ 7751 14 00                        dw      QStack_Endif - $
1350+ 7753 C7 68                        dw          SPFETCH             //      sp@
1351+ 7755 36 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1351+ 7759 80 00
1352+ 775B 92 69 A5 6E                  dw          PLUS, ULESS         //      plus u<
1353+ 775F A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1353+ 7763 10 70
1354+ 7765              QStack_Endif:                                   // endif
1355+ 7765 F7 68                        dw      EXIT                    // ;
1356+ 7767
1357+ 7767
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7767                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7767              //  ______________________________________________________________________
   2+ 7767              //
   3+ 7767              //  L2.asm
   4+ 7767              //
   5+ 7767              //  Level-2
   6+ 7767              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7767              //  ______________________________________________________________________
   8+ 7767
   9+ 7767
  10+ 7767              //  ______________________________________________________________________
  11+ 7767              //
  12+ 7767              // interpret    --
  13+ 7767              // This is the text interpreter.
  14+ 7767              // It executes or compiles, depending on STATE, the text coming from
  15+ 7767              // current input stream.
  16+ 7767              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7767              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7767              // leaving on top of stack a single or double precision number, depending
  19+ 7767              // on the presence of a decimal point.
  20+ 7767              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7767              // by the offending word.
  22+ 7767                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7767             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7767             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7767             >
  22+ 7767             >                // dummy db directives used to calculate length of namec
  22+ 7767 49 4E 54 45 >                db      "INTERPRET"
  22+ 776B 52 50 52 45 >
  22+ 776F 54          >
  22+ 7770             >len_NFA         defl    $ - temp_NFA
  22+ 7770             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7767             >
  22+ 7767 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7768 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 776C 52 50 52 45 >
  22+ 7770 54          >
  22+ 7771             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7770 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7771             >
  22+ 7771 2D 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7773             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7773 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7776             >
  22+ 7776             >
  22+ 7776             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7776             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7776             >
  22+ 7776             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7776
  24+ 7776              Interpret_Begin:                                        // begin
  25+ 7776 75 75                        dw          LFIND                       //      -find
  26+ 7778                                                                      //      if
  27+ 7778 D8 63                        dw          ZBRANCH
  28+ 777A 1A 00                        dw          Interpret_Else_1 - $
  29+ 777C 93 6D DB 6A                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7780 B7 6E
  30+ 7782                                                                      //          if
  31+ 7782 D8 63                        dw              ZBRANCH
  32+ 7784 08 00                        dw              Interpret_Else_2 - $
  33+ 7786 C7 70                        dw                  COMPILE_XT          //              compile,
  34+ 7788                                                                      //          else
  35+ 7788 C3 63                        dw              BRANCH
  36+ 778A 06 00                        dw              Interpret_Endif_2 - $
  37+ 778C              Interpret_Else_2:
  38+ 778C B8 63 D7 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7790              Interpret_Endif_2:                                      //          endif
  40+ 7790                                                                      //      else
  41+ 7790 C3 63                        dw          BRANCH
  42+ 7792 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7794              Interpret_Else_1:
  44+ 7794 36 6E 2E 75                  dw              HERE, NUMBER            //          here number
  45+ 7798 A8 6D DB 6A                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 779C AF 69
  46+ 779E                                                                      //          if
  47+ 779E D8 63                        dw              ZBRANCH
  48+ 77A0 08 00                        dw              Interpret_Else_3 - $
  49+ 77A2              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77A2              //                                                      //              if
  51+ 77A2              //              dw                  ZBRANCH
  52+ 77A2              //              dw                  Interpret_Endif_4 - $
  53+ 77A2              //              dw                      ONE, ZERO       //                  1 0
  54+ 77A2              //              dw                      TWO_DROP        //                  2drop
  55+ 77A2              //Interpret_Endif_4:                                      //              endif
  56+ 77A2 C9 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77A4                                                                      //          else
  58+ 77A4 C3 63                        dw              BRANCH
  59+ 77A6 06 00                        dw              Interpret_Endif_3 - $
  60+ 77A8              Interpret_Else_3:
  61+ 77A8 2D 6A                        dw                  DROP                //              drop
  62+ 77AA AB 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77AC              Interpret_Endif_3:                                      //          endif
  64+ 77AC              Interpret_Endif_1:                                      //      endif
  65+ 77AC 36 77                        dw          QSTACK                      //      ?stack
  66+ 77AE F0 66                        dw          QTERMINAL                   //      ?terminal
  67+ 77B0                                                                      //      if
  68+ 77B0 D8 63                        dw          ZBRANCH
  69+ 77B2 04 00                        dw          Interpret_Endif_5 - $
  70+ 77B4 9E 75                        dw              CABORT                  //          (abort)
  71+ 77B6              Interpret_Endif_5:                                      //      endif
  72+ 77B6 C3 63                        dw      BRANCH
  73+ 77B8 BE FF                        dw      Interpret_Begin - $
  74+ 77BA F7 68                        dw      EXIT                            // ;
  75+ 77BC
  76+ 77BC              //  ______________________________________________________________________
  77+ 77BC              //
  78+ 77BC              // vocabulary   -- cccc     ( compile time )
  79+ 77BC              // Defining word used in the form   VOCABULARY cccc
  80+ 77BC              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77BC              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77BC              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77BC              // so new definitions can be inserted in that vocabulary.
  84+ 77BC                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77BC             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77BC             >
  84+ 77BC             >                // dummy db directives used to calculate length of namec
  84+ 77BC 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77C0 42 55 4C 41 >
  84+ 77C4 52 59       >
  84+ 77C6             >len_NFA         defl    $ - temp_NFA
  84+ 77C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77BC             >
  84+ 77BC 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77BD 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77C1 42 55 4C 41 >
  84+ 77C5 52 59       >
  84+ 77C7             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77C6 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77C7             >
  84+ 77C7 67 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77C9             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77C9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77CC             >
  84+ 77CC             >
  84+ 77CC             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77CC             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77CC             >
  84+ 77CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77CC
  86+ 77CC 8D 71                        dw      CBUILDS
  87+ 77CE
  88+ 77CE A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77D2 54 6E
  89+ 77D4 87 6D DB 6A                  dw      CURRENT, FETCH          // current @
  90+ 77D8 DC 69 54 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77DC 36 6E                        dw      HERE                    // here
  92+ 77DE 08 6D DB 6A                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77E2 54 6E
  93+ 77E4 08 6D E6 6A                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77E8
  95+ 77E8 9E 71                        dw      DOES_TO                 // does>
  96+ 77EA              Vocabulary_Does:
  97+ 77EA D1 69                        dw      CELL_PLUS               // cell+
  98+ 77EC 79 6D E6 6A                  dw      CONTEXT, STORE          // context !
  99+ 77F0 F7 68                        dw      EXIT                    // ;
 100+ 77F2
 101+ 77F2              //  ______________________________________________________________________
 102+ 77F2              //
 103+ 77F2              // forth        --
 104+ 77F2              // Name of the first vocabulary.
 105+ 77F2              // It makes FORTH the CONTEXT vocabulary.
 106+ 77F2              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77F2              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77F2              // of a colon definition to be able to select the vocabulary.
 109+ 77F2
 110+ 77F2                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77F2             >
 110+ 77F2             >                // dummy db directives used to calculate length of namec
 110+ 77F2 46 4F 52 54 >                db      "FORTH"
 110+ 77F6 48          >
 110+ 77F7             >len_NFA         defl    $ - temp_NFA
 110+ 77F7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77F2             >
 110+ 77F2 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77F3 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77F7 48          >
 110+ 77F8             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77F7 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77F8             >
 110+ 77F8 BC 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77FA             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77FA CD AB 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77FD             >
 110+ 77FD             >
 110+ 77FD             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77FD             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77FD             >
 110+ 77FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77FD EA 77                        dw      Vocabulary_Does
 112+ 77FF 81 A0                        db      $81, $A0
 113+ 7801              Forth_Latest_Ptr:
 114+ 7801 B5 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7803              Voclink_Ptr:
 116+ 7803 00 00                        dw      0
 117+ 7805              // Any new vocabulary is structured as follow:
 118+ 7805              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7805              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7805              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7805              //       at creations it points to the null-word of its parent vocabulary
 122+ 7805              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7805              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7805              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7805              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7805              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7805              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7805
 129+ 7805              //  ______________________________________________________________________
 130+ 7805              //
 131+ 7805              // definitions  --
 132+ 7805              // Used in the form  cccc DEFINITIONS
 133+ 7805              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7805              // vocabulary cccc.
 135+ 7805                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7805             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7805             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7805             >
 135+ 7805             >                // dummy db directives used to calculate length of namec
 135+ 7805 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7809 4E 49 54 49 >
 135+ 780D 4F 4E 53    >
 135+ 7810             >len_NFA         defl    $ - temp_NFA
 135+ 7810             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7805             >
 135+ 7805 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7806 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 780A 4E 49 54 49 >
 135+ 780E 4F 4E 53    >
 135+ 7811             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7810 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7811             >
 135+ 7811 F2 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 7813             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7813 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7816             >
 135+ 7816             >
 135+ 7816             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7816             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7816             >
 135+ 7816             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7816 79 6D DB 6A                  dw      CONTEXT, FETCH          // context @
 137+ 781A 87 6D E6 6A                  dw      CURRENT, STORE          // current !
 138+ 781E F7 68                        dw      EXIT                    // ;
 139+ 7820
 140+ 7820              //  ______________________________________________________________________
 141+ 7820              //
 142+ 7820              // (            -- cccc )
 143+ 7820              // the following text is interpreted as a comment until a closing )
 144+ 7820                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7820             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7820             >
 144+ 7820             >                // dummy db directives used to calculate length of namec
 144+ 7820 28          >                db      "("
 144+ 7821             >len_NFA         defl    $ - temp_NFA
 144+ 7821             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7820             >
 144+ 7820 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7821 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7822             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7821 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7822             >
 144+ 7822 05 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7824             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7824 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7827             >
 144+ 7827             >
 144+ 7827             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7827             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7827             >
 144+ 7827             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7827 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 782B B9 73 2D 6A                  dw      WORD, DROP              // word drop
 147+ 782F F7 68                        dw      EXIT                    // ;
 148+ 7831
 149+ 7831              //  ______________________________________________________________________
 150+ 7831              //
 151+ 7831              // quit         --
 152+ 7831              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7831                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7831             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7831             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7831             >
 153+ 7831             >                // dummy db directives used to calculate length of namec
 153+ 7831 51 55 49 54 >                db      "QUIT"
 153+ 7835             >len_NFA         defl    $ - temp_NFA
 153+ 7835             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7831             >
 153+ 7831 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7832 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7836             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7835 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7836             >
 153+ 7836 20 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7838             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7838 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 783B             >
 153+ 783B             >
 153+ 783B             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 783B             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 783B             >
 153+ 783B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 783B
 155+ 783B 09 6E DB 6A                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 783F 31 67 2D 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7843 2C 6C 09 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7847 E6 6A
 158+ 7849 2C 6C 40 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 784D E6 6A
 159+ 784F D4 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7851                                                              // begin
 161+ 7851              Quit_Begin:
 162+ 7851 C0 6C DB 6A                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7855 EA 68
 163+ 7857 F0 67                        dw      CR                      //      cr
 164+ 7859 36 73                        dw      QUERY                   //      query
 165+ 785B              Next_Breakpoint_1:
 166+ 785B 73 77                        dw      INTERPRET               //      interpret
 167+ 785D 93 6D DB 6A                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7861 54 69
 168+ 7863                                                              //      if
 169+ 7863 D8 63                        dw      ZBRANCH
 170+ 7865 07 00                        dw      Quit_Endif - $
 171+ 7867 09 74                        dw          C_DOT_QUOTE
 172+ 7869 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 786C              Quit_Endif:                                     //      else
 174+ 786C                                                              // again
 175+ 786C C3 63                        dw      BRANCH
 176+ 786E E3 FF                        dw      Quit_Begin - $
 177+ 7870 F7 68                        dw      EXIT                    // ;
 178+ 7872
 179+ 7872              //  ______________________________________________________________________
 180+ 7872              //
 181+ 7872              // abort        --
 182+ 7872                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7872             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7872             >
 182+ 7872             >                // dummy db directives used to calculate length of namec
 182+ 7872 41 42 4F 52 >                db      "ABORT"
 182+ 7876 54          >
 182+ 7877             >len_NFA         defl    $ - temp_NFA
 182+ 7877             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7872             >
 182+ 7872 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7873 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7877 54          >
 182+ 7878             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7877 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7878             >
 182+ 7878 31 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 787A             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 787A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 787D             >
 182+ 787D             >
 182+ 787D             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 787D             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 787D             >
 182+ 787D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 787D B7 6C DB 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7881 D4 68
 184+ 7883 3C 71                        dw      DECIMAL                 // decimal
 185+ 7885 FA 77                        dw      FORTH                   // [compile] forth
 186+ 7887 13 78                        dw      DEFINITIONS             // definitions
 187+ 7889              Autoexec_Ptr:
 188+ 7889 C2 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 788B 38 78                        dw      QUIT                    // quit
 190+ 788D F7 68                        dw      EXIT                    // ;
 191+ 788F
 192+ 788F              //  ______________________________________________________________________
 193+ 788F              //
 194+ 788F              // warm         --
 195+ 788F                              Colon_Def WARM, "WARM", is_normal
 195+ 788F             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 788F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 788F             >
 195+ 788F             >                // dummy db directives used to calculate length of namec
 195+ 788F 57 41 52 4D >                db      "WARM"
 195+ 7893             >len_NFA         defl    $ - temp_NFA
 195+ 7893             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 788F             >
 195+ 788F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 7890 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 7894             >                org     $-1                 // alter last byte of Name just above to set
 195+ 7893 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 7894             >
 195+ 7894 72 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 7896             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7896 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7899             >
 195+ 7899             >
 195+ 7899             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7899             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7899             >
 195+ 7899             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7899 69 7C                        dw      BLK_INIT                // blk-init
 197+ 789B 72 84                        dw      SPLASH                  // splash
 198+ 789D A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78A1 29 6F
 199+ 78A3 7A 78                        dw      ABORT                   // abort
 200+ 78A5 F7 68                        dw      EXIT                    // exit
 201+ 78A7
 202+ 78A7              //  ______________________________________________________________________
 203+ 78A7              //
 204+ 78A7              // cold         --
 205+ 78A7                              Colon_Def COLD, "COLD", is_normal
 205+ 78A7             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78A7             >
 205+ 78A7             >                // dummy db directives used to calculate length of namec
 205+ 78A7 43 4F 4C 44 >                db      "COLD"
 205+ 78AB             >len_NFA         defl    $ - temp_NFA
 205+ 78AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78A7             >
 205+ 78A7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78A8 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78AC             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78AB C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78AC             >
 205+ 78AC 8F 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78AE             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78AE CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78B1             >
 205+ 78B1             >
 205+ 78B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78B1             >
 205+ 78B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78B1 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78B5 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78B9 DB 6A                        dw      FETCH                   // @
 209+ 78BB A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78BF 92 69
 210+ 78C1 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78C5 FD 67                        dw      CMOVE
 212+ 78C7 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78CB DB 6A                        dw      FETCH                   // @
 214+ 78CD A5 63 01 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78D1 E6 6A                        dw      STORE                   // !
 216+ 78D3 2C 6C 36 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78D7 E6 6A
 217+ 78D9 14 6D DB 6A                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78DD 5A 6A
 218+ 78DF D9 6D E6 6A                  dw      USE, STORE              // use !
 219+ 78E3 E4 6D E6 6A                  dw      PREV, STORE             // prev !
 220+ 78E7 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78EB F9 6D E6 6A
 221+ 78EF              //              dw      LIT, 8
 222+ 78EF              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78EF 3E 6C 2B 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78F3 E6 6A
 224+ 78F5 96 78        Warm_Start:     dw      WARM
 225+ 78F7 AE 78        Cold_Start:     dw      COLD
 226+ 78F9 F7 68                        dw      EXIT
 227+ 78FB
 228+ 78FB              //  ______________________________________________________________________
 229+ 78FB              WarmRoutine:
 230+ 78FB              ColdRoutine:
 231+ 78FB DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78FF D9                           exx
 233+ 7900 E5                           push    hl
 234+ 7901 D9                           exx
 235+ 7902
 236+ 7902 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7906 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 790A              //              nop
 239+ 790A 2A 7A 63                     ld      hl, (R0_origin)
 240+ 790D              //              nop
 241+ 790D                              ldrphl
 241+ 790D 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7910 01 F5 78                     ld      bc, Warm_Start
 243+ 7913 38 02                        jr      c, Warm_Skip
 244+ 7915 03                           inc     bc
 245+ 7916 03                           inc     bc
 246+ 7917              Warm_Skip:
 247+ 7917                              next
 247+ 7917 DD E9       >                jp      (ix)
 248+ 7919
 249+ 7919              //  ______________________________________________________________________
 250+ 7919              //
 251+ 7919              // basic        --
 252+ 7919                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7919             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7919             >
 252+ 7919             >                // dummy db directives used to calculate length of namec
 252+ 7919 42 41 53 49 >                db      "BASIC"
 252+ 791D 43          >
 252+ 791E             >len_NFA         defl    $ - temp_NFA
 252+ 791E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7919             >
 252+ 7919 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 791A 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 791E 43          >
 252+ 791F             >                org     $-1                 // alter last byte of Name just above to set
 252+ 791E C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 791F             >
 252+ 791F A7 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7921             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7921 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7921 ~           >
 252+ 7921 ~           >
 252+ 7921             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7921             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7921             >
 252+ 7921             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7921 C1                           pop     bc
 254+ 7922 21 00 00                     ld      hl, 0
 255+ 7925 39                           add     hl, sp
 256+ 7926 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 792A              //              nop
 258+ 792A 22 6E 63                     ld      (SP_Basic),hl
 259+ 792D D9                           exx
 260+ 792E E1                           pop     hl
 261+ 792F D9                           exx
 262+ 7930 C9                           ret     // to Basic
 263+ 7931
 264+ 7931              //  ______________________________________________________________________
 265+ 7931              //
 266+ 7931              // +-           n1 n2 -- n3
 267+ 7931              // leaves n1 with the sign of n2 as n3.
 268+ 7931                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7931             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7931             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7931             >
 268+ 7931             >                // dummy db directives used to calculate length of namec
 268+ 7931 2B 2D       >                db      "+-"
 268+ 7933             >len_NFA         defl    $ - temp_NFA
 268+ 7933             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7931             >
 268+ 7931 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7932 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7934             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7933 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7934             >
 268+ 7934 19 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7936             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7936 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7939             >
 268+ 7939             >
 268+ 7939             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7939             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7939             >
 268+ 7939             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7939 6E 69                        dw      ZLESS                   // 0<
 270+ 793B                                                              // if
 271+ 793B D8 63                        dw      ZBRANCH
 272+ 793D 04 00                        dw      Plus_Minus_Endif - $
 273+ 793F F3 69                        dw          MINUS               //      minus
 274+ 7941              Plus_Minus_Endif:                               // endif
 275+ 7941 F7 68                        dw      EXIT                    // ;
 276+ 7943
 277+ 7943              //  ______________________________________________________________________
 278+ 7943              //
 279+ 7943              // d+-          d1 n -- d2
 280+ 7943              // leaves d1 with the sign of n as d2.
 281+ 7943                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7943             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7943             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7943             >
 281+ 7943             >                // dummy db directives used to calculate length of namec
 281+ 7943 44 2B 2D    >                db      "D+-"
 281+ 7946             >len_NFA         defl    $ - temp_NFA
 281+ 7946             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7943             >
 281+ 7943 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7944 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7947             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7946 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7947             >
 281+ 7947 31 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7949             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7949 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 794C             >
 281+ 794C             >
 281+ 794C             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 794C             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 794C             >
 281+ 794C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 794C 6E 69                        dw      ZLESS                   // 0<
 283+ 794E                                                              // if
 284+ 794E D8 63                        dw      ZBRANCH
 285+ 7950 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7952 07 6A                        dw          DMINUS              //      dminus
 287+ 7954              DPlus_Minus_Endif:                              // endif
 288+ 7954 F7 68                        dw      EXIT                    // ;
 289+ 7956
 290+ 7956              //  ______________________________________________________________________
 291+ 7956              //
 292+ 7956              // abs          n1 -- n2
 293+ 7956                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7956             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7956             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7956             >
 293+ 7956             >                // dummy db directives used to calculate length of namec
 293+ 7956 41 42 53    >                db      "ABS"
 293+ 7959             >len_NFA         defl    $ - temp_NFA
 293+ 7959             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7956             >
 293+ 7956 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7957 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 795A             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7959 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 795A             >
 293+ 795A 43 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 795C             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 795C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 795F             >
 293+ 795F             >
 293+ 795F             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 795F             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 795F             >
 293+ 795F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 795F 5A 6A                        dw      DUP                     // dup
 295+ 7961 36 79                        dw      PLUS_MINUS              // +-
 296+ 7963 F7 68                        dw      EXIT                    // ;
 297+ 7965
 298+ 7965              //  ______________________________________________________________________
 299+ 7965              //
 300+ 7965              // dabs         d1 -- d2
 301+ 7965                              Colon_Def DABS, "DABS", is_normal
 301+ 7965             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7965             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7965             >
 301+ 7965             >                // dummy db directives used to calculate length of namec
 301+ 7965 44 41 42 53 >                db      "DABS"
 301+ 7969             >len_NFA         defl    $ - temp_NFA
 301+ 7969             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7965             >
 301+ 7965 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7966 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 796A             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7969 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 796A             >
 301+ 796A 56 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 796C             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 796C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 796F             >
 301+ 796F             >
 301+ 796F             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 796F             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 796F             >
 301+ 796F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 796F 5A 6A                        dw      DUP                     // dup
 303+ 7971 49 79                        dw      DPLUS_MINUS             // d+-
 304+ 7973 F7 68                        dw      EXIT                    // ;
 305+ 7975
 306+ 7975              //  ______________________________________________________________________
 307+ 7975              //
 308+ 7975              // m*           n1 n2 -- d
 309+ 7975              // multiply two integer giving a double
 310+ 7975                              Colon_Def MMUL, "M*", is_normal
 310+ 7975             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7975             >
 310+ 7975             >                // dummy db directives used to calculate length of namec
 310+ 7975 4D 2A       >                db      "M*"
 310+ 7977             >len_NFA         defl    $ - temp_NFA
 310+ 7977             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7975             >
 310+ 7975 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7976 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7978             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7977 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7978             >
 310+ 7978 65 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 797A             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 797A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 797D             >
 310+ 797D             >
 310+ 797D             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 797D             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 797D             >
 310+ 797D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 797D AF 6A B6 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7981 21 69
 312+ 7983 5C 79 4F 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 7987 5C 79 2C 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 798B 33 69 49 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 798F F7 68                        dw      EXIT                    // ;
 316+ 7991
 317+ 7991              //  ______________________________________________________________________
 318+ 7991              //
 319+ 7991              // sm/rem       d n -- q r
 320+ 7991              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 7991              // the remainder has the sign of d.
 322+ 7991                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 7991             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 7991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7991             >
 322+ 7991             >                // dummy db directives used to calculate length of namec
 322+ 7991 53 4D 2F 52 >                db      "SM/REM"
 322+ 7995 45 4D       >
 322+ 7997             >len_NFA         defl    $ - temp_NFA
 322+ 7997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7991             >
 322+ 7991 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7992 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 7996 45 4D       >
 322+ 7998             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7997 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 7998             >
 322+ 7998 75 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 799A             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 799A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 799D             >
 322+ 799D             >
 322+ 799D             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 799D             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 799D             >
 322+ 799D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 799D 1F 6A 21 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79A1 21 69
 324+ 79A3 6C 79 45 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79A7 5C 79
 325+ 79A9 5B 68                        dw      UMDIVMOD                // um/mod
 326+ 79AB 33 69                        dw      R_TO                    // r>
 327+ 79AD 45 69 B6 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79B1 36 79 4F 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79B5 33 69                        dw      R_TO                    // r>
 330+ 79B7 36 79 4F 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79BB F7 68                        dw      EXIT                    // ;
 332+ 79BD
 333+ 79BD              //  ______________________________________________________________________
 334+ 79BD              //
 335+ 79BD              // fm/mod       d n -- q r
 336+ 79BD              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79BD              // the remainder has the sign of d.
 338+ 79BD                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79BD             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79BD             >
 338+ 79BD             >                // dummy db directives used to calculate length of namec
 338+ 79BD 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79C1 4F 44       >
 338+ 79C3             >len_NFA         defl    $ - temp_NFA
 338+ 79C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79BD             >
 338+ 79BD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79BE 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79C2 4F 44       >
 338+ 79C4             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79C3 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79C4             >
 338+ 79C4 91 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79C6             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79C6 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79C9             >
 338+ 79C9             >
 338+ 79C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79C9             >
 338+ 79C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79C9 5A 6A 21 69                  dw      DUP, TO_R               // dup >r
 340+ 79CD 9A 79                        dw      SMDIVM
 341+ 79CF 1F 6A 5A 6A                  dw      OVER, DUP
 342+ 79D3 54 69 54 69                  dw      ZEQUAL, ZEQUAL
 343+ 79D7 4F 6A 6E 69                  dw      SWAP, ZLESS
 344+ 79DB 45 69 6E 69                  dw      R_OP, ZLESS
 345+ 79DF B6 68 95 68                  dw      XOR_OP, AND_OP
 346+ 79E3 D8 63                        dw      ZBRANCH
 347+ 79E5 10 00                        dw      Fm_Mod_Else - $
 348+ 79E7 B9 69                        dw          ONE_SUBTRACT
 349+ 79E9 4F 6A 33 69                  dw          SWAP, R_TO
 350+ 79ED 92 69 4F 6A                  dw          PLUS, SWAP
 351+ 79F1 C3 63                        dw      BRANCH
 352+ 79F3 06 00                        dw      Fm_Mod_Endif - $
 353+ 79F5              Fm_Mod_Else:
 354+ 79F5 33 69 2D 6A                  dw          R_TO, DROP
 355+ 79F9              Fm_Mod_Endif:
 356+ 79F9 F7 68                        dw      EXIT
 357+ 79FB              //              dw      TWO_DUP                 // 2dup
 358+ 79FB              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 79FB              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 79FB              //              dw      UMDIVMOD                // um/mod
 361+ 79FB              //              dw      SWAP                    // swap
 362+ 79FB              //              dw      II, ZLESS               // i'
 363+ 79FB              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 79FB              //              dw      R_TO                    // r>
 365+ 79FB              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 79FB              //              dw      R_OP                    // r@
 367+ 79FB              //              dw      ZLESS                   // i'
 368+ 79FB              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 79FB              //              dw      R_TO                    // r>
 370+ 79FB              //              dw      PLUS_MINUS              // +- swap
 371+ 79FB              //              dw      EXIT                    // ;
 372+ 79FB
 373+ 79FB              //  ______________________________________________________________________
 374+ 79FB              //
 375+ 79FB              // m/mod        d n -- q r
 376+ 79FB              // multiply two integer giving a double
 377+ 79FB                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 79FB             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 79FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 79FB             >
 377+ 79FB             >                // dummy db directives used to calculate length of namec
 377+ 79FB 4D 2F 4D 4F >                db      "M/MOD"
 377+ 79FF 44          >
 377+ 7A00             >len_NFA         defl    $ - temp_NFA
 377+ 7A00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 79FB             >
 377+ 79FB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 79FC 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A00 44          >
 377+ 7A01             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A00 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A01             >
 377+ 7A01 BD 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A03             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A03 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A06             >
 377+ 7A06             >
 377+ 7A06             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A06             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A06             >
 377+ 7A06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A06 9A 79                        dw      SMDIVM
 379+ 7A08 F7 68                        dw      EXIT                    // ;
 380+ 7A0A
 381+ 7A0A              //  ______________________________________________________________________
 382+ 7A0A              //
 383+ 7A0A              // m/           d n -- q
 384+ 7A0A              // multiply two integer giving a double
 385+ 7A0A                              Colon_Def MDIV, "M/", is_normal
 385+ 7A0A             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A0A             >
 385+ 7A0A             >                // dummy db directives used to calculate length of namec
 385+ 7A0A 4D 2F       >                db      "M/"
 385+ 7A0C             >len_NFA         defl    $ - temp_NFA
 385+ 7A0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A0A             >
 385+ 7A0A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A0B 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A0D             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A0C AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A0D             >
 385+ 7A0D FB 79       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A0F             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A0F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A12             >
 385+ 7A12             >
 385+ 7A12             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A12             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A12             >
 385+ 7A12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A12 03 7A 36 6A                  dw      MDIVM, NIP
 387+ 7A16 F7 68                        dw      EXIT                    // ;
 388+ 7A18
 389+ 7A18              //  ______________________________________________________________________
 390+ 7A18              //
 391+ 7A18              // *            n1 n2 -- n3
 392+ 7A18              // multiply two integer
 393+ 7A18                              Colon_Def MUL, "*", is_normal
 393+ 7A18             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A18             >
 393+ 7A18             >                // dummy db directives used to calculate length of namec
 393+ 7A18 2A          >                db      "*"
 393+ 7A19             >len_NFA         defl    $ - temp_NFA
 393+ 7A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A18             >
 393+ 7A18 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A19 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A1A             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A19 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A1A             >
 393+ 7A1A 0A 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A1C             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A1C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A1F             >
 393+ 7A1F             >
 393+ 7A1F             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A1F             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A1F             >
 393+ 7A1F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A1F 7A 79 2D 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A23 F7 68                        dw      EXIT                    // ;
 396+ 7A25
 397+ 7A25              //  ______________________________________________________________________
 398+ 7A25              //
 399+ 7A25              // /mod         n1 n2 -- n3 n4
 400+ 7A25              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A25              // The remainder has the sign of n1
 402+ 7A25                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A25             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A25             >
 402+ 7A25             >                // dummy db directives used to calculate length of namec
 402+ 7A25 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A29             >len_NFA         defl    $ - temp_NFA
 402+ 7A29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A25             >
 402+ 7A25 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A26 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A2A             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A29 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A2A             >
 402+ 7A2A 18 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A2C             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A2C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A2F             >
 402+ 7A2F             >
 402+ 7A2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A2F             >
 402+ 7A2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A2F 21 69 79 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A33 33 69
 404+ 7A35 03 7A                        dw      MDIVM                   // m/mod
 405+ 7A37 F7 68                        dw      EXIT                    // ;
 406+ 7A39
 407+ 7A39              //  ______________________________________________________________________
 408+ 7A39              //
 409+ 7A39              // /            n1 n2 -- n3
 410+ 7A39              // division
 411+ 7A39                              Colon_Def DIV, "/", is_normal
 411+ 7A39             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A39             >
 411+ 7A39             >                // dummy db directives used to calculate length of namec
 411+ 7A39 2F          >                db      "/"
 411+ 7A3A             >len_NFA         defl    $ - temp_NFA
 411+ 7A3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A39             >
 411+ 7A39 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A3A 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A3B             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A3A AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A3B             >
 411+ 7A3B 25 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A3D             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A3D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A40             >
 411+ 7A40             >
 411+ 7A40             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A40             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A40             >
 411+ 7A40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A40 2C 7A 36 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A44 F7 68                        dw      EXIT                    // ;
 414+ 7A46
 415+ 7A46              //  ______________________________________________________________________
 416+ 7A46              //
 417+ 7A46              // mod          n1 n2 -- n3
 418+ 7A46                              Colon_Def MOD, "MOD", is_normal
 418+ 7A46             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A46             >
 418+ 7A46             >                // dummy db directives used to calculate length of namec
 418+ 7A46 4D 4F 44    >                db      "MOD"
 418+ 7A49             >len_NFA         defl    $ - temp_NFA
 418+ 7A49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A46             >
 418+ 7A46 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A47 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A4A             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A49 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A4A             >
 418+ 7A4A 39 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A4C             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A4C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A4F             >
 418+ 7A4F             >
 418+ 7A4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A4F             >
 418+ 7A4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A4F 2C 7A 2D 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A53 F7 68                        dw      EXIT                    // ;
 421+ 7A55
 422+ 7A55              //  ______________________________________________________________________
 423+ 7A55              //
 424+ 7A55              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A55              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A55              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A55              // avoids loss of precision
 428+ 7A55                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A55             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A55             >
 428+ 7A55             >                // dummy db directives used to calculate length of namec
 428+ 7A55 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A59 44          >
 428+ 7A5A             >len_NFA         defl    $ - temp_NFA
 428+ 7A5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A55             >
 428+ 7A55 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A56 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A5A 44          >
 428+ 7A5B             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A5A C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A5B             >
 428+ 7A5B 46 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A5D             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A5D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A60             >
 428+ 7A60             >
 428+ 7A60             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A60             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A60             >
 428+ 7A60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A60 21 69 7A 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A64 33 69 03 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A68 F7 68                        dw      EXIT                    // ;
 432+ 7A6A
 433+ 7A6A              //  ______________________________________________________________________
 434+ 7A6A              //
 435+ 7A6A              // */          n1 n2 n3 -- n4
 436+ 7A6A              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A6A                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A6A             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A6A             >
 437+ 7A6A             >                // dummy db directives used to calculate length of namec
 437+ 7A6A 2A 2F       >                db      "*/"
 437+ 7A6C             >len_NFA         defl    $ - temp_NFA
 437+ 7A6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A6A             >
 437+ 7A6A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A6B 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A6D             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A6C AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A6D             >
 437+ 7A6D 55 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A6F             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A6F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A72             >
 437+ 7A72             >
 437+ 7A72             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A72             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A72             >
 437+ 7A72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A72 5D 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A74 36 6A                        dw     NIP                      // nip
 440+ 7A76 F7 68                        dw     EXIT                     // ;
 441+ 7A78
 442+ 7A78
 443+ 7A78              //  ______________________________________________________________________
 444+ 7A78              //
 445+ 7A78              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A78              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A78              // All terms are unsigned.
 448+ 7A78              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A78              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A78              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A78              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A78              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A78              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A78              //              dw      EXIT                    // ;
 455+ 7A78
 456+ 7A78              //  ______________________________________________________________________
 457+ 7A78              //
 458+ 7A78              // (line)       n1 n2 -- a b
 459+ 7A78              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A78              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A78                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A78             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A78             >
 461+ 7A78             >                // dummy db directives used to calculate length of namec
 461+ 7A78 28 4C 49 4E >                db      "(LINE)"
 461+ 7A7C 45 29       >
 461+ 7A7E             >len_NFA         defl    $ - temp_NFA
 461+ 7A7E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A78             >
 461+ 7A78 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A79 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A7D 45 29       >
 461+ 7A7F             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A7E A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A7F             >
 461+ 7A7F 6A 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A81             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A81 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A84             >
 461+ 7A84             >
 461+ 7A84             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A84             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A84             >
 461+ 7A84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A84 21 69                        dw      TO_R                    // >r
 463+ 7A86 D7 6B                        dw      NOOP                    // noop
 464+ 7A88 66 6C                        dw      CL                      // c/l
 465+ 7A8A 73 6C 5D 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7A8E 33 69                        dw      R_TO                    // r>
 467+ 7A90 80 6C 1C 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7A94 92 69
 468+ 7A96 88 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7A98 92 69                        dw      PLUS                    // +
 470+ 7A9A D7 6B                        dw      NOOP                    // noop
 471+ 7A9C 66 6C                        dw      CL                      // c/l
 472+ 7A9E F7 68                        dw      EXIT                    // ;
 473+ 7AA0
 474+ 7AA0              //  ______________________________________________________________________
 475+ 7AA0              //
 476+ 7AA0              // .line        n1 n2 --
 477+ 7AA0              // Sends to output line  n1  of screen n2.
 478+ 7AA0                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7AA0             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7AA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7AA0             >
 478+ 7AA0             >                // dummy db directives used to calculate length of namec
 478+ 7AA0 2E 4C 49 4E >                db      ".LINE"
 478+ 7AA4 45          >
 478+ 7AA5             >len_NFA         defl    $ - temp_NFA
 478+ 7AA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7AA0             >
 478+ 7AA0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AA1 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AA5 45          >
 478+ 7AA6             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AA5 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AA6             >
 478+ 7AA6 78 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AA8             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AA8 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AAB             >
 478+ 7AAB             >
 478+ 7AAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AAB             >
 478+ 7AAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AAB 81 7A 53 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AAF ED 71
 480+ 7AB1 F7 68                        dw      EXIT                    // ;
 481+ 7AB3
 482+ 7AB3              //  ______________________________________________________________________
 483+ 7AB3              //
 484+ 7AB3              // message       n1 n2 --
 485+ 7AB3              // prints error message to current channel.
 486+ 7AB3              // if WARNING is 0, prints "MSG#n".
 487+ 7AB3              // if WARNING is 1, prints line n of screen 4.
 488+ 7AB3              // if WARNING is -1, see ERROR
 489+ 7AB3              // value can be negative or beyond block 4.
 490+ 7AB3                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AB3             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AB3             >
 490+ 7AB3             >                // dummy db directives used to calculate length of namec
 490+ 7AB3 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AB7 41 47 45    >
 490+ 7ABA             >len_NFA         defl    $ - temp_NFA
 490+ 7ABA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AB3             >
 490+ 7AB3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AB4 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AB8 41 47 45    >
 490+ 7ABB             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7ABA C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7ABB             >
 490+ 7ABB A0 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7ABD             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7ABD CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AC0             >
 490+ 7AC0             >
 490+ 7AC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AC0             >
 490+ 7AC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AC0 E4 6C DB 6A                  dw      WARNING, FETCH          // warning @
 492+ 7AC4                                                              // if
 493+ 7AC4 D8 63                        dw      ZBRANCH
 494+ 7AC6 18 00                        dw      Message_Else - $
 495+ 7AC8 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7ACC 6B 6D DB 6A                  dw          OFFSET, FETCH       //      offset @
 497+ 7AD0 80 6C 3D 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AD4 8B 6E
 498+ 7AD6 A8 7A                        dw          DOT_LINE            //      .line
 499+ 7AD8 46 6F                        dw          SPACE               //      space
 500+ 7ADA                                                              // else
 501+ 7ADA
 502+ 7ADA C3 63                        dw      BRANCH
 503+ 7ADC 0B 00                        dw      Message_ENdif - $
 504+ 7ADE              Message_Else:
 505+ 7ADE 09 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AE0 04 6D 73 67                  db          4, "msg#"
 506+ 7AE4 23
 507+ 7AE5 64 83                        dw          DOT                 //      .  ( forward )
 508+ 7AE7              Message_ENdif:                                  // endif
 509+ 7AE7 F7 68                        dw      EXIT                    // ;
 510+ 7AE9
 511+ 7AE9
 512+ 7AE9              //  ______________________________________________________________________
 513+ 7AE9              //
 514+ 7AE9              // device
 515+ 7AE9                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AE9             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AE9             >
 515+ 7AE9             >                // dummy db directives used to calculate length of namec
 515+ 7AE9 44 45 56 49 >                db      "DEVICE"
 515+ 7AED 43 45       >
 515+ 7AEF             >len_NFA         defl    $ - temp_NFA
 515+ 7AEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AE9             >
 515+ 7AE9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AEA 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7AEE 43 45       >
 515+ 7AF0             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7AEF C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7AF0             >
 515+ 7AF0 B3 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7AF2             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7AF2 CD 0B 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7AF5             >
 515+ 7AF5             >
 515+ 7AF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7AF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7AF5             >
 515+ 7AF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7AF5 02 00       >                dw      2
 516+ 7AF7
 517+ 7AF7              //  ______________________________________________________________________
 518+ 7AF7              //
 519+ 7AF7              // inkey        -- c | 0
 520+ 7AF7              // call ROM inkey$ routine, returns c or "zero".
 521+ 7AF7
 522+ 7AF7                              New_Def INKEY, "INKEY", is_code, is_normal
 522+ 7AF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7AF7             >
 522+ 7AF7             >                // dummy db directives used to calculate length of namec
 522+ 7AF7 49 4E 4B 45 >                db      "INKEY"
 522+ 7AFB 59          >
 522+ 7AFC             >len_NFA         defl    $ - temp_NFA
 522+ 7AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7AF7             >
 522+ 7AF7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7AF8 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 522+ 7AFC 59          >
 522+ 7AFD             >                org     $-1                 // alter last byte of Name just above to set
 522+ 7AFC D9          >                db      {b $} | END_BIT     // msb as name end
 522+ 7AFD             >
 522+ 7AFD E9 7A       >                dw      last_NFA            // Link to previous definition Name
 522+ 7AFF             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7AFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 522+ 7AFF ~           >
 522+ 7AFF ~           >
 522+ 7AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7AFF             >
 522+ 7AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7AFF
 524+ 7AFF C5                           push    bc
 525+ 7B00 ED 73 92 63                  ld      (SP_Saved), sp
 526+ 7B04 31 61 63                     ld      sp, Cold_origin - 5
 527+ 7B07 DD E5                        push    ix
 528+ 7B09 CD E6 15                     call    $15E6                   // instead of 15E9
 529+ 7B0C DD E1                        pop     ix
 530+ 7B0E ED 7B 92 63                  ld      sp, (SP_Saved)
 531+ 7B12 6F                           ld      l, a
 532+ 7B13 26 00                        ld      h, 0
 533+ 7B15 C1                           pop     bc
 534+ 7B16                              psh1
 534+ 7B16 E5          >                push    hl
 534+ 7B17 DD E9       >                jp      (ix)
 535+ 7B19
 536+ 7B19              //  ______________________________________________________________________
 537+ 7B19              //
 538+ 7B19              // select      n --
 539+ 7B19              // selects the given channel number
 540+ 7B19
 541+ 7B19                              New_Def SELECT, "SELECT", is_code, is_normal
 541+ 7B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 7B19             >
 541+ 7B19             >                // dummy db directives used to calculate length of namec
 541+ 7B19 53 45 4C 45 >                db      "SELECT"
 541+ 7B1D 43 54       >
 541+ 7B1F             >len_NFA         defl    $ - temp_NFA
 541+ 7B1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 7B19             >
 541+ 7B19 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 7B1A 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 541+ 7B1E 43 54       >
 541+ 7B20             >                org     $-1                 // alter last byte of Name just above to set
 541+ 7B1F D4          >                db      {b $} | END_BIT     // msb as name end
 541+ 7B20             >
 541+ 7B20 F7 7A       >                dw      last_NFA            // Link to previous definition Name
 541+ 7B22             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 7B22 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 541+ 7B22 ~           >
 541+ 7B22 ~           >
 541+ 7B22             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 7B22             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 7B22             >
 541+ 7B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 7B22 E1                           pop     hl
 543+ 7B23 C5                           push    bc
 544+ 7B24 7D                           ld      a, l
 545+ 7B25 ED 73 92 63                  ld      (SP_Saved), sp
 546+ 7B29 31 61 63                     ld      sp, Cold_origin - 5
 547+ 7B2C DD E5                        push    ix
 548+ 7B2E CD 01 16                     call    $1601
 549+ 7B31 DD E1                        pop     ix
 550+ 7B33 ED 7B 92 63                  ld      sp, (SP_Saved)
 551+ 7B37 C1                           pop     bc
 552+ 7B38
 553+ 7B38                              next
 553+ 7B38 DD E9       >                jp      (ix)
 554+ 7B3A
 555+ 7B3A              //  ______________________________________________________________________
 556+ 7B3A
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B3A                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B3A              //  ______________________________________________________________________
   2+ 7B3A              //
   3+ 7B3A              //  next-opt.asm
   4+ 7B3A              //
   5+ 7B3A              //  ZX Spectrum Next - peculiar definitions
   6+ 7B3A              //  ______________________________________________________________________
   7+ 7B3A
   8+ 7B3A              //  ______________________________________________________________________
   9+ 7B3A              //
  10+ 7B3A              // reg@         n -- b
  11+ 7B3A              // read Next REGister n giving byte b
  12+ 7B3A              //
  13+ 7B3A              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B3A              //              dw      LIT, $243B
  15+ 7B3A              //              dw      PSTORE
  16+ 7B3A              //              dw      LIT, $253B
  17+ 7B3A              //              dw      PFETCH
  18+ 7B3A              //              dw      EXIT
  19+ 7B3A                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B3A             >
  19+ 7B3A             >                // dummy db directives used to calculate length of namec
  19+ 7B3A 52 45 47 40 >                db      "REG@"
  19+ 7B3E             >len_NFA         defl    $ - temp_NFA
  19+ 7B3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B3A             >
  19+ 7B3A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B3B 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B3F             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B3E C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B3F             >
  19+ 7B3F 19 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B41             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B41 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B41 ~           >
  19+ 7B41 ~           >
  19+ 7B41             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B41             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B41             >
  19+ 7B41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B41 D9                           exx
  21+ 7B42 01 3B 24                     ld      bc, $243B
  22+ 7B45 E1                           pop     hl
  23+ 7B46 ED 69                        out     (c), l
  24+ 7B48 04                           inc     b
  25+ 7B49 ED 68                        in      l, (c)
  26+ 7B4B E5                           push    hl
  27+ 7B4C D9                           exx
  28+ 7B4D                              next
  28+ 7B4D DD E9       >                jp      (ix)
  29+ 7B4F
  30+ 7B4F
  31+ 7B4F              //  ______________________________________________________________________
  32+ 7B4F              //
  33+ 7B4F              // reg!         b n --
  34+ 7B4F              // write value b to Next REGister n
  35+ 7B4F              //
  36+ 7B4F              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B4F              //              dw      LIT, $243B
  38+ 7B4F              //              dw      PSTORE
  39+ 7B4F              //              dw      LIT, $253B
  40+ 7B4F              //              dw      PSTORE
  41+ 7B4F              //              dw      EXIT
  42+ 7B4F                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B4F             >
  42+ 7B4F             >                // dummy db directives used to calculate length of namec
  42+ 7B4F 52 45 47 21 >                db      "REG!"
  42+ 7B53             >len_NFA         defl    $ - temp_NFA
  42+ 7B53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B4F             >
  42+ 7B4F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B50 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B54             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B53 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B54             >
  42+ 7B54 3A 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B56             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B56 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B56 ~           >
  42+ 7B56 ~           >
  42+ 7B56             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B56             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B56             >
  42+ 7B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B56 D9                           exx
  44+ 7B57 01 3B 24                     ld      bc, $243B
  45+ 7B5A E1                           pop     hl
  46+ 7B5B ED 69                        out     (c), l
  47+ 7B5D 04                           inc     b
  48+ 7B5E E1                           pop     hl
  49+ 7B5F ED 69                        out     (c), l
  50+ 7B61 D9                           exx
  51+ 7B62                              next
  51+ 7B62 DD E9       >                jp      (ix)
  52+ 7B64
  53+ 7B64
  54+ 7B64              //  ______________________________________________________________________
  55+ 7B64              //
  56+ 7B64              // mmu7@        -- n
  57+ 7B64              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B64
  59+ 7B64                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B64             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B64             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B64             >
  59+ 7B64             >                // dummy db directives used to calculate length of namec
  59+ 7B64 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B68 40          >
  59+ 7B69             >len_NFA         defl    $ - temp_NFA
  59+ 7B69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B64             >
  59+ 7B64 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B65 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B69 40          >
  59+ 7B6A             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B69 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B6A             >
  59+ 7B6A 4F 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B6C             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B6C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B6F             >
  59+ 7B6F             >
  59+ 7B6F             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B6F             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B6F             >
  59+ 7B6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B6F A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B73 41 7B
  61+ 7B75 F7 68                        dw      EXIT
  62+ 7B77
  63+ 7B77              //  ______________________________________________________________________
  64+ 7B77              //
  65+ 7B77              // mmu7!        n --
  66+ 7B77              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B77              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B77
  69+ 7B77                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B77             >
  69+ 7B77             >                // dummy db directives used to calculate length of namec
  69+ 7B77 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B7B 21          >
  69+ 7B7C             >len_NFA         defl    $ - temp_NFA
  69+ 7B7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B77             >
  69+ 7B77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B78 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B7C 21          >
  69+ 7B7D             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B7C A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B7D             >
  69+ 7B7D 64 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B7F             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B7F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B7F ~           >
  69+ 7B7F ~           >
  69+ 7B7F             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B7F             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B7F             >
  69+ 7B7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B7F E1                           pop     hl
  71+ 7B80 7D                           ld      a, l
  72+ 7B81 ED 92 57                     nextreg 87, a
  73+ 7B84
  74+ 7B84                              next
  74+ 7B84 DD E9       >                jp      (ix)
  75+ 7B86
  76+ 7B86              //  ______________________________________________________________________
  77+ 7B86              //
  78+ 7B86              // >far         ha -- a n
  79+ 7B86              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B86              // take lower bits of H and L as an offset from E000h
  81+ 7B86              // then return address  a  between E000h-FFFFh
  82+ 7B86              // and page number n  between 64-71 (40h-47h)
  83+ 7B86              // For example, in hex:
  84+ 7B86              //   0000 >FAR  gives  40.E000
  85+ 7B86              //   1FFF >FAR  gives  40.FFFF
  86+ 7B86              //   2000 >FAR  gives  41.E000
  87+ 7B86              //   3FFF >FAR  gives  41.FFFF
  88+ 7B86              //   EFFF >FAR  gives  47.EFFF
  89+ 7B86              //   FFFF >FAR  gives  47.FFFF
  90+ 7B86              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B86              //                pop     de
  92+ 7B86              //                ld      a, d
  93+ 7B86              //                and     $E0
  94+ 7B86              //                rlca
  95+ 7B86              //                rlca
  96+ 7B86              //                rlca
  97+ 7B86              //                add     $40
  98+ 7B86              //                ld      l, a
  99+ 7B86              //                ld      h, 0
 100+ 7B86              //                ld      a, d
 101+ 7B86              //                or      $E0
 102+ 7B86              //                ld      d, a
 103+ 7B86              //                push    hl
 104+ 7B86              //                push    de
 105+ 7B86              //                next
 106+ 7B86
 107+ 7B86              //  ______________________________________________________________________
 108+ 7B86              //
 109+ 7B86              // <far         a n  -- ha
 110+ 7B86              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B86              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B86              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B86              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B86              //                pop     de                  // page number in e
 115+ 7B86              //                pop     hl                  // address in hl
 116+ 7B86              //                ld      a, e
 117+ 7B86              //                sub     $40                 // reduced to 0-7
 118+ 7B86              //                rrca
 119+ 7B86              //                rrca
 120+ 7B86              //                rrca
 121+ 7B86              //                ld      d, a                // save to d bits 765
 122+ 7B86              //                ld      a, h                // drops
 123+ 7B86              //                and     $1F
 124+ 7B86              //                or      d
 125+ 7B86              //                ld      h, a
 126+ 7B86              //
 127+ 7B86              //                psh1
 128+ 7B86
 129+ 7B86              //  ______________________________________________________________________
 130+ 7B86              //
 131+ 7B86              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B86              // NextZXOS call wrapper.
 133+ 7B86              //  n1 = hl register parameter value
 134+ 7B86              //  n2 = de register parameter value
 135+ 7B86              //  n3 = bc register parameter value
 136+ 7B86              //  n4 =  a register parameter value
 137+ 7B86              //   a = routine address in ROM 3
 138+ 7B86              // ----
 139+ 7B86              //  n5 = hl returned value
 140+ 7B86              //  n6 = de returned value
 141+ 7B86              //  n7 = bc returned value
 142+ 7B86              //  n8 =  a returned value
 143+ 7B86              //   f
 144+ 7B86                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B86             >
 144+ 7B86             >                // dummy db directives used to calculate length of namec
 144+ 7B86 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B8A 44 4F 53    >
 144+ 7B8D             >len_NFA         defl    $ - temp_NFA
 144+ 7B8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B86             >
 144+ 7B86 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B87 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B8B 44 4F 53    >
 144+ 7B8E             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B8D D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B8E             >
 144+ 7B8E 77 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B90             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B90 ~           >
 144+ 7B90 ~           >
 144+ 7B90             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B90             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B90             >
 144+ 7B90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B90 D1                           pop     de                  // dos call entry address in de
 146+ 7B91 E1                           pop     hl                  // a register
 147+ 7B92 7D                           ld      a, l
 148+ 7B93 D9                           exx
 149+ 7B94 C1                           pop     bc
 150+ 7B95 D1                           pop     de
 151+ 7B96 E1                           pop     hl
 152+ 7B97 D9                           exx
 153+ 7B98
 154+ 7B98 C5                           push    bc
 155+ 7B99 DD E5                        push    ix
 156+ 7B9B
 157+ 7B9B              //              ld      (SP_Saved), sp
 158+ 7B9B              //              ld      sp, Cold_origin - 5
 159+ 7B9B 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B9D
 161+ 7B9D CF                           rst     08
 162+ 7B9E 94                           db      $94
 163+ 7B9F
 164+ 7B9F              //              ld      sp, (SP_Saved)
 165+ 7B9F              //              push    ix
 166+ 7B9F              //              pop     hl
 167+ 7B9F              //              ld      (IX_Echo), hl
 168+ 7B9F DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7BA3              //              nop
 170+ 7BA3 DD E1                        pop     ix
 171+ 7BA5 E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7BA6 D5                           push    de
 173+ 7BA7 C5                           push    bc
 174+ 7BA8 4D                           ld      c, l
 175+ 7BA9 44                           ld      b, h
 176+ 7BAA
 177+ 7BAA 26 00                        ld      h, 0
 178+ 7BAC 6F                           ld      l, a
 179+ 7BAD E5                           push    hl
 180+ 7BAE ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7BB0 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7BB1
 183+ 7BB1                              psh1
 183+ 7BB1 E5          >                push    hl
 183+ 7BB2 DD E9       >                jp      (ix)
 184+ 7BB4
 185+ 7BB4              //  ______________________________________________________________________
 186+ 7BB4              //
 187+ 7BB4              // blk-fh
 188+ 7BB4                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7BB4             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7BB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7BB4             >
 188+ 7BB4             >                // dummy db directives used to calculate length of namec
 188+ 7BB4 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7BB8 46 48       >
 188+ 7BBA             >len_NFA         defl    $ - temp_NFA
 188+ 7BBA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7BB4             >
 188+ 7BB4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7BB5 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7BB9 46 48       >
 188+ 7BBB             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7BBA C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7BBB             >
 188+ 7BBB 86 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7BBD             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7BBD CD 0B 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7BC0             >
 188+ 7BC0             >
 188+ 7BC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7BC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7BC0             >
 188+ 7BC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7BC0 01 00       >                dw      1
 189+ 7BC2
 190+ 7BC2                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7BC2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7BC2             >
 190+ 7BC2             >                // dummy db directives used to calculate length of namec
 190+ 7BC2 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7BC6 46 4E 41 4D >
 190+ 7BCA 45          >
 190+ 7BCB             >len_NFA         defl    $ - temp_NFA
 190+ 7BCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7BC2             >
 190+ 7BC2 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7BC3 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7BC7 46 4E 41 4D >
 190+ 7BCB 45          >
 190+ 7BCC             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7BCB C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7BCC             >
 190+ 7BCC B4 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7BCE             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7BCE CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BD1             >
 190+ 7BD1             >
 190+ 7BD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BD1             >
 190+ 7BD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BD1 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BD5 6F 63 6B 73
 191+ 7BD9 2D 36 34 2E
 191+ 7BDD 62 69 6E 00
 192+ 7BE1 00 00 00...                  ds      24
 193+ 7BF9
 194+ 7BF9              //  ______________________________________________________________________
 195+ 7BF9              //
 196+ 7BF9              // blk-seek     n --
 197+ 7BF9              // seek block n  within blocks!.bin  file
 198+ 7BF9                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BF9             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BF9             >
 198+ 7BF9             >                // dummy db directives used to calculate length of namec
 198+ 7BF9 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BFD 53 45 45 4B >
 198+ 7C01             >len_NFA         defl    $ - temp_NFA
 198+ 7C01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BF9             >
 198+ 7BF9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BFA 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BFE 53 45 45 4B >
 198+ 7C02             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7C01 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7C02             >
 198+ 7C02 C2 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7C04             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7C04 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7C07             >
 198+ 7C07             >
 198+ 7C07             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7C07             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7C07             >
 198+ 7C07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7C07 73 6C 7A 79                  dw  BBUF, MMUL
 200+ 7C0B BD 7B DB 6A                  dw  BLK_FH, FETCH
 201+ 7C0F 10 67                        dw  F_SEEK
 202+ 7C11 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7C15 10 70
 203+ 7C17 F7 68                        dw  EXIT
 204+ 7C19
 205+ 7C19              //  ______________________________________________________________________
 206+ 7C19              //
 207+ 7C19              // blk-read     n --
 208+ 7C19              // seek block n  within blocks!.bin  file
 209+ 7C19                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7C19             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7C19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7C19             >
 209+ 7C19             >                // dummy db directives used to calculate length of namec
 209+ 7C19 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7C1D 52 45 41 44 >
 209+ 7C21             >len_NFA         defl    $ - temp_NFA
 209+ 7C21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7C19             >
 209+ 7C19 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7C1A 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7C1E 52 45 41 44 >
 209+ 7C22             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7C21 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7C22             >
 209+ 7C22 F9 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7C24             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7C24 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7C27             >
 209+ 7C27             >
 209+ 7C27             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7C27             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7C27             >
 209+ 7C27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7C27 04 7C                        dw  BLK_SEEK
 211+ 7C29 73 6C                        dw  BBUF
 212+ 7C2B BD 7B DB 6A                  dw  BLK_FH, FETCH
 213+ 7C2F 74 67                        dw  F_READ
 214+ 7C31 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C35 10 70
 215+ 7C37 2D 6A                        dw  DROP
 216+ 7C39 F7 68                        dw  EXIT
 217+ 7C3B
 218+ 7C3B              //  ______________________________________________________________________
 219+ 7C3B              //
 220+ 7C3B              // blk-write     n --
 221+ 7C3B              // seek block n  within blocks!.bin  file
 222+ 7C3B                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C3B             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C3B             >
 222+ 7C3B             >                // dummy db directives used to calculate length of namec
 222+ 7C3B 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C3F 57 52 49 54 >
 222+ 7C43 45          >
 222+ 7C44             >len_NFA         defl    $ - temp_NFA
 222+ 7C44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C3B             >
 222+ 7C3B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C3C 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C40 57 52 49 54 >
 222+ 7C44 45          >
 222+ 7C45             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C44 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C45             >
 222+ 7C45 19 7C       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C47             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C47 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C4A             >
 222+ 7C4A             >
 222+ 7C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C4A             >
 222+ 7C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C4A 04 7C                        dw  BLK_SEEK
 224+ 7C4C 73 6C                        dw  BBUF
 225+ 7C4E BD 7B DB 6A                  dw  BLK_FH, FETCH
 226+ 7C52 91 67                        dw  F_WRITE
 227+ 7C54 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C58 10 70
 228+ 7C5A 2D 6A                        dw  DROP
 229+ 7C5C F7 68                        dw  EXIT
 230+ 7C5E
 231+ 7C5E              //  ______________________________________________________________________
 232+ 7C5E              //
 233+ 7C5E              // blk-init     n --
 234+ 7C5E              // seek block n  within blocks!.bin  file
 235+ 7C5E                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C5E             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C5E             >
 235+ 7C5E             >                // dummy db directives used to calculate length of namec
 235+ 7C5E 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C62 49 4E 49 54 >
 235+ 7C66             >len_NFA         defl    $ - temp_NFA
 235+ 7C66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C5E             >
 235+ 7C5E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C5F 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C63 49 4E 49 54 >
 235+ 7C67             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C66 D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C67             >
 235+ 7C67 3B 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C69             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C69 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C6C             >
 235+ 7C6C             >
 235+ 7C6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C6C             >
 235+ 7C6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C6C BD 7B DB 6A                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C70 31 67 2D 6A
 237+ 7C74 CE 7B AF 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C78 36 6E 47 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C7C A6 67
 239+ 7C7E A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C82 10 70
 240+ 7C84 BD 7B E6 6A                  dw  BLK_FH, STORE
 241+ 7C88 F7 68                        dw  EXIT
 242+ 7C8A
 243+ 7C8A              //  ______________________________________________________________________
 244+ 7C8A              //
 245+ 7C8A              // #sec
 246+ 7C8A              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C8A              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C8A
 249+ 7C8A                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C8A             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C8A             >
 249+ 7C8A             >                // dummy db directives used to calculate length of namec
 249+ 7C8A 23 53 45 43 >                db      "#SEC"
 249+ 7C8E             >len_NFA         defl    $ - temp_NFA
 249+ 7C8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C8A             >
 249+ 7C8A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C8B 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C8F             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C8E C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C8F             >
 249+ 7C8F 5E 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C91             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C91 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C94             >
 249+ 7C94             >
 249+ 7C94             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C94             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C94             >
 249+ 7C94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C94 FF 7F       >                dw      32767
 250+ 7C96
 251+ 7C96              //  ______________________________________________________________________
 252+ 7C96
 253+ 7C96
 254+ 7C96
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C96                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C96              //  ______________________________________________________________________
   2+ 7C96              //
   3+ 7C96              //  L3.asm
   4+ 7C96              //
   5+ 7C96              //  Continuation of L2.asm
   6+ 7C96              //  I/O Block definitions
   7+ 7C96              //  ______________________________________________________________________
   8+ 7C96
   9+ 7C96
  10+ 7C96              //  ______________________________________________________________________
  11+ 7C96              //
  12+ 7C96              // r/w          a n f --
  13+ 7C96              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C96                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C96             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C96             >
  14+ 7C96             >                // dummy db directives used to calculate length of namec
  14+ 7C96 52 2F 57    >                db      "R/W"
  14+ 7C99             >len_NFA         defl    $ - temp_NFA
  14+ 7C99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C96             >
  14+ 7C96 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C97 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C9A             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C99 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C9A             >
  14+ 7C9A 8A 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C9C             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C9C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C9F             >
  14+ 7C9F             >
  14+ 7C9F             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C9F             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C9F             >
  14+ 7C9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C9F 21 69                        dw      TO_R                    // >r
  16+ 7CA1 B9 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7CA3 5A 6A 6E 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CA7 1F 6A 91 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CAB B9 69 D1 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CAF A5 68                        dw      OR_OP                   // or
  21+ 7CB1 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CB5 10 70
  22+ 7CB7 33 69                        dw      R_TO                    // r>
  23+ 7CB9                                                              // if
  24+ 7CB9 D8 63                        dw      ZBRANCH
  25+ 7CBB 08 00                        dw      Read_Write_Else - $
  26+ 7CBD 24 7C                        dw          BLK_READ            //      blk-read
  27+ 7CBF C3 63                        dw      BRANCH
  28+ 7CC1 04 00                        dw      Read_Write_Endif - $
  29+ 7CC3              Read_Write_Else:                                // else
  30+ 7CC3 47 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CC5              Read_Write_Endif:                               // endif
  32+ 7CC5 F7 68                        dw      EXIT                    // ;
  33+ 7CC7
  34+ 7CC7
  35+ 7CC7              //  ______________________________________________________________________
  36+ 7CC7              //
  37+ 7CC7              // +buf        a1 -- a2 f
  38+ 7CC7              // advences to next buffer, cyclically rotating along them
  39+ 7CC7                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CC7             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CC7             >
  39+ 7CC7             >                // dummy db directives used to calculate length of namec
  39+ 7CC7 2B 42 55 46 >                db      "+BUF"
  39+ 7CCB             >len_NFA         defl    $ - temp_NFA
  39+ 7CCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CC7             >
  39+ 7CC7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CC8 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CCC             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CCB C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CCC             >
  39+ 7CCC 96 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CCE             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CCE CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CD1             >
  39+ 7CD1             >
  39+ 7CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CD1             >
  39+ 7CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CD1 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CD5 92 69
  41+ 7CD7 5A 6A 20 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CDB DB 6A
  42+ 7CDD 97 6E                        dw      EQUALS                  // =
  43+ 7CDF                                                              // if
  44+ 7CDF D8 63                        dw      ZBRANCH
  45+ 7CE1 08 00                        dw      PBuf_Endif - $
  46+ 7CE3 2D 6A                        dw          DROP                //      drop
  47+ 7CE5 14 6D DB 6A                  dw          FIRST, FETCH        //      first @
  48+ 7CE9              PBuf_Endif:                                     // endif
  49+ 7CE9 5A 6A E4 6D                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CED DB 6A
  50+ 7CEF 8B 6E                        dw      SUBTRACT                // -
  51+ 7CF1 F7 68                        dw      EXIT                    // ;
  52+ 7CF3
  53+ 7CF3              //  ______________________________________________________________________
  54+ 7CF3              //
  55+ 7CF3              // update       --
  56+ 7CF3              // mark the last used block to be written to disk
  57+ 7CF3                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CF3             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CF3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CF3             >
  57+ 7CF3             >                // dummy db directives used to calculate length of namec
  57+ 7CF3 55 50 44 41 >                db      "UPDATE"
  57+ 7CF7 54 45       >
  57+ 7CF9             >len_NFA         defl    $ - temp_NFA
  57+ 7CF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CF3             >
  57+ 7CF3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CF4 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CF8 54 45       >
  57+ 7CFA             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CF9 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CFA             >
  57+ 7CFA C7 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CFC             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CFC CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CFF             >
  57+ 7CFF             >
  57+ 7CFF             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CFF             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CFF             >
  57+ 7CFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CFF E4 6D DB 6A                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D03 DB 6A
  59+ 7D05 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D09 A5 68
  60+ 7D0B E4 6D DB 6A                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D0F E6 6A
  61+ 7D11 F7 68                        dw      EXIT                    // ;
  62+ 7D13
  63+ 7D13
  64+ 7D13              //  ______________________________________________________________________
  65+ 7D13              //
  66+ 7D13              // empty-buffers --
  67+ 7D13                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D13             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D13             >
  67+ 7D13             >                // dummy db directives used to calculate length of namec
  67+ 7D13 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D17 59 2D 42 55 >
  67+ 7D1B 46 46 45 52 >
  67+ 7D1F 53          >
  67+ 7D20             >len_NFA         defl    $ - temp_NFA
  67+ 7D20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D13             >
  67+ 7D13 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D14 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D18 59 2D 42 55 >
  67+ 7D1C 46 46 45 52 >
  67+ 7D20 53          >
  67+ 7D21             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D20 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D21             >
  67+ 7D21 F3 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D23             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D23 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D26             >
  67+ 7D26             >
  67+ 7D26             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D26             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D26             >
  67+ 7D26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D26 14 6D DB 6A                  dw      FIRST, FETCH            // first @
  69+ 7D2A 20 6D DB 6A                  dw      LIMIT, FETCH            // limit @
  70+ 7D2E 1F 6A 8B 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D32 6C 73
  71+ 7D34 F7 68                        dw      EXIT                    // ;
  72+ 7D36
  73+ 7D36              //  ______________________________________________________________________
  74+ 7D36              //
  75+ 7D36              // buffer       n -- a
  76+ 7D36              // read block n and gives the address to a buffer
  77+ 7D36              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D36              // disk before reading the block n.
  79+ 7D36
  80+ 7D36                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D36             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D36             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D36             >
  80+ 7D36             >                // dummy db directives used to calculate length of namec
  80+ 7D36 42 55 46 46 >                db      "BUFFER"
  80+ 7D3A 45 52       >
  80+ 7D3C             >len_NFA         defl    $ - temp_NFA
  80+ 7D3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D36             >
  80+ 7D36 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D37 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D3B 45 52       >
  80+ 7D3D             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D3C D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D3D             >
  80+ 7D3D 13 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D3F             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D3F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D42             >
  80+ 7D42             >
  80+ 7D42             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D42             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D42             >
  80+ 7D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D42 D9 6D DB 6A                  dw      USE, FETCH              // use @
  82+ 7D46 5A 6A 21 69                  dw      DUP, TO_R               // dup >r
  83+ 7D4A                                                              // begin
  84+ 7D4A              Buffer_Begin:
  85+ 7D4A CE 7C                        dw          PBUF                //      +buf
  86+ 7D4C                                                              // until
  87+ 7D4C D8 63                        dw      ZBRANCH
  88+ 7D4E FC FF                        dw      Buffer_Begin - $
  89+ 7D50 D9 6D E6 6A                  dw      USE, STORE              // use !
  90+ 7D54 45 69 DB 6A                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D58 6E 69
  91+ 7D5A                                                              // if
  92+ 7D5A D8 63                        dw      ZBRANCH
  93+ 7D5C 14 00                        dw      Buffer_Endif - $
  94+ 7D5E 45 69 D1 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D62 45 69 DB 6A                  dw          R_OP, FETCH         //      r fetch
  96+ 7D66 A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D6A 95 68                        dw          AND_OP              //      and
  98+ 7D6C 2C 6C 9C 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D70              Buffer_Endif:                                   // endif
 100+ 7D70 45 69 E6 6A                  dw      R_OP, STORE             // r !
 101+ 7D74 45 69 E4 6D                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D78 E6 6A
 102+ 7D7A 33 69 D1 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D7E F7 68                        dw      EXIT                    // ;
 104+ 7D80
 105+ 7D80              //  ______________________________________________________________________
 106+ 7D80              //
 107+ 7D80              // block        n -- a
 108+ 7D80              // Leaves the buffer address that contains the block n.
 109+ 7D80              // If the block is not already present, it will be loaded from disk
 110+ 7D80              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D80              // disk before reading the block n.
 112+ 7D80              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D80
 114+ 7D80                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D80             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D80             >
 114+ 7D80             >                // dummy db directives used to calculate length of namec
 114+ 7D80 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D84 4B          >
 114+ 7D85             >len_NFA         defl    $ - temp_NFA
 114+ 7D85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D80             >
 114+ 7D80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D81 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D85 4B          >
 114+ 7D86             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D85 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D86             >
 114+ 7D86 36 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D88             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D88 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D8B             >
 114+ 7D8B             >
 114+ 7D8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D8B             >
 114+ 7D8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D8B 6B 6D DB 6A                  dw      OFFSET, FETCH           // offset @
 116+ 7D8F 92 69 21 69                  dw      PLUS, TO_R              // + >r
 117+ 7D93 E4 6D DB 6A                  dw      PREV, FETCH             // prev @
 118+ 7D97 5A 6A DB 6A                  dw      DUP, FETCH              // dup @
 119+ 7D9B 45 69 8B 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D9F 5A 6A 92 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DA3                                                              // if
 122+ 7DA3 D8 63                        dw        ZBRANCH
 123+ 7DA5 32 00                        dw        Block_Endif_1 - $
 124+ 7DA7              Block_Begin:                                    //      begin
 125+ 7DA7 CE 7C 54 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DAB                                                              //          if
 127+ 7DAB D8 63                        dw          ZBRANCH
 128+ 7DAD 12 00                        dw          Block_Endif_2 - $
 129+ 7DAF 2D 6A                        dw              DROP            //              drop
 130+ 7DB1 45 69 3F 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DB5 5A 6A                        dw              DUP             //              dup
 132+ 7DB7 45 69 35 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DBB 9C 7C                        dw              READ_WRITE      //              r/w
 134+ 7DBD E7 69                        dw              TWO_MINUS       //              2-
 135+ 7DBF              Block_Endif_2:                                  //          endif
 136+ 7DBF 5A 6A DB 6A                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DC3 45 69
 137+ 7DC5 8B 6E 5A 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DC9 92 69 54 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DCD                                                              //      until
 140+ 7DCD D8 63                        dw        ZBRANCH
 141+ 7DCF D8 FF                        dw        Block_Begin - $
 142+ 7DD1 5A 6A E4 6D                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DD5 E6 6A
 143+ 7DD7              Block_Endif_1:                                  // endif
 144+ 7DD7 33 69 2D 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DDB D1 69
 145+ 7DDD F7 68                        dw      EXIT                    // ;
 146+ 7DDF
 147+ 7DDF              //  ______________________________________________________________________
 148+ 7DDF              //
 149+ 7DDF              // #buff        -- n
 150+ 7DDF              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DDF                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DDF             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DDF             >
 151+ 7DDF             >                // dummy db directives used to calculate length of namec
 151+ 7DDF 23 42 55 46 >                db      "#BUFF"
 151+ 7DE3 46          >
 151+ 7DE4             >len_NFA         defl    $ - temp_NFA
 151+ 7DE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DDF             >
 151+ 7DDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DE0 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DE4 46          >
 151+ 7DE5             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DE4 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DE5             >
 151+ 7DE5 80 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DE7             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DE7 CD F0 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DEA             >
 151+ 7DEA             >
 151+ 7DEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DEA             >
 151+ 7DEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DEA 07 00       >                dw      7
 152+ 7DEC
 153+ 7DEC              //  ______________________________________________________________________
 154+ 7DEC              //
 155+ 7DEC              // flush        --
 156+ 7DEC                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DEC             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DEC             >
 156+ 7DEC             >                // dummy db directives used to calculate length of namec
 156+ 7DEC 46 4C 55 53 >                db      "FLUSH"
 156+ 7DF0 48          >
 156+ 7DF1             >len_NFA         defl    $ - temp_NFA
 156+ 7DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DEC             >
 156+ 7DEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DED 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DF1 48          >
 156+ 7DF2             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DF1 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DF2             >
 156+ 7DF2 DF 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DF4             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DF4 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DF7             >
 156+ 7DF7             >
 156+ 7DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DF7             >
 156+ 7DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DF7 E7 7D AF 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DFB 2C 6C
 158+ 7DFD              Flush_Do:                                       // do
 159+ 7DFD 5D 64                        dw      C_DO
 160+ 7DFF 2C 6C 3F 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E03 2D 6A
 161+ 7E05                                                              // loop
 162+ 7E05 22 64 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E09 BD 7B DB 6A                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E0D 43 67 2D 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E11 F7 68                        dw      EXIT                    // exit
 166+ 7E13
 167+ 7E13              //  ______________________________________________________________________
 168+ 7E13              //
 169+ 7E13              // f_getline    a m fh -- n
 170+ 7E13              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E13              // Address a is left for subsequent processing
 172+ 7E13              // and n as the actual number of byte read, that is the length of line
 173+ 7E13                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E13             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E13             >
 173+ 7E13             >                // dummy db directives used to calculate length of namec
 173+ 7E13 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E17 54 4C 49 4E >
 173+ 7E1B 45          >
 173+ 7E1C             >len_NFA         defl    $ - temp_NFA
 173+ 7E1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E13             >
 173+ 7E13 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E14 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E18 54 4C 49 4E >
 173+ 7E1C 45          >
 173+ 7E1D             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E1C C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E1D             >
 173+ 7E1D EC 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E1F             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E1F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E22             >
 173+ 7E22             >
 173+ 7E22             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E22             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E22             >
 173+ 7E22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E22 21 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E24 41 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E26 45 69 58 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E2A A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E2E 10 70
 178+ 7E30
 179+ 7E30 9F 6A 1F 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E34 AF 69 4F 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E38
 182+ 7E38 45 69 74 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E3C A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E40 10 70
 184+ 7E42                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E42 D8 63                        dw      ZBRANCH
 186+ 7E44 3C 00                        dw      FGetline_Else - $
 187+ 7E46 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E4A 46 65
 188+ 7E4C 2D 6A 36 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E50 4F 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E52 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E56 46 65
 191+ 7E58 2D 6A 36 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E5C 65 6A E0 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E60 5A 6A 14 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E64 E6 6A
 194+ 7E66 5A 6A 21 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E6A 9F 6A 33 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E6E 2C 6C 9D 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E72 33 69 10 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E76 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E7A 10 70
 199+ 7E7C                                                              // else
 200+ 7E7C C3 63                        dw      BRANCH
 201+ 7E7E 0C 00                        dw      FGetline_Endif - $
 202+ 7E80              FGetline_Else:
 203+ 7E80 33 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E82 9F 6A 93 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E86 2D 6A 2C 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E8A              FGetline_Endif:                                 // endif
 207+ 7E8A 21 69 5A 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E8E 5A 6A
 208+ 7E90 AF 69 4F 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E94 45 69 FD 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E98 AF 6A 92 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E9C 2C 6C 4F 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7EA0 DC 69 E6 6A                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EA4 45 69 92 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EA8 B9 69
 214+ 7EAA 4F 6A 45 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EAE 8B 6E
 215+ 7EB0 7E 73                        dw      BLANKS                  // blanks
 216+ 7EB2 33 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EB4 F7 68                        dw      EXIT                    // ;
 218+ 7EB6
 219+ 7EB6              //  ______________________________________________________________________
 220+ 7EB6              //
 221+ 7EB6              // f_include    fh --
 222+ 7EB6              // Given a filehandle includes the source from file
 223+ 7EB6                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EB6             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EB6             >
 223+ 7EB6             >                // dummy db directives used to calculate length of namec
 223+ 7EB6 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EBA 43 4C 55 44 >
 223+ 7EBE 45          >
 223+ 7EBF             >len_NFA         defl    $ - temp_NFA
 223+ 7EBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EB6             >
 223+ 7EB6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EB7 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EBB 43 4C 55 44 >
 223+ 7EBF 45          >
 223+ 7EC0             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EBF C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EC0             >
 223+ 7EC0 13 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7EC2             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7EC2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EC5             >
 223+ 7EC5             >
 223+ 7EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EC5             >
 223+ 7EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EC5 40 6D DB 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EC9 21 69
 225+ 7ECB 4A 6D DB 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7ECF 21 69
 226+ 7ED1 09 6E DB 6A                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7ED5 21 69
 227+ 7ED7 45 69                        dw      R_OP                    // r
 228+ 7ED9                                                              // if
 229+ 7ED9 D8 63                        dw      ZBRANCH
 230+ 7EDB 20 00                        dw      FInclude_Else_1 - $
 231+ 7EDD 45 69 58 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EE1 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EE5 10 70
 233+ 7EE7 4A 6D DB 6A                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EEB E7 69                        dw          TWO_MINUS
 235+ 7EED 14 6E DB 6A                  dw          SPAN, FETCH         //      span @ -
 236+ 7EF1 8B 6E                        dw          SUBTRACT
 237+ 7EF3 79 6E 9D 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EF7                                                              // else
 239+ 7EF7 C3 63                        dw      BRANCH
 240+ 7EF9 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EFB              FInclude_Else_1:
 242+ 7EFB 2C 6C 2C 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EFF                                                              // endif
 244+ 7EFF              FInclude_Endif_1:
 245+ 7EFF 21 69 21 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F03 09 6E E6 6A                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F07              FInclude_Begin:                                 // begin
 248+ 7F07 35 6C 88 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F0B 73 6C
 249+ 7F0D AF 6A 7E 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F11 4F 6A AF 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F15 4F 6A DC 69                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F19 09 6E DB 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F1D 1F 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F1F                                                              // while
 255+ 7F1F D8 63                        dw      ZBRANCH
 256+ 7F21 14 00                        dw      FInclude_Repeat - $
 257+ 7F23 35 6C 40 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F27 E6 6A
 258+ 7F29 2C 6C 4A 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F2D E6 6A
 259+ 7F2F 73 77                        dw          INTERPRET           //      interpret
 260+ 7F31 C3 63                        dw      BRANCH
 261+ 7F33 D4 FF                        dw      FInclude_Begin - $
 262+ 7F35              FInclude_Repeat:                                // repeat
 263+ 7F35 09 6E DB 6A                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F39 2C 6C 09 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F3D E6 6A
 265+ 7F3F 31 67                        dw      F_CLOSE                 // f_close
 266+ 7F41 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F45 10 70
 267+ 7F47 33 69 33 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F4B 33 69
 268+ 7F4D 5A 6A 09 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F51 E6 6A
 269+ 7F53                                                              // if
 270+ 7F53 D8 63                        dw      ZBRANCH
 271+ 7F55 12 00                        dw      FInclude_Else_2 - $
 272+ 7F57 09 6E DB 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F5B 10 67                        dw          F_SEEK              //      f_seek
 274+ 7F5D A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F61 10 70
 275+ 7F63                                                              // else
 276+ 7F63 C3 63                        dw      BRANCH
 277+ 7F65 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F67              FInclude_Else_2:
 279+ 7F67 93 6A                        dw          TWO_DROP            //      2drop
 280+ 7F69              FInclude_Endif_2:                               // endif
 281+ 7F69 33 69 4A 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F6D E6 6A
 282+ 7F6F 33 69 40 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F73 E6 6A
 283+ 7F75 F7 68                        dw      EXIT                    // ;
 284+ 7F77
 285+ 7F77              //  ______________________________________________________________________
 286+ 7F77              //
 287+ 7F77              // open<         -- fh
 288+ 7F77              // Open the following filename and return it file-handle
 289+ 7F77              // Used in the form OPEN CCCC
 290+ 7F77                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F77             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F77             >
 290+ 7F77             >                // dummy db directives used to calculate length of namec
 290+ 7F77 4F 50 45 4E >                db      "OPEN<"
 290+ 7F7B 3C          >
 290+ 7F7C             >len_NFA         defl    $ - temp_NFA
 290+ 7F7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F77             >
 290+ 7F77 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F78 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F7C 3C          >
 290+ 7F7D             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F7C BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F7D             >
 290+ 7F7D B6 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F7F             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F7F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F82             >
 290+ 7F82             >
 290+ 7F82             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F82             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F82             >
 290+ 7F82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F82 5B 6C                        dw      BL
 292+ 7F84 B9 73 C5 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F88 1F 6A
 293+ 7F8A 92 69 2C 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F8E 4F 6A E6 6A
 294+ 7F92 A5 73 35 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F96 A6 67
 295+ 7F98 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F9C 10 70                        dw      QERROR                  // ?error
 297+ 7F9E F7 68                        dw      EXIT                    // ;
 298+ 7FA0
 299+ 7FA0              //  ______________________________________________________________________
 300+ 7FA0              //
 301+ 7FA0              // include      -- cccc
 302+ 7FA0              // Include the following filename
 303+ 7FA0                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FA0             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FA0             >
 303+ 7FA0             >                // dummy db directives used to calculate length of namec
 303+ 7FA0 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FA4 55 44 45    >
 303+ 7FA7             >len_NFA         defl    $ - temp_NFA
 303+ 7FA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FA0             >
 303+ 7FA0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FA1 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FA5 55 44 45    >
 303+ 7FA8             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FA7 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FA8             >
 303+ 7FA8 77 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FAA             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FAA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FAD             >
 303+ 7FAD             >
 303+ 7FAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FAD             >
 303+ 7FAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FAD 7F 7F                        dw      OPEN_FH                 // open
 305+ 7FAF 5A 6A C2 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FB3 31 67 2D 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FB7 F7 68                        dw      EXIT                    // ;
 308+ 7FB9
 309+ 7FB9              //  ______________________________________________________________________
 310+ 7FB9              //
 311+ 7FB9              // needs
 312+ 7FB9              // check for cccc exists in vocabulary
 313+ 7FB9              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FB9
 315+ 7FB9              // temp filename cccc.f as counted string zero-padded
 316+ 7FB9                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FB9             >
 316+ 7FB9             >                // dummy db directives used to calculate length of namec
 316+ 7FB9 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FBD 53 2D 57    >
 316+ 7FC0             >len_NFA         defl    $ - temp_NFA
 316+ 7FC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FB9             >
 316+ 7FB9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FBA 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FBE 53 2D 57    >
 316+ 7FC1             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FC0 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FC1             >
 316+ 7FC1 A0 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FC3             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FC3 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FC6             >
 316+ 7FC6             >
 316+ 7FC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FC6             >
 316+ 7FC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FC6 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FE9              // temp complete path+filename
 319+ 7FE9                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FE9             >
 319+ 7FE9             >                // dummy db directives used to calculate length of namec
 319+ 7FE9 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FED 53 2D 46 4E >
 319+ 7FF1             >len_NFA         defl    $ - temp_NFA
 319+ 7FF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FE9             >
 319+ 7FE9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FEA 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FEE 53 2D 46 4E >
 319+ 7FF2             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FF1 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FF2             >
 319+ 7FF2 B9 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FF4             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FF4 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FF7             >
 319+ 7FF7             >
 319+ 7FF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FF7             >
 319+ 7FF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FF7 00 00 00...                  ds      40
 321+ 801F              // constant path
 322+ 801F                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 801F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 801F             >
 322+ 801F             >                // dummy db directives used to calculate length of namec
 322+ 801F 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 8023 53 2D 49 4E >
 322+ 8027 43          >
 322+ 8028             >len_NFA         defl    $ - temp_NFA
 322+ 8028             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 801F             >
 322+ 801F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8020 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8024 53 2D 49 4E >
 322+ 8028 43          >
 322+ 8029             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8028 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8029             >
 322+ 8029 E9 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 802B             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 802B CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 802E             >
 322+ 802E             >
 322+ 802E             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 802E             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 802E             >
 322+ 802E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 802E 04 69 6E 63                  db      4, "inc/", 0
 323+ 8032 2F 00
 324+ 8034                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8034             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8034             >
 324+ 8034             >                // dummy db directives used to calculate length of namec
 324+ 8034 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8038 53 2D 4C 49 >
 324+ 803C 42          >
 324+ 803D             >len_NFA         defl    $ - temp_NFA
 324+ 803D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8034             >
 324+ 8034 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8035 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8039 53 2D 4C 49 >
 324+ 803D 42          >
 324+ 803E             >                org     $-1                 // alter last byte of Name just above to set
 324+ 803D C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 803E             >
 324+ 803E 1F 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8040             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8040 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 8043             >
 324+ 8043             >
 324+ 8043             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 8043             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 8043             >
 324+ 8043             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 8043 04 6C 69 62                  db      4, "lib/", 0
 325+ 8047 2F 00
 326+ 8049
 327+ 8049              // Concatenate path at a and filename and include it
 328+ 8049              // No error is issued if filename doesn't exist.
 329+ 8049                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8049             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8049             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8049             >
 329+ 8049             >                // dummy db directives used to calculate length of namec
 329+ 8049 4E 45 45 44 >                db      "NEEDS/"
 329+ 804D 53 2F       >
 329+ 804F             >len_NFA         defl    $ - temp_NFA
 329+ 804F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8049             >
 329+ 8049 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 804A 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 804E 53 2F       >
 329+ 8050             >                org     $-1                 // alter last byte of Name just above to set
 329+ 804F AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8050             >
 329+ 8050 34 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 8052             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8052 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8055             >
 329+ 8055             >
 329+ 8055             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8055             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8055             >
 329+ 8055             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8055 C5 71 41 6A                  dw      COUNT, TUCK             // n a n
 331+ 8059 F4 7F 4F 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 805D FD 67
 332+ 805F F4 7F 92 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8063 C3 7F AF 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8067 4F 6A
 334+ 8069 A5 63 23 00                  dw      LIT, 35
 335+ 806D FD 67                        dw      CMOVE
 336+ 806F F4 7F                        dw      NEEDS_FN
 337+ 8071 A5 73 35 6C                  dw      PAD, ONE, F_OPEN
 337+ 8075 A6 67
 338+ 8077 54 69                        dw      ZEQUAL
 339+ 8079 D8 63                        dw      ZBRANCH
 340+ 807B 08 00                        dw      Needs_1 - $
 341+ 807D C2 7E                        dw          F_INCLUDE
 342+ 807F C3 63                        dw      BRANCH
 343+ 8081 04 00                        dw      Needs_2 - $
 344+ 8083              Needs_1:
 345+ 8083              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8083              //              dw          LIT, 43, MESSAGE
 347+ 8083 2D 6A                        dw          DROP
 348+ 8085              Needs_2:
 349+ 8085 F7 68                        dw      EXIT                    // ;
 350+ 8087
 351+ 8087
 352+ 8087                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 8087             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8087             >
 352+ 8087             >                // dummy db directives used to calculate length of namec
 352+ 8087 4E 43 44 4D >                db      "NCDM"
 352+ 808B             >len_NFA         defl    $ - temp_NFA
 352+ 808B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8087             >
 352+ 8087 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8088 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 808C             >                org     $-1                 // alter last byte of Name just above to set
 352+ 808B CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 808C             >
 352+ 808C 49 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 808E             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 808E CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8091             >
 352+ 8091             >
 352+ 8091             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8091             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8091             >
 352+ 8091             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8091 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 8095 24 5F 7B 7D
 353+ 8099 7E
 354+ 809A
 355+ 809A                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 809A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 809A             >
 355+ 809A             >                // dummy db directives used to calculate length of namec
 355+ 809A 4E 44 4F 4D >                db      "NDOM"
 355+ 809E             >len_NFA         defl    $ - temp_NFA
 355+ 809E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 809A             >
 355+ 809A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 809B 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 809F             >                org     $-1                 // alter last byte of Name just above to set
 355+ 809E CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 809F             >
 355+ 809F 87 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80A1             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80A1 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80A4             >
 355+ 80A4             >
 355+ 80A4             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80A4             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80A4             >
 355+ 80A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80A4 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80A8 7C 5C 3C 3E
 356+ 80AC 22
 357+ 80AD
 358+ 80AD
 359+ 80AD              // Replace illegal character in filename using the map here above
 360+ 80AD              // at the moment we need only  "
 361+ 80AD                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80AD             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80AD             >
 361+ 80AD             >                // dummy db directives used to calculate length of namec
 361+ 80AD 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80B1 53 2D 43 48 >
 361+ 80B5             >len_NFA         defl    $ - temp_NFA
 361+ 80B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80AD             >
 361+ 80AD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80AE 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80B2 53 2D 43 48 >
 361+ 80B6             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80B5 C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80B6             >
 361+ 80B6 9A 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80B8             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80B8 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80BB             >
 361+ 80BB             >
 361+ 80BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80BB             >
 361+ 80BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80BB C5 71 DB 71                  dw      COUNT, BOUNDS
 363+ 80BF 5D 64                        dw      C_DO
 364+ 80C1              Needs_3:
 365+ 80C1 8E 80 A1 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80C5 A5 63 09 00
 366+ 80C9 66 64 F2 6A                  dw          I, CFETCH
 367+ 80CD 7E 65                        dw          C_MAP
 368+ 80CF 66 64 FE 6A                  dw          I, CSTORE
 369+ 80D3              Needs_4:
 370+ 80D3 22 64                        dw      C_LOOP
 371+ 80D5 EC FF                        dw      Needs_3 - $
 372+ 80D7 F7 68                        dw      EXIT
 373+ 80D9
 374+ 80D9
 375+ 80D9              // include  "path/cccc.f" if cccc is not defined
 376+ 80D9              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80D9                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80D9             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80D9             >
 377+ 80D9             >                // dummy db directives used to calculate length of namec
 377+ 80D9 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80DD 53 2D 46    >
 377+ 80E0             >len_NFA         defl    $ - temp_NFA
 377+ 80E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80D9             >
 377+ 80D9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80DA 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80DE 53 2D 46    >
 377+ 80E1             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80E0 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80E1             >
 377+ 80E1 AD 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80E3             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80E3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80E6             >
 377+ 80E6             >
 377+ 80E6             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80E6             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80E6             >
 377+ 80E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80E6 75 75                        dw      LFIND
 379+ 80E8 D8 63                        dw      ZBRANCH
 380+ 80EA 0A 00                        dw      Needs_5 - $
 381+ 80EC
 382+ 80EC 2D 6A 93 6A                  dw          DROP, TWO_DROP
 383+ 80F0 C3 63                        dw      BRANCH
 384+ 80F2 2C 00                        dw      Needs_6 - $
 385+ 80F4              Needs_5:
 386+ 80F4 C3 7F                        dw          NEEDS_W
 387+ 80F6 A5 63 23 00                  dw          LIT, 35
 388+ 80FA 6C 73                        dw          ERASE                   // a
 389+ 80FC 36 6E F2 6A                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 8100 AF 69
 390+ 8102 36 6E 1F 6A                  dw          HERE, OVER              // a n here n
 391+ 8106 C3 7F 4F 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 810A FD 67
 392+ 810C C3 7F B8 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 8110 C3 7F 92 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 8114 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 8118 4F 6A E6 6A                  dw          SWAP, STORE             // a
 396+ 811C 52 80                        dw          NEEDS_SLASH
 397+ 811E              Needs_6:
 398+ 811E F7 68                        dw      EXIT
 399+ 8120
 400+ 8120
 401+ 8120              // check for cccc exists in vocabulary
 402+ 8120              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 8120              // search in inc subdirectory
 404+ 8120                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 8120             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 8120             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 8120             >
 404+ 8120             >                // dummy db directives used to calculate length of namec
 404+ 8120 4E 45 45 44 >                db      "NEEDS"
 404+ 8124 53          >
 404+ 8125             >len_NFA         defl    $ - temp_NFA
 404+ 8125             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 8120             >
 404+ 8120 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 8121 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 8125 53          >
 404+ 8126             >                org     $-1                 // alter last byte of Name just above to set
 404+ 8125 D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 8126             >
 404+ 8126 D9 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 8128             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 8128 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 812B             >
 404+ 812B             >
 404+ 812B             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 812B             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 812B             >
 404+ 812B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 812B 4A 6D DB 6A                  dw      TO_IN, FETCH
 406+ 812F 5A 6A                        dw      DUP
 407+ 8131 2B 80 E3 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 8135 4A 6D E6 6A                  dw      TO_IN, STORE
 409+ 8139 40 80 E3 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 813D 4A 6D E6 6A                  dw      TO_IN, STORE
 411+ 8141 75 75                        dw      LFIND
 412+ 8143 D8 63                        dw      ZBRANCH
 413+ 8145 08 00                        dw      Needs_10 - $
 414+ 8147 93 6A                        dw          TWO_DROP
 415+ 8149 C3 63                        dw      BRANCH
 416+ 814B 10 00                        dw      Needs_11 - $
 417+ 814D              Needs_10:
 418+ 814D C3 7F C5 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 8151 ED 71 46 6F
 419+ 8155 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 8159 BD 7A
 420+ 815B              Needs_11:
 421+ 815B F7 68                        dw      EXIT
 422+ 815D
 423+ 815D
 424+ 815D              //  ______________________________________________________________________
 425+ 815D              //
 426+ 815D              // load+        n --
 427+ 815D                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 815D             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 815D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 815D             >
 427+ 815D             >                // dummy db directives used to calculate length of namec
 427+ 815D 4C 4F 41 44 >                db      "LOAD+"
 427+ 8161 2B          >
 427+ 8162             >len_NFA         defl    $ - temp_NFA
 427+ 8162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 815D             >
 427+ 815D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 815E 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 8162 2B          >
 427+ 8163             >                org     $-1                 // alter last byte of Name just above to set
 427+ 8162 AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 8163             >
 427+ 8163 20 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 8165             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 8165 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8168             >
 427+ 8168             >
 427+ 8168             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8168             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8168             >
 427+ 8168             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8168 40 6D DB 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 816C 21 69
 429+ 816E 4A 6D DB 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 8172 21 69
 430+ 8174
 431+ 8174 2C 6C 4A 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8178 E6 6A
 432+ 817A 80 6C 1C 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 817E 40 6D E6 6A
 433+ 8182 73 77                        dw      INTERPRET               // interpret
 434+ 8184
 435+ 8184 33 69 4A 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8188 E6 6A
 436+ 818A 33 69 40 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 818E E6 6A
 437+ 8190 F7 68                        dw      EXIT                    // ;
 438+ 8192
 439+ 8192              //  ______________________________________________________________________
 440+ 8192              //
 441+ 8192              // -->          --
 442+ 8192                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 8192             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 8192             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 8192             >
 442+ 8192             >                // dummy db directives used to calculate length of namec
 442+ 8192 2D 2D 3E    >                db      "-->"
 442+ 8195             >len_NFA         defl    $ - temp_NFA
 442+ 8195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 8192             >
 442+ 8192 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 8193 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 8196             >                org     $-1                 // alter last byte of Name just above to set
 442+ 8195 BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 8196             >
 442+ 8196 5D 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 8198             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 8198 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 819B             >
 442+ 819B             >
 442+ 819B             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 819B             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 819B             >
 442+ 819B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 819B 8E 70                        dw      QLOADING                // ?loading
 444+ 819D 2C 6C 4A 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81A1 E6 6A
 445+ 81A3 80 6C                        dw      BSCR                    // b/scr
 446+ 81A5 40 6D DB 6A                  dw      BLK, FETCH              // blk @
 447+ 81A9 1F 6A                        dw      OVER                    // over
 448+ 81AB 4C 7A                        dw      MOD                     // mod
 449+ 81AD 8B 6E                        dw      SUBTRACT                // -
 450+ 81AF 40 6D BC 6A                  dw      BLK, PLUSSTORE          // +!
 451+ 81B3 F7 68                        dw      EXIT                    // ;
 452+ 81B5
 453+ 81B5              //  ______________________________________________________________________
 454+ 81B5              //
 455+ 81B5              // '            -- xt
 456+ 81B5                              Colon_Def TICK, "'", is_normal
 456+ 81B5             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81B5             >
 456+ 81B5             >                // dummy db directives used to calculate length of namec
 456+ 81B5 27          >                db      "'"
 456+ 81B6             >len_NFA         defl    $ - temp_NFA
 456+ 81B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81B5             >
 456+ 81B5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81B6 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81B7             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81B6 A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81B7             >
 456+ 81B7 92 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81B9             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81B9 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81BC             >
 456+ 81BC             >
 456+ 81BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81BC             >
 456+ 81BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81BC 75 75                        dw      LFIND                   // -find
 458+ 81BE 54 69                        dw      ZEQUAL                  // 0=
 459+ 81C0 2C 6C 10 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81C4 2D 6A                        dw      DROP                    // drop
 461+ 81C6 F7 68                        dw      EXIT                    // ;
 462+ 81C8
 463+ 81C8              //  ______________________________________________________________________
 464+ 81C8              //
 465+ 81C8              // forget       -- cccc
 466+ 81C8                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81C8             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81C8             >
 466+ 81C8             >                // dummy db directives used to calculate length of namec
 466+ 81C8 46 4F 52 47 >                db      "FORGET"
 466+ 81CC 45 54       >
 466+ 81CE             >len_NFA         defl    $ - temp_NFA
 466+ 81CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81C8             >
 466+ 81C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81C9 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81CD 45 54       >
 466+ 81CF             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81CE D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81CF             >
 466+ 81CF B5 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81D1             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81D1 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81D4             >
 466+ 81D4             >
 466+ 81D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81D4             >
 466+ 81D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81D4 87 6D DB 6A                  dw      CURRENT, FETCH          // current @
 468+ 81D8 79 6D DB 6A                  dw      CONTEXT, FETCH          // context @
 469+ 81DC 8B 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81E0 17 00 10 70
 470+ 81E4 B9 81 DB 6F                  dw      TICK, TO_BODY           // ' >body
 471+ 81E8 5A 6A F0 6C                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81EC DB 6A
 472+ 81EE A5 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81F2 15 00 10 70
 473+ 81F6 5A 6A AF 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 81FA F9 6C E6 6A
 474+ 81FE 8F 6F DB 6A                  dw      LFA, FETCH              // lfa @
 475+ 8202 79 6D DB 6A                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 8206 E6 6A
 476+ 8208 F7 68                        dw      EXIT                    // ;
 477+ 820A
 478+ 820A              //  ______________________________________________________________________
 479+ 820A              //
 480+ 820A              // marker       -- cccc
 481+ 820A                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 820A             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 820A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 820A             >
 481+ 820A             >                // dummy db directives used to calculate length of namec
 481+ 820A 4D 41 52 4B >                db      "MARKER"
 481+ 820E 45 52       >
 481+ 8210             >len_NFA         defl    $ - temp_NFA
 481+ 8210             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 820A             >
 481+ 820A C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 820B 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 820F 45 52       >
 481+ 8211             >                org     $-1                 // alter last byte of Name just above to set
 481+ 8210 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 8211             >
 481+ 8211 C8 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 8213             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 8213 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 8216             >
 481+ 8216             >
 481+ 8216             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 8216             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 8216             >
 481+ 8216             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 8216 8D 71                        dw      CBUILDS
 483+ 8218 08 6D DB 6A                  dw      VOC_LINK, FETCH, COMMA
 483+ 821C 54 6E
 484+ 821E 87 6D DB 6A                  dw      CURRENT, FETCH, COMMA
 484+ 8222 54 6E
 485+ 8224 79 6D DB 6A                  dw      CONTEXT, FETCH, COMMA
 485+ 8228 54 6E
 486+ 822A 7E 6F 54 6E                  dw      LATEST, COMMA
 487+ 822E 7E 6F C4 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 8232 8F 6F DB 6A
 487+ 8236 54 6E
 488+ 8238 9E 71                        dw      DOES_TO
 489+ 823A 5A 6A DB 6A                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 823E 08 6D E6 6A
 489+ 8242 D1 69
 490+ 8244 5A 6A DB 6A                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 8248 87 6D E6 6A
 490+ 824C D1 69
 491+ 824E 5A 6A DB 6A                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 8252 79 6D E6 6A
 491+ 8256 D1 69
 492+ 8258 5A 6A DB 6A                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 825C F9 6C E6 6A
 492+ 8260 D1 69
 493+ 8262 DB 6A 87 6D                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 8266 DB 6A E6 6A
 494+ 826A F7 68                        dw      EXIT
 495+ 826C
 496+ 826C              //  ______________________________________________________________________
 497+ 826C              //
 498+ 826C              // spaces       n --
 499+ 826C                              Colon_Def SPACES, "SPACES", is_normal
 499+ 826C             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 826C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 826C             >
 499+ 826C             >                // dummy db directives used to calculate length of namec
 499+ 826C 53 50 41 43 >                db      "SPACES"
 499+ 8270 45 53       >
 499+ 8272             >len_NFA         defl    $ - temp_NFA
 499+ 8272             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 826C             >
 499+ 826C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 826D 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 8271 45 53       >
 499+ 8273             >                org     $-1                 // alter last byte of Name just above to set
 499+ 8272 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 8273             >
 499+ 8273 0A 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 8275             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 8275 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8278             >
 499+ 8278             >
 499+ 8278             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8278             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8278             >
 499+ 8278             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8278 2C 6C F7 6E                  dw      ZERO, MAX
 501+ 827C 2C 6C 31 64                  dw      ZERO, C_Q_DO
 502+ 8280 08 00                        dw      Spaces_Leave - $
 503+ 8282              Spaces_Loop:
 504+ 8282 46 6F                        dw          SPACE
 505+ 8284 22 64                        dw      C_LOOP
 506+ 8286 FC FF                        dw      Spaces_Loop - $
 507+ 8288              Spaces_Leave:
 508+ 8288 F7 68                        dw      EXIT                    // ;
 509+ 828A
 510+ 828A              //  ______________________________________________________________________
 511+ 828A              //
 512+ 828A              // <#           --
 513+ 828A                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 828A             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 828A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 828A             >
 513+ 828A             >                // dummy db directives used to calculate length of namec
 513+ 828A 3C 23       >                db      "<#"
 513+ 828C             >len_NFA         defl    $ - temp_NFA
 513+ 828C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 828A             >
 513+ 828A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 828B 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 828D             >                org     $-1                 // alter last byte of Name just above to set
 513+ 828C A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 828D             >
 513+ 828D 6C 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 828F             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 828F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 8292             >
 513+ 8292             >
 513+ 8292             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 8292             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 8292             >
 513+ 8292             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 8292 A5 73 CF 6D                  dw      PAD, HLD, STORE
 514+ 8296 E6 6A
 515+ 8298 F7 68                        dw      EXIT
 516+ 829A
 517+ 829A              //  ______________________________________________________________________
 518+ 829A              //
 519+ 829A              // #>           --
 520+ 829A                              Colon_Def DASH_END, "#>", is_normal
 520+ 829A             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 829A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 829A             >
 520+ 829A             >                // dummy db directives used to calculate length of namec
 520+ 829A 23 3E       >                db      "#>"
 520+ 829C             >len_NFA         defl    $ - temp_NFA
 520+ 829C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 829A             >
 520+ 829A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 829B 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 829D             >                org     $-1                 // alter last byte of Name just above to set
 520+ 829C BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 829D             >
 520+ 829D 8A 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 829F             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 829F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 82A2             >
 520+ 82A2             >
 520+ 82A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 82A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 82A2             >
 520+ 82A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 82A2 93 6A                        dw      TWO_DROP
 522+ 82A4 CF 6D DB 6A                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82A8 A5 73 1F 6A
 522+ 82AC 8B 6E
 523+ 82AE F7 68                        dw      EXIT
 524+ 82B0
 525+ 82B0              //  ______________________________________________________________________
 526+ 82B0              //
 527+ 82B0              // sign         n d -- d
 528+ 82B0                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82B0             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82B0             >
 528+ 82B0             >                // dummy db directives used to calculate length of namec
 528+ 82B0 53 49 47 4E >                db      "SIGN"
 528+ 82B4             >len_NFA         defl    $ - temp_NFA
 528+ 82B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82B0             >
 528+ 82B0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82B1 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82B5             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82B4 CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82B5             >
 528+ 82B5 9A 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82B7             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82B7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82BA             >
 528+ 82BA             >
 528+ 82BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82BA             >
 528+ 82BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82BA 65 6A 6E 69                  dw      ROT, ZLESS
 530+ 82BE D8 63                        dw      ZBRANCH
 531+ 82C0 08 00                        dw      Sign_Endif - $
 532+ 82C2 A5 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82C6 8E 73
 533+ 82C8              Sign_Endif:
 534+ 82C8 F7 68                        dw      EXIT
 535+ 82CA
 536+ 82CA              //  ______________________________________________________________________
 537+ 82CA              //
 538+ 82CA              // #           d1 -- d2
 539+ 82CA                              Colon_Def DASH, "#", is_normal
 539+ 82CA             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82CA             >
 539+ 82CA             >                // dummy db directives used to calculate length of namec
 539+ 82CA 23          >                db      "#"
 539+ 82CB             >len_NFA         defl    $ - temp_NFA
 539+ 82CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82CA             >
 539+ 82CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82CB 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82CC             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82CB A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82CC             >
 539+ 82CC B0 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82CE             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82CE CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82D1             >
 539+ 82D1             >
 539+ 82D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82D1             >
 539+ 82D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82D1 9E 6D DB 6A                  dw      BASE, FETCH
 541+ 82D5
 542+ 82D5 21 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82D7 2C 6C 45 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82DB 5B 68
 544+ 82DD 33 69 4F 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82E1 21 69
 545+ 82E3 5B 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82E5 33 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82E7
 548+ 82E7 65 6A                        dw      ROT
 549+ 82E9 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82ED 1F 6A B7 6E
 550+ 82F1 D8 63                        dw      ZBRANCH
 551+ 82F3 08 00                        dw      Dash_Endif - $
 552+ 82F5 A5 63 07 00                  dw          LIT, 7, PLUS
 552+ 82F9 92 69
 553+ 82FB              Dash_Endif:
 554+ 82FB
 555+ 82FB A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 82FF 92 69 8E 73
 556+ 8303 F7 68                        dw      EXIT
 557+ 8305
 558+ 8305              //  ______________________________________________________________________
 559+ 8305              //
 560+ 8305              // #s           d1 -- d2
 561+ 8305                              Colon_Def DASHES, "#S", is_normal
 561+ 8305             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 8305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 8305             >
 561+ 8305             >                // dummy db directives used to calculate length of namec
 561+ 8305 23 53       >                db      "#S"
 561+ 8307             >len_NFA         defl    $ - temp_NFA
 561+ 8307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 8305             >
 561+ 8305 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 8306 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8308             >                org     $-1                 // alter last byte of Name just above to set
 561+ 8307 D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8308             >
 561+ 8308 CA 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 830A             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 830A CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 830D             >
 561+ 830D             >
 561+ 830D             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 830D             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 830D             >
 561+ 830D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 830D              Dashes_Begin:
 563+ 830D CE 82 AF 6A                  dw      DASH, TWO_DUP
 564+ 8311 A5 68 54 69                  dw          OR_OP, ZEQUAL
 565+ 8315 D8 63                        dw      ZBRANCH
 566+ 8317 F6 FF                        dw      Dashes_Begin - $
 567+ 8319 F7 68                        dw      EXIT
 568+ 831B
 569+ 831B              //  ______________________________________________________________________
 570+ 831B              //
 571+ 831B              // d.r          d n --
 572+ 831B                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 831B             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 831B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 831B             >
 572+ 831B             >                // dummy db directives used to calculate length of namec
 572+ 831B 44 2E 52    >                db      "D.R"
 572+ 831E             >len_NFA         defl    $ - temp_NFA
 572+ 831E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 831B             >
 572+ 831B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 831C 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 831F             >                org     $-1                 // alter last byte of Name just above to set
 572+ 831E D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 831F             >
 572+ 831F 05 83       >                dw      last_NFA            // Link to previous definition Name
 572+ 8321             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 8321 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 8324             >
 572+ 8324             >
 572+ 8324             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 8324             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 8324             >
 572+ 8324             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 8324 21 69                        dw      TO_R
 574+ 8326 41 6A 6C 79                  dw      TUCK, DABS
 575+ 832A 8F 82 0A 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 832E B7 82 9F 82
 576+ 8332 33 69                        dw      R_TO
 577+ 8334 1F 6A 8B 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 8338 75 82 ED 71
 578+ 833C F7 68                        dw      EXIT
 579+ 833E
 580+ 833E              //  ______________________________________________________________________
 581+ 833E              //
 582+ 833E              // .r           n1 n2 --
 583+ 833E                              Colon_Def DOT_R, ".R", is_normal
 583+ 833E             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 833E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 833E             >
 583+ 833E             >                // dummy db directives used to calculate length of namec
 583+ 833E 2E 52       >                db      ".R"
 583+ 8340             >len_NFA         defl    $ - temp_NFA
 583+ 8340             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 833E             >
 583+ 833E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 833F 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 8341             >                org     $-1                 // alter last byte of Name just above to set
 583+ 8340 D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 8341             >
 583+ 8341 1B 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 8343             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 8343 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 8346             >
 583+ 8346             >
 583+ 8346             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 8346             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 8346             >
 583+ 8346             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 8346 21 69                        dw      TO_R
 585+ 8348 79 6E 33 69                  dw      S_TO_D, R_TO
 586+ 834C 21 83                        dw      D_DOT_R
 587+ 834E F7 68                        dw      EXIT
 588+ 8350
 589+ 8350              //  ______________________________________________________________________
 590+ 8350              //
 591+ 8350              // d.           d --
 592+ 8350                              Colon_Def D_DOT, "D.", is_normal
 592+ 8350             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 8350             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 8350             >
 592+ 8350             >                // dummy db directives used to calculate length of namec
 592+ 8350 44 2E       >                db      "D."
 592+ 8352             >len_NFA         defl    $ - temp_NFA
 592+ 8352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 8350             >
 592+ 8350 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 8351 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 8353             >                org     $-1                 // alter last byte of Name just above to set
 592+ 8352 AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 8353             >
 592+ 8353 3E 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 8355             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 8355 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8358             >
 592+ 8358             >
 592+ 8358             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8358             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8358             >
 592+ 8358             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8358 2C 6C 21 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 835C 46 6F
 594+ 835E F7 68                        dw      EXIT
 595+ 8360
 596+ 8360              //  ______________________________________________________________________
 597+ 8360              //
 598+ 8360              // .            n --
 599+ 8360                              Colon_Def DOT, ".", is_normal
 599+ 8360             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 8360             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 8360             >
 599+ 8360             >                // dummy db directives used to calculate length of namec
 599+ 8360 2E          >                db      "."
 599+ 8361             >len_NFA         defl    $ - temp_NFA
 599+ 8361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 8360             >
 599+ 8360 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 8361 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 8362             >                org     $-1                 // alter last byte of Name just above to set
 599+ 8361 AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 8362             >
 599+ 8362 50 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 8364             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 8364 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 8367             >
 599+ 8367             >
 599+ 8367             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 8367             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 8367             >
 599+ 8367             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 8367 79 6E 55 83                  dw      S_TO_D, D_DOT
 601+ 836B F7 68                        dw      EXIT
 602+ 836D
 603+ 836D              //  ______________________________________________________________________
 604+ 836D              //
 605+ 836D              // ?            n --
 606+ 836D                              Colon_Def QUESTION, "?", is_normal
 606+ 836D             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 836D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 836D             >
 606+ 836D             >                // dummy db directives used to calculate length of namec
 606+ 836D 3F          >                db      "?"
 606+ 836E             >len_NFA         defl    $ - temp_NFA
 606+ 836E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 836D             >
 606+ 836D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 836E 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 836F             >                org     $-1                 // alter last byte of Name just above to set
 606+ 836E BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 836F             >
 606+ 836F 60 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 8371             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 8371 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 8374             >
 606+ 8374             >
 606+ 8374             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 8374             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 8374             >
 606+ 8374             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 8374 DB 6A 64 83                  dw      FETCH, DOT
 608+ 8378 F7 68                        dw      EXIT
 609+ 837A
 610+ 837A              //  ______________________________________________________________________
 611+ 837A              //
 612+ 837A              // u.           u --
 613+ 837A                              Colon_Def U_DOT, "U.", is_normal
 613+ 837A             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 837A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 837A             >
 613+ 837A             >                // dummy db directives used to calculate length of namec
 613+ 837A 55 2E       >                db      "U."
 613+ 837C             >len_NFA         defl    $ - temp_NFA
 613+ 837C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 837A             >
 613+ 837A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 837B 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 837D             >                org     $-1                 // alter last byte of Name just above to set
 613+ 837C AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 837D             >
 613+ 837D 6D 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 837F             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 837F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 8382             >
 613+ 8382             >
 613+ 8382             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 8382             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 8382             >
 613+ 8382             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 8382 2C 6C 55 83                  dw      ZERO, D_DOT
 615+ 8386 F7 68                        dw      EXIT
 616+ 8388
 617+ 8388              //  ______________________________________________________________________
 618+ 8388              //
 619+ 8388              // words        --
 620+ 8388                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8388             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8388             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8388             >
 620+ 8388             >                // dummy db directives used to calculate length of namec
 620+ 8388 57 4F 52 44 >                db      "WORDS"
 620+ 838C 53          >
 620+ 838D             >len_NFA         defl    $ - temp_NFA
 620+ 838D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8388             >
 620+ 8388 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8389 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 838D 53          >
 620+ 838E             >                org     $-1                 // alter last byte of Name just above to set
 620+ 838D D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 838E             >
 620+ 838E 7A 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 8390             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8390 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 8393             >
 620+ 8393             >
 620+ 8393             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 8393             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 8393             >
 620+ 8393             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 8393 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 8397 54 6D E6 6A
 622+ 839B 79 6D DB 6A                  dw      CONTEXT, FETCH, FETCH
 622+ 839F DB 6A
 623+ 83A1              Words_Begin:
 624+ 83A1 5A 6A F2 6A                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 83A5 A5 63 1F 00
 624+ 83A9 95 68
 625+ 83AB 54 6D DB 6A                  dw          OUT, FETCH, PLUS
 625+ 83AF 92 69
 626+ 83B1 66 6C B7 6E                  dw          CL, LESS, ZEQUAL
 626+ 83B5 54 69
 627+ 83B7 D8 63                        dw          ZBRANCH
 628+ 83B9 0A 00                        dw          Words_Endif - $
 629+ 83BB F0 67 2C 6C                  dw              CR, ZERO, OUT, STORE
 629+ 83BF 54 6D E6 6A
 630+ 83C3              Words_Endif:
 631+ 83C3 5A 6A E9 75                  dw          DUP, ID_DOT
 632+ 83C7 C4 6F 8F 6F                  dw          PFA, LFA, FETCH
 632+ 83CB DB 6A
 633+ 83CD 5A 6A 54 69                  dw          DUP, ZEQUAL
 634+ 83D1 F0 66 A5 68                  dw          QTERMINAL, OR_OP
 635+ 83D5 D8 63                        dw      ZBRANCH
 636+ 83D7 CA FF                        dw      Words_Begin - $
 637+ 83D9 2D 6A                        dw      DROP
 638+ 83DB F7 68                        dw      EXIT
 639+ 83DD
 640+ 83DD              //  ______________________________________________________________________
 641+ 83DD              //
 642+ 83DD              // list         n --
 643+ 83DD                              Colon_Def LIST, "LIST", is_normal
 643+ 83DD             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83DD             >
 643+ 83DD             >                // dummy db directives used to calculate length of namec
 643+ 83DD 4C 49 53 54 >                db      "LIST"
 643+ 83E1             >len_NFA         defl    $ - temp_NFA
 643+ 83E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83DD             >
 643+ 83DD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83DE 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83E2             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83E1 D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83E2             >
 643+ 83E2 88 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83E4             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83E4 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83E7             >
 643+ 83E7             >
 643+ 83E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83E7             >
 643+ 83E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83E7 3C 71 F0 67                  dw      DECIMAL, CR
 645+ 83EB 5A 6A 5E 6D                  dw      DUP, SCR, STORE
 645+ 83EF E6 6A
 646+ 83F1 09 74                        dw      C_DOT_QUOTE
 647+ 83F3 05 53 63 72                  db      5, "Scr# "
 647+ 83F7 23 20
 648+ 83F9 64 83                        dw      DOT
 649+ 83FB 8D 6C 2C 6C                  dw      LSCR, ZERO, C_DO
 649+ 83FF 5D 64
 650+ 8401              List_Loop:
 651+ 8401 F0 67                        dw          CR
 652+ 8403 66 64 47 6C                  dw          I, THREE
 653+ 8407 43 83 46 6F                  dw          DOT_R, SPACE
 654+ 840B 66 64 5E 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 840F DB 6A A8 7A
 655+ 8413 F0 66                        dw          QTERMINAL
 656+ 8415 D8 63                        dw          ZBRANCH
 657+ 8417 06 00                        dw          List_Endif - $
 658+ 8419 0D 69                        dw              C_LEAVE
 659+ 841B 06 00                        dw              List_Leave - $
 660+ 841D              List_Endif:
 661+ 841D 22 64                        dw      C_LOOP
 662+ 841F E2 FF                        dw      List_Loop - $
 663+ 8421              List_Leave:
 664+ 8421 F0 67                        dw      CR
 665+ 8423 F7 68                        dw      EXIT
 666+ 8425
 667+ 8425              //  ______________________________________________________________________
 668+ 8425              //
 669+ 8425              // index        n1 n2 --
 670+ 8425                              Colon_Def INDEX, "INDEX", is_normal
 670+ 8425             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 8425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 8425             >
 670+ 8425             >                // dummy db directives used to calculate length of namec
 670+ 8425 49 4E 44 45 >                db      "INDEX"
 670+ 8429 58          >
 670+ 842A             >len_NFA         defl    $ - temp_NFA
 670+ 842A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 8425             >
 670+ 8425 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 8426 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 842A 58          >
 670+ 842B             >                org     $-1                 // alter last byte of Name just above to set
 670+ 842A D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 842B             >
 670+ 842B DD 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 842D             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 842D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 8430             >
 670+ 8430             >
 670+ 8430             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 8430             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 8430             >
 670+ 8430             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 8430 AF 69 4F 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 8434 5D 64
 672+ 8436              Index_Loop:
 673+ 8436 F0 67 66 64                  dw          CR, I, THREE
 673+ 843A 47 6C
 674+ 843C 43 83 46 6F                  dw          DOT_R, SPACE
 675+ 8440 2C 6C 66 64                  dw          ZERO, I, DOT_LINE
 675+ 8444 A8 7A
 676+ 8446 F0 66                        dw          QTERMINAL
 677+ 8448 D8 63                        dw          ZBRANCH
 678+ 844A 06 00                        dw          Index_Endif - $
 679+ 844C 0D 69                        dw              C_LEAVE
 680+ 844E 06 00                        dw              Index_Leave - $
 681+ 8450              Index_Endif:
 682+ 8450 22 64                        dw      C_LOOP
 683+ 8452 E4 FF                        dw      Index_Loop - $
 684+ 8454              Index_Leave:
 685+ 8454 F0 67                        dw      CR
 686+ 8456 F7 68                        dw      EXIT
 687+ 8458
 688+ 8458              //  ______________________________________________________________________
 689+ 8458              //
 690+ 8458              // cls          --
 691+ 8458                              Colon_Def CLS, "CLS", is_normal
 691+ 8458             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 8458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8458             >
 691+ 8458             >                // dummy db directives used to calculate length of namec
 691+ 8458 43 4C 53    >                db      "CLS"
 691+ 845B             >len_NFA         defl    $ - temp_NFA
 691+ 845B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8458             >
 691+ 8458 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8459 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 845C             >                org     $-1                 // alter last byte of Name just above to set
 691+ 845B D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 845C             >
 691+ 845C 25 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 845E             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 845E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 8461             >
 691+ 8461             >
 691+ 8461             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 8461             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 8461             >
 691+ 8461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 8461 A5 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 8465 D5 65
 693+ 8467 F7 68                        dw      EXIT
 694+ 8469
 695+ 8469              //  ______________________________________________________________________
 696+ 8469              //
 697+ 8469              // splash       --
 698+ 8469                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 8469             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 8469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 8469             >
 698+ 8469             >                // dummy db directives used to calculate length of namec
 698+ 8469 53 50 4C 41 >                db      "SPLASH"
 698+ 846D 53 48       >
 698+ 846F             >len_NFA         defl    $ - temp_NFA
 698+ 846F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 8469             >
 698+ 8469 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 846A 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 846E 53 48       >
 698+ 8470             >                org     $-1                 // alter last byte of Name just above to set
 698+ 846F C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 8470             >
 698+ 8470 58 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 8472             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 8472 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 8475             >
 698+ 8475             >
 698+ 8475             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 8475             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 8475             >
 698+ 8475             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 8475 5E 84                        dw      CLS
 700+ 8477 09 74                        dw      C_DOT_QUOTE
 701+ 8479 56                           db      86
 702+ 847A 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 702+ 847E 72 74 68 20
 702+ 8482 31 2E 35 32
 702+ 8486 20 4E 65 78
 702+ 848A 74 5A 58 4F
 702+ 848E 53 20 76 65
 702+ 8492 72 73 69 6F
 702+ 8496 6E 0D
 703+ 8498 44 69 72 65                  db      "Direct Thread - build 20220102", 13  // 31
 703+ 849C 63 74 20 54
 703+ 84A0 68 72 65 61
 703+ 84A4 64 20 2D 20
 703+ 84A8 62 75 69 6C
 703+ 84AC 64 20 32 30
 703+ 84B0 32 32 30 31
 703+ 84B4 30 32 0D
 704+ 84B7 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 704+ 84BB 2D 32 30 32
 704+ 84BF 32 20 4D 61
 704+ 84C3 74 74 65 6F
 704+ 84C7 20 56 69 74
 704+ 84CB 74 75 72 69
 704+ 84CF 0D
 705+ 84D0 F7 68                        dw      EXIT
 706+ 84D2
 707+ 84D2              //  ______________________________________________________________________
 708+ 84D2              //
 709+ 84D2              // video        --
 710+ 84D2                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84D2             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84D2             >
 710+ 84D2             >                // dummy db directives used to calculate length of namec
 710+ 84D2 56 49 44 45 >                db      "VIDEO"
 710+ 84D6 4F          >
 710+ 84D7             >len_NFA         defl    $ - temp_NFA
 710+ 84D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84D2             >
 710+ 84D2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84D3 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84D7 4F          >
 710+ 84D8             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84D7 CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84D8             >
 710+ 84D8 69 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84DA             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84DA CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84DD             >
 710+ 84DD             >
 710+ 84DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84DD             >
 710+ 84DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84DD 3E 6C 5A 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 84E1 F2 7A E6 6A
 712+ 84E5 22 7B                        dw      SELECT
 713+ 84E7 F7 68                        dw      EXIT
 714+ 84E9
 715+ 84E9              //  ______________________________________________________________________
 716+ 84E9              //
 717+ 84E9              // accept-      a n1 -- n2
 718+ 84E9                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84E9             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84E9             >
 718+ 84E9             >                // dummy db directives used to calculate length of namec
 718+ 84E9 41 43 43 45 >                db      "ACCEPT-"
 718+ 84ED 50 54 2D    >
 718+ 84F0             >len_NFA         defl    $ - temp_NFA
 718+ 84F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84E9             >
 718+ 84E9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84EA 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84EE 50 54 2D    >
 718+ 84F1             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84F0 AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84F1             >
 718+ 84F1 D2 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84F3             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84F3 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 84F6             >
 718+ 84F6             >
 718+ 84F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 84F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 84F6             >
 718+ 84F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 84F6 21 69                        dw      TO_R
 720+ 84F8 2C 6C                        dw      ZERO
 721+ 84FA 4F 6A                        dw      SWAP
 722+ 84FC 5A 6A                        dw      DUP
 723+ 84FE 33 69                        dw      R_TO
 724+ 8500 92 69                        dw      PLUS
 725+ 8502 4F 6A                        dw      SWAP
 726+ 8504 5D 64                        dw      C_DO
 727+ 8506              AcceptN_Loop:
 728+ 8506 6C 7B                        dw          MMU7_FETCH
 729+ 8508 FF 7A                        dw          INKEY
 730+ 850A 4F 6A 7F 7B                  dw          SWAP, MMU7_STORE
 731+ 850E 5A 6A 54 69                  dw          DUP, ZEQUAL
 732+ 8512 D8 63                        dw          ZBRANCH
 733+ 8514 06 00                        dw          AcceptN_Endif_1 - $
 734+ 8516 DA 84 38 78                  dw              VIDEO, QUIT
 735+ 851A              AcceptN_Endif_1:
 736+ 851A 5A 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 736+ 851E 0D 00 97 6E
 737+ 8522 D8 63                        dw          ZBRANCH
 738+ 8524 06 00                        dw          AcceptN_Endif_2 - $
 739+ 8526 2D 6A 2C 6C                  dw              DROP, ZERO
 740+ 852A              AcceptN_Endif_2:
 741+ 852A 5A 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 741+ 852E 0A 00 97 6E
 742+ 8532 D8 63                        dw          ZBRANCH
 743+ 8534 06 00                        dw          AcceptN_Endif_3 - $
 744+ 8536 2D 6A 2C 6C                  dw              DROP, ZERO
 745+ 853A              AcceptN_Endif_3:
 746+ 853A 66 64 FE 6A                  dw          I, CSTORE, ONE_PLUS
 746+ 853E AF 69
 747+ 8540
 748+ 8540 66 64 F2 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 8544 54 69
 749+ 8546 D8 63                        dw          ZBRANCH
 750+ 8548 06 00                        dw              AcceptN_Endif_4 - $
 751+ 854A 0D 69                        dw                  C_LEAVE     //              leave
 752+ 854C 06 00                        dw                  AcceptN_Leave - $
 753+ 854E              AcceptN_Endif_4:                                 //      endif
 754+ 854E
 755+ 854E 22 64                        dw      C_LOOP
 756+ 8550 B6 FF                        dw      AcceptN_Loop -$
 757+ 8552              AcceptN_Leave:
 758+ 8552 F7 68                        dw      EXIT
 759+ 8554
 760+ 8554              //  ______________________________________________________________________
 761+ 8554              //
 762+ 8554              // load-        n --
 763+ 8554              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 8554              // it accepts text from stream #n to the normal INTERPRET
 765+ 8554              // up to now, text-file must end with QUIT
 766+ 8554                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 8554             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 8554             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 8554             >
 766+ 8554             >                // dummy db directives used to calculate length of namec
 766+ 8554 4C 4F 41 44 >                db      "LOAD-"
 766+ 8558 2D          >
 766+ 8559             >len_NFA         defl    $ - temp_NFA
 766+ 8559             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 8554             >
 766+ 8554 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 8555 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 8559 2D          >
 766+ 855A             >                org     $-1                 // alter last byte of Name just above to set
 766+ 8559 AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 855A             >
 766+ 855A E9 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 855C             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 855C CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 855F             >
 766+ 855F             >
 766+ 855F             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 855F             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 855F             >
 766+ 855F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 855F 09 6E E6 6A                  dw      SOURCE_ID, STORE
 768+ 8563              Load_N_Begin:
 769+ 8563 CA 6C DB 6A                  dw          TIB, FETCH
 770+ 8567 5A 6A A5 63                  dw          DUP, LIT, 80
 770+ 856B 50 00
 771+ 856D AF 6A 7E 73                  dw          TWO_DUP, BLANKS
 772+ 8571 09 6E DB 6A                  dw          SOURCE_ID, FETCH
 773+ 8575 5C 79 5A 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 8579 F2 7A E6 6A
 774+ 857D 22 7B                        dw          SELECT
 775+ 857F F3 84                        dw          ACCEPT_N
 776+ 8581 DA 84                        dw          VIDEO
 777+ 8583 93 6A                        dw          TWO_DROP
 778+ 8585 2C 6C 40 6D                  dw          ZERO, BLK, STORE
 778+ 8589 E6 6A
 779+ 858B 2C 6C 4A 6D                  dw          ZERO, TO_IN, STORE
 779+ 858F E6 6A
 780+ 8591 73 77                        dw          INTERPRET
 781+ 8593 F0 66                        dw          QTERMINAL
 782+ 8595 D8 63                        dw      ZBRANCH
 783+ 8597 CC FF                        dw      Load_N_Begin - $
 784+ 8599 F7 68                        dw      EXIT
 785+ 859B
 786+ 859B              //  ______________________________________________________________________
 787+ 859B              //
 788+ 859B              // load         n --
 789+ 859B              // if n is positive, it loads screen #n (as usual)
 790+ 859B              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 859B              // this second way is useful if you want to load any kind of file
 792+ 859B              // provied that it is OPEN# the usual BASIC way.
 793+ 859B                              Colon_Def LOAD, "LOAD", is_normal
 793+ 859B             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 859B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 859B             >
 793+ 859B             >                // dummy db directives used to calculate length of namec
 793+ 859B 4C 4F 41 44 >                db      "LOAD"
 793+ 859F             >len_NFA         defl    $ - temp_NFA
 793+ 859F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 859B             >
 793+ 859B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 859C 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 85A0             >                org     $-1                 // alter last byte of Name just above to set
 793+ 859F C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 85A0             >
 793+ 85A0 54 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 85A2             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 85A2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 85A5             >
 793+ 85A5             >
 793+ 85A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 85A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 85A5             >
 793+ 85A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 85A5 5A 6A 6E 69                  dw      DUP, ZLESS
 795+ 85A9 D8 63                        dw      ZBRANCH
 796+ 85AB 08 00                        dw      Load_Else - $
 797+ 85AD 5C 85                        dw          LOAD_N
 798+ 85AF C3 63                        dw      BRANCH
 799+ 85B1 04 00                        dw      Load_Endif - $
 800+ 85B3              Load_Else:
 801+ 85B3 65 81                        dw          LOAD_P
 802+ 85B5              Load_Endif:
 803+ 85B5 F7 68                        dw      EXIT
 804+ 85B7
 805+ 85B7
 806+ 85B7              //  ______________________________________________________________________
 807+ 85B7              //
 808+ 85B7              // autoexec     --
 809+ 85B7              // this word is called the first time the Forth system boot to
 810+ 85B7              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85B7                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85B7             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85B7             >
 811+ 85B7             >                // dummy db directives used to calculate length of namec
 811+ 85B7 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85BB 45 58 45 43 >
 811+ 85BF             >len_NFA         defl    $ - temp_NFA
 811+ 85BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85B7             >
 811+ 85B7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85B8 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85BC 45 58 45 43 >
 811+ 85C0             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85BF C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85C0             >
 811+ 85C0 9B 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85C2             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85C2 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85C5             >
 811+ 85C5             >
 811+ 85C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85C5             >
 811+ 85C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85C5 A5 63 0B 00                  dw      LIT, 11
 813+ 85C9 A5 63 D7 6B                  dw      LIT, NOOP
 814+ 85CD A5 63 89 78                  dw      LIT, Autoexec_Ptr
 815+ 85D1 E6 6A                        dw      STORE
 816+ 85D3 A2 85                        dw      LOAD
 817+ 85D5 38 78                        dw      QUIT
 818+ 85D7 F7 68                        dw      EXIT
 819+ 85D9
 820+ 85D9
 821+ 85D9              //  ______________________________________________________________________
 822+ 85D9              //
 823+ 85D9              // bye     --
 824+ 85D9              //
 825+ 85D9                              Colon_Def BYE, "BYE", is_normal
 825+ 85D9             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85D9             >
 825+ 85D9             >                // dummy db directives used to calculate length of namec
 825+ 85D9 42 59 45    >                db      "BYE"
 825+ 85DC             >len_NFA         defl    $ - temp_NFA
 825+ 85DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85D9             >
 825+ 85D9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85DA 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85DD             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85DC C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85DD             >
 825+ 85DD B7 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85DF             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85DF CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85E2             >
 825+ 85E2             >
 825+ 85E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85E2             >
 825+ 85E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85E2 F4 7D                        dw      FLUSH
 827+ 85E4 23 7D                        dw      EMPTY_BUFFERS
 828+ 85E6 BD 7B DB 6A                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85EA 31 67 2D 6A
 829+ 85EE 2C 6C 9C 6C                  dw      ZERO, PLUS_ORIGIN
 830+ 85F2 21 79                        dw      BASIC
 831+ 85F4
 832+ 85F4              //  ______________________________________________________________________
 833+ 85F4              //
 834+ 85F4              // invv     --
 835+ 85F4              //
 836+ 85F4              //              Colon_Def INVV, "INVV", is_normal
 837+ 85F4              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85F4              //              dw      EXIT
 839+ 85F4
 840+ 85F4              //  ______________________________________________________________________
 841+ 85F4              //
 842+ 85F4              // truv     --
 843+ 85F4              //
 844+ 85F4              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85F4              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85F4              //              dw      EXIT
 847+ 85F4
 848+ 85F4              //  ______________________________________________________________________
 849+ 85F4              //
 850+ 85F4              // mark     --
 851+ 85F4              //
 852+ 85F4              //              Colon_Def MARK, "MARK", is_normal
 853+ 85F4              //              dw      INVV, TYPE, TRUV
 854+ 85F4              //              dw      EXIT
 855+ 85F4
 856+ 85F4              //  ______________________________________________________________________
 857+ 85F4              //
 858+ 85F4              // back     --
 859+ 85F4              //
 860+ 85F4                              Colon_Def BACK, "BACK", is_normal
 860+ 85F4             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85F4             >
 860+ 85F4             >                // dummy db directives used to calculate length of namec
 860+ 85F4 42 41 43 4B >                db      "BACK"
 860+ 85F8             >len_NFA         defl    $ - temp_NFA
 860+ 85F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85F4             >
 860+ 85F4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85F5 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 85F9             >                org     $-1                 // alter last byte of Name just above to set
 860+ 85F8 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 85F9             >
 860+ 85F9 D9 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 85FB             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 85FB CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 85FE             >
 860+ 85FE             >
 860+ 85FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 85FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 85FE             >
 860+ 85FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 85FE 36 6E 8B 6E                  dw      HERE, SUBTRACT, COMMA
 861+ 8602 54 6E
 862+ 8604 F7 68                        dw      EXIT
 863+ 8606
 864+ 8606              //  ______________________________________________________________________
 865+ 8606              //
 866+ 8606              // if          ( -- a 2 ) \ compile-time
 867+ 8606              // IF ... THEN
 868+ 8606              // IF ... ELSE ... ENDIF
 869+ 8606                              Colon_Def IF, "IF", is_immediate
 869+ 8606             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 8606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 8606             >
 869+ 8606             >                // dummy db directives used to calculate length of namec
 869+ 8606 49 46       >                db      "IF"
 869+ 8608             >len_NFA         defl    $ - temp_NFA
 869+ 8608             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 8606             >
 869+ 8606 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 8607 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 8609             >                org     $-1                 // alter last byte of Name just above to set
 869+ 8608 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 8609             >
 869+ 8609 F4 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 860B             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 860B CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 860E             >
 869+ 860E             >
 869+ 860E             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 860E             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 860E             >
 869+ 860E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 860E A9 70 D8 63                  dw      COMPILE, ZBRANCH
 871+ 8612 36 6E 2C 6C                  dw      HERE, ZERO, COMMA
 871+ 8616 54 6E
 872+ 8618 3E 6C                        dw      TWO
 873+ 861A F7 68                        dw      EXIT
 874+ 861C
 875+ 861C              //  ______________________________________________________________________
 876+ 861C              //
 877+ 861C              // endif        ( a 2 -- ) \ compile-time
 878+ 861C              //
 879+ 861C                              Colon_Def ENDIF, "ENDIF", is_immediate
 879+ 861C             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 879+ 861C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 861C             >
 879+ 861C             >                // dummy db directives used to calculate length of namec
 879+ 861C 45 4E 44 49 >                db      "ENDIF"
 879+ 8620 46          >
 879+ 8621             >len_NFA         defl    $ - temp_NFA
 879+ 8621             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 861C             >
 879+ 861C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 861D 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 879+ 8621 46          >
 879+ 8622             >                org     $-1                 // alter last byte of Name just above to set
 879+ 8621 C6          >                db      {b $} | END_BIT     // msb as name end
 879+ 8622             >
 879+ 8622 06 86       >                dw      last_NFA            // Link to previous definition Name
 879+ 8624             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 8624 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 8627             >
 879+ 8627             >
 879+ 8627             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 8627             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 8627             >
 879+ 8627             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 8627 2B 70                        dw      QCOMP
 881+ 8629 3E 6C 5C 70                  dw      TWO, QPAIRS
 882+ 862D 36 6E 1F 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 8631 8B 6E 4F 6A
 882+ 8635 E6 6A
 883+ 8637 F7 68                        dw      EXIT
 884+ 8639
 885+ 8639              //  ______________________________________________________________________
 886+ 8639              //
 887+ 8639              // then        ( a 2 -- ) \ compile-time
 888+ 8639              //
 889+ 8639                              Colon_Def THEN, "THEN", is_immediate
 889+ 8639             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 889+ 8639             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 8639             >
 889+ 8639             >                // dummy db directives used to calculate length of namec
 889+ 8639 54 48 45 4E >                db      "THEN"
 889+ 863D             >len_NFA         defl    $ - temp_NFA
 889+ 863D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 8639             >
 889+ 8639 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 863A 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 889+ 863E             >                org     $-1                 // alter last byte of Name just above to set
 889+ 863D CE          >                db      {b $} | END_BIT     // msb as name end
 889+ 863E             >
 889+ 863E 1C 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 8640             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 8640 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 8643             >
 889+ 8643             >
 889+ 8643             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 8643             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 8643             >
 889+ 8643             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 8643 24 86                        dw      ENDIF
 891+ 8645 F7 68                        dw      EXIT
 892+ 8647
 893+ 8647              //  ______________________________________________________________________
 894+ 8647              //
 895+ 8647              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 8647              //
 897+ 8647                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 8647             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 8647             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 8647             >
 897+ 8647             >                // dummy db directives used to calculate length of namec
 897+ 8647 45 4C 53 45 >                db      "ELSE"
 897+ 864B             >len_NFA         defl    $ - temp_NFA
 897+ 864B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 8647             >
 897+ 8647 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 8648 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 864C             >                org     $-1                 // alter last byte of Name just above to set
 897+ 864B C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 864C             >
 897+ 864C 39 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 864E             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 864E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 8651             >
 897+ 8651             >
 897+ 8651             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 8651             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 8651             >
 897+ 8651             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 8651 2B 70                        dw      QCOMP
 899+ 8653 3E 6C 5C 70                  dw      TWO, QPAIRS
 900+ 8657 A9 70 C3 63                  dw      COMPILE, BRANCH
 901+ 865B 36 6E 2C 6C                  dw      HERE, ZERO, COMMA
 901+ 865F 54 6E
 902+ 8661 4F 6A 3E 6C                  dw      SWAP, TWO, ENDIF
 902+ 8665 24 86
 903+ 8667 3E 6C                        dw      TWO
 904+ 8669 F7 68                        dw      EXIT
 905+ 866B
 906+ 866B              //  ______________________________________________________________________
 907+ 866B              //
 908+ 866B              // begin        ( -- a 1 ) \ compile-time
 909+ 866B              // BEGIN ... AGAIN
 910+ 866B              // BEGIN ... f UNTIL
 911+ 866B              // BEGIN ... f WHILE ... REPEAT
 912+ 866B                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 866B             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 866B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 866B             >
 912+ 866B             >                // dummy db directives used to calculate length of namec
 912+ 866B 42 45 47 49 >                db      "BEGIN"
 912+ 866F 4E          >
 912+ 8670             >len_NFA         defl    $ - temp_NFA
 912+ 8670             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 866B             >
 912+ 866B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 866C 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 8670 4E          >
 912+ 8671             >                org     $-1                 // alter last byte of Name just above to set
 912+ 8670 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 8671             >
 912+ 8671 47 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 8673             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 8673 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 8676             >
 912+ 8676             >
 912+ 8676             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 8676             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 8676             >
 912+ 8676             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 8676 2B 70                        dw      QCOMP
 914+ 8678 36 6E                        dw      HERE
 915+ 867A 3E 6C                        dw      TWO
 916+ 867C F7 68                        dw      EXIT
 917+ 867E
 918+ 867E              //  ______________________________________________________________________
 919+ 867E              //
 920+ 867E              // again        ( a 1 -- ) \ compile-time
 921+ 867E                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 867E             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 867E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 867E             >
 921+ 867E             >                // dummy db directives used to calculate length of namec
 921+ 867E 41 47 41 49 >                db      "AGAIN"
 921+ 8682 4E          >
 921+ 8683             >len_NFA         defl    $ - temp_NFA
 921+ 8683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 867E             >
 921+ 867E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 867F 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 8683 4E          >
 921+ 8684             >                org     $-1                 // alter last byte of Name just above to set
 921+ 8683 CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 8684             >
 921+ 8684 6B 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 8686             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 8686 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 8689             >
 921+ 8689             >
 921+ 8689             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 8689             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 8689             >
 921+ 8689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 8689 2B 70                        dw      QCOMP
 923+ 868B 3E 6C 5C 70                  dw      TWO, QPAIRS
 924+ 868F A9 70 C3 63                  dw      COMPILE, BRANCH
 925+ 8693 FB 85                        dw      BACK
 926+ 8695 F7 68                        dw      EXIT
 927+ 8697
 928+ 8697              //  ______________________________________________________________________
 929+ 8697              //
 930+ 8697              // until        ( a 1 -- ) \ compile-time
 931+ 8697                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 8697             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 8697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 8697             >
 931+ 8697             >                // dummy db directives used to calculate length of namec
 931+ 8697 55 4E 54 49 >                db      "UNTIL"
 931+ 869B 4C          >
 931+ 869C             >len_NFA         defl    $ - temp_NFA
 931+ 869C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 8697             >
 931+ 8697 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 8698 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 869C 4C          >
 931+ 869D             >                org     $-1                 // alter last byte of Name just above to set
 931+ 869C CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 869D             >
 931+ 869D 7E 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 869F             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 869F CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 86A2             >
 931+ 86A2             >
 931+ 86A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 86A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 86A2             >
 931+ 86A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 86A2 2B 70                        dw      QCOMP
 933+ 86A4 3E 6C 5C 70                  dw      TWO, QPAIRS
 934+ 86A8 A9 70 D8 63                  dw      COMPILE, ZBRANCH
 935+ 86AC FB 85                        dw      BACK
 936+ 86AE F7 68                        dw      EXIT
 937+ 86B0
 938+ 86B0              //  ______________________________________________________________________
 939+ 86B0              //
 940+ 86B0              // end          ( a 1 -- ) \ compile-time
 941+ 86B0                              Colon_Def END, "END", is_immediate
 941+ 86B0             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 86B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 86B0             >
 941+ 86B0             >                // dummy db directives used to calculate length of namec
 941+ 86B0 45 4E 44    >                db      "END"
 941+ 86B3             >len_NFA         defl    $ - temp_NFA
 941+ 86B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 86B0             >
 941+ 86B0 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 86B1 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 86B4             >                org     $-1                 // alter last byte of Name just above to set
 941+ 86B3 C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 86B4             >
 941+ 86B4 97 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 86B6             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 86B6 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 86B9             >
 941+ 86B9             >
 941+ 86B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 86B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 86B9             >
 941+ 86B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 86B9 9F 86                        dw      UNTIL
 943+ 86BB F7 68                        dw      EXIT
 944+ 86BD
 945+ 86BD              //  ______________________________________________________________________
 946+ 86BD              //
 947+ 86BD              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 86BD                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 86BD             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 86BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86BD             >
 948+ 86BD             >                // dummy db directives used to calculate length of namec
 948+ 86BD 57 48 49 4C >                db      "WHILE"
 948+ 86C1 45          >
 948+ 86C2             >len_NFA         defl    $ - temp_NFA
 948+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86BD             >
 948+ 86BD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86BE 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86C2 45          >
 948+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86C2 C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86C3             >
 948+ 86C3 B0 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86C5             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86C5 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86C8             >
 948+ 86C8             >
 948+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86C8             >
 948+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86C8 0B 86                        dw      IF
 950+ 86CA              //              dw      TWO_PLUS // ( that is 4 )
 951+ 86CA 9F 6A                        dw      TWO_SWAP
 952+ 86CC F7 68                        dw      EXIT
 953+ 86CE
 954+ 86CE              //  ______________________________________________________________________
 955+ 86CE              //
 956+ 86CE              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 957+ 86CE                              Colon_Def REPEAT, "REPEAT", is_immediate
 957+ 86CE             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 957+ 86CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 957+ 86CE             >
 957+ 86CE             >                // dummy db directives used to calculate length of namec
 957+ 86CE 52 45 50 45 >                db      "REPEAT"
 957+ 86D2 41 54       >
 957+ 86D4             >len_NFA         defl    $ - temp_NFA
 957+ 86D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 957+ 86CE             >
 957+ 86CE C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 957+ 86CF 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 957+ 86D3 41 54       >
 957+ 86D5             >                org     $-1                 // alter last byte of Name just above to set
 957+ 86D4 D4          >                db      {b $} | END_BIT     // msb as name end
 957+ 86D5             >
 957+ 86D5 BD 86       >                dw      last_NFA            // Link to previous definition Name
 957+ 86D7             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 957+ 86D7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 957+ 86DA             >
 957+ 86DA             >
 957+ 86DA             >                endif           ; ok        // for other definitions it "points" the correct handler
 957+ 86DA             >                // Use of "; ok" to suppress "warning[fwdref]"
 957+ 86DA             >
 957+ 86DA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 958+ 86DA 86 86                        dw      AGAIN
 959+ 86DC              //              dw      TWO_MINUS
 960+ 86DC 24 86                        dw      ENDIF
 961+ 86DE F7 68                        dw      EXIT
 962+ 86E0
 963+ 86E0              //  ______________________________________________________________________
 964+ 86E0              //
 965+ 86E0              // ?do-
 966+ 86E0              // special version of "BACK" used by ?DO and LOOP
 967+ 86E0                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86E0             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86E0             >
 967+ 86E0             >                // dummy db directives used to calculate length of namec
 967+ 86E0 3F 44 4F 2D >                db      "?DO-"
 967+ 86E4             >len_NFA         defl    $ - temp_NFA
 967+ 86E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86E0             >
 967+ 86E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86E1 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86E5             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86E4 AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86E5             >
 967+ 86E5 CE 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86E7             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86E7 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86EA             >
 967+ 86EA             >
 967+ 86EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86EA             >
 967+ 86EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86EA FB 85                        dw      BACK
 969+ 86EC              CDoBack_Begin:
 970+ 86EC C7 68 BC 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86F0 DB 6A 8B 6E
 971+ 86F4 D8 63                        dw      ZBRANCH
 972+ 86F6 0A 00                        dw      CDoBack_While - $
 973+ 86F8 C3 69 24 86                  dw          TWO_PLUS, ENDIF
 974+ 86FC C3 63                        dw      BRANCH
 975+ 86FE EE FF                        dw      CDoBack_Begin - $
 976+ 8700              CDoBack_While:
 977+ 8700 70 70 BC 6D                  dw      QCSP, CSP, STORE
 977+ 8704 E6 6A
 978+ 8706 F7 68                        dw      EXIT
 979+ 8708
 980+ 8708              //  ______________________________________________________________________
 981+ 8708              //
 982+ 8708              // do
 983+ 8708              // DO  ... LOOP
 984+ 8708              // DO  ... n +LOOP
 985+ 8708              // ?DO ... LOOP
 986+ 8708              // ?DO ... n +LOOP
 987+ 8708                              Colon_Def DO, "DO", is_immediate
 987+ 8708             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 8708             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 8708             >
 987+ 8708             >                // dummy db directives used to calculate length of namec
 987+ 8708 44 4F       >                db      "DO"
 987+ 870A             >len_NFA         defl    $ - temp_NFA
 987+ 870A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 8708             >
 987+ 8708 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 8709 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 870B             >                org     $-1                 // alter last byte of Name just above to set
 987+ 870A CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 870B             >
 987+ 870B E0 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 870D             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 870D CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 8710             >
 987+ 8710             >
 987+ 8710             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 8710             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 8710             >
 987+ 8710             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 8710 A9 70 5D 64                  dw      COMPILE, C_DO
 989+ 8714 BC 6D DB 6A                  dw      CSP, FETCH, STORE_CSP
 989+ 8718 FC 6F
 990+ 871A 36 6E 47 6C                  dw      HERE, THREE
 991+ 871E F7 68                        dw      EXIT
 992+ 8720
 993+ 8720              //  ______________________________________________________________________
 994+ 8720              //
 995+ 8720              // loop
 996+ 8720                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 8720             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 8720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 8720             >
 996+ 8720             >                // dummy db directives used to calculate length of namec
 996+ 8720 4C 4F 4F 50 >                db      "LOOP"
 996+ 8724             >len_NFA         defl    $ - temp_NFA
 996+ 8724             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 8720             >
 996+ 8720 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 8721 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 8725             >                org     $-1                 // alter last byte of Name just above to set
 996+ 8724 D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 8725             >
 996+ 8725 08 87       >                dw      last_NFA            // Link to previous definition Name
 996+ 8727             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 8727 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 872A             >
 996+ 872A             >
 996+ 872A             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 872A             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 872A             >
 996+ 872A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 872A 47 6C 5C 70                  dw      THREE, QPAIRS
 998+ 872E A9 70 22 64                  dw      COMPILE, C_LOOP
 999+ 8732 E7 86                        dw      C_DO_BACK
1000+ 8734 F7 68                        dw      EXIT
1001+ 8736
1002+ 8736              //  ______________________________________________________________________
1003+ 8736              //
1004+ 8736              // +loop
1005+ 8736                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 8736             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 8736             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 8736             >
1005+ 8736             >                // dummy db directives used to calculate length of namec
1005+ 8736 2B 4C 4F 4F >                db      "+LOOP"
1005+ 873A 50          >
1005+ 873B             >len_NFA         defl    $ - temp_NFA
1005+ 873B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 8736             >
1005+ 8736 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 8737 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 873B 50          >
1005+ 873C             >                org     $-1                 // alter last byte of Name just above to set
1005+ 873B D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 873C             >
1005+ 873C 20 87       >                dw      last_NFA            // Link to previous definition Name
1005+ 873E             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 873E CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 8741             >
1005+ 8741             >
1005+ 8741             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 8741             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 8741             >
1005+ 8741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 8741 47 6C 5C 70                  dw      THREE, QPAIRS
1007+ 8745 A9 70 EC 63                  dw      COMPILE, C_PLOOP
1008+ 8749 E7 86                        dw      C_DO_BACK
1009+ 874B F7 68                        dw      EXIT
1010+ 874D
1011+ 874D              //  ______________________________________________________________________
1012+ 874D              //
1013+ 874D              // ?do
1014+ 874D                              Colon_Def QDO, "?DO", is_immediate
1014+ 874D             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 874D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 874D             >
1014+ 874D             >                // dummy db directives used to calculate length of namec
1014+ 874D 3F 44 4F    >                db      "?DO"
1014+ 8750             >len_NFA         defl    $ - temp_NFA
1014+ 8750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 874D             >
1014+ 874D C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 874E 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 8751             >                org     $-1                 // alter last byte of Name just above to set
1014+ 8750 CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 8751             >
1014+ 8751 36 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 8753             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 8753 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 8756             >
1014+ 8756             >
1014+ 8756             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 8756             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 8756             >
1014+ 8756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 8756 A9 70 31 64                  dw      COMPILE, C_Q_DO
1016+ 875A BC 6D DB 6A                  dw      CSP, FETCH, STORE_CSP
1016+ 875E FC 6F
1017+ 8760 36 6E 2C 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 8764 54 6E 2C 6C
1018+ 8768 36 6E 47 6C                  dw      HERE, THREE
1019+ 876C F7 68                        dw      EXIT
1020+ 876E
1021+ 876E              Latest_Definition:
1022+ 876E              //  ______________________________________________________________________
1023+ 876E              //
1024+ 876E              // \
1025+ 876E                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 876E             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 876E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 876E             >
1025+ 876E             >                // dummy db directives used to calculate length of namec
1025+ 876E 5C          >                db      "\\"
1025+ 876F             >len_NFA         defl    $ - temp_NFA
1025+ 876F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 876E             >
1025+ 876E C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 876F 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 8770             >                org     $-1                 // alter last byte of Name just above to set
1025+ 876F DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 8770             >
1025+ 8770 4D 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 8772             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 8772 CD B0 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 8775             >
1025+ 8775             >
1025+ 8775             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 8775             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 8775             >
1025+ 8775             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 8775 40 6D DB 6A                  dw      BLK, FETCH
1027+ 8779 D8 63                        dw      ZBRANCH
1028+ 877B 30 00                        dw      Backslash_Else_1 - $
1029+ 877D 40 6D DB 6A                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 8781 35 6C D1 6E
1030+ 8785 D8 63                        dw          ZBRANCH
1031+ 8787 18 00                        dw          Backslash_Else_2 - $
1032+ 8789 4A 6D DB 6A                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 878D 66 6C 4C 7A
1032+ 8791 66 6C
1033+ 8793 4F 6A 8B 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 8797 4A 6D BC 6A
1034+ 879B C3 63                        dw          BRANCH
1035+ 879D 0A 00                        dw          Backslash_Endif_2 - $
1036+ 879F              Backslash_Else_2:
1037+ 879F 73 6C DC 69                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 87A3 4A 6D E6 6A
1038+ 87A7              Backslash_Endif_2:
1039+ 87A7 C3 63                        dw      BRANCH
1040+ 87A9 0A 00                        dw      Backslash_Endif_1 - $
1041+ 87AB              Backslash_Else_1:
1042+ 87AB A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 87AF 4A 6D E6 6A
1043+ 87B3              Backslash_Endif_1:
1044+ 87B3 F7 68                        dw      EXIT
1045+ 87B5
1046+ 87B5              Fence_Word:
1047+ 87B5              //  ______________________________________________________________________
1048+ 87B5              //
1049+ 87B5
1050+ 87B5 00           Here_Dictionary db      0
1051+ 87B6
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  87B6
 116  87B6              // now we save the compiled file so we can either run it or debug it
 117  87B6                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  87B6                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  87B6                              SAVENEX CFG  0
 120  87B6                              SAVENEX BANK 2, 0
 121  87B6                              SAVENEX AUTO
 122  87B6                              SAVENEX CLOSE
 123  87B6
 124  87B6              //              PAGE 7 ;set 7 page to current slot
 125  87B6              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  87B6              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  87B6
 128  87B6                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  87B6
 130  87B6                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  87B6
 132  87B6                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
