# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20211119
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2021
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 F6 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 F6 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 7A 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 C1 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 C1 87        DP_origin       dw      Fence_Word
  39+ 6386 FE 77        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 E1                           pop     hl
 129+ 63B9 E9                           jp      (hl)
 130+ 63BA              //              jr      Exec_Ptr
 131+ 63BA
 132+ 63BA
 133+ 63BA              //  ______________________________________________________________________
 134+ 63BA              //
 135+ 63BA              // branch       --
 136+ 63BA              // unconditional branch in colon definition using the following cell as an offset from current IP value
 137+ 63BA              // compiled by ELSE, AGAIN and some other immediate words
 138+ 63BA
 139+ 63BA                              New_Def BRANCH, "BRANCH", is_code, is_normal
 139+ 63BA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63BA             >
 139+ 63BA             >                // dummy db directives used to calculate length of namec
 139+ 63BA 42 52 41 4E >                db      "BRANCH"
 139+ 63BE 43 48       >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63BA             >
 139+ 63BA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BB 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 139+ 63BF 43 48       >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 C8          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3              Branch_Ptr:
 141+ 63C3 60                           ld      h, b
 142+ 63C4 69                           ld      l, c
 143+ 63C5 5E                           ld      e, (hl)
 144+ 63C6 23                           inc     hl
 145+ 63C7 56                           ld      d, (hl)
 146+ 63C8 2B                           dec     hl                  // offset is calculated from current IP
 147+ 63C9 19                           add     hl, de
 148+ 63CA 4D                           ld      c, l
 149+ 63CB 44                           ld      b, h
 150+ 63CC                              next
 150+ 63CC DD E9       >                jp      (ix)
 151+ 63CE
 152+ 63CE
 153+ 63CE              //  ______________________________________________________________________
 154+ 63CE              //
 155+ 63CE              // 0branch      f --
 156+ 63CE              // conditional branch if the top-of-stack is ZERO or FALSE.
 157+ 63CE              // compiled by IF, UNTIL and some other immediate words
 158+ 63CE
 159+ 63CE                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 159+ 63CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 63CE             >
 159+ 63CE             >                // dummy db directives used to calculate length of namec
 159+ 63CE 30 42 52 41 >                db      "0BRANCH"
 159+ 63D2 4E 43 48    >
 159+ 63D5             >len_NFA         defl    $ - temp_NFA
 159+ 63D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 63CE             >
 159+ 63CE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 63CF 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 159+ 63D3 4E 43 48    >
 159+ 63D6             >                org     $-1                 // alter last byte of Name just above to set
 159+ 63D5 C8          >                db      {b $} | END_BIT     // msb as name end
 159+ 63D6             >
 159+ 63D6 BA 63       >                dw      last_NFA            // Link to previous definition Name
 159+ 63D8             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 63D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159+ 63D8 ~           >
 159+ 63D8 ~           >
 159+ 63D8             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 63D8             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 63D8             >
 159+ 63D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 63D8              ZBranch_Ptr:
 161+ 63D8 E1                           pop     hl
 162+ 63D9 7D                           ld      a, l
 163+ 63DA B4                           or      h
 164+ 63DB CA C3 63                     jp      z, Branch_Ptr
 165+ 63DE 03                           inc     bc                  // if not branch, skip offset cell.
 166+ 63DF 03                           inc     bc
 167+ 63E0                              next
 167+ 63E0 DD E9       >                jp      (ix)
 168+ 63E2
 169+ 63E2              //  ______________________________________________________________________
 170+ 63E2              //
 171+ 63E2              // (loop)       --
 172+ 63E2              // compiled by +LOOP. it uses the top two values of return-stack to
 173+ 63E2              // keep track of index and limit
 174+ 63E2                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 174+ 63E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 63E2             >
 174+ 63E2             >                // dummy db directives used to calculate length of namec
 174+ 63E2 28 4C 4F 4F >                db      "(LOOP)"
 174+ 63E6 50 29       >
 174+ 63E8             >len_NFA         defl    $ - temp_NFA
 174+ 63E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 63E2             >
 174+ 63E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 63E3 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 174+ 63E7 50 29       >
 174+ 63E9             >                org     $-1                 // alter last byte of Name just above to set
 174+ 63E8 A9          >                db      {b $} | END_BIT     // msb as name end
 174+ 63E9             >
 174+ 63E9 CE 63       >                dw      last_NFA            // Link to previous definition Name
 174+ 63EB             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 63EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 174+ 63EB ~           >
 174+ 63EB ~           >
 174+ 63EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 63EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 63EB             >
 174+ 63EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 63EB
 176+ 63EB
 177+ 63EB 11 01 00                     ld      de, 1               // bc contains increment of 1
 178+ 63EE
 179+ 63EE              Loop_Ptr:
 180+ 63EE                              ldhlrp                      // ld hl,rp macro 30h +Origin
 180+ 63EE 2A 96 63    >                ld      hl,(RP_Pointer)
 181+ 63F1
 182+ 63F1 7E                           ld      a, (hl)             // hl points to loop-index, add increment de to it.
 183+ 63F2 83                           add     e
 184+ 63F3 77                           ld      (hl), a
 185+ 63F4 5F                           ld      e, a
 186+ 63F5 23                           inc     hl
 187+ 63F6 7E                           ld      a, (hl)
 188+ 63F7 8A                           adc     d
 189+ 63F8 77                           ld      (hl),a
 190+ 63F9 23                           inc     hl
 191+ 63FA CB 7A                        bit     7, d                // keep increment-sign just before overwriting d
 192+ 63FC 57                           ld      d, a
 193+ 63FD
 194+ 63FD 20 07                        jr      nz, Loop_NegativeIncrement
 195+ 63FF 7B                               ld      a, e
 196+ 6400 96                               sub     (hl)
 197+ 6401 7A                               ld      a, d
 198+ 6402 23                               inc     hl
 199+ 6403 9E                               sbc     (hl)
 200+ 6404 18 05                        jr      Loop_Endif              // else
 201+ 6406
 202+ 6406              Loop_NegativeIncrement:
 203+ 6406 7E                               ld      a, (hl)
 204+ 6407 93                               sub     e
 205+ 6408 23                               inc     hl
 206+ 6409 7E                               ld      a, (hl)
 207+ 640A 9A                               sbc     d
 208+ 640B
 209+ 640B              Loop_Endif:
 210+ 640B FA C3 63                     jp      m, Branch_Ptr       // perform branch consuming following cell
 211+ 640E 23                           inc     hl
 212+ 640F                              ldrphl                      // ld rp,hl macro 30h +Origin
 212+ 640F 22 96 63    >                ld      (RP_Pointer),hl
 213+ 6412
 214+ 6412 03                           inc     bc                  // skip branch-style offset
 215+ 6413 03                           inc     bc
 216+ 6414                              next
 216+ 6414 DD E9       >                jp      (ix)
 217+ 6416
 218+ 6416              //  ______________________________________________________________________
 219+ 6416              //
 220+ 6416              // (+loop)       n --
 221+ 6416              // same as (LOOP) but index is incremented by n (instead of just 1)
 222+ 6416              // compiled by +LOOP.
 223+ 6416                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 223+ 6416             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 6416             >
 223+ 6416             >                // dummy db directives used to calculate length of namec
 223+ 6416 28 2B 4C 4F >                db      "(+LOOP)"
 223+ 641A 4F 50 29    >
 223+ 641D             >len_NFA         defl    $ - temp_NFA
 223+ 641D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 6416             >
 223+ 6416 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 6417 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 223+ 641B 4F 50 29    >
 223+ 641E             >                org     $-1                 // alter last byte of Name just above to set
 223+ 641D A9          >                db      {b $} | END_BIT     // msb as name end
 223+ 641E             >
 223+ 641E E2 63       >                dw      last_NFA            // Link to previous definition Name
 223+ 6420             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 6420 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 6420 ~           >
 223+ 6420 ~           >
 223+ 6420             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 6420             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 6420             >
 223+ 6420             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 6420 D1                           pop     de
 225+ 6421 C3 EE 63                     jp      Loop_Ptr
 226+ 6424
 227+ 6424              //  ______________________________________________________________________
 228+ 6424              //
 229+ 6424              // (?do)        lim ind --
 230+ 6424              // compiled by ?DO to make a loop checking for lim == ind first
 231+ 6424              // at run-time (?DO) must be followed by a BRANCH offset
 232+ 6424              // used to skip the loop if lim == ind
 233+ 6424                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 233+ 6424             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ 6424             >
 233+ 6424             >                // dummy db directives used to calculate length of namec
 233+ 6424 28 3F 44 4F >                db      "(?DO)"
 233+ 6428 29          >
 233+ 6429             >len_NFA         defl    $ - temp_NFA
 233+ 6429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ 6424             >
 233+ 6424 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ 6425 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 233+ 6429 29          >
 233+ 642A             >                org     $-1                 // alter last byte of Name just above to set
 233+ 6429 A9          >                db      {b $} | END_BIT     // msb as name end
 233+ 642A             >
 233+ 642A 16 64       >                dw      last_NFA            // Link to previous definition Name
 233+ 642C             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 642C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 642C ~           >
 233+ 642C ~           >
 233+ 642C             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 642C             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 642C             >
 233+ 642C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 642C D1                           pop     de                  // de has the index
 235+ 642D E1                           pop     hl                  // hl has the limit
 236+ 642E E5                           push    hl
 237+ 642F D5                           push    de
 238+ 6430 A7                           and     a                   // reset carry flag
 239+ 6431 ED 52                        sbc     hl, de              // compute limit - index
 240+ 6433 20 05                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 241+ 6435 D1                               pop     de
 242+ 6436 E1                               pop     hl
 243+ 6437
 244+ 6437 C3 C3 63                         jp      Branch_Ptr          // perform branch consuming following cell
 245+ 643A              Do_Ptr:
 246+ 643A                              ldhlrp                      // prepare RP
 246+ 643A 2A 96 63    >                ld      hl,(RP_Pointer)
 247+ 643D 2B                           dec     hl
 248+ 643E 2B                           dec     hl
 249+ 643F 2B                           dec     hl
 250+ 6440 2B                           dec     hl
 251+ 6441                              ldrphl
 251+ 6441 22 96 63    >                ld      (RP_Pointer),hl
 252+ 6444
 253+ 6444                              // store index as top RP
 254+ 6444 D1                           pop     de
 255+ 6445 73                           ld      (hl), e
 256+ 6446 23                           inc     hl
 257+ 6447 72                           ld      (hl), d
 258+ 6448 23                           inc     hl
 259+ 6449                              // stores lim as second from top RP
 260+ 6449 D1                           pop     de
 261+ 644A 73                           ld      (hl), e
 262+ 644B 23                           inc     hl
 263+ 644C 72                           ld      (hl), d
 264+ 644D
 265+ 644D                              // skip branch-style offseet
 266+ 644D 03                           inc     bc
 267+ 644E 03                           inc     bc
 268+ 644F                              next
 268+ 644F DD E9       >                jp      (ix)
 269+ 6451
 270+ 6451              //  ______________________________________________________________________
 271+ 6451              //
 272+ 6451              // (do)        lim ind --
 273+ 6451              // compiled by DO to make a loop checking for lim == ind first
 274+ 6451              // this is a simpler version of (?DO)
 275+ 6451                              New_Def C_DO, "(DO)", is_code, is_normal
 275+ 6451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ 6451             >
 275+ 6451             >                // dummy db directives used to calculate length of namec
 275+ 6451 28 44 4F 29 >                db      "(DO)"
 275+ 6455             >len_NFA         defl    $ - temp_NFA
 275+ 6455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ 6451             >
 275+ 6451 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ 6452 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 275+ 6456             >                org     $-1                 // alter last byte of Name just above to set
 275+ 6455 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ 6456             >
 275+ 6456 24 64       >                dw      last_NFA            // Link to previous definition Name
 275+ 6458             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6458 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6458 ~           >
 275+ 6458 ~           >
 275+ 6458             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6458             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6458             >
 275+ 6458             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6458 0B                           dec     bc                  // prepare IP beforehand
 277+ 6459 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 278+ 645A C3 3A 64                     jp      Do_Ptr
 279+ 645D
 280+ 645D              //  ______________________________________________________________________
 281+ 645D              //
 282+ 645D              // i            -- n
 283+ 645D              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 284+ 645D              // the current value of the index-loop
 285+ 645D                              New_Def I, "I", is_code, is_normal
 285+ 645D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 285+ 645D             >
 285+ 645D             >                // dummy db directives used to calculate length of namec
 285+ 645D 49          >                db      "I"
 285+ 645E             >len_NFA         defl    $ - temp_NFA
 285+ 645E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 285+ 645D             >
 285+ 645D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 285+ 645E 49          >                db      "I"               // name string in 7-bit ascii, but
 285+ 645F             >                org     $-1                 // alter last byte of Name just above to set
 285+ 645E C9          >                db      {b $} | END_BIT     // msb as name end
 285+ 645F             >
 285+ 645F 51 64       >                dw      last_NFA            // Link to previous definition Name
 285+ 6461             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 285+ 6461 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 285+ 6461 ~           >
 285+ 6461 ~           >
 285+ 6461             >                endif           ; ok        // for other definitions it "points" the correct handler
 285+ 6461             >                // Use of "; ok" to suppress "warning[fwdref]"
 285+ 6461             >
 285+ 6461             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 286+ 6461              I_Ptr:
 287+ 6461
 288+ 6461                              ldhlrp
 288+ 6461 2A 96 63    >                ld      hl,(RP_Pointer)
 289+ 6464              I_Ptr_prime
 290+ 6464 5E                           ld      e, (hl)
 291+ 6465 23                           inc     hl
 292+ 6466 56                           ld      d, (hl)
 293+ 6467 D5                           push    de
 294+ 6468                              next
 294+ 6468 DD E9       >                jp      (ix)
 295+ 646A
 296+ 646A
 297+ 646A              //  ______________________________________________________________________
 298+ 646A              //
 299+ 646A              // i'            -- n
 300+ 646A              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 301+ 646A              // the limit of the index-loop
 302+ 646A
 303+ 646A                              New_Def II, "I'", is_code, is_normal
 303+ 646A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 646A             >
 303+ 646A             >                // dummy db directives used to calculate length of namec
 303+ 646A 49 27       >                db      "I'"
 303+ 646C             >len_NFA         defl    $ - temp_NFA
 303+ 646C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 646A             >
 303+ 646A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 646B 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 303+ 646D             >                org     $-1                 // alter last byte of Name just above to set
 303+ 646C A7          >                db      {b $} | END_BIT     // msb as name end
 303+ 646D             >
 303+ 646D 5D 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 646F             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 646F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 646F ~           >
 303+ 646F ~           >
 303+ 646F             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 646F             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 646F             >
 303+ 646F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 646F                              ldhlrp
 304+ 646F 2A 96 63    >                ld      hl,(RP_Pointer)
 305+ 6472 23                           inc     hl
 306+ 6473 23                           inc     hl
 307+ 6474 18 EE                        jr      I_Ptr_prime
 308+ 6476
 309+ 6476
 310+ 6476              //  ______________________________________________________________________
 311+ 6476              //
 312+ 6476              // digit        c n -- u 1  |  0
 313+ 6476              // convert a character c using base n
 314+ 6476              // returns a unsigned number and a true flag
 315+ 6476              // or just a false flag if the conversion fails
 316+ 6476                              New_Def DIGIT, "DIGIT", is_code, is_normal
 316+ 6476             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 6476             >
 316+ 6476             >                // dummy db directives used to calculate length of namec
 316+ 6476 44 49 47 49 >                db      "DIGIT"
 316+ 647A 54          >
 316+ 647B             >len_NFA         defl    $ - temp_NFA
 316+ 647B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 6476             >
 316+ 6476 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 6477 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 316+ 647B 54          >
 316+ 647C             >                org     $-1                 // alter last byte of Name just above to set
 316+ 647B D4          >                db      {b $} | END_BIT     // msb as name end
 316+ 647C             >
 316+ 647C 6A 64       >                dw      last_NFA            // Link to previous definition Name
 316+ 647E             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 647E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 316+ 647E ~           >
 316+ 647E ~           >
 316+ 647E             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 647E             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 647E             >
 316+ 647E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 647E E1                           pop     hl                  // l has the base
 318+ 647F D1                           pop     de                  // e has the digit
 319+ 6480 7B                           ld      a, e
 320+ 6481 FE 60                        cp      $60                 // check if lowercase
 321+ 6483 38 02                        jr      c, Digit_Uppercase
 322+ 6485 D6 20                            sub     $20                 // quick'n'dirty uppercase
 323+ 6487              Digit_Uppercase:
 324+ 6487 D6 30                        sub     $30
 325+ 6489 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 326+ 648B FE 0A                            cp      $0A
 327+ 648D 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 328+ 648F D6 07                                sub     7                   // try hex and subtract 7
 329+ 6491 FE 0A                                cp      $0A
 330+ 6493 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 331+ 6495
 332+ 6495              Digit_Decimal:
 333+ 6495                              // compare digit
 334+ 6495 BD                           cp      l                   // compare with base
 335+ 6496
 336+ 6496 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 337+ 6498 5F                               ld      e, a                // digit is returned as second from TOS
 338+ 6499 21 01 00                         ld      hl, 1
 339+ 649C
 340+ 649C                                  psh2
 340+ 649C D5          >                push    de
 340+ 649D E5          >                push    hl
 340+ 649E DD E9       >                jp      (ix)
 341+ 64A0              Digit_Fail:
 342+ 64A0 21 00 00                     ld      hl, 0
 343+ 64A3                              psh1
 343+ 64A3 E5          >                push    hl
 343+ 64A4 DD E9       >                jp      (ix)
 344+ 64A6
 345+ 64A6              //  ______________________________________________________________________
 346+ 64A6              //
 347+ 64A6              //  parametric uppercase routine
 348+ 64A6              //  depending on the following op-code the routine can be by-passed
 349+ 64A6              //  changing the behaviour of some callers.
 350+ 64A6              //  If it is "ret" then the system is Case-Sensitive
 351+ 64A6              //  If it is "Nop" then the system is Case-Insensitive
 352+ 64A6              //  Only A register is touched.
 353+ 64A6 00           Case_Sensitive: nop                         // Default is case-insensitive.
 354+ 64A7              Case_Upper:
 355+ 64A7 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 356+ 64A9 D8                           ret     c                   // no change if A < "a"
 357+ 64AA FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 358+ 64AC D0                           ret     nc                  // no change if A > "z"
 359+ 64AD D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 360+ 64AF C9                           ret
 361+ 64B0
 362+ 64B0              //  ______________________________________________________________________
 363+ 64B0              //
 364+ 64B0              //  caseon      --
 365+ 64B0              // set system case-sensitivity on
 366+ 64B0              // it patches a RET/NOP at the beginning of the uppercase-routine
 367+ 64B0                              New_Def CASEON, "CASEON", is_code, is_normal
 367+ 64B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 367+ 64B0             >
 367+ 64B0             >                // dummy db directives used to calculate length of namec
 367+ 64B0 43 41 53 45 >                db      "CASEON"
 367+ 64B4 4F 4E       >
 367+ 64B6             >len_NFA         defl    $ - temp_NFA
 367+ 64B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 367+ 64B0             >
 367+ 64B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 367+ 64B1 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 367+ 64B5 4F 4E       >
 367+ 64B7             >                org     $-1                 // alter last byte of Name just above to set
 367+ 64B6 CE          >                db      {b $} | END_BIT     // msb as name end
 367+ 64B7             >
 367+ 64B7 76 64       >                dw      last_NFA            // Link to previous definition Name
 367+ 64B9             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 367+ 64B9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 367+ 64B9 ~           >
 367+ 64B9 ~           >
 367+ 64B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 367+ 64B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 367+ 64B9             >
 367+ 64B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 368+ 64B9 3E C9                        ld      a, $C9              // "ret"
 369+ 64BB 32 A6 64                     ld      (Case_Sensitive), a
 370+ 64BE                              next
 370+ 64BE DD E9       >                jp      (ix)
 371+ 64C0
 372+ 64C0              //  ______________________________________________________________________
 373+ 64C0              //
 374+ 64C0              //  caseoff     --
 375+ 64C0              // set system case-sensitivity on
 376+ 64C0              // it patches a RET/NOP at the beginning of the uppercase-routine
 377+ 64C0                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 377+ 64C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 64C0             >
 377+ 64C0             >                // dummy db directives used to calculate length of namec
 377+ 64C0 43 41 53 45 >                db      "CASEOFF"
 377+ 64C4 4F 46 46    >
 377+ 64C7             >len_NFA         defl    $ - temp_NFA
 377+ 64C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 64C0             >
 377+ 64C0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 64C1 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 377+ 64C5 4F 46 46    >
 377+ 64C8             >                org     $-1                 // alter last byte of Name just above to set
 377+ 64C7 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 64C8             >
 377+ 64C8 B0 64       >                dw      last_NFA            // Link to previous definition Name
 377+ 64CA             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 64CA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 377+ 64CA ~           >
 377+ 64CA ~           >
 377+ 64CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 64CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 64CA             >
 377+ 64CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 64CA 3E 00                        ld      a, $00              // "nop"
 379+ 64CC 32 A6 64                     ld      (Case_Sensitive), a
 380+ 64CF                              next
 380+ 64CF DD E9       >                jp      (ix)
 381+ 64D1
 382+ 64D1              //  ______________________________________________________________________
 383+ 64D1              //
 384+ 64D1              //  upper       c1 -- c1 | c2
 385+ 64D1              // character on top of stack is forced to Uppercase.
 386+ 64D1                              New_Def UPPER, "UPPER", is_code, is_normal
 386+ 64D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 386+ 64D1             >
 386+ 64D1             >                // dummy db directives used to calculate length of namec
 386+ 64D1 55 50 50 45 >                db      "UPPER"
 386+ 64D5 52          >
 386+ 64D6             >len_NFA         defl    $ - temp_NFA
 386+ 64D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 386+ 64D1             >
 386+ 64D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 386+ 64D2 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 386+ 64D6 52          >
 386+ 64D7             >                org     $-1                 // alter last byte of Name just above to set
 386+ 64D6 D2          >                db      {b $} | END_BIT     // msb as name end
 386+ 64D7             >
 386+ 64D7 C0 64       >                dw      last_NFA            // Link to previous definition Name
 386+ 64D9             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 386+ 64D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 386+ 64D9 ~           >
 386+ 64D9 ~           >
 386+ 64D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 386+ 64D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 386+ 64D9             >
 386+ 64D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 387+ 64D9 E1                           pop     hl
 388+ 64DA 7D                           ld      a, l
 389+ 64DB CD A7 64                     call    Case_Upper
 390+ 64DE 6F                           ld      l, a
 391+ 64DF
 392+ 64DF                              psh1
 392+ 64DF E5          >                push    hl
 392+ 64E0 DD E9       >                jp      (ix)
 393+ 64E2
 394+ 64E2              //  ______________________________________________________________________
 395+ 64E2              //
 396+ 64E2              // (find)       addr voc -- addr 0 | cfa b 1
 397+ 64E2              // vocabulary search,
 398+ 64E2              // - voc is starting word's NFA
 399+ 64E2              // - addr is the string to be searched for
 400+ 64E2              // On success, it returns the CFA of found word, the first NFA byte
 401+ 64E2              // (which contains length and some flags) and a true flag.
 402+ 64E2              // On fail, a false flag  (no more: leaves addr unchanged)
 403+ 64E2                              New_Def C_FIND, "(FIND)", is_code, is_normal
 403+ 64E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 403+ 64E2             >
 403+ 64E2             >                // dummy db directives used to calculate length of namec
 403+ 64E2 28 46 49 4E >                db      "(FIND)"
 403+ 64E6 44 29       >
 403+ 64E8             >len_NFA         defl    $ - temp_NFA
 403+ 64E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 403+ 64E2             >
 403+ 64E2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 403+ 64E3 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 403+ 64E7 44 29       >
 403+ 64E9             >                org     $-1                 // alter last byte of Name just above to set
 403+ 64E8 A9          >                db      {b $} | END_BIT     // msb as name end
 403+ 64E9             >
 403+ 64E9 D1 64       >                dw      last_NFA            // Link to previous definition Name
 403+ 64EB             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 403+ 64EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 403+ 64EB ~           >
 403+ 64EB ~           >
 403+ 64EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 403+ 64EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 403+ 64EB             >
 403+ 64EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 404+ 64EB                                                              // de has dictionary pointer
 405+ 64EB D1                               pop     de
 406+ 64EC              Find_VocabularyLoop:
 407+ 64EC E1                               pop     hl                  // string pointer to search for
 408+ 64ED E5                               push    hl                  // keep it on stack too for the end.
 409+ 64EE 1A                               ld      a, (de)             // save NFA length byte
 410+ 64EF 08                               ex      af,af'              // for later use (!)
 411+ 64F0 1A                               ld      a, (de)             // reload NFA length byte
 412+ 64F1 AE                               xor     (hl)                // check if same length
 413+ 64F2 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 414+ 64F4                                  // word an text haven't the same length, skip to next vocabulary entry
 415+ 64F4 20 2C                            jr      nz, Find_DifferentLenght
 416+ 64F6
 417+ 64F6              Find_ThisWord:  // begin loop
 418+ 64F6 23                                   inc     hl
 419+ 64F7 13                                   inc     de
 420+ 64F8 1A                                   ld      a, (de)
 421+ 64F9                                      // case insensitive option - begin
 422+ 64F9 C5                                   push    bc
 423+ 64FA E6 80                                and     $80                 // split A in msb and the rest
 424+ 64FC 47                                   ld      b, a
 425+ 64FD 1A                                   ld      a, (de)
 426+ 64FE E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 427+ 6500 CD A6 64                             call    Case_Sensitive      // uppercase routine
 428+ 6503 4F                                   ld      c, a
 429+ 6504 7E                                   ld      a, (hl)
 430+ 6505 CD A6 64                             call    Case_Sensitive      // uppercase routine
 431+ 6508 A9                                   xor     c
 432+ 6509 A8                                   xor     b
 433+ 650A C1                                   pop     bc
 434+ 650B                                      // case insensitive option - end
 435+ 650B 87                                   add     a                   // ignore msb during compare
 436+ 650C 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 437+ 650E
 438+ 650E                                  // loop back until last byte msb is found set
 439+ 650E                                  // that bit marks the ending char of this word
 440+ 650E 30 E6                            jr      nc, Find_ThisWord
 441+ 6510
 442+ 6510                                  // match found !
 443+ 6510 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 444+ 6513 19                                   add     hl, de
 445+ 6514 E3                                   ex      (sp), hl            // CFA on stack and drop addr
 446+ 6515 08                                   ex      af, af'             // retrieve NFA byte (!)
 447+ 6516 5F                                   ld      e, a
 448+ 6517 16 00                                ld      d, 0
 449+ 6519
 450+ 6519
 451+ 6519 21 01 00                             ld      hl, 1
 452+ 651C                                      psh2
 452+ 651C D5          >                push    de
 452+ 651D E5          >                push    hl
 452+ 651E DD E9       >                jp      (ix)
 453+ 6520
 454+ 6520              Find_DidntMatch: // didn't match (*)
 455+ 6520 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 456+ 6522
 457+ 6522              Find_DifferentLenght:
 458+ 6522                              // consume chars until the end of the word
 459+ 6522                              // that is last byte msb is found set
 460+ 6522 13                               inc     de
 461+ 6523 1A                               ld      a, (de)
 462+ 6524 87                               add     a, a
 463+ 6525 30 FB                        jr      nc, Find_DifferentLenght
 464+ 6527
 465+ 6527              Find_WordEnd:   // word-end  found (**)
 466+ 6527                              // take LFA and use it
 467+ 6527 13                           inc     de
 468+ 6528 EB                           ex      de, hl
 469+ 6529 5E                           ld      e, (hl)
 470+ 652A 23                           inc     hl
 471+ 652B 56                           ld      d, (hl)
 472+ 652C 7A                           ld      a, d
 473+ 652D B3                           or      e
 474+ 652E
 475+ 652E                          // loop until end of vocabulary
 476+ 652E 20 BC                    jr      nz, Find_VocabularyLoop
 477+ 6530
 478+ 6530 E1                       pop     hl              // with this, it leaves addr unchanged
 479+ 6531 21 00 00                 ld      hl, FALSE_FLAG
 480+ 6534
 481+ 6534                          psh1
 481+ 6534 E5          >                push    hl
 481+ 6535 DD E9       >                jp      (ix)
 482+ 6537
 483+ 6537              //  ______________________________________________________________________
 484+ 6537              //
 485+ 6537              // enclose      a c -- a  n1 n2 n3
 486+ 6537              // starting from a, using delimiter c, determines the offsets:
 487+ 6537              //   n1   the first character non-delimiter
 488+ 6537              //   n2   the first delimiter after the text
 489+ 6537              //   n3   the first character non enclosed.
 490+ 6537              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 491+ 6537              // an uncoditional delimiter.
 492+ 6537              // Examples:
 493+ 6537              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 494+ 6537              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 495+ 6537              // iii:	c  c  'nul'          -- 2  3  2
 496+ 6537                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 496+ 6537             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 6537             >
 496+ 6537             >                // dummy db directives used to calculate length of namec
 496+ 6537 45 4E 43 4C >                db      "ENCLOSE"
 496+ 653B 4F 53 45    >
 496+ 653E             >len_NFA         defl    $ - temp_NFA
 496+ 653E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 6537             >
 496+ 6537 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 6538 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 496+ 653C 4F 53 45    >
 496+ 653F             >                org     $-1                 // alter last byte of Name just above to set
 496+ 653E C5          >                db      {b $} | END_BIT     // msb as name end
 496+ 653F             >
 496+ 653F E2 64       >                dw      last_NFA            // Link to previous definition Name
 496+ 6541             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 6541 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 496+ 6541 ~           >
 496+ 6541 ~           >
 496+ 6541             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 6541             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 6541             >
 496+ 6541             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 6541 D1                           pop     de                  //  e has the character
 498+ 6542 E1                           pop     hl                  // hl has the string address
 499+ 6543 E5                           push    hl
 500+ 6544 7B                           ld      a, e
 501+ 6545 11 FF FF                     ld      de, -1              // let's start from -1
 502+ 6548 2B                           dec     hl
 503+ 6549              Enclose_NonDelimiter:
 504+ 6549                              // find first non delimiter
 505+ 6549 23                               inc     hl
 506+ 654A 13                               inc     de
 507+ 654B BE                               cp      (hl)
 508+ 654C 28 FB                        jr      z, Enclose_NonDelimiter
 509+ 654E D5                           push    de
 510+ 654F
 511+ 654F C5                           push    bc                  // save Instruction Pointer
 512+ 6550
 513+ 6550 4F                           ld      c, a                // save char
 514+ 6551 7E                           ld      a, (hl)
 515+ 6552 A7                           and     a                   // stop if 0x00
 516+ 6553 20 07                        jr      nz, Enclose_NextChar
 517+ 6555
 518+ 6555                              /// case iii. no more character in string
 519+ 6555 C1                               pop     bc                  // restore Instruction Pointer
 520+ 6556 13                               inc     de
 521+ 6557 D5                               push    de
 522+ 6558 1B                               dec     de
 523+ 6559 D5                               push    de
 524+ 655A                                  next
 524+ 655A DD E9       >                jp      (ix)
 525+ 655C              Enclose_NextChar:
 526+ 655C 79                               ld      a, c
 527+ 655D 23                               inc     hl
 528+ 655E 13                               inc     de
 529+ 655F BE                               cp      (hl)
 530+ 6560 20 06                            jr      nz, Enclose_NonSeparator
 531+ 6562
 532+ 6562                                      // case i. first non enclosed
 533+ 6562 C1                                   pop     bc                  // restore Instruction Pointer
 534+ 6563 D5                                   push    de
 535+ 6564 13                                   inc     de
 536+ 6565 D5                                   push    de
 537+ 6566                                      next
 537+ 6566 DD E9       >                jp      (ix)
 538+ 6568              Enclose_NonSeparator:
 539+ 6568 7E                               ld      a, (hl)
 540+ 6569 A7                               and     a
 541+ 656A 20 F0                        jr      nz, Enclose_NextChar
 542+ 656C
 543+ 656C                              // case ii. separator & terminator
 544+ 656C C1                           pop     bc                  // restore Instruction Pointer
 545+ 656D D5                           push    de
 546+ 656E D5                           push    de
 547+ 656F                              next
 547+ 656F DD E9       >                jp      (ix)
 548+ 6571
 549+ 6571              //  ______________________________________________________________________
 550+ 6571              //
 551+ 6571              // (map)        a2 a1 n c1 -- c2
 552+ 6571              // translate character c1 using mapping string a2 and a2
 553+ 6571              // if c1 is not present within string a1 then
 554+ 6571              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 555+ 6571                              New_Def C_MAP, "(MAP)", is_code, is_normal
 555+ 6571             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ 6571             >
 555+ 6571             >                // dummy db directives used to calculate length of namec
 555+ 6571 28 4D 41 50 >                db      "(MAP)"
 555+ 6575 29          >
 555+ 6576             >len_NFA         defl    $ - temp_NFA
 555+ 6576             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ 6571             >
 555+ 6571 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ 6572 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 555+ 6576 29          >
 555+ 6577             >                org     $-1                 // alter last byte of Name just above to set
 555+ 6576 A9          >                db      {b $} | END_BIT     // msb as name end
 555+ 6577             >
 555+ 6577 37 65       >                dw      last_NFA            // Link to previous definition Name
 555+ 6579             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 6579 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 555+ 6579 ~           >
 555+ 6579 ~           >
 555+ 6579             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 6579             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 6579             >
 555+ 6579             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 6579 D9                           exx
 557+ 657A E1                           pop     hl
 558+ 657B 7D                           ld      a, l
 559+ 657C C1                           pop     bc
 560+ 657D E1                           pop     hl
 561+ 657E 50                           ld      d, b
 562+ 657F 59                           ld      e, c
 563+ 6580 ED B1                        cpir
 564+ 6582 E1                           pop     hl
 565+ 6583 20 05                        jr      nz, C_Map_Then
 565+ 6585
 566+ 6585 19                               add     hl, de
 567+ 6586 2B                               dec     hl
 568+ 6587 ED 42                            sbc     hl, bc
 569+ 6589 7E                               ld      a, (hl)
 570+ 658A              C_Map_Then:
 571+ 658A 6F                           ld      l, a
 572+ 658B 26 00                        ld      h, 0
 573+ 658D E5                           push    hl
 574+ 658E D9                           exx
 575+ 658F                              next
 575+ 658F DD E9       >                jp      (ix)
 576+ 6591
 577+ 6591              //  ______________________________________________________________________
 578+ 6591              //
 579+ 6591              // (compare)    a1 a2 n -- b
 580+ 6591              // this word performs a lexicographic compare of n bytes of text at address a1
 581+ 6591              // with n bytes of text at address a2. It returns numeric a value:
 582+ 6591              //  0 : if strings are equal
 583+ 6591              // +1 : if string at a1 greater than string at a2
 584+ 6591              // -1 : if string at a1 less than string at a2
 585+ 6591              // strings can be 256 bytes in length at most.
 586+ 6591                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 586+ 6591             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 6591             >
 586+ 6591             >                // dummy db directives used to calculate length of namec
 586+ 6591 28 43 4F 4D >                db      "(COMPARE)"
 586+ 6595 50 41 52 45 >
 586+ 6599 29          >
 586+ 659A             >len_NFA         defl    $ - temp_NFA
 586+ 659A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 6591             >
 586+ 6591 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 6592 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 586+ 6596 50 41 52 45 >
 586+ 659A 29          >
 586+ 659B             >                org     $-1                 // alter last byte of Name just above to set
 586+ 659A A9          >                db      {b $} | END_BIT     // msb as name end
 586+ 659B             >
 586+ 659B 71 65       >                dw      last_NFA            // Link to previous definition Name
 586+ 659D             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 659D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 586+ 659D ~           >
 586+ 659D ~           >
 586+ 659D             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 659D             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 659D             >
 586+ 659D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 659D D9                           exx
 588+ 659E E1                           pop     hl                  // Number of bytes
 589+ 659F 7D                           ld      a, l
 590+ 65A0 E1                           pop     hl                  // hl points string a2
 591+ 65A1 D1                           pop     de                  // hl points string a1
 592+ 65A2              //              push    bc                  // Instruction pointer on stack
 593+ 65A2 47                           ld      b, a
 594+ 65A3              C_Compare_Loop:
 595+ 65A3 7E                               ld      a, (hl)
 596+ 65A4 CD A6 64                         call    Case_Sensitive
 597+ 65A7 4F                               ld      c, a
 598+ 65A8 1A                               ld      a, (de)
 599+ 65A9 CD A6 64                         call    Case_Sensitive
 600+ 65AC B9                               cp      c
 601+ 65AD 13                               inc     de
 602+ 65AE 23                               inc     hl
 603+ 65AF 28 0E                            jr      z, C_Compare_Equal
 604+ 65B1 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 605+ 65B3 21 01 00                                 ld      hl, 1               // a1 gt a2
 606+ 65B6 18 03                                jr      C_Compare_Then      // Else
 607+ 65B8              C_Compare_NotLessThan:
 608+ 65B8 21 FF FF                                 ld      hl, -1              // a1 lt a2
 609+ 65BB              C_Compare_Then:                                 // Endif
 610+ 65BB              //                      pop     bc              // restore Instruction Pointer
 611+ 65BB E5                                   push    hl
 612+ 65BC D9                                   exx
 613+ 65BD
 614+ 65BD                                      next
 614+ 65BD DD E9       >                jp      (ix)
 615+ 65BF
 616+ 65BF              C_Compare_Equal:
 617+ 65BF 10 E2                        djnz    C_Compare_Loop
 618+ 65C1 21 00 00                     ld      hl, 0               // a1 eq a2
 619+ 65C4              //              pop     bc                  // restore Instruction Pointer
 620+ 65C4 E5                           push    hl
 621+ 65C5 D9                           exx
 622+ 65C6
 623+ 65C6                              next
 623+ 65C6 DD E9       >                jp      (ix)
 624+ 65C8
 625+ 65C8              //  ______________________________________________________________________
 626+ 65C8              //
 627+ 65C8              // emitc        c --
 628+ 65C8              // low level emit, calls ROM routine at #10 to send a character to
 629+ 65C8              // the the current channel (see SELECT to change stream-channel)
 630+ 65C8                              New_Def EMITC, "EMITC", is_code, is_normal
 630+ 65C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 630+ 65C8             >
 630+ 65C8             >                // dummy db directives used to calculate length of namec
 630+ 65C8 45 4D 49 54 >                db      "EMITC"
 630+ 65CC 43          >
 630+ 65CD             >len_NFA         defl    $ - temp_NFA
 630+ 65CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 630+ 65C8             >
 630+ 65C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 630+ 65C9 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 630+ 65CD 43          >
 630+ 65CE             >                org     $-1                 // alter last byte of Name just above to set
 630+ 65CD C3          >                db      {b $} | END_BIT     // msb as name end
 630+ 65CE             >
 630+ 65CE 91 65       >                dw      last_NFA            // Link to previous definition Name
 630+ 65D0             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 630+ 65D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 630+ 65D0 ~           >
 630+ 65D0 ~           >
 630+ 65D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 630+ 65D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 630+ 65D0             >
 630+ 65D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 631+ 65D0 E1                           pop     hl
 632+ 65D1 7D                           ld      a, l
 633+ 65D2              Emitc_Ptr:
 634+ 65D2 C5                           push    bc
 635+ 65D3 DD E5                        push    ix
 636+ 65D5 D7                           rst     $10
 637+ 65D6 DD E1                        pop     ix
 638+ 65D8 C1                           pop     bc
 639+ 65D9 3E FF                        ld      a, 255            // max possible
 640+ 65DB 32 8C 5C                     ld      (SCR_CT), a
 641+ 65DE
 642+ 65DE                              next
 642+ 65DE DD E9       >                jp      (ix)
 643+ 65E0
 644+ 65E0              Emitc_Vec:
 645+ 65E0 23 66                        dw      C_Emit_Printable  // comma
 646+ 65E2 29 66                        dw      C_Emit_Bel        // bel
 647+ 65E4 23 66                        dw      C_Emit_Printable  // bs
 648+ 65E6 3E 66                        dw      C_Emit_Tab        // tab
 649+ 65E8 23 66                        dw      C_Emit_Printable  // cr
 650+ 65EA 44 66                        dw      C_Emit_NL         // lf (unix newline)
 651+ 65EC 23 66                        dw      C_Emit_Printable  // blank
 652+ 65EE 23 66                        dw      C_Emit_Printable  // blank
 653+ 65F0
 654+ 65F0              Emit_Selector_Start:
 655+ 65F0 06                           db      $06                 // comma
 656+ 65F1 07                           db      $07                 // bel
 657+ 65F2 08                           db      $08                 // bs
 658+ 65F3 09                           db      $09                 // tab
 659+ 65F4 0D                           db      $0D                 // cr
 660+ 65F5 0A                           db      $0A                 // lf (unix newline)
 661+ 65F6 20                           db      $20
 662+ 65F7              Emit_Selector_End:
 663+ 65F7 20                           db      $20
 664+ 65F8
 665+ 65F8              //  ______________________________________________________________________
 666+ 65F8              //
 667+ 65F8              // (?emit)      c1 -- c2 | c1
 668+ 65F8              // decode a character to be sent via EMIT
 669+ 65F8              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 670+ 65F8              // the routine should resolve anything and convert the character anyway.
 671+ 65F8                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 671+ 65F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 671+ 65F8             >
 671+ 65F8             >                // dummy db directives used to calculate length of namec
 671+ 65F8 28 3F 45 4D >                db      "(?EMIT)"
 671+ 65FC 49 54 29    >
 671+ 65FF             >len_NFA         defl    $ - temp_NFA
 671+ 65FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 671+ 65F8             >
 671+ 65F8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 671+ 65F9 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 671+ 65FD 49 54 29    >
 671+ 6600             >                org     $-1                 // alter last byte of Name just above to set
 671+ 65FF A9          >                db      {b $} | END_BIT     // msb as name end
 671+ 6600             >
 671+ 6600 C8 65       >                dw      last_NFA            // Link to previous definition Name
 671+ 6602             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 671+ 6602 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 671+ 6602 ~           >
 671+ 6602 ~           >
 671+ 6602             >                endif           ; ok        // for other definitions it "points" the correct handler
 671+ 6602             >                // Use of "; ok" to suppress "warning[fwdref]"
 671+ 6602             >
 671+ 6602             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 672+ 6602 D1                           pop     de
 673+ 6603 7B                           ld      a, e                //  de has c1
 674+ 6604 E6 7F                        and     $7F                 // 7-bit ascii only
 675+ 6606 C5                           push    bc                  // save Instruction Pointer
 676+ 6607 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 677+ 660A 21 F7 65                     ld      hl, Emit_Selector_End
 678+ 660D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 679+ 660F 20 0B                        jr      nz, C_Emit_Not_Found
 680+ 6611                                  // Found then decode it
 681+ 6611 21 E0 65                         ld      hl, Emitc_Vec
 682+ 6614 09                               add     hl, bc
 683+ 6615 09                               add     hl, bc
 684+ 6616 5E                               ld      e, (hl)
 685+ 6617 23                               inc     hl
 686+ 6618 56                               ld      d, (hl)
 687+ 6619 EB                               ex      de, hl
 688+ 661A C1                               pop     bc                  // restore Instruction Pointer
 689+ 661B E9                               jp      (hl)                // one of the following labels
 690+ 661C              C_Emit_Not_Found:
 691+ 661C C1                           pop     bc                  // restore Instruction Pointer
 692+ 661D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 693+ 661F 30 02                        jr      nc, C_Emit_Printable
 694+ 6621 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 695+ 6623              C_Emit_Printable:
 696+ 6623 6F                           ld      l, a
 697+ 6624 26 00                        ld      h, 0
 698+ 6626
 699+ 6626                              psh1
 699+ 6626 E5          >                push    hl
 699+ 6627 DD E9       >                jp      (ix)
 700+ 6629
 701+ 6629              C_Emit_Bel:
 702+ 6629 C5                           push    bc                  // save Instruction Pointer
 703+ 662A 11 00 01                     ld      de, $0100
 704+ 662D 21 00 02                     ld      hl, $0200
 705+ 6630 DD E5                        push    ix                  // save Next Pointer
 706+ 6632 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 707+ 6635 DD E1                        pop     ix                  // restore Next Pointer
 708+ 6637 C1                           pop     bc                  // restore Instruction Pointer
 709+ 6638 21 00 00                     ld      hl, NUL_CHAR
 710+ 663B
 711+ 663B                              psh1
 711+ 663B E5          >                push    hl
 711+ 663C DD E9       >                jp      (ix)
 712+ 663E
 713+ 663E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 714+ 6641
 715+ 6641                              psh1
 715+ 6641 E5          >                push    hl
 715+ 6642 DD E9       >                jp      (ix)
 716+ 6644
 717+ 6644 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 718+ 6647
 719+ 6647                              psh1
 719+ 6647 E5          >                push    hl
 719+ 6648 DD E9       >                jp      (ix)
 720+ 664A
 721+ 664A              //  ______________________________________________________________________
 722+ 664A
 723+ 664A              Key_Table:
 724+ 664A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 725+ 664B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 726+ 664C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 727+ 664D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 728+ 664E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 729+ 664F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 730+ 6650 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 731+ 6651 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 732+ 6652 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 733+ 6653 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 734+ 6654 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 735+ 6655              Key_MapTo:
 736+ 6655 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 737+ 6656 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 738+ 6657 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 739+ 6658 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 740+ 6659 5D                           db      $5D                 //  6: SYMBOL+U : ]
 741+ 665A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 742+ 665B 7D                           db      $7D                 //  4: SYMBOL+G : }
 743+ 665C 7B                           db      $7B                 //  3: SYMBOL+F : {
 744+ 665D 5C                           db      $5C                 //  2: SYMBOl+D : //
 745+ 665E 7C                           db      $7C                 //  1: SYMBOL+S : |
 746+ 665F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 747+ 6660
 748+ 6660              //  ______________________________________________________________________
 749+ 6660              //
 750+ 6660              // key          -- c
 751+ 6660              // wait for a keypress
 752+ 6660              // This definition need Standard ROM Interrupt to be served
 753+ 6660
 754+ 6660                              New_Def KEY, "KEY", is_code, is_normal
 754+ 6660             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 754+ 6660             >
 754+ 6660             >                // dummy db directives used to calculate length of namec
 754+ 6660 4B 45 59    >                db      "KEY"
 754+ 6663             >len_NFA         defl    $ - temp_NFA
 754+ 6663             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 754+ 6660             >
 754+ 6660 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 754+ 6661 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 754+ 6664             >                org     $-1                 // alter last byte of Name just above to set
 754+ 6663 D9          >                db      {b $} | END_BIT     // msb as name end
 754+ 6664             >
 754+ 6664 F8 65       >                dw      last_NFA            // Link to previous definition Name
 754+ 6666             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 754+ 6666 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 754+ 6666 ~           >
 754+ 6666 ~           >
 754+ 6666             >                endif           ; ok        // for other definitions it "points" the correct handler
 754+ 6666             >                // Use of "; ok" to suppress "warning[fwdref]"
 754+ 6666             >
 754+ 6666             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 755+ 6666
 756+ 6666 C5                           push    bc                  // save Instruction Pointer
 757+ 6667 DD E5                        push    ix
 758+ 6669
 759+ 6669 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 760+ 666D 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 761+ 6670 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 762+ 6674
 763+ 6674              Key_Wait:
 764+ 6674 76                               halt
 765+ 6675 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 766+ 6677 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 767+ 667A
 768+ 667A                                  // software-flash: flips face every 320 ms
 769+ 667A 3E 10                            ld      a, $10              // Timing based
 770+ 667C FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 771+ 667F
 772+ 667F 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 773+ 6682 20 0C                            jr      nz, Key_Cursor
 774+ 6684 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 775+ 6687 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 776+ 668B 28 03                                jr      z, Key_Cursor
 777+ 668D 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 778+ 6690              Key_Cursor:
 779+ 6690 D7                               rst     $10
 780+ 6691 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 781+ 6693 D7                               rst     $10
 782+ 6694
 783+ 6694 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 784+ 6698 28 DA                        jr      z, Key_Wait
 785+ 669A
 786+ 669A 76                           halt    // this is to sync flashing cursor.
 787+ 669B
 788+ 669B 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 789+ 669D D7                           rst     $10
 790+ 669E 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 791+ 66A0 D7                           rst     $10
 792+ 66A1 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 793+ 66A4
 794+ 66A4                              // decode character from above table
 795+ 66A4 21 4A 66                     ld      hl, Key_Table
 796+ 66A7 01 0B 00                     ld      bc, $000B
 797+ 66AA ED B1                        cpir
 798+ 66AC 20 05                        jr      nz, Key_DontMap
 799+ 66AE 21 55 66                         ld      hl, Key_MapTo
 800+ 66B1 09                               add     hl, bc
 801+ 66B2 7E                               ld      a, (hl)
 802+ 66B3 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 803+ 66B5 20 09                        jr      nz, Key_NoCapsLock
 804+ 66B7 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 805+ 66BA 7E                               ld      a, (hl)
 806+ 66BB EE 08                            xor     $08
 807+ 66BD 77                               ld      (hl), a
 808+ 66BE 3E 00                            ld      a, NUL_CHAR
 809+ 66C0 6F           Key_NoCapsLock: ld      l, a
 810+ 66C1 26 00                        ld      h, 0                // Prepare TOS
 811+ 66C3
 812+ 66C3 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 813+ 66C6 1F                           rra
 814+ 66C7 1F                           rra
 815+ 66C8 1F                           rra
 816+ 66C9 F6 18                        or      $18                 // quick'n'dirty click
 817+ 66CB D3 FE                        out     ($fe), a
 818+ 66CD 06 00                        ld      b, 0
 819+ 66CF 10 FE                        djnz    $                   // wait loop
 820+ 66D1 EE 18                        xor     $18
 821+ 66D3 D3 FE                        out     ($fe), a
 822+ 66D5
 823+ 66D5 ED 7B 92 63                  ld      sp, (SP_Saved)
 824+ 66D9
 825+ 66D9 DD E1                        pop     ix
 826+ 66DB C1                           pop     bc                  // Restore Instruction Pointer
 827+ 66DC
 828+ 66DC                              psh1
 828+ 66DC E5          >                push    hl
 828+ 66DD DD E9       >                jp      (ix)
 829+ 66DF
 830+ 66DF              //  ______________________________________________________________________
 831+ 66DF              //
 832+ 66DF              // ?terminal    -- FALSE | TRUE
 833+ 66DF              // test for BREAK keypress
 834+ 66DF                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 834+ 66DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 834+ 66DF             >
 834+ 66DF             >                // dummy db directives used to calculate length of namec
 834+ 66DF 3F 54 45 52 >                db      "?TERMINAL"
 834+ 66E3 4D 49 4E 41 >
 834+ 66E7 4C          >
 834+ 66E8             >len_NFA         defl    $ - temp_NFA
 834+ 66E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 834+ 66DF             >
 834+ 66DF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 834+ 66E0 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 834+ 66E4 4D 49 4E 41 >
 834+ 66E8 4C          >
 834+ 66E9             >                org     $-1                 // alter last byte of Name just above to set
 834+ 66E8 CC          >                db      {b $} | END_BIT     // msb as name end
 834+ 66E9             >
 834+ 66E9 60 66       >                dw      last_NFA            // Link to previous definition Name
 834+ 66EB             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 834+ 66EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 834+ 66EB ~           >
 834+ 66EB ~           >
 834+ 66EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 834+ 66EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 834+ 66EB             >
 834+ 66EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 835+ 66EB 21 00 00                     ld      hl, 0
 836+ 66EE ED 73 92 63                  ld      (SP_Saved), sp
 837+ 66F2 31 61 63                     ld      sp, Cold_origin - 5
 838+ 66F5 CD 54 1F                     call    $1F54
 839+ 66F8 ED 7B 92 63                  ld      sp, (SP_Saved)
 840+ 66FC
 841+ 66FC 38 01                        jr      c, QTerminal_NoBreak
 842+ 66FE 2B                               dec     hl                  // quick TRUE_FLAG
 843+ 66FF              QTerminal_NoBreak:
 844+ 66FF
 845+ 66FF                              psh1
 845+ 66FF E5          >                push    hl
 845+ 6700 DD E9       >                jp      (ix)
 846+ 6702
 847+ 6702
 848+ 6702              //  ______________________________________________________________________
 849+ 6702              //
 850+ 6702              // ZX Spectrum Next - Low Level disk primitives.
 851+ 6702              // this include is "here" for backward compatibility
 852+ 6702
 853+ 6702                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6702              //  ______________________________________________________________________
   2++6702              //
   3++6702              //  next-opt.asm
   4++6702              //
   5++6702              //  ZX Spectrum Next - peculiar definitions
   6++6702              //  ______________________________________________________________________
   7++6702
   8++6702              //  ______________________________________________________________________
   9++6702              //
  10++6702              // f_seek       d u -- f
  11++6702              // Seek to position d in file-handle u.
  12++6702              // Return a false-flag 0 on success, True flag on error
  13++6702                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6702             >
  13++6702             >                // dummy db directives used to calculate length of namec
  13++6702 46 5F 53 45 >                db      "F_SEEK"
  13++6706 45 4B       >
  13++6708             >len_NFA         defl    $ - temp_NFA
  13++6708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6702             >
  13++6702 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6703 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6707 45 4B       >
  13++6709             >                org     $-1                 // alter last byte of Name just above to set
  13++6708 CB          >                db      {b $} | END_BIT     // msb as name end
  13++6709             >
  13++6709 DF 66       >                dw      last_NFA            // Link to previous definition Name
  13++670B             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++670B ~           >
  13++670B ~           >
  13++670B             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++670B             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++670B             >
  13++670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++670B E1                           pop     hl                  // file-handle
  15++670C 7D                           ld      a, l                // file-handle
  16++670D 60                           ld      h, b                // save Intruction Pointer
  17++670E 69                           ld      l, c
  18++670F C1                           pop     bc                  // bc has high-word of d
  19++6710 D1                           pop     de
  20++6711 DD E5                        push    ix
  21++6713 E5                           push    hl                  // save Instruction Pointer
  22++6714 DD 21 00 00                  ld      ix, 0
  23++6718 CF                           rst     $08
  24++6719 9F                           db      $9F
  25++671A              F_Seek_Exit:
  26++671A C1                           pop     bc                  // restore Instruction Pointer
  27++671B DD E1                        pop     ix
  28++671D ED 62                        sbc     hl, hl              // to get 0 or -1
  29++671F
  30++671F                              psh1
  30++671F E5          >                push    hl
  30++6720 DD E9       >                jp      (ix)
  31++6722
  32++6722              //  ______________________________________________________________________
  33++6722              //
  34++6722              // f_close      u -- f
  35++6722              // Close file-handle u.
  36++6722              // Return 0 on success, True flag on error
  37++6722
  38++6722                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6722             >
  38++6722             >                // dummy db directives used to calculate length of namec
  38++6722 46 5F 43 4C >                db      "F_CLOSE"
  38++6726 4F 53 45    >
  38++6729             >len_NFA         defl    $ - temp_NFA
  38++6729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6722             >
  38++6722 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6723 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++6727 4F 53 45    >
  38++672A             >                org     $-1                 // alter last byte of Name just above to set
  38++6729 C5          >                db      {b $} | END_BIT     // msb as name end
  38++672A             >
  38++672A 02 67       >                dw      last_NFA            // Link to previous definition Name
  38++672C             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++672C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++672C ~           >
  38++672C ~           >
  38++672C             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++672C             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++672C             >
  38++672C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++672C
  40++672C E1                           pop     hl
  41++672D 7D                           ld      a, l                // file-handle
  42++672E DD E5                        push    ix
  43++6730 C5                           push    bc                  // Save Instruction pointer
  44++6731 CF                           rst     $08
  45++6732 9B                           db      $9B
  46++6733 18 E5                        jr      F_Seek_Exit
  47++6735              //              pop     bc
  48++6735              //              pop     ix
  49++6735              //              sbc     hl, hl
  50++6735              //              psh1
  51++6735
  52++6735              //  ______________________________________________________________________
  53++6735              //
  54++6735              // f_sync      u -- f
  55++6735              // Close file-handle u.
  56++6735              // Return 0 on success, True flag on error
  57++6735
  58++6735                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6735             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6735             >
  58++6735             >                // dummy db directives used to calculate length of namec
  58++6735 46 5F 53 59 >                db      "F_SYNC"
  58++6739 4E 43       >
  58++673B             >len_NFA         defl    $ - temp_NFA
  58++673B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6735             >
  58++6735 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6736 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++673A 4E 43       >
  58++673C             >                org     $-1                 // alter last byte of Name just above to set
  58++673B C3          >                db      {b $} | END_BIT     // msb as name end
  58++673C             >
  58++673C 22 67       >                dw      last_NFA            // Link to previous definition Name
  58++673E             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++673E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++673E ~           >
  58++673E ~           >
  58++673E             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++673E             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++673E             >
  58++673E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++673E E1                           pop     hl
  60++673F 7D                           ld      a, l                // file-handle
  61++6740 DD E5                        push    ix
  62++6742 C5                           push    bc
  63++6743 CF                           rst     $08
  64++6744 9C                           db      $9C
  65++6745 18 D3                        jr      F_Seek_Exit
  66++6747              //              pop     bc
  67++6747              //              pop     ix
  68++6747              //              sbc     hl, hl
  69++6747              //              psh1
  70++6747
  71++6747              //  ______________________________________________________________________
  72++6747              //
  73++6747              // f_fgetpos    u -- d f
  74++6747              // Seek to position d in file-handle u.
  75++6747              // Return a false-flag 0 on success, True flag on error
  76++6747                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++6747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++6747             >
  76++6747             >                // dummy db directives used to calculate length of namec
  76++6747 46 5F 46 47 >                db      "F_FGETPOS"
  76++674B 45 54 50 4F >
  76++674F 53          >
  76++6750             >len_NFA         defl    $ - temp_NFA
  76++6750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++6747             >
  76++6747 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++6748 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++674C 45 54 50 4F >
  76++6750 53          >
  76++6751             >                org     $-1                 // alter last byte of Name just above to set
  76++6750 D3          >                db      {b $} | END_BIT     // msb as name end
  76++6751             >
  76++6751 35 67       >                dw      last_NFA            // Link to previous definition Name
  76++6753             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++6753 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++6753 ~           >
  76++6753 ~           >
  76++6753             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++6753             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++6753             >
  76++6753             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++6753 E1                           pop     hl
  78++6754 7D                           ld      a, l                // file-handle
  79++6755 DD E5                        push    ix
  80++6757 C5                           push    bc
  81++6758 CF                           rst     $08
  82++6759 A0                           db      $A0
  83++675A E1                           pop     hl                  // restore Instruction Pointer
  84++675B DD E1                        pop     ix
  85++675D D5                           push    de
  86++675E C5                           push    bc
  87++675F 44                           ld      b, h                // restore Instruction Pointer
  88++6760 4D                           ld      c, l
  89++6761 ED 62                        sbc     hl, hl
  90++6763
  91++6763                              psh1
  91++6763 E5          >                push    hl
  91++6764 DD E9       >                jp      (ix)
  92++6766
  93++6766              //  ______________________________________________________________________
  94++6766              //
  95++6766              // f_read       a b u -- n f
  96++6766              // Read b bytes from file-handle u to address a
  97++6766              // Return the actual number n of bytes read
  98++6766              // Return 0 on success, True flag on error
  99++6766                              New_Def F_READ, "F_READ", is_code, is_normal
  99++6766             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++6766             >
  99++6766             >                // dummy db directives used to calculate length of namec
  99++6766 46 5F 52 45 >                db      "F_READ"
  99++676A 41 44       >
  99++676C             >len_NFA         defl    $ - temp_NFA
  99++676C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++6766             >
  99++6766 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++6767 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++676B 41 44       >
  99++676D             >                org     $-1                 // alter last byte of Name just above to set
  99++676C C4          >                db      {b $} | END_BIT     // msb as name end
  99++676D             >
  99++676D 47 67       >                dw      last_NFA            // Link to previous definition Name
  99++676F             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++676F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++676F ~           >
  99++676F ~           >
  99++676F             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++676F             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++676F             >
  99++676F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++676F
 101++676F 50                           ld      d, b
 102++6770 59                           ld      e, c
 103++6771 E1                           pop     hl
 104++6772 7D                           ld      a, l                // file-handle
 105++6773 C1                           pop     bc                  // bc has bytes to read
 106++6774 DD E3                        ex      (sp), ix            // ix has address
 107++6776 D5                           push    de                  // Save Instruction pointer
 108++6777 CF                           rst     $08
 109++6778 9D                           db      $9D
 110++6779              F_Read_Exit:
 111++6779 C1                           pop     bc                  // Restore Instruction pointer
 112++677A DD E1                        pop     ix                  // Restore ix
 113++677C D5                           push    de                  // bytes written
 114++677D ED 62                        sbc     hl, hl
 115++677F
 116++677F                              psh1
 116++677F E5          >                push    hl
 116++6780 DD E9       >                jp      (ix)
 117++6782
 118++6782              //  ______________________________________________________________________
 119++6782              //
 120++6782              // f_write      a b u -- n f
 121++6782              // Write bytes currently stored at address a to file-handle u.
 122++6782              // Return the actual n bytes written and 0 on success, True flag on error.
 123++6782                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++6782             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++6782             >
 123++6782             >                // dummy db directives used to calculate length of namec
 123++6782 46 5F 57 52 >                db      "F_WRITE"
 123++6786 49 54 45    >
 123++6789             >len_NFA         defl    $ - temp_NFA
 123++6789             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++6782             >
 123++6782 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++6783 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++6787 49 54 45    >
 123++678A             >                org     $-1                 // alter last byte of Name just above to set
 123++6789 C5          >                db      {b $} | END_BIT     // msb as name end
 123++678A             >
 123++678A 66 67       >                dw      last_NFA            // Link to previous definition Name
 123++678C             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++678C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++678C ~           >
 123++678C ~           >
 123++678C             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++678C             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++678C             >
 123++678C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++678C
 125++678C 50                           ld      d, b
 126++678D 59                           ld      e, c
 127++678E E1                           pop     hl
 128++678F 7D                           ld      a, l                // file-handle
 129++6790 C1                           pop     bc                  // bc has bytes to read
 130++6791 DD E3                        ex      (sp), ix            // ix has address
 131++6793 D5                           push    de                  // Save Instruction pointer
 132++6794 CF                           rst     $08
 133++6795 9E                           db      $9E
 134++6796 18 E1                        jr F_Read_Exit
 135++6798              //              pop     bc                  // Restore Instruction pointer
 136++6798              //              pop     ix                  // Restore ix
 137++6798              //              push    de                  // bytes written
 138++6798              //              sbc     hl, hl
 139++6798              //
 140++6798              //              psh1
 141++6798
 142++6798              //  ______________________________________________________________________
 143++6798              //
 144++6798              // f_open       a1 a2 b -- u f
 145++6798              // open a file
 146++6798              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++6798              // a2 is address to an 8-byte header data used in some cases.
 148++6798              // b is access mode-byte, that is a combination of:
 149++6798              // any/all of:
 150++6798              //   esx_mode_read          $01 request read access
 151++6798              //   esx_mode_write         $02 request write access
 152++6798              //   esx_mode_use_header    $40 read/write +3DOS header
 153++6798              // plus one of:
 154++6798              //   esx_mode_open_exist    $00 only open existing file
 155++6798              //   esx_mode_open_creat    $08 open existing or create file
 156++6798              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++6798              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++6798              // Return file-handle u and 0 on success, True flag on error
 159++6798                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++6798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++6798             >
 159++6798             >                // dummy db directives used to calculate length of namec
 159++6798 46 5F 4F 50 >                db      "F_OPEN"
 159++679C 45 4E       >
 159++679E             >len_NFA         defl    $ - temp_NFA
 159++679E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++6798             >
 159++6798 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++6799 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++679D 45 4E       >
 159++679F             >                org     $-1                 // alter last byte of Name just above to set
 159++679E CE          >                db      {b $} | END_BIT     // msb as name end
 159++679F             >
 159++679F 82 67       >                dw      last_NFA            // Link to previous definition Name
 159++67A1             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++67A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++67A1 ~           >
 159++67A1 ~           >
 159++67A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++67A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++67A1             >
 159++67A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++67A1 60                           ld      h, b                // Save Instruction pointer
 161++67A2 69                           ld      l, c
 162++67A3 C1                           pop     bc                  // file-mode
 163++67A4 41                           ld      b, c                // file-mode
 164++67A5 D1                           pop     de                  // 8-bytes buffer if any
 165++67A6 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++67A8 E5                           push    hl                  // Save Instruction pointer
 167++67A9 3E 2A                        ld      a, "*"
 168++67AB CF                           rst     $08
 169++67AC 9A                           db      $9A
 170++67AD              F_Open_Exit:
 171++67AD C1                           pop     bc
 172++67AE DD E1                        pop     ix
 173++67B0 ED 62                        sbc     hl, hl
 174++67B2 5F                           ld      e, a
 175++67B3 16 00                        ld      d, 0
 176++67B5
 177++67B5
 178++67B5                              psh2
 178++67B5 D5          >                push    de
 178++67B6 E5          >                push    hl
 178++67B7 DD E9       >                jp      (ix)
 179++67B9
 180++67B9              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++67B9              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++67B9              //   \ DROP
 183++67B9              //   \ F_CLOSE
 184++67B9
 185++67B9
 186++67B9              //  ______________________________________________________________________
 187++67B9              //
 188++67B9              // f_opendir    a1 a2 b -- u f
 189++67B9              // open a file
 190++67B9                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++67B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++67B9             >
 190++67B9             >                // dummy db directives used to calculate length of namec
 190++67B9 46 5F 4F 50 >                db      "F_OPENDIR"
 190++67BD 45 4E 44 49 >
 190++67C1 52          >
 190++67C2             >len_NFA         defl    $ - temp_NFA
 190++67C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++67B9             >
 190++67B9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++67BA 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++67BE 45 4E 44 49 >
 190++67C2 52          >
 190++67C3             >                org     $-1                 // alter last byte of Name just above to set
 190++67C2 D2          >                db      {b $} | END_BIT     // msb as name end
 190++67C3             >
 190++67C3 98 67       >                dw      last_NFA            // Link to previous definition Name
 190++67C5             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++67C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++67C5 ~           >
 190++67C5 ~           >
 190++67C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++67C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++67C5             >
 190++67C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++67C5 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++67C7 C5                           push    bc                  // Save Instruction pointer
 193++67C8 06 10                        ld      b, $10              // file-mode
 194++67CA 3E 43                        ld      a, "C"
 195++67CC CF                           rst     $08
 196++67CD A3                           db      $A3
 197++67CE 18 DD                        jr      F_Open_Exit
 198++67D0
 199++67D0
 200++67D0              //  ______________________________________________________________________
 201++67D0              //
 202++67D0              // f_readdir    a1 a2 b -- u f
 203++67D0              // open a file
 204++67D0                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++67D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++67D0             >
 204++67D0             >                // dummy db directives used to calculate length of namec
 204++67D0 46 5F 52 45 >                db      "F_READDIR"
 204++67D4 41 44 44 49 >
 204++67D8 52          >
 204++67D9             >len_NFA         defl    $ - temp_NFA
 204++67D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++67D0             >
 204++67D0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++67D1 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++67D5 41 44 44 49 >
 204++67D9 52          >
 204++67DA             >                org     $-1                 // alter last byte of Name just above to set
 204++67D9 D2          >                db      {b $} | END_BIT     // msb as name end
 204++67DA             >
 204++67DA B9 67       >                dw      last_NFA            // Link to previous definition Name
 204++67DC             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++67DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++67DC ~           >
 204++67DC ~           >
 204++67DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++67DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++67DC             >
 204++67DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++67DC E1                           pop     hl
 206++67DD 7D                           ld      a, l
 207++67DE D1                           pop     de
 208++67DF DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++67E1 C5                           push    bc                  // Save Instruction pointer
 210++67E2 CF                           rst     $08
 211++67E3 A4                           db      $A4
 212++67E4 18 C7                        jr      F_Open_Exit
 213++67E6
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 854+ 67E6
 855+ 67E6
 856+ 67E6              //  ______________________________________________________________________
 857+ 67E6              //
 858+ 67E6              // cr           --
 859+ 67E6              // send a CR via EMITC
 860+ 67E6                              New_Def CR, "CR", is_code, is_normal
 860+ 67E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 67E6             >
 860+ 67E6             >                // dummy db directives used to calculate length of namec
 860+ 67E6 43 52       >                db      "CR"
 860+ 67E8             >len_NFA         defl    $ - temp_NFA
 860+ 67E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 67E6             >
 860+ 67E6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 67E7 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 860+ 67E9             >                org     $-1                 // alter last byte of Name just above to set
 860+ 67E8 D2          >                db      {b $} | END_BIT     // msb as name end
 860+ 67E9             >
 860+ 67E9 D0 67       >                dw      last_NFA            // Link to previous definition Name
 860+ 67EB             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 67EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
 860+ 67EB ~           >
 860+ 67EB ~           >
 860+ 67EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 67EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 67EB             >
 860+ 67EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 67EB
 862+ 67EB 3E 0D                        ld      a, CR_CHAR
 863+ 67ED C3 D2 65                     jp      Emitc_Ptr
 864+ 67F0
 865+ 67F0              //  ______________________________________________________________________
 866+ 67F0              //
 867+ 67F0              // cmove    a1 a2 u --
 868+ 67F0              // If u > 0, moves memory content starting at address a1 for n bytes long
 869+ 67F0              // storing then starting at address addr2.
 870+ 67F0              // The content of a1 is moved first. See CMOVE> also.
 871+ 67F0                              New_Def CMOVE, "CMOVE", is_code, is_normal
 871+ 67F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 67F0             >
 871+ 67F0             >                // dummy db directives used to calculate length of namec
 871+ 67F0 43 4D 4F 56 >                db      "CMOVE"
 871+ 67F4 45          >
 871+ 67F5             >len_NFA         defl    $ - temp_NFA
 871+ 67F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 67F0             >
 871+ 67F0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 67F1 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 871+ 67F5 45          >
 871+ 67F6             >                org     $-1                 // alter last byte of Name just above to set
 871+ 67F5 C5          >                db      {b $} | END_BIT     // msb as name end
 871+ 67F6             >
 871+ 67F6 E6 67       >                dw      last_NFA            // Link to previous definition Name
 871+ 67F8             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 67F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 871+ 67F8 ~           >
 871+ 67F8 ~           >
 871+ 67F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 67F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 67F8             >
 871+ 67F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 67F8 D9                           exx
 873+ 67F9
 874+ 67F9 C1                           pop     bc                  // bc has counter
 875+ 67FA D1                           pop     de                  // de now has dest
 876+ 67FB E1                           pop     hl                 // hl has source, save Instruction Pointer
 877+ 67FC 78                           ld      a, b
 878+ 67FD B1                           or      c
 879+ 67FE 28 02                        jr      z, Cmove_NoMove
 880+ 6800 ED B0                            ldir
 881+ 6802              Cmove_NoMove:
 882+ 6802 D9                           exx
 883+ 6803
 884+ 6803                              next
 884+ 6803 DD E9       >                jp      (ix)
 885+ 6805
 886+ 6805              //  ______________________________________________________________________
 887+ 6805              //
 888+ 6805              // cmove>    a1 a2 u --
 889+ 6805              // If u > 0, moves memory content starting at address a1 for n bytes long
 890+ 6805              // storing then starting at address addr2.
 891+ 6805              // The content of a1 is moved last. See cmove.
 892+ 6805                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 892+ 6805             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 892+ 6805             >
 892+ 6805             >                // dummy db directives used to calculate length of namec
 892+ 6805 43 4D 4F 56 >                db      "CMOVE>"
 892+ 6809 45 3E       >
 892+ 680B             >len_NFA         defl    $ - temp_NFA
 892+ 680B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 892+ 6805             >
 892+ 6805 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 892+ 6806 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 892+ 680A 45 3E       >
 892+ 680C             >                org     $-1                 // alter last byte of Name just above to set
 892+ 680B BE          >                db      {b $} | END_BIT     // msb as name end
 892+ 680C             >
 892+ 680C F0 67       >                dw      last_NFA            // Link to previous definition Name
 892+ 680E             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 892+ 680E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 892+ 680E ~           >
 892+ 680E ~           >
 892+ 680E             >                endif           ; ok        // for other definitions it "points" the correct handler
 892+ 680E             >                // Use of "; ok" to suppress "warning[fwdref]"
 892+ 680E             >
 892+ 680E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 893+ 680E D9                           exx
 894+ 680F
 895+ 680F C1                           pop     bc                  // bc has counter
 896+ 6810 D1                           pop     de                  // de has dest
 897+ 6811 E1                           pop     hl                  // hl has source, save Instruction Pointer
 898+ 6812 78                           ld      a, b
 899+ 6813 B1                           or      c
 900+ 6814 28 08                        jr      z, CmoveV_NoMove
 901+ 6816 EB                               ex      de, hl              // compute address to
 902+ 6817 09                               add     hl, bc              // operate backward
 903+ 6818 2B                               dec     hl
 904+ 6819 EB                               ex      de, hl
 905+ 681A 09                               add     hl, bc
 906+ 681B 2B                               dec     hl
 907+ 681C ED B8                            lddr                        // backward
 908+ 681E              CmoveV_NoMove:
 909+ 681E D9                           exx
 910+ 681F
 911+ 681F                              next
 911+ 681F DD E9       >                jp      (ix)
 912+ 6821
 913+ 6821              //  ______________________________________________________________________
 914+ 6821              //
 915+ 6821              // um*      u1 u2 -- ud
 916+ 6821              // Unsigned multiplication
 917+ 6821              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 918+ 6821              // On the stack a double number is treated as two single numbers
 919+ 6821              // where DE is on the top of the stack and HL is the second from top,
 920+ 6821              // Instead, in 2VARIABLE a double number is stored as EDLH.
 921+ 6821              // this definition could use "MUL" Z80N new op-code.
 922+ 6821                              New_Def UM_MUL, "UM*", is_code, is_normal
 922+ 6821             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ 6821             >
 922+ 6821             >                // dummy db directives used to calculate length of namec
 922+ 6821 55 4D 2A    >                db      "UM*"
 922+ 6824             >len_NFA         defl    $ - temp_NFA
 922+ 6824             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ 6821             >
 922+ 6821 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ 6822 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 922+ 6825             >                org     $-1                 // alter last byte of Name just above to set
 922+ 6824 AA          >                db      {b $} | END_BIT     // msb as name end
 922+ 6825             >
 922+ 6825 05 68       >                dw      last_NFA            // Link to previous definition Name
 922+ 6827             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 6827 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 922+ 6827 ~           >
 922+ 6827 ~           >
 922+ 6827             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 6827             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 6827             >
 922+ 6827             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 6827 D1                           pop     de                    // de has u2 operand
 924+ 6828 E1                           pop     hl                    // hl has u1 operand
 925+ 6829 C5                           push    bc                    // Save Instruction Pointer
 926+ 682A 45                           ld      b, l
 927+ 682B 4B                           ld      c, e
 928+ 682C 5D                           ld      e, l
 929+ 682D 6A                           ld      l, d
 930+ 682E E5                           push    hl
 931+ 682F 69                           ld      l, c
 932+ 6830 ED 30                        mul
 933+ 6832 EB                           ex      de, hl
 934+ 6833 ED 30                        mul
 935+ 6835 AF                           xor     a
 936+ 6836 19                           add     hl, de
 937+ 6837 8F                           adc     a
 938+ 6838 59                           ld      e, c
 939+ 6839 50                           ld      d, b
 940+ 683A ED 30                        mul
 941+ 683C 47                           ld      b, a
 942+ 683D 4C                           ld      c, h
 943+ 683E 7A                           ld      a, d
 944+ 683F 85                           add     l
 945+ 6840 67                           ld      h, a
 946+ 6841 6B                           ld      l, e
 947+ 6842 D1                           pop     de
 948+ 6843 ED 30                        mul
 949+ 6845 EB                           ex      de, hl
 950+ 6846 ED 4A                        adc     hl, bc
 951+ 6848 C1                           pop     bc
 952+ 6849 D5                           push    de
 953+ 684A E5                           push    hl
 954+ 684B                              next
 954+ 684B DD E9       >                jp      (ix)
 955+ 684D
 956+ 684D              //  ______________________________________________________________________
 957+ 684D              //
 958+ 684D              // um/mod      ud u1 -- q r
 959+ 684D              // divides ud into u1 giving quotient q and remainder r
 960+ 684D              // algorithm takes 16 bit at a time starting from msb
 961+ 684D              // DE grows from lsb upward with quotient result
 962+ 684D              // HL keeps the remainder at each stage of division
 963+ 684D              // each loop 'lowers' the next binary digit to form the current dividend
 964+ 684D                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
 964+ 684D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 964+ 684D             >
 964+ 684D             >                // dummy db directives used to calculate length of namec
 964+ 684D 55 4D 2F 4D >                db      "UM/MOD"
 964+ 6851 4F 44       >
 964+ 6853             >len_NFA         defl    $ - temp_NFA
 964+ 6853             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 964+ 684D             >
 964+ 684D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 964+ 684E 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
 964+ 6852 4F 44       >
 964+ 6854             >                org     $-1                 // alter last byte of Name just above to set
 964+ 6853 C4          >                db      {b $} | END_BIT     // msb as name end
 964+ 6854             >
 964+ 6854 21 68       >                dw      last_NFA            // Link to previous definition Name
 964+ 6856             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 964+ 6856 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 964+ 6856 ~           >
 964+ 6856 ~           >
 964+ 6856             >                endif           ; ok        // for other definitions it "points" the correct handler
 964+ 6856             >                // Use of "; ok" to suppress "warning[fwdref]"
 964+ 6856             >
 964+ 6856             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 965+ 6856 60                           ld      h, b
 966+ 6857 69                           ld      l, c                    // Save Instruction Pointer
 967+ 6858
 968+ 6858 C1                           pop     bc                      // divisor
 969+ 6859
 970+ 6859 D1                           pop     de                      // < high part
 971+ 685A E3                           ex      (sp), hl                // < low part and > save bc
 972+ 685B EB                           ex      de, hl                  //
 973+ 685C 7D                           ld      a, l                    // check without changing arguments
 974+ 685D 91                           sub     c                       // if divisor is greater than high part
 975+ 685E 7C                           ld      a, h                    // so quotient will be in range
 976+ 685F 98                           sbc     a, b
 977+ 6860 30 23                        jr      nc, Um_DivMod_OutOfRange
 978+ 6862 3E 10                            ld      a, 16
 979+ 6864              Um_DivMod_Loop:
 980+ 6864 A7                                   and     a
 981+ 6865 CB 13                                rl      e
 982+ 6867 CB 12                                rl      d
 983+ 6869 CB 15                                rl      l
 984+ 686B CB 14                                rl      h
 985+ 686D 30 05                                jr      nc, Um_DivMod_Carry
 986+ 686F A7                                       and     a
 987+ 6870 ED 42                                    sbc     hl, bc
 988+ 6872 18 07                                jr      Um_DivMod_Endif    // else
 989+ 6874              Um_DivMod_Carry:
 990+ 6874 A7                                       and     a
 991+ 6875 ED 42                                    sbc     hl, bc
 992+ 6877 30 02                                    jr      nc, Um_DivMod_Endif
 993+ 6879 09                                           add     hl, bc
 994+ 687A 1B                                           dec     de
 995+ 687B              Um_DivMod_Endif:                                   // endif
 996+ 687B 13                                   inc     de
 997+ 687C 3D                                   dec     a
 998+ 687D 20 E5                            jr      nz, Um_DivMod_Loop
 999+ 687F EB                               ex      de, hl
1000+ 6880              Um_DivMod_Bailout:
1001+ 6880 C1                               pop     bc                  // restore Instruction Pointer
1002+ 6881 D5                               push    de                  // de := remanider
1003+ 6882 E5                               push    hl                  // hl := quotient
1004+ 6883                                  next
1004+ 6883 DD E9       >                jp      (ix)
1005+ 6885
1006+ 6885              Um_DivMod_OutOfRange:
1007+ 6885 21 FF FF                     ld      hl, -1
1008+ 6888 54                           ld      d, h
1009+ 6889 5D                           ld      e, l
1010+ 688A 18 F4                        jr      Um_DivMod_Bailout
1011+ 688C
1012+ 688C              //  ______________________________________________________________________
1013+ 688C              //
1014+ 688C              // and          n1 n2 -- n3
1015+ 688C              // bit logical AND. Returns n3 as n1 & n2
1016+ 688C                              New_Def AND_OP, "AND", is_code, is_normal
1016+ 688C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 688C             >
1016+ 688C             >                // dummy db directives used to calculate length of namec
1016+ 688C 41 4E 44    >                db      "AND"
1016+ 688F             >len_NFA         defl    $ - temp_NFA
1016+ 688F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 688C             >
1016+ 688C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 688D 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1016+ 6890             >                org     $-1                 // alter last byte of Name just above to set
1016+ 688F C4          >                db      {b $} | END_BIT     // msb as name end
1016+ 6890             >
1016+ 6890 4D 68       >                dw      last_NFA            // Link to previous definition Name
1016+ 6892             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 6892 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1016+ 6892 ~           >
1016+ 6892 ~           >
1016+ 6892             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 6892             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 6892             >
1016+ 6892             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 6892 D1                           pop     de
1018+ 6893 E1                           pop     hl
1019+ 6894 7B                           ld      a, e
1020+ 6895 A5                           and     l
1021+ 6896 6F                           ld      l, a
1022+ 6897 7A                           ld      a, d
1023+ 6898 A4                           and     h
1024+ 6899 67                           ld      h, a
1025+ 689A
1026+ 689A                              psh1
1026+ 689A E5          >                push    hl
1026+ 689B DD E9       >                jp      (ix)
1027+ 689D
1028+ 689D              //  ______________________________________________________________________
1029+ 689D              //
1030+ 689D              // or           n1 n2 -- n3
1031+ 689D              // bit logical OR. Returns n3 as n1 | n2
1032+ 689D                              New_Def OR_OP, "OR", is_code, is_normal
1032+ 689D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ 689D             >
1032+ 689D             >                // dummy db directives used to calculate length of namec
1032+ 689D 4F 52       >                db      "OR"
1032+ 689F             >len_NFA         defl    $ - temp_NFA
1032+ 689F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ 689D             >
1032+ 689D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ 689E 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1032+ 68A0             >                org     $-1                 // alter last byte of Name just above to set
1032+ 689F D2          >                db      {b $} | END_BIT     // msb as name end
1032+ 68A0             >
1032+ 68A0 8C 68       >                dw      last_NFA            // Link to previous definition Name
1032+ 68A2             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 68A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1032+ 68A2 ~           >
1032+ 68A2 ~           >
1032+ 68A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 68A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 68A2             >
1032+ 68A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 68A2 D1                           pop     de
1034+ 68A3 E1                           pop     hl
1035+ 68A4 7B                           ld      a, e
1036+ 68A5 B5                           or      l
1037+ 68A6 6F                           ld      l, a
1038+ 68A7 7A                           ld      a, d
1039+ 68A8 B4                           or      h
1040+ 68A9 67                           ld      h, a
1041+ 68AA
1042+ 68AA                              psh1
1042+ 68AA E5          >                push    hl
1042+ 68AB DD E9       >                jp      (ix)
1043+ 68AD
1044+ 68AD              //  ______________________________________________________________________
1045+ 68AD              //
1046+ 68AD              // xor          n1 n2 -- n3
1047+ 68AD              // bit logical OR. Returns n3 as n1 ^ n2
1048+ 68AD                              New_Def XOR_OP, "XOR", is_code, is_normal
1048+ 68AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1048+ 68AD             >
1048+ 68AD             >                // dummy db directives used to calculate length of namec
1048+ 68AD 58 4F 52    >                db      "XOR"
1048+ 68B0             >len_NFA         defl    $ - temp_NFA
1048+ 68B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1048+ 68AD             >
1048+ 68AD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1048+ 68AE 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1048+ 68B1             >                org     $-1                 // alter last byte of Name just above to set
1048+ 68B0 D2          >                db      {b $} | END_BIT     // msb as name end
1048+ 68B1             >
1048+ 68B1 9D 68       >                dw      last_NFA            // Link to previous definition Name
1048+ 68B3             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1048+ 68B3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1048+ 68B3 ~           >
1048+ 68B3 ~           >
1048+ 68B3             >                endif           ; ok        // for other definitions it "points" the correct handler
1048+ 68B3             >                // Use of "; ok" to suppress "warning[fwdref]"
1048+ 68B3             >
1048+ 68B3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1049+ 68B3 D1                           pop     de
1050+ 68B4 E1                           pop     hl
1051+ 68B5 7B                           ld      a, e
1052+ 68B6 AD                           xor     l
1053+ 68B7 6F                           ld      l, a
1054+ 68B8 7A                           ld      a, d
1055+ 68B9 AC                           xor     h
1056+ 68BA 67                           ld      h, a
1057+ 68BB
1058+ 68BB                              psh1
1058+ 68BB E5          >                push    hl
1058+ 68BC DD E9       >                jp      (ix)
1059+ 68BE
1060+ 68BE              //  ______________________________________________________________________
1061+ 68BE              //
1062+ 68BE              // sp@      -- a
1063+ 68BE              // returns on top of stack the value of SP before execution
1064+ 68BE                              New_Def SPFETCH, "SP@", is_code, is_normal
1064+ 68BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1064+ 68BE             >
1064+ 68BE             >                // dummy db directives used to calculate length of namec
1064+ 68BE 53 50 40    >                db      "SP@"
1064+ 68C1             >len_NFA         defl    $ - temp_NFA
1064+ 68C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1064+ 68BE             >
1064+ 68BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1064+ 68BF 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1064+ 68C2             >                org     $-1                 // alter last byte of Name just above to set
1064+ 68C1 C0          >                db      {b $} | END_BIT     // msb as name end
1064+ 68C2             >
1064+ 68C2 AD 68       >                dw      last_NFA            // Link to previous definition Name
1064+ 68C4             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1064+ 68C4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1064+ 68C4 ~           >
1064+ 68C4 ~           >
1064+ 68C4             >                endif           ; ok        // for other definitions it "points" the correct handler
1064+ 68C4             >                // Use of "; ok" to suppress "warning[fwdref]"
1064+ 68C4             >
1064+ 68C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1065+ 68C4
1066+ 68C4 21 00 00                     ld      hl, 0
1067+ 68C7 39                           add     hl, sp
1068+ 68C8
1069+ 68C8                              psh1
1069+ 68C8 E5          >                push    hl
1069+ 68C9 DD E9       >                jp      (ix)
1070+ 68CB
1071+ 68CB              //  ______________________________________________________________________
1072+ 68CB              //
1073+ 68CB              // sp!      a --
1074+ 68CB              // restore SP to the initial value passed
1075+ 68CB              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1076+ 68CB                              New_Def SPSTORE, "SP!", is_code, is_normal
1076+ 68CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1076+ 68CB             >
1076+ 68CB             >                // dummy db directives used to calculate length of namec
1076+ 68CB 53 50 21    >                db      "SP!"
1076+ 68CE             >len_NFA         defl    $ - temp_NFA
1076+ 68CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1076+ 68CB             >
1076+ 68CB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1076+ 68CC 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1076+ 68CF             >                org     $-1                 // alter last byte of Name just above to set
1076+ 68CE A1          >                db      {b $} | END_BIT     // msb as name end
1076+ 68CF             >
1076+ 68CF BE 68       >                dw      last_NFA            // Link to previous definition Name
1076+ 68D1             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1076+ 68D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1076+ 68D1 ~           >
1076+ 68D1 ~           >
1076+ 68D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1076+ 68D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1076+ 68D1             >
1076+ 68D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1077+ 68D1 E1                           pop     hl
1078+ 68D2 F9                           ld      sp, hl
1079+ 68D3
1080+ 68D3                              next
1080+ 68D3 DD E9       >                jp      (ix)
1081+ 68D5
1082+ 68D5              //  ______________________________________________________________________
1083+ 68D5              //
1084+ 68D5              // rp@      -- a
1085+ 68D5              // returns on top of stack the value of Return-Pointer
1086+ 68D5                              New_Def RPFETCH, "RP@", is_code, is_normal
1086+ 68D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1086+ 68D5             >
1086+ 68D5             >                // dummy db directives used to calculate length of namec
1086+ 68D5 52 50 40    >                db      "RP@"
1086+ 68D8             >len_NFA         defl    $ - temp_NFA
1086+ 68D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1086+ 68D5             >
1086+ 68D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1086+ 68D6 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1086+ 68D9             >                org     $-1                 // alter last byte of Name just above to set
1086+ 68D8 C0          >                db      {b $} | END_BIT     // msb as name end
1086+ 68D9             >
1086+ 68D9 CB 68       >                dw      last_NFA            // Link to previous definition Name
1086+ 68DB             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1086+ 68DB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1086+ 68DB ~           >
1086+ 68DB ~           >
1086+ 68DB             >                endif           ; ok        // for other definitions it "points" the correct handler
1086+ 68DB             >                // Use of "; ok" to suppress "warning[fwdref]"
1086+ 68DB             >
1086+ 68DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1087+ 68DB
1088+ 68DB                              ldhlrp
1088+ 68DB 2A 96 63    >                ld      hl,(RP_Pointer)
1089+ 68DE
1090+ 68DE                              psh1
1090+ 68DE E5          >                push    hl
1090+ 68DF DD E9       >                jp      (ix)
1091+ 68E1
1092+ 68E1              //  ______________________________________________________________________
1093+ 68E1              //
1094+ 68E1              // rp!      a --
1095+ 68E1              // restore RP to the initial value passed
1096+ 68E1              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1097+ 68E1                              New_Def RPSTORE, "RP!", is_code, is_normal
1097+ 68E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1097+ 68E1             >
1097+ 68E1             >                // dummy db directives used to calculate length of namec
1097+ 68E1 52 50 21    >                db      "RP!"
1097+ 68E4             >len_NFA         defl    $ - temp_NFA
1097+ 68E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1097+ 68E1             >
1097+ 68E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1097+ 68E2 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1097+ 68E5             >                org     $-1                 // alter last byte of Name just above to set
1097+ 68E4 A1          >                db      {b $} | END_BIT     // msb as name end
1097+ 68E5             >
1097+ 68E5 D5 68       >                dw      last_NFA            // Link to previous definition Name
1097+ 68E7             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1097+ 68E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1097+ 68E7 ~           >
1097+ 68E7 ~           >
1097+ 68E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1097+ 68E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1097+ 68E7             >
1097+ 68E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1098+ 68E7 E1                           pop     hl
1099+ 68E8                              ldrphl
1099+ 68E8 22 96 63    >                ld      (RP_Pointer),hl
1100+ 68EB
1101+ 68EB                              next
1101+ 68EB DD E9       >                jp      (ix)
1102+ 68ED
1103+ 68ED              //  ______________________________________________________________________
1104+ 68ED              //
1105+ 68ED              // exit       --
1106+ 68ED              // exits back to the caller word
1107+ 68ED                              New_Def EXIT, "EXIT", is_code, is_normal
1107+ 68ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1107+ 68ED             >
1107+ 68ED             >                // dummy db directives used to calculate length of namec
1107+ 68ED 45 58 49 54 >                db      "EXIT"
1107+ 68F1             >len_NFA         defl    $ - temp_NFA
1107+ 68F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1107+ 68ED             >
1107+ 68ED 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1107+ 68EE 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1107+ 68F2             >                org     $-1                 // alter last byte of Name just above to set
1107+ 68F1 D4          >                db      {b $} | END_BIT     // msb as name end
1107+ 68F2             >
1107+ 68F2 E1 68       >                dw      last_NFA            // Link to previous definition Name
1107+ 68F4             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1107+ 68F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1107+ 68F4 ~           >
1107+ 68F4 ~           >
1107+ 68F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1107+ 68F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1107+ 68F4             >
1107+ 68F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1108+ 68F4                              ldhlrp                      // Get Return Stack Pointer
1108+ 68F4 2A 96 63    >                ld      hl,(RP_Pointer)
1109+ 68F7 4E                           ld      c, (hl)             // pop Instruction Pointer
1110+ 68F8 23                           inc     hl                  // from Return Stack
1111+ 68F9 46                           ld      b, (hl)
1112+ 68FA 23                           inc     hl
1113+ 68FB                              ldrphl                      // Set Return Stack Pointer
1113+ 68FB 22 96 63    >                ld      (RP_Pointer),hl
1114+ 68FE                              next
1114+ 68FE DD E9       >                jp      (ix)
1115+ 6900
1116+ 6900              //  ______________________________________________________________________
1117+ 6900              //
1118+ 6900              // lastl      --
1119+ 6900              // exits back to the caller word
1120+ 6900              //              New_Def EXIT, "LASTL", is_code, is_normal
1121+ 6900              //              ldhlrp                      // Get Return Stack Pointer
1122+ 6900              //              ld      e, (hl)             // pop Instruction Pointer
1123+ 6900              //              inc     hl                  // from Return Stack
1124+ 6900              //              ld      d, (hl)
1125+ 6900              //              inc     hl
1126+ 6900              //              ld      (hl), e
1127+ 6900              //              inc     hl
1128+ 6900              //              ld      (hl), d
1129+ 6900              //              next
1130+ 6900
1131+ 6900              //  ______________________________________________________________________
1132+ 6900              //
1133+ 6900              // (leave)        --
1134+ 6900              // compiled by LEAVE
1135+ 6900              // this forces to exit from loop and jump past
1136+ 6900                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
1136+ 6900             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1136+ 6900             >
1136+ 6900             >                // dummy db directives used to calculate length of namec
1136+ 6900 28 4C 45 41 >                db      "(LEAVE)"
1136+ 6904 56 45 29    >
1136+ 6907             >len_NFA         defl    $ - temp_NFA
1136+ 6907             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1136+ 6900             >
1136+ 6900 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1136+ 6901 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
1136+ 6905 56 45 29    >
1136+ 6908             >                org     $-1                 // alter last byte of Name just above to set
1136+ 6907 A9          >                db      {b $} | END_BIT     // msb as name end
1136+ 6908             >
1136+ 6908 ED 68       >                dw      last_NFA            // Link to previous definition Name
1136+ 690A             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1136+ 690A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1136+ 690A ~           >
1136+ 690A ~           >
1136+ 690A             >                endif           ; ok        // for other definitions it "points" the correct handler
1136+ 690A             >                // Use of "; ok" to suppress "warning[fwdref]"
1136+ 690A             >
1136+ 690A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1137+ 690A
1138+ 690A                              ldhlrp
1138+ 690A 2A 96 63    >                ld      hl,(RP_Pointer)
1139+ 690D 11 04 00                     ld      de, 4
1140+ 6910 19                           add     hl, de
1141+ 6911                              ldrphl
1141+ 6911 22 96 63    >                ld      (RP_Pointer),hl
1142+ 6914
1143+ 6914 C3 C3 63                     jp      Branch_Ptr       // perform branch consuming following cell
1144+ 6917                              next
1144+ 6917 DD E9       >                jp      (ix)
1145+ 6919
1146+ 6919              //  ______________________________________________________________________
1147+ 6919              //
1148+ 6919              // >r      n --
1149+ 6919              // pop from calculator-stack and push into return-stack
1150+ 6919                              New_Def TO_R, ">R", is_code, is_normal
1150+ 6919             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1150+ 6919             >
1150+ 6919             >                // dummy db directives used to calculate length of namec
1150+ 6919 3E 52       >                db      ">R"
1150+ 691B             >len_NFA         defl    $ - temp_NFA
1150+ 691B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1150+ 6919             >
1150+ 6919 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1150+ 691A 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1150+ 691C             >                org     $-1                 // alter last byte of Name just above to set
1150+ 691B D2          >                db      {b $} | END_BIT     // msb as name end
1150+ 691C             >
1150+ 691C 00 69       >                dw      last_NFA            // Link to previous definition Name
1150+ 691E             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1150+ 691E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1150+ 691E ~           >
1150+ 691E ~           >
1150+ 691E             >                endif           ; ok        // for other definitions it "points" the correct handler
1150+ 691E             >                // Use of "; ok" to suppress "warning[fwdref]"
1150+ 691E             >
1150+ 691E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1151+ 691E D1                           pop     de
1152+ 691F                              ldhlrp
1152+ 691F 2A 96 63    >                ld      hl,(RP_Pointer)
1153+ 6922 2B                           dec     hl
1154+ 6923 72                           ld      (hl), d             // store current TOS
1155+ 6924 2B                           dec     hl                  // to Return Stack
1156+ 6925 73                           ld      (hl), e
1157+ 6926                              ldrphl
1157+ 6926 22 96 63    >                ld      (RP_Pointer),hl
1158+ 6929
1159+ 6929                              next
1159+ 6929 DD E9       >                jp      (ix)
1160+ 692B
1161+ 692B              //  ______________________________________________________________________
1162+ 692B              //
1163+ 692B              // r>      -- n
1164+ 692B              // pop from return-stack and push into calculator-stack
1165+ 692B                              New_Def R_TO, "R>", is_code, is_normal
1165+ 692B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 692B             >
1165+ 692B             >                // dummy db directives used to calculate length of namec
1165+ 692B 52 3E       >                db      "R>"
1165+ 692D             >len_NFA         defl    $ - temp_NFA
1165+ 692D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 692B             >
1165+ 692B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 692C 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1165+ 692E             >                org     $-1                 // alter last byte of Name just above to set
1165+ 692D BE          >                db      {b $} | END_BIT     // msb as name end
1165+ 692E             >
1165+ 692E 19 69       >                dw      last_NFA            // Link to previous definition Name
1165+ 6930             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 6930 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1165+ 6930 ~           >
1165+ 6930 ~           >
1165+ 6930             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 6930             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 6930             >
1165+ 6930             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 6930
1167+ 6930                              ldhlrp
1167+ 6930 2A 96 63    >                ld      hl,(RP_Pointer)
1168+ 6933 5E                           ld      e, (hl)             // retrieve from Return Stack
1169+ 6934 23                           inc     hl
1170+ 6935 56                           ld      d, (hl)
1171+ 6936 23                           inc     hl
1172+ 6937                              ldrphl
1172+ 6937 22 96 63    >                ld      (RP_Pointer),hl
1173+ 693A D5                           push    de
1174+ 693B                              next
1174+ 693B DD E9       >                jp      (ix)
1175+ 693D
1176+ 693D              //  ______________________________________________________________________
1177+ 693D              //
1178+ 693D              // r            -- n
1179+ 693D              // return on top of stack the value of top of return-stack
1180+ 693D              // Since this is the same as I, we alter R's CFA to jump there
1181+ 693D                              New_Def R_OP, "R@", is_code, is_normal
1181+ 693D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1181+ 693D             >
1181+ 693D             >                // dummy db directives used to calculate length of namec
1181+ 693D 52 40       >                db      "R@"
1181+ 693F             >len_NFA         defl    $ - temp_NFA
1181+ 693F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1181+ 693D             >
1181+ 693D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1181+ 693E 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1181+ 6940             >                org     $-1                 // alter last byte of Name just above to set
1181+ 693F C0          >                db      {b $} | END_BIT     // msb as name end
1181+ 6940             >
1181+ 6940 2B 69       >                dw      last_NFA            // Link to previous definition Name
1181+ 6942             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1181+ 6942 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1181+ 6942 ~           >
1181+ 6942 ~           >
1181+ 6942             >                endif           ; ok        // for other definitions it "points" the correct handler
1181+ 6942             >                // Use of "; ok" to suppress "warning[fwdref]"
1181+ 6942             >
1181+ 6942             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1182+ 6942 C3 61 64                     jp      I_Ptr
1183+ 6945
1184+ 6945              //  ______________________________________________________________________
1185+ 6945              //
1186+ 6945              // r            -- n
1187+ 6945              // return on top of stack the value of top of return-stack
1188+ 6945              // Since this is the same as I, we alter R's CFA to jump there
1189+ 6945                              New_Def R_OLD, "R", is_code, is_normal
1189+ 6945             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1189+ 6945             >
1189+ 6945             >                // dummy db directives used to calculate length of namec
1189+ 6945 52          >                db      "R"
1189+ 6946             >len_NFA         defl    $ - temp_NFA
1189+ 6946             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1189+ 6945             >
1189+ 6945 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1189+ 6946 52          >                db      "R"               // name string in 7-bit ascii, but
1189+ 6947             >                org     $-1                 // alter last byte of Name just above to set
1189+ 6946 D2          >                db      {b $} | END_BIT     // msb as name end
1189+ 6947             >
1189+ 6947 3D 69       >                dw      last_NFA            // Link to previous definition Name
1189+ 6949             >R_OLD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1189+ 6949 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1189+ 6949 ~           >
1189+ 6949 ~           >
1189+ 6949             >                endif           ; ok        // for other definitions it "points" the correct handler
1189+ 6949             >                // Use of "; ok" to suppress "warning[fwdref]"
1189+ 6949             >
1189+ 6949             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1190+ 6949 C3 61 64                     jp      I_Ptr
1191+ 694C
1192+ 694C              //  ______________________________________________________________________
1193+ 694C              //
1194+ 694C              // 0=           n -- f
1195+ 694C              // true (non zero) if n is zero, false (0) elsewere
1196+ 694C                              New_Def ZEQUAL, "0=", is_code, is_normal
1196+ 694C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ 694C             >
1196+ 694C             >                // dummy db directives used to calculate length of namec
1196+ 694C 30 3D       >                db      "0="
1196+ 694E             >len_NFA         defl    $ - temp_NFA
1196+ 694E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ 694C             >
1196+ 694C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ 694D 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1196+ 694F             >                org     $-1                 // alter last byte of Name just above to set
1196+ 694E BD          >                db      {b $} | END_BIT     // msb as name end
1196+ 694F             >
1196+ 694F 45 69       >                dw      last_NFA            // Link to previous definition Name
1196+ 6951             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 6951 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1196+ 6951 ~           >
1196+ 6951 ~           >
1196+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 6951             >
1196+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 6951              Zero_Equal:
1198+ 6951 E1                           pop     hl
1199+ 6952 7D                           ld      a, l
1200+ 6953 B4                           or      h
1201+ 6954 21 00 00                     ld      hl, FALSE_FLAG
1202+ 6957 20 01                        jr      nz, ZEqual_Skip
1203+ 6959 2B                               dec     hl
1204+ 695A              ZEqual_Skip:
1205+ 695A                              psh1
1205+ 695A E5          >                push    hl
1205+ 695B DD E9       >                jp      (ix)
1206+ 695D
1207+ 695D              //  ______________________________________________________________________
1208+ 695D              //
1209+ 695D              // not         a1 -- a2
1210+ 695D              // increment by 2 top of stack
1211+ 695D                              New_Def NOT_OP, "NOT", is_code, is_normal
1211+ 695D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1211+ 695D             >
1211+ 695D             >                // dummy db directives used to calculate length of namec
1211+ 695D 4E 4F 54    >                db      "NOT"
1211+ 6960             >len_NFA         defl    $ - temp_NFA
1211+ 6960             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1211+ 695D             >
1211+ 695D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1211+ 695E 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1211+ 6961             >                org     $-1                 // alter last byte of Name just above to set
1211+ 6960 D4          >                db      {b $} | END_BIT     // msb as name end
1211+ 6961             >
1211+ 6961 4C 69       >                dw      last_NFA            // Link to previous definition Name
1211+ 6963             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1211+ 6963 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1211+ 6963 ~           >
1211+ 6963 ~           >
1211+ 6963             >                endif           ; ok        // for other definitions it "points" the correct handler
1211+ 6963             >                // Use of "; ok" to suppress "warning[fwdref]"
1211+ 6963             >
1211+ 6963             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1212+ 6963 C3 51 69                     jp      Zero_Equal
1213+ 6966
1214+ 6966              //  ______________________________________________________________________
1215+ 6966              //
1216+ 6966              // 0<           n -- f
1217+ 6966              // true (non zero) if n is less than zero, false (0) elsewere
1218+ 6966                              New_Def ZLESS, "0<", is_code, is_normal
1218+ 6966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1218+ 6966             >
1218+ 6966             >                // dummy db directives used to calculate length of namec
1218+ 6966 30 3C       >                db      "0<"
1218+ 6968             >len_NFA         defl    $ - temp_NFA
1218+ 6968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1218+ 6966             >
1218+ 6966 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1218+ 6967 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1218+ 6969             >                org     $-1                 // alter last byte of Name just above to set
1218+ 6968 BC          >                db      {b $} | END_BIT     // msb as name end
1218+ 6969             >
1218+ 6969 5D 69       >                dw      last_NFA            // Link to previous definition Name
1218+ 696B             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1218+ 696B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1218+ 696B ~           >
1218+ 696B ~           >
1218+ 696B             >                endif           ; ok        // for other definitions it "points" the correct handler
1218+ 696B             >                // Use of "; ok" to suppress "warning[fwdref]"
1218+ 696B             >
1218+ 696B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1219+ 696B E1                           pop     hl
1220+ 696C 29                           add     hl, hl
1221+ 696D 21 00 00                     ld      hl, 0
1222+ 6970 30 01                        jr      nc, ZLess_Skip
1223+ 6972 2B                               dec     hl
1224+ 6973              ZLess_Skip:
1225+ 6973                              psh1
1225+ 6973 E5          >                push    hl
1225+ 6974 DD E9       >                jp      (ix)
1226+ 6976
1227+ 6976              //  ______________________________________________________________________
1228+ 6976              //
1229+ 6976              // 0>           n -- f
1230+ 6976              // true (non zero) if n is less than zero, false (0) elsewere
1231+ 6976                              New_Def ZGREATER, "0>", is_code, is_normal
1231+ 6976             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1231+ 6976             >
1231+ 6976             >                // dummy db directives used to calculate length of namec
1231+ 6976 30 3E       >                db      "0>"
1231+ 6978             >len_NFA         defl    $ - temp_NFA
1231+ 6978             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1231+ 6976             >
1231+ 6976 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1231+ 6977 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1231+ 6979             >                org     $-1                 // alter last byte of Name just above to set
1231+ 6978 BE          >                db      {b $} | END_BIT     // msb as name end
1231+ 6979             >
1231+ 6979 66 69       >                dw      last_NFA            // Link to previous definition Name
1231+ 697B             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1231+ 697B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1231+ 697B ~           >
1231+ 697B ~           >
1231+ 697B             >                endif           ; ok        // for other definitions it "points" the correct handler
1231+ 697B             >                // Use of "; ok" to suppress "warning[fwdref]"
1231+ 697B             >
1231+ 697B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1232+ 697B E1                           pop     hl
1233+ 697C 7D                           ld      a, l
1234+ 697D B4                           or      h
1235+ 697E 29                           add     hl, hl
1236+ 697F 21 00 00                     ld      hl, FALSE_FLAG
1237+ 6982 38 04                        jr      c, ZGreater_Skip
1238+ 6984 A7                               and     a
1239+ 6985 28 01                            jr      z, ZGreater_Skip
1240+ 6987 2B                                   dec     hl
1241+ 6988              ZGreater_Skip:
1242+ 6988                              psh1
1242+ 6988 E5          >                push    hl
1242+ 6989 DD E9       >                jp      (ix)
1243+ 698B
1244+ 698B              //  ______________________________________________________________________
1245+ 698B              //
1246+ 698B              // +            n1 n2 -- n3
1247+ 698B              // returns the unsigned sum of two top values
1248+ 698B                              New_Def PLUS, "+", is_code, is_normal
1248+ 698B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ 698B             >
1248+ 698B             >                // dummy db directives used to calculate length of namec
1248+ 698B 2B          >                db      "+"
1248+ 698C             >len_NFA         defl    $ - temp_NFA
1248+ 698C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ 698B             >
1248+ 698B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ 698C 2B          >                db      "+"               // name string in 7-bit ascii, but
1248+ 698D             >                org     $-1                 // alter last byte of Name just above to set
1248+ 698C AB          >                db      {b $} | END_BIT     // msb as name end
1248+ 698D             >
1248+ 698D 76 69       >                dw      last_NFA            // Link to previous definition Name
1248+ 698F             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 698F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1248+ 698F ~           >
1248+ 698F ~           >
1248+ 698F             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 698F             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 698F             >
1248+ 698F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 698F E1                           pop     hl
1250+ 6990 D1                           pop     de
1251+ 6991 19                           add     hl, de
1252+ 6992
1253+ 6992                              psh1
1253+ 6992 E5          >                push    hl
1253+ 6993 DD E9       >                jp      (ix)
1254+ 6995
1255+ 6995
1256+ 6995              //  ______________________________________________________________________
1257+ 6995              //
1258+ 6995              // d+           d1 d2 -- d3
1259+ 6995              // returns the unsigned sum of two top double-numbers
1260+ 6995              //      d2  d1
1261+ 6995              //      h l h l
1262+ 6995              // SP   LHEDLHED
1263+ 6995              // SP  +01234567
1264+ 6995                              New_Def DPLUS, "D+", is_code, is_normal
1264+ 6995             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1264+ 6995             >
1264+ 6995             >                // dummy db directives used to calculate length of namec
1264+ 6995 44 2B       >                db      "D+"
1264+ 6997             >len_NFA         defl    $ - temp_NFA
1264+ 6997             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1264+ 6995             >
1264+ 6995 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1264+ 6996 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1264+ 6998             >                org     $-1                 // alter last byte of Name just above to set
1264+ 6997 AB          >                db      {b $} | END_BIT     // msb as name end
1264+ 6998             >
1264+ 6998 8B 69       >                dw      last_NFA            // Link to previous definition Name
1264+ 699A             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1264+ 699A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1264+ 699A ~           >
1264+ 699A ~           >
1264+ 699A             >                endif           ; ok        // for other definitions it "points" the correct handler
1264+ 699A             >                // Use of "; ok" to suppress "warning[fwdref]"
1264+ 699A             >
1264+ 699A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1265+ 699A
1266+ 699A D9                           exx
1267+ 699B C1                           pop     bc                  // bc := d2.H
1268+ 699C D1                           pop     de                  // hl := d2.L
1269+ 699D E1                           pop     hl                  // d1.H
1270+ 699E E3                           ex      (sp), hl            // d1.L
1271+ 699F 19                           add     hl, de              // hl := d2.L + d1.L
1272+ 69A0 E3                           ex      (sp), hl            // d1.H
1273+ 69A1 ED 4A                        adc     hl, bc              // d1.H + d2.H
1274+ 69A3 E5                           push    hl
1275+ 69A4 D9                           exx
1276+ 69A5                              next
1276+ 69A5 DD E9       >                jp      (ix)
1277+ 69A7
1278+ 69A7              //  ______________________________________________________________________
1279+ 69A7              //
1280+ 69A7              // 1+           n1 -- n2
1281+ 69A7              // increment by 1 top of stack
1282+ 69A7                              New_Def ONE_PLUS, "1+", is_code, is_normal
1282+ 69A7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1282+ 69A7             >
1282+ 69A7             >                // dummy db directives used to calculate length of namec
1282+ 69A7 31 2B       >                db      "1+"
1282+ 69A9             >len_NFA         defl    $ - temp_NFA
1282+ 69A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1282+ 69A7             >
1282+ 69A7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1282+ 69A8 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1282+ 69AA             >                org     $-1                 // alter last byte of Name just above to set
1282+ 69A9 AB          >                db      {b $} | END_BIT     // msb as name end
1282+ 69AA             >
1282+ 69AA 95 69       >                dw      last_NFA            // Link to previous definition Name
1282+ 69AC             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1282+ 69AC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1282+ 69AC ~           >
1282+ 69AC ~           >
1282+ 69AC             >                endif           ; ok        // for other definitions it "points" the correct handler
1282+ 69AC             >                // Use of "; ok" to suppress "warning[fwdref]"
1282+ 69AC             >
1282+ 69AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1283+ 69AC E1                           pop     hl
1284+ 69AD 23                           inc     hl
1285+ 69AE
1286+ 69AE                              psh1
1286+ 69AE E5          >                push    hl
1286+ 69AF DD E9       >                jp      (ix)
1287+ 69B1
1288+ 69B1              //  ______________________________________________________________________
1289+ 69B1              //
1290+ 69B1              // 1-           n1 -- n2
1291+ 69B1              // decrement by 1 top of stack
1292+ 69B1                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1292+ 69B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1292+ 69B1             >
1292+ 69B1             >                // dummy db directives used to calculate length of namec
1292+ 69B1 31 2D       >                db      "1-"
1292+ 69B3             >len_NFA         defl    $ - temp_NFA
1292+ 69B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1292+ 69B1             >
1292+ 69B1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1292+ 69B2 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1292+ 69B4             >                org     $-1                 // alter last byte of Name just above to set
1292+ 69B3 AD          >                db      {b $} | END_BIT     // msb as name end
1292+ 69B4             >
1292+ 69B4 A7 69       >                dw      last_NFA            // Link to previous definition Name
1292+ 69B6             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1292+ 69B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1292+ 69B6 ~           >
1292+ 69B6 ~           >
1292+ 69B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1292+ 69B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1292+ 69B6             >
1292+ 69B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1293+ 69B6 E1                           pop     hl
1294+ 69B7 2B                           dec     hl
1295+ 69B8
1296+ 69B8                              psh1
1296+ 69B8 E5          >                push    hl
1296+ 69B9 DD E9       >                jp      (ix)
1297+ 69BB
1298+ 69BB              //  ______________________________________________________________________
1299+ 69BB              //
1300+ 69BB              // 2+           n1 -- n2
1301+ 69BB              // increment by 2 top of stack
1302+ 69BB                              New_Def TWO_PLUS, "2+", is_code, is_normal
1302+ 69BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1302+ 69BB             >
1302+ 69BB             >                // dummy db directives used to calculate length of namec
1302+ 69BB 32 2B       >                db      "2+"
1302+ 69BD             >len_NFA         defl    $ - temp_NFA
1302+ 69BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1302+ 69BB             >
1302+ 69BB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1302+ 69BC 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1302+ 69BE             >                org     $-1                 // alter last byte of Name just above to set
1302+ 69BD AB          >                db      {b $} | END_BIT     // msb as name end
1302+ 69BE             >
1302+ 69BE B1 69       >                dw      last_NFA            // Link to previous definition Name
1302+ 69C0             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1302+ 69C0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1302+ 69C0 ~           >
1302+ 69C0 ~           >
1302+ 69C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1302+ 69C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1302+ 69C0             >
1302+ 69C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1303+ 69C0              Two_Plus:
1304+ 69C0 E1                           pop     hl
1305+ 69C1 23                           inc     hl
1306+ 69C2 23                           inc     hl
1307+ 69C3
1308+ 69C3                              psh1
1308+ 69C3 E5          >                push    hl
1308+ 69C4 DD E9       >                jp      (ix)
1309+ 69C6
1310+ 69C6              //  ______________________________________________________________________
1311+ 69C6              //
1312+ 69C6              // cell+        a1 -- a2
1313+ 69C6              // increment by 2 top of stack
1314+ 69C6                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1314+ 69C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ 69C6             >
1314+ 69C6             >                // dummy db directives used to calculate length of namec
1314+ 69C6 43 45 4C 4C >                db      "CELL+"
1314+ 69CA 2B          >
1314+ 69CB             >len_NFA         defl    $ - temp_NFA
1314+ 69CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ 69C6             >
1314+ 69C6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ 69C7 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1314+ 69CB 2B          >
1314+ 69CC             >                org     $-1                 // alter last byte of Name just above to set
1314+ 69CB AB          >                db      {b $} | END_BIT     // msb as name end
1314+ 69CC             >
1314+ 69CC BB 69       >                dw      last_NFA            // Link to previous definition Name
1314+ 69CE             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 69CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 69CE ~           >
1314+ 69CE ~           >
1314+ 69CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 69CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 69CE             >
1314+ 69CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 69CE C3 C0 69                     jp      Two_Plus
1316+ 69D1
1317+ 69D1              //  ______________________________________________________________________
1318+ 69D1              //
1319+ 69D1              // align        a1 -- a2
1320+ 69D1              // align memory : not used
1321+ 69D1              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1322+ 69D1              //            next
1323+ 69D1
1324+ 69D1              //  ______________________________________________________________________
1325+ 69D1              //
1326+ 69D1              // cell-        a1 -- a2
1327+ 69D1              // decrement by 2 top of stack
1328+ 69D1                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1328+ 69D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1328+ 69D1             >
1328+ 69D1             >                // dummy db directives used to calculate length of namec
1328+ 69D1 43 45 4C 4C >                db      "CELL-"
1328+ 69D5 2D          >
1328+ 69D6             >len_NFA         defl    $ - temp_NFA
1328+ 69D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1328+ 69D1             >
1328+ 69D1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1328+ 69D2 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1328+ 69D6 2D          >
1328+ 69D7             >                org     $-1                 // alter last byte of Name just above to set
1328+ 69D6 AD          >                db      {b $} | END_BIT     // msb as name end
1328+ 69D7             >
1328+ 69D7 C6 69       >                dw      last_NFA            // Link to previous definition Name
1328+ 69D9             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1328+ 69D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1328+ 69D9 ~           >
1328+ 69D9 ~           >
1328+ 69D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1328+ 69D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1328+ 69D9             >
1328+ 69D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1329+ 69D9              CellMinus:
1330+ 69D9 E1                           pop     hl
1331+ 69DA 2B                           dec     hl
1332+ 69DB 2B                           dec     hl
1333+ 69DC
1334+ 69DC                              psh1
1334+ 69DC E5          >                push    hl
1334+ 69DD DD E9       >                jp      (ix)
1335+ 69DF
1336+ 69DF              //  ______________________________________________________________________
1337+ 69DF              //
1338+ 69DF              // 2-           a1 -- a2
1339+ 69DF              // decrement by 2 top of stack
1340+ 69DF                              New_Def TWO_MINUS, "2-", is_code, is_normal
1340+ 69DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 69DF             >
1340+ 69DF             >                // dummy db directives used to calculate length of namec
1340+ 69DF 32 2D       >                db      "2-"
1340+ 69E1             >len_NFA         defl    $ - temp_NFA
1340+ 69E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 69DF             >
1340+ 69DF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 69E0 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1340+ 69E2             >                org     $-1                 // alter last byte of Name just above to set
1340+ 69E1 AD          >                db      {b $} | END_BIT     // msb as name end
1340+ 69E2             >
1340+ 69E2 D1 69       >                dw      last_NFA            // Link to previous definition Name
1340+ 69E4             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 69E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1340+ 69E4 ~           >
1340+ 69E4 ~           >
1340+ 69E4             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 69E4             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 69E4             >
1340+ 69E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 69E4 C3 D9 69                     jp      CellMinus
1342+ 69E7
1343+ 69E7              //  ______________________________________________________________________
1344+ 69E7              //
1345+ 69E7              // negate       n1 -- n2
1346+ 69E7              // change the sign of number
1347+ 69E7                              New_Def MINUS, "NEGATE", is_code, is_normal
1347+ 69E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ 69E7             >
1347+ 69E7             >                // dummy db directives used to calculate length of namec
1347+ 69E7 4E 45 47 41 >                db      "NEGATE"
1347+ 69EB 54 45       >
1347+ 69ED             >len_NFA         defl    $ - temp_NFA
1347+ 69ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ 69E7             >
1347+ 69E7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ 69E8 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1347+ 69EC 54 45       >
1347+ 69EE             >                org     $-1                 // alter last byte of Name just above to set
1347+ 69ED C5          >                db      {b $} | END_BIT     // msb as name end
1347+ 69EE             >
1347+ 69EE DF 69       >                dw      last_NFA            // Link to previous definition Name
1347+ 69F0             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 69F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1347+ 69F0 ~           >
1347+ 69F0 ~           >
1347+ 69F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 69F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 69F0             >
1347+ 69F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 69F0 21 00 00                     ld      hl, 0               // subtract from 0
1349+ 69F3 D1                           pop     de
1350+ 69F4 B7                           or      a
1351+ 69F5 ED 52                        sbc     hl, de
1352+ 69F7
1353+ 69F7                              psh1
1353+ 69F7 E5          >                push    hl
1353+ 69F8 DD E9       >                jp      (ix)
1354+ 69FA
1355+ 69FA              //  ______________________________________________________________________
1356+ 69FA              //
1357+ 69FA              // dnegate      d1 -- d2
1358+ 69FA              // change the sign of a double number
1359+ 69FA                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1359+ 69FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1359+ 69FA             >
1359+ 69FA             >                // dummy db directives used to calculate length of namec
1359+ 69FA 44 4E 45 47 >                db      "DNEGATE"
1359+ 69FE 41 54 45    >
1359+ 6A01             >len_NFA         defl    $ - temp_NFA
1359+ 6A01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1359+ 69FA             >
1359+ 69FA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1359+ 69FB 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1359+ 69FF 41 54 45    >
1359+ 6A02             >                org     $-1                 // alter last byte of Name just above to set
1359+ 6A01 C5          >                db      {b $} | END_BIT     // msb as name end
1359+ 6A02             >
1359+ 6A02 E7 69       >                dw      last_NFA            // Link to previous definition Name
1359+ 6A04             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1359+ 6A04 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1359+ 6A04 ~           >
1359+ 6A04 ~           >
1359+ 6A04             >                endif           ; ok        // for other definitions it "points" the correct handler
1359+ 6A04             >                // Use of "; ok" to suppress "warning[fwdref]"
1359+ 6A04             >
1359+ 6A04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1360+ 6A04 D9                           exx
1361+ 6A05 C1                           pop     bc                  // d1.H
1362+ 6A06 D1                           pop     de                  // d1.L
1363+ 6A07 AF                           xor     a
1364+ 6A08 67                           ld      h, a
1365+ 6A09 6F                           ld      l, a
1366+ 6A0A ED 52                        sbc     hl, de              // subtact from zero
1367+ 6A0C E5                           push    hl                  // > d2-L
1368+ 6A0D 67                           ld      h, a
1369+ 6A0E 6F                           ld      l, a
1370+ 6A0F ED 42                        sbc     hl, bc              // subtract from zero with carry
1371+ 6A11                                                          // > d2-H
1372+ 6A11 E5                           push    hl
1373+ 6A12 D9                           exx
1374+ 6A13                              next
1374+ 6A13 DD E9       >                jp      (ix)
1375+ 6A15
1376+ 6A15              //  ______________________________________________________________________
1377+ 6A15              //
1378+ 6A15              // over         n1 n2 -- n1 n2 n1
1379+ 6A15              // copy the second value of stack and put it on top.
1380+ 6A15                              New_Def OVER, "OVER", is_code, is_normal
1380+ 6A15             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1380+ 6A15             >
1380+ 6A15             >                // dummy db directives used to calculate length of namec
1380+ 6A15 4F 56 45 52 >                db      "OVER"
1380+ 6A19             >len_NFA         defl    $ - temp_NFA
1380+ 6A19             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1380+ 6A15             >
1380+ 6A15 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1380+ 6A16 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1380+ 6A1A             >                org     $-1                 // alter last byte of Name just above to set
1380+ 6A19 D2          >                db      {b $} | END_BIT     // msb as name end
1380+ 6A1A             >
1380+ 6A1A FA 69       >                dw      last_NFA            // Link to previous definition Name
1380+ 6A1C             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1380+ 6A1C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1380+ 6A1C ~           >
1380+ 6A1C ~           >
1380+ 6A1C             >                endif           ; ok        // for other definitions it "points" the correct handler
1380+ 6A1C             >                // Use of "; ok" to suppress "warning[fwdref]"
1380+ 6A1C             >
1380+ 6A1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1381+ 6A1C D1                           pop     de                  //   n2
1382+ 6A1D E1                           pop     hl                  // < n1
1383+ 6A1E E5                           push    hl                  // > n1
1384+ 6A1F D5                           push    de                  // > n2
1385+ 6A20 E5                           push    hl                  // > n1
1386+ 6A21                              next
1386+ 6A21 DD E9       >                jp      (ix)
1387+ 6A23
1388+ 6A23              //  ______________________________________________________________________
1389+ 6A23              //
1390+ 6A23              // drop         n1 --
1391+ 6A23              // drops the top of stack
1392+ 6A23                              New_Def DROP, "DROP", is_code, is_normal
1392+ 6A23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1392+ 6A23             >
1392+ 6A23             >                // dummy db directives used to calculate length of namec
1392+ 6A23 44 52 4F 50 >                db      "DROP"
1392+ 6A27             >len_NFA         defl    $ - temp_NFA
1392+ 6A27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1392+ 6A23             >
1392+ 6A23 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1392+ 6A24 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1392+ 6A28             >                org     $-1                 // alter last byte of Name just above to set
1392+ 6A27 D0          >                db      {b $} | END_BIT     // msb as name end
1392+ 6A28             >
1392+ 6A28 15 6A       >                dw      last_NFA            // Link to previous definition Name
1392+ 6A2A             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1392+ 6A2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1392+ 6A2A ~           >
1392+ 6A2A ~           >
1392+ 6A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1392+ 6A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1392+ 6A2A             >
1392+ 6A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1393+ 6A2A E1                           pop     hl                  // < n1 and discard previous TOS
1394+ 6A2B                              next
1394+ 6A2B DD E9       >                jp      (ix)
1395+ 6A2D
1396+ 6A2D              //  ______________________________________________________________________
1397+ 6A2D              //
1398+ 6A2D              // nip          n1 n2 -- n2
1399+ 6A2D              // drops the second elemento on the stack
1400+ 6A2D                              New_Def NIP, "NIP", is_code, is_normal
1400+ 6A2D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ 6A2D             >
1400+ 6A2D             >                // dummy db directives used to calculate length of namec
1400+ 6A2D 4E 49 50    >                db      "NIP"
1400+ 6A30             >len_NFA         defl    $ - temp_NFA
1400+ 6A30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ 6A2D             >
1400+ 6A2D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ 6A2E 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1400+ 6A31             >                org     $-1                 // alter last byte of Name just above to set
1400+ 6A30 D0          >                db      {b $} | END_BIT     // msb as name end
1400+ 6A31             >
1400+ 6A31 23 6A       >                dw      last_NFA            // Link to previous definition Name
1400+ 6A33             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6A33 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1400+ 6A33 ~           >
1400+ 6A33 ~           >
1400+ 6A33             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6A33             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6A33             >
1400+ 6A33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6A33
1402+ 6A33 E1                           pop     hl                  // < n1 discarded
1403+ 6A34 E3                           ex      (sp), hl
1404+ 6A35                              next
1404+ 6A35 DD E9       >                jp      (ix)
1405+ 6A37
1406+ 6A37              //  ______________________________________________________________________
1407+ 6A37              //
1408+ 6A37              // tuck         n1 n2 -- n2 n1 n2
1409+ 6A37              // copy the top element after the second.
1410+ 6A37                              New_Def TUCK, "TUCK", is_code, is_normal
1410+ 6A37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ 6A37             >
1410+ 6A37             >                // dummy db directives used to calculate length of namec
1410+ 6A37 54 55 43 4B >                db      "TUCK"
1410+ 6A3B             >len_NFA         defl    $ - temp_NFA
1410+ 6A3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ 6A37             >
1410+ 6A37 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ 6A38 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1410+ 6A3C             >                org     $-1                 // alter last byte of Name just above to set
1410+ 6A3B CB          >                db      {b $} | END_BIT     // msb as name end
1410+ 6A3C             >
1410+ 6A3C 2D 6A       >                dw      last_NFA            // Link to previous definition Name
1410+ 6A3E             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 6A3E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1410+ 6A3E ~           >
1410+ 6A3E ~           >
1410+ 6A3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 6A3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 6A3E             >
1410+ 6A3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 6A3E E1                           pop     hl
1412+ 6A3F D1                           pop     de                  // < n1
1413+ 6A40 E5                           push    hl                  // > n2  and TOS
1414+ 6A41 D5                           push    de                  // > n1
1415+ 6A42 E5                           push    hl
1416+ 6A43                              next
1416+ 6A43 DD E9       >                jp      (ix)
1417+ 6A45
1418+ 6A45              //  ______________________________________________________________________
1419+ 6A45              //
1420+ 6A45              // swap         n1 n2 -- n2 n1
1421+ 6A45              // swaps the two values on top of stack
1422+ 6A45                              New_Def SWAP, "SWAP", is_code, is_normal
1422+ 6A45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1422+ 6A45             >
1422+ 6A45             >                // dummy db directives used to calculate length of namec
1422+ 6A45 53 57 41 50 >                db      "SWAP"
1422+ 6A49             >len_NFA         defl    $ - temp_NFA
1422+ 6A49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1422+ 6A45             >
1422+ 6A45 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1422+ 6A46 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1422+ 6A4A             >                org     $-1                 // alter last byte of Name just above to set
1422+ 6A49 D0          >                db      {b $} | END_BIT     // msb as name end
1422+ 6A4A             >
1422+ 6A4A 37 6A       >                dw      last_NFA            // Link to previous definition Name
1422+ 6A4C             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1422+ 6A4C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1422+ 6A4C ~           >
1422+ 6A4C ~           >
1422+ 6A4C             >                endif           ; ok        // for other definitions it "points" the correct handler
1422+ 6A4C             >                // Use of "; ok" to suppress "warning[fwdref]"
1422+ 6A4C             >
1422+ 6A4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1423+ 6A4C E1                           pop     hl                  // < n1
1424+ 6A4D E3                           ex      (sp),hl             // > n2
1425+ 6A4E E5                           push    hl                  // copy n1 to TOS
1426+ 6A4F                              next
1426+ 6A4F DD E9       >                jp      (ix)
1427+ 6A51
1428+ 6A51              //  ______________________________________________________________________
1429+ 6A51              //
1430+ 6A51              // dup         n -- n n
1431+ 6A51              // duplicates the top value of stack
1432+ 6A51                              New_Def DUP, "DUP", is_code, is_normal
1432+ 6A51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1432+ 6A51             >
1432+ 6A51             >                // dummy db directives used to calculate length of namec
1432+ 6A51 44 55 50    >                db      "DUP"
1432+ 6A54             >len_NFA         defl    $ - temp_NFA
1432+ 6A54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1432+ 6A51             >
1432+ 6A51 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1432+ 6A52 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1432+ 6A55             >                org     $-1                 // alter last byte of Name just above to set
1432+ 6A54 D0          >                db      {b $} | END_BIT     // msb as name end
1432+ 6A55             >
1432+ 6A55 45 6A       >                dw      last_NFA            // Link to previous definition Name
1432+ 6A57             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1432+ 6A57 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1432+ 6A57 ~           >
1432+ 6A57 ~           >
1432+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
1432+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
1432+ 6A57             >
1432+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1433+ 6A57 E1                           pop     hl
1434+ 6A58 E5                           push    hl                  // > n duplicate TOS
1435+ 6A59 E5                           push    hl
1436+ 6A5A                              next
1436+ 6A5A DD E9       >                jp      (ix)
1437+ 6A5C
1438+ 6A5C              //  ______________________________________________________________________
1439+ 6A5C              //
1440+ 6A5C              // rot         n1 n2 n3 -- n2 n3 n1
1441+ 6A5C              // Rotates the 3 top values of stack by picking the 3rd in access-order
1442+ 6A5C              // and putting it on top. The other two are shifted down one place.
1443+ 6A5C                              New_Def ROT, "ROT", is_code, is_normal
1443+ 6A5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1443+ 6A5C             >
1443+ 6A5C             >                // dummy db directives used to calculate length of namec
1443+ 6A5C 52 4F 54    >                db      "ROT"
1443+ 6A5F             >len_NFA         defl    $ - temp_NFA
1443+ 6A5F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1443+ 6A5C             >
1443+ 6A5C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1443+ 6A5D 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1443+ 6A60             >                org     $-1                 // alter last byte of Name just above to set
1443+ 6A5F D4          >                db      {b $} | END_BIT     // msb as name end
1443+ 6A60             >
1443+ 6A60 51 6A       >                dw      last_NFA            // Link to previous definition Name
1443+ 6A62             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1443+ 6A62 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1443+ 6A62 ~           >
1443+ 6A62 ~           >
1443+ 6A62             >                endif           ; ok        // for other definitions it "points" the correct handler
1443+ 6A62             >                // Use of "; ok" to suppress "warning[fwdref]"
1443+ 6A62             >
1443+ 6A62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1444+ 6A62 D1                           pop     de                  // < n3
1445+ 6A63 E1                           pop     hl                  // < n2
1446+ 6A64 E3                           ex      (sp),hl             // > n2 < n1
1447+ 6A65 D5                           push    de                  // > n3
1448+ 6A66 E5                           push    hl                  // copy n1 to TOS
1449+ 6A67                              next
1449+ 6A67 DD E9       >                jp      (ix)
1450+ 6A69
1451+ 6A69              //  ______________________________________________________________________
1452+ 6A69              //
1453+ 6A69              // -rot         n1 n2 n3 -- n3 n1 n2
1454+ 6A69              // Rotates the 3 top values of stack by picking the 1st in access-order
1455+ 6A69              // and putting back to 3rd place. The other two are shifted down one place.
1456+ 6A69                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1456+ 6A69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1456+ 6A69             >
1456+ 6A69             >                // dummy db directives used to calculate length of namec
1456+ 6A69 2D 52 4F 54 >                db      "-ROT"
1456+ 6A6D             >len_NFA         defl    $ - temp_NFA
1456+ 6A6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1456+ 6A69             >
1456+ 6A69 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1456+ 6A6A 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1456+ 6A6E             >                org     $-1                 // alter last byte of Name just above to set
1456+ 6A6D D4          >                db      {b $} | END_BIT     // msb as name end
1456+ 6A6E             >
1456+ 6A6E 5C 6A       >                dw      last_NFA            // Link to previous definition Name
1456+ 6A70             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1456+ 6A70 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1456+ 6A70 ~           >
1456+ 6A70 ~           >
1456+ 6A70             >                endif           ; ok        // for other definitions it "points" the correct handler
1456+ 6A70             >                // Use of "; ok" to suppress "warning[fwdref]"
1456+ 6A70             >
1456+ 6A70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1457+ 6A70 E1                           pop     hl                  // < n3
1458+ 6A71 D1                           pop     de                  // < n2
1459+ 6A72 E3                           ex      (sp),hl             // > n3 < n1
1460+ 6A73 E5                           push    hl                  // > n1
1461+ 6A74 D5                           push    de                  // copy n3 to TOS
1462+ 6A75                              next
1462+ 6A75 DD E9       >                jp      (ix)
1463+ 6A77
1464+ 6A77              //  ______________________________________________________________________
1465+ 6A77              //
1466+ 6A77              // pick        n1 -- nx
1467+ 6A77              // picks the nth element from TOS
1468+ 6A77                              New_Def PICK, "PICK", is_code, is_normal
1468+ 6A77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1468+ 6A77             >
1468+ 6A77             >                // dummy db directives used to calculate length of namec
1468+ 6A77 50 49 43 4B >                db      "PICK"
1468+ 6A7B             >len_NFA         defl    $ - temp_NFA
1468+ 6A7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1468+ 6A77             >
1468+ 6A77 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1468+ 6A78 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1468+ 6A7C             >                org     $-1                 // alter last byte of Name just above to set
1468+ 6A7B CB          >                db      {b $} | END_BIT     // msb as name end
1468+ 6A7C             >
1468+ 6A7C 69 6A       >                dw      last_NFA            // Link to previous definition Name
1468+ 6A7E             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1468+ 6A7E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1468+ 6A7E ~           >
1468+ 6A7E ~           >
1468+ 6A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
1468+ 6A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
1468+ 6A7E             >
1468+ 6A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1469+ 6A7E E1                           pop     hl                  // take TOS as index
1470+ 6A7F 29                           add     hl, hl              // as cells
1471+ 6A80 39                           add     hl, sp              // from Stack Pointer
1472+ 6A81 7E                           ld      a, (hl)             // replace TOS
1473+ 6A82 23                           inc     hl
1474+ 6A83 66                           ld      h, (hl)
1475+ 6A84 6F                           ld      l, a
1476+ 6A85
1477+ 6A85                              psh1
1477+ 6A85 E5          >                push    hl
1477+ 6A86 DD E9       >                jp      (ix)
1478+ 6A88
1479+ 6A88
1480+ 6A88              //  ______________________________________________________________________
1481+ 6A88              //
1482+ 6A88              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1483+ 6A88              // picks the nth element from TOS
1484+ 6A88              //              New_Def ROLL, "ROLL", is_code, is_normal
1485+ 6A88              //              exx                     // we need all registers free
1486+ 6A88              //              pop     hl              // number of cells to roll
1487+ 6A88              //              ld      a, h
1488+ 6A88              //              or       l
1489+ 6A88              //              jr      z, Roll_Zero
1490+ 6A88              //                  add     hl, hl              // number of bytes to move
1491+ 6A88              //                  ld      b, h
1492+ 6A88              //                  ld      c, l
1493+ 6A88              //                  add     hl, sp          // address of n1
1494+ 6A88              //                  ld      a, (hl)         // take n1 into a and a,
1495+ 6A88              //                  inc     hl
1496+ 6A88              //                  ex      af, af'
1497+ 6A88              //                  ld      a, (hl)         // take n1 into a and a,
1498+ 6A88              //                  ld      d, h
1499+ 6A88              //                  ld      e, l
1500+ 6A88              //                  dec     hl
1501+ 6A88              //                  dec     hl
1502+ 6A88              //                  lddr
1503+ 6A88              //                  ex      de, hl
1504+ 6A88              //                  ld      (hl), a
1505+ 6A88              //                  dec     hl
1506+ 6A88              //                  ex      af, af'
1507+ 6A88              //                  ld      (hl), a
1508+ 6A88              //Roll_Zero:
1509+ 6A88              //              exx
1510+ 6A88              //              next
1511+ 6A88
1512+ 6A88
1513+ 6A88              //  ______________________________________________________________________
1514+ 6A88              //
1515+ 6A88              // 2over        d1 d2 -- d1 d2 d1
1516+ 6A88              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1517+ 6A88              // copy the second double of stack and put on top.
1518+ 6A88              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1519+ 6A88              //
1520+ 6A88              //              ld      hl, 7
1521+ 6A88              //              add     hl, sp
1522+ 6A88              //              ld      d, (hl)
1523+ 6A88              //              dec     hl
1524+ 6A88              //              ld      e, (hl)             // d1-L
1525+ 6A88              //              push    de
1526+ 6A88              //              dec     hl
1527+ 6A88              //              ld      d, (hl)
1528+ 6A88              //              dec     hl
1529+ 6A88              //              ld      e, (hl)             // d1-H
1530+ 6A88              //              push    de
1531+ 6A88              //              next
1532+ 6A88
1533+ 6A88              //  ______________________________________________________________________
1534+ 6A88              //
1535+ 6A88              // 2drop        d --
1536+ 6A88              //              n1 n2 --
1537+ 6A88              // drops the top double from stack
1538+ 6A88                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1538+ 6A88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ 6A88             >
1538+ 6A88             >                // dummy db directives used to calculate length of namec
1538+ 6A88 32 44 52 4F >                db      "2DROP"
1538+ 6A8C 50          >
1538+ 6A8D             >len_NFA         defl    $ - temp_NFA
1538+ 6A8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ 6A88             >
1538+ 6A88 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ 6A89 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1538+ 6A8D 50          >
1538+ 6A8E             >                org     $-1                 // alter last byte of Name just above to set
1538+ 6A8D D0          >                db      {b $} | END_BIT     // msb as name end
1538+ 6A8E             >
1538+ 6A8E 77 6A       >                dw      last_NFA            // Link to previous definition Name
1538+ 6A90             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 6A90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 6A90 ~           >
1538+ 6A90 ~           >
1538+ 6A90             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 6A90             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 6A90             >
1538+ 6A90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 6A90 E1                           pop     hl
1540+ 6A91 E1                           pop     hl
1541+ 6A92                              next
1541+ 6A92 DD E9       >                jp      (ix)
1542+ 6A94
1543+ 6A94              //  ______________________________________________________________________
1544+ 6A94              //
1545+ 6A94              // 2nip         d1 d2 -- d2
1546+ 6A94              //              n1 n2 n3 n4 -- n3 n4
1547+ 6A94              // drops the second double on the stack
1548+ 6A94              //              New_Def TWO_NIP, 4, "2nip"
1549+ 6A94              //              ...
1550+ 6A94
1551+ 6A94              //  ______________________________________________________________________
1552+ 6A94              //
1553+ 6A94              // 2tuck         d1 d2 -- d2 d1 d2
1554+ 6A94              // copy the top element after the second.
1555+ 6A94              //              New_Def TWO_TUCK, 5, "2tuck"
1556+ 6A94              //              ...
1557+ 6A94
1558+ 6A94              //  ______________________________________________________________________
1559+ 6A94              //
1560+ 6A94              // 2swap         d1 d2 -- d2 d1
1561+ 6A94              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1562+ 6A94              // swaps the two doubles on top of stack
1563+ 6A94                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1563+ 6A94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1563+ 6A94             >
1563+ 6A94             >                // dummy db directives used to calculate length of namec
1563+ 6A94 32 53 57 41 >                db      "2SWAP"
1563+ 6A98 50          >
1563+ 6A99             >len_NFA         defl    $ - temp_NFA
1563+ 6A99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1563+ 6A94             >
1563+ 6A94 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1563+ 6A95 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1563+ 6A99 50          >
1563+ 6A9A             >                org     $-1                 // alter last byte of Name just above to set
1563+ 6A99 D0          >                db      {b $} | END_BIT     // msb as name end
1563+ 6A9A             >
1563+ 6A9A 88 6A       >                dw      last_NFA            // Link to previous definition Name
1563+ 6A9C             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1563+ 6A9C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1563+ 6A9C ~           >
1563+ 6A9C ~           >
1563+ 6A9C             >                endif           ; ok        // for other definitions it "points" the correct handler
1563+ 6A9C             >                // Use of "; ok" to suppress "warning[fwdref]"
1563+ 6A9C             >
1563+ 6A9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1564+ 6A9C F1                           pop     af                  //   d2-H
1565+ 6A9D E1                           pop     hl                  // < d2-L
1566+ 6A9E D1                           pop     de                  // < d1-H
1567+ 6A9F E3                           ex      (sp), hl            // < d1-L > d2-L
1568+ 6AA0 F5                           push    af                  // > d2-H
1569+ 6AA1 E5                           push    hl                  // > d1-L
1570+ 6AA2 D5                           push    de
1571+ 6AA3
1572+ 6AA3                              next
1572+ 6AA3 DD E9       >                jp      (ix)
1573+ 6AA5
1574+ 6AA5              //  ______________________________________________________________________
1575+ 6AA5              //
1576+ 6AA5              // 2dup         d -- d d
1577+ 6AA5              //              n1 n2 -- n1 n2 n1 n2
1578+ 6AA5              // duplicates the top double of stack
1579+ 6AA5                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1579+ 6AA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1579+ 6AA5             >
1579+ 6AA5             >                // dummy db directives used to calculate length of namec
1579+ 6AA5 32 44 55 50 >                db      "2DUP"
1579+ 6AA9             >len_NFA         defl    $ - temp_NFA
1579+ 6AA9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1579+ 6AA5             >
1579+ 6AA5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1579+ 6AA6 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1579+ 6AAA             >                org     $-1                 // alter last byte of Name just above to set
1579+ 6AA9 D0          >                db      {b $} | END_BIT     // msb as name end
1579+ 6AAA             >
1579+ 6AAA 94 6A       >                dw      last_NFA            // Link to previous definition Name
1579+ 6AAC             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1579+ 6AAC ~           >                call    runcode ; ok        // for primitive definitions  actual code
1579+ 6AAC ~           >
1579+ 6AAC ~           >
1579+ 6AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
1579+ 6AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
1579+ 6AAC             >
1579+ 6AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1580+ 6AAC E1                           pop     hl                  // < d-H
1581+ 6AAD D1                           pop     de                  // < d-L
1582+ 6AAE D5                           push    de                  // < d-L
1583+ 6AAF E5                           push    hl                  // > d-H
1584+ 6AB0 D5                           push    de                  // > d-L
1585+ 6AB1 E5                           push    hl                  // > d-H
1586+ 6AB2                              next
1586+ 6AB2 DD E9       >                jp      (ix)
1587+ 6AB4
1588+ 6AB4              //  ______________________________________________________________________
1589+ 6AB4              //
1590+ 6AB4              // 2rot         d1 d2 d3 -- d2 d3 d1
1591+ 6AB4              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1592+ 6AB4              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1593+ 6AB4              // and putting it on top. The other two are shifted down one place.
1594+ 6AB4              //              New_Def TWO?ROT, 4, "2rot"
1595+ 6AB4              //              ...
1596+ 6AB4              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1597+ 6AB4              //
1598+ 6AB4              //      d3  |d2  |d1  |
1599+ 6AB4              //      h l |h l |h l |
1600+ 6AB4              // SP   LHED|LHED|LHED|
1601+ 6AB4              // SP  +0123|4567|89ab|
1602+ 6AB4              //              ld      hl, $000B
1603+ 6AB4              //              add     hl, sp
1604+ 6AB4              //              ld      d, (hl)
1605+ 6AB4              //              dec     hl
1606+ 6AB4              //              ld      e, (hl)
1607+ 6AB4              //              dec     hl
1608+ 6AB4              //              push    de
1609+ 6AB4              //              ld      d, (hl)
1610+ 6AB4              //              dec     hl
1611+ 6AB4              //              ld      e, (hl)
1612+ 6AB4              //              dec     hl
1613+ 6AB4              //              push    de
1614+ 6AB4
1615+ 6AB4              //      d1  |d3  |d2  |d1  |
1616+ 6AB4              //      h l |h l |h l |h l |
1617+ 6AB4              // SP   LHED|LHED|LHED|LHED|
1618+ 6AB4              // SP       +0123|4567|89ab|
1619+ 6AB4
1620+ 6AB4              //              ld      d, h
1621+ 6AB4              //              ld      e, l
1622+ 6AB4              //              inc     de
1623+ 6AB4              //              inc     de
1624+ 6AB4              //              inc     de
1625+ 6AB4              //              inc     de
1626+ 6AB4              //              push    bc
1627+ 6AB4              //              ld      bc, $000C
1628+ 6AB4              //              lddr
1629+ 6AB4              //              pop     bc
1630+ 6AB4              //              pop     de
1631+ 6AB4              //              pop     de
1632+ 6AB4              //
1633+ 6AB4              //              next
1634+ 6AB4
1635+ 6AB4
1636+ 6AB4              //  ______________________________________________________________________
1637+ 6AB4              //
1638+ 6AB4              // +!           n a --
1639+ 6AB4              // Sums to the content of address a the number n.
1640+ 6AB4              // It is the same of  a @ n + a !
1641+ 6AB4                              New_Def PLUSSTORE, "+!", is_code, is_normal
1641+ 6AB4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1641+ 6AB4             >
1641+ 6AB4             >                // dummy db directives used to calculate length of namec
1641+ 6AB4 2B 21       >                db      "+!"
1641+ 6AB6             >len_NFA         defl    $ - temp_NFA
1641+ 6AB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1641+ 6AB4             >
1641+ 6AB4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1641+ 6AB5 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1641+ 6AB7             >                org     $-1                 // alter last byte of Name just above to set
1641+ 6AB6 A1          >                db      {b $} | END_BIT     // msb as name end
1641+ 6AB7             >
1641+ 6AB7 A5 6A       >                dw      last_NFA            // Link to previous definition Name
1641+ 6AB9             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1641+ 6AB9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1641+ 6AB9 ~           >
1641+ 6AB9 ~           >
1641+ 6AB9             >                endif           ; ok        // for other definitions it "points" the correct handler
1641+ 6AB9             >                // Use of "; ok" to suppress "warning[fwdref]"
1641+ 6AB9             >
1641+ 6AB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1642+ 6AB9 E1                           pop     hl                  // hl is the address
1643+ 6ABA D1                           pop     de                  // de is the number
1644+ 6ABB 7E                           ld      a, (hl)
1645+ 6ABC 83                           add     e
1646+ 6ABD 77                           ld      (hl), a
1647+ 6ABE 23                           inc     hl
1648+ 6ABF 7E                           ld      a, (hl)
1649+ 6AC0 8A                           adc     d
1650+ 6AC1 77                           ld      (hl), a
1651+ 6AC2
1652+ 6AC2                              next
1652+ 6AC2 DD E9       >                jp      (ix)
1653+ 6AC4
1654+ 6AC4              //  ______________________________________________________________________
1655+ 6AC4              //
1656+ 6AC4              // toggle       a n --
1657+ 6AC4              // Complements (xor) the byte at addrress  a  with the model n.
1658+ 6AC4                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1658+ 6AC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1658+ 6AC4             >
1658+ 6AC4             >                // dummy db directives used to calculate length of namec
1658+ 6AC4 54 4F 47 47 >                db      "TOGGLE"
1658+ 6AC8 4C 45       >
1658+ 6ACA             >len_NFA         defl    $ - temp_NFA
1658+ 6ACA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1658+ 6AC4             >
1658+ 6AC4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1658+ 6AC5 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1658+ 6AC9 4C 45       >
1658+ 6ACB             >                org     $-1                 // alter last byte of Name just above to set
1658+ 6ACA C5          >                db      {b $} | END_BIT     // msb as name end
1658+ 6ACB             >
1658+ 6ACB B4 6A       >                dw      last_NFA            // Link to previous definition Name
1658+ 6ACD             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1658+ 6ACD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1658+ 6ACD ~           >
1658+ 6ACD ~           >
1658+ 6ACD             >                endif           ; ok        // for other definitions it "points" the correct handler
1658+ 6ACD             >                // Use of "; ok" to suppress "warning[fwdref]"
1658+ 6ACD             >
1658+ 6ACD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1659+ 6ACD D1                           pop     de
1660+ 6ACE E1                           pop     hl
1661+ 6ACF 7E                           ld      a, (hl)
1662+ 6AD0 AB                           xor     e
1663+ 6AD1 77                           ld      (hl), a
1664+ 6AD2
1665+ 6AD2                              next
1665+ 6AD2 DD E9       >                jp      (ix)
1666+ 6AD4
1667+ 6AD4              //  ______________________________________________________________________
1668+ 6AD4              //
1669+ 6AD4              // @            a -- n
1670+ 6AD4              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1671+ 6AD4                              New_Def FETCH, "@", is_code, is_normal
1671+ 6AD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1671+ 6AD4             >
1671+ 6AD4             >                // dummy db directives used to calculate length of namec
1671+ 6AD4 40          >                db      "@"
1671+ 6AD5             >len_NFA         defl    $ - temp_NFA
1671+ 6AD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1671+ 6AD4             >
1671+ 6AD4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1671+ 6AD5 40          >                db      "@"               // name string in 7-bit ascii, but
1671+ 6AD6             >                org     $-1                 // alter last byte of Name just above to set
1671+ 6AD5 C0          >                db      {b $} | END_BIT     // msb as name end
1671+ 6AD6             >
1671+ 6AD6 C4 6A       >                dw      last_NFA            // Link to previous definition Name
1671+ 6AD8             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1671+ 6AD8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1671+ 6AD8 ~           >
1671+ 6AD8 ~           >
1671+ 6AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
1671+ 6AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
1671+ 6AD8             >
1671+ 6AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1672+ 6AD8 E1                           pop     hl
1673+ 6AD9 5E                           ld      e, (hl)             // low-byte
1674+ 6ADA 23                           inc     hl
1675+ 6ADB 56                           ld      d, (hl)             // high-byte
1676+ 6ADC D5                           push    de
1677+ 6ADD                              next
1677+ 6ADD DD E9       >                jp      (ix)
1678+ 6ADF
1679+ 6ADF              //  ______________________________________________________________________
1680+ 6ADF              //
1681+ 6ADF              // !            n a --
1682+ 6ADF              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1683+ 6ADF                              New_Def STORE, "!", is_code, is_normal
1683+ 6ADF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1683+ 6ADF             >
1683+ 6ADF             >                // dummy db directives used to calculate length of namec
1683+ 6ADF 21          >                db      "!"
1683+ 6AE0             >len_NFA         defl    $ - temp_NFA
1683+ 6AE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1683+ 6ADF             >
1683+ 6ADF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1683+ 6AE0 21          >                db      "!"               // name string in 7-bit ascii, but
1683+ 6AE1             >                org     $-1                 // alter last byte of Name just above to set
1683+ 6AE0 A1          >                db      {b $} | END_BIT     // msb as name end
1683+ 6AE1             >
1683+ 6AE1 D4 6A       >                dw      last_NFA            // Link to previous definition Name
1683+ 6AE3             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1683+ 6AE3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1683+ 6AE3 ~           >
1683+ 6AE3 ~           >
1683+ 6AE3             >                endif           ; ok        // for other definitions it "points" the correct handler
1683+ 6AE3             >                // Use of "; ok" to suppress "warning[fwdref]"
1683+ 6AE3             >
1683+ 6AE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1684+ 6AE3 E1                           pop     hl                  // address
1685+ 6AE4 D1                           pop     de                  // < n
1686+ 6AE5 73                           ld      (hl), e             // low-byte
1687+ 6AE6 23                           inc     hl
1688+ 6AE7 72                           ld      (hl), d             // high-byte
1689+ 6AE8
1690+ 6AE8                              next
1690+ 6AE8 DD E9       >                jp      (ix)
1691+ 6AEA
1692+ 6AEA              //  ______________________________________________________________________
1693+ 6AEA              //
1694+ 6AEA              // c@           a -- c
1695+ 6AEA              // fetch a character n from address a
1696+ 6AEA                              New_Def CFETCH, "C@", is_code, is_normal
1696+ 6AEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1696+ 6AEA             >
1696+ 6AEA             >                // dummy db directives used to calculate length of namec
1696+ 6AEA 43 40       >                db      "C@"
1696+ 6AEC             >len_NFA         defl    $ - temp_NFA
1696+ 6AEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1696+ 6AEA             >
1696+ 6AEA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1696+ 6AEB 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1696+ 6AED             >                org     $-1                 // alter last byte of Name just above to set
1696+ 6AEC C0          >                db      {b $} | END_BIT     // msb as name end
1696+ 6AED             >
1696+ 6AED DF 6A       >                dw      last_NFA            // Link to previous definition Name
1696+ 6AEF             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1696+ 6AEF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1696+ 6AEF ~           >
1696+ 6AEF ~           >
1696+ 6AEF             >                endif           ; ok        // for other definitions it "points" the correct handler
1696+ 6AEF             >                // Use of "; ok" to suppress "warning[fwdref]"
1696+ 6AEF             >
1696+ 6AEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1697+ 6AEF E1                           pop     hl
1698+ 6AF0 6E                           ld      l, (hl)             // low-byte
1699+ 6AF1 26 00                        ld      h, 0
1700+ 6AF3
1701+ 6AF3                              psh1
1701+ 6AF3 E5          >                push    hl
1701+ 6AF4 DD E9       >                jp      (ix)
1702+ 6AF6
1703+ 6AF6              //  ______________________________________________________________________
1704+ 6AF6              //
1705+ 6AF6              // c!           c a --
1706+ 6AF6              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1707+ 6AF6                              New_Def CSTORE, "C!", is_code, is_normal
1707+ 6AF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1707+ 6AF6             >
1707+ 6AF6             >                // dummy db directives used to calculate length of namec
1707+ 6AF6 43 21       >                db      "C!"
1707+ 6AF8             >len_NFA         defl    $ - temp_NFA
1707+ 6AF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1707+ 6AF6             >
1707+ 6AF6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1707+ 6AF7 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1707+ 6AF9             >                org     $-1                 // alter last byte of Name just above to set
1707+ 6AF8 A1          >                db      {b $} | END_BIT     // msb as name end
1707+ 6AF9             >
1707+ 6AF9 EA 6A       >                dw      last_NFA            // Link to previous definition Name
1707+ 6AFB             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1707+ 6AFB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1707+ 6AFB ~           >
1707+ 6AFB ~           >
1707+ 6AFB             >                endif           ; ok        // for other definitions it "points" the correct handler
1707+ 6AFB             >                // Use of "; ok" to suppress "warning[fwdref]"
1707+ 6AFB             >
1707+ 6AFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1708+ 6AFB E1                           pop     hl                  // < address
1709+ 6AFC D1                           pop     de
1710+ 6AFD 73                           ld      (hl), e             // low-byte
1711+ 6AFE
1712+ 6AFE                              next
1712+ 6AFE DD E9       >                jp      (ix)
1713+ 6B00
1714+ 6B00              //  ______________________________________________________________________
1715+ 6B00              //
1716+ 6B00              // 2@           a -- d
1717+ 6B00              // fetch a 32 bits number d from address a and leaves it on top of the
1718+ 6B00              // stack as two single numbers, high part as top of the stack.
1719+ 6B00              // A double number is normally kept in CPU registers as HLDE.
1720+ 6B00              // On stack a double number is treated as two single numbers
1721+ 6B00              // where BC is on the top of the stack and HL is the second from top,
1722+ 6B00              // so the sign of the number can be checked on top of stack
1723+ 6B00              // and in the stack memory it appears as LHED.
1724+ 6B00                              New_Def TWO_FETCH, "2@", is_code, is_normal
1724+ 6B00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1724+ 6B00             >
1724+ 6B00             >                // dummy db directives used to calculate length of namec
1724+ 6B00 32 40       >                db      "2@"
1724+ 6B02             >len_NFA         defl    $ - temp_NFA
1724+ 6B02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1724+ 6B00             >
1724+ 6B00 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1724+ 6B01 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1724+ 6B03             >                org     $-1                 // alter last byte of Name just above to set
1724+ 6B02 C0          >                db      {b $} | END_BIT     // msb as name end
1724+ 6B03             >
1724+ 6B03 F6 6A       >                dw      last_NFA            // Link to previous definition Name
1724+ 6B05             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1724+ 6B05 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1724+ 6B05 ~           >
1724+ 6B05 ~           >
1724+ 6B05             >                endif           ; ok        // for other definitions it "points" the correct handler
1724+ 6B05             >                // Use of "; ok" to suppress "warning[fwdref]"
1724+ 6B05             >
1724+ 6B05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1725+ 6B05 E1                           pop     hl                  // address
1726+ 6B06 5E                           ld      e, (hl)             // low-byte
1727+ 6B07 23                           inc     hl
1728+ 6B08 56                           ld      d, (hl)             // high-byte
1729+ 6B09 23                           inc     hl
1730+ 6B0A 7E                           ld      a, (hl)             // low-byte
1731+ 6B0B 23                           inc     hl
1732+ 6B0C 66                           ld      h, (hl)             // high-byte
1733+ 6B0D 6F                           ld      l, a
1734+ 6B0E E5                           push    hl
1735+ 6B0F D5                           push    de
1736+ 6B10                              next
1736+ 6B10 DD E9       >                jp      (ix)
1737+ 6B12
1738+ 6B12              //  ______________________________________________________________________
1739+ 6B12              //
1740+ 6B12              // 2!           d a --
1741+ 6B12              // stores a 32 bits number d from address a and leaves it on top of the
1742+ 6B12              // stack as two single numbers, high part as top of the stack.
1743+ 6B12              // A double number is normally kept in CPU registers as HLDE.
1744+ 6B12              // On stack a double number is treated as two single numbers
1745+ 6B12              // where BC is on the top of the stack and HL is the second from top,
1746+ 6B12              // so the sign of the number can be checked on top of stack
1747+ 6B12              // and in the stack memory it appears as LHED.
1748+ 6B12                              New_Def TWO_STORE, "2!", is_code, is_normal
1748+ 6B12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1748+ 6B12             >
1748+ 6B12             >                // dummy db directives used to calculate length of namec
1748+ 6B12 32 21       >                db      "2!"
1748+ 6B14             >len_NFA         defl    $ - temp_NFA
1748+ 6B14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1748+ 6B12             >
1748+ 6B12 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1748+ 6B13 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1748+ 6B15             >                org     $-1                 // alter last byte of Name just above to set
1748+ 6B14 A1          >                db      {b $} | END_BIT     // msb as name end
1748+ 6B15             >
1748+ 6B15 00 6B       >                dw      last_NFA            // Link to previous definition Name
1748+ 6B17             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1748+ 6B17 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1748+ 6B17 ~           >
1748+ 6B17 ~           >
1748+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1748+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1748+ 6B17             >
1748+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1749+ 6B17 D9                           exx
1750+ 6B18 E1                           pop     hl                  // address
1751+ 6B19 C1                           pop     bc                  // < high-part
1752+ 6B1A D1                           pop     de                  // < low-part > Instruction Pointer
1753+ 6B1B 71                           ld      (hl), c
1754+ 6B1C 23                           inc     hl
1755+ 6B1D 70                           ld      (hl), b
1756+ 6B1E 23                           inc     hl
1757+ 6B1F 73                           ld      (hl), e
1758+ 6B20 23                           inc     hl
1759+ 6B21 72                           ld      (hl), d
1760+ 6B22 D9                           exx
1761+ 6B23                              next
1761+ 6B23 DD E9       >                jp      (ix)
1762+ 6B25
1763+ 6B25              //  ______________________________________________________________________
1764+ 6B25              //
1765+ 6B25              // p@           a -- c
1766+ 6B25              // Read one byte from port a and leave the result on top of stack
1767+ 6B25                              New_Def PFETCH, "P@", is_code, is_normal
1767+ 6B25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1767+ 6B25             >
1767+ 6B25             >                // dummy db directives used to calculate length of namec
1767+ 6B25 50 40       >                db      "P@"
1767+ 6B27             >len_NFA         defl    $ - temp_NFA
1767+ 6B27             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1767+ 6B25             >
1767+ 6B25 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1767+ 6B26 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1767+ 6B28             >                org     $-1                 // alter last byte of Name just above to set
1767+ 6B27 C0          >                db      {b $} | END_BIT     // msb as name end
1767+ 6B28             >
1767+ 6B28 12 6B       >                dw      last_NFA            // Link to previous definition Name
1767+ 6B2A             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1767+ 6B2A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1767+ 6B2A ~           >
1767+ 6B2A ~           >
1767+ 6B2A             >                endif           ; ok        // for other definitions it "points" the correct handler
1767+ 6B2A             >                // Use of "; ok" to suppress "warning[fwdref]"
1767+ 6B2A             >
1767+ 6B2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1768+ 6B2A D9                           exx
1769+ 6B2B C1                           pop     bc
1770+ 6B2C 26 00                        ld      h, 0
1771+ 6B2E ED 68                        in      l, (c)
1772+ 6B30 E5                           push    hl
1773+ 6B31 D9                           exx
1774+ 6B32                              next
1774+ 6B32 DD E9       >                jp      (ix)
1775+ 6B34
1776+ 6B34              //  ______________________________________________________________________
1777+ 6B34              //
1778+ 6B34              // p!           c a --
1779+ 6B34              // Send one byte (top of stack) to port a
1780+ 6B34                              New_Def PSTORE, "P!", is_code, is_normal
1780+ 6B34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1780+ 6B34             >
1780+ 6B34             >                // dummy db directives used to calculate length of namec
1780+ 6B34 50 21       >                db      "P!"
1780+ 6B36             >len_NFA         defl    $ - temp_NFA
1780+ 6B36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1780+ 6B34             >
1780+ 6B34 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1780+ 6B35 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1780+ 6B37             >                org     $-1                 // alter last byte of Name just above to set
1780+ 6B36 A1          >                db      {b $} | END_BIT     // msb as name end
1780+ 6B37             >
1780+ 6B37 25 6B       >                dw      last_NFA            // Link to previous definition Name
1780+ 6B39             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1780+ 6B39 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1780+ 6B39 ~           >
1780+ 6B39 ~           >
1780+ 6B39             >                endif           ; ok        // for other definitions it "points" the correct handler
1780+ 6B39             >                // Use of "; ok" to suppress "warning[fwdref]"
1780+ 6B39             >
1780+ 6B39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1781+ 6B39 D9                           exx
1782+ 6B3A C1                           pop     bc
1783+ 6B3B E1                           pop     hl                  // < c
1784+ 6B3C ED 69                        out     (c), l              // low-byte
1785+ 6B3E D9                           exx
1786+ 6B3F                              next
1786+ 6B3F DD E9       >                jp      (ix)
1787+ 6B41
1788+ 6B41
1789+ 6B41              //  ______________________________________________________________________
1790+ 6B41              //
1791+ 6B41              // 2*           n1 -- n2
1792+ 6B41              // doubles the number at top of stack
1793+ 6B41                              New_Def TWO_MUL, "2*", is_code, is_normal
1793+ 6B41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1793+ 6B41             >
1793+ 6B41             >                // dummy db directives used to calculate length of namec
1793+ 6B41 32 2A       >                db      "2*"
1793+ 6B43             >len_NFA         defl    $ - temp_NFA
1793+ 6B43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1793+ 6B41             >
1793+ 6B41 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1793+ 6B42 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1793+ 6B44             >                org     $-1                 // alter last byte of Name just above to set
1793+ 6B43 AA          >                db      {b $} | END_BIT     // msb as name end
1793+ 6B44             >
1793+ 6B44 34 6B       >                dw      last_NFA            // Link to previous definition Name
1793+ 6B46             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1793+ 6B46 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1793+ 6B46 ~           >
1793+ 6B46 ~           >
1793+ 6B46             >                endif           ; ok        // for other definitions it "points" the correct handler
1793+ 6B46             >                // Use of "; ok" to suppress "warning[fwdref]"
1793+ 6B46             >
1793+ 6B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1794+ 6B46              Two_Mul_Ptr:
1795+ 6B46 E1                           pop     hl
1796+ 6B47 29                           add     hl, hl
1797+ 6B48
1798+ 6B48                              psh1
1798+ 6B48 E5          >                push    hl
1798+ 6B49 DD E9       >                jp      (ix)
1799+ 6B4B
1800+ 6B4B              //  ______________________________________________________________________
1801+ 6B4B              //
1802+ 6B4B              // 2/           n1 -- n2
1803+ 6B4B              // halves the top of stack, sign is unchanged
1804+ 6B4B                              New_Def TWO_DIV, "2/", is_code, is_normal
1804+ 6B4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1804+ 6B4B             >
1804+ 6B4B             >                // dummy db directives used to calculate length of namec
1804+ 6B4B 32 2F       >                db      "2/"
1804+ 6B4D             >len_NFA         defl    $ - temp_NFA
1804+ 6B4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1804+ 6B4B             >
1804+ 6B4B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1804+ 6B4C 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1804+ 6B4E             >                org     $-1                 // alter last byte of Name just above to set
1804+ 6B4D AF          >                db      {b $} | END_BIT     // msb as name end
1804+ 6B4E             >
1804+ 6B4E 41 6B       >                dw      last_NFA            // Link to previous definition Name
1804+ 6B50             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1804+ 6B50 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1804+ 6B50 ~           >
1804+ 6B50 ~           >
1804+ 6B50             >                endif           ; ok        // for other definitions it "points" the correct handler
1804+ 6B50             >                // Use of "; ok" to suppress "warning[fwdref]"
1804+ 6B50             >
1804+ 6B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1805+ 6B50 E1                           pop     hl
1806+ 6B51 CB 2C                        sra     h
1807+ 6B53 CB 1D                        rr      l
1808+ 6B55
1809+ 6B55                              psh1
1809+ 6B55 E5          >                push    hl
1809+ 6B56 DD E9       >                jp      (ix)
1810+ 6B58
1811+ 6B58              //  ______________________________________________________________________
1812+ 6B58              //
1813+ 6B58              // lshift       n1 u -- n2
1814+ 6B58              // bit left shift of u bits
1815+ 6B58                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1815+ 6B58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1815+ 6B58             >
1815+ 6B58             >                // dummy db directives used to calculate length of namec
1815+ 6B58 4C 53 48 49 >                db      "LSHIFT"
1815+ 6B5C 46 54       >
1815+ 6B5E             >len_NFA         defl    $ - temp_NFA
1815+ 6B5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1815+ 6B58             >
1815+ 6B58 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1815+ 6B59 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1815+ 6B5D 46 54       >
1815+ 6B5F             >                org     $-1                 // alter last byte of Name just above to set
1815+ 6B5E D4          >                db      {b $} | END_BIT     // msb as name end
1815+ 6B5F             >
1815+ 6B5F 4B 6B       >                dw      last_NFA            // Link to previous definition Name
1815+ 6B61             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1815+ 6B61 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1815+ 6B61 ~           >
1815+ 6B61 ~           >
1815+ 6B61             >                endif           ; ok        // for other definitions it "points" the correct handler
1815+ 6B61             >                // Use of "; ok" to suppress "warning[fwdref]"
1815+ 6B61             >
1815+ 6B61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1816+ 6B61 D1                           pop     de
1817+ 6B62
1818+ 6B62 E1                           pop     hl
1819+ 6B63 7B                           ld      a, e
1820+ 6B64 B7                           or      a
1821+ 6B65 28 04                        jr      z, Lshift_Zero
1822+ 6B67              Lshift_Loop:
1823+ 6B67 29                                   add     hl, hl
1824+ 6B68 3D                                   dec     a
1825+ 6B69 20 FC                            jr      nz, Lshift_Loop
1826+ 6B6B              Lshift_Zero:
1827+ 6B6B
1828+ 6B6B
1829+ 6B6B                              psh1
1829+ 6B6B E5          >                push    hl
1829+ 6B6C DD E9       >                jp      (ix)
1830+ 6B6E
1831+ 6B6E              //  ______________________________________________________________________
1832+ 6B6E              //
1833+ 6B6E              // rshift       n1 u -- n2
1834+ 6B6E              // bit right shift of u bits
1835+ 6B6E                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1835+ 6B6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1835+ 6B6E             >
1835+ 6B6E             >                // dummy db directives used to calculate length of namec
1835+ 6B6E 52 53 48 49 >                db      "RSHIFT"
1835+ 6B72 46 54       >
1835+ 6B74             >len_NFA         defl    $ - temp_NFA
1835+ 6B74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1835+ 6B6E             >
1835+ 6B6E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1835+ 6B6F 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1835+ 6B73 46 54       >
1835+ 6B75             >                org     $-1                 // alter last byte of Name just above to set
1835+ 6B74 D4          >                db      {b $} | END_BIT     // msb as name end
1835+ 6B75             >
1835+ 6B75 58 6B       >                dw      last_NFA            // Link to previous definition Name
1835+ 6B77             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1835+ 6B77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1835+ 6B77 ~           >
1835+ 6B77 ~           >
1835+ 6B77             >                endif           ; ok        // for other definitions it "points" the correct handler
1835+ 6B77             >                // Use of "; ok" to suppress "warning[fwdref]"
1835+ 6B77             >
1835+ 6B77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1836+ 6B77 D1                           pop     de
1837+ 6B78
1838+ 6B78 E1                           pop     hl
1839+ 6B79 7B                           ld      a, e
1840+ 6B7A B7                           or      a
1841+ 6B7B 28 07                        jr      z, Rshift_Zero
1842+ 6B7D              Rshift_Loop:
1843+ 6B7D CB 3C                                srl     h
1844+ 6B7F CB 1D                                rr      l
1845+ 6B81 3D                                   dec     a
1846+ 6B82 20 F9                            jr      nz, Rshift_Loop
1847+ 6B84              Rshift_Zero:
1848+ 6B84
1849+ 6B84
1850+ 6B84                              psh1
1850+ 6B84 E5          >                push    hl
1850+ 6B85 DD E9       >                jp      (ix)
1851+ 6B87
1852+ 6B87              //  ______________________________________________________________________
1853+ 6B87              //
1854+ 6B87              // cells        n1 -- n2
1855+ 6B87              // decrement by 2 top of stack
1856+ 6B87                              New_Def CELLS, "CELLS", is_code, is_normal
1856+ 6B87             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1856+ 6B87             >
1856+ 6B87             >                // dummy db directives used to calculate length of namec
1856+ 6B87 43 45 4C 4C >                db      "CELLS"
1856+ 6B8B 53          >
1856+ 6B8C             >len_NFA         defl    $ - temp_NFA
1856+ 6B8C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1856+ 6B87             >
1856+ 6B87 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1856+ 6B88 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1856+ 6B8C 53          >
1856+ 6B8D             >                org     $-1                 // alter last byte of Name just above to set
1856+ 6B8C D3          >                db      {b $} | END_BIT     // msb as name end
1856+ 6B8D             >
1856+ 6B8D 6E 6B       >                dw      last_NFA            // Link to previous definition Name
1856+ 6B8F             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1856+ 6B8F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1856+ 6B8F ~           >
1856+ 6B8F ~           >
1856+ 6B8F             >                endif           ; ok        // for other definitions it "points" the correct handler
1856+ 6B8F             >                // Use of "; ok" to suppress "warning[fwdref]"
1856+ 6B8F             >
1856+ 6B8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1857+ 6B8F C3 46 6B                     jp      Two_Mul_Ptr
1858+ 6B92
1859+ 6B92
1860+ 6B92              //  ______________________________________________________________________
1861+ 6B92
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6B92                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6B92              //  ______________________________________________________________________
   2+ 6B92              //
   3+ 6B92              //  L1.asm
   4+ 6B92              //
   5+ 6B92              //  Level-1 definitions and derivate
   6+ 6B92              //  ______________________________________________________________________
   7+ 6B92
   8+ 6B92              //  ______________________________________________________________________
   9+ 6B92              //
  10+ 6B92              // :            -- cccc     ( compile time )
  11+ 6B92              //              i*x -- j*x  ( run time )
  12+ 6B92              // Colon Definition
  13+ 6B92                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6B92             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6B92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6B92             >
  13+ 6B92             >                // dummy db directives used to calculate length of namec
  13+ 6B92 3A          >                db      ":"
  13+ 6B93             >len_NFA         defl    $ - temp_NFA
  13+ 6B93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6B92             >
  13+ 6B92 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6B93 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6B94             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6B93 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6B94             >
  13+ 6B94 87 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6B96             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6B96 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6B99             >
  13+ 6B99             >
  13+ 6B99             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6B99             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6B99             >
  13+ 6B99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6B99
  15+ 6B99 3F 70                        dw      QEXEC                   // ?exec
  16+ 6B9B F7 6F                        dw      STORE_CSP               // !csp
  17+ 6B9D 82 6D D8 6A                  dw      CURRENT, FETCH          // current @
  18+ 6BA1 74 6D E3 6A                  dw      CONTEXT, STORE          // context !
  19+ 6BA5 68 76                        dw      CREATE                  // create  ( forward )
  20+ 6BA7 F4 70                        dw      SMUDGE                  // dmudge
  21+ 6BA9 DE 70                        dw      SQUARED_CLOSE           // ]
  22+ 6BAB 4E 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BAD                                                              // ... immediate
  24+ 6BAD              Enter_Ptr:
  25+ 6BAD                              // via call coded in CFA
  26+ 6BAD                              ldhlrp
  26+ 6BAD 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BB0 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BB1 70                           ld      (hl), b
  29+ 6BB2 2B                           dec     hl
  30+ 6BB3 71                           ld      (hl), c
  31+ 6BB4                              ldrphl
  31+ 6BB4 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BB7
  33+ 6BB7
  34+ 6BB7 C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BB8                              next
  35+ 6BB8 DD E9       >                jp      (ix)
  36+ 6BBA
  37+ 6BBA              //  ______________________________________________________________________
  38+ 6BBA              //
  39+ 6BBA              // ;            --
  40+ 6BBA              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BBA                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BBA             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BBA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BBA             >
  41+ 6BBA             >                // dummy db directives used to calculate length of namec
  41+ 6BBA 3B          >                db      ";"
  41+ 6BBB             >len_NFA         defl    $ - temp_NFA
  41+ 6BBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BBA             >
  41+ 6BBA C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BBB 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BBC             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BBB BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BBC             >
  41+ 6BBC 92 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BBE             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BBE CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BC1             >
  41+ 6BC1             >
  41+ 6BC1             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BC1             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BC1             >
  41+ 6BC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BC1
  43+ 6BC1 6B 70                        dw      QCSP                    // ?csp
  44+ 6BC3 A4 70 F4 68                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BC7 F4 70                        dw      SMUDGE                  // smudge
  46+ 6BC9 CF 70                        dw      SQUARED_OPEN            // [
  47+ 6BCB F4 68                        dw      EXIT                    // ; immediate
  48+ 6BCD
  49+ 6BCD              //  ______________________________________________________________________
  50+ 6BCD              //
  51+ 6BCD              // noop         --
  52+ 6BCD
  53+ 6BCD                              Colon_Def NOOP, "NOOP", is_normal
  53+ 6BCD             >                New_Def  NOOP, "NOOP", Enter_Ptr, is_normal ; ok
  53+ 6BCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BCD             >
  53+ 6BCD             >                // dummy db directives used to calculate length of namec
  53+ 6BCD 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BD1             >len_NFA         defl    $ - temp_NFA
  53+ 6BD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BCD             >
  53+ 6BCD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BCE 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BD2             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BD1 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BD2             >
  53+ 6BD2 BA 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BD4             >NOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BD4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  53+ 6BD7             >
  53+ 6BD7             >
  53+ 6BD7             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BD7             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BD7             >
  53+ 6BD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BD7 F4 68                        dw      EXIT
  55+ 6BD9
  56+ 6BD9              //  ______________________________________________________________________
  57+ 6BD9              //
  58+ 6BD9              // constant     n -- cccc     ( compile time )
  59+ 6BD9              //              -- n          ( run time )
  60+ 6BD9              // Constant definition.
  61+ 6BD9                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BD9             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BD9             >
  61+ 6BD9             >                // dummy db directives used to calculate length of namec
  61+ 6BD9 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6BDD 54 41 4E 54 >
  61+ 6BE1             >len_NFA         defl    $ - temp_NFA
  61+ 6BE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BD9             >
  61+ 6BD9 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BDA 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6BDE 54 41 4E 54 >
  61+ 6BE2             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6BE1 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6BE2             >
  61+ 6BE2 CD 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6BE4             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6BE4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6BE7             >
  61+ 6BE7             >
  61+ 6BE7             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6BE7             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6BE7             >
  61+ 6BE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6BE7
  63+ 6BE7 68 76                        dw      CREATE                  // create
  64+ 6BE9 4F 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6BEB 4E 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6BED              Constant_Ptr:
  67+ 6BED
  68+ 6BED
  69+ 6BED E1                           pop     hl
  70+ 6BEE
  71+ 6BEE 5E                           ld      e, (hl)
  72+ 6BEF 23                           inc     hl
  73+ 6BF0 56                           ld      d, (hl)
  74+ 6BF1 D5                           push    de
  75+ 6BF2                              next
  75+ 6BF2 DD E9       >                jp      (ix)
  76+ 6BF4
  77+ 6BF4              //  ______________________________________________________________________
  78+ 6BF4              //
  79+ 6BF4              // variable     n -- cccc     ( compile time )
  80+ 6BF4              //              -- a          ( run time )
  81+ 6BF4              // Variable definition, n is the initial value.
  82+ 6BF4                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6BF4             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6BF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6BF4             >
  82+ 6BF4             >                // dummy db directives used to calculate length of namec
  82+ 6BF4 56 41 52 49 >                db      "VARIABLE"
  82+ 6BF8 41 42 4C 45 >
  82+ 6BFC             >len_NFA         defl    $ - temp_NFA
  82+ 6BFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6BF4             >
  82+ 6BF4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6BF5 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6BF9 41 42 4C 45 >
  82+ 6BFD             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6BFC C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6BFD             >
  82+ 6BFD D9 6B       >                dw      last_NFA            // Link to previous definition Name
  82+ 6BFF             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6BFF CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C02             >
  82+ 6C02             >
  82+ 6C02             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C02             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C02             >
  82+ 6C02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C02
  84+ 6C02 E4 6B                        dw      CONSTANT                // constant
  85+ 6C04 4E 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  86+ 6C06              Variable_Ptr:
  87+ 6C06
  88+ 6C06
  89+ 6C06
  90+ 6C06
  91+ 6C06                              next
  91+ 6C06 DD E9       >                jp      (ix)
  92+ 6C08
  93+ 6C08              //  ______________________________________________________________________
  94+ 6C08              //
  95+ 6C08              // user         b -- cccc     ( compile time )
  96+ 6C08              //              -- a          ( run time )
  97+ 6C08              // User variable definition
  98+ 6C08                              Colon_Def USER, "USER", is_normal
  98+ 6C08             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  98+ 6C08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  98+ 6C08             >
  98+ 6C08             >                // dummy db directives used to calculate length of namec
  98+ 6C08 55 53 45 52 >                db      "USER"
  98+ 6C0C             >len_NFA         defl    $ - temp_NFA
  98+ 6C0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  98+ 6C08             >
  98+ 6C08 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  98+ 6C09 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  98+ 6C0D             >                org     $-1                 // alter last byte of Name just above to set
  98+ 6C0C D2          >                db      {b $} | END_BIT     // msb as name end
  98+ 6C0D             >
  98+ 6C0D F4 6B       >                dw      last_NFA            // Link to previous definition Name
  98+ 6C0F             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  98+ 6C0F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  98+ 6C12             >
  98+ 6C12             >
  98+ 6C12             >                endif           ; ok        // for other definitions it "points" the correct handler
  98+ 6C12             >                // Use of "; ok" to suppress "warning[fwdref]"
  98+ 6C12             >
  98+ 6C12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  99+ 6C12
 100+ 6C12 68 76                        dw      CREATE                  // create
 101+ 6C14 61 6E                        dw      CCOMMA                  // c,
 102+ 6C16 4E 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 103+ 6C18
 104+ 6C18
 105+ 6C18              User_Ptr:
 106+ 6C18                              // via call coded in CFA
 107+ 6C18 E1                           pop     hl
 108+ 6C19
 109+ 6C19 5E                           ld      e, (hl)
 110+ 6C1A 16 00                        ld      d, 0
 111+ 6C1C 2A 94 63                     ld      hl, (USER_Pointer)
 112+ 6C1F 19                           add     hl, de
 113+ 6C20
 114+ 6C20                              psh1
 114+ 6C20 E5          >                push    hl
 114+ 6C21 DD E9       >                jp      (ix)
 115+ 6C23
 116+ 6C23              //  ______________________________________________________________________
 117+ 6C23              //
 118+ 6C23                              Constant_Def ZERO       ,   "0"     ,   0
 118+ 6C23             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 118+ 6C23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 118+ 6C23             >
 118+ 6C23             >                // dummy db directives used to calculate length of namec
 118+ 6C23 30          >                db      "0"
 118+ 6C24             >len_NFA         defl    $ - temp_NFA
 118+ 6C24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 118+ 6C23             >
 118+ 6C23 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 118+ 6C24 30          >                db      "0"               // name string in 7-bit ascii, but
 118+ 6C25             >                org     $-1                 // alter last byte of Name just above to set
 118+ 6C24 B0          >                db      {b $} | END_BIT     // msb as name end
 118+ 6C25             >
 118+ 6C25 08 6C       >                dw      last_NFA            // Link to previous definition Name
 118+ 6C27             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 118+ 6C27 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 118+ 6C2A             >
 118+ 6C2A             >
 118+ 6C2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 118+ 6C2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 118+ 6C2A             >
 118+ 6C2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 118+ 6C2A 00 00       >                dw      0
 119+ 6C2C                              Constant_Def ONE        ,   "1"     ,   1
 119+ 6C2C             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 119+ 6C2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C2C             >
 119+ 6C2C             >                // dummy db directives used to calculate length of namec
 119+ 6C2C 31          >                db      "1"
 119+ 6C2D             >len_NFA         defl    $ - temp_NFA
 119+ 6C2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C2C             >
 119+ 6C2C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C2D 31          >                db      "1"               // name string in 7-bit ascii, but
 119+ 6C2E             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C2D B1          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C2E             >
 119+ 6C2E 23 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C30             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C30 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C33             >
 119+ 6C33             >
 119+ 6C33             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C33             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C33             >
 119+ 6C33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C33 01 00       >                dw      1
 120+ 6C35                              Constant_Def TWO        ,   "2"     ,   2
 120+ 6C35             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 120+ 6C35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C35             >
 120+ 6C35             >                // dummy db directives used to calculate length of namec
 120+ 6C35 32          >                db      "2"
 120+ 6C36             >len_NFA         defl    $ - temp_NFA
 120+ 6C36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C35             >
 120+ 6C35 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C36 32          >                db      "2"               // name string in 7-bit ascii, but
 120+ 6C37             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C36 B2          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C37             >
 120+ 6C37 2C 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C39             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C39 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C3C             >
 120+ 6C3C             >
 120+ 6C3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C3C             >
 120+ 6C3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C3C 02 00       >                dw      2
 121+ 6C3E                              Constant_Def THREE      ,   "3"     ,   3
 121+ 6C3E             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 121+ 6C3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C3E             >
 121+ 6C3E             >                // dummy db directives used to calculate length of namec
 121+ 6C3E 33          >                db      "3"
 121+ 6C3F             >len_NFA         defl    $ - temp_NFA
 121+ 6C3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C3E             >
 121+ 6C3E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C3F 33          >                db      "3"               // name string in 7-bit ascii, but
 121+ 6C40             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C3F B3          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C40             >
 121+ 6C40 35 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C42             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C42 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C45             >
 121+ 6C45             >
 121+ 6C45             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C45             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C45             >
 121+ 6C45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C45 03 00       >                dw      3
 122+ 6C47                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 122+ 6C47             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 122+ 6C47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C47             >
 122+ 6C47             >                // dummy db directives used to calculate length of namec
 122+ 6C47 2D 31       >                db      "-1"
 122+ 6C49             >len_NFA         defl    $ - temp_NFA
 122+ 6C49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C47             >
 122+ 6C47 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C48 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 122+ 6C4A             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C49 B1          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C4A             >
 122+ 6C4A 3E 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C4C             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C4C CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C4F             >
 122+ 6C4F             >
 122+ 6C4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C4F             >
 122+ 6C4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C4F FF FF       >                dw      -1
 123+ 6C51                              Constant_Def BL         ,   "BL"    , $20
 123+ 6C51             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 123+ 6C51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C51             >
 123+ 6C51             >                // dummy db directives used to calculate length of namec
 123+ 6C51 42 4C       >                db      "BL"
 123+ 6C53             >len_NFA         defl    $ - temp_NFA
 123+ 6C53             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C51             >
 123+ 6C51 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C52 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 123+ 6C54             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C53 CC          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C54             >
 123+ 6C54 47 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C56             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C56 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C59             >
 123+ 6C59             >
 123+ 6C59             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C59             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C59             >
 123+ 6C59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C59 20 00       >                dw      $20
 124+ 6C5B                              Constant_Def CL         ,   "C/L"   ,  64
 124+ 6C5B             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 124+ 6C5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C5B             >
 124+ 6C5B             >                // dummy db directives used to calculate length of namec
 124+ 6C5B 43 2F 4C    >                db      "C/L"
 124+ 6C5E             >len_NFA         defl    $ - temp_NFA
 124+ 6C5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C5B             >
 124+ 6C5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C5C 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 124+ 6C5F             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C5E CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C5F             >
 124+ 6C5F 51 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C61             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C61 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C64             >
 124+ 6C64             >
 124+ 6C64             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C64             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C64             >
 124+ 6C64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C64 40 00       >                dw      64
 125+ 6C66                              Constant_Def BBUF       ,   "B/BUF" , 512
 125+ 6C66             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 125+ 6C66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C66             >
 125+ 6C66             >                // dummy db directives used to calculate length of namec
 125+ 6C66 42 2F 42 55 >                db      "B/BUF"
 125+ 6C6A 46          >
 125+ 6C6B             >len_NFA         defl    $ - temp_NFA
 125+ 6C6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C66             >
 125+ 6C66 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C67 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 125+ 6C6B 46          >
 125+ 6C6C             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C6B C6          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C6C             >
 125+ 6C6C 5B 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C6E             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C6E CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C71             >
 125+ 6C71             >
 125+ 6C71             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C71             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C71             >
 125+ 6C71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C71 00 02       >                dw      512
 126+ 6C73                              Constant_Def BSCR       ,   "B/SCR" ,   2
 126+ 6C73             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 126+ 6C73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C73             >
 126+ 6C73             >                // dummy db directives used to calculate length of namec
 126+ 6C73 42 2F 53 43 >                db      "B/SCR"
 126+ 6C77 52          >
 126+ 6C78             >len_NFA         defl    $ - temp_NFA
 126+ 6C78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C73             >
 126+ 6C73 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C74 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 126+ 6C78 52          >
 126+ 6C79             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C78 D2          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C79             >
 126+ 6C79 66 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C7B             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C7B CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C7E             >
 126+ 6C7E             >
 126+ 6C7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C7E             >
 126+ 6C7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C7E 02 00       >                dw      2
 127+ 6C80                              Constant_Def LSCR       ,   "L/SCR" ,  16
 127+ 6C80             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 127+ 6C80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C80             >
 127+ 6C80             >                // dummy db directives used to calculate length of namec
 127+ 6C80 4C 2F 53 43 >                db      "L/SCR"
 127+ 6C84 52          >
 127+ 6C85             >len_NFA         defl    $ - temp_NFA
 127+ 6C85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C80             >
 127+ 6C80 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C81 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 127+ 6C85 52          >
 127+ 6C86             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C85 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C86             >
 127+ 6C86 73 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C88             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C88 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C8B             >
 127+ 6C8B             >
 127+ 6C8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C8B             >
 127+ 6C8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C8B 10 00       >                dw      16
 128+ 6C8D
 129+ 6C8D              //  ______________________________________________________________________
 130+ 6C8D              //
 131+ 6C8D              // +origin         --
 132+ 6C8D              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 133+ 6C8D              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 134+ 6C8D              //              dw      PLUS                    // +
 135+ 6C8D              //              dw      EXIT                    // ;
 136+ 6C8D                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 136+ 6C8D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 136+ 6C8D             >
 136+ 6C8D             >                // dummy db directives used to calculate length of namec
 136+ 6C8D 2B 4F 52 49 >                db      "+ORIGIN"
 136+ 6C91 47 49 4E    >
 136+ 6C94             >len_NFA         defl    $ - temp_NFA
 136+ 6C94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 136+ 6C8D             >
 136+ 6C8D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 136+ 6C8E 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 136+ 6C92 47 49 4E    >
 136+ 6C95             >                org     $-1                 // alter last byte of Name just above to set
 136+ 6C94 CE          >                db      {b $} | END_BIT     // msb as name end
 136+ 6C95             >
 136+ 6C95 80 6C       >                dw      last_NFA            // Link to previous definition Name
 136+ 6C97             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 136+ 6C97 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 136+ 6C97 ~           >
 136+ 6C97 ~           >
 136+ 6C97             >                endif           ; ok        // for other definitions it "points" the correct handler
 136+ 6C97             >                // Use of "; ok" to suppress "warning[fwdref]"
 136+ 6C97             >
 136+ 6C97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 137+ 6C97 E1                           pop     hl
 138+ 6C98 11 66 63                     ld      de, Cold_origin
 139+ 6C9B 19                           add     hl, de
 140+ 6C9C E5                           push    hl
 141+ 6C9D                              next
 141+ 6C9D DD E9       >                jp      (ix)
 142+ 6C9F
 143+ 6C9F
 144+ 6C9F              //  ______________________________________________________________________
 145+ 6C9F              //
 146+ 6C9F                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 146+ 6C9F             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 146+ 6C9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 146+ 6C9F             >
 146+ 6C9F             >                // dummy db directives used to calculate length of namec
 146+ 6C9F 28 4E 45 58 >                db      "(NEXT)"
 146+ 6CA3 54 29       >
 146+ 6CA5             >len_NFA         defl    $ - temp_NFA
 146+ 6CA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 146+ 6C9F             >
 146+ 6C9F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 146+ 6CA0 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 146+ 6CA4 54 29       >
 146+ 6CA6             >                org     $-1                 // alter last byte of Name just above to set
 146+ 6CA5 A9          >                db      {b $} | END_BIT     // msb as name end
 146+ 6CA6             >
 146+ 6CA6 8D 6C       >                dw      last_NFA            // Link to previous definition Name
 146+ 6CA8             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 146+ 6CA8 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 146+ 6CAB             >
 146+ 6CAB             >
 146+ 6CAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 146+ 6CAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 146+ 6CAB             >
 146+ 6CAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 146+ 6CAB 98 63       >                dw      Next_Ptr
 147+ 6CAD
 148+ 6CAD              //  ______________________________________________________________________
 149+ 6CAD              //
 150+ 6CAD
 151+ 6CAD                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 151+ 6CAD             >                New_Def  S0, "S0", User_Ptr, is_normal
 151+ 6CAD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 6CAD             >
 151+ 6CAD             >                // dummy db directives used to calculate length of namec
 151+ 6CAD 53 30       >                db      "S0"
 151+ 6CAF             >len_NFA         defl    $ - temp_NFA
 151+ 6CAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 6CAD             >
 151+ 6CAD 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 6CAE 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 151+ 6CB0             >                org     $-1                 // alter last byte of Name just above to set
 151+ 6CAF B0          >                db      {b $} | END_BIT     // msb as name end
 151+ 6CB0             >
 151+ 6CB0 9F 6C       >                dw      last_NFA            // Link to previous definition Name
 151+ 6CB2             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 6CB2 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 151+ 6CB5             >
 151+ 6CB5             >
 151+ 6CB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 6CB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 6CB5             >
 151+ 6CB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 6CB5 06          >                db      06
 152+ 6CB6                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 152+ 6CB6             >                New_Def  R0, "R0", User_Ptr, is_normal
 152+ 6CB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CB6             >
 152+ 6CB6             >                // dummy db directives used to calculate length of namec
 152+ 6CB6 52 30       >                db      "R0"
 152+ 6CB8             >len_NFA         defl    $ - temp_NFA
 152+ 6CB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CB6             >
 152+ 6CB6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CB7 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 152+ 6CB9             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CB8 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CB9             >
 152+ 6CB9 AD 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CBB             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CBB CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CBE             >
 152+ 6CBE             >
 152+ 6CBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CBE             >
 152+ 6CBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CBE 08          >                db      08
 153+ 6CBF                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 153+ 6CBF             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 153+ 6CBF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CBF             >
 153+ 6CBF             >                // dummy db directives used to calculate length of namec
 153+ 6CBF 54 49 42    >                db      "TIB"
 153+ 6CC2             >len_NFA         defl    $ - temp_NFA
 153+ 6CC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CBF             >
 153+ 6CBF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CC0 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 153+ 6CC3             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CC2 C2          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CC3             >
 153+ 6CC3 B6 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CC5             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CC5 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CC8             >
 153+ 6CC8             >
 153+ 6CC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CC8             >
 153+ 6CC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CC8 0A          >                db      10
 154+ 6CC9                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 154+ 6CC9             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 154+ 6CC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CC9             >
 154+ 6CC9             >                // dummy db directives used to calculate length of namec
 154+ 6CC9 57 49 44 54 >                db      "WIDTH"
 154+ 6CCD 48          >
 154+ 6CCE             >len_NFA         defl    $ - temp_NFA
 154+ 6CCE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CC9             >
 154+ 6CC9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CCA 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 154+ 6CCE 48          >
 154+ 6CCF             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CCE C8          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CCF             >
 154+ 6CCF BF 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CD1             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CD1 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CD4             >
 154+ 6CD4             >
 154+ 6CD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CD4             >
 154+ 6CD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CD4 0C          >                db      12
 155+ 6CD5                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 155+ 6CD5             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 155+ 6CD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CD5             >
 155+ 6CD5             >                // dummy db directives used to calculate length of namec
 155+ 6CD5 57 41 52 4E >                db      "WARNING"
 155+ 6CD9 49 4E 47    >
 155+ 6CDC             >len_NFA         defl    $ - temp_NFA
 155+ 6CDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CD5             >
 155+ 6CD5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CD6 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 155+ 6CDA 49 4E 47    >
 155+ 6CDD             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CDC C7          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CDD             >
 155+ 6CDD C9 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CDF             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CDF CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CE2             >
 155+ 6CE2             >
 155+ 6CE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CE2             >
 155+ 6CE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CE2 0E          >                db      14
 156+ 6CE3                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 156+ 6CE3             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 156+ 6CE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CE3             >
 156+ 6CE3             >                // dummy db directives used to calculate length of namec
 156+ 6CE3 46 45 4E 43 >                db      "FENCE"
 156+ 6CE7 45          >
 156+ 6CE8             >len_NFA         defl    $ - temp_NFA
 156+ 6CE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CE3             >
 156+ 6CE3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CE4 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 156+ 6CE8 45          >
 156+ 6CE9             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CE8 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CE9             >
 156+ 6CE9 D5 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CEB             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CEB CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CEE             >
 156+ 6CEE             >
 156+ 6CEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CEE             >
 156+ 6CEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CEE 10          >                db      16
 157+ 6CEF                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 157+ 6CEF             >                New_Def  DP, "DP", User_Ptr, is_normal
 157+ 6CEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CEF             >
 157+ 6CEF             >                // dummy db directives used to calculate length of namec
 157+ 6CEF 44 50       >                db      "DP"
 157+ 6CF1             >len_NFA         defl    $ - temp_NFA
 157+ 6CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CEF             >
 157+ 6CEF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CF0 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 157+ 6CF2             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6CF1 D0          >                db      {b $} | END_BIT     // msb as name end
 157+ 6CF2             >
 157+ 6CF2 E3 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6CF4             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6CF4 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6CF7             >
 157+ 6CF7             >
 157+ 6CF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6CF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6CF7             >
 157+ 6CF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6CF7 12          >                db      18
 158+ 6CF8                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 158+ 6CF8             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 158+ 6CF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6CF8             >
 158+ 6CF8             >                // dummy db directives used to calculate length of namec
 158+ 6CF8 56 4F 43 2D >                db      "VOC-LINK"
 158+ 6CFC 4C 49 4E 4B >
 158+ 6D00             >len_NFA         defl    $ - temp_NFA
 158+ 6D00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6CF8             >
 158+ 6CF8 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6CF9 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 158+ 6CFD 4C 49 4E 4B >
 158+ 6D01             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D00 CB          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D01             >
 158+ 6D01 EF 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D03             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D03 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D06             >
 158+ 6D06             >
 158+ 6D06             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D06             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D06             >
 158+ 6D06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D06 14          >                db      20
 159+ 6D07                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 159+ 6D07             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 159+ 6D07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D07             >
 159+ 6D07             >                // dummy db directives used to calculate length of namec
 159+ 6D07 46 49 52 53 >                db      "FIRST"
 159+ 6D0B 54          >
 159+ 6D0C             >len_NFA         defl    $ - temp_NFA
 159+ 6D0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D07             >
 159+ 6D07 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D08 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 159+ 6D0C 54          >
 159+ 6D0D             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D0C D4          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D0D             >
 159+ 6D0D F8 6C       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D0F             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D0F CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D12             >
 159+ 6D12             >
 159+ 6D12             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D12             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D12             >
 159+ 6D12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D12 16          >                db      22
 160+ 6D13                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 160+ 6D13             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 160+ 6D13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D13             >
 160+ 6D13             >                // dummy db directives used to calculate length of namec
 160+ 6D13 4C 49 4D 49 >                db      "LIMIT"
 160+ 6D17 54          >
 160+ 6D18             >len_NFA         defl    $ - temp_NFA
 160+ 6D18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D13             >
 160+ 6D13 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D14 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 160+ 6D18 54          >
 160+ 6D19             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D18 D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D19             >
 160+ 6D19 07 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D1B             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D1B CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D1E             >
 160+ 6D1E             >
 160+ 6D1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D1E             >
 160+ 6D1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D1E 18          >                db      24
 161+ 6D1F                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 161+ 6D1F             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 161+ 6D1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D1F             >
 161+ 6D1F             >                // dummy db directives used to calculate length of namec
 161+ 6D1F 45 58 50    >                db      "EXP"
 161+ 6D22             >len_NFA         defl    $ - temp_NFA
 161+ 6D22             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D1F             >
 161+ 6D1F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D20 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 161+ 6D23             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D22 D0          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D23             >
 161+ 6D23 13 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D25             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D25 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D28             >
 161+ 6D28             >
 161+ 6D28             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D28             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D28             >
 161+ 6D28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D28 1A          >                db      26
 162+ 6D29                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 162+ 6D29             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 162+ 6D29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D29             >
 162+ 6D29             >                // dummy db directives used to calculate length of namec
 162+ 6D29 4E 4D 4F 44 >                db      "NMODE"
 162+ 6D2D 45          >
 162+ 6D2E             >len_NFA         defl    $ - temp_NFA
 162+ 6D2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D29             >
 162+ 6D29 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D2A 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 162+ 6D2E 45          >
 162+ 6D2F             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D2E C5          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D2F             >
 162+ 6D2F 1F 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D31             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D31 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D34             >
 162+ 6D34             >
 162+ 6D34             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D34             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D34             >
 162+ 6D34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D34 1C          >                db      28
 163+ 6D35                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 163+ 6D35             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 163+ 6D35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D35             >
 163+ 6D35             >                // dummy db directives used to calculate length of namec
 163+ 6D35 42 4C 4B    >                db      "BLK"
 163+ 6D38             >len_NFA         defl    $ - temp_NFA
 163+ 6D38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D35             >
 163+ 6D35 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D36 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 163+ 6D39             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D38 CB          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D39             >
 163+ 6D39 29 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D3B             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D3B CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D3E             >
 163+ 6D3E             >
 163+ 6D3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D3E             >
 163+ 6D3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D3E 1E          >                db      30
 164+ 6D3F                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 164+ 6D3F             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 164+ 6D3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D3F             >
 164+ 6D3F             >                // dummy db directives used to calculate length of namec
 164+ 6D3F 3E 49 4E    >                db      ">IN"
 164+ 6D42             >len_NFA         defl    $ - temp_NFA
 164+ 6D42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D3F             >
 164+ 6D3F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D40 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 164+ 6D43             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D42 CE          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D43             >
 164+ 6D43 35 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D45             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D45 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D48             >
 164+ 6D48             >
 164+ 6D48             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D48             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D48             >
 164+ 6D48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D48 20          >                db      32
 165+ 6D49                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 165+ 6D49             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 165+ 6D49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D49             >
 165+ 6D49             >                // dummy db directives used to calculate length of namec
 165+ 6D49 4F 55 54    >                db      "OUT"
 165+ 6D4C             >len_NFA         defl    $ - temp_NFA
 165+ 6D4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D49             >
 165+ 6D49 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D4A 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 165+ 6D4D             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D4C D4          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D4D             >
 165+ 6D4D 3F 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D4F             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D4F CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D52             >
 165+ 6D52             >
 165+ 6D52             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D52             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D52             >
 165+ 6D52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D52 22          >                db      34
 166+ 6D53                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 166+ 6D53             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 166+ 6D53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D53             >
 166+ 6D53             >                // dummy db directives used to calculate length of namec
 166+ 6D53 53 43 52    >                db      "SCR"
 166+ 6D56             >len_NFA         defl    $ - temp_NFA
 166+ 6D56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D53             >
 166+ 6D53 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D54 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 166+ 6D57             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D56 D2          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D57             >
 166+ 6D57 49 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D59             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D59 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D5C             >
 166+ 6D5C             >
 166+ 6D5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D5C             >
 166+ 6D5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D5C 24          >                db      36
 167+ 6D5D                              User_Def OFFSET     , "OFFSET"    , 38 //
 167+ 6D5D             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 167+ 6D5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D5D             >
 167+ 6D5D             >                // dummy db directives used to calculate length of namec
 167+ 6D5D 4F 46 46 53 >                db      "OFFSET"
 167+ 6D61 45 54       >
 167+ 6D63             >len_NFA         defl    $ - temp_NFA
 167+ 6D63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D5D             >
 167+ 6D5D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D5E 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 167+ 6D62 45 54       >
 167+ 6D64             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D63 D4          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D64             >
 167+ 6D64 53 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D66             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D66 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D69             >
 167+ 6D69             >
 167+ 6D69             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D69             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D69             >
 167+ 6D69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D69 26          >                db      38
 168+ 6D6A                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 168+ 6D6A             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 168+ 6D6A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D6A             >
 168+ 6D6A             >                // dummy db directives used to calculate length of namec
 168+ 6D6A 43 4F 4E 54 >                db      "CONTEXT"
 168+ 6D6E 45 58 54    >
 168+ 6D71             >len_NFA         defl    $ - temp_NFA
 168+ 6D71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D6A             >
 168+ 6D6A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D6B 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 168+ 6D6F 45 58 54    >
 168+ 6D72             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D71 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D72             >
 168+ 6D72 5D 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D74             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D74 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D77             >
 168+ 6D77             >
 168+ 6D77             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D77             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D77             >
 168+ 6D77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D77 28          >                db      40
 169+ 6D78                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 169+ 6D78             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 169+ 6D78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D78             >
 169+ 6D78             >                // dummy db directives used to calculate length of namec
 169+ 6D78 43 55 52 52 >                db      "CURRENT"
 169+ 6D7C 45 4E 54    >
 169+ 6D7F             >len_NFA         defl    $ - temp_NFA
 169+ 6D7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D78             >
 169+ 6D78 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D79 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 169+ 6D7D 45 4E 54    >
 169+ 6D80             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D7F D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D80             >
 169+ 6D80 6A 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D82             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D82 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D85             >
 169+ 6D85             >
 169+ 6D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D85             >
 169+ 6D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D85 2A          >                db      42
 170+ 6D86                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 170+ 6D86             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 170+ 6D86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D86             >
 170+ 6D86             >                // dummy db directives used to calculate length of namec
 170+ 6D86 53 54 41 54 >                db      "STATE"
 170+ 6D8A 45          >
 170+ 6D8B             >len_NFA         defl    $ - temp_NFA
 170+ 6D8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D86             >
 170+ 6D86 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D87 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 170+ 6D8B 45          >
 170+ 6D8C             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D8B C5          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D8C             >
 170+ 6D8C 78 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D8E             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D8E CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D91             >
 170+ 6D91             >
 170+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D91             >
 170+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D91 2C          >                db      44
 171+ 6D92                              User_Def BASE       , "BASE"      , 46 //
 171+ 6D92             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 171+ 6D92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D92             >
 171+ 6D92             >                // dummy db directives used to calculate length of namec
 171+ 6D92 42 41 53 45 >                db      "BASE"
 171+ 6D96             >len_NFA         defl    $ - temp_NFA
 171+ 6D96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D92             >
 171+ 6D92 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D93 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 171+ 6D97             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6D96 C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6D97             >
 171+ 6D97 86 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6D99             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6D99 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6D9C             >
 171+ 6D9C             >
 171+ 6D9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6D9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6D9C             >
 171+ 6D9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6D9C 2E          >                db      46
 172+ 6D9D                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 172+ 6D9D             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 172+ 6D9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6D9D             >
 172+ 6D9D             >                // dummy db directives used to calculate length of namec
 172+ 6D9D 44 50 4C    >                db      "DPL"
 172+ 6DA0             >len_NFA         defl    $ - temp_NFA
 172+ 6DA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6D9D             >
 172+ 6D9D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6D9E 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 172+ 6DA1             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DA0 CC          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DA1             >
 172+ 6DA1 92 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DA3             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DA3 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DA6             >
 172+ 6DA6             >
 172+ 6DA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DA6             >
 172+ 6DA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DA6 30          >                db      48
 173+ 6DA7                              User_Def FLD        , "FLD"       , 50 // output field width
 173+ 6DA7             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 173+ 6DA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DA7             >
 173+ 6DA7             >                // dummy db directives used to calculate length of namec
 173+ 6DA7 46 4C 44    >                db      "FLD"
 173+ 6DAA             >len_NFA         defl    $ - temp_NFA
 173+ 6DAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DA7             >
 173+ 6DA7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DA8 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 173+ 6DAB             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DAA C4          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DAB             >
 173+ 6DAB 9D 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DAD             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DAD CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DB0             >
 173+ 6DB0             >
 173+ 6DB0             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DB0             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DB0             >
 173+ 6DB0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DB0 32          >                db      50
 174+ 6DB1                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 174+ 6DB1             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 174+ 6DB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DB1             >
 174+ 6DB1             >                // dummy db directives used to calculate length of namec
 174+ 6DB1 43 53 50    >                db      "CSP"
 174+ 6DB4             >len_NFA         defl    $ - temp_NFA
 174+ 6DB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DB1             >
 174+ 6DB1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DB2 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 174+ 6DB5             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DB4 D0          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DB5             >
 174+ 6DB5 A7 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DB7             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DB7 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DBA             >
 174+ 6DBA             >
 174+ 6DBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DBA             >
 174+ 6DBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DBA 34          >                db      52
 175+ 6DBB                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 175+ 6DBB             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 175+ 6DBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DBB             >
 175+ 6DBB             >                // dummy db directives used to calculate length of namec
 175+ 6DBB 52 23       >                db      "R#"
 175+ 6DBD             >len_NFA         defl    $ - temp_NFA
 175+ 6DBD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DBB             >
 175+ 6DBB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DBC 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 175+ 6DBE             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DBD A3          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DBE             >
 175+ 6DBE B1 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DC0             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DC0 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DC3             >
 175+ 6DC3             >
 175+ 6DC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DC3             >
 175+ 6DC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DC3 36          >                db      54
 176+ 6DC4                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 176+ 6DC4             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 176+ 6DC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DC4             >
 176+ 6DC4             >                // dummy db directives used to calculate length of namec
 176+ 6DC4 48 4C 44    >                db      "HLD"
 176+ 6DC7             >len_NFA         defl    $ - temp_NFA
 176+ 6DC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DC4             >
 176+ 6DC4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DC5 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 176+ 6DC8             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DC7 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DC8             >
 176+ 6DC8 BB 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DCA             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DCA CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DCD             >
 176+ 6DCD             >
 176+ 6DCD             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DCD             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DCD             >
 176+ 6DCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DCD 38          >                db      56
 177+ 6DCE                              User_Def USE        , "USE"       , 58 // address of last used block
 177+ 6DCE             >                New_Def  USE, "USE", User_Ptr, is_normal
 177+ 6DCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DCE             >
 177+ 6DCE             >                // dummy db directives used to calculate length of namec
 177+ 6DCE 55 53 45    >                db      "USE"
 177+ 6DD1             >len_NFA         defl    $ - temp_NFA
 177+ 6DD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DCE             >
 177+ 6DCE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DCF 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 177+ 6DD2             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DD1 C5          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DD2             >
 177+ 6DD2 C4 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DD4             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DD4 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DD7             >
 177+ 6DD7             >
 177+ 6DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DD7             >
 177+ 6DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DD7 3A          >                db      58
 178+ 6DD8                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 178+ 6DD8             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 178+ 6DD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DD8             >
 178+ 6DD8             >                // dummy db directives used to calculate length of namec
 178+ 6DD8 50 52 45 56 >                db      "PREV"
 178+ 6DDC             >len_NFA         defl    $ - temp_NFA
 178+ 6DDC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DD8             >
 178+ 6DD8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DD9 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 178+ 6DDD             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DDC D6          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DDD             >
 178+ 6DDD CE 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DDF             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DDF CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DE2             >
 178+ 6DE2             >
 178+ 6DE2             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DE2             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DE2             >
 178+ 6DE2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DE2 3C          >                db      60
 179+ 6DE3                              User_Def LP         , "LP"        , 62 // line printer (not used)
 179+ 6DE3             >                New_Def  LP, "LP", User_Ptr, is_normal
 179+ 6DE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DE3             >
 179+ 6DE3             >                // dummy db directives used to calculate length of namec
 179+ 6DE3 4C 50       >                db      "LP"
 179+ 6DE5             >len_NFA         defl    $ - temp_NFA
 179+ 6DE5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DE3             >
 179+ 6DE3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DE4 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 179+ 6DE6             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DE5 D0          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DE6             >
 179+ 6DE6 D8 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DE8             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DE8 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DEB             >
 179+ 6DEB             >
 179+ 6DEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DEB             >
 179+ 6DEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DEB 3E          >                db      62
 180+ 6DEC                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 180+ 6DEC             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 180+ 6DEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DEC             >
 180+ 6DEC             >                // dummy db directives used to calculate length of namec
 180+ 6DEC 50 4C 41 43 >                db      "PLACE"
 180+ 6DF0 45          >
 180+ 6DF1             >len_NFA         defl    $ - temp_NFA
 180+ 6DF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DEC             >
 180+ 6DEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DED 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 180+ 6DF1 45          >
 180+ 6DF2             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6DF1 C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6DF2             >
 180+ 6DF2 E3 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6DF4             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6DF4 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6DF7             >
 180+ 6DF7             >
 180+ 6DF7             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6DF7             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6DF7             >
 180+ 6DF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6DF7 40          >                db      64
 181+ 6DF8                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 181+ 6DF8             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 181+ 6DF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6DF8             >
 181+ 6DF8             >                // dummy db directives used to calculate length of namec
 181+ 6DF8 53 4F 55 52 >                db      "SOURCE-ID"
 181+ 6DFC 43 45 2D 49 >
 181+ 6E00 44          >
 181+ 6E01             >len_NFA         defl    $ - temp_NFA
 181+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6DF8             >
 181+ 6DF8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6DF9 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 181+ 6DFD 43 45 2D 49 >
 181+ 6E01 44          >
 181+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E01 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E02             >
 181+ 6E02 EC 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E04             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E04 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E07             >
 181+ 6E07             >
 181+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E07             >
 181+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E07 42          >                db      66
 182+ 6E08                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 182+ 6E08             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 182+ 6E08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E08             >
 182+ 6E08             >                // dummy db directives used to calculate length of namec
 182+ 6E08 53 50 41 4E >                db      "SPAN"
 182+ 6E0C             >len_NFA         defl    $ - temp_NFA
 182+ 6E0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E08             >
 182+ 6E08 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E09 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 182+ 6E0D             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E0C CE          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E0D             >
 182+ 6E0D F8 6D       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E0F             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E0F CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E12             >
 182+ 6E12             >
 182+ 6E12             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E12             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E12             >
 182+ 6E12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E12 44          >                db      68
 183+ 6E13                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 183+ 6E13             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 183+ 6E13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E13             >
 183+ 6E13             >                // dummy db directives used to calculate length of namec
 183+ 6E13 48 41 4E 44 >                db      "HANDLER"
 183+ 6E17 4C 45 52    >
 183+ 6E1A             >len_NFA         defl    $ - temp_NFA
 183+ 6E1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E13             >
 183+ 6E13 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E14 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 183+ 6E18 4C 45 52    >
 183+ 6E1B             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E1A D2          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E1B             >
 183+ 6E1B 08 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E1D             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E1D CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E20             >
 183+ 6E20             >
 183+ 6E20             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E20             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E20             >
 183+ 6E20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E20 46          >                db      70
 184+ 6E21                              User_Def HP         , "HP"        , 72 // heap-pointer address
 184+ 6E21             >                New_Def  HP, "HP", User_Ptr, is_normal
 184+ 6E21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E21             >
 184+ 6E21             >                // dummy db directives used to calculate length of namec
 184+ 6E21 48 50       >                db      "HP"
 184+ 6E23             >len_NFA         defl    $ - temp_NFA
 184+ 6E23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E21             >
 184+ 6E21 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E22 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 184+ 6E24             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E23 D0          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E24             >
 184+ 6E24 13 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E26             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E26 CD 18 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E29             >
 184+ 6E29             >
 184+ 6E29             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E29             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E29             >
 184+ 6E29             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E29 48          >                db      72
 185+ 6E2A
 186+ 6E2A              //  ______________________________________________________________________
 187+ 6E2A              //
 188+ 6E2A              // here         -- a
 189+ 6E2A                              Colon_Def HERE, "HERE", is_normal
 189+ 6E2A             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 189+ 6E2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 6E2A             >
 189+ 6E2A             >                // dummy db directives used to calculate length of namec
 189+ 6E2A 48 45 52 45 >                db      "HERE"
 189+ 6E2E             >len_NFA         defl    $ - temp_NFA
 189+ 6E2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 6E2A             >
 189+ 6E2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 6E2B 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 189+ 6E2F             >                org     $-1                 // alter last byte of Name just above to set
 189+ 6E2E C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 6E2F             >
 189+ 6E2F 21 6E       >                dw      last_NFA            // Link to previous definition Name
 189+ 6E31             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 6E31 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 189+ 6E34             >
 189+ 6E34             >
 189+ 6E34             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 6E34             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 6E34             >
 189+ 6E34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 6E34 F4 6C D8 6A                  dw      DP, FETCH               // dp @
 191+ 6E38 F4 68                        dw      EXIT                    // ;
 192+ 6E3A
 193+ 6E3A              //  ______________________________________________________________________
 194+ 6E3A              //
 195+ 6E3A              // allot        n --
 196+ 6E3A                              Colon_Def ALLOT, "ALLOT", is_normal
 196+ 6E3A             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 196+ 6E3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 196+ 6E3A             >
 196+ 6E3A             >                // dummy db directives used to calculate length of namec
 196+ 6E3A 41 4C 4C 4F >                db      "ALLOT"
 196+ 6E3E 54          >
 196+ 6E3F             >len_NFA         defl    $ - temp_NFA
 196+ 6E3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 196+ 6E3A             >
 196+ 6E3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 196+ 6E3B 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 196+ 6E3F 54          >
 196+ 6E40             >                org     $-1                 // alter last byte of Name just above to set
 196+ 6E3F D4          >                db      {b $} | END_BIT     // msb as name end
 196+ 6E40             >
 196+ 6E40 2A 6E       >                dw      last_NFA            // Link to previous definition Name
 196+ 6E42             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 196+ 6E42 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 196+ 6E45             >
 196+ 6E45             >
 196+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 196+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 196+ 6E45             >
 196+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 197+ 6E45 F4 6C B9 6A                  dw      DP,  PLUSSTORE          // dp +!
 198+ 6E49 F4 68                        dw      EXIT                    // ;
 199+ 6E4B
 200+ 6E4B              //  ______________________________________________________________________
 201+ 6E4B              //
 202+ 6E4B              // comma        n --
 203+ 6E4B                              Colon_Def COMMA, ",", is_normal
 203+ 6E4B             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 203+ 6E4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 203+ 6E4B             >
 203+ 6E4B             >                // dummy db directives used to calculate length of namec
 203+ 6E4B 2C          >                db      ","
 203+ 6E4C             >len_NFA         defl    $ - temp_NFA
 203+ 6E4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 203+ 6E4B             >
 203+ 6E4B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 203+ 6E4C 2C          >                db      ","               // name string in 7-bit ascii, but
 203+ 6E4D             >                org     $-1                 // alter last byte of Name just above to set
 203+ 6E4C AC          >                db      {b $} | END_BIT     // msb as name end
 203+ 6E4D             >
 203+ 6E4D 3A 6E       >                dw      last_NFA            // Link to previous definition Name
 203+ 6E4F             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 203+ 6E4F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 203+ 6E52             >
 203+ 6E52             >
 203+ 6E52             >                endif           ; ok        // for other definitions it "points" the correct handler
 203+ 6E52             >                // Use of "; ok" to suppress "warning[fwdref]"
 203+ 6E52             >
 203+ 6E52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 204+ 6E52 31 6E E3 6A                  dw      HERE, STORE             // here !
 205+ 6E56 39 6C 42 6E                  dw      TWO, ALLOT              // 2 allot
 206+ 6E5A F4 68                        dw      EXIT                    // ;
 207+ 6E5C
 208+ 6E5C              //  ______________________________________________________________________
 209+ 6E5C              //
 210+ 6E5C              // ccomma       c --
 211+ 6E5C                              Colon_Def CCOMMA, "C,", is_normal
 211+ 6E5C             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 211+ 6E5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 211+ 6E5C             >
 211+ 6E5C             >                // dummy db directives used to calculate length of namec
 211+ 6E5C 43 2C       >                db      "C,"
 211+ 6E5E             >len_NFA         defl    $ - temp_NFA
 211+ 6E5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 211+ 6E5C             >
 211+ 6E5C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 211+ 6E5D 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 211+ 6E5F             >                org     $-1                 // alter last byte of Name just above to set
 211+ 6E5E AC          >                db      {b $} | END_BIT     // msb as name end
 211+ 6E5F             >
 211+ 6E5F 4B 6E       >                dw      last_NFA            // Link to previous definition Name
 211+ 6E61             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 211+ 6E61 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 211+ 6E64             >
 211+ 6E64             >
 211+ 6E64             >                endif           ; ok        // for other definitions it "points" the correct handler
 211+ 6E64             >                // Use of "; ok" to suppress "warning[fwdref]"
 211+ 6E64             >
 211+ 6E64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 212+ 6E64 31 6E FB 6A                  dw      HERE, CSTORE            // here c!
 213+ 6E68 30 6C 42 6E                  dw      ONE, ALLOT              // 1 allot
 214+ 6E6C F4 68                        dw      EXIT                    // ;
 215+ 6E6E
 216+ 6E6E              //  ______________________________________________________________________
 217+ 6E6E              //
 218+ 6E6E              // s>d          n -- d
 219+ 6E6E              // converts a single precision integer in a double precision
 220+ 6E6E                              New_Def S_TO_D, "S>D", is_code, is_normal
 220+ 6E6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6E6E             >
 220+ 6E6E             >                // dummy db directives used to calculate length of namec
 220+ 6E6E 53 3E 44    >                db      "S>D"
 220+ 6E71             >len_NFA         defl    $ - temp_NFA
 220+ 6E71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6E6E             >
 220+ 6E6E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6E6F 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 220+ 6E72             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6E71 C4          >                db      {b $} | END_BIT     // msb as name end
 220+ 6E72             >
 220+ 6E72 5C 6E       >                dw      last_NFA            // Link to previous definition Name
 220+ 6E74             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 6E74 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 6E74 ~           >
 220+ 6E74 ~           >
 220+ 6E74             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 6E74             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 6E74             >
 220+ 6E74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 6E74 D1                           pop     de
 222+ 6E75 21 00 00                     ld      hl, 0
 223+ 6E78 7A                           ld      a, d
 224+ 6E79 E6 80                        and     $80
 225+ 6E7B 28 01                        jr      z, S_to_D_Skip
 226+ 6E7D 2B                           dec     hl                  // $FFFF
 227+ 6E7E              S_to_D_Skip:
 228+ 6E7E D5                           push    de
 229+ 6E7F E5                           push    hl
 230+ 6E80                              next
 230+ 6E80 DD E9       >                jp      (ix)
 231+ 6E82
 232+ 6E82              //  ______________________________________________________________________
 233+ 6E82              //
 234+ 6E82              // -            n1 n2 -- n3
 235+ 6E82              // subtraction
 236+ 6E82                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6E82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6E82             >
 236+ 6E82             >                // dummy db directives used to calculate length of namec
 236+ 6E82 2D          >                db      "-"
 236+ 6E83             >len_NFA         defl    $ - temp_NFA
 236+ 6E83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6E82             >
 236+ 6E82 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6E83 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6E84             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6E83 AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6E84             >
 236+ 6E84 6E 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6E86             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6E86 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236+ 6E86 ~           >
 236+ 6E86 ~           >
 236+ 6E86             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6E86             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6E86             >
 236+ 6E86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6E86 D1                           pop     de
 238+ 6E87 E1                           pop     hl
 239+ 6E88 A7                           and     a
 240+ 6E89 ED 52                        sbc     hl, de
 241+ 6E8B
 242+ 6E8B                              psh1
 242+ 6E8B E5          >                push    hl
 242+ 6E8C DD E9       >                jp      (ix)
 243+ 6E8E
 244+ 6E8E              //  ______________________________________________________________________
 245+ 6E8E              //
 246+ 6E8E              // =            n1 n2 -- n3
 247+ 6E8E              // equals
 248+ 6E8E                              Colon_Def EQUALS, "=", is_normal
 248+ 6E8E             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6E8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6E8E             >
 248+ 6E8E             >                // dummy db directives used to calculate length of namec
 248+ 6E8E 3D          >                db      "="
 248+ 6E8F             >len_NFA         defl    $ - temp_NFA
 248+ 6E8F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6E8E             >
 248+ 6E8E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6E8F 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6E90             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6E8F BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6E90             >
 248+ 6E90 82 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6E92             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6E92 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6E95             >
 248+ 6E95             >
 248+ 6E95             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6E95             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6E95             >
 248+ 6E95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6E95 86 6E 51 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6E99 F4 68                        dw      EXIT                    // ;
 251+ 6E9B
 252+ 6E9B              //  ______________________________________________________________________
 253+ 6E9B              //
 254+ 6E9B              // u<           u1 u2 -- u3
 255+ 6E9B              // unsigned less-than
 256+ 6E9B                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6E9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6E9B             >
 256+ 6E9B             >                // dummy db directives used to calculate length of namec
 256+ 6E9B 55 3C       >                db      "U<"
 256+ 6E9D             >len_NFA         defl    $ - temp_NFA
 256+ 6E9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6E9B             >
 256+ 6E9B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6E9C 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6E9E             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6E9D BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6E9E             >
 256+ 6E9E 8E 6E       >                dw      last_NFA            // Link to previous definition Name
 256+ 6EA0             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6EA0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 256+ 6EA0 ~           >
 256+ 6EA0 ~           >
 256+ 6EA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6EA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6EA0             >
 256+ 6EA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6EA0 D1                           pop     de
 258+ 6EA1 E1                           pop     hl
 259+ 6EA2 A7                           and     a
 260+ 6EA3 ED 52                        sbc     hl, de
 261+ 6EA5 21 FF FF                     ld      hl, -1
 262+ 6EA8 38 01                        jr      c, ULess_Skip
 263+ 6EAA 23                               inc     hl
 264+ 6EAB              ULess_Skip:
 265+ 6EAB
 266+ 6EAB                              psh1
 266+ 6EAB E5          >                push    hl
 266+ 6EAC DD E9       >                jp      (ix)
 267+ 6EAE
 268+ 6EAE              //  ______________________________________________________________________
 269+ 6EAE              //
 270+ 6EAE              // <           n1 n2 -- n3
 271+ 6EAE              // less-than
 272+ 6EAE                              New_Def LESS, "<", is_code, is_normal
 272+ 6EAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 272+ 6EAE             >
 272+ 6EAE             >                // dummy db directives used to calculate length of namec
 272+ 6EAE 3C          >                db      "<"
 272+ 6EAF             >len_NFA         defl    $ - temp_NFA
 272+ 6EAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 272+ 6EAE             >
 272+ 6EAE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 272+ 6EAF 3C          >                db      "<"               // name string in 7-bit ascii, but
 272+ 6EB0             >                org     $-1                 // alter last byte of Name just above to set
 272+ 6EAF BC          >                db      {b $} | END_BIT     // msb as name end
 272+ 6EB0             >
 272+ 6EB0 9B 6E       >                dw      last_NFA            // Link to previous definition Name
 272+ 6EB2             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 272+ 6EB2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 272+ 6EB2 ~           >
 272+ 6EB2 ~           >
 272+ 6EB2             >                endif           ; ok        // for other definitions it "points" the correct handler
 272+ 6EB2             >                // Use of "; ok" to suppress "warning[fwdref]"
 272+ 6EB2             >
 272+ 6EB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 273+ 6EB2 D1                           pop     de
 274+ 6EB3 E1                           pop     hl
 275+ 6EB4 7C                           ld      a, h
 276+ 6EB5 EE 80                        xor     $80
 277+ 6EB7 67                           ld      h, a
 278+ 6EB8 7A                           ld      a, d
 279+ 6EB9 EE 80                        xor     $80
 280+ 6EBB 57                           ld      d, a
 281+ 6EBC A7                           and     a
 282+ 6EBD ED 52                        sbc     hl, de
 283+ 6EBF 21 FF FF                     ld      hl, -1
 284+ 6EC2 38 01                        jr      c, Less_Skip
 285+ 6EC4 23                               inc     hl
 286+ 6EC5              Less_Skip:
 287+ 6EC5
 288+ 6EC5                              psh1
 288+ 6EC5 E5          >                push    hl
 288+ 6EC6 DD E9       >                jp      (ix)
 289+ 6EC8
 290+ 6EC8              //  ______________________________________________________________________
 291+ 6EC8              //
 292+ 6EC8              // >            n1 n2 -- n3
 293+ 6EC8              // greater than
 294+ 6EC8                              Colon_Def GREATER, ">", is_normal
 294+ 6EC8             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 294+ 6EC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ 6EC8             >
 294+ 6EC8             >                // dummy db directives used to calculate length of namec
 294+ 6EC8 3E          >                db      ">"
 294+ 6EC9             >len_NFA         defl    $ - temp_NFA
 294+ 6EC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ 6EC8             >
 294+ 6EC8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ 6EC9 3E          >                db      ">"               // name string in 7-bit ascii, but
 294+ 6ECA             >                org     $-1                 // alter last byte of Name just above to set
 294+ 6EC9 BE          >                db      {b $} | END_BIT     // msb as name end
 294+ 6ECA             >
 294+ 6ECA AE 6E       >                dw      last_NFA            // Link to previous definition Name
 294+ 6ECC             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 6ECC CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 6ECF             >
 294+ 6ECF             >
 294+ 6ECF             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 6ECF             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 6ECF             >
 294+ 6ECF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 6ECF 4C 6A B2 6E                  dw      SWAP, LESS              // swap <
 296+ 6ED3 F4 68                        dw      EXIT                    // ;
 297+ 6ED5              //  ______________________________________________________________________
 298+ 6ED5              //
 299+ 6ED5              // min          n1 n2 -- n3
 300+ 6ED5              // minimum between n1 and n2
 301+ 6ED5                              Colon_Def MIN, "MIN" , is_normal
 301+ 6ED5             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 301+ 6ED5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 6ED5             >
 301+ 6ED5             >                // dummy db directives used to calculate length of namec
 301+ 6ED5 4D 49 4E    >                db      "MIN"
 301+ 6ED8             >len_NFA         defl    $ - temp_NFA
 301+ 6ED8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 6ED5             >
 301+ 6ED5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 6ED6 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 301+ 6ED9             >                org     $-1                 // alter last byte of Name just above to set
 301+ 6ED8 CE          >                db      {b $} | END_BIT     // msb as name end
 301+ 6ED9             >
 301+ 6ED9 C8 6E       >                dw      last_NFA            // Link to previous definition Name
 301+ 6EDB             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 6EDB CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 6EDE             >
 301+ 6EDE             >
 301+ 6EDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 6EDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 6EDE             >
 301+ 6EDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 6EDE AC 6A                        dw      TWO_DUP                 // 2dup
 303+ 6EE0 CC 6E                        dw      GREATER                 // >
 304+ 6EE2 D8 63                        dw      ZBRANCH
 305+ 6EE4 04 00                        dw      Min_Skip - $   // if
 306+ 6EE6 4C 6A                        dw          SWAP                //      swap
 307+ 6EE8              Min_Skip:                                       // endif
 308+ 6EE8 2A 6A                        dw      DROP                    // drop
 309+ 6EEA F4 68                        dw      EXIT                    // ;
 310+ 6EEC
 311+ 6EEC              //  ______________________________________________________________________
 312+ 6EEC              //
 313+ 6EEC              // max          n1 n2 -- n3
 314+ 6EEC              // maximum between n1 and n2
 315+ 6EEC                              Colon_Def MAX, "MAX", is_normal
 315+ 6EEC             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 315+ 6EEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 315+ 6EEC             >
 315+ 6EEC             >                // dummy db directives used to calculate length of namec
 315+ 6EEC 4D 41 58    >                db      "MAX"
 315+ 6EEF             >len_NFA         defl    $ - temp_NFA
 315+ 6EEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 315+ 6EEC             >
 315+ 6EEC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 315+ 6EED 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 315+ 6EF0             >                org     $-1                 // alter last byte of Name just above to set
 315+ 6EEF D8          >                db      {b $} | END_BIT     // msb as name end
 315+ 6EF0             >
 315+ 6EF0 D5 6E       >                dw      last_NFA            // Link to previous definition Name
 315+ 6EF2             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 315+ 6EF2 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 315+ 6EF5             >
 315+ 6EF5             >
 315+ 6EF5             >                endif           ; ok        // for other definitions it "points" the correct handler
 315+ 6EF5             >                // Use of "; ok" to suppress "warning[fwdref]"
 315+ 6EF5             >
 315+ 6EF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 316+ 6EF5 AC 6A                        dw      TWO_DUP                 // 2dup
 317+ 6EF7 B2 6E                        dw      LESS                    // <
 318+ 6EF9 D8 63                        dw      ZBRANCH
 319+ 6EFB 04 00                        dw      Max_Skip - $   // if
 320+ 6EFD 4C 6A                        dw          SWAP                //      swap
 321+ 6EFF              Max_Skip:                                       // endif
 322+ 6EFF 2A 6A                        dw      DROP                    // drop
 323+ 6F01 F4 68                        dw      EXIT                    // ;
 324+ 6F03
 325+ 6F03              //  ______________________________________________________________________
 326+ 6F03              //
 327+ 6F03              // ?dup         n -- 0 | n n
 328+ 6F03              // duplicate if not zero
 329+ 6F03                              New_Def QDUP, "?DUP", is_code, is_normal
 329+ 6F03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 6F03             >
 329+ 6F03             >                // dummy db directives used to calculate length of namec
 329+ 6F03 3F 44 55 50 >                db      "?DUP"
 329+ 6F07             >len_NFA         defl    $ - temp_NFA
 329+ 6F07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 6F03             >
 329+ 6F03 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 6F04 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 329+ 6F08             >                org     $-1                 // alter last byte of Name just above to set
 329+ 6F07 D0          >                db      {b $} | END_BIT     // msb as name end
 329+ 6F08             >
 329+ 6F08 EC 6E       >                dw      last_NFA            // Link to previous definition Name
 329+ 6F0A             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 6F0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 329+ 6F0A ~           >
 329+ 6F0A ~           >
 329+ 6F0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 6F0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 6F0A             >
 329+ 6F0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 6F0A              QDup_Ptr:
 331+ 6F0A E1                           pop     hl
 332+ 6F0B 7C                           ld      a, h
 333+ 6F0C B5                           or      l
 334+ 6F0D 28 01                        jr      z, QDup_Skip
 335+ 6F0F E5                               push    hl
 336+ 6F10              QDup_Skip:
 337+ 6F10                              psh1
 337+ 6F10 E5          >                push    hl
 337+ 6F11 DD E9       >                jp      (ix)
 338+ 6F13
 339+ 6F13              //  ______________________________________________________________________
 340+ 6F13              //
 341+ 6F13              // -dup         n -- 0 | n n
 342+ 6F13              // duplicate if not zero
 343+ 6F13                              New_Def LDUP, "-DUP", is_code, is_normal
 343+ 6F13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6F13             >
 343+ 6F13             >                // dummy db directives used to calculate length of namec
 343+ 6F13 2D 44 55 50 >                db      "-DUP"
 343+ 6F17             >len_NFA         defl    $ - temp_NFA
 343+ 6F17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6F13             >
 343+ 6F13 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6F14 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 343+ 6F18             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6F17 D0          >                db      {b $} | END_BIT     // msb as name end
 343+ 6F18             >
 343+ 6F18 03 6F       >                dw      last_NFA            // Link to previous definition Name
 343+ 6F1A             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6F1A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 343+ 6F1A ~           >
 343+ 6F1A ~           >
 343+ 6F1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6F1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6F1A             >
 343+ 6F1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6F1A C3 0A 6F                     jp      QDup_Ptr
 345+ 6F1D
 346+ 6F1D              //  ______________________________________________________________________
 347+ 6F1D              //
 348+ 6F1D              // emit         c --
 349+ 6F1D                              Colon_Def EMIT, "EMIT", is_normal
 349+ 6F1D             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 349+ 6F1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 349+ 6F1D             >
 349+ 6F1D             >                // dummy db directives used to calculate length of namec
 349+ 6F1D 45 4D 49 54 >                db      "EMIT"
 349+ 6F21             >len_NFA         defl    $ - temp_NFA
 349+ 6F21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 349+ 6F1D             >
 349+ 6F1D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 349+ 6F1E 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 349+ 6F22             >                org     $-1                 // alter last byte of Name just above to set
 349+ 6F21 D4          >                db      {b $} | END_BIT     // msb as name end
 349+ 6F22             >
 349+ 6F22 13 6F       >                dw      last_NFA            // Link to previous definition Name
 349+ 6F24             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 349+ 6F24 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 349+ 6F27             >
 349+ 6F27             >
 349+ 6F27             >                endif           ; ok        // for other definitions it "points" the correct handler
 349+ 6F27             >                // Use of "; ok" to suppress "warning[fwdref]"
 349+ 6F27             >
 349+ 6F27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 350+ 6F27 02 66                        dw      C_EMIT                      // (?emit)
 351+ 6F29 0A 6F                        dw      QDUP                        // ?dup
 352+ 6F2B                                                                  // if
 353+ 6F2B D8 63                        dw      ZBRANCH
 354+ 6F2D 0A 00                        dw      Emit_Skip - $
 355+ 6F2F D0 65                        dw          EMITC                   //      emitc
 356+ 6F31 30 6C                        dw          ONE                     //      1
 357+ 6F33 4F 6D B9 6A                  dw          OUT, PLUSSTORE        //      out +!
 358+ 6F37              Emit_Skip:                                          // endif
 359+ 6F37 F4 68                        dw      EXIT                        // ;
 360+ 6F39
 361+ 6F39              //  ______________________________________________________________________
 362+ 6F39              //
 363+ 6F39              // space        --
 364+ 6F39                              Colon_Def SPACE, "SPACE", is_normal
 364+ 6F39             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 364+ 6F39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 6F39             >
 364+ 6F39             >                // dummy db directives used to calculate length of namec
 364+ 6F39 53 50 41 43 >                db      "SPACE"
 364+ 6F3D 45          >
 364+ 6F3E             >len_NFA         defl    $ - temp_NFA
 364+ 6F3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 6F39             >
 364+ 6F39 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 6F3A 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 364+ 6F3E 45          >
 364+ 6F3F             >                org     $-1                 // alter last byte of Name just above to set
 364+ 6F3E C5          >                db      {b $} | END_BIT     // msb as name end
 364+ 6F3F             >
 364+ 6F3F 1D 6F       >                dw      last_NFA            // Link to previous definition Name
 364+ 6F41             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 6F41 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 6F44             >
 364+ 6F44             >
 364+ 6F44             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 6F44             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 6F44             >
 364+ 6F44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 6F44 56 6C 24 6F                  dw      BL, EMIT                // bl emit
 366+ 6F48 F4 68                        dw      EXIT                    // ;
 367+ 6F4A
 368+ 6F4A              //  ______________________________________________________________________
 369+ 6F4A              //
 370+ 6F4A              // traverse     a n -- a
 371+ 6F4A              // A dictionary entry is structured as follows
 372+ 6F4A              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 373+ 6F4A              //      +1   word name, last character is toggled with $80
 374+ 6F4A              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 375+ 6F4A              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 376+ 6F4A              // PFA: +6+n "is_code", definitions have no PFA. // +5
 377+ 6F4A              //
 378+ 6F4A                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 378+ 6F4A             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 378+ 6F4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 378+ 6F4A             >
 378+ 6F4A             >                // dummy db directives used to calculate length of namec
 378+ 6F4A 54 52 41 56 >                db      "TRAVERSE"
 378+ 6F4E 45 52 53 45 >
 378+ 6F52             >len_NFA         defl    $ - temp_NFA
 378+ 6F52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 378+ 6F4A             >
 378+ 6F4A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 378+ 6F4B 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 378+ 6F4F 45 52 53 45 >
 378+ 6F53             >                org     $-1                 // alter last byte of Name just above to set
 378+ 6F52 C5          >                db      {b $} | END_BIT     // msb as name end
 378+ 6F53             >
 378+ 6F53 39 6F       >                dw      last_NFA            // Link to previous definition Name
 378+ 6F55             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 378+ 6F55 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 378+ 6F58             >
 378+ 6F58             >
 378+ 6F58             >                endif           ; ok        // for other definitions it "points" the correct handler
 378+ 6F58             >                // Use of "; ok" to suppress "warning[fwdref]"
 378+ 6F58             >
 378+ 6F58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 379+ 6F58 4C 6A                        dw      SWAP                    // swap
 380+ 6F5A              Traverse_Begin:                                 // begin
 381+ 6F5A 1C 6A 8F 69                  dw          OVER, PLUS          //      over +
 382+ 6F5E A5 63 7F 00                  dw          LIT, 127            //      127
 383+ 6F62 1C 6A EF 6A                  dw          OVER, CFETCH        //      over @
 384+ 6F66 B2 6E                        dw          LESS                //      <
 385+ 6F68                                                              // until
 386+ 6F68 D8 63                        dw      ZBRANCH
 387+ 6F6A F0 FF                        dw      Traverse_Begin - $
 388+ 6F6C 33 6A                        dw      NIP                     //  nip
 389+ 6F6E F4 68                        dw      EXIT                    //  ;
 390+ 6F70
 391+ 6F70              //  ______________________________________________________________________
 392+ 6F70              //
 393+ 6F70              // latest       -- nfa
 394+ 6F70                              Colon_Def LATEST, "LATEST", is_normal
 394+ 6F70             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 394+ 6F70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 394+ 6F70             >
 394+ 6F70             >                // dummy db directives used to calculate length of namec
 394+ 6F70 4C 41 54 45 >                db      "LATEST"
 394+ 6F74 53 54       >
 394+ 6F76             >len_NFA         defl    $ - temp_NFA
 394+ 6F76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 394+ 6F70             >
 394+ 6F70 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 394+ 6F71 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 394+ 6F75 53 54       >
 394+ 6F77             >                org     $-1                 // alter last byte of Name just above to set
 394+ 6F76 D4          >                db      {b $} | END_BIT     // msb as name end
 394+ 6F77             >
 394+ 6F77 4A 6F       >                dw      last_NFA            // Link to previous definition Name
 394+ 6F79             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 394+ 6F79 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 394+ 6F7C             >
 394+ 6F7C             >
 394+ 6F7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 394+ 6F7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 394+ 6F7C             >
 394+ 6F7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 395+ 6F7C 82 6D                        dw      CURRENT                 // current
 396+ 6F7E D8 6A D8 6A                  dw      FETCH, FETCH            // @ @
 397+ 6F82 F4 68                        dw      EXIT                    // ;
 398+ 6F84
 399+ 6F84              //  ______________________________________________________________________
 400+ 6F84              //
 401+ 6F84              // lfa          pfa -- lfa
 402+ 6F84                              Colon_Def LFA, "LFA", is_normal
 402+ 6F84             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 402+ 6F84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 6F84             >
 402+ 6F84             >                // dummy db directives used to calculate length of namec
 402+ 6F84 4C 46 41    >                db      "LFA"
 402+ 6F87             >len_NFA         defl    $ - temp_NFA
 402+ 6F87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 6F84             >
 402+ 6F84 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 6F85 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 402+ 6F88             >                org     $-1                 // alter last byte of Name just above to set
 402+ 6F87 C1          >                db      {b $} | END_BIT     // msb as name end
 402+ 6F88             >
 402+ 6F88 70 6F       >                dw      last_NFA            // Link to previous definition Name
 402+ 6F8A             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 6F8A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 6F8D             >
 402+ 6F8D             >
 402+ 6F8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 6F8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 6F8D             >
 402+ 6F8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 6F8D A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 404+ 6F91 86 6E                        dw      SUBTRACT                // cell- --> -
 405+ 6F93 F4 68                        dw      EXIT                    // ;
 406+ 6F95
 407+ 6F95              //  ______________________________________________________________________
 408+ 6F95              //
 409+ 6F95              // cfa          pfa -- cfa
 410+ 6F95                              Colon_Def CFA, "CFA", is_normal
 410+ 6F95             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 410+ 6F95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 410+ 6F95             >
 410+ 6F95             >                // dummy db directives used to calculate length of namec
 410+ 6F95 43 46 41    >                db      "CFA"
 410+ 6F98             >len_NFA         defl    $ - temp_NFA
 410+ 6F98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 410+ 6F95             >
 410+ 6F95 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 410+ 6F96 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 410+ 6F99             >                org     $-1                 // alter last byte of Name just above to set
 410+ 6F98 C1          >                db      {b $} | END_BIT     // msb as name end
 410+ 6F99             >
 410+ 6F99 84 6F       >                dw      last_NFA            // Link to previous definition Name
 410+ 6F9B             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 410+ 6F9B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 410+ 6F9E             >
 410+ 6F9E             >
 410+ 6F9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 410+ 6F9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 410+ 6F9E             >
 410+ 6F9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 411+ 6F9E              //              dw      CELL_MINUS              // cell-
 412+ 6F9E 42 6C 86 6E                  dw      THREE, SUBTRACT         // 3 -
 413+ 6FA2 F4 68                        dw      EXIT                    // ;
 414+ 6FA4
 415+ 6FA4              //  ______________________________________________________________________
 416+ 6FA4              //
 417+ 6FA4              // nfa          pfa -- nfa
 418+ 6FA4                              Colon_Def NFA, "NFA", is_normal
 418+ 6FA4             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 418+ 6FA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 6FA4             >
 418+ 6FA4             >                // dummy db directives used to calculate length of namec
 418+ 6FA4 4E 46 41    >                db      "NFA"
 418+ 6FA7             >len_NFA         defl    $ - temp_NFA
 418+ 6FA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 6FA4             >
 418+ 6FA4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 6FA5 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 418+ 6FA8             >                org     $-1                 // alter last byte of Name just above to set
 418+ 6FA7 C1          >                db      {b $} | END_BIT     // msb as name end
 418+ 6FA8             >
 418+ 6FA8 95 6F       >                dw      last_NFA            // Link to previous definition Name
 418+ 6FAA             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 6FAA CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 6FAD             >
 418+ 6FAD             >
 418+ 6FAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 6FAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 6FAD             >
 418+ 6FAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 6FAD A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 420+ 6FB1 86 6E                        dw      SUBTRACT                // -
 421+ 6FB3 4C 6C                        dw      NEG_ONE                 // -1
 422+ 6FB5 55 6F                        dw      TRAVERSE                // traverse
 423+ 6FB7 F4 68                        dw      EXIT                    // ;
 424+ 6FB9
 425+ 6FB9              //  ______________________________________________________________________
 426+ 6FB9              //
 427+ 6FB9              // pfa          nfa -- pfa
 428+ 6FB9                              Colon_Def PFA, "PFA", is_normal
 428+ 6FB9             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 428+ 6FB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 6FB9             >
 428+ 6FB9             >                // dummy db directives used to calculate length of namec
 428+ 6FB9 50 46 41    >                db      "PFA"
 428+ 6FBC             >len_NFA         defl    $ - temp_NFA
 428+ 6FBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 6FB9             >
 428+ 6FB9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 6FBA 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 428+ 6FBD             >                org     $-1                 // alter last byte of Name just above to set
 428+ 6FBC C1          >                db      {b $} | END_BIT     // msb as name end
 428+ 6FBD             >
 428+ 6FBD A4 6F       >                dw      last_NFA            // Link to previous definition Name
 428+ 6FBF             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 6FBF CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 6FC2             >
 428+ 6FC2             >
 428+ 6FC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 6FC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 6FC2             >
 428+ 6FC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 6FC2 30 6C                        dw      ONE                     // 1
 430+ 6FC4 55 6F                        dw      TRAVERSE                // traverse
 431+ 6FC6 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 432+ 6FCA 8F 69                        dw      PLUS                    // +
 433+ 6FCC F4 68                        dw      EXIT                    // ;
 434+ 6FCE
 435+ 6FCE              //  ______________________________________________________________________
 436+ 6FCE              //
 437+ 6FCE              // >body        cfa -- pfa
 438+ 6FCE                              Colon_Def TO_BODY, ">BODY", is_normal
 438+ 6FCE             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 438+ 6FCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ 6FCE             >
 438+ 6FCE             >                // dummy db directives used to calculate length of namec
 438+ 6FCE 3E 42 4F 44 >                db      ">BODY"
 438+ 6FD2 59          >
 438+ 6FD3             >len_NFA         defl    $ - temp_NFA
 438+ 6FD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ 6FCE             >
 438+ 6FCE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ 6FCF 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 438+ 6FD3 59          >
 438+ 6FD4             >                org     $-1                 // alter last byte of Name just above to set
 438+ 6FD3 D9          >                db      {b $} | END_BIT     // msb as name end
 438+ 6FD4             >
 438+ 6FD4 B9 6F       >                dw      last_NFA            // Link to previous definition Name
 438+ 6FD6             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6FD6 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 438+ 6FD9             >
 438+ 6FD9             >
 438+ 6FD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6FD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6FD9             >
 438+ 6FD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6FD9 42 6C 8F 69                  dw      THREE, PLUS             // cell+ --> 3 +
 440+ 6FDD F4 68                        dw      EXIT                    // ;
 441+ 6FDF
 442+ 6FDF              //  ______________________________________________________________________
 443+ 6FDF              //
 444+ 6FDF              // <name        cfa -- nfa
 445+ 6FDF                              Colon_Def TO_NAME, "<NAME", is_normal
 445+ 6FDF             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 445+ 6FDF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 6FDF             >
 445+ 6FDF             >                // dummy db directives used to calculate length of namec
 445+ 6FDF 3C 4E 41 4D >                db      "<NAME"
 445+ 6FE3 45          >
 445+ 6FE4             >len_NFA         defl    $ - temp_NFA
 445+ 6FE4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 6FDF             >
 445+ 6FDF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 6FE0 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 445+ 6FE4 45          >
 445+ 6FE5             >                org     $-1                 // alter last byte of Name just above to set
 445+ 6FE4 C5          >                db      {b $} | END_BIT     // msb as name end
 445+ 6FE5             >
 445+ 6FE5 CE 6F       >                dw      last_NFA            // Link to previous definition Name
 445+ 6FE7             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 6FE7 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 6FEA             >
 445+ 6FEA             >
 445+ 6FEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 6FEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 6FEA             >
 445+ 6FEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 6FEA D6 6F                        dw      TO_BODY                 // >body
 447+ 6FEC AA 6F                        dw      NFA                     // nfa
 448+ 6FEE F4 68                        dw      EXIT                    // ;
 449+ 6FF0
 450+ 6FF0              //  ______________________________________________________________________
 451+ 6FF0              //
 452+ 6FF0              // !csp         --
 453+ 6FF0              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 454+ 6FF0                              Colon_Def STORE_CSP, "!CSP", is_normal
 454+ 6FF0             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 454+ 6FF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 454+ 6FF0             >
 454+ 6FF0             >                // dummy db directives used to calculate length of namec
 454+ 6FF0 21 43 53 50 >                db      "!CSP"
 454+ 6FF4             >len_NFA         defl    $ - temp_NFA
 454+ 6FF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 454+ 6FF0             >
 454+ 6FF0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 454+ 6FF1 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 454+ 6FF5             >                org     $-1                 // alter last byte of Name just above to set
 454+ 6FF4 D0          >                db      {b $} | END_BIT     // msb as name end
 454+ 6FF5             >
 454+ 6FF5 DF 6F       >                dw      last_NFA            // Link to previous definition Name
 454+ 6FF7             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 454+ 6FF7 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 454+ 6FFA             >
 454+ 6FFA             >
 454+ 6FFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 454+ 6FFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 454+ 6FFA             >
 454+ 6FFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 455+ 6FFA C4 68                        dw      SPFETCH                 // sp@
 456+ 6FFC B7 6D E3 6A                  dw      CSP, STORE              // csp !
 457+ 7000 F4 68                        dw      EXIT                    // ;
 458+ 7002
 459+ 7002              //  ______________________________________________________________________
 460+ 7002              //
 461+ 7002              // ?error       f n --
 462+ 7002              // rase error n if flag f it true
 463+ 7002                              Colon_Def QERROR, "?ERROR", is_normal
 463+ 7002             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 463+ 7002             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ 7002             >
 463+ 7002             >                // dummy db directives used to calculate length of namec
 463+ 7002 3F 45 52 52 >                db      "?ERROR"
 463+ 7006 4F 52       >
 463+ 7008             >len_NFA         defl    $ - temp_NFA
 463+ 7008             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ 7002             >
 463+ 7002 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ 7003 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 463+ 7007 4F 52       >
 463+ 7009             >                org     $-1                 // alter last byte of Name just above to set
 463+ 7008 D2          >                db      {b $} | END_BIT     // msb as name end
 463+ 7009             >
 463+ 7009 F0 6F       >                dw      last_NFA            // Link to previous definition Name
 463+ 700B             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 700B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 700E             >
 463+ 700E             >
 463+ 700E             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 700E             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 700E             >
 463+ 700E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 700E 4C 6A                        dw      SWAP                    // swap
 465+ 7010                                                              // if
 466+ 7010 D8 63                        dw      ZBRANCH
 467+ 7012 08 00                        dw      QError_Else - $
 468+ 7014 A8 75                        dw          ERROR               //      error  ( is a forward-ref )
 469+ 7016                                                              // else
 470+ 7016 C3 63                        dw      BRANCH
 471+ 7018 04 00                        dw      QError_Endif - $
 472+ 701A              QError_Else:
 473+ 701A 2A 6A                        dw          DROP                //      drop
 474+ 701C              QError_Endif:                                   // endif
 475+ 701C F4 68                        dw      EXIT                    // ;
 476+ 701E
 477+ 701E              //  ______________________________________________________________________
 478+ 701E              //
 479+ 701E              // ?comp       --
 480+ 701E              // raise msg #17 if not compiling
 481+ 701E                              Colon_Def QCOMP, "?COMP", is_normal
 481+ 701E             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 481+ 701E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 701E             >
 481+ 701E             >                // dummy db directives used to calculate length of namec
 481+ 701E 3F 43 4F 4D >                db      "?COMP"
 481+ 7022 50          >
 481+ 7023             >len_NFA         defl    $ - temp_NFA
 481+ 7023             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 701E             >
 481+ 701E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 701F 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 481+ 7023 50          >
 481+ 7024             >                org     $-1                 // alter last byte of Name just above to set
 481+ 7023 D0          >                db      {b $} | END_BIT     // msb as name end
 481+ 7024             >
 481+ 7024 02 70       >                dw      last_NFA            // Link to previous definition Name
 481+ 7026             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 7026 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 7029             >
 481+ 7029             >
 481+ 7029             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 7029             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 7029             >
 481+ 7029             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 7029 8E 6D D8 6A                  dw      STATE, FETCH            // state @
 483+ 702D 51 69                        dw      ZEQUAL                  // 0=
 484+ 702F A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 485+ 7033 0B 70                        dw      QERROR                  // ?error
 486+ 7035 F4 68                        dw      EXIT                    // ;
 487+ 7037
 488+ 7037              //  ______________________________________________________________________
 489+ 7037              //
 490+ 7037              // ?exec       --
 491+ 7037              // raise msg #18 if compiling
 492+ 7037                              Colon_Def QEXEC, "?EXEC", is_normal
 492+ 7037             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 492+ 7037             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ 7037             >
 492+ 7037             >                // dummy db directives used to calculate length of namec
 492+ 7037 3F 45 58 45 >                db      "?EXEC"
 492+ 703B 43          >
 492+ 703C             >len_NFA         defl    $ - temp_NFA
 492+ 703C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ 7037             >
 492+ 7037 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ 7038 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 492+ 703C 43          >
 492+ 703D             >                org     $-1                 // alter last byte of Name just above to set
 492+ 703C C3          >                db      {b $} | END_BIT     // msb as name end
 492+ 703D             >
 492+ 703D 1E 70       >                dw      last_NFA            // Link to previous definition Name
 492+ 703F             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 703F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 7042             >
 492+ 7042             >
 492+ 7042             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 7042             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 7042             >
 492+ 7042             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 7042 8E 6D D8 6A                  dw      STATE, FETCH            // state @
 494+ 7046 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 495+ 704A 0B 70                        dw      QERROR                  // ?error
 496+ 704C F4 68                        dw      EXIT                    // ;
 497+ 704E
 498+ 704E              //  ______________________________________________________________________
 499+ 704E              //
 500+ 704E              // ?pairs       n1 n2 --
 501+ 704E              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 502+ 704E                              Colon_Def QPAIRS, "?PAIRS", is_normal
 502+ 704E             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 502+ 704E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 704E             >
 502+ 704E             >                // dummy db directives used to calculate length of namec
 502+ 704E 3F 50 41 49 >                db      "?PAIRS"
 502+ 7052 52 53       >
 502+ 7054             >len_NFA         defl    $ - temp_NFA
 502+ 7054             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 704E             >
 502+ 704E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 704F 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 502+ 7053 52 53       >
 502+ 7055             >                org     $-1                 // alter last byte of Name just above to set
 502+ 7054 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 7055             >
 502+ 7055 37 70       >                dw      last_NFA            // Link to previous definition Name
 502+ 7057             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 7057 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 705A             >
 502+ 705A             >
 502+ 705A             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 705A             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 705A             >
 502+ 705A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 705A 86 6E                        dw      SUBTRACT                // -
 504+ 705C A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 505+ 7060 0B 70                        dw      QERROR                  // ?error
 506+ 7062 F4 68                        dw      EXIT                    // ;
 507+ 7064
 508+ 7064              //  ______________________________________________________________________
 509+ 7064              //
 510+ 7064              // ?csp       --
 511+ 7064              // raise msg #20 if surrent SP in not what previously saved in CSP.
 512+ 7064              // Compiler relies on that for  syntax checking of structures
 513+ 7064                              Colon_Def QCSP, "?CSP", is_normal
 513+ 7064             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 513+ 7064             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 7064             >
 513+ 7064             >                // dummy db directives used to calculate length of namec
 513+ 7064 3F 43 53 50 >                db      "?CSP"
 513+ 7068             >len_NFA         defl    $ - temp_NFA
 513+ 7068             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 7064             >
 513+ 7064 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 7065 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 513+ 7069             >                org     $-1                 // alter last byte of Name just above to set
 513+ 7068 D0          >                db      {b $} | END_BIT     // msb as name end
 513+ 7069             >
 513+ 7069 4E 70       >                dw      last_NFA            // Link to previous definition Name
 513+ 706B             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 706B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 706E             >
 513+ 706E             >
 513+ 706E             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 706E             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 706E             >
 513+ 706E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 706E C4 68                        dw      SPFETCH                 // sp@
 515+ 7070 B7 6D D8 6A                  dw      CSP, FETCH              // csp @
 516+ 7074 86 6E                        dw      SUBTRACT                // -
 517+ 7076 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 518+ 707A 0B 70                        dw      QERROR                  // ?error
 519+ 707C F4 68                        dw      EXIT                    // ;
 520+ 707E
 521+ 707E              //  ______________________________________________________________________
 522+ 707E              //
 523+ 707E              // ?loading      --
 524+ 707E              // raise msg #22 if not loading
 525+ 707E                              Colon_Def QLOADING, "?LOADING", is_normal
 525+ 707E             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 525+ 707E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 525+ 707E             >
 525+ 707E             >                // dummy db directives used to calculate length of namec
 525+ 707E 3F 4C 4F 41 >                db      "?LOADING"
 525+ 7082 44 49 4E 47 >
 525+ 7086             >len_NFA         defl    $ - temp_NFA
 525+ 7086             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 525+ 707E             >
 525+ 707E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 525+ 707F 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 525+ 7083 44 49 4E 47 >
 525+ 7087             >                org     $-1                 // alter last byte of Name just above to set
 525+ 7086 C7          >                db      {b $} | END_BIT     // msb as name end
 525+ 7087             >
 525+ 7087 64 70       >                dw      last_NFA            // Link to previous definition Name
 525+ 7089             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 525+ 7089 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 525+ 708C             >
 525+ 708C             >
 525+ 708C             >                endif           ; ok        // for other definitions it "points" the correct handler
 525+ 708C             >                // Use of "; ok" to suppress "warning[fwdref]"
 525+ 708C             >
 525+ 708C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 526+ 708C 3B 6D D8 6A                  dw      BLK, FETCH              // blk @
 527+ 7090 51 69                        dw      ZEQUAL                  // 0=
 528+ 7092 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 529+ 7096 0B 70                        dw      QERROR                  // ?error
 530+ 7098 F4 68                        dw      EXIT                    // ;
 531+ 709A
 532+ 709A              //  ______________________________________________________________________
 533+ 709A              //
 534+ 709A              // compile      --
 535+ 709A              // compiles the following word
 536+ 709A                              Colon_Def COMPILE, "COMPILE", is_normal
 536+ 709A             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 536+ 709A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 536+ 709A             >
 536+ 709A             >                // dummy db directives used to calculate length of namec
 536+ 709A 43 4F 4D 50 >                db      "COMPILE"
 536+ 709E 49 4C 45    >
 536+ 70A1             >len_NFA         defl    $ - temp_NFA
 536+ 70A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 536+ 709A             >
 536+ 709A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 536+ 709B 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 536+ 709F 49 4C 45    >
 536+ 70A2             >                org     $-1                 // alter last byte of Name just above to set
 536+ 70A1 C5          >                db      {b $} | END_BIT     // msb as name end
 536+ 70A2             >
 536+ 70A2 7E 70       >                dw      last_NFA            // Link to previous definition Name
 536+ 70A4             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 536+ 70A4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 536+ 70A7             >
 536+ 70A7             >
 536+ 70A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 536+ 70A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 536+ 70A7             >
 536+ 70A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 537+ 70A7 26 70                        dw      QCOMP                   // ?comp
 538+ 70A9 30 69                        dw      R_TO                    // r>
 539+ 70AB 57 6A CE 69                  dw      DUP, CELL_PLUS          // dup, cell+
 540+ 70AF 1E 69                        dw      TO_R                    // >r
 541+ 70B1 D8 6A 4F 6E                  dw      FETCH, COMMA            // @ ,
 542+ 70B5 F4 68                        dw      EXIT                    // ;
 543+ 70B7
 544+ 70B7              //  ______________________________________________________________________
 545+ 70B7              //
 546+ 70B7              // compile,     --
 547+ 70B7              // compiles the following word
 548+ 70B7                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 548+ 70B7             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 548+ 70B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 548+ 70B7             >
 548+ 70B7             >                // dummy db directives used to calculate length of namec
 548+ 70B7 43 4F 4D 50 >                db      "COMPILE,"
 548+ 70BB 49 4C 45 2C >
 548+ 70BF             >len_NFA         defl    $ - temp_NFA
 548+ 70BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 548+ 70B7             >
 548+ 70B7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 548+ 70B8 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 548+ 70BC 49 4C 45 2C >
 548+ 70C0             >                org     $-1                 // alter last byte of Name just above to set
 548+ 70BF AC          >                db      {b $} | END_BIT     // msb as name end
 548+ 70C0             >
 548+ 70C0 9A 70       >                dw      last_NFA            // Link to previous definition Name
 548+ 70C2             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 548+ 70C2 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 548+ 70C5             >
 548+ 70C5             >
 548+ 70C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 548+ 70C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 548+ 70C5             >
 548+ 70C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 70C5 26 70                        dw      QCOMP                   // ?comp
 550+ 70C7 4F 6E                        dw      COMMA                   // ,
 551+ 70C9 F4 68                        dw      EXIT                    // ;
 552+ 70CB
 553+ 70CB              //  ______________________________________________________________________
 554+ 70CB              //
 555+ 70CB              // [            --
 556+ 70CB              // stop compilation
 557+ 70CB                              Colon_Def SQUARED_OPEN, "[", is_immediate
 557+ 70CB             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 557+ 70CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 557+ 70CB             >
 557+ 70CB             >                // dummy db directives used to calculate length of namec
 557+ 70CB 5B          >                db      "["
 557+ 70CC             >len_NFA         defl    $ - temp_NFA
 557+ 70CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 557+ 70CB             >
 557+ 70CB C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 557+ 70CC 5B          >                db      "["               // name string in 7-bit ascii, but
 557+ 70CD             >                org     $-1                 // alter last byte of Name just above to set
 557+ 70CC DB          >                db      {b $} | END_BIT     // msb as name end
 557+ 70CD             >
 557+ 70CD B7 70       >                dw      last_NFA            // Link to previous definition Name
 557+ 70CF             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 557+ 70CF CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 557+ 70D2             >
 557+ 70D2             >
 557+ 70D2             >                endif           ; ok        // for other definitions it "points" the correct handler
 557+ 70D2             >                // Use of "; ok" to suppress "warning[fwdref]"
 557+ 70D2             >
 557+ 70D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 558+ 70D2 27 6C                        dw      ZERO                    // 0
 559+ 70D4 8E 6D E3 6A                  dw      STATE, STORE            // state !
 560+ 70D8 F4 68                        dw      EXIT                    // ; immediate
 561+ 70DA
 562+ 70DA              //  ______________________________________________________________________
 563+ 70DA              //
 564+ 70DA              // ]            --
 565+ 70DA              // start compilation
 566+ 70DA                              Colon_Def SQUARED_CLOSE, "]", is_normal
 566+ 70DA             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 566+ 70DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 566+ 70DA             >
 566+ 70DA             >                // dummy db directives used to calculate length of namec
 566+ 70DA 5D          >                db      "]"
 566+ 70DB             >len_NFA         defl    $ - temp_NFA
 566+ 70DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 566+ 70DA             >
 566+ 70DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 566+ 70DB 5D          >                db      "]"               // name string in 7-bit ascii, but
 566+ 70DC             >                org     $-1                 // alter last byte of Name just above to set
 566+ 70DB DD          >                db      {b $} | END_BIT     // msb as name end
 566+ 70DC             >
 566+ 70DC CB 70       >                dw      last_NFA            // Link to previous definition Name
 566+ 70DE             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 566+ 70DE CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 566+ 70E1             >
 566+ 70E1             >
 566+ 70E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 566+ 70E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 566+ 70E1             >
 566+ 70E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 567+ 70E1 A5 63 C0 00                  dw      LIT, $C0                // 192
 568+ 70E5 8E 6D E3 6A                  dw      STATE, STORE            // state !
 569+ 70E9 F4 68                        dw      EXIT                    // ;
 570+ 70EB
 571+ 70EB              //  ______________________________________________________________________
 572+ 70EB              //
 573+ 70EB              // smudge       --
 574+ 70EB              // toggle smudge bit of latest definition
 575+ 70EB                              Colon_Def SMUDGE, "SMUDGE", is_normal
 575+ 70EB             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 575+ 70EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 70EB             >
 575+ 70EB             >                // dummy db directives used to calculate length of namec
 575+ 70EB 53 4D 55 44 >                db      "SMUDGE"
 575+ 70EF 47 45       >
 575+ 70F1             >len_NFA         defl    $ - temp_NFA
 575+ 70F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 70EB             >
 575+ 70EB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 70EC 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 575+ 70F0 47 45       >
 575+ 70F2             >                org     $-1                 // alter last byte of Name just above to set
 575+ 70F1 C5          >                db      {b $} | END_BIT     // msb as name end
 575+ 70F2             >
 575+ 70F2 DA 70       >                dw      last_NFA            // Link to previous definition Name
 575+ 70F4             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 70F4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 70F7             >
 575+ 70F7             >
 575+ 70F7             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 70F7             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 70F7             >
 575+ 70F7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 70F7 79 6F                        dw      LATEST                  // latest
 577+ 70F9 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 578+ 70FD CD 6A                        dw      TOGGLE                  // toggle
 579+ 70FF F4 68                        dw      EXIT                    // ;
 580+ 7101
 581+ 7101              //  ______________________________________________________________________
 582+ 7101              //
 583+ 7101              // immediate    --
 584+ 7101              // make immediate the latest definition
 585+ 7101                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 585+ 7101             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 585+ 7101             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 7101             >
 585+ 7101             >                // dummy db directives used to calculate length of namec
 585+ 7101 49 4D 4D 45 >                db      "IMMEDIATE"
 585+ 7105 44 49 41 54 >
 585+ 7109 45          >
 585+ 710A             >len_NFA         defl    $ - temp_NFA
 585+ 710A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 7101             >
 585+ 7101 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 7102 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 585+ 7106 44 49 41 54 >
 585+ 710A 45          >
 585+ 710B             >                org     $-1                 // alter last byte of Name just above to set
 585+ 710A C5          >                db      {b $} | END_BIT     // msb as name end
 585+ 710B             >
 585+ 710B EB 70       >                dw      last_NFA            // Link to previous definition Name
 585+ 710D             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 710D CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 7110             >
 585+ 7110             >
 585+ 7110             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 7110             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 7110             >
 585+ 7110             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 7110 79 6F                        dw      LATEST                  // latest
 587+ 7112 A5 63 40 00                  dw      LIT, $40                // 64
 588+ 7116 CD 6A                        dw      TOGGLE                  // toggle
 589+ 7118 F4 68                        dw      EXIT                    // ;
 590+ 711A
 591+ 711A              //  ______________________________________________________________________
 592+ 711A              //
 593+ 711A              // hex          --
 594+ 711A              // change numeration base
 595+ 711A                              Colon_Def HEX, "HEX", is_normal
 595+ 711A             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 595+ 711A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 711A             >
 595+ 711A             >                // dummy db directives used to calculate length of namec
 595+ 711A 48 45 58    >                db      "HEX"
 595+ 711D             >len_NFA         defl    $ - temp_NFA
 595+ 711D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 711A             >
 595+ 711A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 711B 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 595+ 711E             >                org     $-1                 // alter last byte of Name just above to set
 595+ 711D D8          >                db      {b $} | END_BIT     // msb as name end
 595+ 711E             >
 595+ 711E 01 71       >                dw      last_NFA            // Link to previous definition Name
 595+ 7120             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 7120 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 7123             >
 595+ 7123             >
 595+ 7123             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 7123             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 7123             >
 595+ 7123             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 7123 A5 63 10 00                  dw      LIT, 16                 // 16
 597+ 7127 99 6D E3 6A                  dw      BASE, STORE             // base !
 598+ 712B F4 68                        dw      EXIT                    // ;
 599+ 712D
 600+ 712D              //  ______________________________________________________________________
 601+ 712D              //
 602+ 712D              // decimal      --
 603+ 712D              // change numeration base
 604+ 712D                              Colon_Def DECIMAL, "DECIMAL", is_normal
 604+ 712D             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 604+ 712D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 712D             >
 604+ 712D             >                // dummy db directives used to calculate length of namec
 604+ 712D 44 45 43 49 >                db      "DECIMAL"
 604+ 7131 4D 41 4C    >
 604+ 7134             >len_NFA         defl    $ - temp_NFA
 604+ 7134             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 712D             >
 604+ 712D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 712E 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 604+ 7132 4D 41 4C    >
 604+ 7135             >                org     $-1                 // alter last byte of Name just above to set
 604+ 7134 CC          >                db      {b $} | END_BIT     // msb as name end
 604+ 7135             >
 604+ 7135 1A 71       >                dw      last_NFA            // Link to previous definition Name
 604+ 7137             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 7137 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 604+ 713A             >
 604+ 713A             >
 604+ 713A             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 713A             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 713A             >
 604+ 713A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 713A A5 63 0A 00                  dw      LIT, 10                 // 10
 606+ 713E 99 6D E3 6A                  dw      BASE, STORE             // base !
 607+ 7142 F4 68                        dw      EXIT                    // ;
 608+ 7144
 609+ 7144              //  ______________________________________________________________________
 610+ 7144              //
 611+ 7144              // (;code)       --
 612+ 7144              // patch to CFA to call/jump to the "following code"
 613+ 7144                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 613+ 7144             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 613+ 7144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 7144             >
 613+ 7144             >                // dummy db directives used to calculate length of namec
 613+ 7144 28 3B 43 4F >                db      "(;CODE)"
 613+ 7148 44 45 29    >
 613+ 714B             >len_NFA         defl    $ - temp_NFA
 613+ 714B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 7144             >
 613+ 7144 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 7145 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 613+ 7149 44 45 29    >
 613+ 714C             >                org     $-1                 // alter last byte of Name just above to set
 613+ 714B A9          >                db      {b $} | END_BIT     // msb as name end
 613+ 714C             >
 613+ 714C 2D 71       >                dw      last_NFA            // Link to previous definition Name
 613+ 714E             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 714E CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 7151             >
 613+ 7151             >
 613+ 7151             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 7151             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 7151             >
 613+ 7151             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 7151 30 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 615+ 7153 79 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 616+ 7155 BF 6F 9B 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 617+ 7159
 618+ 7159 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 619+ 715D 1C 6A FB 6A                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 620+ 7161 AC 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 621+ 7163
 622+ 7163 E3 6A                        dw      STORE                   // !
 623+ 7165 F4 68                        dw      EXIT                    // ;
 624+ 7167
 625+ 7167              //  ______________________________________________________________________
 626+ 7167              //
 627+ 7167              // ;code        --
 628+ 7167                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 628+ 7167             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 628+ 7167             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 628+ 7167             >
 628+ 7167             >                // dummy db directives used to calculate length of namec
 628+ 7167 3B 43 4F 44 >                db      ";CODE"
 628+ 716B 45          >
 628+ 716C             >len_NFA         defl    $ - temp_NFA
 628+ 716C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 628+ 7167             >
 628+ 7167 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 628+ 7168 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 628+ 716C 45          >
 628+ 716D             >                org     $-1                 // alter last byte of Name just above to set
 628+ 716C C5          >                db      {b $} | END_BIT     // msb as name end
 628+ 716D             >
 628+ 716D 44 71       >                dw      last_NFA            // Link to previous definition Name
 628+ 716F             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 628+ 716F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 628+ 7172             >
 628+ 7172             >
 628+ 7172             >                endif           ; ok        // for other definitions it "points" the correct handler
 628+ 7172             >                // Use of "; ok" to suppress "warning[fwdref]"
 628+ 7172             >
 628+ 7172             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 629+ 7172 6B 70                        dw      QCSP                    // ?csp
 630+ 7174 A4 70                        dw      COMPILE                 // compile
 631+ 7176 4E 71                        dw      C_SEMICOLON_CODE        // (;code)
 632+ 7178 CF 70                        dw      SQUARED_OPEN            // [
 633+ 717A D4 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 634+ 717C F4 68                        dw      EXIT                    // ; immediate
 635+ 717E
 636+ 717E              //  ______________________________________________________________________
 637+ 717E              //
 638+ 717E              // <builds      --
 639+ 717E                              Colon_Def CBUILDS, "<BUILDS", is_normal
 639+ 717E             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 639+ 717E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 639+ 717E             >
 639+ 717E             >                // dummy db directives used to calculate length of namec
 639+ 717E 3C 42 55 49 >                db      "<BUILDS"
 639+ 7182 4C 44 53    >
 639+ 7185             >len_NFA         defl    $ - temp_NFA
 639+ 7185             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 639+ 717E             >
 639+ 717E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 639+ 717F 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 639+ 7183 4C 44 53    >
 639+ 7186             >                org     $-1                 // alter last byte of Name just above to set
 639+ 7185 D3          >                db      {b $} | END_BIT     // msb as name end
 639+ 7186             >
 639+ 7186 67 71       >                dw      last_NFA            // Link to previous definition Name
 639+ 7188             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 639+ 7188 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 639+ 718B             >
 639+ 718B             >
 639+ 718B             >                endif           ; ok        // for other definitions it "points" the correct handler
 639+ 718B             >                // Use of "; ok" to suppress "warning[fwdref]"
 639+ 718B             >
 639+ 718B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 640+ 718B 27 6C                        dw      ZERO                    // 0
 641+ 718D E4 6B                        dw      CONSTANT                // constant
 642+ 718F F4 68                        dw      EXIT                    // ;
 643+ 7191
 644+ 7191              //  ______________________________________________________________________
 645+ 7191              //
 646+ 7191              // recurse      --
 647+ 7191              //              Colon_Def RECURSE, "RECURSE", is_immediate
 648+ 7191              //              dw      QCOMP                   // ?comp
 649+ 7191              //              dw      LATEST                  // latest
 650+ 7191              //              dw      PFA, CFA                // pfa cfa
 651+ 7191              //              dw      COMMA                   // ,
 652+ 7191              //              dw      EXIT                    // ; immediate
 653+ 7191
 654+ 7191              //  ______________________________________________________________________
 655+ 7191              //
 656+ 7191              // does>     --
 657+ 7191                              Colon_Def DOES_TO, "DOES>", is_normal
 657+ 7191             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 657+ 7191             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 657+ 7191             >
 657+ 7191             >                // dummy db directives used to calculate length of namec
 657+ 7191 44 4F 45 53 >                db      "DOES>"
 657+ 7195 3E          >
 657+ 7196             >len_NFA         defl    $ - temp_NFA
 657+ 7196             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 657+ 7191             >
 657+ 7191 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 657+ 7192 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 657+ 7196 3E          >
 657+ 7197             >                org     $-1                 // alter last byte of Name just above to set
 657+ 7196 BE          >                db      {b $} | END_BIT     // msb as name end
 657+ 7197             >
 657+ 7197 7E 71       >                dw      last_NFA            // Link to previous definition Name
 657+ 7199             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 657+ 7199 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 657+ 719C             >
 657+ 719C             >
 657+ 719C             >                endif           ; ok        // for other definitions it "points" the correct handler
 657+ 719C             >                // Use of "; ok" to suppress "warning[fwdref]"
 657+ 719C             >
 657+ 719C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 658+ 719C 30 69                        dw      R_TO                    // r>
 659+ 719E 79 6F                        dw      LATEST                  // latest
 660+ 71A0 BF 6F                        dw      PFA                     // pfa
 661+ 71A2 E3 6A                        dw      STORE                   // !
 662+ 71A4 4E 71                        dw      C_SEMICOLON_CODE        // ;code
 663+ 71A6              Does_Ptr:
 664+ 71A6                              // via call coded in CFA
 665+ 71A6                              ldhlrp
 665+ 71A6 2A 96 63    >                ld      hl,(RP_Pointer)
 666+ 71A9 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 667+ 71AA 70                           ld      (hl), b
 668+ 71AB 2B                           dec     hl
 669+ 71AC 71                           ld      (hl), c
 670+ 71AD                              ldrphl
 670+ 71AD 22 96 63    >                ld      (RP_Pointer),hl
 671+ 71B0 E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 672+ 71B1
 673+ 71B1 4E                           ld      c, (hl)
 674+ 71B2 23                           inc     hl
 675+ 71B3 46                           ld      b, (hl)
 676+ 71B4 23                           inc     hl
 677+ 71B5
 678+ 71B5                              psh1
 678+ 71B5 E5          >                push    hl
 678+ 71B6 DD E9       >                jp      (ix)
 679+ 71B8                              // SMUDGE !
 680+ 71B8
 681+ 71B8              //  ______________________________________________________________________
 682+ 71B8              //
 683+ 71B8              // count        a -- a2 n
 684+ 71B8              // expects a counted string at address a, returns string address and counter
 685+ 71B8                              Colon_Def COUNT, "COUNT", is_normal
 685+ 71B8             >                New_Def  COUNT, "COUNT", Enter_Ptr, is_normal ; ok
 685+ 71B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 685+ 71B8             >
 685+ 71B8             >                // dummy db directives used to calculate length of namec
 685+ 71B8 43 4F 55 4E >                db      "COUNT"
 685+ 71BC 54          >
 685+ 71BD             >len_NFA         defl    $ - temp_NFA
 685+ 71BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 685+ 71B8             >
 685+ 71B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 685+ 71B9 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 685+ 71BD 54          >
 685+ 71BE             >                org     $-1                 // alter last byte of Name just above to set
 685+ 71BD D4          >                db      {b $} | END_BIT     // msb as name end
 685+ 71BE             >
 685+ 71BE 91 71       >                dw      last_NFA            // Link to previous definition Name
 685+ 71C0             >COUNT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 685+ 71C0 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 685+ 71C3             >
 685+ 71C3             >
 685+ 71C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 685+ 71C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 685+ 71C3             >
 685+ 71C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 686+ 71C3 57 6A                        dw      DUP                     // dup
 687+ 71C5 AC 69                        dw      ONE_PLUS                // 1+
 688+ 71C7 4C 6A EF 6A                  dw      SWAP, CFETCH             // swap @
 689+ 71CB F4 68                        dw      EXIT                    // ;
 690+ 71CD
 691+ 71CD              //  ______________________________________________________________________
 692+ 71CD              //
 693+ 71CD              // bounds       a n -- a+n n
 694+ 71CD              // given an address and a length ( a n ) calculate the bound addresses
 695+ 71CD              // suitable for DO-LOOP
 696+ 71CD                              Colon_Def BOUNDS, "BOUNDS", is_normal
 696+ 71CD             >                New_Def  BOUNDS, "BOUNDS", Enter_Ptr, is_normal ; ok
 696+ 71CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 696+ 71CD             >
 696+ 71CD             >                // dummy db directives used to calculate length of namec
 696+ 71CD 42 4F 55 4E >                db      "BOUNDS"
 696+ 71D1 44 53       >
 696+ 71D3             >len_NFA         defl    $ - temp_NFA
 696+ 71D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 696+ 71CD             >
 696+ 71CD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 696+ 71CE 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 696+ 71D2 44 53       >
 696+ 71D4             >                org     $-1                 // alter last byte of Name just above to set
 696+ 71D3 D3          >                db      {b $} | END_BIT     // msb as name end
 696+ 71D4             >
 696+ 71D4 B8 71       >                dw      last_NFA            // Link to previous definition Name
 696+ 71D6             >BOUNDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 696+ 71D6 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 696+ 71D9             >
 696+ 71D9             >
 696+ 71D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 696+ 71D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 696+ 71D9             >
 696+ 71D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 697+ 71D9 1C 6A 8F 69                  dw      OVER, PLUS, SWAP        // over + swap
 697+ 71DD 4C 6A
 698+ 71DF F4 68                        dw      EXIT                    // ;
 699+ 71E1
 700+ 71E1              //  ______________________________________________________________________
 701+ 71E1              //
 702+ 71E1              // type         a n --
 703+ 71E1              // Sends to current output channel n characters starting at address a.
 704+ 71E1                              Colon_Def TYPE, "TYPE", is_normal
 704+ 71E1             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 704+ 71E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 71E1             >
 704+ 71E1             >                // dummy db directives used to calculate length of namec
 704+ 71E1 54 59 50 45 >                db      "TYPE"
 704+ 71E5             >len_NFA         defl    $ - temp_NFA
 704+ 71E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 71E1             >
 704+ 71E1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 71E2 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 704+ 71E6             >                org     $-1                 // alter last byte of Name just above to set
 704+ 71E5 C5          >                db      {b $} | END_BIT     // msb as name end
 704+ 71E6             >
 704+ 71E6 CD 71       >                dw      last_NFA            // Link to previous definition Name
 704+ 71E8             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 71E8 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 71EB             >
 704+ 71EB             >
 704+ 71EB             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 71EB             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 71EB             >
 704+ 71EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 71EB D6 71                        dw      BOUNDS                  // bounds
 706+ 71ED 2C 64                        dw      C_Q_DO                  // ?do
 707+ 71EF 0C 00                        dw      Type_Skip - $
 708+ 71F1              Type_Loop:
 709+ 71F1 61 64 EF 6A                  dw          I, CFETCH           //      i c@
 710+ 71F5 24 6F                        dw          EMIT                //      emit
 711+ 71F7 EB 63                        dw      C_LOOP                  // loop
 712+ 71F9 F8 FF                        dw      Type_Loop - $
 713+ 71FB              Type_Skip:
 714+ 71FB F4 68                        dw      EXIT                    // ;
 715+ 71FD
 716+ 71FD              //  ______________________________________________________________________
 717+ 71FD              //
 718+ 71FD              // leave        --
 719+ 71FD              // Compile (leave) to leave current LOOP and jump just after it
 720+ 71FD                              Colon_Def LEAVE, "LEAVE", is_immediate
 720+ 71FD             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 720+ 71FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 71FD             >
 720+ 71FD             >                // dummy db directives used to calculate length of namec
 720+ 71FD 4C 45 41 56 >                db      "LEAVE"
 720+ 7201 45          >
 720+ 7202             >len_NFA         defl    $ - temp_NFA
 720+ 7202             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 71FD             >
 720+ 71FD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 71FE 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 720+ 7202 45          >
 720+ 7203             >                org     $-1                 // alter last byte of Name just above to set
 720+ 7202 C5          >                db      {b $} | END_BIT     // msb as name end
 720+ 7203             >
 720+ 7203 E1 71       >                dw      last_NFA            // Link to previous definition Name
 720+ 7205             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 7205 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 7208             >
 720+ 7208             >
 720+ 7208             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 7208             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 7208             >
 720+ 7208             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 7208 A4 70 0A 69                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 722+ 720C 31 6E 1E 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 722+ 7210 27 6C 4F 6E
 723+ 7214 27 6C 27 6C                  dw      ZERO, ZERO
 724+ 7218 C4 68 57 6A                  dw      SPFETCH, DUP
 725+ 721C CE 69 CE 69                  dw      CELL_PLUS, CELL_PLUS
 726+ 7220 3E 6A                        dw      TUCK
 727+ 7222 B7 6D D8 6A                  dw      CSP, FETCH
 728+ 7226 4C 6A 86 6E                  dw      SWAP, SUBTRACT
 729+ 722A F8 67                        dw      CMOVE
 730+ 722C B7 6D D8 6A                  dw      CSP, FETCH, CELL_MINUS
 730+ 7230 D9 69
 731+ 7232 30 69 1C 6A                  dw      R_TO, OVER, STORE
 731+ 7236 E3 6A
 732+ 7238 D9 69 27 6C                  dw      CELL_MINUS, ZERO
 733+ 723C 4C 6A E3 6A                  dw      SWAP, STORE
 734+ 7240 F4 68                        dw      EXIT                    // ;
 735+ 7242
 736+ 7242              //  ______________________________________________________________________
 737+ 7242              //
 738+ 7242              // -trailing    a n1 -- a n2
 739+ 7242              // Assumes that an n1 bytes-long string is stored at address a
 740+ 7242              // and the string contains a space delimited word,
 741+ 7242              // Finds n2 as the position of the first character after the word.
 742+ 7242                              Colon_Def LTRAILING, "-TRAILING", is_normal
 742+ 7242             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 742+ 7242             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 742+ 7242             >
 742+ 7242             >                // dummy db directives used to calculate length of namec
 742+ 7242 2D 54 52 41 >                db      "-TRAILING"
 742+ 7246 49 4C 49 4E >
 742+ 724A 47          >
 742+ 724B             >len_NFA         defl    $ - temp_NFA
 742+ 724B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 742+ 7242             >
 742+ 7242 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 742+ 7243 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 742+ 7247 49 4C 49 4E >
 742+ 724B 47          >
 742+ 724C             >                org     $-1                 // alter last byte of Name just above to set
 742+ 724B C7          >                db      {b $} | END_BIT     // msb as name end
 742+ 724C             >
 742+ 724C FD 71       >                dw      last_NFA            // Link to previous definition Name
 742+ 724E             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 742+ 724E CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 742+ 7251             >
 742+ 7251             >
 742+ 7251             >                endif           ; ok        // for other definitions it "points" the correct handler
 742+ 7251             >                // Use of "; ok" to suppress "warning[fwdref]"
 742+ 7251             >
 742+ 7251             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 743+ 7251 57 6A 27 6C                  dw      DUP, ZERO               // dup 0
 744+ 7255                                                              // do
 745+ 7255 2C 64                        dw      C_Q_DO
 746+ 7257 20 00                        dw      LTrailing_Leave - $
 747+ 7259              LTrailing_Loop:
 748+ 7259 AC 6A 8F 69                  dw          TWO_DUP, PLUS       //      2dup +
 749+ 725D B6 69                        dw          ONE_SUBTRACT        //      1-
 750+ 725F EF 6A                        dw          CFETCH              //      c@
 751+ 7261 56 6C 86 6E                  dw          BL, SUBTRACT        //      bl -
 752+ 7265                                                              //      if
 753+ 7265 D8 63                        dw          ZBRANCH
 754+ 7267 0A 00                        dw          LTrailing_Else - $
 755+ 7269 0A 69                        dw              C_LEAVE         //          leave
 756+ 726B 0C 00                        dw              LTrailing_Leave - $
 757+ 726D C3 63                        dw          BRANCH              //      else
 758+ 726F 04 00                        dw          LTrailing_Endif - $
 759+ 7271              LTrailing_Else:
 760+ 7271 B6 69                        dw              ONE_SUBTRACT    //          1-
 761+ 7273              LTrailing_Endif:                                //      endif
 762+ 7273                                                              // loop
 763+ 7273 EB 63                        dw      C_LOOP
 764+ 7275 E4 FF                        dw      LTrailing_Loop - $
 765+ 7277              LTrailing_Leave:
 766+ 7277 F4 68                        dw      EXIT                    // ;
 767+ 7279
 768+ 7279              //  ______________________________________________________________________
 769+ 7279              //
 770+ 7279              // accept       a n1 -- n2
 771+ 7279              // Accepts at most n1 characters from terminal and stores them at address a
 772+ 7279              // CR stops input. A 'nul' is added as trailer.
 773+ 7279              // n2 is the string length. n2 is kept in span user variable also.
 774+ 7279                              Colon_Def ACCEPT, "ACCEPT", is_normal
 774+ 7279             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 774+ 7279             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ 7279             >
 774+ 7279             >                // dummy db directives used to calculate length of namec
 774+ 7279 41 43 43 45 >                db      "ACCEPT"
 774+ 727D 50 54       >
 774+ 727F             >len_NFA         defl    $ - temp_NFA
 774+ 727F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ 7279             >
 774+ 7279 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ 727A 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 774+ 727E 50 54       >
 774+ 7280             >                org     $-1                 // alter last byte of Name just above to set
 774+ 727F D4          >                db      {b $} | END_BIT     // msb as name end
 774+ 7280             >
 774+ 7280 42 72       >                dw      last_NFA            // Link to previous definition Name
 774+ 7282             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 7282 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 7285             >
 774+ 7285             >
 774+ 7285             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 7285             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 7285             >
 774+ 7285             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 7285 1C 6A 8F 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 775+ 7289 1C 6A
 776+ 728B 27 6C 70 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 777+ 728F                                                              // do
 778+ 728F 2C 64                        dw      C_Q_DO
 779+ 7291 8A 00                        dw      Accept_Leave - $
 780+ 7293              Accept_Loop:
 781+ 7293 2A 6A 66 66                  dw          DROP, KEY           //      drop key        ( a  c )
 782+ 7297 57 6A                        dw          DUP                 //      dup             ( a  c  c )
 783+ 7299 A5 63 0E 00                  dw          LIT, $0E            //      0E
 784+ 729D 97 6C                        dw          PLUS_ORIGIN         //      +origin
 785+ 729F D8 6A                        dw          FETCH               //      @               ( a  c  c  del )
 786+ 72A1 92 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 787+ 72A3                                                              //      if
 788+ 72A3 D8 63                        dw          ZBRANCH
 789+ 72A5 2C 00                        dw          Accept_Else_0 - $
 790+ 72A7 2A 6A                        dw              DROP            //          drop        ( a  )
 791+ 72A9 57 6A 61 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 791+ 72AD 92 6E
 792+ 72AF 30 6C 92 68                  dw              ONE, AND_OP     //          1 and
 793+ 72B3 57 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 794+ 72B5 30 69                        dw              R_TO            //          r> 2 - + r>
 795+ 72B7 E4 69 8F 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 796+ 72BB 1E 69                        dw              TO_R            //
 797+ 72BD                                                              //          if
 798+ 72BD D8 63                        dw              ZBRANCH
 799+ 72BF 0A 00                        dw              Accept_Else_1 - $
 800+ 72C1 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 801+ 72C5                                                              //          else
 802+ 72C5 C3 63                        dw              BRANCH
 803+ 72C7 06 00                        dw              Accept_Endif_1 - $
 804+ 72C9              Accept_Else_1:
 805+ 72C9 A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 806+ 72CD              Accept_Endif_1:                                 //          endif
 807+ 72CD C3 63                        dw          BRANCH
 808+ 72CF 2E 00                        dw          Accept_Endif_0 - $
 809+ 72D1              Accept_Else_0:                                  //      else
 810+ 72D1 57 6A                        dw              DUP             //          dup         ( a  c  c )
 811+ 72D3 A5 63 0D 00                  dw              LIT, 13         //          13
 812+ 72D7 92 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 813+ 72D9                                                              //          if
 814+ 72D9 D8 63                        dw              ZBRANCH
 815+ 72DB 0C 00                        dw              Accept_Else_2 - $
 816+ 72DD 2A 6A 56 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 817+ 72E1 27 6C                        dw                  ZERO        //              0       ( a  c  0 )
 818+ 72E3                                                              //          else
 819+ 72E3 C3 63                        dw              BRANCH
 820+ 72E5 04 00                        dw              Accept_Endif_2 - $
 821+ 72E7              Accept_Else_2:
 822+ 72E7 57 6A                        dw                  DUP         //              dup     ( a  c  c )
 823+ 72E9                                                              //          endif
 824+ 72E9              Accept_Endif_2:
 825+ 72E9 61 64 FB 6A                  dw              I, CSTORE       //          i           ( a  c )
 826+ 72ED 57 6A 56 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 826+ 72F1 B2 6E
 827+ 72F3                                                              //          if
 828+ 72F3 D8 63                        dw              ZBRANCH
 829+ 72F5 08 00                        dw              Accept_Endif_3 - $
 830+ 72F7 30 69                        dw                  R_TO        //              r>
 831+ 72F9 B6 69                        dw                  ONE_SUBTRACT//              1-
 832+ 72FB 1E 69                        dw                  TO_R        //              >r
 833+ 72FD                                                              //          endif
 834+ 72FD              Accept_Endif_3:
 835+ 72FD              Accept_Endif_0:                                 //      endif
 836+ 72FD 24 6F                        dw          EMIT                //      emit
 837+ 72FF 27 6C 61 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 837+ 7303 AC 69
 838+ 7305 E3 6A                        dw          STORE               //          ( zero pad )
 839+ 7307 61 64                        dw          I                   //      i
 840+ 7309 61 64 EF 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 840+ 730D 51 69
 841+ 730F D8 63                        dw          ZBRANCH             //
 842+ 7311 06 00                        dw              Accept_Endif_4 - $
 843+ 7313 0A 69                        dw                  C_LEAVE     //              leave
 844+ 7315 06 00                        dw                  Accept_Leave - $
 845+ 7317              Accept_Endif_4:                                 //      endif
 846+ 7317                                                              // loop
 847+ 7317 EB 63                        dw      C_LOOP
 848+ 7319 7A FF                        dw      Accept_Loop - $
 849+ 731B              Accept_Leave:
 850+ 731B 4C 6A 86 6E                  dw      SWAP, SUBTRACT          // swap -
 851+ 731F AC 69                        dw      ONE_PLUS                // 1+
 852+ 7321 57 6A 0F 6E                  dw      DUP, SPAN, STORE        // dup span !
 852+ 7325 E3 6A
 853+ 7327 F4 68                        dw      EXIT                    // ;
 854+ 7329
 855+ 7329              //  ______________________________________________________________________
 856+ 7329              //
 857+ 7329              // expect      a n --
 858+ 7329              // Accepts at most n1 characters from terminal and stores them at address a
 859+ 7329              // CR stops input. A 'nul' is added as trailer.
 860+ 7329              // n2 is the string length. n2 is kept in span user variable also.
 861+ 7329              //              Colon_Def EXPECT, "EXPECT", is_normal
 862+ 7329              //              dw      ACCEPT, DROP            // accept drop
 863+ 7329              //              dw      EXIT                    // ;
 864+ 7329
 865+ 7329              //  ______________________________________________________________________
 866+ 7329              //
 867+ 7329              // query        --
 868+ 7329              // Accept at most 80 character from console. CR stops.
 869+ 7329              // Text is stored in TIB. Variable IN is zeroed.
 870+ 7329                              Colon_Def QUERY, "QUERY", is_normal
 870+ 7329             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 870+ 7329             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ 7329             >
 870+ 7329             >                // dummy db directives used to calculate length of namec
 870+ 7329 51 55 45 52 >                db      "QUERY"
 870+ 732D 59          >
 870+ 732E             >len_NFA         defl    $ - temp_NFA
 870+ 732E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ 7329             >
 870+ 7329 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ 732A 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 870+ 732E 59          >
 870+ 732F             >                org     $-1                 // alter last byte of Name just above to set
 870+ 732E D9          >                db      {b $} | END_BIT     // msb as name end
 870+ 732F             >
 870+ 732F 79 72       >                dw      last_NFA            // Link to previous definition Name
 870+ 7331             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 7331 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 7334             >
 870+ 7334             >
 870+ 7334             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 7334             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 7334             >
 870+ 7334             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 7334 C5 6C D8 6A                  dw      TIB, FETCH              // tib @
 872+ 7338 A5 63 50 00                  dw      LIT, 80                 // 80
 873+ 733C 82 72 2A 6A                  dw      ACCEPT, DROP            // accept drop
 874+ 7340 27 6C 45 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 874+ 7344 E3 6A
 875+ 7346 F4 68                        dw      EXIT                    // ;
 876+ 7348
 877+ 7348              //  ______________________________________________________________________
 878+ 7348              //
 879+ 7348              // fill        a n c --
 880+ 7348              // If n > 0, fills n locations starting from address a with the value c.
 881+ 7348                              New_Def FILL, "FILL", is_code, is_normal
 881+ 7348             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 7348             >
 881+ 7348             >                // dummy db directives used to calculate length of namec
 881+ 7348 46 49 4C 4C >                db      "FILL"
 881+ 734C             >len_NFA         defl    $ - temp_NFA
 881+ 734C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 7348             >
 881+ 7348 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 7349 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 881+ 734D             >                org     $-1                 // alter last byte of Name just above to set
 881+ 734C CC          >                db      {b $} | END_BIT     // msb as name end
 881+ 734D             >
 881+ 734D 29 73       >                dw      last_NFA            // Link to previous definition Name
 881+ 734F             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 734F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 881+ 734F ~           >
 881+ 734F ~           >
 881+ 734F             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 734F             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 734F             >
 881+ 734F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 734F D9                           exx
 883+ 7350 D1                           pop     de                  // de has character
 884+ 7351 C1                           pop     bc                  // bc has counter
 885+ 7352 E1                           pop     hl                  // hl has address, save Instruction Pointer
 886+ 7353              Fill_Loop:
 887+ 7353 78                               ld      a, b
 888+ 7354 B1                               or      c
 889+ 7355 28 05                        jr      z, Fill_While_End
 890+ 7357 73                               ld      (hl), e
 891+ 7358 0B                               dec     bc
 892+ 7359 23                               inc     hl
 893+ 735A 18 F7                        jr      Fill_Loop
 894+ 735C              Fill_While_End:
 895+ 735C D9                           exx
 896+ 735D                              next
 896+ 735D DD E9       >                jp      (ix)
 897+ 735F
 898+ 735F              //  ______________________________________________________________________
 899+ 735F              //
 900+ 735F              // erase        a n --
 901+ 735F              // If n > 0, fills n locations starting from address a with 'nul' characters.
 902+ 735F                              Colon_Def ERASE, "ERASE", is_normal
 902+ 735F             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 902+ 735F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ 735F             >
 902+ 735F             >                // dummy db directives used to calculate length of namec
 902+ 735F 45 52 41 53 >                db      "ERASE"
 902+ 7363 45          >
 902+ 7364             >len_NFA         defl    $ - temp_NFA
 902+ 7364             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ 735F             >
 902+ 735F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ 7360 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 902+ 7364 45          >
 902+ 7365             >                org     $-1                 // alter last byte of Name just above to set
 902+ 7364 C5          >                db      {b $} | END_BIT     // msb as name end
 902+ 7365             >
 902+ 7365 48 73       >                dw      last_NFA            // Link to previous definition Name
 902+ 7367             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 7367 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 902+ 736A             >
 902+ 736A             >
 902+ 736A             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 736A             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 736A             >
 902+ 736A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 736A 27 6C 4F 73                  dw      ZERO, FILL              // 0 fill
 904+ 736E F4 68                        dw      EXIT                    // ;
 905+ 7370
 906+ 7370              //  ______________________________________________________________________
 907+ 7370              //
 908+ 7370              // blanks       a n --
 909+ 7370              // If n > 0, fills n locations starting from address a with 'nul' characters.
 910+ 7370                              Colon_Def BLANKS, "BLANKS", is_normal
 910+ 7370             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 910+ 7370             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 910+ 7370             >
 910+ 7370             >                // dummy db directives used to calculate length of namec
 910+ 7370 42 4C 41 4E >                db      "BLANKS"
 910+ 7374 4B 53       >
 910+ 7376             >len_NFA         defl    $ - temp_NFA
 910+ 7376             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 910+ 7370             >
 910+ 7370 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 910+ 7371 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 910+ 7375 4B 53       >
 910+ 7377             >                org     $-1                 // alter last byte of Name just above to set
 910+ 7376 D3          >                db      {b $} | END_BIT     // msb as name end
 910+ 7377             >
 910+ 7377 5F 73       >                dw      last_NFA            // Link to previous definition Name
 910+ 7379             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 910+ 7379 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 910+ 737C             >
 910+ 737C             >
 910+ 737C             >                endif           ; ok        // for other definitions it "points" the correct handler
 910+ 737C             >                // Use of "; ok" to suppress "warning[fwdref]"
 910+ 737C             >
 910+ 737C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 911+ 737C 56 6C 4F 73                  dw      BL, FILL                // bl fill
 912+ 7380 F4 68                        dw      EXIT                    // ;
 913+ 7382
 914+ 7382              //  ______________________________________________________________________
 915+ 7382              //
 916+ 7382              // hold         c --
 917+ 7382              // Used between <# and #> to insert a character c in numeric formatting.
 918+ 7382                              Colon_Def HOLD, "HOLD", is_normal
 918+ 7382             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 918+ 7382             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 7382             >
 918+ 7382             >                // dummy db directives used to calculate length of namec
 918+ 7382 48 4F 4C 44 >                db      "HOLD"
 918+ 7386             >len_NFA         defl    $ - temp_NFA
 918+ 7386             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 7382             >
 918+ 7382 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 7383 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 918+ 7387             >                org     $-1                 // alter last byte of Name just above to set
 918+ 7386 C4          >                db      {b $} | END_BIT     // msb as name end
 918+ 7387             >
 918+ 7387 70 73       >                dw      last_NFA            // Link to previous definition Name
 918+ 7389             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 7389 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 738C             >
 918+ 738C             >
 918+ 738C             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 738C             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 738C             >
 918+ 738C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 738C 4C 6C                        dw      NEG_ONE                 // -1
 920+ 738E CA 6D B9 6A                  dw      HLD, PLUSSTORE          // hld +!
 921+ 7392 CA 6D D8 6A                  dw      HLD, FETCH, CSTORE      // hld @ c!
 921+ 7396 FB 6A
 922+ 7398 F4 68                        dw      EXIT                    // ;
 923+ 739A
 924+ 739A              //  ______________________________________________________________________
 925+ 739A              //
 926+ 739A              // pad         -- a
 927+ 739A              // leaves the buffer text address. This is at a fixed distance over HERE.
 928+ 739A                              Colon_Def PAD, "PAD", is_normal
 928+ 739A             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 928+ 739A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 928+ 739A             >
 928+ 739A             >                // dummy db directives used to calculate length of namec
 928+ 739A 50 41 44    >                db      "PAD"
 928+ 739D             >len_NFA         defl    $ - temp_NFA
 928+ 739D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 928+ 739A             >
 928+ 739A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 928+ 739B 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 928+ 739E             >                org     $-1                 // alter last byte of Name just above to set
 928+ 739D C4          >                db      {b $} | END_BIT     // msb as name end
 928+ 739E             >
 928+ 739E 82 73       >                dw      last_NFA            // Link to previous definition Name
 928+ 73A0             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 928+ 73A0 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 928+ 73A3             >
 928+ 73A3             >
 928+ 73A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 928+ 73A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 928+ 73A3             >
 928+ 73A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 929+ 73A3 31 6E                        dw      HERE                    // here
 930+ 73A5 A5 63 44 00                  dw      LIT, 68                 // 68
 931+ 73A9 8F 69                        dw      PLUS                    // +
 932+ 73AB F4 68                        dw      EXIT                    // ;
 933+ 73AD
 934+ 73AD              //  ______________________________________________________________________
 935+ 73AD              //
 936+ 73AD              // word         c -- a
 937+ 73AD              // reads characters from input streams until it encouners a c delimiter.
 938+ 73AD              // Stores that packet so it starts from HERE
 939+ 73AD              // WORD leaves a counter as first byte and ends the packet with two spaces.
 940+ 73AD              // Other occurrences of c are ignored.
 941+ 73AD              // If BLK is zero, text is taken from terminal buffer TIB.
 942+ 73AD              // Otherwise text is taken from the disk-block given by BLK.
 943+ 73AD              // "in" variable is incremented of the number of character read.
 944+ 73AD              // The number of characters read is given by ENCLOSE.
 945+ 73AD                              Colon_Def WORD, "WORD", is_normal
 945+ 73AD             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 945+ 73AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 945+ 73AD             >
 945+ 73AD             >                // dummy db directives used to calculate length of namec
 945+ 73AD 57 4F 52 44 >                db      "WORD"
 945+ 73B1             >len_NFA         defl    $ - temp_NFA
 945+ 73B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 945+ 73AD             >
 945+ 73AD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 945+ 73AE 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 945+ 73B2             >                org     $-1                 // alter last byte of Name just above to set
 945+ 73B1 C4          >                db      {b $} | END_BIT     // msb as name end
 945+ 73B2             >
 945+ 73B2 9A 73       >                dw      last_NFA            // Link to previous definition Name
 945+ 73B4             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 945+ 73B4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 945+ 73B7             >
 945+ 73B7             >
 945+ 73B7             >                endif           ; ok        // for other definitions it "points" the correct handler
 945+ 73B7             >                // Use of "; ok" to suppress "warning[fwdref]"
 945+ 73B7             >
 945+ 73B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 946+ 73B7 3B 6D D8 6A                  dw      BLK, FETCH              // blk @
 947+ 73BB                                                              // if
 948+ 73BB D8 63                        dw      ZBRANCH
 949+ 73BD 0C 00                        dw      Word_Else - $
 950+ 73BF 3B 6D D8 6A                  dw          BLK, FETCH          //      blk @
 951+ 73C3 90 7D                        dw          BLOCK               //      block ( forward )
 952+ 73C5                                                              // else
 953+ 73C5 C3 63                        dw      BRANCH
 954+ 73C7 06 00                        dw      Word_Endif - $
 955+ 73C9              Word_Else:
 956+ 73C9 C5 6C D8 6A                  dw         TIB, FETCH           //      tib @
 957+ 73CD              Word_Endif:                                     // endif
 958+ 73CD 45 6D D8 6A                  dw      TO_IN, FETCH, PLUS      // >in @ +
 958+ 73D1 8F 69
 959+ 73D3 4C 6A 41 65                  dw      SWAP, ENCLOSE           // swap enclose
 960+ 73D7 31 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 960+ 73DB 22 00 79 73
 961+ 73DF 45 6D B9 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 962+ 73E3 1C 6A 86 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 962+ 73E7 1E 69
 963+ 73E9 42 69 31 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 963+ 73ED FB 6A
 964+ 73EF 8F 69                        dw      PLUS                    // +
 965+ 73F1 31 6E AC 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 965+ 73F5 30 69
 966+ 73F7 F8 67                        dw      CMOVE                   // cmove
 967+ 73F9 31 6E                        dw      HERE                    // here
 968+ 73FB F4 68                        dw      EXIT                    // ;
 969+ 73FD
 970+ 73FD              //  ______________________________________________________________________
 971+ 73FD              //
 972+ 73FD              // (.")         --
 973+ 73FD              // Direct procedure compiled by ." and  .(  It executes TYPE.
 974+ 73FD                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 974+ 73FD             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 974+ 73FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ 73FD             >
 974+ 73FD             >                // dummy db directives used to calculate length of namec
 974+ 73FD 28 2E 22 29 >                db      '(.")'
 974+ 7401             >len_NFA         defl    $ - temp_NFA
 974+ 7401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ 73FD             >
 974+ 73FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ 73FE 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 974+ 7402             >                org     $-1                 // alter last byte of Name just above to set
 974+ 7401 A9          >                db      {b $} | END_BIT     // msb as name end
 974+ 7402             >
 974+ 7402 AD 73       >                dw      last_NFA            // Link to previous definition Name
 974+ 7404             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 7404 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 7407             >
 974+ 7407             >
 974+ 7407             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 7407             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 7407             >
 974+ 7407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 7407 42 69 C0 71                  dw      R_OP, COUNT             // r count
 976+ 740B 57 6A AC 69                  dw      DUP, ONE_PLUS           // dup 1+
 977+ 740F 30 69 8F 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 977+ 7413 1E 69
 978+ 7415 E8 71                        dw      TYPE                    // type
 979+ 7417 F4 68                        dw      EXIT                    // ;
 980+ 7419
 981+ 7419              //  ______________________________________________________________________
 982+ 7419              //
 983+ 7419              // char         -- c
 984+ 7419              // get first character from next input word
 985+ 7419                              Colon_Def CHAR,  "CHAR", is_normal
 985+ 7419             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 985+ 7419             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ 7419             >
 985+ 7419             >                // dummy db directives used to calculate length of namec
 985+ 7419 43 48 41 52 >                db      "CHAR"
 985+ 741D             >len_NFA         defl    $ - temp_NFA
 985+ 741D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ 7419             >
 985+ 7419 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ 741A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 985+ 741E             >                org     $-1                 // alter last byte of Name just above to set
 985+ 741D D2          >                db      {b $} | END_BIT     // msb as name end
 985+ 741E             >
 985+ 741E FD 73       >                dw      last_NFA            // Link to previous definition Name
 985+ 7420             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 7420 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 7423             >
 985+ 7423             >
 985+ 7423             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 7423             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 7423             >
 985+ 7423             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 7423 56 6C B4 73                  dw      BL, WORD                // bl word
 987+ 7427 AC 69 EF 6A                  dw      ONE_PLUS, CFETCH        // 1+ c@
 988+ 742B F4 68                        dw      EXIT                    // ;
 989+ 742D
 990+ 742D              //  ______________________________________________________________________
 991+ 742D              //
 992+ 742D              // ,"           --
 993+ 742D              // compiles a string terminated by " as a counted string from next input stream
 994+ 742D                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 994+ 742D             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 994+ 742D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 994+ 742D             >
 994+ 742D             >                // dummy db directives used to calculate length of namec
 994+ 742D 2C 22       >                db      ',"'
 994+ 742F             >len_NFA         defl    $ - temp_NFA
 994+ 742F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 994+ 742D             >
 994+ 742D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 994+ 742E 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 994+ 7430             >                org     $-1                 // alter last byte of Name just above to set
 994+ 742F A2          >                db      {b $} | END_BIT     // msb as name end
 994+ 7430             >
 994+ 7430 19 74       >                dw      last_NFA            // Link to previous definition Name
 994+ 7432             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 994+ 7432 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 994+ 7435             >
 994+ 7435             >
 994+ 7435             >                endif           ; ok        // for other definitions it "points" the correct handler
 994+ 7435             >                // Use of "; ok" to suppress "warning[fwdref]"
 994+ 7435             >
 994+ 7435             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 995+ 7435 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 996+ 7439 B4 73                        dw      WORD                    // word
 997+ 743B EF 6A AC 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 998+ 743F 42 6E                        dw      ALLOT                   // allot
 999+ 7441 27 6C 61 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1000+ 7445 F4 68                        dw      EXIT
1001+ 7447
1002+ 7447              //  ______________________________________________________________________
1003+ 7447              //
1004+ 7447              // .c           c --
1005+ 7447              // intermediate general purpose string builder, used by ." and .(
1006+ 7447                              Colon_Def DOT_C,  ".C", is_immediate
1006+ 7447             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1006+ 7447             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1006+ 7447             >
1006+ 7447             >                // dummy db directives used to calculate length of namec
1006+ 7447 2E 43       >                db      ".C"
1006+ 7449             >len_NFA         defl    $ - temp_NFA
1006+ 7449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1006+ 7447             >
1006+ 7447 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1006+ 7448 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1006+ 744A             >                org     $-1                 // alter last byte of Name just above to set
1006+ 7449 C3          >                db      {b $} | END_BIT     // msb as name end
1006+ 744A             >
1006+ 744A 2D 74       >                dw      last_NFA            // Link to previous definition Name
1006+ 744C             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1006+ 744C CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1006+ 744F             >
1006+ 744F             >
1006+ 744F             >                endif           ; ok        // for other definitions it "points" the correct handler
1006+ 744F             >                // Use of "; ok" to suppress "warning[fwdref]"
1006+ 744F             >
1006+ 744F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1007+ 744F 8E 6D D8 6A                  dw      STATE, FETCH            // state @
1008+ 7453                                                              // if
1009+ 7453 D8 63                        dw      ZBRANCH
1010+ 7455 12 00                        dw      Dot_C_Else - $
1011+ 7457 A4 70 04 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1012+ 745B B4 73 EF 6A                  dw          WORD, CFETCH        //      word c@
1013+ 745F AC 69 42 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1014+ 7463                                                              // else
1015+ 7463 C3 63                        dw      BRANCH
1016+ 7465 08 00                        dw      Dot_C_Endif - $
1017+ 7467              Dot_C_Else:
1018+ 7467 B4 73 C0 71                  dw          WORD, COUNT, TYPE   //      word count type
1018+ 746B E8 71
1019+ 746D              Dot_C_Endif:                                    // endif
1020+ 746D F4 68                        dw      EXIT                    ;
1021+ 746F
1022+ 746F              //  ______________________________________________________________________
1023+ 746F              //
1024+ 746F              // ."           c --
1025+ 746F                              Colon_Def DOT_QUOTE,  '."', is_immediate
1025+ 746F             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1025+ 746F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 746F             >
1025+ 746F             >                // dummy db directives used to calculate length of namec
1025+ 746F 2E 22       >                db      '."'
1025+ 7471             >len_NFA         defl    $ - temp_NFA
1025+ 7471             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 746F             >
1025+ 746F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 7470 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1025+ 7472             >                org     $-1                 // alter last byte of Name just above to set
1025+ 7471 A2          >                db      {b $} | END_BIT     // msb as name end
1025+ 7472             >
1025+ 7472 47 74       >                dw      last_NFA            // Link to previous definition Name
1025+ 7474             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 7474 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 7477             >
1025+ 7477             >
1025+ 7477             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 7477             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 7477             >
1025+ 7477             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 7477 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1027+ 747B 4C 74                        dw      DOT_C                   // [compile] .c
1028+ 747D F4 68                        dw      EXIT                    // ; immediate
1029+ 747F
1030+ 747F              //  ______________________________________________________________________
1031+ 747F              //
1032+ 747F              // .(           c --
1033+ 747F                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1033+ 747F             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1033+ 747F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1033+ 747F             >
1033+ 747F             >                // dummy db directives used to calculate length of namec
1033+ 747F 2E 28       >                db      ".("
1033+ 7481             >len_NFA         defl    $ - temp_NFA
1033+ 7481             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1033+ 747F             >
1033+ 747F C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1033+ 7480 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1033+ 7482             >                org     $-1                 // alter last byte of Name just above to set
1033+ 7481 A8          >                db      {b $} | END_BIT     // msb as name end
1033+ 7482             >
1033+ 7482 6F 74       >                dw      last_NFA            // Link to previous definition Name
1033+ 7484             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1033+ 7484 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1033+ 7487             >
1033+ 7487             >
1033+ 7487             >                endif           ; ok        // for other definitions it "points" the correct handler
1033+ 7487             >                // Use of "; ok" to suppress "warning[fwdref]"
1033+ 7487             >
1033+ 7487             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1034+ 7487 A5 63 29 00                  dw      LIT, ")"                // [char] )
1035+ 748B 4C 74                        dw      DOT_C                   // [compile] .c
1036+ 748D F4 68                        dw      EXIT                    // ; immediate
1037+ 748F
1038+ 748F              //  ______________________________________________________________________
1039+ 748F              //
1040+ 748F              // (sgn)        a -- a f
1041+ 748F              // determines if char in addr a is a sign (+ or -), and in that case increments
1042+ 748F              // a flag. Returns f as the sign, true for negative, false for positive.
1043+ 748F              // called by NUMBER and (EXP)
1044+ 748F                              Colon_Def CSGN,  "(SGN)", is_normal
1044+ 748F             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1044+ 748F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1044+ 748F             >
1044+ 748F             >                // dummy db directives used to calculate length of namec
1044+ 748F 28 53 47 4E >                db      "(SGN)"
1044+ 7493 29          >
1044+ 7494             >len_NFA         defl    $ - temp_NFA
1044+ 7494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1044+ 748F             >
1044+ 748F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1044+ 7490 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1044+ 7494 29          >
1044+ 7495             >                org     $-1                 // alter last byte of Name just above to set
1044+ 7494 A9          >                db      {b $} | END_BIT     // msb as name end
1044+ 7495             >
1044+ 7495 7F 74       >                dw      last_NFA            // Link to previous definition Name
1044+ 7497             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1044+ 7497 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1044+ 749A             >
1044+ 749A             >
1044+ 749A             >                endif           ; ok        // for other definitions it "points" the correct handler
1044+ 749A             >                // Use of "; ok" to suppress "warning[fwdref]"
1044+ 749A             >
1044+ 749A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1045+ 749A 57 6A AC 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1045+ 749E EF 6A
1046+ 74A0 57 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1046+ 74A4 2D 00 92 6E
1047+ 74A8                                                              // if
1048+ 74A8 D8 63                        dw      ZBRANCH
1049+ 74AA 12 00                        dw      CSgn_Else_0 - $
1050+ 74AC 2A 6A                        dw          DROP                //      drop
1051+ 74AE AC 69                        dw          ONE_PLUS            //      1+
1052+ 74B0 30 6C A3 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1052+ 74B4 B9 6A
1053+ 74B6 30 6C                        dw          ONE                 //      1
1054+ 74B8                                                              // else
1055+ 74B8 C3 63                        dw      BRANCH
1056+ 74BA 16 00                        dw      CSgn_Endif_0 - $
1057+ 74BC              CSgn_Else_0:
1058+ 74BC A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1058+ 74C0 92 6E
1059+ 74C2                                                              //      if
1060+ 74C2 D8 63                        dw          ZBRANCH
1061+ 74C4 0A 00                        dw          CSgn_Endif_1 - $
1062+ 74C6 AC 69                        dw              ONE_PLUS        //          1+
1063+ 74C8 30 6C A3 6D                  dw              ONE, DPL        //          1 dpl
1064+ 74CC B9 6A                        dw              PLUSSTORE       //          +!
1065+ 74CE              CSgn_Endif_1                                    //      endif
1066+ 74CE 27 6C                        dw          ZERO                //      0
1067+ 74D0              CSgn_Endif_0:                                   // endif
1068+ 74D0 F4 68                        dw      EXIT
1069+ 74D2
1070+ 74D2              //  ______________________________________________________________________
1071+ 74D2              //
1072+ 74D2              // (number)     d a -- d1 a1
1073+ 74D2              // using the current BASE parse characters stored in address a
1074+ 74D2              // accumulating a double precision integer d
1075+ 74D2              // the process stops at the first not-convertible character
1076+ 74D2              // A double-number is kept in CPU registers as HLDE.
1077+ 74D2              // On the stack a double number is treated as two single numbers
1078+ 74D2              // where HL is on the top of the stack and DE is the second from top,
1079+ 74D2              // so in the stack memory it appears as LHED.
1080+ 74D2              // Instead, in 2VARIABLE a double number is stored as EDLH.
1081+ 74D2                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1081+ 74D2             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1081+ 74D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1081+ 74D2             >
1081+ 74D2             >                // dummy db directives used to calculate length of namec
1081+ 74D2 28 4E 55 4D >                db      "(NUMBER)"
1081+ 74D6 42 45 52 29 >
1081+ 74DA             >len_NFA         defl    $ - temp_NFA
1081+ 74DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1081+ 74D2             >
1081+ 74D2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1081+ 74D3 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1081+ 74D7 42 45 52 29 >
1081+ 74DB             >                org     $-1                 // alter last byte of Name just above to set
1081+ 74DA A9          >                db      {b $} | END_BIT     // msb as name end
1081+ 74DB             >
1081+ 74DB 8F 74       >                dw      last_NFA            // Link to previous definition Name
1081+ 74DD             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1081+ 74DD CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1081+ 74E0             >
1081+ 74E0             >
1081+ 74E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1081+ 74E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1081+ 74E0             >
1081+ 74E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1082+ 74E0                                                              // begin
1083+ 74E0              CNumber_Begin:
1084+ 74E0 AC 69                        dw          ONE_PLUS            //      1+
1085+ 74E2 57 6A 1E 69                  dw          DUP, TO_R           //      dup >r
1086+ 74E6 EF 6A                        dw          CFETCH              //      @
1087+ 74E8 99 6D D8 6A                  dw          BASE, FETCH         //      base @
1088+ 74EC 7E 64                        dw          DIGIT               //      digit
1089+ 74EE                                                              // while
1090+ 74EE D8 63                        dw      ZBRANCH
1091+ 74F0 2C 00                        dw      CNumber_While_end - $
1092+ 74F2 4C 6A                        dw          SWAP                //      swap
1093+ 74F4 99 6D D8 6A                  dw          BASE, FETCH         //      base @
1094+ 74F8 27 68                        dw          UM_MUL              //      um*
1095+ 74FA 2A 6A 62 6A                  dw          DROP, ROT           //      drop rot
1096+ 74FE 99 6D D8 6A                  dw          BASE, FETCH         //      base @
1097+ 7502 27 68                        dw          UM_MUL              //      um*
1098+ 7504 9A 69                        dw          DPLUS               //      d+
1099+ 7506 A3 6D D8 6A                  dw          DPL, FETCH          //      dpl @
1100+ 750A AC 69                        dw          ONE_PLUS            //      1+
1101+ 750C                                                              //      if
1102+ 750C D8 63                        dw          ZBRANCH
1103+ 750E 08 00                        dw          CNumber_Endif - $
1104+ 7510 30 6C A3 6D                  dw              ONE, DPL        //          1 dpl
1105+ 7514 B9 6A                        dw              PLUSSTORE       //          +!
1106+ 7516              CNumber_Endif:                                  //      endif
1107+ 7516 30 69                        dw             R_TO             //      r>  ( balance rp )
1108+ 7518 C3 63                        dw      BRANCH
1109+ 751A C6 FF                        dw      CNumber_Begin - $
1110+ 751C              CNumber_While_end:                              // repeat
1111+ 751C 30 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1112+ 751E F4 68                        dw      EXIT                    // ;
1113+ 7520
1114+ 7520              //  ______________________________________________________________________
1115+ 7520              //
1116+ 7520              // number       a -- d
1117+ 7520                              Colon_Def NUMBER,  "NUMBER", is_normal
1117+ 7520             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1117+ 7520             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 7520             >
1117+ 7520             >                // dummy db directives used to calculate length of namec
1117+ 7520 4E 55 4D 42 >                db      "NUMBER"
1117+ 7524 45 52       >
1117+ 7526             >len_NFA         defl    $ - temp_NFA
1117+ 7526             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 7520             >
1117+ 7520 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 7521 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1117+ 7525 45 52       >
1117+ 7527             >                org     $-1                 // alter last byte of Name just above to set
1117+ 7526 D2          >                db      {b $} | END_BIT     // msb as name end
1117+ 7527             >
1117+ 7527 D2 74       >                dw      last_NFA            // Link to previous definition Name
1117+ 7529             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 7529 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1117+ 752C             >
1117+ 752C             >
1117+ 752C             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 752C             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 752C             >
1117+ 752C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 752C 27 6C 27 6C                  dw      ZERO, ZERO              // 0 0
1119+ 7530 62 6A                        dw      ROT                     // rot
1120+ 7532 97 74 1E 69                  dw      CSGN, TO_R              // (sgn) >r
1121+ 7536 4C 6C A3 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1121+ 753A E3 6A
1122+ 753C DD 74                        dw      CNUMBER                 // (number)
1123+ 753E 57 6A EF 6A                  dw      DUP, CFETCH             // dup c@
1124+ 7542 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1124+ 7546 92 6E
1125+ 7548                                                              // if
1126+ 7548 D8 63                        dw      ZBRANCH
1127+ 754A 0A 00                        dw      Number_Endif_1 - $
1128+ 754C 27 6C A3 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1128+ 7550 E3 6A
1129+ 7552 DD 74                        dw          CNUMBER             //      (number)
1130+ 7554              Number_Endif_1:                                 // endif
1131+ 7554 EF 6A 56 6C                  dw      CFETCH, BL              // c@ bl
1132+ 7558 86 6E 27 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1132+ 755C 0B 70
1133+ 755E 30 69                        dw      R_TO                    // r>
1134+ 7560                                                              // if
1135+ 7560 D8 63                        dw      ZBRANCH
1136+ 7562 04 00                        dw      Number_Endif_2 - $
1137+ 7564 04 6A                        dw          DMINUS              //      dminus
1138+ 7566              Number_Endif_2:                                 // endif
1139+ 7566 F4 68                        dw      EXIT                    // ;
1140+ 7568
1141+ 7568              //  ______________________________________________________________________
1142+ 7568              //
1143+ 7568              // -find        a -- d
1144+ 7568                              Colon_Def LFIND,  "-FIND", is_normal
1144+ 7568             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1144+ 7568             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1144+ 7568             >
1144+ 7568             >                // dummy db directives used to calculate length of namec
1144+ 7568 2D 46 49 4E >                db      "-FIND"
1144+ 756C 44          >
1144+ 756D             >len_NFA         defl    $ - temp_NFA
1144+ 756D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1144+ 7568             >
1144+ 7568 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1144+ 7569 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1144+ 756D 44          >
1144+ 756E             >                org     $-1                 // alter last byte of Name just above to set
1144+ 756D C4          >                db      {b $} | END_BIT     // msb as name end
1144+ 756E             >
1144+ 756E 20 75       >                dw      last_NFA            // Link to previous definition Name
1144+ 7570             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1144+ 7570 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1144+ 7573             >
1144+ 7573             >
1144+ 7573             >                endif           ; ok        // for other definitions it "points" the correct handler
1144+ 7573             >                // Use of "; ok" to suppress "warning[fwdref]"
1144+ 7573             >
1144+ 7573             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1145+ 7573 56 6C B4 73                  dw      BL, WORD                // bl word
1146+ 7577 74 6D D8 6A                  dw      CONTEXT, FETCH, FETCH   // context @ @
1146+ 757B D8 6A
1147+ 757D EB 64                        dw      C_FIND                  // (find)
1148+ 757F 0A 6F                        dw      QDUP                    // ?dup
1149+ 7581 51 69                        dw      ZEQUAL                  // 0=
1150+ 7583                                                              // if
1151+ 7583 D8 63                        dw      ZBRANCH
1152+ 7585 08 00                        dw      LFind_Endif - $
1153+ 7587 31 6E                        dw          HERE                //      here
1154+ 7589 79 6F                        dw          LATEST              //      latest
1155+ 758B EB 64                        dw          C_FIND              //      (find)
1156+ 758D              LFind_Endif:                                    // endif
1157+ 758D F4 68                        dw      EXIT                    // ;
1158+ 758F
1159+ 758F              //  ______________________________________________________________________
1160+ 758F              //
1161+ 758F              // (abort)      --
1162+ 758F                              Colon_Def CABORT,  "(ABORT)", is_normal
1162+ 758F             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1162+ 758F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1162+ 758F             >
1162+ 758F             >                // dummy db directives used to calculate length of namec
1162+ 758F 28 41 42 4F >                db      "(ABORT)"
1162+ 7593 52 54 29    >
1162+ 7596             >len_NFA         defl    $ - temp_NFA
1162+ 7596             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1162+ 758F             >
1162+ 758F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1162+ 7590 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1162+ 7594 52 54 29    >
1162+ 7597             >                org     $-1                 // alter last byte of Name just above to set
1162+ 7596 A9          >                db      {b $} | END_BIT     // msb as name end
1162+ 7597             >
1162+ 7597 68 75       >                dw      last_NFA            // Link to previous definition Name
1162+ 7599             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1162+ 7599 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1162+ 759C             >
1162+ 759C             >
1162+ 759C             >                endif           ; ok        // for other definitions it "points" the correct handler
1162+ 759C             >                // Use of "; ok" to suppress "warning[fwdref]"
1162+ 759C             >
1162+ 759C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1163+ 759C 75 78                        dw      ABORT                   // abort
1164+ 759E F4 68                        dw      EXIT                    // ;
1165+ 75A0
1166+ 75A0              //  ______________________________________________________________________
1167+ 75A0              //
1168+ 75A0              // error        n --
1169+ 75A0              // raise an error
1170+ 75A0              // if WARNING is 0, prints "MSG#n".
1171+ 75A0              // if WARNING is 1, prints line n of screen 4.
1172+ 75A0              // if WARNING is -1 does (ABORT) that normally does ABORT
1173+ 75A0              // value can be negative or beyond block 4.
1174+ 75A0                              Colon_Def ERROR,  "ERROR", is_normal
1174+ 75A0             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1174+ 75A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1174+ 75A0             >
1174+ 75A0             >                // dummy db directives used to calculate length of namec
1174+ 75A0 45 52 52 4F >                db      "ERROR"
1174+ 75A4 52          >
1174+ 75A5             >len_NFA         defl    $ - temp_NFA
1174+ 75A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1174+ 75A0             >
1174+ 75A0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1174+ 75A1 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1174+ 75A5 52          >
1174+ 75A6             >                org     $-1                 // alter last byte of Name just above to set
1174+ 75A5 D2          >                db      {b $} | END_BIT     // msb as name end
1174+ 75A6             >
1174+ 75A6 8F 75       >                dw      last_NFA            // Link to previous definition Name
1174+ 75A8             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1174+ 75A8 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1174+ 75AB             >
1174+ 75AB             >
1174+ 75AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1174+ 75AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1174+ 75AB             >
1174+ 75AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1175+ 75AB DF 6C D8 6A                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1175+ 75AF 6B 69
1176+ 75B1                                                              // if
1177+ 75B1 D8 63                        dw      ZBRANCH
1178+ 75B3 04 00                        dw      Error_Endif_1 - $
1179+ 75B5 99 75                        dw          CABORT              //      (abort)
1180+ 75B7              Error_Endif_1:                                  // endif
1181+ 75B7 31 6E C0 71                  dw      HERE, COUNT, TYPE       // here count type
1181+ 75BB E8 71
1182+ 75BD 04 74                        dw      C_DOT_QUOTE             // .( ? )
1183+ 75BF 02 3F 20                     db      2, "? "
1184+ 75C2 B8 7A                        dw      MESSAGE                 // message  ( forward )
1185+ 75C4 B2 6C D8 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1185+ 75C8 D1 68
1186+ 75CA 3B 6D D8 6A                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1186+ 75CE 0A 6F
1187+ 75D0                                                              // if
1188+ 75D0 D8 63                        dw      ZBRANCH
1189+ 75D2 08 00                        dw      Error_Endif_2 - $
1190+ 75D4 45 6D D8 6A                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1190+ 75D8 4C 6A
1191+ 75DA              Error_Endif_2:                                  // endif
1192+ 75DA 33 78                        dw      QUIT                    // quit ( forward )
1193+ 75DC F4 68                        dw      EXIT                    // ;
1194+ 75DE              //  ______________________________________________________________________
1195+ 75DE              //
1196+ 75DE              // id.          nfa --
1197+ 75DE                              Colon_Def ID_DOT,  "ID.", is_normal
1197+ 75DE             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1197+ 75DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1197+ 75DE             >
1197+ 75DE             >                // dummy db directives used to calculate length of namec
1197+ 75DE 49 44 2E    >                db      "ID."
1197+ 75E1             >len_NFA         defl    $ - temp_NFA
1197+ 75E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1197+ 75DE             >
1197+ 75DE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1197+ 75DF 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1197+ 75E2             >                org     $-1                 // alter last byte of Name just above to set
1197+ 75E1 AE          >                db      {b $} | END_BIT     // msb as name end
1197+ 75E2             >
1197+ 75E2 A0 75       >                dw      last_NFA            // Link to previous definition Name
1197+ 75E4             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1197+ 75E4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1197+ 75E7             >
1197+ 75E7             >
1197+ 75E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1197+ 75E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1197+ 75E7             >
1197+ 75E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1198+ 75E7 A0 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1198+ 75EB 20 00 A5 63
1198+ 75EF 60 00
1199+ 75F1 4F 73                        dw      FILL                    // fill
1200+ 75F3 57 6A BF 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1200+ 75F7 8A 6F
1201+ 75F9 1C 6A 86 6E                  dw      OVER, SUBTRACT          // over -
1202+ 75FD A0 73 4C 6A                  dw      PAD, SWAP               // pad swap
1203+ 7601 F8 67                        dw      CMOVE                   // cmove
1204+ 7603 A0 73 C0 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1204+ 7607 A5 63 1F 00
1205+ 760B 92 68                        dw      AND_OP                  // and  ( use only lower bits )
1206+ 760D E8 71 41 6F                  dw      TYPE, SPACE             // type
1207+ 7611 F4 68                        dw      EXIT                    // ;
1208+ 7613
1209+ 7613              //  ______________________________________________________________________
1210+ 7613              //
1211+ 7613              // code         -- cccc
1212+ 7613                              Colon_Def CODE,  "CODE", is_normal
1212+ 7613             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1212+ 7613             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1212+ 7613             >
1212+ 7613             >                // dummy db directives used to calculate length of namec
1212+ 7613 43 4F 44 45 >                db      "CODE"
1212+ 7617             >len_NFA         defl    $ - temp_NFA
1212+ 7617             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1212+ 7613             >
1212+ 7613 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1212+ 7614 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1212+ 7618             >                org     $-1                 // alter last byte of Name just above to set
1212+ 7617 C5          >                db      {b $} | END_BIT     // msb as name end
1212+ 7618             >
1212+ 7618 DE 75       >                dw      last_NFA            // Link to previous definition Name
1212+ 761A             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1212+ 761A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1212+ 761D             >
1212+ 761D             >
1212+ 761D             >                endif           ; ok        // for other definitions it "points" the correct handler
1212+ 761D             >                // Use of "; ok" to suppress "warning[fwdref]"
1212+ 761D             >
1212+ 761D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1213+ 761D 70 75                        dw      LFIND                   // -find
1214+ 761F                                                              // if
1215+ 761F D8 63                        dw      ZBRANCH
1216+ 7621 10 00                        dw      Code_Endif - $
1217+ 7623 2A 6A                        dw          DROP                //      drop
1218+ 7625 E7 6F E4 75                  dw          TO_NAME, ID_DOT     //      >name id.
1219+ 7629 A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1219+ 762D B8 7A
1220+ 762F 41 6F                        dw          SPACE               //      space
1221+ 7631              Code_Endif:                                     // endif
1222+ 7631 31 6E                        dw      HERE                    // here
1223+ 7633                                                              // ( ---- here begins NFA ---- )
1224+ 7633 57 6A EF 6A                  dw      DUP, CFETCH             // dup c@
1225+ 7637 D1 6C D8 6A                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1225+ 763B DB 6E
1226+ 763D AC 69 42 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1227+ 7641 57 6A                        dw      DUP                     // dup
1228+ 7643 A5 63                        dw      LIT
1229+ 7645 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1230+ 7647 CD 6A                        dw      TOGGLE                  // toggle
1231+ 7649 31 6E B6 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1232+ 764D A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1232+ 7651 CD 6A
1233+ 7653                                                              // ( ---- here is LFA ---- )
1234+ 7653 79 6F 4F 6E                  dw      LATEST, COMMA           // latest ,
1235+ 7657 82 6D D8 6A                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1235+ 765B E3 6A
1236+ 765D                                                              // ( ---- here is LFA ---- )
1237+ 765D              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1238+ 765D F4 68                        dw      EXIT                    // ;
1239+ 765F
1240+ 765F              //  ______________________________________________________________________
1241+ 765F              //
1242+ 765F              // create       -- cccc     ( compile time )
1243+ 765F              //              -- a        ( run time )
1244+ 765F                              Colon_Def CREATE,  "CREATE", is_normal
1244+ 765F             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1244+ 765F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ 765F             >
1244+ 765F             >                // dummy db directives used to calculate length of namec
1244+ 765F 43 52 45 41 >                db      "CREATE"
1244+ 7663 54 45       >
1244+ 7665             >len_NFA         defl    $ - temp_NFA
1244+ 7665             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ 765F             >
1244+ 765F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ 7660 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1244+ 7664 54 45       >
1244+ 7666             >                org     $-1                 // alter last byte of Name just above to set
1244+ 7665 C5          >                db      {b $} | END_BIT     // msb as name end
1244+ 7666             >
1244+ 7666 13 76       >                dw      last_NFA            // Link to previous definition Name
1244+ 7668             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 7668 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1244+ 766B             >
1244+ 766B             >
1244+ 766B             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 766B             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 766B             >
1244+ 766B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 766B 1A 76 F4 70                  dw      CODE, SMUDGE            // code smudge
1246+ 766F A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1246+ 7673 61 6E
1247+ 7675 A5 63 06 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1247+ 7679 4F 6E
1248+ 767B 4E 71                        dw      C_SEMICOLON_CODE
1249+ 767D                              // this routine is called from the call coded in CFA
1250+ 767D              Create_Ptr:
1251+ 767D
1252+ 767D
1253+ 767D
1254+ 767D                              next
1254+ 767D DD E9       >                jp      (ix)
1255+ 767F
1256+ 767F              //  ______________________________________________________________________
1257+ 767F              //
1258+ 767F              // [compile]    -- cccc     ( compile time )
1259+ 767F                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1259+ 767F             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1259+ 767F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1259+ 767F             >
1259+ 767F             >                // dummy db directives used to calculate length of namec
1259+ 767F 5B 43 4F 4D >                db      "[COMPILE]"
1259+ 7683 50 49 4C 45 >
1259+ 7687 5D          >
1259+ 7688             >len_NFA         defl    $ - temp_NFA
1259+ 7688             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1259+ 767F             >
1259+ 767F C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1259+ 7680 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1259+ 7684 50 49 4C 45 >
1259+ 7688 5D          >
1259+ 7689             >                org     $-1                 // alter last byte of Name just above to set
1259+ 7688 DD          >                db      {b $} | END_BIT     // msb as name end
1259+ 7689             >
1259+ 7689 5F 76       >                dw      last_NFA            // Link to previous definition Name
1259+ 768B             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1259+ 768B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1259+ 768E             >
1259+ 768E             >
1259+ 768E             >                endif           ; ok        // for other definitions it "points" the correct handler
1259+ 768E             >                // Use of "; ok" to suppress "warning[fwdref]"
1259+ 768E             >
1259+ 768E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1260+ 768E 70 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1261+ 7690 51 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1262+ 7692 27 6C 0B 70                  dw      ZERO, QERROR            // 0 ?error
1263+ 7696 2A 6A                        dw      DROP                    // drop       (  cfa  )
1264+ 7698 4F 6E                        dw      COMMA                   // ,
1265+ 769A F4 68                        dw      EXIT                    // ; immediate
1266+ 769C
1267+ 769C              //  ______________________________________________________________________
1268+ 769C              //
1269+ 769C              // literal      n --      ( compile time )
1270+ 769C                              Colon_Def LITERAL,  "LITERAL", is_immediate
1270+ 769C             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1270+ 769C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1270+ 769C             >
1270+ 769C             >                // dummy db directives used to calculate length of namec
1270+ 769C 4C 49 54 45 >                db      "LITERAL"
1270+ 76A0 52 41 4C    >
1270+ 76A3             >len_NFA         defl    $ - temp_NFA
1270+ 76A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1270+ 769C             >
1270+ 769C C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1270+ 769D 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1270+ 76A1 52 41 4C    >
1270+ 76A4             >                org     $-1                 // alter last byte of Name just above to set
1270+ 76A3 CC          >                db      {b $} | END_BIT     // msb as name end
1270+ 76A4             >
1270+ 76A4 7F 76       >                dw      last_NFA            // Link to previous definition Name
1270+ 76A6             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1270+ 76A6 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1270+ 76A9             >
1270+ 76A9             >
1270+ 76A9             >                endif           ; ok        // for other definitions it "points" the correct handler
1270+ 76A9             >                // Use of "; ok" to suppress "warning[fwdref]"
1270+ 76A9             >
1270+ 76A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1271+ 76A9 8E 6D D8 6A                  dw      STATE, FETCH            // state @
1272+ 76AD                                                              // if
1273+ 76AD D8 63                        dw      ZBRANCH
1274+ 76AF 08 00                        dw      Literal_Endif - $
1275+ 76B1 A4 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1276+ 76B5 4F 6E                        dw          COMMA               //      ,
1277+ 76B7              Literal_Endif:                                  // endif
1278+ 76B7 F4 68                        dw      EXIT                    // ; immediate
1279+ 76B9
1280+ 76B9              //  ______________________________________________________________________
1281+ 76B9              //
1282+ 76B9              // dliteral     n --      ( compile time )
1283+ 76B9                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1283+ 76B9             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1283+ 76B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ 76B9             >
1283+ 76B9             >                // dummy db directives used to calculate length of namec
1283+ 76B9 44 4C 49 54 >                db      "DLITERAL"
1283+ 76BD 45 52 41 4C >
1283+ 76C1             >len_NFA         defl    $ - temp_NFA
1283+ 76C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ 76B9             >
1283+ 76B9 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ 76BA 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1283+ 76BE 45 52 41 4C >
1283+ 76C2             >                org     $-1                 // alter last byte of Name just above to set
1283+ 76C1 CC          >                db      {b $} | END_BIT     // msb as name end
1283+ 76C2             >
1283+ 76C2 9C 76       >                dw      last_NFA            // Link to previous definition Name
1283+ 76C4             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 76C4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 76C7             >
1283+ 76C7             >
1283+ 76C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 76C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 76C7             >
1283+ 76C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 76C7 8E 6D D8 6A                  dw      STATE, FETCH            // state @
1285+ 76CB                                                              // if
1286+ 76CB D8 63                        dw      ZBRANCH
1287+ 76CD 08 00                        dw      DLiteral_Endif - $
1288+ 76CF 4C 6A                        dw          SWAP                //      swap
1289+ 76D1 A6 76 A6 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1290+ 76D5              DLiteral_Endif:                                 // endif
1291+ 76D5 F4 68                        dw      EXIT                    // ; immediate
1292+ 76D7
1293+ 76D7              //  ______________________________________________________________________
1294+ 76D7              //
1295+ 76D7              // [char]       n --      ( compile time )
1296+ 76D7              // inside colon definition, gets first character from next input word
1297+ 76D7              // and compiles it as literal.
1298+ 76D7                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1298+ 76D7             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1298+ 76D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1298+ 76D7             >
1298+ 76D7             >                // dummy db directives used to calculate length of namec
1298+ 76D7 5B 43 48 41 >                db      "[CHAR]"
1298+ 76DB 52 5D       >
1298+ 76DD             >len_NFA         defl    $ - temp_NFA
1298+ 76DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1298+ 76D7             >
1298+ 76D7 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1298+ 76D8 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1298+ 76DC 52 5D       >
1298+ 76DE             >                org     $-1                 // alter last byte of Name just above to set
1298+ 76DD DD          >                db      {b $} | END_BIT     // msb as name end
1298+ 76DE             >
1298+ 76DE B9 76       >                dw      last_NFA            // Link to previous definition Name
1298+ 76E0             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1298+ 76E0 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1298+ 76E3             >
1298+ 76E3             >
1298+ 76E3             >                endif           ; ok        // for other definitions it "points" the correct handler
1298+ 76E3             >                // Use of "; ok" to suppress "warning[fwdref]"
1298+ 76E3             >
1298+ 76E3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1299+ 76E3 20 74 A6 76                  dw      CHAR, LITERAL           // char [compile] literal
1300+ 76E7 F4 68                        dw      EXIT                    // ; immediate
1301+ 76E9
1302+ 76E9              //  ______________________________________________________________________
1303+ 76E9              //
1304+ 76E9              // 0x00         n --      ( compile time )
1305+ 76E9                              Colon_Def NUL_WORD,  $00, is_immediate
1305+ 76E9             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1305+ 76E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1305+ 76E9             >
1305+ 76E9             >                // dummy db directives used to calculate length of namec
1305+ 76E9 00          >                db      $00
1305+ 76EA             >len_NFA         defl    $ - temp_NFA
1305+ 76EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1305+ 76E9             >
1305+ 76E9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1305+ 76EA 00          >                db      $00               // name string in 7-bit ascii, but
1305+ 76EB             >                org     $-1                 // alter last byte of Name just above to set
1305+ 76EA 80          >                db      {b $} | END_BIT     // msb as name end
1305+ 76EB             >
1305+ 76EB D7 76       >                dw      last_NFA            // Link to previous definition Name
1305+ 76ED             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1305+ 76ED CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1305+ 76F0             >
1305+ 76F0             >
1305+ 76F0             >                endif           ; ok        // for other definitions it "points" the correct handler
1305+ 76F0             >                // Use of "; ok" to suppress "warning[fwdref]"
1305+ 76F0             >
1305+ 76F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1306+ 76F0 3B 6D D8 6A                  dw      BLK, FETCH, ONE         // blk @ 1
1306+ 76F4 30 6C
1307+ 76F6 CC 6E                        dw      GREATER                 // > if
1308+ 76F8                                                              // if
1309+ 76F8 D8 63                        dw      ZBRANCH
1310+ 76FA 28 00                        dw      Nul_Else_1 - $
1311+ 76FC 30 6C 3B 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1311+ 7700 B9 6A
1312+ 7702 27 6C 45 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1312+ 7706 E3 6A
1313+ 7708 3B 6D D8 6A                  dw          BLK, FETCH          //      blk @
1314+ 770C 7B 6C                        dw          BSCR                //      b/scr
1315+ 770E B6 69                        dw          ONE_SUBTRACT        //      1 -
1316+ 7710 92 68                        dw          AND_OP              //      and  ( this is tricky )
1317+ 7712 51 69                        dw          ZEQUAL              //      0=
1318+ 7714                                                              //      if
1319+ 7714 D8 63                        dw          ZBRANCH
1320+ 7716 08 00                        dw          Nul_Endif_2 - $
1321+ 7718 3F 70                        dw              QEXEC           //          ?exec
1322+ 771A 30 69 2A 6A                  dw              R_TO, DROP      //          r> drop
1323+ 771E              Nul_Endif_2:                                    //      endif
1324+ 771E C3 63                        dw      BRANCH
1325+ 7720 06 00                        dw      Nul_Endif_1 - $
1326+ 7722              Nul_Else_1:                                     // else
1327+ 7722 30 69 2A 6A                  dw          R_TO, DROP          //      r> drop
1328+ 7726              Nul_Endif_1:                                    // endif
1329+ 7726 F4 68                        dw      EXIT                    // ;
1330+ 7728
1331+ 7728              //  ______________________________________________________________________
1332+ 7728              //
1333+ 7728              // ?stack       --
1334+ 7728              // Raise error #1 if stack is empty and you pop it
1335+ 7728              // Raise error #7 if stack is full.
1336+ 7728              // This means SP must always stay between HERE and FFFF
1337+ 7728              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1338+ 7728              // for Next 8K MMU paging this is $DOE8
1339+ 7728                              Colon_Def QSTACK, "?STACK", is_normal
1339+ 7728             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1339+ 7728             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ 7728             >
1339+ 7728             >                // dummy db directives used to calculate length of namec
1339+ 7728 3F 53 54 41 >                db      "?STACK"
1339+ 772C 43 4B       >
1339+ 772E             >len_NFA         defl    $ - temp_NFA
1339+ 772E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ 7728             >
1339+ 7728 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ 7729 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1339+ 772D 43 4B       >
1339+ 772F             >                org     $-1                 // alter last byte of Name just above to set
1339+ 772E CB          >                db      {b $} | END_BIT     // msb as name end
1339+ 772F             >
1339+ 772F E9 76       >                dw      last_NFA            // Link to previous definition Name
1339+ 7731             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 7731 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1339+ 7734             >
1339+ 7734             >
1339+ 7734             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 7734             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 7734             >
1339+ 7734             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 7734 C4 68                        dw      SPFETCH                 // sp@
1341+ 7736 B2 6C D8 6A                  dw      S0, FETCH               // s0 @
1342+ 773A 4C 6A A0 6E                  dw      SWAP, ULESS             // swap u<
1343+ 773E 30 6C 0B 70                  dw      ONE, QERROR             // 1 ?error
1344+ 7742 31 6E                        dw      HERE                    // here
1345+ 7744 B2 6C D8 6A                  dw      S0, FETCH, LESS         // s0 @ <
1345+ 7748 B2 6E
1346+ 774A                                                              // if
1347+ 774A D8 63                        dw      ZBRANCH
1348+ 774C 14 00                        dw      QStack_Endif - $
1349+ 774E C4 68                        dw          SPFETCH             //      sp@
1350+ 7750 31 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1350+ 7754 80 00
1351+ 7756 8F 69 A0 6E                  dw          PLUS, ULESS         //      plus u<
1352+ 775A A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1352+ 775E 0B 70
1353+ 7760              QStack_Endif:                                   // endif
1354+ 7760 F4 68                        dw      EXIT                    // ;
1355+ 7762
1356+ 7762
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7762                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7762              //  ______________________________________________________________________
   2+ 7762              //
   3+ 7762              //  L2.asm
   4+ 7762              //
   5+ 7762              //  Level-2
   6+ 7762              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7762              //  ______________________________________________________________________
   8+ 7762
   9+ 7762
  10+ 7762              //  ______________________________________________________________________
  11+ 7762              //
  12+ 7762              // interpret    --
  13+ 7762              // This is the text interpreter.
  14+ 7762              // It executes or compiles, depending on STATE, the text coming from
  15+ 7762              // current input stream.
  16+ 7762              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7762              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7762              // leaving on top of stack a single or double precision number, depending
  19+ 7762              // on the presence of a decimal point.
  20+ 7762              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7762              // by the offending word.
  22+ 7762                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7762             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7762             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7762             >
  22+ 7762             >                // dummy db directives used to calculate length of namec
  22+ 7762 49 4E 54 45 >                db      "INTERPRET"
  22+ 7766 52 50 52 45 >
  22+ 776A 54          >
  22+ 776B             >len_NFA         defl    $ - temp_NFA
  22+ 776B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7762             >
  22+ 7762 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7763 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 7767 52 50 52 45 >
  22+ 776B 54          >
  22+ 776C             >                org     $-1                 // alter last byte of Name just above to set
  22+ 776B D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 776C             >
  22+ 776C 28 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 776E             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 776E CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7771             >
  22+ 7771             >
  22+ 7771             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7771             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7771             >
  22+ 7771             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7771
  24+ 7771              Interpret_Begin:                                        // begin
  25+ 7771 70 75                        dw          LFIND                       //      -find
  26+ 7773                                                                      //      if
  27+ 7773 D8 63                        dw          ZBRANCH
  28+ 7775 1A 00                        dw          Interpret_Else_1 - $
  29+ 7777 8E 6D D8 6A                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 777B B2 6E
  30+ 777D                                                                      //          if
  31+ 777D D8 63                        dw              ZBRANCH
  32+ 777F 08 00                        dw              Interpret_Else_2 - $
  33+ 7781 C2 70                        dw                  COMPILE_XT          //              compile,
  34+ 7783                                                                      //          else
  35+ 7783 C3 63                        dw              BRANCH
  36+ 7785 06 00                        dw              Interpret_Endif_2 - $
  37+ 7787              Interpret_Else_2:
  38+ 7787 B8 63 D4 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 778B              Interpret_Endif_2:                                      //          endif
  40+ 778B                                                                      //      else
  41+ 778B C3 63                        dw          BRANCH
  42+ 778D 1A 00                        dw          Interpret_Endif_1 - $
  43+ 778F              Interpret_Else_1:
  44+ 778F 31 6E 29 75                  dw              HERE, NUMBER            //          here number
  45+ 7793 A3 6D D8 6A                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 7797 AC 69
  46+ 7799                                                                      //          if
  47+ 7799 D8 63                        dw              ZBRANCH
  48+ 779B 08 00                        dw              Interpret_Else_3 - $
  49+ 779D              //              dw                  NMODE, FETCH        //              nmode @
  50+ 779D              //                                                      //              if
  51+ 779D              //              dw                  ZBRANCH
  52+ 779D              //              dw                  Interpret_Endif_4 - $
  53+ 779D              //              dw                      ONE, ZERO       //                  1 0
  54+ 779D              //              dw                      TWO_DROP        //                  2drop
  55+ 779D              //Interpret_Endif_4:                                      //              endif
  56+ 779D C4 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 779F                                                                      //          else
  58+ 779F C3 63                        dw              BRANCH
  59+ 77A1 06 00                        dw              Interpret_Endif_3 - $
  60+ 77A3              Interpret_Else_3:
  61+ 77A3 2A 6A                        dw                  DROP                //              drop
  62+ 77A5 A6 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77A7              Interpret_Endif_3:                                      //          endif
  64+ 77A7              Interpret_Endif_1:                                      //      endif
  65+ 77A7 31 77                        dw          QSTACK                      //      ?stack
  66+ 77A9 EB 66                        dw          QTERMINAL                   //      ?terminal
  67+ 77AB                                                                      //      if
  68+ 77AB D8 63                        dw          ZBRANCH
  69+ 77AD 04 00                        dw          Interpret_Endif_5 - $
  70+ 77AF 99 75                        dw              CABORT                  //          (abort)
  71+ 77B1              Interpret_Endif_5:                                      //      endif
  72+ 77B1 C3 63                        dw      BRANCH
  73+ 77B3 BE FF                        dw      Interpret_Begin - $
  74+ 77B5 F4 68                        dw      EXIT                            // ;
  75+ 77B7
  76+ 77B7              //  ______________________________________________________________________
  77+ 77B7              //
  78+ 77B7              // vocabulary   -- cccc     ( compile time )
  79+ 77B7              // Defining word used in the form   VOCABULARY cccc
  80+ 77B7              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77B7              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77B7              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77B7              // so new definitions can be inserted in that vocabulary.
  84+ 77B7                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77B7             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77B7             >
  84+ 77B7             >                // dummy db directives used to calculate length of namec
  84+ 77B7 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77BB 42 55 4C 41 >
  84+ 77BF 52 59       >
  84+ 77C1             >len_NFA         defl    $ - temp_NFA
  84+ 77C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77B7             >
  84+ 77B7 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77B8 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77BC 42 55 4C 41 >
  84+ 77C0 52 59       >
  84+ 77C2             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77C1 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77C2             >
  84+ 77C2 62 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77C4             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77C4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77C7             >
  84+ 77C7             >
  84+ 77C7             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77C7             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77C7             >
  84+ 77C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77C7
  86+ 77C7 88 71                        dw      CBUILDS
  87+ 77C9
  88+ 77C9 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77CD 4F 6E
  89+ 77CF 82 6D D8 6A                  dw      CURRENT, FETCH          // current @
  90+ 77D3 D9 69 4F 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77D7 31 6E                        dw      HERE                    // here
  92+ 77D9 03 6D D8 6A                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77DD 4F 6E
  93+ 77DF 03 6D E3 6A                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77E3
  95+ 77E3 99 71                        dw      DOES_TO                 // does>
  96+ 77E5              Vocabulary_Does:
  97+ 77E5 CE 69                        dw      CELL_PLUS               // cell+
  98+ 77E7 74 6D E3 6A                  dw      CONTEXT, STORE          // context !
  99+ 77EB F4 68                        dw      EXIT                    // ;
 100+ 77ED
 101+ 77ED              //  ______________________________________________________________________
 102+ 77ED              //
 103+ 77ED              // forth        --
 104+ 77ED              // Name of the first vocabulary.
 105+ 77ED              // It makes FORTH the CONTEXT vocabulary.
 106+ 77ED              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77ED              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77ED              // of a colon definition to be able to select the vocabulary.
 109+ 77ED
 110+ 77ED                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77ED             >
 110+ 77ED             >                // dummy db directives used to calculate length of namec
 110+ 77ED 46 4F 52 54 >                db      "FORTH"
 110+ 77F1 48          >
 110+ 77F2             >len_NFA         defl    $ - temp_NFA
 110+ 77F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77ED             >
 110+ 77ED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77EE 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77F2 48          >
 110+ 77F3             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77F2 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77F3             >
 110+ 77F3 B7 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77F5             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77F5 CD A6 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77F8             >
 110+ 77F8             >
 110+ 77F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77F8             >
 110+ 77F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77F8 E5 77                        dw      Vocabulary_Does
 112+ 77FA 81 A0                        db      $81, $A0
 113+ 77FC              Forth_Latest_Ptr:
 114+ 77FC C1 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 77FE              Voclink_Ptr:
 116+ 77FE 00 00                        dw      0
 117+ 7800              // Any new vocabulary is structured as follow:
 118+ 7800              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7800              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7800              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7800              //       at creations it points to the null-word of its parent vocabulary
 122+ 7800              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7800              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7800              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7800              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7800              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7800              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7800
 129+ 7800              //  ______________________________________________________________________
 130+ 7800              //
 131+ 7800              // definitions  --
 132+ 7800              // Used in the form  cccc DEFINITIONS
 133+ 7800              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7800              // vocabulary cccc.
 135+ 7800                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7800             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7800             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7800             >
 135+ 7800             >                // dummy db directives used to calculate length of namec
 135+ 7800 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7804 4E 49 54 49 >
 135+ 7808 4F 4E 53    >
 135+ 780B             >len_NFA         defl    $ - temp_NFA
 135+ 780B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7800             >
 135+ 7800 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7801 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7805 4E 49 54 49 >
 135+ 7809 4F 4E 53    >
 135+ 780C             >                org     $-1                 // alter last byte of Name just above to set
 135+ 780B D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 780C             >
 135+ 780C ED 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 780E             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 780E CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7811             >
 135+ 7811             >
 135+ 7811             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7811             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7811             >
 135+ 7811             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7811 74 6D D8 6A                  dw      CONTEXT, FETCH          // context @
 137+ 7815 82 6D E3 6A                  dw      CURRENT, STORE          // current !
 138+ 7819 F4 68                        dw      EXIT                    // ;
 139+ 781B
 140+ 781B              //  ______________________________________________________________________
 141+ 781B              //
 142+ 781B              // (            -- cccc )
 143+ 781B              // the following text is interpreted as a comment until a closing )
 144+ 781B                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 781B             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 781B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 781B             >
 144+ 781B             >                // dummy db directives used to calculate length of namec
 144+ 781B 28          >                db      "("
 144+ 781C             >len_NFA         defl    $ - temp_NFA
 144+ 781C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 781B             >
 144+ 781B C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 781C 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 781D             >                org     $-1                 // alter last byte of Name just above to set
 144+ 781C A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 781D             >
 144+ 781D 00 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 781F             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 781F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7822             >
 144+ 7822             >
 144+ 7822             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7822             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7822             >
 144+ 7822             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7822 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7826 B4 73 2A 6A                  dw      WORD, DROP              // word drop
 147+ 782A F4 68                        dw      EXIT                    // ;
 148+ 782C
 149+ 782C              //  ______________________________________________________________________
 150+ 782C              //
 151+ 782C              // quit         --
 152+ 782C              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 782C                              Colon_Def QUIT, "QUIT", is_normal
 153+ 782C             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 782C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 782C             >
 153+ 782C             >                // dummy db directives used to calculate length of namec
 153+ 782C 51 55 49 54 >                db      "QUIT"
 153+ 7830             >len_NFA         defl    $ - temp_NFA
 153+ 7830             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 782C             >
 153+ 782C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 782D 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7831             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7830 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7831             >
 153+ 7831 1B 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7833             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7833 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7836             >
 153+ 7836             >
 153+ 7836             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7836             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7836             >
 153+ 7836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7836
 155+ 7836 04 6E D8 6A                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 783A 2C 67 2A 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 783E 27 6C 04 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7842 E3 6A
 158+ 7844 27 6C 3B 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7848 E3 6A
 159+ 784A CF 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 784C                                                              // begin
 161+ 784C              Quit_Begin:
 162+ 784C BB 6C D8 6A                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7850 E7 68
 163+ 7852 EB 67                        dw      CR                      //      cr
 164+ 7854 31 73                        dw      QUERY                   //      query
 165+ 7856              Next_Breakpoint_1:
 166+ 7856 6E 77                        dw      INTERPRET               //      interpret
 167+ 7858 8E 6D D8 6A                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 785C 51 69
 168+ 785E                                                              //      if
 169+ 785E D8 63                        dw      ZBRANCH
 170+ 7860 07 00                        dw      Quit_Endif - $
 171+ 7862 04 74                        dw          C_DOT_QUOTE
 172+ 7864 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7867              Quit_Endif:                                     //      else
 174+ 7867                                                              // again
 175+ 7867 C3 63                        dw      BRANCH
 176+ 7869 E3 FF                        dw      Quit_Begin - $
 177+ 786B F4 68                        dw      EXIT                    // ;
 178+ 786D
 179+ 786D              //  ______________________________________________________________________
 180+ 786D              //
 181+ 786D              // abort        --
 182+ 786D                              Colon_Def ABORT, "ABORT", is_normal
 182+ 786D             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 786D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 786D             >
 182+ 786D             >                // dummy db directives used to calculate length of namec
 182+ 786D 41 42 4F 52 >                db      "ABORT"
 182+ 7871 54          >
 182+ 7872             >len_NFA         defl    $ - temp_NFA
 182+ 7872             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 786D             >
 182+ 786D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 786E 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7872 54          >
 182+ 7873             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7872 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7873             >
 182+ 7873 2C 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7875             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7875 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7878             >
 182+ 7878             >
 182+ 7878             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7878             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7878             >
 182+ 7878             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7878 B2 6C D8 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 787C D1 68
 184+ 787E 37 71                        dw      DECIMAL                 // decimal
 185+ 7880 F5 77                        dw      FORTH                   // [compile] forth
 186+ 7882 0E 78                        dw      DEFINITIONS             // definitions
 187+ 7884              Autoexec_Ptr:
 188+ 7884 CA 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7886 33 78                        dw      QUIT                    // quit
 190+ 7888 F4 68                        dw      EXIT                    // ;
 191+ 788A
 192+ 788A              //  ______________________________________________________________________
 193+ 788A              //
 194+ 788A              // warm         --
 195+ 788A                              Colon_Def WARM, "WARM", is_normal
 195+ 788A             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 788A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 788A             >
 195+ 788A             >                // dummy db directives used to calculate length of namec
 195+ 788A 57 41 52 4D >                db      "WARM"
 195+ 788E             >len_NFA         defl    $ - temp_NFA
 195+ 788E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 788A             >
 195+ 788A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 788B 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 788F             >                org     $-1                 // alter last byte of Name just above to set
 195+ 788E CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 788F             >
 195+ 788F 6D 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 7891             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 7891 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7894             >
 195+ 7894             >
 195+ 7894             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7894             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7894             >
 195+ 7894             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7894 71 7C                        dw      BLK_INIT                // blk-init
 197+ 7896 7A 84                        dw      SPLASH                  // splash
 198+ 7898 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 789C 24 6F
 199+ 789E 75 78                        dw      ABORT                   // abort
 200+ 78A0 F4 68                        dw      EXIT                    // exit
 201+ 78A2
 202+ 78A2              //  ______________________________________________________________________
 203+ 78A2              //
 204+ 78A2              // cold         --
 205+ 78A2                              Colon_Def COLD, "COLD", is_normal
 205+ 78A2             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78A2             >
 205+ 78A2             >                // dummy db directives used to calculate length of namec
 205+ 78A2 43 4F 4C 44 >                db      "COLD"
 205+ 78A6             >len_NFA         defl    $ - temp_NFA
 205+ 78A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78A2             >
 205+ 78A2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78A3 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78A7             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78A6 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78A7             >
 205+ 78A7 8A 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78A9             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78A9 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78AC             >
 205+ 78AC             >
 205+ 78AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78AC             >
 205+ 78AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78AC A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78B0 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78B4 D8 6A                        dw      FETCH                   // @
 209+ 78B6 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78BA 8F 69
 210+ 78BC A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78C0 F8 67                        dw      CMOVE
 212+ 78C2 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78C6 D8 6A                        dw      FETCH                   // @
 214+ 78C8 A5 63 FC 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78CC E3 6A                        dw      STORE                   // !
 216+ 78CE 27 6C 31 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78D2 E3 6A
 217+ 78D4 0F 6D D8 6A                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78D8 57 6A
 218+ 78DA D4 6D E3 6A                  dw      USE, STORE              // use !
 219+ 78DE DF 6D E3 6A                  dw      PREV, STORE             // prev !
 220+ 78E2 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78E6 F4 6D E3 6A
 221+ 78EA              //              dw      LIT, 8
 222+ 78EA              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78EA 39 6C 26 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78EE E3 6A
 224+ 78F0 91 78        Warm_Start:     dw      WARM
 225+ 78F2 A9 78        Cold_Start:     dw      COLD
 226+ 78F4 F4 68                        dw      EXIT
 227+ 78F6
 228+ 78F6              //  ______________________________________________________________________
 229+ 78F6              WarmRoutine:
 230+ 78F6              ColdRoutine:
 231+ 78F6 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78FA D9                           exx
 233+ 78FB E5                           push    hl
 234+ 78FC D9                           exx
 235+ 78FD
 236+ 78FD ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7901 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7905              //              nop
 239+ 7905 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7908              //              nop
 241+ 7908                              ldrphl
 241+ 7908 22 96 63    >                ld      (RP_Pointer),hl
 242+ 790B 01 F0 78                     ld      bc, Warm_Start
 243+ 790E 38 02                        jr      c, Warm_Skip
 244+ 7910 03                           inc     bc
 245+ 7911 03                           inc     bc
 246+ 7912              Warm_Skip:
 247+ 7912                              next
 247+ 7912 DD E9       >                jp      (ix)
 248+ 7914
 249+ 7914              //  ______________________________________________________________________
 250+ 7914              //
 251+ 7914              // basic        --
 252+ 7914                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7914             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7914             >
 252+ 7914             >                // dummy db directives used to calculate length of namec
 252+ 7914 42 41 53 49 >                db      "BASIC"
 252+ 7918 43          >
 252+ 7919             >len_NFA         defl    $ - temp_NFA
 252+ 7919             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7914             >
 252+ 7914 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7915 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7919 43          >
 252+ 791A             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7919 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 791A             >
 252+ 791A A2 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 791C             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 791C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 791C ~           >
 252+ 791C ~           >
 252+ 791C             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 791C             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 791C             >
 252+ 791C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 791C C1                           pop     bc
 254+ 791D 21 00 00                     ld      hl, 0
 255+ 7920 39                           add     hl, sp
 256+ 7921 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7925              //              nop
 258+ 7925 22 6E 63                     ld      (SP_Basic),hl
 259+ 7928 D9                           exx
 260+ 7929 E1                           pop     hl
 261+ 792A D9                           exx
 262+ 792B C9                           ret     // to Basic
 263+ 792C
 264+ 792C              //  ______________________________________________________________________
 265+ 792C              //
 266+ 792C              // +-           n1 n2 -- n3
 267+ 792C              // leaves n1 with the sign of n2 as n3.
 268+ 792C                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 792C             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 792C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 792C             >
 268+ 792C             >                // dummy db directives used to calculate length of namec
 268+ 792C 2B 2D       >                db      "+-"
 268+ 792E             >len_NFA         defl    $ - temp_NFA
 268+ 792E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 792C             >
 268+ 792C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 792D 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 792F             >                org     $-1                 // alter last byte of Name just above to set
 268+ 792E AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 792F             >
 268+ 792F 14 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7931             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7931 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7934             >
 268+ 7934             >
 268+ 7934             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7934             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7934             >
 268+ 7934             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7934 6B 69                        dw      ZLESS                   // 0<
 270+ 7936                                                              // if
 271+ 7936 D8 63                        dw      ZBRANCH
 272+ 7938 04 00                        dw      Plus_Minus_Endif - $
 273+ 793A F0 69                        dw          MINUS               //      minus
 274+ 793C              Plus_Minus_Endif:                               // endif
 275+ 793C F4 68                        dw      EXIT                    // ;
 276+ 793E
 277+ 793E              //  ______________________________________________________________________
 278+ 793E              //
 279+ 793E              // d+-          d1 n -- d2
 280+ 793E              // leaves d1 with the sign of n as d2.
 281+ 793E                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 793E             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 793E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 793E             >
 281+ 793E             >                // dummy db directives used to calculate length of namec
 281+ 793E 44 2B 2D    >                db      "D+-"
 281+ 7941             >len_NFA         defl    $ - temp_NFA
 281+ 7941             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 793E             >
 281+ 793E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 793F 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7942             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7941 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7942             >
 281+ 7942 2C 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7944             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7944 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7947             >
 281+ 7947             >
 281+ 7947             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7947             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7947             >
 281+ 7947             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7947 6B 69                        dw      ZLESS                   // 0<
 283+ 7949                                                              // if
 284+ 7949 D8 63                        dw      ZBRANCH
 285+ 794B 04 00                        dw      DPlus_Minus_Endif - $
 286+ 794D 04 6A                        dw          DMINUS              //      dminus
 287+ 794F              DPlus_Minus_Endif:                              // endif
 288+ 794F F4 68                        dw      EXIT                    // ;
 289+ 7951
 290+ 7951              //  ______________________________________________________________________
 291+ 7951              //
 292+ 7951              // abs          n1 -- n2
 293+ 7951                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7951             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7951             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7951             >
 293+ 7951             >                // dummy db directives used to calculate length of namec
 293+ 7951 41 42 53    >                db      "ABS"
 293+ 7954             >len_NFA         defl    $ - temp_NFA
 293+ 7954             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7951             >
 293+ 7951 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7952 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7955             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7954 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7955             >
 293+ 7955 3E 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7957             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7957 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 795A             >
 293+ 795A             >
 293+ 795A             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 795A             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 795A             >
 293+ 795A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 795A 57 6A                        dw      DUP                     // dup
 295+ 795C 31 79                        dw      PLUS_MINUS              // +-
 296+ 795E F4 68                        dw      EXIT                    // ;
 297+ 7960
 298+ 7960              //  ______________________________________________________________________
 299+ 7960              //
 300+ 7960              // dabs         d1 -- d2
 301+ 7960                              Colon_Def DABS, "DABS", is_normal
 301+ 7960             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7960             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7960             >
 301+ 7960             >                // dummy db directives used to calculate length of namec
 301+ 7960 44 41 42 53 >                db      "DABS"
 301+ 7964             >len_NFA         defl    $ - temp_NFA
 301+ 7964             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7960             >
 301+ 7960 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7961 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7965             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7964 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7965             >
 301+ 7965 51 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7967             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7967 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 796A             >
 301+ 796A             >
 301+ 796A             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 796A             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 796A             >
 301+ 796A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 796A 57 6A                        dw      DUP                     // dup
 303+ 796C 44 79                        dw      DPLUS_MINUS             // d+-
 304+ 796E F4 68                        dw      EXIT                    // ;
 305+ 7970
 306+ 7970              //  ______________________________________________________________________
 307+ 7970              //
 308+ 7970              // m*           n1 n2 -- d
 309+ 7970              // multiply two integer giving a double
 310+ 7970                              Colon_Def MMUL, "M*", is_normal
 310+ 7970             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7970             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7970             >
 310+ 7970             >                // dummy db directives used to calculate length of namec
 310+ 7970 4D 2A       >                db      "M*"
 310+ 7972             >len_NFA         defl    $ - temp_NFA
 310+ 7972             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7970             >
 310+ 7970 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7971 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7973             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7972 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7973             >
 310+ 7973 60 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7975             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7975 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7978             >
 310+ 7978             >
 310+ 7978             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7978             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7978             >
 310+ 7978             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7978 AC 6A B3 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 797C 1E 69
 312+ 797E 57 79 4C 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 7982 57 79 27 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7986 30 69 44 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 798A F4 68                        dw      EXIT                    // ;
 316+ 798C
 317+ 798C              //  ______________________________________________________________________
 318+ 798C              //
 319+ 798C              // sm/rem       d n -- q r
 320+ 798C              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 798C              // the remainder has the sign of d.
 322+ 798C                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 798C             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 798C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 798C             >
 322+ 798C             >                // dummy db directives used to calculate length of namec
 322+ 798C 53 4D 2F 52 >                db      "SM/REM"
 322+ 7990 45 4D       >
 322+ 7992             >len_NFA         defl    $ - temp_NFA
 322+ 7992             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 798C             >
 322+ 798C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 798D 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 7991 45 4D       >
 322+ 7993             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7992 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 7993             >
 322+ 7993 70 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 7995             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7995 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 7998             >
 322+ 7998             >
 322+ 7998             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7998             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7998             >
 322+ 7998             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7998 1C 6A 1E 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 799C 1E 69
 324+ 799E 67 79 42 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79A2 57 79
 325+ 79A4 56 68                        dw      UMDIVMOD                // um/mod
 326+ 79A6 30 69                        dw      R_TO                    // r>
 327+ 79A8 42 69 B3 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79AC 31 79 4C 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79B0 30 69                        dw      R_TO                    // r>
 330+ 79B2 31 79 4C 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79B6 F4 68                        dw      EXIT                    // ;
 332+ 79B8
 333+ 79B8              //  ______________________________________________________________________
 334+ 79B8              //
 335+ 79B8              // fm/mod       d n -- q r
 336+ 79B8              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79B8              // the remainder has the sign of d.
 338+ 79B8                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79B8             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79B8             >
 338+ 79B8             >                // dummy db directives used to calculate length of namec
 338+ 79B8 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79BC 4F 44       >
 338+ 79BE             >len_NFA         defl    $ - temp_NFA
 338+ 79BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79B8             >
 338+ 79B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79B9 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79BD 4F 44       >
 338+ 79BF             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79BE C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79BF             >
 338+ 79BF 8C 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79C1             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79C1 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79C4             >
 338+ 79C4             >
 338+ 79C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79C4             >
 338+ 79C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79C4 57 6A 1E 69                  dw      DUP, TO_R               // dup >r
 340+ 79C8 95 79                        dw      SMDIVM
 341+ 79CA 1C 6A 57 6A                  dw      OVER, DUP
 342+ 79CE 51 69 51 69                  dw      ZEQUAL, ZEQUAL
 343+ 79D2 4C 6A 6B 69                  dw      SWAP, ZLESS
 344+ 79D6 42 69 6B 69                  dw      R_OP, ZLESS
 345+ 79DA B3 68 92 68                  dw      XOR_OP, AND_OP
 346+ 79DE D8 63                        dw      ZBRANCH
 347+ 79E0 10 00                        dw      Fm_Mod_Else - $
 348+ 79E2 B6 69                        dw          ONE_SUBTRACT
 349+ 79E4 4C 6A 30 69                  dw          SWAP, R_TO
 350+ 79E8 8F 69 4C 6A                  dw          PLUS, SWAP
 351+ 79EC C3 63                        dw      BRANCH
 352+ 79EE 06 00                        dw      Fm_Mod_Endif - $
 353+ 79F0              Fm_Mod_Else:
 354+ 79F0 30 69 2A 6A                  dw          R_TO, DROP
 355+ 79F4              Fm_Mod_Endif:
 356+ 79F4 F4 68                        dw      EXIT
 357+ 79F6              //              dw      TWO_DUP                 // 2dup
 358+ 79F6              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 79F6              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 79F6              //              dw      UMDIVMOD                // um/mod
 361+ 79F6              //              dw      SWAP                    // swap
 362+ 79F6              //              dw      II, ZLESS               // i'
 363+ 79F6              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 79F6              //              dw      R_TO                    // r>
 365+ 79F6              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 79F6              //              dw      R_OP                    // r@
 367+ 79F6              //              dw      ZLESS                   // i'
 368+ 79F6              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 79F6              //              dw      R_TO                    // r>
 370+ 79F6              //              dw      PLUS_MINUS              // +- swap
 371+ 79F6              //              dw      EXIT                    // ;
 372+ 79F6
 373+ 79F6              //  ______________________________________________________________________
 374+ 79F6              //
 375+ 79F6              // m/mod        d n -- q r
 376+ 79F6              // multiply two integer giving a double
 377+ 79F6                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 79F6             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 79F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 79F6             >
 377+ 79F6             >                // dummy db directives used to calculate length of namec
 377+ 79F6 4D 2F 4D 4F >                db      "M/MOD"
 377+ 79FA 44          >
 377+ 79FB             >len_NFA         defl    $ - temp_NFA
 377+ 79FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 79F6             >
 377+ 79F6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 79F7 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 79FB 44          >
 377+ 79FC             >                org     $-1                 // alter last byte of Name just above to set
 377+ 79FB C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 79FC             >
 377+ 79FC B8 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 79FE             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 79FE CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A01             >
 377+ 7A01             >
 377+ 7A01             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A01             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A01             >
 377+ 7A01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A01 95 79                        dw      SMDIVM
 379+ 7A03 F4 68                        dw      EXIT                    // ;
 380+ 7A05
 381+ 7A05              //  ______________________________________________________________________
 382+ 7A05              //
 383+ 7A05              // m/           d n -- q
 384+ 7A05              // multiply two integer giving a double
 385+ 7A05                              Colon_Def MDIV, "M/", is_normal
 385+ 7A05             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A05             >
 385+ 7A05             >                // dummy db directives used to calculate length of namec
 385+ 7A05 4D 2F       >                db      "M/"
 385+ 7A07             >len_NFA         defl    $ - temp_NFA
 385+ 7A07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A05             >
 385+ 7A05 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A06 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A08             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A07 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A08             >
 385+ 7A08 F6 79       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A0A             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A0A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A0D             >
 385+ 7A0D             >
 385+ 7A0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A0D             >
 385+ 7A0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A0D FE 79 33 6A                  dw      MDIVM, NIP
 387+ 7A11 F4 68                        dw      EXIT                    // ;
 388+ 7A13
 389+ 7A13              //  ______________________________________________________________________
 390+ 7A13              //
 391+ 7A13              // *            n1 n2 -- n3
 392+ 7A13              // multiply two integer
 393+ 7A13                              Colon_Def MUL, "*", is_normal
 393+ 7A13             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A13             >
 393+ 7A13             >                // dummy db directives used to calculate length of namec
 393+ 7A13 2A          >                db      "*"
 393+ 7A14             >len_NFA         defl    $ - temp_NFA
 393+ 7A14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A13             >
 393+ 7A13 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A14 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A15             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A14 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A15             >
 393+ 7A15 05 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A17             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A17 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A1A             >
 393+ 7A1A             >
 393+ 7A1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A1A             >
 393+ 7A1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A1A 75 79 2A 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A1E F4 68                        dw      EXIT                    // ;
 396+ 7A20
 397+ 7A20              //  ______________________________________________________________________
 398+ 7A20              //
 399+ 7A20              // /mod         n1 n2 -- n3 n4
 400+ 7A20              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A20              // The remainder has the sign of n1
 402+ 7A20                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A20             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A20             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A20             >
 402+ 7A20             >                // dummy db directives used to calculate length of namec
 402+ 7A20 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A24             >len_NFA         defl    $ - temp_NFA
 402+ 7A24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A20             >
 402+ 7A20 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A21 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A25             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A24 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A25             >
 402+ 7A25 13 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A27             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A27 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A2A             >
 402+ 7A2A             >
 402+ 7A2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A2A             >
 402+ 7A2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A2A 1E 69 74 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A2E 30 69
 404+ 7A30 FE 79                        dw      MDIVM                   // m/mod
 405+ 7A32 F4 68                        dw      EXIT                    // ;
 406+ 7A34
 407+ 7A34              //  ______________________________________________________________________
 408+ 7A34              //
 409+ 7A34              // /            n1 n2 -- n3
 410+ 7A34              // division
 411+ 7A34                              Colon_Def DIV, "/", is_normal
 411+ 7A34             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A34             >
 411+ 7A34             >                // dummy db directives used to calculate length of namec
 411+ 7A34 2F          >                db      "/"
 411+ 7A35             >len_NFA         defl    $ - temp_NFA
 411+ 7A35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A34             >
 411+ 7A34 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A35 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A36             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A35 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A36             >
 411+ 7A36 20 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A38             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A38 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A3B             >
 411+ 7A3B             >
 411+ 7A3B             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A3B             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A3B             >
 411+ 7A3B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A3B 27 7A 33 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A3F F4 68                        dw      EXIT                    // ;
 414+ 7A41
 415+ 7A41              //  ______________________________________________________________________
 416+ 7A41              //
 417+ 7A41              // mod          n1 n2 -- n3
 418+ 7A41                              Colon_Def MOD, "MOD", is_normal
 418+ 7A41             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A41             >
 418+ 7A41             >                // dummy db directives used to calculate length of namec
 418+ 7A41 4D 4F 44    >                db      "MOD"
 418+ 7A44             >len_NFA         defl    $ - temp_NFA
 418+ 7A44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A41             >
 418+ 7A41 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A42 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A45             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A44 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A45             >
 418+ 7A45 34 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A47             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A47 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A4A             >
 418+ 7A4A             >
 418+ 7A4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A4A             >
 418+ 7A4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A4A 27 7A 2A 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A4E F4 68                        dw      EXIT                    // ;
 421+ 7A50
 422+ 7A50              //  ______________________________________________________________________
 423+ 7A50              //
 424+ 7A50              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A50              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A50              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A50              // avoids loss of precision
 428+ 7A50                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A50             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A50             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A50             >
 428+ 7A50             >                // dummy db directives used to calculate length of namec
 428+ 7A50 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A54 44          >
 428+ 7A55             >len_NFA         defl    $ - temp_NFA
 428+ 7A55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A50             >
 428+ 7A50 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A51 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A55 44          >
 428+ 7A56             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A55 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A56             >
 428+ 7A56 41 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A58             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A58 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A5B             >
 428+ 7A5B             >
 428+ 7A5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A5B             >
 428+ 7A5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A5B 1E 69 75 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A5F 30 69 FE 79                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A63 F4 68                        dw      EXIT                    // ;
 432+ 7A65
 433+ 7A65              //  ______________________________________________________________________
 434+ 7A65              //
 435+ 7A65              // */          n1 n2 n3 -- n4
 436+ 7A65              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A65                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A65             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A65             >
 437+ 7A65             >                // dummy db directives used to calculate length of namec
 437+ 7A65 2A 2F       >                db      "*/"
 437+ 7A67             >len_NFA         defl    $ - temp_NFA
 437+ 7A67             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A65             >
 437+ 7A65 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A66 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A68             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A67 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A68             >
 437+ 7A68 50 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A6A             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A6A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A6D             >
 437+ 7A6D             >
 437+ 7A6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A6D             >
 437+ 7A6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A6D 58 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A6F 33 6A                        dw     NIP                      // nip
 440+ 7A71 F4 68                        dw     EXIT                     // ;
 441+ 7A73
 442+ 7A73
 443+ 7A73              //  ______________________________________________________________________
 444+ 7A73              //
 445+ 7A73              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A73              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A73              // All terms are unsigned.
 448+ 7A73              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A73              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A73              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A73              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A73              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A73              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A73              //              dw      EXIT                    // ;
 455+ 7A73
 456+ 7A73              //  ______________________________________________________________________
 457+ 7A73              //
 458+ 7A73              // (line)       n1 n2 -- a b
 459+ 7A73              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A73              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A73                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A73             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A73             >
 461+ 7A73             >                // dummy db directives used to calculate length of namec
 461+ 7A73 28 4C 49 4E >                db      "(LINE)"
 461+ 7A77 45 29       >
 461+ 7A79             >len_NFA         defl    $ - temp_NFA
 461+ 7A79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A73             >
 461+ 7A73 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A74 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A78 45 29       >
 461+ 7A7A             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A79 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A7A             >
 461+ 7A7A 65 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A7C             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A7C CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A7F             >
 461+ 7A7F             >
 461+ 7A7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A7F             >
 461+ 7A7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A7F 1E 69                        dw      TO_R                    // >r
 463+ 7A81 D4 6B                        dw      NOOP                    // noop
 464+ 7A83 61 6C                        dw      CL                      // c/l
 465+ 7A85 6E 6C 58 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7A89 30 69                        dw      R_TO                    // r>
 467+ 7A8B 7B 6C 17 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7A8F 8F 69
 468+ 7A91 90 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7A93 8F 69                        dw      PLUS                    // +
 470+ 7A95 D4 6B                        dw      NOOP                    // noop
 471+ 7A97 61 6C                        dw      CL                      // c/l
 472+ 7A99 F4 68                        dw      EXIT                    // ;
 473+ 7A9B
 474+ 7A9B              //  ______________________________________________________________________
 475+ 7A9B              //
 476+ 7A9B              // .line        n1 n2 --
 477+ 7A9B              // Sends to output line  n1  of screen n2.
 478+ 7A9B                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7A9B             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7A9B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7A9B             >
 478+ 7A9B             >                // dummy db directives used to calculate length of namec
 478+ 7A9B 2E 4C 49 4E >                db      ".LINE"
 478+ 7A9F 45          >
 478+ 7AA0             >len_NFA         defl    $ - temp_NFA
 478+ 7AA0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7A9B             >
 478+ 7A9B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7A9C 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AA0 45          >
 478+ 7AA1             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AA0 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AA1             >
 478+ 7AA1 73 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AA3             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AA3 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AA6             >
 478+ 7AA6             >
 478+ 7AA6             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AA6             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AA6             >
 478+ 7AA6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AA6 7C 7A 4E 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AAA E8 71
 480+ 7AAC F4 68                        dw      EXIT                    // ;
 481+ 7AAE
 482+ 7AAE              //  ______________________________________________________________________
 483+ 7AAE              //
 484+ 7AAE              // message       n1 n2 --
 485+ 7AAE              // prints error message to current channel.
 486+ 7AAE              // if WARNING is 0, prints "MSG#n".
 487+ 7AAE              // if WARNING is 1, prints line n of screen 4.
 488+ 7AAE              // if WARNING is -1, see ERROR
 489+ 7AAE              // value can be negative or beyond block 4.
 490+ 7AAE                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AAE             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AAE             >
 490+ 7AAE             >                // dummy db directives used to calculate length of namec
 490+ 7AAE 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AB2 41 47 45    >
 490+ 7AB5             >len_NFA         defl    $ - temp_NFA
 490+ 7AB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AAE             >
 490+ 7AAE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AAF 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AB3 41 47 45    >
 490+ 7AB6             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AB5 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AB6             >
 490+ 7AB6 9B 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AB8             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AB8 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7ABB             >
 490+ 7ABB             >
 490+ 7ABB             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7ABB             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7ABB             >
 490+ 7ABB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7ABB DF 6C D8 6A                  dw      WARNING, FETCH          // warning @
 492+ 7ABF                                                              // if
 493+ 7ABF D8 63                        dw      ZBRANCH
 494+ 7AC1 18 00                        dw      Message_Else - $
 495+ 7AC3 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AC7 66 6D D8 6A                  dw          OFFSET, FETCH       //      offset @
 497+ 7ACB 7B 6C 38 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7ACF 86 6E
 498+ 7AD1 A3 7A                        dw          DOT_LINE            //      .line
 499+ 7AD3 41 6F                        dw          SPACE               //      space
 500+ 7AD5                                                              // else
 501+ 7AD5
 502+ 7AD5 C3 63                        dw      BRANCH
 503+ 7AD7 0B 00                        dw      Message_ENdif - $
 504+ 7AD9              Message_Else:
 505+ 7AD9 04 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7ADB 04 6D 73 67                  db          4, "msg#"
 506+ 7ADF 23
 507+ 7AE0 6C 83                        dw          DOT                 //      .  ( forward )
 508+ 7AE2              Message_ENdif:                                  // endif
 509+ 7AE2 F4 68                        dw      EXIT                    // ;
 510+ 7AE4
 511+ 7AE4
 512+ 7AE4              //  ______________________________________________________________________
 513+ 7AE4              //
 514+ 7AE4              // device
 515+ 7AE4                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AE4             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AE4             >
 515+ 7AE4             >                // dummy db directives used to calculate length of namec
 515+ 7AE4 44 45 56 49 >                db      "DEVICE"
 515+ 7AE8 43 45       >
 515+ 7AEA             >len_NFA         defl    $ - temp_NFA
 515+ 7AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AE4             >
 515+ 7AE4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AE5 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7AE9 43 45       >
 515+ 7AEB             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7AEA C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7AEB             >
 515+ 7AEB AE 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7AED             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7AED CD 06 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7AF0             >
 515+ 7AF0             >
 515+ 7AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7AF0             >
 515+ 7AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7AF0 02 00       >                dw      2
 516+ 7AF2
 517+ 7AF2              //  ______________________________________________________________________
 518+ 7AF2              //
 519+ 7AF2              // inkey        -- c | 0
 520+ 7AF2              // call ROM inkey$ routine, returns c or "zero".
 521+ 7AF2
 522+ 7AF2                              New_Def INKEY, "INKEY", is_code, is_normal
 522+ 7AF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 7AF2             >
 522+ 7AF2             >                // dummy db directives used to calculate length of namec
 522+ 7AF2 49 4E 4B 45 >                db      "INKEY"
 522+ 7AF6 59          >
 522+ 7AF7             >len_NFA         defl    $ - temp_NFA
 522+ 7AF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 7AF2             >
 522+ 7AF2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 7AF3 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 522+ 7AF7 59          >
 522+ 7AF8             >                org     $-1                 // alter last byte of Name just above to set
 522+ 7AF7 D9          >                db      {b $} | END_BIT     // msb as name end
 522+ 7AF8             >
 522+ 7AF8 E4 7A       >                dw      last_NFA            // Link to previous definition Name
 522+ 7AFA             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 7AFA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 522+ 7AFA ~           >
 522+ 7AFA ~           >
 522+ 7AFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 7AFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 7AFA             >
 522+ 7AFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 7AFA
 524+ 7AFA C5                           push    bc
 525+ 7AFB ED 73 92 63                  ld      (SP_Saved), sp
 526+ 7AFF 31 61 63                     ld      sp, Cold_origin - 5
 527+ 7B02 DD E5                        push    ix
 528+ 7B04 CD E6 15                     call    $15E6                   // instead of 15E9
 529+ 7B07 DD E1                        pop     ix
 530+ 7B09 ED 7B 92 63                  ld      sp, (SP_Saved)
 531+ 7B0D 6F                           ld      l, a
 532+ 7B0E 26 00                        ld      h, 0
 533+ 7B10 C1                           pop     bc
 534+ 7B11                              psh1
 534+ 7B11 E5          >                push    hl
 534+ 7B12 DD E9       >                jp      (ix)
 535+ 7B14
 536+ 7B14              //  ______________________________________________________________________
 537+ 7B14              //
 538+ 7B14              // select      n --
 539+ 7B14              // selects the given channel number
 540+ 7B14
 541+ 7B14                              New_Def SELECT, "SELECT", is_code, is_normal
 541+ 7B14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 7B14             >
 541+ 7B14             >                // dummy db directives used to calculate length of namec
 541+ 7B14 53 45 4C 45 >                db      "SELECT"
 541+ 7B18 43 54       >
 541+ 7B1A             >len_NFA         defl    $ - temp_NFA
 541+ 7B1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 7B14             >
 541+ 7B14 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 7B15 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 541+ 7B19 43 54       >
 541+ 7B1B             >                org     $-1                 // alter last byte of Name just above to set
 541+ 7B1A D4          >                db      {b $} | END_BIT     // msb as name end
 541+ 7B1B             >
 541+ 7B1B F2 7A       >                dw      last_NFA            // Link to previous definition Name
 541+ 7B1D             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 7B1D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 541+ 7B1D ~           >
 541+ 7B1D ~           >
 541+ 7B1D             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 7B1D             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 7B1D             >
 541+ 7B1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 7B1D E1                           pop     hl
 543+ 7B1E C5                           push    bc
 544+ 7B1F 7D                           ld      a, l
 545+ 7B20 ED 73 92 63                  ld      (SP_Saved), sp
 546+ 7B24 31 61 63                     ld      sp, Cold_origin - 5
 547+ 7B27 DD E5                        push    ix
 548+ 7B29 CD 01 16                     call    $1601
 549+ 7B2C DD E1                        pop     ix
 550+ 7B2E ED 7B 92 63                  ld      sp, (SP_Saved)
 551+ 7B32 C1                           pop     bc
 552+ 7B33
 553+ 7B33                              next
 553+ 7B33 DD E9       >                jp      (ix)
 554+ 7B35
 555+ 7B35              //  ______________________________________________________________________
 556+ 7B35
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B35                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B35              //  ______________________________________________________________________
   2+ 7B35              //
   3+ 7B35              //  next-opt.asm
   4+ 7B35              //
   5+ 7B35              //  ZX Spectrum Next - peculiar definitions
   6+ 7B35              //  ______________________________________________________________________
   7+ 7B35
   8+ 7B35              //  ______________________________________________________________________
   9+ 7B35              //
  10+ 7B35              // reg@         n -- b
  11+ 7B35              // read Next REGister n giving byte b
  12+ 7B35              //
  13+ 7B35              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B35              //              dw      LIT, $243B
  15+ 7B35              //              dw      PSTORE
  16+ 7B35              //              dw      LIT, $253B
  17+ 7B35              //              dw      PFETCH
  18+ 7B35              //              dw      EXIT
  19+ 7B35                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B35             >
  19+ 7B35             >                // dummy db directives used to calculate length of namec
  19+ 7B35 52 45 47 40 >                db      "REG@"
  19+ 7B39             >len_NFA         defl    $ - temp_NFA
  19+ 7B39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B35             >
  19+ 7B35 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B36 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B3A             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B39 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B3A             >
  19+ 7B3A 14 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B3C             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B3C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B3C ~           >
  19+ 7B3C ~           >
  19+ 7B3C             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B3C             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B3C             >
  19+ 7B3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B3C D9                           exx
  21+ 7B3D 01 3B 24                     ld      bc, $243B
  22+ 7B40 E1                           pop     hl
  23+ 7B41 ED 69                        out     (c), l
  24+ 7B43 04                           inc     b
  25+ 7B44 ED 68                        in      l, (c)
  26+ 7B46 E5                           push    hl
  27+ 7B47 D9                           exx
  28+ 7B48                              next
  28+ 7B48 DD E9       >                jp      (ix)
  29+ 7B4A
  30+ 7B4A
  31+ 7B4A              //  ______________________________________________________________________
  32+ 7B4A              //
  33+ 7B4A              // reg!         b n --
  34+ 7B4A              // write value b to Next REGister n
  35+ 7B4A              //
  36+ 7B4A              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B4A              //              dw      LIT, $243B
  38+ 7B4A              //              dw      PSTORE
  39+ 7B4A              //              dw      LIT, $253B
  40+ 7B4A              //              dw      PSTORE
  41+ 7B4A              //              dw      EXIT
  42+ 7B4A                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B4A             >
  42+ 7B4A             >                // dummy db directives used to calculate length of namec
  42+ 7B4A 52 45 47 21 >                db      "REG!"
  42+ 7B4E             >len_NFA         defl    $ - temp_NFA
  42+ 7B4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B4A             >
  42+ 7B4A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B4B 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B4F             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B4E A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B4F             >
  42+ 7B4F 35 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B51             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B51 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B51 ~           >
  42+ 7B51 ~           >
  42+ 7B51             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B51             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B51             >
  42+ 7B51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B51 D9                           exx
  44+ 7B52 01 3B 24                     ld      bc, $243B
  45+ 7B55 E1                           pop     hl
  46+ 7B56 ED 69                        out     (c), l
  47+ 7B58 04                           inc     b
  48+ 7B59 E1                           pop     hl
  49+ 7B5A ED 69                        out     (c), l
  50+ 7B5C D9                           exx
  51+ 7B5D                              next
  51+ 7B5D DD E9       >                jp      (ix)
  52+ 7B5F
  53+ 7B5F
  54+ 7B5F              //  ______________________________________________________________________
  55+ 7B5F              //
  56+ 7B5F              // mmu7@        -- n
  57+ 7B5F              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B5F
  59+ 7B5F                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B5F             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B5F             >
  59+ 7B5F             >                // dummy db directives used to calculate length of namec
  59+ 7B5F 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B63 40          >
  59+ 7B64             >len_NFA         defl    $ - temp_NFA
  59+ 7B64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B5F             >
  59+ 7B5F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B60 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B64 40          >
  59+ 7B65             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B64 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B65             >
  59+ 7B65 4A 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B67             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B67 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B6A             >
  59+ 7B6A             >
  59+ 7B6A             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B6A             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B6A             >
  59+ 7B6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B6A A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B6E 3C 7B
  61+ 7B70 F4 68                        dw      EXIT
  62+ 7B72
  63+ 7B72              //  ______________________________________________________________________
  64+ 7B72              //
  65+ 7B72              // mmu7!        n --
  66+ 7B72              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B72              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B72
  69+ 7B72                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B72             >
  69+ 7B72             >                // dummy db directives used to calculate length of namec
  69+ 7B72 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B76 21          >
  69+ 7B77             >len_NFA         defl    $ - temp_NFA
  69+ 7B77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B72             >
  69+ 7B72 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B73 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B77 21          >
  69+ 7B78             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B77 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B78             >
  69+ 7B78 5F 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B7A             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B7A ~           >
  69+ 7B7A ~           >
  69+ 7B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B7A             >
  69+ 7B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B7A E1                           pop     hl
  71+ 7B7B 7D                           ld      a, l
  72+ 7B7C ED 92 57                     nextreg 87, a
  73+ 7B7F
  74+ 7B7F                              next
  74+ 7B7F DD E9       >                jp      (ix)
  75+ 7B81
  76+ 7B81              //  ______________________________________________________________________
  77+ 7B81              //
  78+ 7B81              // >far         ha -- a n
  79+ 7B81              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B81              // take lower bits of H and L as an offset from E000h
  81+ 7B81              // then return address  a  between E000h-FFFFh
  82+ 7B81              // and page number n  between 64-71 (40h-47h)
  83+ 7B81              // For example, in hex:
  84+ 7B81              //   0000 >FAR  gives  40.E000
  85+ 7B81              //   1FFF >FAR  gives  40.FFFF
  86+ 7B81              //   2000 >FAR  gives  41.E000
  87+ 7B81              //   3FFF >FAR  gives  41.FFFF
  88+ 7B81              //   EFFF >FAR  gives  47.EFFF
  89+ 7B81              //   FFFF >FAR  gives  47.FFFF
  90+ 7B81              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B81              //                pop     de
  92+ 7B81              //                ld      a, d
  93+ 7B81              //                and     $E0
  94+ 7B81              //                rlca
  95+ 7B81              //                rlca
  96+ 7B81              //                rlca
  97+ 7B81              //                add     $40
  98+ 7B81              //                ld      l, a
  99+ 7B81              //                ld      h, 0
 100+ 7B81              //                ld      a, d
 101+ 7B81              //                or      $E0
 102+ 7B81              //                ld      d, a
 103+ 7B81              //                push    hl
 104+ 7B81              //                push    de
 105+ 7B81              //                next
 106+ 7B81
 107+ 7B81              //  ______________________________________________________________________
 108+ 7B81              //
 109+ 7B81              // <far         a n  -- ha
 110+ 7B81              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B81              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B81              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B81              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B81              //                pop     de                  // page number in e
 115+ 7B81              //                pop     hl                  // address in hl
 116+ 7B81              //                ld      a, e
 117+ 7B81              //                sub     $40                 // reduced to 0-7
 118+ 7B81              //                rrca
 119+ 7B81              //                rrca
 120+ 7B81              //                rrca
 121+ 7B81              //                ld      d, a                // save to d bits 765
 122+ 7B81              //                ld      a, h                // drops
 123+ 7B81              //                and     $1F
 124+ 7B81              //                or      d
 125+ 7B81              //                ld      h, a
 126+ 7B81              //
 127+ 7B81              //                psh1
 128+ 7B81
 129+ 7B81              //  ______________________________________________________________________
 130+ 7B81              //
 131+ 7B81              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B81              // NextZXOS call wrapper.
 133+ 7B81              //  n1 = hl register parameter value
 134+ 7B81              //  n2 = de register parameter value
 135+ 7B81              //  n3 = bc register parameter value
 136+ 7B81              //  n4 =  a register parameter value
 137+ 7B81              //   a = routine address in ROM 3
 138+ 7B81              // ----
 139+ 7B81              //  n5 = hl returned value
 140+ 7B81              //  n6 = de returned value
 141+ 7B81              //  n7 = bc returned value
 142+ 7B81              //  n8 =  a returned value
 143+ 7B81              //   f
 144+ 7B81                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B81             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B81             >
 144+ 7B81             >                // dummy db directives used to calculate length of namec
 144+ 7B81 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B85 44 4F 53    >
 144+ 7B88             >len_NFA         defl    $ - temp_NFA
 144+ 7B88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B81             >
 144+ 7B81 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B82 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B86 44 4F 53    >
 144+ 7B89             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B88 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B89             >
 144+ 7B89 72 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B8B             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B8B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B8B ~           >
 144+ 7B8B ~           >
 144+ 7B8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B8B             >
 144+ 7B8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B8B D1                           pop     de                  // dos call entry address in de
 146+ 7B8C E1                           pop     hl                  // a register
 147+ 7B8D 7D                           ld      a, l
 148+ 7B8E D9                           exx
 149+ 7B8F C1                           pop     bc
 150+ 7B90 D1                           pop     de
 151+ 7B91 E1                           pop     hl
 152+ 7B92 D9                           exx
 153+ 7B93
 154+ 7B93 C5                           push    bc
 155+ 7B94 DD E5                        push    ix
 156+ 7B96
 157+ 7B96 ED 73 92 63                  ld      (SP_Saved), sp
 158+ 7B9A 31 61 63                     ld      sp, Cold_origin - 5
 159+ 7B9D 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B9F
 161+ 7B9F CF                           rst     08
 162+ 7BA0 94                           db      $94
 163+ 7BA1
 164+ 7BA1 ED 7B 92 63                  ld      sp, (SP_Saved)
 165+ 7BA5 DD E5                        push    ix
 166+ 7BA7 E1                           pop     hl
 167+ 7BA8 22 90 63                     ld      (IX_Echo), hl
 168+ 7BAB              //              nop
 169+ 7BAB DD E1                        pop     ix
 170+ 7BAD E3                           ex      (sp), hl            // hl argument and retrieve bc
 171+ 7BAE D5                           push    de
 172+ 7BAF C5                           push    bc
 173+ 7BB0 4D                           ld      c, l
 174+ 7BB1 44                           ld      b, h
 175+ 7BB2
 176+ 7BB2 26 00                        ld      h, 0
 177+ 7BB4 6F                           ld      l, a
 178+ 7BB5 E5                           push    hl
 179+ 7BB6 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 180+ 7BB8 23                           inc     hl                  //  0 for OK ; 1 for ko
 181+ 7BB9
 182+ 7BB9                              psh1
 182+ 7BB9 E5          >                push    hl
 182+ 7BBA DD E9       >                jp      (ix)
 183+ 7BBC
 184+ 7BBC              //  ______________________________________________________________________
 185+ 7BBC              //
 186+ 7BBC              // blk-fh
 187+ 7BBC                              Variable_Def BLK_FH,   "BLK-FH",   1
 187+ 7BBC             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 187+ 7BBC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 7BBC             >
 187+ 7BBC             >                // dummy db directives used to calculate length of namec
 187+ 7BBC 42 4C 4B 2D >                db      "BLK-FH"
 187+ 7BC0 46 48       >
 187+ 7BC2             >len_NFA         defl    $ - temp_NFA
 187+ 7BC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 7BBC             >
 187+ 7BBC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 7BBD 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 187+ 7BC1 46 48       >
 187+ 7BC3             >                org     $-1                 // alter last byte of Name just above to set
 187+ 7BC2 C8          >                db      {b $} | END_BIT     // msb as name end
 187+ 7BC3             >
 187+ 7BC3 81 7B       >                dw      last_NFA            // Link to previous definition Name
 187+ 7BC5             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 7BC5 CD 06 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 187+ 7BC8             >
 187+ 7BC8             >
 187+ 7BC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 7BC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 7BC8             >
 187+ 7BC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 7BC8 01 00       >                dw      1
 188+ 7BCA
 189+ 7BCA                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 189+ 7BCA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 189+ 7BCA             >
 189+ 7BCA             >                // dummy db directives used to calculate length of namec
 189+ 7BCA 42 4C 4B 2D >                db      "BLK-FNAME"
 189+ 7BCE 46 4E 41 4D >
 189+ 7BD2 45          >
 189+ 7BD3             >len_NFA         defl    $ - temp_NFA
 189+ 7BD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 189+ 7BCA             >
 189+ 7BCA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 189+ 7BCB 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 189+ 7BCF 46 4E 41 4D >
 189+ 7BD3 45          >
 189+ 7BD4             >                org     $-1                 // alter last byte of Name just above to set
 189+ 7BD3 C5          >                db      {b $} | END_BIT     // msb as name end
 189+ 7BD4             >
 189+ 7BD4 BC 7B       >                dw      last_NFA            // Link to previous definition Name
 189+ 7BD6             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 189+ 7BD6 CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 189+ 7BD9             >
 189+ 7BD9             >
 189+ 7BD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 189+ 7BD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 189+ 7BD9             >
 189+ 7BD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 190+ 7BD9 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 190+ 7BDD 6F 63 6B 73
 190+ 7BE1 2D 36 34 2E
 190+ 7BE5 62 69 6E 00
 191+ 7BE9 00 00 00...                  ds      24
 192+ 7C01
 193+ 7C01              //  ______________________________________________________________________
 194+ 7C01              //
 195+ 7C01              // blk-seek     n --
 196+ 7C01              // seek block n  within blocks!.bin  file
 197+ 7C01                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 197+ 7C01             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 197+ 7C01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 7C01             >
 197+ 7C01             >                // dummy db directives used to calculate length of namec
 197+ 7C01 42 4C 4B 2D >                db      "BLK-SEEK"
 197+ 7C05 53 45 45 4B >
 197+ 7C09             >len_NFA         defl    $ - temp_NFA
 197+ 7C09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 7C01             >
 197+ 7C01 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 7C02 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 197+ 7C06 53 45 45 4B >
 197+ 7C0A             >                org     $-1                 // alter last byte of Name just above to set
 197+ 7C09 CB          >                db      {b $} | END_BIT     // msb as name end
 197+ 7C0A             >
 197+ 7C0A CA 7B       >                dw      last_NFA            // Link to previous definition Name
 197+ 7C0C             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 7C0C CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 7C0F             >
 197+ 7C0F             >
 197+ 7C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 7C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 7C0F             >
 197+ 7C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 7C0F 6E 6C 75 79                  dw  BBUF, MMUL
 199+ 7C13 C5 7B D8 6A                  dw  BLK_FH, FETCH
 200+ 7C17 0B 67                        dw  F_SEEK
 201+ 7C19 A5 63 2D 00                  dw  LIT, $2D, QERROR
 201+ 7C1D 0B 70
 202+ 7C1F F4 68                        dw  EXIT
 203+ 7C21
 204+ 7C21              //  ______________________________________________________________________
 205+ 7C21              //
 206+ 7C21              // blk-read     n --
 207+ 7C21              // seek block n  within blocks!.bin  file
 208+ 7C21                              Colon_Def BLK_READ, "BLK-READ", is_normal
 208+ 7C21             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 208+ 7C21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 208+ 7C21             >
 208+ 7C21             >                // dummy db directives used to calculate length of namec
 208+ 7C21 42 4C 4B 2D >                db      "BLK-READ"
 208+ 7C25 52 45 41 44 >
 208+ 7C29             >len_NFA         defl    $ - temp_NFA
 208+ 7C29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 208+ 7C21             >
 208+ 7C21 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 208+ 7C22 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 208+ 7C26 52 45 41 44 >
 208+ 7C2A             >                org     $-1                 // alter last byte of Name just above to set
 208+ 7C29 C4          >                db      {b $} | END_BIT     // msb as name end
 208+ 7C2A             >
 208+ 7C2A 01 7C       >                dw      last_NFA            // Link to previous definition Name
 208+ 7C2C             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 208+ 7C2C CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 208+ 7C2F             >
 208+ 7C2F             >
 208+ 7C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 208+ 7C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 208+ 7C2F             >
 208+ 7C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 209+ 7C2F 0C 7C                        dw  BLK_SEEK
 210+ 7C31 6E 6C                        dw  BBUF
 211+ 7C33 C5 7B D8 6A                  dw  BLK_FH, FETCH
 212+ 7C37 6F 67                        dw  F_READ
 213+ 7C39 A5 63 2E 00                  dw  LIT, $2E, QERROR
 213+ 7C3D 0B 70
 214+ 7C3F 2A 6A                        dw  DROP
 215+ 7C41 F4 68                        dw  EXIT
 216+ 7C43
 217+ 7C43              //  ______________________________________________________________________
 218+ 7C43              //
 219+ 7C43              // blk-write     n --
 220+ 7C43              // seek block n  within blocks!.bin  file
 221+ 7C43                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 221+ 7C43             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 221+ 7C43             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 7C43             >
 221+ 7C43             >                // dummy db directives used to calculate length of namec
 221+ 7C43 42 4C 4B 2D >                db      "BLK-WRITE"
 221+ 7C47 57 52 49 54 >
 221+ 7C4B 45          >
 221+ 7C4C             >len_NFA         defl    $ - temp_NFA
 221+ 7C4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 7C43             >
 221+ 7C43 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 7C44 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 221+ 7C48 57 52 49 54 >
 221+ 7C4C 45          >
 221+ 7C4D             >                org     $-1                 // alter last byte of Name just above to set
 221+ 7C4C C5          >                db      {b $} | END_BIT     // msb as name end
 221+ 7C4D             >
 221+ 7C4D 21 7C       >                dw      last_NFA            // Link to previous definition Name
 221+ 7C4F             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 7C4F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 221+ 7C52             >
 221+ 7C52             >
 221+ 7C52             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 7C52             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 7C52             >
 221+ 7C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 7C52 0C 7C                        dw  BLK_SEEK
 223+ 7C54 6E 6C                        dw  BBUF
 224+ 7C56 C5 7B D8 6A                  dw  BLK_FH, FETCH
 225+ 7C5A 8C 67                        dw  F_WRITE
 226+ 7C5C A5 63 2F 00                  dw  LIT, $2F, QERROR
 226+ 7C60 0B 70
 227+ 7C62 2A 6A                        dw  DROP
 228+ 7C64 F4 68                        dw  EXIT
 229+ 7C66
 230+ 7C66              //  ______________________________________________________________________
 231+ 7C66              //
 232+ 7C66              // blk-init     n --
 233+ 7C66              // seek block n  within blocks!.bin  file
 234+ 7C66                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 234+ 7C66             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 234+ 7C66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ 7C66             >
 234+ 7C66             >                // dummy db directives used to calculate length of namec
 234+ 7C66 42 4C 4B 2D >                db      "BLK-INIT"
 234+ 7C6A 49 4E 49 54 >
 234+ 7C6E             >len_NFA         defl    $ - temp_NFA
 234+ 7C6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ 7C66             >
 234+ 7C66 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ 7C67 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 234+ 7C6B 49 4E 49 54 >
 234+ 7C6F             >                org     $-1                 // alter last byte of Name just above to set
 234+ 7C6E D4          >                db      {b $} | END_BIT     // msb as name end
 234+ 7C6F             >
 234+ 7C6F 43 7C       >                dw      last_NFA            // Link to previous definition Name
 234+ 7C71             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 7C71 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 7C74             >
 234+ 7C74             >
 234+ 7C74             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 7C74             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 7C74             >
 234+ 7C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 7C74 C5 7B D8 6A                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 235+ 7C78 2C 67 2A 6A
 236+ 7C7C D6 7B AC 69                  dw  BLK_FNAME, ONE_PLUS
 237+ 7C80 31 6E 42 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 237+ 7C84 A1 67
 238+ 7C86 A5 63 2C 00                  dw  LIT, $2C, QERROR
 238+ 7C8A 0B 70
 239+ 7C8C C5 7B E3 6A                  dw  BLK_FH, STORE
 240+ 7C90 F4 68                        dw  EXIT
 241+ 7C92
 242+ 7C92              //  ______________________________________________________________________
 243+ 7C92              //
 244+ 7C92              // #sec
 245+ 7C92              // number of 512-Byte "sectors" available on thie sysstem.
 246+ 7C92              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 247+ 7C92
 248+ 7C92                              Constant_Def NSEC , "#SEC", 32767
 248+ 7C92             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 248+ 7C92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 7C92             >
 248+ 7C92             >                // dummy db directives used to calculate length of namec
 248+ 7C92 23 53 45 43 >                db      "#SEC"
 248+ 7C96             >len_NFA         defl    $ - temp_NFA
 248+ 7C96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 7C92             >
 248+ 7C92 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 7C93 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 248+ 7C97             >                org     $-1                 // alter last byte of Name just above to set
 248+ 7C96 C3          >                db      {b $} | END_BIT     // msb as name end
 248+ 7C97             >
 248+ 7C97 66 7C       >                dw      last_NFA            // Link to previous definition Name
 248+ 7C99             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 7C99 CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 248+ 7C9C             >
 248+ 7C9C             >
 248+ 7C9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 7C9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 7C9C             >
 248+ 7C9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 248+ 7C9C FF 7F       >                dw      32767
 249+ 7C9E
 250+ 7C9E              //  ______________________________________________________________________
 251+ 7C9E
 252+ 7C9E
 253+ 7C9E
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C9E                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C9E              //  ______________________________________________________________________
   2+ 7C9E              //
   3+ 7C9E              //  L3.asm
   4+ 7C9E              //
   5+ 7C9E              //  Continuation of L2.asm
   6+ 7C9E              //  I/O Block definitions
   7+ 7C9E              //  ______________________________________________________________________
   8+ 7C9E
   9+ 7C9E
  10+ 7C9E              //  ______________________________________________________________________
  11+ 7C9E              //
  12+ 7C9E              // r/w          a n f --
  13+ 7C9E              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C9E                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C9E             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C9E             >
  14+ 7C9E             >                // dummy db directives used to calculate length of namec
  14+ 7C9E 52 2F 57    >                db      "R/W"
  14+ 7CA1             >len_NFA         defl    $ - temp_NFA
  14+ 7CA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C9E             >
  14+ 7C9E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C9F 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7CA2             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7CA1 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7CA2             >
  14+ 7CA2 92 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7CA4             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7CA4 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7CA7             >
  14+ 7CA7             >
  14+ 7CA7             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7CA7             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7CA7             >
  14+ 7CA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7CA7 1E 69                        dw      TO_R                    // >r
  16+ 7CA9 B6 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7CAB 57 6A 6B 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7CAF 1C 6A 99 7C                  dw      OVER, NSEC              // over #sec
  19+ 7CB3 B6 69 CC 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7CB7 A2 68                        dw      OR_OP                   // or
  21+ 7CB9 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7CBD 0B 70
  22+ 7CBF 30 69                        dw      R_TO                    // r>
  23+ 7CC1                                                              // if
  24+ 7CC1 D8 63                        dw      ZBRANCH
  25+ 7CC3 08 00                        dw      Read_Write_Else - $
  26+ 7CC5 2C 7C                        dw          BLK_READ            //      blk-read
  27+ 7CC7 C3 63                        dw      BRANCH
  28+ 7CC9 04 00                        dw      Read_Write_Endif - $
  29+ 7CCB              Read_Write_Else:                                // else
  30+ 7CCB 4F 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CCD              Read_Write_Endif:                               // endif
  32+ 7CCD F4 68                        dw      EXIT                    // ;
  33+ 7CCF
  34+ 7CCF
  35+ 7CCF              //  ______________________________________________________________________
  36+ 7CCF              //
  37+ 7CCF              // +buf        a1 -- a2 f
  38+ 7CCF              // advences to next buffer, cyclically rotating along them
  39+ 7CCF                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CCF             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CCF             >
  39+ 7CCF             >                // dummy db directives used to calculate length of namec
  39+ 7CCF 2B 42 55 46 >                db      "+BUF"
  39+ 7CD3             >len_NFA         defl    $ - temp_NFA
  39+ 7CD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CCF             >
  39+ 7CCF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CD0 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CD4             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CD3 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CD4             >
  39+ 7CD4 9E 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CD6             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CD6 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CD9             >
  39+ 7CD9             >
  39+ 7CD9             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CD9             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CD9             >
  39+ 7CD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CD9 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CDD 8F 69
  41+ 7CDF 57 6A 1B 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CE3 D8 6A
  42+ 7CE5 92 6E                        dw      EQUALS                  // =
  43+ 7CE7                                                              // if
  44+ 7CE7 D8 63                        dw      ZBRANCH
  45+ 7CE9 08 00                        dw      PBuf_Endif - $
  46+ 7CEB 2A 6A                        dw          DROP                //      drop
  47+ 7CED 0F 6D D8 6A                  dw          FIRST, FETCH        //      first @
  48+ 7CF1              PBuf_Endif:                                     // endif
  49+ 7CF1 57 6A DF 6D                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CF5 D8 6A
  50+ 7CF7 86 6E                        dw      SUBTRACT                // -
  51+ 7CF9 F4 68                        dw      EXIT                    // ;
  52+ 7CFB
  53+ 7CFB              //  ______________________________________________________________________
  54+ 7CFB              //
  55+ 7CFB              // update       --
  56+ 7CFB              // mark the last used block to be written to disk
  57+ 7CFB                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CFB             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CFB             >
  57+ 7CFB             >                // dummy db directives used to calculate length of namec
  57+ 7CFB 55 50 44 41 >                db      "UPDATE"
  57+ 7CFF 54 45       >
  57+ 7D01             >len_NFA         defl    $ - temp_NFA
  57+ 7D01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CFB             >
  57+ 7CFB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CFC 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7D00 54 45       >
  57+ 7D02             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7D01 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7D02             >
  57+ 7D02 CF 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7D04             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7D04 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7D07             >
  57+ 7D07             >
  57+ 7D07             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7D07             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7D07             >
  57+ 7D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7D07 DF 6D D8 6A                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7D0B D8 6A
  59+ 7D0D A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7D11 A2 68
  60+ 7D13 DF 6D D8 6A                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7D17 E3 6A
  61+ 7D19 F4 68                        dw      EXIT                    // ;
  62+ 7D1B
  63+ 7D1B
  64+ 7D1B              //  ______________________________________________________________________
  65+ 7D1B              //
  66+ 7D1B              // empty-buffers --
  67+ 7D1B                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7D1B             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7D1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7D1B             >
  67+ 7D1B             >                // dummy db directives used to calculate length of namec
  67+ 7D1B 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7D1F 59 2D 42 55 >
  67+ 7D23 46 46 45 52 >
  67+ 7D27 53          >
  67+ 7D28             >len_NFA         defl    $ - temp_NFA
  67+ 7D28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7D1B             >
  67+ 7D1B 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7D1C 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7D20 59 2D 42 55 >
  67+ 7D24 46 46 45 52 >
  67+ 7D28 53          >
  67+ 7D29             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7D28 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7D29             >
  67+ 7D29 FB 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7D2B             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7D2B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D2E             >
  67+ 7D2E             >
  67+ 7D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D2E             >
  67+ 7D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D2E 0F 6D D8 6A                  dw      FIRST, FETCH            // first @
  69+ 7D32 1B 6D D8 6A                  dw      LIMIT, FETCH            // limit @
  70+ 7D36 1C 6A 86 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D3A 67 73
  71+ 7D3C F4 68                        dw      EXIT                    // ;
  72+ 7D3E
  73+ 7D3E              //  ______________________________________________________________________
  74+ 7D3E              //
  75+ 7D3E              // buffer       n -- a
  76+ 7D3E              // read block n and gives the address to a buffer
  77+ 7D3E              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D3E              // disk before reading the block n.
  79+ 7D3E
  80+ 7D3E                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D3E             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D3E             >
  80+ 7D3E             >                // dummy db directives used to calculate length of namec
  80+ 7D3E 42 55 46 46 >                db      "BUFFER"
  80+ 7D42 45 52       >
  80+ 7D44             >len_NFA         defl    $ - temp_NFA
  80+ 7D44             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D3E             >
  80+ 7D3E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D3F 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D43 45 52       >
  80+ 7D45             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D44 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D45             >
  80+ 7D45 1B 7D       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D47             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D47 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D4A             >
  80+ 7D4A             >
  80+ 7D4A             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D4A             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D4A             >
  80+ 7D4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D4A D4 6D D8 6A                  dw      USE, FETCH              // use @
  82+ 7D4E 57 6A 1E 69                  dw      DUP, TO_R               // dup >r
  83+ 7D52                                                              // begin
  84+ 7D52              Buffer_Begin:
  85+ 7D52 D6 7C                        dw          PBUF                //      +buf
  86+ 7D54                                                              // until
  87+ 7D54 D8 63                        dw      ZBRANCH
  88+ 7D56 FC FF                        dw      Buffer_Begin - $
  89+ 7D58 D4 6D E3 6A                  dw      USE, STORE              // use !
  90+ 7D5C 42 69 D8 6A                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D60 6B 69
  91+ 7D62                                                              // if
  92+ 7D62 D8 63                        dw      ZBRANCH
  93+ 7D64 14 00                        dw      Buffer_Endif - $
  94+ 7D66 42 69 CE 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D6A 42 69 D8 6A                  dw          R_OP, FETCH         //      r fetch
  96+ 7D6E A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D72 92 68                        dw          AND_OP              //      and
  98+ 7D74 27 6C A4 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D78              Buffer_Endif:                                   // endif
 100+ 7D78 42 69 E3 6A                  dw      R_OP, STORE             // r !
 101+ 7D7C 42 69 DF 6D                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D80 E3 6A
 102+ 7D82 30 69 CE 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D86 F4 68                        dw      EXIT                    // ;
 104+ 7D88
 105+ 7D88              //  ______________________________________________________________________
 106+ 7D88              //
 107+ 7D88              // block        n -- a
 108+ 7D88              // Leaves the buffer address that contains the block n.
 109+ 7D88              // If the block is not already present, it will be loaded from disk
 110+ 7D88              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D88              // disk before reading the block n.
 112+ 7D88              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D88
 114+ 7D88                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D88             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D88             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D88             >
 114+ 7D88             >                // dummy db directives used to calculate length of namec
 114+ 7D88 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D8C 4B          >
 114+ 7D8D             >len_NFA         defl    $ - temp_NFA
 114+ 7D8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D88             >
 114+ 7D88 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D89 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D8D 4B          >
 114+ 7D8E             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D8D CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D8E             >
 114+ 7D8E 3E 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D90             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D90 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D93             >
 114+ 7D93             >
 114+ 7D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D93             >
 114+ 7D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D93 66 6D D8 6A                  dw      OFFSET, FETCH           // offset @
 116+ 7D97 8F 69 1E 69                  dw      PLUS, TO_R              // + >r
 117+ 7D9B DF 6D D8 6A                  dw      PREV, FETCH             // prev @
 118+ 7D9F 57 6A D8 6A                  dw      DUP, FETCH              // dup @
 119+ 7DA3 42 69 86 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7DA7 57 6A 8F 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7DAB                                                              // if
 122+ 7DAB D8 63                        dw        ZBRANCH
 123+ 7DAD 32 00                        dw        Block_Endif_1 - $
 124+ 7DAF              Block_Begin:                                    //      begin
 125+ 7DAF D6 7C 51 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7DB3                                                              //          if
 127+ 7DB3 D8 63                        dw          ZBRANCH
 128+ 7DB5 12 00                        dw          Block_Endif_2 - $
 129+ 7DB7 2A 6A                        dw              DROP            //              drop
 130+ 7DB9 42 69 47 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7DBD 57 6A                        dw              DUP             //              dup
 132+ 7DBF 42 69 30 6C                  dw              R_OP, ONE       //              r 1
 133+ 7DC3 A4 7C                        dw              READ_WRITE      //              r/w
 134+ 7DC5 E4 69                        dw              TWO_MINUS       //              2-
 135+ 7DC7              Block_Endif_2:                                  //          endif
 136+ 7DC7 57 6A D8 6A                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7DCB 42 69
 137+ 7DCD 86 6E 57 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DD1 8F 69 51 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DD5                                                              //      until
 140+ 7DD5 D8 63                        dw        ZBRANCH
 141+ 7DD7 D8 FF                        dw        Block_Begin - $
 142+ 7DD9 57 6A DF 6D                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DDD E3 6A
 143+ 7DDF              Block_Endif_1:                                  // endif
 144+ 7DDF 30 69 2A 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DE3 CE 69
 145+ 7DE5 F4 68                        dw      EXIT                    // ;
 146+ 7DE7
 147+ 7DE7              //  ______________________________________________________________________
 148+ 7DE7              //
 149+ 7DE7              // #buff        -- n
 150+ 7DE7              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DE7                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DE7             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DE7             >
 151+ 7DE7             >                // dummy db directives used to calculate length of namec
 151+ 7DE7 23 42 55 46 >                db      "#BUFF"
 151+ 7DEB 46          >
 151+ 7DEC             >len_NFA         defl    $ - temp_NFA
 151+ 7DEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DE7             >
 151+ 7DE7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DE8 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DEC 46          >
 151+ 7DED             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DEC C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DED             >
 151+ 7DED 88 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DEF             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DEF CD ED 6B    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DF2             >
 151+ 7DF2             >
 151+ 7DF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DF2             >
 151+ 7DF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DF2 07 00       >                dw      7
 152+ 7DF4
 153+ 7DF4              //  ______________________________________________________________________
 154+ 7DF4              //
 155+ 7DF4              // flush        --
 156+ 7DF4                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DF4             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DF4             >
 156+ 7DF4             >                // dummy db directives used to calculate length of namec
 156+ 7DF4 46 4C 55 53 >                db      "FLUSH"
 156+ 7DF8 48          >
 156+ 7DF9             >len_NFA         defl    $ - temp_NFA
 156+ 7DF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DF4             >
 156+ 7DF4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DF5 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DF9 48          >
 156+ 7DFA             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DF9 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DFA             >
 156+ 7DFA E7 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DFC             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DFC CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DFF             >
 156+ 7DFF             >
 156+ 7DFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DFF             >
 156+ 7DFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DFF EF 7D AC 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7E03 27 6C
 158+ 7E05              Flush_Do:                                       // do
 159+ 7E05 58 64                        dw      C_DO
 160+ 7E07 27 6C 47 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7E0B 2A 6A
 161+ 7E0D                                                              // loop
 162+ 7E0D EB 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7E11 C5 7B D8 6A                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7E15 3E 67 2A 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7E19 F4 68                        dw      EXIT                    // exit
 166+ 7E1B
 167+ 7E1B              //  ______________________________________________________________________
 168+ 7E1B              //
 169+ 7E1B              // f_getline    a m fh -- n
 170+ 7E1B              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7E1B              // Address a is left for subsequent processing
 172+ 7E1B              // and n as the actual number of byte read, that is the length of line
 173+ 7E1B                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7E1B             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7E1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7E1B             >
 173+ 7E1B             >                // dummy db directives used to calculate length of namec
 173+ 7E1B 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7E1F 54 4C 49 4E >
 173+ 7E23 45          >
 173+ 7E24             >len_NFA         defl    $ - temp_NFA
 173+ 7E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7E1B             >
 173+ 7E1B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7E1C 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7E20 54 4C 49 4E >
 173+ 7E24 45          >
 173+ 7E25             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7E24 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7E25             >
 173+ 7E25 F4 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7E27             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7E27 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7E2A             >
 173+ 7E2A             >
 173+ 7E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7E2A             >
 173+ 7E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7E2A 1E 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E2C 3E 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E2E 42 69 53 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E32 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E36 0B 70
 178+ 7E38
 179+ 7E38 9C 6A 1C 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E3C AC 69 4C 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E40
 182+ 7E40 42 69 6F 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E44 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E48 0B 70
 184+ 7E4A                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E4A D8 63                        dw      ZBRANCH
 186+ 7E4C 3C 00                        dw      FGetline_Else - $
 187+ 7E4E A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E52 41 65
 188+ 7E54 2A 6A 33 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E58 4C 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E5A A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E5E 41 65
 191+ 7E60 2A 6A 33 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E64 62 6A DB 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E68 57 6A 0F 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E6C E3 6A
 194+ 7E6E 57 6A 1E 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E72 9C 6A 30 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E76 27 6C 9A 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E7A 30 69 0B 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E7E A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E82 0B 70
 199+ 7E84                                                              // else
 200+ 7E84 C3 63                        dw      BRANCH
 201+ 7E86 0C 00                        dw      FGetline_Endif - $
 202+ 7E88              FGetline_Else:
 203+ 7E88 30 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E8A 9C 6A 90 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E8E 2A 6A 27 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E92              FGetline_Endif:                                 // endif
 207+ 7E92 1E 69 57 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E96 57 6A
 208+ 7E98 AC 69 4C 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E9C 42 69 F8 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7EA0 AC 6A 8F 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7EA4 27 6C 4C 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7EA8 D9 69 E3 6A                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7EAC 42 69 8F 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7EB0 B6 69
 214+ 7EB2 4C 6A 42 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7EB6 86 6E
 215+ 7EB8 79 73                        dw      BLANKS                  // blanks
 216+ 7EBA 30 69                        dw      R_TO                    // r>                   ( n )
 217+ 7EBC F4 68                        dw      EXIT                    // ;
 218+ 7EBE
 219+ 7EBE              //  ______________________________________________________________________
 220+ 7EBE              //
 221+ 7EBE              // f_include    fh --
 222+ 7EBE              // Given a filehandle includes the source from file
 223+ 7EBE                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7EBE             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7EBE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7EBE             >
 223+ 7EBE             >                // dummy db directives used to calculate length of namec
 223+ 7EBE 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7EC2 43 4C 55 44 >
 223+ 7EC6 45          >
 223+ 7EC7             >len_NFA         defl    $ - temp_NFA
 223+ 7EC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7EBE             >
 223+ 7EBE 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7EBF 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7EC3 43 4C 55 44 >
 223+ 7EC7 45          >
 223+ 7EC8             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7EC7 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7EC8             >
 223+ 7EC8 1B 7E       >                dw      last_NFA            // Link to previous definition Name
 223+ 7ECA             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7ECA CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7ECD             >
 223+ 7ECD             >
 223+ 7ECD             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7ECD             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7ECD             >
 223+ 7ECD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7ECD 3B 6D D8 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7ED1 1E 69
 225+ 7ED3 45 6D D8 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7ED7 1E 69
 226+ 7ED9 04 6E D8 6A                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EDD 1E 69
 227+ 7EDF 42 69                        dw      R_OP                    // r
 228+ 7EE1                                                              // if
 229+ 7EE1 D8 63                        dw      ZBRANCH
 230+ 7EE3 20 00                        dw      FInclude_Else_1 - $
 231+ 7EE5 42 69 53 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EE9 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EED 0B 70
 233+ 7EEF 45 6D D8 6A                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EF3 E4 69                        dw          TWO_MINUS
 235+ 7EF5 0F 6E D8 6A                  dw          SPAN, FETCH         //      span @ -
 236+ 7EF9 86 6E                        dw          SUBTRACT
 237+ 7EFB 74 6E 9A 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EFF                                                              // else
 239+ 7EFF C3 63                        dw      BRANCH
 240+ 7F01 06 00                        dw      FInclude_Endif_1 - $
 241+ 7F03              FInclude_Else_1:
 242+ 7F03 27 6C 27 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7F07                                                              // endif
 244+ 7F07              FInclude_Endif_1:
 245+ 7F07 1E 69 1E 69                  dw      TO_R, TO_R              // >r >r
 246+ 7F0B 04 6E E3 6A                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7F0F              FInclude_Begin:                                 // begin
 248+ 7F0F 30 6C 90 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7F13 6E 6C
 249+ 7F15 AC 6A 79 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7F19 4C 6A AC 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7F1D 4C 6A D9 69                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7F21 04 6E D8 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7F25 27 7E                        dw          F_GETLINE           //      f_getline
 254+ 7F27                                                              // while
 255+ 7F27 D8 63                        dw      ZBRANCH
 256+ 7F29 14 00                        dw      FInclude_Repeat - $
 257+ 7F2B 30 6C 3B 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F2F E3 6A
 258+ 7F31 27 6C 45 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F35 E3 6A
 259+ 7F37 6E 77                        dw          INTERPRET           //      interpret
 260+ 7F39 C3 63                        dw      BRANCH
 261+ 7F3B D4 FF                        dw      FInclude_Begin - $
 262+ 7F3D              FInclude_Repeat:                                // repeat
 263+ 7F3D 04 6E D8 6A                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F41 27 6C 04 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F45 E3 6A
 265+ 7F47 2C 67                        dw      F_CLOSE                 // f_close
 266+ 7F49 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F4D 0B 70
 267+ 7F4F 30 69 30 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F53 30 69
 268+ 7F55 57 6A 04 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F59 E3 6A
 269+ 7F5B                                                              // if
 270+ 7F5B D8 63                        dw      ZBRANCH
 271+ 7F5D 12 00                        dw      FInclude_Else_2 - $
 272+ 7F5F 04 6E D8 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F63 0B 67                        dw          F_SEEK              //      f_seek
 274+ 7F65 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F69 0B 70
 275+ 7F6B                                                              // else
 276+ 7F6B C3 63                        dw      BRANCH
 277+ 7F6D 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F6F              FInclude_Else_2:
 279+ 7F6F 90 6A                        dw          TWO_DROP            //      2drop
 280+ 7F71              FInclude_Endif_2:                               // endif
 281+ 7F71 30 69 45 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F75 E3 6A
 282+ 7F77 30 69 3B 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F7B E3 6A
 283+ 7F7D F4 68                        dw      EXIT                    // ;
 284+ 7F7F
 285+ 7F7F              //  ______________________________________________________________________
 286+ 7F7F              //
 287+ 7F7F              // open<         -- fh
 288+ 7F7F              // Open the following filename and return it file-handle
 289+ 7F7F              // Used in the form OPEN CCCC
 290+ 7F7F                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F7F             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F7F             >
 290+ 7F7F             >                // dummy db directives used to calculate length of namec
 290+ 7F7F 4F 50 45 4E >                db      "OPEN<"
 290+ 7F83 3C          >
 290+ 7F84             >len_NFA         defl    $ - temp_NFA
 290+ 7F84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F7F             >
 290+ 7F7F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F80 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F84 3C          >
 290+ 7F85             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F84 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F85             >
 290+ 7F85 BE 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F87             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F87 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F8A             >
 290+ 7F8A             >
 290+ 7F8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F8A             >
 290+ 7F8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F8A 56 6C                        dw      BL
 292+ 7F8C B4 73 C0 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F90 1C 6A
 293+ 7F92 8F 69 27 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F96 4C 6A E3 6A
 294+ 7F9A A0 73 30 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F9E A1 67
 295+ 7FA0 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7FA4 0B 70                        dw      QERROR                  // ?error
 297+ 7FA6 F4 68                        dw      EXIT                    // ;
 298+ 7FA8
 299+ 7FA8              //  ______________________________________________________________________
 300+ 7FA8              //
 301+ 7FA8              // include      -- cccc
 302+ 7FA8              // Include the following filename
 303+ 7FA8                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7FA8             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7FA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7FA8             >
 303+ 7FA8             >                // dummy db directives used to calculate length of namec
 303+ 7FA8 49 4E 43 4C >                db      "INCLUDE"
 303+ 7FAC 55 44 45    >
 303+ 7FAF             >len_NFA         defl    $ - temp_NFA
 303+ 7FAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7FA8             >
 303+ 7FA8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7FA9 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7FAD 55 44 45    >
 303+ 7FB0             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7FAF C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7FB0             >
 303+ 7FB0 7F 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7FB2             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7FB2 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7FB5             >
 303+ 7FB5             >
 303+ 7FB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7FB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7FB5             >
 303+ 7FB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7FB5 87 7F                        dw      OPEN_FH                 // open
 305+ 7FB7 57 6A CA 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7FBB 2C 67 2A 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7FBF F4 68                        dw      EXIT                    // ;
 308+ 7FC1
 309+ 7FC1              //  ______________________________________________________________________
 310+ 7FC1              //
 311+ 7FC1              // needs
 312+ 7FC1              // check for cccc exists in vocabulary
 313+ 7FC1              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7FC1
 315+ 7FC1              // temp filename cccc.f as counted string zero-padded
 316+ 7FC1                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7FC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7FC1             >
 316+ 7FC1             >                // dummy db directives used to calculate length of namec
 316+ 7FC1 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7FC5 53 2D 57    >
 316+ 7FC8             >len_NFA         defl    $ - temp_NFA
 316+ 7FC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7FC1             >
 316+ 7FC1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7FC2 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7FC6 53 2D 57    >
 316+ 7FC9             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7FC8 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7FC9             >
 316+ 7FC9 A8 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7FCB             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7FCB CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FCE             >
 316+ 7FCE             >
 316+ 7FCE             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FCE             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FCE             >
 316+ 7FCE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FCE 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FF1              // temp complete path+filename
 319+ 7FF1                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FF1             >
 319+ 7FF1             >                // dummy db directives used to calculate length of namec
 319+ 7FF1 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FF5 53 2D 46 4E >
 319+ 7FF9             >len_NFA         defl    $ - temp_NFA
 319+ 7FF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FF1             >
 319+ 7FF1 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FF2 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FF6 53 2D 46 4E >
 319+ 7FFA             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FF9 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FFA             >
 319+ 7FFA C1 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FFC             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FFC CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FFF             >
 319+ 7FFF             >
 319+ 7FFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FFF             >
 319+ 7FFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FFF 00 00 00...                  ds      40
 321+ 8027              // constant path
 322+ 8027                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 8027             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 8027             >
 322+ 8027             >                // dummy db directives used to calculate length of namec
 322+ 8027 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 802B 53 2D 49 4E >
 322+ 802F 43          >
 322+ 8030             >len_NFA         defl    $ - temp_NFA
 322+ 8030             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 8027             >
 322+ 8027 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 8028 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 802C 53 2D 49 4E >
 322+ 8030 43          >
 322+ 8031             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8030 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8031             >
 322+ 8031 F1 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8033             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8033 CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 8036             >
 322+ 8036             >
 322+ 8036             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 8036             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 8036             >
 322+ 8036             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 8036 04 69 6E 63                  db      4, "inc/", 0
 323+ 803A 2F 00
 324+ 803C                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 803C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 803C             >
 324+ 803C             >                // dummy db directives used to calculate length of namec
 324+ 803C 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8040 53 2D 4C 49 >
 324+ 8044 42          >
 324+ 8045             >len_NFA         defl    $ - temp_NFA
 324+ 8045             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 803C             >
 324+ 803C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 803D 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8041 53 2D 4C 49 >
 324+ 8045 42          >
 324+ 8046             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8045 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 8046             >
 324+ 8046 27 80       >                dw      last_NFA            // Link to previous definition Name
 324+ 8048             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 8048 CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 804B             >
 324+ 804B             >
 324+ 804B             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 804B             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 804B             >
 324+ 804B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 804B 04 6C 69 62                  db      4, "lib/", 0
 325+ 804F 2F 00
 326+ 8051
 327+ 8051              // Concatenate path at a and filename and include it
 328+ 8051              // No error is issued if filename doesn't exist.
 329+ 8051                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8051             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8051             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8051             >
 329+ 8051             >                // dummy db directives used to calculate length of namec
 329+ 8051 4E 45 45 44 >                db      "NEEDS/"
 329+ 8055 53 2F       >
 329+ 8057             >len_NFA         defl    $ - temp_NFA
 329+ 8057             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8051             >
 329+ 8051 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8052 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8056 53 2F       >
 329+ 8058             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8057 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8058             >
 329+ 8058 3C 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 805A             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 805A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 805D             >
 329+ 805D             >
 329+ 805D             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 805D             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 805D             >
 329+ 805D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 805D C0 71 3E 6A                  dw      COUNT, TUCK             // n a n
 331+ 8061 FC 7F 4C 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8065 F8 67
 332+ 8067 FC 7F 8F 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 806B CB 7F AC 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 806F 4C 6A
 334+ 8071 A5 63 23 00                  dw      LIT, 35
 335+ 8075 F8 67                        dw      CMOVE
 336+ 8077 FC 7F                        dw      NEEDS_FN
 337+ 8079 A0 73 30 6C                  dw      PAD, ONE, F_OPEN
 337+ 807D A1 67
 338+ 807F 51 69                        dw      ZEQUAL
 339+ 8081 D8 63                        dw      ZBRANCH
 340+ 8083 08 00                        dw      Needs_1 - $
 341+ 8085 CA 7E                        dw          F_INCLUDE
 342+ 8087 C3 63                        dw      BRANCH
 343+ 8089 04 00                        dw      Needs_2 - $
 344+ 808B              Needs_1:
 345+ 808B              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 808B              //              dw          LIT, 43, MESSAGE
 347+ 808B 2A 6A                        dw          DROP
 348+ 808D              Needs_2:
 349+ 808D F4 68                        dw      EXIT                    // ;
 350+ 808F
 351+ 808F
 352+ 808F                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 352+ 808F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 808F             >
 352+ 808F             >                // dummy db directives used to calculate length of namec
 352+ 808F 4E 43 44 4D >                db      "NCDM"
 352+ 8093             >len_NFA         defl    $ - temp_NFA
 352+ 8093             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 808F             >
 352+ 808F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8090 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 352+ 8094             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8093 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8094             >
 352+ 8094 51 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 8096             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8096 CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8099             >
 352+ 8099             >
 352+ 8099             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8099             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8099             >
 352+ 8099             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8099 25 5E 25 26                  db $25, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 353+ 809D 24 5F 7B 7D
 353+ 80A1 7E
 354+ 80A2
 355+ 80A2                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 355+ 80A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 355+ 80A2             >
 355+ 80A2             >                // dummy db directives used to calculate length of namec
 355+ 80A2 4E 44 4F 4D >                db      "NDOM"
 355+ 80A6             >len_NFA         defl    $ - temp_NFA
 355+ 80A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 355+ 80A2             >
 355+ 80A2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 355+ 80A3 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 355+ 80A7             >                org     $-1                 // alter last byte of Name just above to set
 355+ 80A6 CD          >                db      {b $} | END_BIT     // msb as name end
 355+ 80A7             >
 355+ 80A7 8F 80       >                dw      last_NFA            // Link to previous definition Name
 355+ 80A9             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 355+ 80A9 CD 7D 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 355+ 80AC             >
 355+ 80AC             >
 355+ 80AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 355+ 80AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 355+ 80AC             >
 355+ 80AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 356+ 80AC 3A 3F 2F 2A                  db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 356+ 80B0 7C 5C 3C 3E
 356+ 80B4 22
 357+ 80B5
 358+ 80B5
 359+ 80B5              // Replace illegal character in filename using the map here above
 360+ 80B5              // at the moment we need only  "
 361+ 80B5                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 361+ 80B5             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 361+ 80B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 80B5             >
 361+ 80B5             >                // dummy db directives used to calculate length of namec
 361+ 80B5 4E 45 45 44 >                db      "NEEDS-CH"
 361+ 80B9 53 2D 43 48 >
 361+ 80BD             >len_NFA         defl    $ - temp_NFA
 361+ 80BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 80B5             >
 361+ 80B5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 80B6 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 361+ 80BA 53 2D 43 48 >
 361+ 80BE             >                org     $-1                 // alter last byte of Name just above to set
 361+ 80BD C8          >                db      {b $} | END_BIT     // msb as name end
 361+ 80BE             >
 361+ 80BE A2 80       >                dw      last_NFA            // Link to previous definition Name
 361+ 80C0             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 80C0 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 80C3             >
 361+ 80C3             >
 361+ 80C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 80C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 80C3             >
 361+ 80C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 80C3 C0 71 D6 71                  dw      COUNT, BOUNDS
 363+ 80C7 58 64                        dw      C_DO
 364+ 80C9              Needs_3:
 365+ 80C9 96 80 A9 80                  dw          NCDM, NDOM, LIT, 9
 365+ 80CD A5 63 09 00
 366+ 80D1 61 64 EF 6A                  dw          I, CFETCH
 367+ 80D5 79 65                        dw          C_MAP
 368+ 80D7 61 64 FB 6A                  dw          I, CSTORE
 369+ 80DB              Needs_4:
 370+ 80DB EB 63                        dw      C_LOOP
 371+ 80DD EC FF                        dw      Needs_3 - $
 372+ 80DF F4 68                        dw      EXIT
 373+ 80E1
 374+ 80E1
 375+ 80E1              // include  "path/cccc.f" if cccc is not defined
 376+ 80E1              // filename cccc.f is temporary stored at NEEDS-W
 377+ 80E1                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 377+ 80E1             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 377+ 80E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 80E1             >
 377+ 80E1             >                // dummy db directives used to calculate length of namec
 377+ 80E1 4E 45 45 44 >                db      "NEEDS-F"
 377+ 80E5 53 2D 46    >
 377+ 80E8             >len_NFA         defl    $ - temp_NFA
 377+ 80E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 80E1             >
 377+ 80E1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 80E2 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 377+ 80E6 53 2D 46    >
 377+ 80E9             >                org     $-1                 // alter last byte of Name just above to set
 377+ 80E8 C6          >                db      {b $} | END_BIT     // msb as name end
 377+ 80E9             >
 377+ 80E9 B5 80       >                dw      last_NFA            // Link to previous definition Name
 377+ 80EB             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 80EB CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 80EE             >
 377+ 80EE             >
 377+ 80EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 80EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 80EE             >
 377+ 80EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 80EE 70 75                        dw      LFIND
 379+ 80F0 D8 63                        dw      ZBRANCH
 380+ 80F2 0A 00                        dw      Needs_5 - $
 381+ 80F4
 382+ 80F4 2A 6A 90 6A                  dw          DROP, TWO_DROP
 383+ 80F8 C3 63                        dw      BRANCH
 384+ 80FA 2C 00                        dw      Needs_6 - $
 385+ 80FC              Needs_5:
 386+ 80FC CB 7F                        dw          NEEDS_W
 387+ 80FE A5 63 23 00                  dw          LIT, 35
 388+ 8102 67 73                        dw          ERASE                   // a
 389+ 8104 31 6E EF 6A                  dw          HERE, CFETCH, ONE_PLUS  // a n
 389+ 8108 AC 69
 390+ 810A 31 6E 1C 6A                  dw          HERE, OVER              // a n here n
 391+ 810E CB 7F 4C 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 391+ 8112 F8 67
 392+ 8114 CB 7F C0 80                  dw          NEEDS_W, NEEDS_CHECK
 393+ 8118 CB 7F 8F 69                  dw          NEEDS_W, PLUS           // a a1+1
 394+ 811C A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 395+ 8120 4C 6A E3 6A                  dw          SWAP, STORE             // a
 396+ 8124 5A 80                        dw          NEEDS_SLASH
 397+ 8126              Needs_6:
 398+ 8126 F4 68                        dw      EXIT
 399+ 8128
 400+ 8128
 401+ 8128              // check for cccc exists in vocabulary
 402+ 8128              // if it doesn't then  INCLUDE  inc/cccc.F
 403+ 8128              // search in inc subdirectory
 404+ 8128                              Colon_Def NEEDS, "NEEDS", is_normal
 404+ 8128             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 404+ 8128             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 8128             >
 404+ 8128             >                // dummy db directives used to calculate length of namec
 404+ 8128 4E 45 45 44 >                db      "NEEDS"
 404+ 812C 53          >
 404+ 812D             >len_NFA         defl    $ - temp_NFA
 404+ 812D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 8128             >
 404+ 8128 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 8129 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 404+ 812D 53          >
 404+ 812E             >                org     $-1                 // alter last byte of Name just above to set
 404+ 812D D3          >                db      {b $} | END_BIT     // msb as name end
 404+ 812E             >
 404+ 812E E1 80       >                dw      last_NFA            // Link to previous definition Name
 404+ 8130             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 8130 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 8133             >
 404+ 8133             >
 404+ 8133             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 8133             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 8133             >
 404+ 8133             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 8133 45 6D D8 6A                  dw      TO_IN, FETCH
 406+ 8137 57 6A                        dw      DUP
 407+ 8139 33 80 EB 80                  dw      NEEDS_INC, NEEDS_PATH
 408+ 813D 45 6D E3 6A                  dw      TO_IN, STORE
 409+ 8141 48 80 EB 80                  dw      NEEDS_LIB, NEEDS_PATH
 410+ 8145 45 6D E3 6A                  dw      TO_IN, STORE
 411+ 8149 70 75                        dw      LFIND
 412+ 814B D8 63                        dw      ZBRANCH
 413+ 814D 08 00                        dw      Needs_10 - $
 414+ 814F 90 6A                        dw          TWO_DROP
 415+ 8151 C3 63                        dw      BRANCH
 416+ 8153 10 00                        dw      Needs_11 - $
 417+ 8155              Needs_10:
 418+ 8155 CB 7F C0 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 418+ 8159 E8 71 41 6F
 419+ 815D A5 63 2B 00                  dw      LIT, 43, MESSAGE
 419+ 8161 B8 7A
 420+ 8163              Needs_11:
 421+ 8163 F4 68                        dw      EXIT
 422+ 8165
 423+ 8165
 424+ 8165              //  ______________________________________________________________________
 425+ 8165              //
 426+ 8165              // load+        n --
 427+ 8165                              Colon_Def LOAD_P, "LOAD+", is_normal
 427+ 8165             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 427+ 8165             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ 8165             >
 427+ 8165             >                // dummy db directives used to calculate length of namec
 427+ 8165 4C 4F 41 44 >                db      "LOAD+"
 427+ 8169 2B          >
 427+ 816A             >len_NFA         defl    $ - temp_NFA
 427+ 816A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ 8165             >
 427+ 8165 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ 8166 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 427+ 816A 2B          >
 427+ 816B             >                org     $-1                 // alter last byte of Name just above to set
 427+ 816A AB          >                db      {b $} | END_BIT     // msb as name end
 427+ 816B             >
 427+ 816B 28 81       >                dw      last_NFA            // Link to previous definition Name
 427+ 816D             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 816D CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 427+ 8170             >
 427+ 8170             >
 427+ 8170             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 8170             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 8170             >
 427+ 8170             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 8170 3B 6D D8 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 428+ 8174 1E 69
 429+ 8176 45 6D D8 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 429+ 817A 1E 69
 430+ 817C
 431+ 817C 27 6C 45 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 431+ 8180 E3 6A
 432+ 8182 7B 6C 17 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 432+ 8186 3B 6D E3 6A
 433+ 818A 6E 77                        dw      INTERPRET               // interpret
 434+ 818C
 435+ 818C 30 69 45 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 435+ 8190 E3 6A
 436+ 8192 30 69 3B 6D                  dw      R_TO, BLK, STORE        // r> blk !
 436+ 8196 E3 6A
 437+ 8198 F4 68                        dw      EXIT                    // ;
 438+ 819A
 439+ 819A              //  ______________________________________________________________________
 440+ 819A              //
 441+ 819A              // -->          --
 442+ 819A                              Colon_Def LOAD_NEXT, "-->", is_immediate
 442+ 819A             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 442+ 819A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 819A             >
 442+ 819A             >                // dummy db directives used to calculate length of namec
 442+ 819A 2D 2D 3E    >                db      "-->"
 442+ 819D             >len_NFA         defl    $ - temp_NFA
 442+ 819D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 819A             >
 442+ 819A C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 819B 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 442+ 819E             >                org     $-1                 // alter last byte of Name just above to set
 442+ 819D BE          >                db      {b $} | END_BIT     // msb as name end
 442+ 819E             >
 442+ 819E 65 81       >                dw      last_NFA            // Link to previous definition Name
 442+ 81A0             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 81A0 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 81A3             >
 442+ 81A3             >
 442+ 81A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 81A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 81A3             >
 442+ 81A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 81A3 89 70                        dw      QLOADING                // ?loading
 444+ 81A5 27 6C 45 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 444+ 81A9 E3 6A
 445+ 81AB 7B 6C                        dw      BSCR                    // b/scr
 446+ 81AD 3B 6D D8 6A                  dw      BLK, FETCH              // blk @
 447+ 81B1 1C 6A                        dw      OVER                    // over
 448+ 81B3 47 7A                        dw      MOD                     // mod
 449+ 81B5 86 6E                        dw      SUBTRACT                // -
 450+ 81B7 3B 6D B9 6A                  dw      BLK, PLUSSTORE          // +!
 451+ 81BB F4 68                        dw      EXIT                    // ;
 452+ 81BD
 453+ 81BD              //  ______________________________________________________________________
 454+ 81BD              //
 455+ 81BD              // '            -- xt
 456+ 81BD                              Colon_Def TICK, "'", is_normal
 456+ 81BD             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 456+ 81BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 456+ 81BD             >
 456+ 81BD             >                // dummy db directives used to calculate length of namec
 456+ 81BD 27          >                db      "'"
 456+ 81BE             >len_NFA         defl    $ - temp_NFA
 456+ 81BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 456+ 81BD             >
 456+ 81BD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 456+ 81BE 27          >                db      "'"               // name string in 7-bit ascii, but
 456+ 81BF             >                org     $-1                 // alter last byte of Name just above to set
 456+ 81BE A7          >                db      {b $} | END_BIT     // msb as name end
 456+ 81BF             >
 456+ 81BF 9A 81       >                dw      last_NFA            // Link to previous definition Name
 456+ 81C1             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 456+ 81C1 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 456+ 81C4             >
 456+ 81C4             >
 456+ 81C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 456+ 81C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 456+ 81C4             >
 456+ 81C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 457+ 81C4 70 75                        dw      LFIND                   // -find
 458+ 81C6 51 69                        dw      ZEQUAL                  // 0=
 459+ 81C8 27 6C 0B 70                  dw      ZERO, QERROR            // 0 ?error
 460+ 81CC 2A 6A                        dw      DROP                    // drop
 461+ 81CE F4 68                        dw      EXIT                    // ;
 462+ 81D0
 463+ 81D0              //  ______________________________________________________________________
 464+ 81D0              //
 465+ 81D0              // forget       -- cccc
 466+ 81D0                              Colon_Def FORGET, "FORGET", is_normal
 466+ 81D0             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 466+ 81D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 466+ 81D0             >
 466+ 81D0             >                // dummy db directives used to calculate length of namec
 466+ 81D0 46 4F 52 47 >                db      "FORGET"
 466+ 81D4 45 54       >
 466+ 81D6             >len_NFA         defl    $ - temp_NFA
 466+ 81D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 466+ 81D0             >
 466+ 81D0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 466+ 81D1 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 466+ 81D5 45 54       >
 466+ 81D7             >                org     $-1                 // alter last byte of Name just above to set
 466+ 81D6 D4          >                db      {b $} | END_BIT     // msb as name end
 466+ 81D7             >
 466+ 81D7 BD 81       >                dw      last_NFA            // Link to previous definition Name
 466+ 81D9             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 466+ 81D9 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 466+ 81DC             >
 466+ 81DC             >
 466+ 81DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 466+ 81DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 466+ 81DC             >
 466+ 81DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 467+ 81DC 82 6D D8 6A                  dw      CURRENT, FETCH          // current @
 468+ 81E0 74 6D D8 6A                  dw      CONTEXT, FETCH          // context @
 469+ 81E4 86 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 469+ 81E8 17 00 0B 70
 470+ 81EC C1 81 D6 6F                  dw      TICK, TO_BODY           // ' >body
 471+ 81F0 57 6A EB 6C                  dw      DUP, FENCE, FETCH       // dup fence @
 471+ 81F4 D8 6A
 472+ 81F6 A0 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 472+ 81FA 15 00 0B 70
 473+ 81FE 57 6A AA 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 473+ 8202 F4 6C E3 6A
 474+ 8206 8A 6F D8 6A                  dw      LFA, FETCH              // lfa @
 475+ 820A 74 6D D8 6A                  dw      CONTEXT, FETCH, STORE   // context @ !
 475+ 820E E3 6A
 476+ 8210 F4 68                        dw      EXIT                    // ;
 477+ 8212
 478+ 8212              //  ______________________________________________________________________
 479+ 8212              //
 480+ 8212              // marker       -- cccc
 481+ 8212                              Colon_Def MARKER, "MARKER", is_immediate
 481+ 8212             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 481+ 8212             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 481+ 8212             >
 481+ 8212             >                // dummy db directives used to calculate length of namec
 481+ 8212 4D 41 52 4B >                db      "MARKER"
 481+ 8216 45 52       >
 481+ 8218             >len_NFA         defl    $ - temp_NFA
 481+ 8218             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 481+ 8212             >
 481+ 8212 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 481+ 8213 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 481+ 8217 45 52       >
 481+ 8219             >                org     $-1                 // alter last byte of Name just above to set
 481+ 8218 D2          >                db      {b $} | END_BIT     // msb as name end
 481+ 8219             >
 481+ 8219 D0 81       >                dw      last_NFA            // Link to previous definition Name
 481+ 821B             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 481+ 821B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 481+ 821E             >
 481+ 821E             >
 481+ 821E             >                endif           ; ok        // for other definitions it "points" the correct handler
 481+ 821E             >                // Use of "; ok" to suppress "warning[fwdref]"
 481+ 821E             >
 481+ 821E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 482+ 821E 88 71                        dw      CBUILDS
 483+ 8220 03 6D D8 6A                  dw      VOC_LINK, FETCH, COMMA
 483+ 8224 4F 6E
 484+ 8226 82 6D D8 6A                  dw      CURRENT, FETCH, COMMA
 484+ 822A 4F 6E
 485+ 822C 74 6D D8 6A                  dw      CONTEXT, FETCH, COMMA
 485+ 8230 4F 6E
 486+ 8232 79 6F 4F 6E                  dw      LATEST, COMMA
 487+ 8236 79 6F BF 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 487+ 823A 8A 6F D8 6A
 487+ 823E 4F 6E
 488+ 8240 99 71                        dw      DOES_TO
 489+ 8242 57 6A D8 6A                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 489+ 8246 03 6D E3 6A
 489+ 824A CE 69
 490+ 824C 57 6A D8 6A                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 490+ 8250 82 6D E3 6A
 490+ 8254 CE 69
 491+ 8256 57 6A D8 6A                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 491+ 825A 74 6D E3 6A
 491+ 825E CE 69
 492+ 8260 57 6A D8 6A                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 492+ 8264 F4 6C E3 6A
 492+ 8268 CE 69
 493+ 826A D8 6A 82 6D                  dw           FETCH, CURRENT, FETCH, STORE
 493+ 826E D8 6A E3 6A
 494+ 8272 F4 68                        dw      EXIT
 495+ 8274
 496+ 8274              //  ______________________________________________________________________
 497+ 8274              //
 498+ 8274              // spaces       n --
 499+ 8274                              Colon_Def SPACES, "SPACES", is_normal
 499+ 8274             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 499+ 8274             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 8274             >
 499+ 8274             >                // dummy db directives used to calculate length of namec
 499+ 8274 53 50 41 43 >                db      "SPACES"
 499+ 8278 45 53       >
 499+ 827A             >len_NFA         defl    $ - temp_NFA
 499+ 827A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 8274             >
 499+ 8274 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 8275 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 499+ 8279 45 53       >
 499+ 827B             >                org     $-1                 // alter last byte of Name just above to set
 499+ 827A D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 827B             >
 499+ 827B 12 82       >                dw      last_NFA            // Link to previous definition Name
 499+ 827D             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 827D CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 8280             >
 499+ 8280             >
 499+ 8280             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 8280             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 8280             >
 499+ 8280             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 8280 27 6C F2 6E                  dw      ZERO, MAX
 501+ 8284 27 6C 2C 64                  dw      ZERO, C_Q_DO
 502+ 8288 08 00                        dw      Spaces_Leave - $
 503+ 828A              Spaces_Loop:
 504+ 828A 41 6F                        dw          SPACE
 505+ 828C EB 63                        dw      C_LOOP
 506+ 828E FC FF                        dw      Spaces_Loop - $
 507+ 8290              Spaces_Leave:
 508+ 8290 F4 68                        dw      EXIT                    // ;
 509+ 8292
 510+ 8292              //  ______________________________________________________________________
 511+ 8292              //
 512+ 8292              // <#           --
 513+ 8292                              Colon_Def BEGIN_DASH, "<#", is_normal
 513+ 8292             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 513+ 8292             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ 8292             >
 513+ 8292             >                // dummy db directives used to calculate length of namec
 513+ 8292 3C 23       >                db      "<#"
 513+ 8294             >len_NFA         defl    $ - temp_NFA
 513+ 8294             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ 8292             >
 513+ 8292 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ 8293 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 513+ 8295             >                org     $-1                 // alter last byte of Name just above to set
 513+ 8294 A3          >                db      {b $} | END_BIT     // msb as name end
 513+ 8295             >
 513+ 8295 74 82       >                dw      last_NFA            // Link to previous definition Name
 513+ 8297             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 8297 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 829A             >
 513+ 829A             >
 513+ 829A             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 829A             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 829A             >
 513+ 829A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 829A A0 73 CA 6D                  dw      PAD, HLD, STORE
 514+ 829E E3 6A
 515+ 82A0 F4 68                        dw      EXIT
 516+ 82A2
 517+ 82A2              //  ______________________________________________________________________
 518+ 82A2              //
 519+ 82A2              // #>           --
 520+ 82A2                              Colon_Def DASH_END, "#>", is_normal
 520+ 82A2             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 520+ 82A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 520+ 82A2             >
 520+ 82A2             >                // dummy db directives used to calculate length of namec
 520+ 82A2 23 3E       >                db      "#>"
 520+ 82A4             >len_NFA         defl    $ - temp_NFA
 520+ 82A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 520+ 82A2             >
 520+ 82A2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 520+ 82A3 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 520+ 82A5             >                org     $-1                 // alter last byte of Name just above to set
 520+ 82A4 BE          >                db      {b $} | END_BIT     // msb as name end
 520+ 82A5             >
 520+ 82A5 92 82       >                dw      last_NFA            // Link to previous definition Name
 520+ 82A7             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 520+ 82A7 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 520+ 82AA             >
 520+ 82AA             >
 520+ 82AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 520+ 82AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 520+ 82AA             >
 520+ 82AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 521+ 82AA 90 6A                        dw      TWO_DROP
 522+ 82AC CA 6D D8 6A                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 522+ 82B0 A0 73 1C 6A
 522+ 82B4 86 6E
 523+ 82B6 F4 68                        dw      EXIT
 524+ 82B8
 525+ 82B8              //  ______________________________________________________________________
 526+ 82B8              //
 527+ 82B8              // sign         n d -- d
 528+ 82B8                              Colon_Def SIGN, "SIGN", is_normal
 528+ 82B8             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 528+ 82B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 528+ 82B8             >
 528+ 82B8             >                // dummy db directives used to calculate length of namec
 528+ 82B8 53 49 47 4E >                db      "SIGN"
 528+ 82BC             >len_NFA         defl    $ - temp_NFA
 528+ 82BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 528+ 82B8             >
 528+ 82B8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 528+ 82B9 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 528+ 82BD             >                org     $-1                 // alter last byte of Name just above to set
 528+ 82BC CE          >                db      {b $} | END_BIT     // msb as name end
 528+ 82BD             >
 528+ 82BD A2 82       >                dw      last_NFA            // Link to previous definition Name
 528+ 82BF             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 528+ 82BF CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 528+ 82C2             >
 528+ 82C2             >
 528+ 82C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 528+ 82C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 528+ 82C2             >
 528+ 82C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 529+ 82C2 62 6A 6B 69                  dw      ROT, ZLESS
 530+ 82C6 D8 63                        dw      ZBRANCH
 531+ 82C8 08 00                        dw      Sign_Endif - $
 532+ 82CA A5 63 2D 00                  dw          LIT, 45, HOLD
 532+ 82CE 89 73
 533+ 82D0              Sign_Endif:
 534+ 82D0 F4 68                        dw      EXIT
 535+ 82D2
 536+ 82D2              //  ______________________________________________________________________
 537+ 82D2              //
 538+ 82D2              // #           d1 -- d2
 539+ 82D2                              Colon_Def DASH, "#", is_normal
 539+ 82D2             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 539+ 82D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 539+ 82D2             >
 539+ 82D2             >                // dummy db directives used to calculate length of namec
 539+ 82D2 23          >                db      "#"
 539+ 82D3             >len_NFA         defl    $ - temp_NFA
 539+ 82D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 539+ 82D2             >
 539+ 82D2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 539+ 82D3 23          >                db      "#"               // name string in 7-bit ascii, but
 539+ 82D4             >                org     $-1                 // alter last byte of Name just above to set
 539+ 82D3 A3          >                db      {b $} | END_BIT     // msb as name end
 539+ 82D4             >
 539+ 82D4 B8 82       >                dw      last_NFA            // Link to previous definition Name
 539+ 82D6             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 539+ 82D6 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 539+ 82D9             >
 539+ 82D9             >
 539+ 82D9             >                endif           ; ok        // for other definitions it "points" the correct handler
 539+ 82D9             >                // Use of "; ok" to suppress "warning[fwdref]"
 539+ 82D9             >
 539+ 82D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 540+ 82D9 99 6D D8 6A                  dw      BASE, FETCH
 541+ 82DD
 542+ 82DD 1E 69                        dw      TO_R                    // >r           ( ud1 )
 543+ 82DF 27 6C 42 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 543+ 82E3 56 68
 544+ 82E5 30 69 4C 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 544+ 82E9 1E 69
 545+ 82EB 56 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 546+ 82ED 30 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 547+ 82EF
 548+ 82EF 62 6A                        dw      ROT
 549+ 82F1 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 549+ 82F5 1C 6A B2 6E
 550+ 82F9 D8 63                        dw      ZBRANCH
 551+ 82FB 08 00                        dw      Dash_Endif - $
 552+ 82FD A5 63 07 00                  dw          LIT, 7, PLUS
 552+ 8301 8F 69
 553+ 8303              Dash_Endif:
 554+ 8303
 555+ 8303 A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 555+ 8307 8F 69 89 73
 556+ 830B F4 68                        dw      EXIT
 557+ 830D
 558+ 830D              //  ______________________________________________________________________
 559+ 830D              //
 560+ 830D              // #s           d1 -- d2
 561+ 830D                              Colon_Def DASHES, "#S", is_normal
 561+ 830D             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 561+ 830D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ 830D             >
 561+ 830D             >                // dummy db directives used to calculate length of namec
 561+ 830D 23 53       >                db      "#S"
 561+ 830F             >len_NFA         defl    $ - temp_NFA
 561+ 830F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ 830D             >
 561+ 830D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ 830E 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 561+ 8310             >                org     $-1                 // alter last byte of Name just above to set
 561+ 830F D3          >                db      {b $} | END_BIT     // msb as name end
 561+ 8310             >
 561+ 8310 D2 82       >                dw      last_NFA            // Link to previous definition Name
 561+ 8312             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 8312 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 8315             >
 561+ 8315             >
 561+ 8315             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 8315             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 8315             >
 561+ 8315             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 8315              Dashes_Begin:
 563+ 8315 D6 82 AC 6A                  dw      DASH, TWO_DUP
 564+ 8319 A2 68 51 69                  dw          OR_OP, ZEQUAL
 565+ 831D D8 63                        dw      ZBRANCH
 566+ 831F F6 FF                        dw      Dashes_Begin - $
 567+ 8321 F4 68                        dw      EXIT
 568+ 8323
 569+ 8323              //  ______________________________________________________________________
 570+ 8323              //
 571+ 8323              // d.r          d n --
 572+ 8323                              Colon_Def D_DOT_R, "D.R", is_normal
 572+ 8323             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 572+ 8323             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 8323             >
 572+ 8323             >                // dummy db directives used to calculate length of namec
 572+ 8323 44 2E 52    >                db      "D.R"
 572+ 8326             >len_NFA         defl    $ - temp_NFA
 572+ 8326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 8323             >
 572+ 8323 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 8324 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 572+ 8327             >                org     $-1                 // alter last byte of Name just above to set
 572+ 8326 D2          >                db      {b $} | END_BIT     // msb as name end
 572+ 8327             >
 572+ 8327 0D 83       >                dw      last_NFA            // Link to previous definition Name
 572+ 8329             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 8329 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 832C             >
 572+ 832C             >
 572+ 832C             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 832C             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 832C             >
 572+ 832C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 832C 1E 69                        dw      TO_R
 574+ 832E 3E 6A 67 79                  dw      TUCK, DABS
 575+ 8332 97 82 12 83                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 575+ 8336 BF 82 A7 82
 576+ 833A 30 69                        dw      R_TO
 577+ 833C 1C 6A 86 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 577+ 8340 7D 82 E8 71
 578+ 8344 F4 68                        dw      EXIT
 579+ 8346
 580+ 8346              //  ______________________________________________________________________
 581+ 8346              //
 582+ 8346              // .r           n1 n2 --
 583+ 8346                              Colon_Def DOT_R, ".R", is_normal
 583+ 8346             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 583+ 8346             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 583+ 8346             >
 583+ 8346             >                // dummy db directives used to calculate length of namec
 583+ 8346 2E 52       >                db      ".R"
 583+ 8348             >len_NFA         defl    $ - temp_NFA
 583+ 8348             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 583+ 8346             >
 583+ 8346 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 583+ 8347 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 583+ 8349             >                org     $-1                 // alter last byte of Name just above to set
 583+ 8348 D2          >                db      {b $} | END_BIT     // msb as name end
 583+ 8349             >
 583+ 8349 23 83       >                dw      last_NFA            // Link to previous definition Name
 583+ 834B             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 583+ 834B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 583+ 834E             >
 583+ 834E             >
 583+ 834E             >                endif           ; ok        // for other definitions it "points" the correct handler
 583+ 834E             >                // Use of "; ok" to suppress "warning[fwdref]"
 583+ 834E             >
 583+ 834E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 584+ 834E 1E 69                        dw      TO_R
 585+ 8350 74 6E 30 69                  dw      S_TO_D, R_TO
 586+ 8354 29 83                        dw      D_DOT_R
 587+ 8356 F4 68                        dw      EXIT
 588+ 8358
 589+ 8358              //  ______________________________________________________________________
 590+ 8358              //
 591+ 8358              // d.           d --
 592+ 8358                              Colon_Def D_DOT, "D.", is_normal
 592+ 8358             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 592+ 8358             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 8358             >
 592+ 8358             >                // dummy db directives used to calculate length of namec
 592+ 8358 44 2E       >                db      "D."
 592+ 835A             >len_NFA         defl    $ - temp_NFA
 592+ 835A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 8358             >
 592+ 8358 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 8359 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 592+ 835B             >                org     $-1                 // alter last byte of Name just above to set
 592+ 835A AE          >                db      {b $} | END_BIT     // msb as name end
 592+ 835B             >
 592+ 835B 46 83       >                dw      last_NFA            // Link to previous definition Name
 592+ 835D             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 835D CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 8360             >
 592+ 8360             >
 592+ 8360             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 8360             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 8360             >
 592+ 8360             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 8360 27 6C 29 83                  dw      ZERO, D_DOT_R, SPACE
 593+ 8364 41 6F
 594+ 8366 F4 68                        dw      EXIT
 595+ 8368
 596+ 8368              //  ______________________________________________________________________
 597+ 8368              //
 598+ 8368              // .            n --
 599+ 8368                              Colon_Def DOT, ".", is_normal
 599+ 8368             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 599+ 8368             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 599+ 8368             >
 599+ 8368             >                // dummy db directives used to calculate length of namec
 599+ 8368 2E          >                db      "."
 599+ 8369             >len_NFA         defl    $ - temp_NFA
 599+ 8369             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 599+ 8368             >
 599+ 8368 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 599+ 8369 2E          >                db      "."               // name string in 7-bit ascii, but
 599+ 836A             >                org     $-1                 // alter last byte of Name just above to set
 599+ 8369 AE          >                db      {b $} | END_BIT     // msb as name end
 599+ 836A             >
 599+ 836A 58 83       >                dw      last_NFA            // Link to previous definition Name
 599+ 836C             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 599+ 836C CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 599+ 836F             >
 599+ 836F             >
 599+ 836F             >                endif           ; ok        // for other definitions it "points" the correct handler
 599+ 836F             >                // Use of "; ok" to suppress "warning[fwdref]"
 599+ 836F             >
 599+ 836F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 600+ 836F 74 6E 5D 83                  dw      S_TO_D, D_DOT
 601+ 8373 F4 68                        dw      EXIT
 602+ 8375
 603+ 8375              //  ______________________________________________________________________
 604+ 8375              //
 605+ 8375              // ?            n --
 606+ 8375                              Colon_Def QUESTION, "?", is_normal
 606+ 8375             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 606+ 8375             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 606+ 8375             >
 606+ 8375             >                // dummy db directives used to calculate length of namec
 606+ 8375 3F          >                db      "?"
 606+ 8376             >len_NFA         defl    $ - temp_NFA
 606+ 8376             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 606+ 8375             >
 606+ 8375 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 606+ 8376 3F          >                db      "?"               // name string in 7-bit ascii, but
 606+ 8377             >                org     $-1                 // alter last byte of Name just above to set
 606+ 8376 BF          >                db      {b $} | END_BIT     // msb as name end
 606+ 8377             >
 606+ 8377 68 83       >                dw      last_NFA            // Link to previous definition Name
 606+ 8379             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 606+ 8379 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 606+ 837C             >
 606+ 837C             >
 606+ 837C             >                endif           ; ok        // for other definitions it "points" the correct handler
 606+ 837C             >                // Use of "; ok" to suppress "warning[fwdref]"
 606+ 837C             >
 606+ 837C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 607+ 837C D8 6A 6C 83                  dw      FETCH, DOT
 608+ 8380 F4 68                        dw      EXIT
 609+ 8382
 610+ 8382              //  ______________________________________________________________________
 611+ 8382              //
 612+ 8382              // u.           u --
 613+ 8382                              Colon_Def U_DOT, "U.", is_normal
 613+ 8382             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 613+ 8382             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 613+ 8382             >
 613+ 8382             >                // dummy db directives used to calculate length of namec
 613+ 8382 55 2E       >                db      "U."
 613+ 8384             >len_NFA         defl    $ - temp_NFA
 613+ 8384             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 613+ 8382             >
 613+ 8382 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 613+ 8383 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 613+ 8385             >                org     $-1                 // alter last byte of Name just above to set
 613+ 8384 AE          >                db      {b $} | END_BIT     // msb as name end
 613+ 8385             >
 613+ 8385 75 83       >                dw      last_NFA            // Link to previous definition Name
 613+ 8387             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 613+ 8387 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 613+ 838A             >
 613+ 838A             >
 613+ 838A             >                endif           ; ok        // for other definitions it "points" the correct handler
 613+ 838A             >                // Use of "; ok" to suppress "warning[fwdref]"
 613+ 838A             >
 613+ 838A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 614+ 838A 27 6C 5D 83                  dw      ZERO, D_DOT
 615+ 838E F4 68                        dw      EXIT
 616+ 8390
 617+ 8390              //  ______________________________________________________________________
 618+ 8390              //
 619+ 8390              // words        --
 620+ 8390                              Colon_Def WORDS, "WORDS", is_normal
 620+ 8390             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 620+ 8390             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ 8390             >
 620+ 8390             >                // dummy db directives used to calculate length of namec
 620+ 8390 57 4F 52 44 >                db      "WORDS"
 620+ 8394 53          >
 620+ 8395             >len_NFA         defl    $ - temp_NFA
 620+ 8395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ 8390             >
 620+ 8390 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ 8391 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 620+ 8395 53          >
 620+ 8396             >                org     $-1                 // alter last byte of Name just above to set
 620+ 8395 D3          >                db      {b $} | END_BIT     // msb as name end
 620+ 8396             >
 620+ 8396 82 83       >                dw      last_NFA            // Link to previous definition Name
 620+ 8398             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 8398 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 839B             >
 620+ 839B             >
 620+ 839B             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 839B             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 839B             >
 620+ 839B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 839B A5 63 80 00                  dw      LIT, 128, OUT, STORE
 621+ 839F 4F 6D E3 6A
 622+ 83A3 74 6D D8 6A                  dw      CONTEXT, FETCH, FETCH
 622+ 83A7 D8 6A
 623+ 83A9              Words_Begin:
 624+ 83A9 57 6A EF 6A                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 624+ 83AD A5 63 1F 00
 624+ 83B1 92 68
 625+ 83B3 4F 6D D8 6A                  dw          OUT, FETCH, PLUS
 625+ 83B7 8F 69
 626+ 83B9 61 6C B2 6E                  dw          CL, LESS, ZEQUAL
 626+ 83BD 51 69
 627+ 83BF D8 63                        dw          ZBRANCH
 628+ 83C1 0A 00                        dw          Words_Endif - $
 629+ 83C3 EB 67 27 6C                  dw              CR, ZERO, OUT, STORE
 629+ 83C7 4F 6D E3 6A
 630+ 83CB              Words_Endif:
 631+ 83CB 57 6A E4 75                  dw          DUP, ID_DOT
 632+ 83CF BF 6F 8A 6F                  dw          PFA, LFA, FETCH
 632+ 83D3 D8 6A
 633+ 83D5 57 6A 51 69                  dw          DUP, ZEQUAL
 634+ 83D9 EB 66 A2 68                  dw          QTERMINAL, OR_OP
 635+ 83DD D8 63                        dw      ZBRANCH
 636+ 83DF CA FF                        dw      Words_Begin - $
 637+ 83E1 2A 6A                        dw      DROP
 638+ 83E3 F4 68                        dw      EXIT
 639+ 83E5
 640+ 83E5              //  ______________________________________________________________________
 641+ 83E5              //
 642+ 83E5              // list         n --
 643+ 83E5                              Colon_Def LIST, "LIST", is_normal
 643+ 83E5             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 643+ 83E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 643+ 83E5             >
 643+ 83E5             >                // dummy db directives used to calculate length of namec
 643+ 83E5 4C 49 53 54 >                db      "LIST"
 643+ 83E9             >len_NFA         defl    $ - temp_NFA
 643+ 83E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 643+ 83E5             >
 643+ 83E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 643+ 83E6 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 643+ 83EA             >                org     $-1                 // alter last byte of Name just above to set
 643+ 83E9 D4          >                db      {b $} | END_BIT     // msb as name end
 643+ 83EA             >
 643+ 83EA 90 83       >                dw      last_NFA            // Link to previous definition Name
 643+ 83EC             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 643+ 83EC CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 643+ 83EF             >
 643+ 83EF             >
 643+ 83EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 643+ 83EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 643+ 83EF             >
 643+ 83EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 644+ 83EF 37 71 EB 67                  dw      DECIMAL, CR
 645+ 83F3 57 6A 59 6D                  dw      DUP, SCR, STORE
 645+ 83F7 E3 6A
 646+ 83F9 04 74                        dw      C_DOT_QUOTE
 647+ 83FB 05 53 63 72                  db      5, "Scr# "
 647+ 83FF 23 20
 648+ 8401 6C 83                        dw      DOT
 649+ 8403 88 6C 27 6C                  dw      LSCR, ZERO, C_DO
 649+ 8407 58 64
 650+ 8409              List_Loop:
 651+ 8409 EB 67                        dw          CR
 652+ 840B 61 64 42 6C                  dw          I, THREE
 653+ 840F 4B 83 41 6F                  dw          DOT_R, SPACE
 654+ 8413 61 64 59 6D                  dw          I, SCR, FETCH, DOT_LINE
 654+ 8417 D8 6A A3 7A
 655+ 841B EB 66                        dw          QTERMINAL
 656+ 841D D8 63                        dw          ZBRANCH
 657+ 841F 06 00                        dw          List_Endif - $
 658+ 8421 0A 69                        dw              C_LEAVE
 659+ 8423 06 00                        dw              List_Leave - $
 660+ 8425              List_Endif:
 661+ 8425 EB 63                        dw      C_LOOP
 662+ 8427 E2 FF                        dw      List_Loop - $
 663+ 8429              List_Leave:
 664+ 8429 EB 67                        dw      CR
 665+ 842B F4 68                        dw      EXIT
 666+ 842D
 667+ 842D              //  ______________________________________________________________________
 668+ 842D              //
 669+ 842D              // index        n1 n2 --
 670+ 842D                              Colon_Def INDEX, "INDEX", is_normal
 670+ 842D             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 670+ 842D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 670+ 842D             >
 670+ 842D             >                // dummy db directives used to calculate length of namec
 670+ 842D 49 4E 44 45 >                db      "INDEX"
 670+ 8431 58          >
 670+ 8432             >len_NFA         defl    $ - temp_NFA
 670+ 8432             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 670+ 842D             >
 670+ 842D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 670+ 842E 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 670+ 8432 58          >
 670+ 8433             >                org     $-1                 // alter last byte of Name just above to set
 670+ 8432 D8          >                db      {b $} | END_BIT     // msb as name end
 670+ 8433             >
 670+ 8433 E5 83       >                dw      last_NFA            // Link to previous definition Name
 670+ 8435             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 670+ 8435 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 670+ 8438             >
 670+ 8438             >
 670+ 8438             >                endif           ; ok        // for other definitions it "points" the correct handler
 670+ 8438             >                // Use of "; ok" to suppress "warning[fwdref]"
 670+ 8438             >
 670+ 8438             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 671+ 8438 AC 69 4C 6A                  dw      ONE_PLUS, SWAP, C_DO
 671+ 843C 58 64
 672+ 843E              Index_Loop:
 673+ 843E EB 67 61 64                  dw          CR, I, THREE
 673+ 8442 42 6C
 674+ 8444 4B 83 41 6F                  dw          DOT_R, SPACE
 675+ 8448 27 6C 61 64                  dw          ZERO, I, DOT_LINE
 675+ 844C A3 7A
 676+ 844E EB 66                        dw          QTERMINAL
 677+ 8450 D8 63                        dw          ZBRANCH
 678+ 8452 06 00                        dw          Index_Endif - $
 679+ 8454 0A 69                        dw              C_LEAVE
 680+ 8456 06 00                        dw              Index_Leave - $
 681+ 8458              Index_Endif:
 682+ 8458 EB 63                        dw      C_LOOP
 683+ 845A E4 FF                        dw      Index_Loop - $
 684+ 845C              Index_Leave:
 685+ 845C EB 67                        dw      CR
 686+ 845E F4 68                        dw      EXIT
 687+ 8460
 688+ 8460              //  ______________________________________________________________________
 689+ 8460              //
 690+ 8460              // cls          --
 691+ 8460                              Colon_Def CLS, "CLS", is_normal
 691+ 8460             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 691+ 8460             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 691+ 8460             >
 691+ 8460             >                // dummy db directives used to calculate length of namec
 691+ 8460 43 4C 53    >                db      "CLS"
 691+ 8463             >len_NFA         defl    $ - temp_NFA
 691+ 8463             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 691+ 8460             >
 691+ 8460 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 691+ 8461 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 691+ 8464             >                org     $-1                 // alter last byte of Name just above to set
 691+ 8463 D3          >                db      {b $} | END_BIT     // msb as name end
 691+ 8464             >
 691+ 8464 2D 84       >                dw      last_NFA            // Link to previous definition Name
 691+ 8466             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 691+ 8466 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 691+ 8469             >
 691+ 8469             >
 691+ 8469             >                endif           ; ok        // for other definitions it "points" the correct handler
 691+ 8469             >                // Use of "; ok" to suppress "warning[fwdref]"
 691+ 8469             >
 691+ 8469             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 692+ 8469 A5 63 0E 00                  dw      LIT, $0E, EMITC
 692+ 846D D0 65
 693+ 846F F4 68                        dw      EXIT
 694+ 8471
 695+ 8471              //  ______________________________________________________________________
 696+ 8471              //
 697+ 8471              // splash       --
 698+ 8471                              Colon_Def SPLASH, "SPLASH", is_normal
 698+ 8471             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 698+ 8471             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 8471             >
 698+ 8471             >                // dummy db directives used to calculate length of namec
 698+ 8471 53 50 4C 41 >                db      "SPLASH"
 698+ 8475 53 48       >
 698+ 8477             >len_NFA         defl    $ - temp_NFA
 698+ 8477             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 8471             >
 698+ 8471 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 8472 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 698+ 8476 53 48       >
 698+ 8478             >                org     $-1                 // alter last byte of Name just above to set
 698+ 8477 C8          >                db      {b $} | END_BIT     // msb as name end
 698+ 8478             >
 698+ 8478 60 84       >                dw      last_NFA            // Link to previous definition Name
 698+ 847A             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 847A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 698+ 847D             >
 698+ 847D             >
 698+ 847D             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 847D             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 847D             >
 698+ 847D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 847D 66 84                        dw      CLS
 700+ 847F 04 74                        dw      C_DOT_QUOTE
 701+ 8481 56                           db      86
 702+ 8482 76 2D 46 6F                  db      "v-Forth 1.51 NextZXOS version", 13    // 29
 702+ 8486 72 74 68 20
 702+ 848A 31 2E 35 31
 702+ 848E 20 4E 65 78
 702+ 8492 74 5A 58 4F
 702+ 8496 53 20 76 65
 702+ 849A 72 73 69 6F
 702+ 849E 6E 0D
 703+ 84A0 44 69 72 65                  db      "Direct Thread - build 20211119", 13  // 31
 703+ 84A4 63 74 20 54
 703+ 84A8 68 72 65 61
 703+ 84AC 64 20 2D 20
 703+ 84B0 62 75 69 6C
 703+ 84B4 64 20 32 30
 703+ 84B8 32 31 31 31
 703+ 84BC 31 39 0D
 704+ 84BF 31 39 39 30                  db      "1990-2021 Matteo Vitturi", 13        // 25
 704+ 84C3 2D 32 30 32
 704+ 84C7 31 20 4D 61
 704+ 84CB 74 74 65 6F
 704+ 84CF 20 56 69 74
 704+ 84D3 74 75 72 69
 704+ 84D7 0D
 705+ 84D8 F4 68                        dw      EXIT
 706+ 84DA
 707+ 84DA              //  ______________________________________________________________________
 708+ 84DA              //
 709+ 84DA              // video        --
 710+ 84DA                              Colon_Def VIDEO, "VIDEO", is_normal
 710+ 84DA             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 710+ 84DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 710+ 84DA             >
 710+ 84DA             >                // dummy db directives used to calculate length of namec
 710+ 84DA 56 49 44 45 >                db      "VIDEO"
 710+ 84DE 4F          >
 710+ 84DF             >len_NFA         defl    $ - temp_NFA
 710+ 84DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 710+ 84DA             >
 710+ 84DA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 710+ 84DB 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 710+ 84DF 4F          >
 710+ 84E0             >                org     $-1                 // alter last byte of Name just above to set
 710+ 84DF CF          >                db      {b $} | END_BIT     // msb as name end
 710+ 84E0             >
 710+ 84E0 71 84       >                dw      last_NFA            // Link to previous definition Name
 710+ 84E2             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 710+ 84E2 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 710+ 84E5             >
 710+ 84E5             >
 710+ 84E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 710+ 84E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 710+ 84E5             >
 710+ 84E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 711+ 84E5 39 6C 57 6A                  dw      TWO, DUP, DEVICE, STORE
 711+ 84E9 ED 7A E3 6A
 712+ 84ED 1D 7B                        dw      SELECT
 713+ 84EF F4 68                        dw      EXIT
 714+ 84F1
 715+ 84F1              //  ______________________________________________________________________
 716+ 84F1              //
 717+ 84F1              // accept-      a n1 -- n2
 718+ 84F1                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 718+ 84F1             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 718+ 84F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 718+ 84F1             >
 718+ 84F1             >                // dummy db directives used to calculate length of namec
 718+ 84F1 41 43 43 45 >                db      "ACCEPT-"
 718+ 84F5 50 54 2D    >
 718+ 84F8             >len_NFA         defl    $ - temp_NFA
 718+ 84F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 718+ 84F1             >
 718+ 84F1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 718+ 84F2 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 718+ 84F6 50 54 2D    >
 718+ 84F9             >                org     $-1                 // alter last byte of Name just above to set
 718+ 84F8 AD          >                db      {b $} | END_BIT     // msb as name end
 718+ 84F9             >
 718+ 84F9 DA 84       >                dw      last_NFA            // Link to previous definition Name
 718+ 84FB             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 718+ 84FB CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 718+ 84FE             >
 718+ 84FE             >
 718+ 84FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 718+ 84FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 718+ 84FE             >
 718+ 84FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 719+ 84FE 1E 69                        dw      TO_R
 720+ 8500 27 6C                        dw      ZERO
 721+ 8502 4C 6A                        dw      SWAP
 722+ 8504 57 6A                        dw      DUP
 723+ 8506 30 69                        dw      R_TO
 724+ 8508 8F 69                        dw      PLUS
 725+ 850A 4C 6A                        dw      SWAP
 726+ 850C 58 64                        dw      C_DO
 727+ 850E              AcceptN_Loop:
 728+ 850E 67 7B                        dw          MMU7_FETCH
 729+ 8510 FA 7A                        dw          INKEY
 730+ 8512 4C 6A 7A 7B                  dw          SWAP, MMU7_STORE
 731+ 8516 57 6A 51 69                  dw          DUP, ZEQUAL
 732+ 851A D8 63                        dw          ZBRANCH
 733+ 851C 06 00                        dw          AcceptN_Endif_1 - $
 734+ 851E E2 84 33 78                  dw              VIDEO, QUIT
 735+ 8522              AcceptN_Endif_1:
 736+ 8522 57 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 736+ 8526 0D 00 92 6E
 737+ 852A D8 63                        dw          ZBRANCH
 738+ 852C 06 00                        dw          AcceptN_Endif_2 - $
 739+ 852E 2A 6A 27 6C                  dw              DROP, ZERO
 740+ 8532              AcceptN_Endif_2:
 741+ 8532 57 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 741+ 8536 0A 00 92 6E
 742+ 853A D8 63                        dw          ZBRANCH
 743+ 853C 06 00                        dw          AcceptN_Endif_3 - $
 744+ 853E 2A 6A 27 6C                  dw              DROP, ZERO
 745+ 8542              AcceptN_Endif_3:
 746+ 8542 61 64 FB 6A                  dw          I, CSTORE, ONE_PLUS
 746+ 8546 AC 69
 747+ 8548
 748+ 8548 61 64 EF 6A                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 748+ 854C 51 69
 749+ 854E D8 63                        dw          ZBRANCH
 750+ 8550 06 00                        dw              AcceptN_Endif_4 - $
 751+ 8552 0A 69                        dw                  C_LEAVE     //              leave
 752+ 8554 06 00                        dw                  AcceptN_Leave - $
 753+ 8556              AcceptN_Endif_4:                                 //      endif
 754+ 8556
 755+ 8556 EB 63                        dw      C_LOOP
 756+ 8558 B6 FF                        dw      AcceptN_Loop -$
 757+ 855A              AcceptN_Leave:
 758+ 855A F4 68                        dw      EXIT
 759+ 855C
 760+ 855C              //  ______________________________________________________________________
 761+ 855C              //
 762+ 855C              // load-        n --
 763+ 855C              // Provided that a stream n is OPEN# via the standart BASIC
 764+ 855C              // it accepts text from stream #n to the normal INTERPRET
 765+ 855C              // up to now, text-file must end with QUIT
 766+ 855C                              Colon_Def LOAD_N, "LOAD-", is_normal
 766+ 855C             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 766+ 855C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 766+ 855C             >
 766+ 855C             >                // dummy db directives used to calculate length of namec
 766+ 855C 4C 4F 41 44 >                db      "LOAD-"
 766+ 8560 2D          >
 766+ 8561             >len_NFA         defl    $ - temp_NFA
 766+ 8561             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 766+ 855C             >
 766+ 855C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 766+ 855D 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 766+ 8561 2D          >
 766+ 8562             >                org     $-1                 // alter last byte of Name just above to set
 766+ 8561 AD          >                db      {b $} | END_BIT     // msb as name end
 766+ 8562             >
 766+ 8562 F1 84       >                dw      last_NFA            // Link to previous definition Name
 766+ 8564             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 766+ 8564 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 766+ 8567             >
 766+ 8567             >
 766+ 8567             >                endif           ; ok        // for other definitions it "points" the correct handler
 766+ 8567             >                // Use of "; ok" to suppress "warning[fwdref]"
 766+ 8567             >
 766+ 8567             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 767+ 8567 04 6E E3 6A                  dw      SOURCE_ID, STORE
 768+ 856B              Load_N_Begin:
 769+ 856B C5 6C D8 6A                  dw          TIB, FETCH
 770+ 856F 57 6A A5 63                  dw          DUP, LIT, 80
 770+ 8573 50 00
 771+ 8575 AC 6A 79 73                  dw          TWO_DUP, BLANKS
 772+ 8579 04 6E D8 6A                  dw          SOURCE_ID, FETCH
 773+ 857D 57 79 57 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 773+ 8581 ED 7A E3 6A
 774+ 8585 1D 7B                        dw          SELECT
 775+ 8587 FB 84                        dw          ACCEPT_N
 776+ 8589 E2 84                        dw          VIDEO
 777+ 858B 90 6A                        dw          TWO_DROP
 778+ 858D 27 6C 3B 6D                  dw          ZERO, BLK, STORE
 778+ 8591 E3 6A
 779+ 8593 27 6C 45 6D                  dw          ZERO, TO_IN, STORE
 779+ 8597 E3 6A
 780+ 8599 6E 77                        dw          INTERPRET
 781+ 859B EB 66                        dw          QTERMINAL
 782+ 859D D8 63                        dw      ZBRANCH
 783+ 859F CC FF                        dw      Load_N_Begin - $
 784+ 85A1 F4 68                        dw      EXIT
 785+ 85A3
 786+ 85A3              //  ______________________________________________________________________
 787+ 85A3              //
 788+ 85A3              // load         n --
 789+ 85A3              // if n is positive, it loads screen #n (as usual)
 790+ 85A3              // if n is negative, it connects stream #n to the normal INTERPRET
 791+ 85A3              // this second way is useful if you want to load any kind of file
 792+ 85A3              // provied that it is OPEN# the usual BASIC way.
 793+ 85A3                              Colon_Def LOAD, "LOAD", is_normal
 793+ 85A3             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 793+ 85A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 793+ 85A3             >
 793+ 85A3             >                // dummy db directives used to calculate length of namec
 793+ 85A3 4C 4F 41 44 >                db      "LOAD"
 793+ 85A7             >len_NFA         defl    $ - temp_NFA
 793+ 85A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 793+ 85A3             >
 793+ 85A3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 793+ 85A4 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 793+ 85A8             >                org     $-1                 // alter last byte of Name just above to set
 793+ 85A7 C4          >                db      {b $} | END_BIT     // msb as name end
 793+ 85A8             >
 793+ 85A8 5C 85       >                dw      last_NFA            // Link to previous definition Name
 793+ 85AA             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 793+ 85AA CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 793+ 85AD             >
 793+ 85AD             >
 793+ 85AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 793+ 85AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 793+ 85AD             >
 793+ 85AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 794+ 85AD 57 6A 6B 69                  dw      DUP, ZLESS
 795+ 85B1 D8 63                        dw      ZBRANCH
 796+ 85B3 08 00                        dw      Load_Else - $
 797+ 85B5 64 85                        dw          LOAD_N
 798+ 85B7 C3 63                        dw      BRANCH
 799+ 85B9 04 00                        dw      Load_Endif - $
 800+ 85BB              Load_Else:
 801+ 85BB 6D 81                        dw          LOAD_P
 802+ 85BD              Load_Endif:
 803+ 85BD F4 68                        dw      EXIT
 804+ 85BF
 805+ 85BF
 806+ 85BF              //  ______________________________________________________________________
 807+ 85BF              //
 808+ 85BF              // autoexec     --
 809+ 85BF              // this word is called the first time the Forth system boot to
 810+ 85BF              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 811+ 85BF                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 811+ 85BF             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 811+ 85BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 811+ 85BF             >
 811+ 85BF             >                // dummy db directives used to calculate length of namec
 811+ 85BF 41 55 54 4F >                db      "AUTOEXEC"
 811+ 85C3 45 58 45 43 >
 811+ 85C7             >len_NFA         defl    $ - temp_NFA
 811+ 85C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 811+ 85BF             >
 811+ 85BF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 811+ 85C0 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 811+ 85C4 45 58 45 43 >
 811+ 85C8             >                org     $-1                 // alter last byte of Name just above to set
 811+ 85C7 C3          >                db      {b $} | END_BIT     // msb as name end
 811+ 85C8             >
 811+ 85C8 A3 85       >                dw      last_NFA            // Link to previous definition Name
 811+ 85CA             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 811+ 85CA CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 811+ 85CD             >
 811+ 85CD             >
 811+ 85CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 811+ 85CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 811+ 85CD             >
 811+ 85CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 812+ 85CD A5 63 0B 00                  dw      LIT, 11
 813+ 85D1 A5 63 D4 6B                  dw      LIT, NOOP
 814+ 85D5 A5 63 84 78                  dw      LIT, Autoexec_Ptr
 815+ 85D9 E3 6A                        dw      STORE
 816+ 85DB AA 85                        dw      LOAD
 817+ 85DD 33 78                        dw      QUIT
 818+ 85DF F4 68                        dw      EXIT
 819+ 85E1
 820+ 85E1
 821+ 85E1              //  ______________________________________________________________________
 822+ 85E1              //
 823+ 85E1              // bye     --
 824+ 85E1              //
 825+ 85E1                              Colon_Def BYE, "BYE", is_normal
 825+ 85E1             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 825+ 85E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 825+ 85E1             >
 825+ 85E1             >                // dummy db directives used to calculate length of namec
 825+ 85E1 42 59 45    >                db      "BYE"
 825+ 85E4             >len_NFA         defl    $ - temp_NFA
 825+ 85E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 825+ 85E1             >
 825+ 85E1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 825+ 85E2 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 825+ 85E5             >                org     $-1                 // alter last byte of Name just above to set
 825+ 85E4 C5          >                db      {b $} | END_BIT     // msb as name end
 825+ 85E5             >
 825+ 85E5 BF 85       >                dw      last_NFA            // Link to previous definition Name
 825+ 85E7             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 825+ 85E7 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 825+ 85EA             >
 825+ 85EA             >
 825+ 85EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 825+ 85EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 825+ 85EA             >
 825+ 85EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 826+ 85EA FC 7D                        dw      FLUSH
 827+ 85EC 2B 7D                        dw      EMPTY_BUFFERS
 828+ 85EE C5 7B D8 6A                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 828+ 85F2 2C 67 2A 6A
 829+ 85F6 27 6C 97 6C                  dw      ZERO, PLUS_ORIGIN
 830+ 85FA 1C 79                        dw      BASIC
 831+ 85FC
 832+ 85FC              //  ______________________________________________________________________
 833+ 85FC              //
 834+ 85FC              // invv     --
 835+ 85FC              //
 836+ 85FC              //              Colon_Def INVV, "INVV", is_normal
 837+ 85FC              //              dw      LIT, 20, EMITC, ONE, EMITC
 838+ 85FC              //              dw      EXIT
 839+ 85FC
 840+ 85FC              //  ______________________________________________________________________
 841+ 85FC              //
 842+ 85FC              // truv     --
 843+ 85FC              //
 844+ 85FC              //              Colon_Def TRUV, "TRUV", is_normal
 845+ 85FC              //              dw      LIT, 20, EMITC, ZERO, EMITC
 846+ 85FC              //              dw      EXIT
 847+ 85FC
 848+ 85FC              //  ______________________________________________________________________
 849+ 85FC              //
 850+ 85FC              // mark     --
 851+ 85FC              //
 852+ 85FC              //              Colon_Def MARK, "MARK", is_normal
 853+ 85FC              //              dw      INVV, TYPE, TRUV
 854+ 85FC              //              dw      EXIT
 855+ 85FC
 856+ 85FC              //  ______________________________________________________________________
 857+ 85FC              //
 858+ 85FC              // back     --
 859+ 85FC              //
 860+ 85FC                              Colon_Def BACK, "BACK", is_normal
 860+ 85FC             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 860+ 85FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ 85FC             >
 860+ 85FC             >                // dummy db directives used to calculate length of namec
 860+ 85FC 42 41 43 4B >                db      "BACK"
 860+ 8600             >len_NFA         defl    $ - temp_NFA
 860+ 8600             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ 85FC             >
 860+ 85FC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ 85FD 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 860+ 8601             >                org     $-1                 // alter last byte of Name just above to set
 860+ 8600 CB          >                db      {b $} | END_BIT     // msb as name end
 860+ 8601             >
 860+ 8601 E1 85       >                dw      last_NFA            // Link to previous definition Name
 860+ 8603             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 8603 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 8606             >
 860+ 8606             >
 860+ 8606             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 8606             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 8606             >
 860+ 8606             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 8606 31 6E 86 6E                  dw      HERE, SUBTRACT, COMMA
 861+ 860A 4F 6E
 862+ 860C F4 68                        dw      EXIT
 863+ 860E
 864+ 860E              //  ______________________________________________________________________
 865+ 860E              //
 866+ 860E              // if          ( -- a 2 ) \ compile-time
 867+ 860E              // IF ... THEN
 868+ 860E              // IF ... ELSE ... ENDIF
 869+ 860E                              Colon_Def IF, "IF", is_immediate
 869+ 860E             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 869+ 860E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 869+ 860E             >
 869+ 860E             >                // dummy db directives used to calculate length of namec
 869+ 860E 49 46       >                db      "IF"
 869+ 8610             >len_NFA         defl    $ - temp_NFA
 869+ 8610             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 869+ 860E             >
 869+ 860E C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 869+ 860F 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 869+ 8611             >                org     $-1                 // alter last byte of Name just above to set
 869+ 8610 C6          >                db      {b $} | END_BIT     // msb as name end
 869+ 8611             >
 869+ 8611 FC 85       >                dw      last_NFA            // Link to previous definition Name
 869+ 8613             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 869+ 8613 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 869+ 8616             >
 869+ 8616             >
 869+ 8616             >                endif           ; ok        // for other definitions it "points" the correct handler
 869+ 8616             >                // Use of "; ok" to suppress "warning[fwdref]"
 869+ 8616             >
 869+ 8616             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 870+ 8616 A4 70 D8 63                  dw      COMPILE, ZBRANCH
 871+ 861A 31 6E 27 6C                  dw      HERE, ZERO, COMMA
 871+ 861E 4F 6E
 872+ 8620 39 6C                        dw      TWO
 873+ 8622 F4 68                        dw      EXIT
 874+ 8624
 875+ 8624              //  ______________________________________________________________________
 876+ 8624              //
 877+ 8624              // endif        ( a 2 -- ) \ compile-time
 878+ 8624              //
 879+ 8624                              Colon_Def ENDIF, "ENDIF", is_immediate
 879+ 8624             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 879+ 8624             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 879+ 8624             >
 879+ 8624             >                // dummy db directives used to calculate length of namec
 879+ 8624 45 4E 44 49 >                db      "ENDIF"
 879+ 8628 46          >
 879+ 8629             >len_NFA         defl    $ - temp_NFA
 879+ 8629             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 879+ 8624             >
 879+ 8624 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 879+ 8625 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 879+ 8629 46          >
 879+ 862A             >                org     $-1                 // alter last byte of Name just above to set
 879+ 8629 C6          >                db      {b $} | END_BIT     // msb as name end
 879+ 862A             >
 879+ 862A 0E 86       >                dw      last_NFA            // Link to previous definition Name
 879+ 862C             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 879+ 862C CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 879+ 862F             >
 879+ 862F             >
 879+ 862F             >                endif           ; ok        // for other definitions it "points" the correct handler
 879+ 862F             >                // Use of "; ok" to suppress "warning[fwdref]"
 879+ 862F             >
 879+ 862F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 880+ 862F 26 70                        dw      QCOMP
 881+ 8631 39 6C 57 70                  dw      TWO, QPAIRS
 882+ 8635 31 6E 1C 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 882+ 8639 86 6E 4C 6A
 882+ 863D E3 6A
 883+ 863F F4 68                        dw      EXIT
 884+ 8641
 885+ 8641              //  ______________________________________________________________________
 886+ 8641              //
 887+ 8641              // then        ( a 2 -- ) \ compile-time
 888+ 8641              //
 889+ 8641                              Colon_Def THEN, "THEN", is_immediate
 889+ 8641             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 889+ 8641             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ 8641             >
 889+ 8641             >                // dummy db directives used to calculate length of namec
 889+ 8641 54 48 45 4E >                db      "THEN"
 889+ 8645             >len_NFA         defl    $ - temp_NFA
 889+ 8645             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ 8641             >
 889+ 8641 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ 8642 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 889+ 8646             >                org     $-1                 // alter last byte of Name just above to set
 889+ 8645 CE          >                db      {b $} | END_BIT     // msb as name end
 889+ 8646             >
 889+ 8646 24 86       >                dw      last_NFA            // Link to previous definition Name
 889+ 8648             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 8648 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 889+ 864B             >
 889+ 864B             >
 889+ 864B             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 864B             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 864B             >
 889+ 864B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 864B 2C 86                        dw      ENDIF
 891+ 864D F4 68                        dw      EXIT
 892+ 864F
 893+ 864F              //  ______________________________________________________________________
 894+ 864F              //
 895+ 864F              // else        ( a1 2 -- a2 2 ) \ compile-time
 896+ 864F              //
 897+ 864F                              Colon_Def ELSE, "ELSE", is_immediate
 897+ 864F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 897+ 864F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ 864F             >
 897+ 864F             >                // dummy db directives used to calculate length of namec
 897+ 864F 45 4C 53 45 >                db      "ELSE"
 897+ 8653             >len_NFA         defl    $ - temp_NFA
 897+ 8653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ 864F             >
 897+ 864F C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ 8650 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 897+ 8654             >                org     $-1                 // alter last byte of Name just above to set
 897+ 8653 C5          >                db      {b $} | END_BIT     // msb as name end
 897+ 8654             >
 897+ 8654 41 86       >                dw      last_NFA            // Link to previous definition Name
 897+ 8656             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 8656 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 8659             >
 897+ 8659             >
 897+ 8659             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 8659             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 8659             >
 897+ 8659             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 8659 26 70                        dw      QCOMP
 899+ 865B 39 6C 57 70                  dw      TWO, QPAIRS
 900+ 865F A4 70 C3 63                  dw      COMPILE, BRANCH
 901+ 8663 31 6E 27 6C                  dw      HERE, ZERO, COMMA
 901+ 8667 4F 6E
 902+ 8669 4C 6A 39 6C                  dw      SWAP, TWO, ENDIF
 902+ 866D 2C 86
 903+ 866F 39 6C                        dw      TWO
 904+ 8671 F4 68                        dw      EXIT
 905+ 8673
 906+ 8673              //  ______________________________________________________________________
 907+ 8673              //
 908+ 8673              // begin        ( -- a 1 ) \ compile-time
 909+ 8673              // BEGIN ... AGAIN
 910+ 8673              // BEGIN ... f UNTIL
 911+ 8673              // BEGIN ... f WHILE ... REPEAT
 912+ 8673                              Colon_Def BEGIN, "BEGIN", is_immediate
 912+ 8673             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 912+ 8673             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ 8673             >
 912+ 8673             >                // dummy db directives used to calculate length of namec
 912+ 8673 42 45 47 49 >                db      "BEGIN"
 912+ 8677 4E          >
 912+ 8678             >len_NFA         defl    $ - temp_NFA
 912+ 8678             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ 8673             >
 912+ 8673 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ 8674 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 912+ 8678 4E          >
 912+ 8679             >                org     $-1                 // alter last byte of Name just above to set
 912+ 8678 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ 8679             >
 912+ 8679 4F 86       >                dw      last_NFA            // Link to previous definition Name
 912+ 867B             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 867B CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 867E             >
 912+ 867E             >
 912+ 867E             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 867E             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 867E             >
 912+ 867E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 867E 26 70                        dw      QCOMP
 914+ 8680 31 6E                        dw      HERE
 915+ 8682 30 6C                        dw      ONE
 916+ 8684 F4 68                        dw      EXIT
 917+ 8686
 918+ 8686              //  ______________________________________________________________________
 919+ 8686              //
 920+ 8686              // again        ( a 1 -- ) \ compile-time
 921+ 8686                              Colon_Def AGAIN, "AGAIN", is_immediate
 921+ 8686             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 921+ 8686             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 8686             >
 921+ 8686             >                // dummy db directives used to calculate length of namec
 921+ 8686 41 47 41 49 >                db      "AGAIN"
 921+ 868A 4E          >
 921+ 868B             >len_NFA         defl    $ - temp_NFA
 921+ 868B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 8686             >
 921+ 8686 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 8687 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 921+ 868B 4E          >
 921+ 868C             >                org     $-1                 // alter last byte of Name just above to set
 921+ 868B CE          >                db      {b $} | END_BIT     // msb as name end
 921+ 868C             >
 921+ 868C 73 86       >                dw      last_NFA            // Link to previous definition Name
 921+ 868E             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 868E CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 8691             >
 921+ 8691             >
 921+ 8691             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 8691             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 8691             >
 921+ 8691             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 8691 26 70                        dw      QCOMP
 923+ 8693 30 6C 57 70                  dw      ONE, QPAIRS
 924+ 8697 A4 70 C3 63                  dw      COMPILE, BRANCH
 925+ 869B 03 86                        dw      BACK
 926+ 869D F4 68                        dw      EXIT
 927+ 869F
 928+ 869F              //  ______________________________________________________________________
 929+ 869F              //
 930+ 869F              // until        ( a 1 -- ) \ compile-time
 931+ 869F                              Colon_Def UNTIL, "UNTIL", is_immediate
 931+ 869F             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 931+ 869F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 869F             >
 931+ 869F             >                // dummy db directives used to calculate length of namec
 931+ 869F 55 4E 54 49 >                db      "UNTIL"
 931+ 86A3 4C          >
 931+ 86A4             >len_NFA         defl    $ - temp_NFA
 931+ 86A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 869F             >
 931+ 869F C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 86A0 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 931+ 86A4 4C          >
 931+ 86A5             >                org     $-1                 // alter last byte of Name just above to set
 931+ 86A4 CC          >                db      {b $} | END_BIT     // msb as name end
 931+ 86A5             >
 931+ 86A5 86 86       >                dw      last_NFA            // Link to previous definition Name
 931+ 86A7             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 86A7 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 86AA             >
 931+ 86AA             >
 931+ 86AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 86AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 86AA             >
 931+ 86AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 86AA 26 70                        dw      QCOMP
 933+ 86AC 30 6C 57 70                  dw      ONE, QPAIRS
 934+ 86B0 A4 70 D8 63                  dw      COMPILE, ZBRANCH
 935+ 86B4 03 86                        dw      BACK
 936+ 86B6 F4 68                        dw      EXIT
 937+ 86B8
 938+ 86B8              //  ______________________________________________________________________
 939+ 86B8              //
 940+ 86B8              // end          ( a 1 -- ) \ compile-time
 941+ 86B8                              Colon_Def END, "END", is_immediate
 941+ 86B8             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 941+ 86B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 941+ 86B8             >
 941+ 86B8             >                // dummy db directives used to calculate length of namec
 941+ 86B8 45 4E 44    >                db      "END"
 941+ 86BB             >len_NFA         defl    $ - temp_NFA
 941+ 86BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 941+ 86B8             >
 941+ 86B8 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 941+ 86B9 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 941+ 86BC             >                org     $-1                 // alter last byte of Name just above to set
 941+ 86BB C4          >                db      {b $} | END_BIT     // msb as name end
 941+ 86BC             >
 941+ 86BC 9F 86       >                dw      last_NFA            // Link to previous definition Name
 941+ 86BE             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 941+ 86BE CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 941+ 86C1             >
 941+ 86C1             >
 941+ 86C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 941+ 86C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 941+ 86C1             >
 941+ 86C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 942+ 86C1 A7 86                        dw      UNTIL
 943+ 86C3 F4 68                        dw      EXIT
 944+ 86C5
 945+ 86C5              //  ______________________________________________________________________
 946+ 86C5              //
 947+ 86C5              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 948+ 86C5                              Colon_Def WHILE, "WHILE", is_immediate
 948+ 86C5             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 948+ 86C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 86C5             >
 948+ 86C5             >                // dummy db directives used to calculate length of namec
 948+ 86C5 57 48 49 4C >                db      "WHILE"
 948+ 86C9 45          >
 948+ 86CA             >len_NFA         defl    $ - temp_NFA
 948+ 86CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 86C5             >
 948+ 86C5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 86C6 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 948+ 86CA 45          >
 948+ 86CB             >                org     $-1                 // alter last byte of Name just above to set
 948+ 86CA C5          >                db      {b $} | END_BIT     // msb as name end
 948+ 86CB             >
 948+ 86CB B8 86       >                dw      last_NFA            // Link to previous definition Name
 948+ 86CD             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 86CD CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 86D0             >
 948+ 86D0             >
 948+ 86D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 86D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 86D0             >
 948+ 86D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 86D0 13 86                        dw      IF
 950+ 86D2 C0 69                        dw      TWO_PLUS // ( that is 4 )
 951+ 86D4 F4 68                        dw      EXIT
 952+ 86D6
 953+ 86D6              //  ______________________________________________________________________
 954+ 86D6              //
 955+ 86D6              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 956+ 86D6                              Colon_Def REPEAT, "REPEAT", is_immediate
 956+ 86D6             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 956+ 86D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ 86D6             >
 956+ 86D6             >                // dummy db directives used to calculate length of namec
 956+ 86D6 52 45 50 45 >                db      "REPEAT"
 956+ 86DA 41 54       >
 956+ 86DC             >len_NFA         defl    $ - temp_NFA
 956+ 86DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ 86D6             >
 956+ 86D6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ 86D7 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 956+ 86DB 41 54       >
 956+ 86DD             >                org     $-1                 // alter last byte of Name just above to set
 956+ 86DC D4          >                db      {b $} | END_BIT     // msb as name end
 956+ 86DD             >
 956+ 86DD C5 86       >                dw      last_NFA            // Link to previous definition Name
 956+ 86DF             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 86DF CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 956+ 86E2             >
 956+ 86E2             >
 956+ 86E2             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 86E2             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 86E2             >
 956+ 86E2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 86E2 9C 6A                        dw      TWO_SWAP
 958+ 86E4 8E 86                        dw      AGAIN
 959+ 86E6 E4 69                        dw      TWO_MINUS
 960+ 86E8 2C 86                        dw      ENDIF
 961+ 86EA F4 68                        dw      EXIT
 962+ 86EC
 963+ 86EC              //  ______________________________________________________________________
 964+ 86EC              //
 965+ 86EC              // ?do-
 966+ 86EC              // special version of "BACK" used by ?DO and LOOP
 967+ 86EC                              Colon_Def C_DO_BACK, "?DO-", is_normal
 967+ 86EC             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 967+ 86EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 967+ 86EC             >
 967+ 86EC             >                // dummy db directives used to calculate length of namec
 967+ 86EC 3F 44 4F 2D >                db      "?DO-"
 967+ 86F0             >len_NFA         defl    $ - temp_NFA
 967+ 86F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 967+ 86EC             >
 967+ 86EC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 967+ 86ED 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 967+ 86F1             >                org     $-1                 // alter last byte of Name just above to set
 967+ 86F0 AD          >                db      {b $} | END_BIT     // msb as name end
 967+ 86F1             >
 967+ 86F1 D6 86       >                dw      last_NFA            // Link to previous definition Name
 967+ 86F3             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 967+ 86F3 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 967+ 86F6             >
 967+ 86F6             >
 967+ 86F6             >                endif           ; ok        // for other definitions it "points" the correct handler
 967+ 86F6             >                // Use of "; ok" to suppress "warning[fwdref]"
 967+ 86F6             >
 967+ 86F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 968+ 86F6 03 86                        dw      BACK
 969+ 86F8              CDoBack_Begin:
 970+ 86F8 C4 68 B7 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 970+ 86FC D8 6A 86 6E
 971+ 8700 D8 63                        dw      ZBRANCH
 972+ 8702 0A 00                        dw      CDoBack_While - $
 973+ 8704 C0 69 2C 86                  dw          TWO_PLUS, ENDIF
 974+ 8708 C3 63                        dw      BRANCH
 975+ 870A EE FF                        dw      CDoBack_Begin - $
 976+ 870C              CDoBack_While:
 977+ 870C 6B 70 B7 6D                  dw      QCSP, CSP, STORE
 977+ 8710 E3 6A
 978+ 8712 F4 68                        dw      EXIT
 979+ 8714
 980+ 8714              //  ______________________________________________________________________
 981+ 8714              //
 982+ 8714              // do
 983+ 8714              // DO  ... LOOP
 984+ 8714              // DO  ... n +LOOP
 985+ 8714              // ?DO ... LOOP
 986+ 8714              // ?DO ... n +LOOP
 987+ 8714                              Colon_Def DO, "DO", is_immediate
 987+ 8714             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 987+ 8714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ 8714             >
 987+ 8714             >                // dummy db directives used to calculate length of namec
 987+ 8714 44 4F       >                db      "DO"
 987+ 8716             >len_NFA         defl    $ - temp_NFA
 987+ 8716             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ 8714             >
 987+ 8714 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ 8715 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 987+ 8717             >                org     $-1                 // alter last byte of Name just above to set
 987+ 8716 CF          >                db      {b $} | END_BIT     // msb as name end
 987+ 8717             >
 987+ 8717 EC 86       >                dw      last_NFA            // Link to previous definition Name
 987+ 8719             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 8719 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 871C             >
 987+ 871C             >
 987+ 871C             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 871C             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 871C             >
 987+ 871C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 871C A4 70 58 64                  dw      COMPILE, C_DO
 989+ 8720 B7 6D D8 6A                  dw      CSP, FETCH, STORE_CSP
 989+ 8724 F7 6F
 990+ 8726 31 6E 42 6C                  dw      HERE, THREE
 991+ 872A F4 68                        dw      EXIT
 992+ 872C
 993+ 872C              //  ______________________________________________________________________
 994+ 872C              //
 995+ 872C              // loop
 996+ 872C                              Colon_Def LOOP, "LOOP", is_immediate
 996+ 872C             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 996+ 872C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ 872C             >
 996+ 872C             >                // dummy db directives used to calculate length of namec
 996+ 872C 4C 4F 4F 50 >                db      "LOOP"
 996+ 8730             >len_NFA         defl    $ - temp_NFA
 996+ 8730             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ 872C             >
 996+ 872C C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ 872D 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 996+ 8731             >                org     $-1                 // alter last byte of Name just above to set
 996+ 8730 D0          >                db      {b $} | END_BIT     // msb as name end
 996+ 8731             >
 996+ 8731 14 87       >                dw      last_NFA            // Link to previous definition Name
 996+ 8733             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 8733 CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 8736             >
 996+ 8736             >
 996+ 8736             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 8736             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 8736             >
 996+ 8736             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 8736 42 6C 57 70                  dw      THREE, QPAIRS
 998+ 873A A4 70 EB 63                  dw      COMPILE, C_LOOP
 999+ 873E F3 86                        dw      C_DO_BACK
1000+ 8740 F4 68                        dw      EXIT
1001+ 8742
1002+ 8742              //  ______________________________________________________________________
1003+ 8742              //
1004+ 8742              // +loop
1005+ 8742                              Colon_Def PLOOP, "+LOOP", is_immediate
1005+ 8742             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1005+ 8742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ 8742             >
1005+ 8742             >                // dummy db directives used to calculate length of namec
1005+ 8742 2B 4C 4F 4F >                db      "+LOOP"
1005+ 8746 50          >
1005+ 8747             >len_NFA         defl    $ - temp_NFA
1005+ 8747             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ 8742             >
1005+ 8742 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ 8743 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1005+ 8747 50          >
1005+ 8748             >                org     $-1                 // alter last byte of Name just above to set
1005+ 8747 D0          >                db      {b $} | END_BIT     // msb as name end
1005+ 8748             >
1005+ 8748 2C 87       >                dw      last_NFA            // Link to previous definition Name
1005+ 874A             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 874A CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 874D             >
1005+ 874D             >
1005+ 874D             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 874D             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 874D             >
1005+ 874D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 874D 42 6C 57 70                  dw      THREE, QPAIRS
1007+ 8751 A4 70 20 64                  dw      COMPILE, C_PLOOP
1008+ 8755 F3 86                        dw      C_DO_BACK
1009+ 8757 F4 68                        dw      EXIT
1010+ 8759
1011+ 8759              //  ______________________________________________________________________
1012+ 8759              //
1013+ 8759              // ?do
1014+ 8759                              Colon_Def QDO, "?DO", is_immediate
1014+ 8759             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1014+ 8759             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1014+ 8759             >
1014+ 8759             >                // dummy db directives used to calculate length of namec
1014+ 8759 3F 44 4F    >                db      "?DO"
1014+ 875C             >len_NFA         defl    $ - temp_NFA
1014+ 875C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1014+ 8759             >
1014+ 8759 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1014+ 875A 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1014+ 875D             >                org     $-1                 // alter last byte of Name just above to set
1014+ 875C CF          >                db      {b $} | END_BIT     // msb as name end
1014+ 875D             >
1014+ 875D 42 87       >                dw      last_NFA            // Link to previous definition Name
1014+ 875F             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1014+ 875F CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1014+ 8762             >
1014+ 8762             >
1014+ 8762             >                endif           ; ok        // for other definitions it "points" the correct handler
1014+ 8762             >                // Use of "; ok" to suppress "warning[fwdref]"
1014+ 8762             >
1014+ 8762             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1015+ 8762 A4 70 2C 64                  dw      COMPILE, C_Q_DO
1016+ 8766 B7 6D D8 6A                  dw      CSP, FETCH, STORE_CSP
1016+ 876A F7 6F
1017+ 876C 31 6E 27 6C                  dw      HERE, ZERO, COMMA, ZERO
1017+ 8770 4F 6E 27 6C
1018+ 8774 31 6E 42 6C                  dw      HERE, THREE
1019+ 8778 F4 68                        dw      EXIT
1020+ 877A
1021+ 877A              Latest_Definition:
1022+ 877A              //  ______________________________________________________________________
1023+ 877A              //
1024+ 877A              // \
1025+ 877A                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1025+ 877A             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1025+ 877A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1025+ 877A             >
1025+ 877A             >                // dummy db directives used to calculate length of namec
1025+ 877A 5C          >                db      "\\"
1025+ 877B             >len_NFA         defl    $ - temp_NFA
1025+ 877B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1025+ 877A             >
1025+ 877A C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1025+ 877B 5C          >                db      "\\"               // name string in 7-bit ascii, but
1025+ 877C             >                org     $-1                 // alter last byte of Name just above to set
1025+ 877B DC          >                db      {b $} | END_BIT     // msb as name end
1025+ 877C             >
1025+ 877C 59 87       >                dw      last_NFA            // Link to previous definition Name
1025+ 877E             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1025+ 877E CD AD 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1025+ 8781             >
1025+ 8781             >
1025+ 8781             >                endif           ; ok        // for other definitions it "points" the correct handler
1025+ 8781             >                // Use of "; ok" to suppress "warning[fwdref]"
1025+ 8781             >
1025+ 8781             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1026+ 8781 3B 6D D8 6A                  dw      BLK, FETCH
1027+ 8785 D8 63                        dw      ZBRANCH
1028+ 8787 30 00                        dw      Backslash_Else_1 - $
1029+ 8789 3B 6D D8 6A                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1029+ 878D 30 6C CC 6E
1030+ 8791 D8 63                        dw          ZBRANCH
1031+ 8793 18 00                        dw          Backslash_Else_2 - $
1032+ 8795 45 6D D8 6A                  dw              TO_IN, FETCH, CL, MOD, CL
1032+ 8799 61 6C 47 7A
1032+ 879D 61 6C
1033+ 879F 4C 6A 86 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1033+ 87A3 45 6D B9 6A
1034+ 87A7 C3 63                        dw          BRANCH
1035+ 87A9 0A 00                        dw          Backslash_Endif_2 - $
1036+ 87AB              Backslash_Else_2:
1037+ 87AB 6E 6C D9 69                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1037+ 87AF 45 6D E3 6A
1038+ 87B3              Backslash_Endif_2:
1039+ 87B3 C3 63                        dw      BRANCH
1040+ 87B5 0A 00                        dw      Backslash_Endif_1 - $
1041+ 87B7              Backslash_Else_1:
1042+ 87B7 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1042+ 87BB 45 6D E3 6A
1043+ 87BF              Backslash_Endif_1:
1044+ 87BF F4 68                        dw      EXIT
1045+ 87C1
1046+ 87C1              Fence_Word:
1047+ 87C1              //  ______________________________________________________________________
1048+ 87C1              //
1049+ 87C1
1050+ 87C1 00           Here_Dictionary db      0
1051+ 87C2
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  87C2
 116  87C2              // now we save the compiled file so we can either run it or debug it
 117  87C2                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  87C2                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  87C2                              SAVENEX CFG  0
 120  87C2                              SAVENEX BANK 2, 0
 121  87C2                              SAVENEX AUTO
 122  87C2                              SAVENEX CLOSE
 123  87C2
 124  87C2              //              PAGE 7 ;set 7 page to current slot
 125  87C2              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  87C2              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  87C2
 128  87C2                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  87C2
 130  87C2                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  87C2
 132  87C2                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
