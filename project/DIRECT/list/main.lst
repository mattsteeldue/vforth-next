# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.6 NextZXOS version
   7  0000              //  build 20220227
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 1A 79                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 1A 79                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 4C 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 93 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 93 87        DP_origin       dw      Fence_Word
  39+ 6386 22 78        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB
 169+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 170+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 171+ 63DF 3F                               ccf
 172+ 63E0              Loop_NegativeIncrement:
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 11 04 00                     ld      de, 4
 239+ 6435 19                           add     hl, de
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- addr 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502                                                              // de has dictionary pointer
 423+ 6502 D1                               pop     de
 424+ 6503              Find_VocabularyLoop:
 425+ 6503 E1                               pop     hl                  // string pointer to search for
 426+ 6504 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6505 1A                               ld      a, (de)             // save NFA length byte
 428+ 6506 08                               ex      af,af'              // for later use (!)
 429+ 6507 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6508 AE                               xor     (hl)                // check if same length
 431+ 6509 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650B                                  // word an text haven't the same length, skip to next vocabulary entry
 433+ 650B 20 2C                            jr      nz, Find_DifferentLenght
 434+ 650D
 435+ 650D              Find_ThisWord:  // begin loop
 436+ 650D 23                                   inc     hl
 437+ 650E 13                                   inc     de
 438+ 650F 1A                                   ld      a, (de)
 439+ 6510                                      // case insensitive option - begin
 440+ 6510 C5                                   push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521 C1                                   pop     bc
 452+ 6522                                      // case insensitive option - end
 453+ 6522 87                                   add     a                   // ignore msb during compare
 454+ 6523 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6525
 456+ 6525                                  // loop back until last byte msb is found set
 457+ 6525                                  // that bit marks the ending char of this word
 458+ 6525 30 E6                            jr      nc, Find_ThisWord
 459+ 6527
 460+ 6527                                  // match found !
 461+ 6527 21 03 00                             ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 652A 19                                   add     hl, de
 463+ 652B E3                                   ex      (sp), hl            // CFA on stack and drop addr
 464+ 652C 08                                   ex      af, af'             // retrieve NFA byte (!)
 465+ 652D 5F                                   ld      e, a
 466+ 652E 16 00                                ld      d, 0
 467+ 6530
 468+ 6530
 469+ 6530 21 01 00                             ld      hl, 1
 470+ 6533                                      psh2
 470+ 6533 D5          >                push    de
 470+ 6534 E5          >                push    hl
 470+ 6535 DD E9       >                jp      (ix)
 471+ 6537
 472+ 6537              Find_DidntMatch: // didn't match (*)
 473+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 6539
 475+ 6539              Find_DifferentLenght:
 476+ 6539                              // consume chars until the end of the word
 477+ 6539                              // that is last byte msb is found set
 478+ 6539 13                               inc     de
 479+ 653A 1A                               ld      a, (de)
 480+ 653B 87                               add     a, a
 481+ 653C 30 FB                        jr      nc, Find_DifferentLenght
 482+ 653E
 483+ 653E              Find_WordEnd:   // word-end  found (**)
 484+ 653E                              // take LFA and use it
 485+ 653E 13                           inc     de
 486+ 653F EB                           ex      de, hl
 487+ 6540 5E                           ld      e, (hl)
 488+ 6541 23                           inc     hl
 489+ 6542 56                           ld      d, (hl)
 490+ 6543 7A                           ld      a, d
 491+ 6544 B3                           or      e
 492+ 6545
 493+ 6545                          // loop until end of vocabulary
 494+ 6545 20 BC                    jr      nz, Find_VocabularyLoop
 495+ 6547
 496+ 6547 E1                       pop     hl              // with this, it leaves addr unchanged
 497+ 6548 21 00 00                 ld      hl, FALSE_FLAG
 498+ 654B
 499+ 654B                          psh1
 499+ 654B E5          >                push    hl
 499+ 654C DD E9       >                jp      (ix)
 500+ 654E
 501+ 654E              //  ______________________________________________________________________
 502+ 654E              //
 503+ 654E              // enclose      a c -- a  n1 n2 n3
 504+ 654E              // starting from a, using delimiter c, determines the offsets:
 505+ 654E              //   n1   the first character non-delimiter
 506+ 654E              //   n2   the first delimiter after the text
 507+ 654E              //   n3   the first character non enclosed.
 508+ 654E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 509+ 654E              // an uncoditional delimiter.
 510+ 654E              // Examples:
 511+ 654E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 512+ 654E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 513+ 654E              // iii:	c  c  'nul'          -- 2  3  2
 514+ 654E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 514+ 654E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 654E             >
 514+ 654E             >                // dummy db directives used to calculate length of namec
 514+ 654E 45 4E 43 4C >                db      "ENCLOSE"
 514+ 6552 4F 53 45    >
 514+ 6555             >len_NFA         defl    $ - temp_NFA
 514+ 6555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 654E             >
 514+ 654E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 654F 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 514+ 6553 4F 53 45    >
 514+ 6556             >                org     $-1                 // alter last byte of Name just above to set
 514+ 6555 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ 6556             >
 514+ 6556 F9 64       >                dw      last_NFA            // Link to previous definition Name
 514+ 6558             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 514+ 6558 ~           >
 514+ 6558 ~           >
 514+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 6558             >
 514+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 6558 D1                           pop     de                  //  e has the character
 516+ 6559 E1                           pop     hl                  // hl has the string address
 517+ 655A E5                           push    hl
 518+ 655B 7B                           ld      a, e
 519+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 520+ 655F 2B                           dec     hl
 521+ 6560              Enclose_NonDelimiter:
 522+ 6560                              // find first non delimiter
 523+ 6560 23                               inc     hl
 524+ 6561 13                               inc     de
 525+ 6562 BE                               cp      (hl)
 526+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 527+ 6565 D5                           push    de
 528+ 6566
 529+ 6566 C5                           push    bc                  // save Instruction Pointer
 530+ 6567
 531+ 6567 4F                           ld      c, a                // save char
 532+ 6568 7E                           ld      a, (hl)
 533+ 6569 A7                           and     a                   // stop if 0x00
 534+ 656A 20 07                        jr      nz, Enclose_NextChar
 535+ 656C
 536+ 656C                              /// case iii. no more character in string
 537+ 656C C1                               pop     bc                  // restore Instruction Pointer
 538+ 656D 13                               inc     de
 539+ 656E D5                               push    de
 540+ 656F 1B                               dec     de
 541+ 6570 D5                               push    de
 542+ 6571                                  next
 542+ 6571 DD E9       >                jp      (ix)
 543+ 6573              Enclose_NextChar:
 544+ 6573 79                               ld      a, c
 545+ 6574 23                               inc     hl
 546+ 6575 13                               inc     de
 547+ 6576 BE                               cp      (hl)
 548+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 549+ 6579
 550+ 6579                                      // case i. first non enclosed
 551+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 552+ 657A D5                                   push    de
 553+ 657B 13                                   inc     de
 554+ 657C D5                                   push    de
 555+ 657D                                      next
 555+ 657D DD E9       >                jp      (ix)
 556+ 657F              Enclose_NonSeparator:
 557+ 657F 7E                               ld      a, (hl)
 558+ 6580 A7                               and     a
 559+ 6581 20 F0                        jr      nz, Enclose_NextChar
 560+ 6583
 561+ 6583                              // case ii. separator & terminator
 562+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 563+ 6584 D5                           push    de
 564+ 6585 D5                           push    de
 565+ 6586                              next
 565+ 6586 DD E9       >                jp      (ix)
 566+ 6588
 567+ 6588              //  ______________________________________________________________________
 568+ 6588              //
 569+ 6588              // (map)        a2 a1 n c1 -- c2
 570+ 6588              // translate character c1 using mapping string a2 and a2
 571+ 6588              // if c1 is not present within string a1 then
 572+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 573+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 573+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 6588             >
 573+ 6588             >                // dummy db directives used to calculate length of namec
 573+ 6588 28 4D 41 50 >                db      "(MAP)"
 573+ 658C 29          >
 573+ 658D             >len_NFA         defl    $ - temp_NFA
 573+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 6588             >
 573+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 573+ 658D 29          >
 573+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 573+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 573+ 658E             >
 573+ 658E 4E 65       >                dw      last_NFA            // Link to previous definition Name
 573+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 6590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 573+ 6590 ~           >
 573+ 6590 ~           >
 573+ 6590             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 6590             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 6590             >
 573+ 6590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 6590 D9                           exx
 575+ 6591 E1                           pop     hl
 576+ 6592 7D                           ld      a, l
 577+ 6593 C1                           pop     bc
 578+ 6594 E1                           pop     hl
 579+ 6595 50                           ld      d, b
 580+ 6596 59                           ld      e, c
 581+ 6597 ED B1                        cpir
 582+ 6599 E1                           pop     hl
 583+ 659A 20 05                        jr      nz, C_Map_Then
 583+ 659C
 584+ 659C 19                               add     hl, de
 585+ 659D 2B                               dec     hl
 586+ 659E ED 42                            sbc     hl, bc
 587+ 65A0 7E                               ld      a, (hl)
 588+ 65A1              C_Map_Then:
 589+ 65A1 6F                           ld      l, a
 590+ 65A2 26 00                        ld      h, 0
 591+ 65A4 E5                           push    hl
 592+ 65A5 D9                           exx
 593+ 65A6                              next
 593+ 65A6 DD E9       >                jp      (ix)
 594+ 65A8
 595+ 65A8              //  ______________________________________________________________________
 596+ 65A8              //
 597+ 65A8              // (compare)    a1 a2 n -- b
 598+ 65A8              // this word performs a lexicographic compare of n bytes of text at address a1
 599+ 65A8              // with n bytes of text at address a2. It returns numeric a value:
 600+ 65A8              //  0 : if strings are equal
 601+ 65A8              // +1 : if string at a1 greater than string at a2
 602+ 65A8              // -1 : if string at a1 less than string at a2
 603+ 65A8              // strings can be 256 bytes in length at most.
 604+ 65A8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 604+ 65A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 65A8             >
 604+ 65A8             >                // dummy db directives used to calculate length of namec
 604+ 65A8 28 43 4F 4D >                db      "(COMPARE)"
 604+ 65AC 50 41 52 45 >
 604+ 65B0 29          >
 604+ 65B1             >len_NFA         defl    $ - temp_NFA
 604+ 65B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 65A8             >
 604+ 65A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 65A9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 604+ 65AD 50 41 52 45 >
 604+ 65B1 29          >
 604+ 65B2             >                org     $-1                 // alter last byte of Name just above to set
 604+ 65B1 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 65B2             >
 604+ 65B2 88 65       >                dw      last_NFA            // Link to previous definition Name
 604+ 65B4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 65B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 604+ 65B4 ~           >
 604+ 65B4 ~           >
 604+ 65B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 65B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 65B4             >
 604+ 65B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 65B4 D9                           exx
 606+ 65B5 E1                           pop     hl                  // Number of bytes
 607+ 65B6 7D                           ld      a, l
 608+ 65B7 E1                           pop     hl                  // hl points string a2
 609+ 65B8 D1                           pop     de                  // hl points string a1
 610+ 65B9              //              push    bc                  // Instruction pointer on stack
 611+ 65B9 47                           ld      b, a
 612+ 65BA              C_Compare_Loop:
 613+ 65BA 7E                               ld      a, (hl)
 614+ 65BB CD BD 64                         call    Case_Sensitive
 615+ 65BE 4F                               ld      c, a
 616+ 65BF 1A                               ld      a, (de)
 617+ 65C0 CD BD 64                         call    Case_Sensitive
 618+ 65C3 B9                               cp      c
 619+ 65C4 13                               inc     de
 620+ 65C5 23                               inc     hl
 621+ 65C6 28 0E                            jr      z, C_Compare_Equal
 622+ 65C8 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 623+ 65CA 21 01 00                                 ld      hl, 1               // a1 gt a2
 624+ 65CD 18 03                                jr      C_Compare_Then      // Else
 625+ 65CF              C_Compare_NotLessThan:
 626+ 65CF 21 FF FF                                 ld      hl, -1              // a1 lt a2
 627+ 65D2              C_Compare_Then:                                 // Endif
 628+ 65D2              //                      pop     bc              // restore Instruction Pointer
 629+ 65D2 E5                                   push    hl
 630+ 65D3 D9                                   exx
 631+ 65D4
 632+ 65D4                                      next
 632+ 65D4 DD E9       >                jp      (ix)
 633+ 65D6
 634+ 65D6              C_Compare_Equal:
 635+ 65D6 10 E2                        djnz    C_Compare_Loop
 636+ 65D8 21 00 00                     ld      hl, 0               // a1 eq a2
 637+ 65DB              //              pop     bc                  // restore Instruction Pointer
 638+ 65DB E5                           push    hl
 639+ 65DC D9                           exx
 640+ 65DD
 641+ 65DD                              next
 641+ 65DD DD E9       >                jp      (ix)
 642+ 65DF
 643+ 65DF              //  ______________________________________________________________________
 644+ 65DF              //
 645+ 65DF              // emitc        c --
 646+ 65DF              // low level emit, calls ROM routine at #10 to send a character to
 647+ 65DF              // the the current channel (see SELECT to change stream-channel)
 648+ 65DF                              New_Def EMITC, "EMITC", is_code, is_normal
 648+ 65DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 65DF             >
 648+ 65DF             >                // dummy db directives used to calculate length of namec
 648+ 65DF 45 4D 49 54 >                db      "EMITC"
 648+ 65E3 43          >
 648+ 65E4             >len_NFA         defl    $ - temp_NFA
 648+ 65E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 65DF             >
 648+ 65DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 65E0 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 648+ 65E4 43          >
 648+ 65E5             >                org     $-1                 // alter last byte of Name just above to set
 648+ 65E4 C3          >                db      {b $} | END_BIT     // msb as name end
 648+ 65E5             >
 648+ 65E5 A8 65       >                dw      last_NFA            // Link to previous definition Name
 648+ 65E7             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 65E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 648+ 65E7 ~           >
 648+ 65E7 ~           >
 648+ 65E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 65E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 65E7             >
 648+ 65E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 65E7 E1                           pop     hl
 650+ 65E8 7D                           ld      a, l
 651+ 65E9              Emitc_Ptr:
 652+ 65E9 C5                           push    bc
 653+ 65EA DD E5                        push    ix
 654+ 65EC D7                           rst     $10
 655+ 65ED DD E1                        pop     ix
 656+ 65EF C1                           pop     bc
 657+ 65F0 3E FF                        ld      a, 255            // max possible
 658+ 65F2 32 8C 5C                     ld      (SCR_CT), a
 659+ 65F5
 660+ 65F5                              next
 660+ 65F5 DD E9       >                jp      (ix)
 661+ 65F7
 662+ 65F7              //  ______________________________________________________________________
 663+ 65F7              //
 664+ 65F7              // cr           --
 665+ 65F7              // send a CR via EMITC
 666+ 65F7                              New_Def CR, "CR", is_code, is_normal
 666+ 65F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 65F7             >
 666+ 65F7             >                // dummy db directives used to calculate length of namec
 666+ 65F7 43 52       >                db      "CR"
 666+ 65F9             >len_NFA         defl    $ - temp_NFA
 666+ 65F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 65F7             >
 666+ 65F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 65F8 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 666+ 65FA             >                org     $-1                 // alter last byte of Name just above to set
 666+ 65F9 D2          >                db      {b $} | END_BIT     // msb as name end
 666+ 65FA             >
 666+ 65FA DF 65       >                dw      last_NFA            // Link to previous definition Name
 666+ 65FC             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 65FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 666+ 65FC ~           >
 666+ 65FC ~           >
 666+ 65FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 65FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 65FC             >
 666+ 65FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 65FC
 668+ 65FC 3E 0D                        ld      a, CR_CHAR
 669+ 65FE 18 E9                        jr      Emitc_Ptr
 670+ 6600
 671+ 6600              Emitc_Vec:
 672+ 6600 43 66                        dw      C_Emit_Printable  // comma
 673+ 6602 49 66                        dw      C_Emit_Bel        // bel
 674+ 6604 43 66                        dw      C_Emit_Printable  // bs
 675+ 6606 5E 66                        dw      C_Emit_Tab        // tab
 676+ 6608 43 66                        dw      C_Emit_Printable  // cr
 677+ 660A 64 66                        dw      C_Emit_NL         // lf (unix newline)
 678+ 660C 43 66                        dw      C_Emit_Printable  // blank
 679+ 660E 43 66                        dw      C_Emit_Printable  // blank
 680+ 6610
 681+ 6610              Emit_Selector_Start:
 682+ 6610 06                           db      $06                 // comma
 683+ 6611 07                           db      $07                 // bel
 684+ 6612 08                           db      $08                 // bs
 685+ 6613 09                           db      $09                 // tab
 686+ 6614 0D                           db      $0D                 // cr
 687+ 6615 0A                           db      $0A                 // lf (unix newline)
 688+ 6616 20                           db      $20
 689+ 6617              Emit_Selector_End:
 690+ 6617 20                           db      $20
 691+ 6618
 692+ 6618              //  ______________________________________________________________________
 693+ 6618              //
 694+ 6618              // (?emit)      c1 -- c2 | c1
 695+ 6618              // decode a character to be sent via EMIT
 696+ 6618              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 697+ 6618              // the routine should resolve anything and convert the character anyway.
 698+ 6618                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 698+ 6618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 6618             >
 698+ 6618             >                // dummy db directives used to calculate length of namec
 698+ 6618 28 3F 45 4D >                db      "(?EMIT)"
 698+ 661C 49 54 29    >
 698+ 661F             >len_NFA         defl    $ - temp_NFA
 698+ 661F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 6618             >
 698+ 6618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 6619 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 698+ 661D 49 54 29    >
 698+ 6620             >                org     $-1                 // alter last byte of Name just above to set
 698+ 661F A9          >                db      {b $} | END_BIT     // msb as name end
 698+ 6620             >
 698+ 6620 F7 65       >                dw      last_NFA            // Link to previous definition Name
 698+ 6622             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 6622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 698+ 6622 ~           >
 698+ 6622 ~           >
 698+ 6622             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 6622             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 6622             >
 698+ 6622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 6622 D1                           pop     de
 700+ 6623 7B                           ld      a, e                //  de has c1
 701+ 6624 E6 7F                        and     $7F                 // 7-bit ascii only
 702+ 6626 C5                           push    bc                  // save Instruction Pointer
 703+ 6627 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 704+ 662A 21 17 66                     ld      hl, Emit_Selector_End
 705+ 662D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 706+ 662F 20 0B                        jr      nz, C_Emit_Not_Found
 707+ 6631                                  // Found then decode it
 708+ 6631 21 00 66                         ld      hl, Emitc_Vec
 709+ 6634 09                               add     hl, bc
 710+ 6635 09                               add     hl, bc
 711+ 6636 5E                               ld      e, (hl)
 712+ 6637 23                               inc     hl
 713+ 6638 56                               ld      d, (hl)
 714+ 6639 EB                               ex      de, hl
 715+ 663A C1                               pop     bc                  // restore Instruction Pointer
 716+ 663B E9                               jp      (hl)                // one of the following labels
 717+ 663C              C_Emit_Not_Found:
 718+ 663C C1                           pop     bc                  // restore Instruction Pointer
 719+ 663D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 720+ 663F 30 02                        jr      nc, C_Emit_Printable
 721+ 6641 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 722+ 6643              C_Emit_Printable:
 723+ 6643 6F                           ld      l, a
 724+ 6644 26 00                        ld      h, 0
 725+ 6646
 726+ 6646                              psh1
 726+ 6646 E5          >                push    hl
 726+ 6647 DD E9       >                jp      (ix)
 727+ 6649
 728+ 6649              C_Emit_Bel:
 729+ 6649 C5                           push    bc                  // save Instruction Pointer
 730+ 664A 11 00 01                     ld      de, $0100
 731+ 664D 21 00 02                     ld      hl, $0200
 732+ 6650 DD E5                        push    ix                  // save Next Pointer
 733+ 6652 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 734+ 6655 DD E1                        pop     ix                  // restore Next Pointer
 735+ 6657 C1                           pop     bc                  // restore Instruction Pointer
 736+ 6658 21 00 00                     ld      hl, NUL_CHAR
 737+ 665B
 738+ 665B                              psh1
 738+ 665B E5          >                push    hl
 738+ 665C DD E9       >                jp      (ix)
 739+ 665E
 740+ 665E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 741+ 6661
 742+ 6661                              psh1
 742+ 6661 E5          >                push    hl
 742+ 6662 DD E9       >                jp      (ix)
 743+ 6664
 744+ 6664 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 745+ 6667
 746+ 6667                              psh1
 746+ 6667 E5          >                push    hl
 746+ 6668 DD E9       >                jp      (ix)
 747+ 666A
 748+ 666A              //  ______________________________________________________________________
 749+ 666A
 750+ 666A              Key_Table:
 751+ 666A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 752+ 666B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 753+ 666C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 754+ 666D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 755+ 666E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 756+ 666F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 757+ 6670 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 758+ 6671 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 759+ 6672 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 760+ 6673 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 761+ 6674 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 762+ 6675              Key_MapTo:
 763+ 6675 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 764+ 6676 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 765+ 6677 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 766+ 6678 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 767+ 6679 5D                           db      $5D                 //  6: SYMBOL+U : ]
 768+ 667A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 769+ 667B 7D                           db      $7D                 //  4: SYMBOL+G : }
 770+ 667C 7B                           db      $7B                 //  3: SYMBOL+F : {
 771+ 667D 5C                           db      $5C                 //  2: SYMBOl+D : //
 772+ 667E 7C                           db      $7C                 //  1: SYMBOL+S : |
 773+ 667F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 774+ 6680
 775+ 6680              //  ______________________________________________________________________
 776+ 6680              //
 777+ 6680              // key          -- c
 778+ 6680              // wait for a keypress
 779+ 6680              // This definition need Standard ROM Interrupt to be served
 780+ 6680
 781+ 6680                              New_Def KEY, "KEY", is_code, is_normal
 781+ 6680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 6680             >
 781+ 6680             >                // dummy db directives used to calculate length of namec
 781+ 6680 4B 45 59    >                db      "KEY"
 781+ 6683             >len_NFA         defl    $ - temp_NFA
 781+ 6683             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 6680             >
 781+ 6680 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 6681 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 781+ 6684             >                org     $-1                 // alter last byte of Name just above to set
 781+ 6683 D9          >                db      {b $} | END_BIT     // msb as name end
 781+ 6684             >
 781+ 6684 18 66       >                dw      last_NFA            // Link to previous definition Name
 781+ 6686             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 6686 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 781+ 6686 ~           >
 781+ 6686 ~           >
 781+ 6686             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 6686             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 6686             >
 781+ 6686             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 6686
 783+ 6686 C5                           push    bc                  // save Instruction Pointer
 784+ 6687 DD E5                        push    ix
 785+ 6689
 786+ 6689 ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 787+ 668D 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 788+ 6690 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 789+ 6694
 790+ 6694              Key_Wait:
 791+ 6694 76                               halt
 792+ 6695 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 793+ 6697 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 794+ 669A
 795+ 669A                                  // software-flash: flips face every 320 ms
 796+ 669A 3E 10                            ld      a, $10              // Timing based
 797+ 669C FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 798+ 669F
 799+ 669F 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 800+ 66A2 20 0C                            jr      nz, Key_Cursor
 801+ 66A4 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 802+ 66A7 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 803+ 66AB 28 03                                jr      z, Key_Cursor
 804+ 66AD 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 805+ 66B0              Key_Cursor:
 806+ 66B0 D7                               rst     $10
 807+ 66B1 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 808+ 66B3 D7                               rst     $10
 809+ 66B4
 810+ 66B4 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 811+ 66B8 28 DA                        jr      z, Key_Wait
 812+ 66BA
 813+ 66BA 76                           halt    // this is to sync flashing cursor.
 814+ 66BB
 815+ 66BB 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 816+ 66BD D7                           rst     $10
 817+ 66BE 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 818+ 66C0 D7                           rst     $10
 819+ 66C1 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 820+ 66C4
 821+ 66C4                              // decode character from above table
 822+ 66C4 21 6A 66                     ld      hl, Key_Table
 823+ 66C7 01 0B 00                     ld      bc, $000B
 824+ 66CA ED B1                        cpir
 825+ 66CC 20 05                        jr      nz, Key_DontMap
 826+ 66CE 21 75 66                         ld      hl, Key_MapTo
 827+ 66D1 09                               add     hl, bc
 828+ 66D2 7E                               ld      a, (hl)
 829+ 66D3 FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 830+ 66D5 20 09                        jr      nz, Key_NoCapsLock
 831+ 66D7 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 832+ 66DA 7E                               ld      a, (hl)
 833+ 66DB EE 08                            xor     $08
 834+ 66DD 77                               ld      (hl), a
 835+ 66DE 3E 00                            ld      a, NUL_CHAR
 836+ 66E0 6F           Key_NoCapsLock: ld      l, a
 837+ 66E1 26 00                        ld      h, 0                // Prepare TOS
 838+ 66E3
 839+ 66E3 3A 48 5C                     ld      a, ($5C48)          // BORDCR system variable
 840+ 66E6 1F                           rra
 841+ 66E7 1F                           rra
 842+ 66E8 1F                           rra
 843+ 66E9 F6 18                        or      $18                 // quick'n'dirty click
 844+ 66EB D3 FE                        out     ($fe), a
 845+ 66ED 06 00                        ld      b, 0
 846+ 66EF 10 FE                        djnz    $                   // wait loop
 847+ 66F1 EE 18                        xor     $18
 848+ 66F3 D3 FE                        out     ($fe), a
 849+ 66F5
 850+ 66F5 ED 7B 92 63                  ld      sp, (SP_Saved)
 851+ 66F9
 852+ 66F9 DD E1                        pop     ix
 853+ 66FB C1                           pop     bc                  // Restore Instruction Pointer
 854+ 66FC
 855+ 66FC                              psh1
 855+ 66FC E5          >                push    hl
 855+ 66FD DD E9       >                jp      (ix)
 856+ 66FF
 857+ 66FF              //  ______________________________________________________________________
 858+ 66FF              //
 859+ 66FF              // ?terminal    -- FALSE | TRUE
 860+ 66FF              // test for BREAK keypress
 861+ 66FF                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 861+ 66FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 861+ 66FF             >
 861+ 66FF             >                // dummy db directives used to calculate length of namec
 861+ 66FF 3F 54 45 52 >                db      "?TERMINAL"
 861+ 6703 4D 49 4E 41 >
 861+ 6707 4C          >
 861+ 6708             >len_NFA         defl    $ - temp_NFA
 861+ 6708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 861+ 66FF             >
 861+ 66FF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 861+ 6700 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 861+ 6704 4D 49 4E 41 >
 861+ 6708 4C          >
 861+ 6709             >                org     $-1                 // alter last byte of Name just above to set
 861+ 6708 CC          >                db      {b $} | END_BIT     // msb as name end
 861+ 6709             >
 861+ 6709 80 66       >                dw      last_NFA            // Link to previous definition Name
 861+ 670B             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 861+ 670B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 861+ 670B ~           >
 861+ 670B ~           >
 861+ 670B             >                endif           ; ok        // for other definitions it "points" the correct handler
 861+ 670B             >                // Use of "; ok" to suppress "warning[fwdref]"
 861+ 670B             >
 861+ 670B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 862+ 670B 21 00 00                     ld      hl, 0
 863+ 670E ED 73 92 63                  ld      (SP_Saved), sp
 864+ 6712 31 61 63                     ld      sp, Cold_origin - 5
 865+ 6715 CD 54 1F                     call    $1F54
 866+ 6718 ED 7B 92 63                  ld      sp, (SP_Saved)
 867+ 671C
 868+ 671C 38 01                        jr      c, QTerminal_NoBreak
 869+ 671E 2B                               dec     hl                  // quick TRUE_FLAG
 870+ 671F              QTerminal_NoBreak:
 871+ 671F
 872+ 671F                              psh1
 872+ 671F E5          >                push    hl
 872+ 6720 DD E9       >                jp      (ix)
 873+ 6722
 874+ 6722
 875+ 6722              //  ______________________________________________________________________
 876+ 6722              //
 877+ 6722              // inkey        -- c | 0
 878+ 6722              // call ROM inkey$ routine, returns c or "zero".
 879+ 6722
 880+ 6722                              New_Def INKEY, "INKEY", is_code, is_normal
 880+ 6722             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ 6722             >
 880+ 6722             >                // dummy db directives used to calculate length of namec
 880+ 6722 49 4E 4B 45 >                db      "INKEY"
 880+ 6726 59          >
 880+ 6727             >len_NFA         defl    $ - temp_NFA
 880+ 6727             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ 6722             >
 880+ 6722 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ 6723 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 880+ 6727 59          >
 880+ 6728             >                org     $-1                 // alter last byte of Name just above to set
 880+ 6727 D9          >                db      {b $} | END_BIT     // msb as name end
 880+ 6728             >
 880+ 6728 FF 66       >                dw      last_NFA            // Link to previous definition Name
 880+ 672A             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 672A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 880+ 672A ~           >
 880+ 672A ~           >
 880+ 672A             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 672A             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 672A             >
 880+ 672A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 672A
 882+ 672A C5                           push    bc
 883+ 672B ED 73 92 63                  ld      (SP_Saved), sp
 884+ 672F 31 61 63                     ld      sp, Cold_origin - 5
 885+ 6732 DD E5                        push    ix
 886+ 6734 CD E6 15                     call    $15E6                   // instead of 15E9
 887+ 6737 DD E1                        pop     ix
 888+ 6739 ED 7B 92 63                  ld      sp, (SP_Saved)
 889+ 673D 6F                           ld      l, a
 890+ 673E 26 00                        ld      h, 0
 891+ 6740 C1                           pop     bc
 892+ 6741                              psh1
 892+ 6741 E5          >                push    hl
 892+ 6742 DD E9       >                jp      (ix)
 893+ 6744
 894+ 6744              //  ______________________________________________________________________
 895+ 6744              //
 896+ 6744              // select      n --
 897+ 6744              // selects the given channel number
 898+ 6744
 899+ 6744                              New_Def SELECT, "SELECT", is_code, is_normal
 899+ 6744             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 6744             >
 899+ 6744             >                // dummy db directives used to calculate length of namec
 899+ 6744 53 45 4C 45 >                db      "SELECT"
 899+ 6748 43 54       >
 899+ 674A             >len_NFA         defl    $ - temp_NFA
 899+ 674A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 6744             >
 899+ 6744 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 6745 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 899+ 6749 43 54       >
 899+ 674B             >                org     $-1                 // alter last byte of Name just above to set
 899+ 674A D4          >                db      {b $} | END_BIT     // msb as name end
 899+ 674B             >
 899+ 674B 22 67       >                dw      last_NFA            // Link to previous definition Name
 899+ 674D             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 674D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 899+ 674D ~           >
 899+ 674D ~           >
 899+ 674D             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 674D             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 674D             >
 899+ 674D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 674D E1                           pop     hl
 901+ 674E C5                           push    bc
 902+ 674F 7D                           ld      a, l
 903+ 6750 ED 73 92 63                  ld      (SP_Saved), sp
 904+ 6754 31 61 63                     ld      sp, Cold_origin - 5
 905+ 6757 DD E5                        push    ix
 906+ 6759 CD 01 16                     call    $1601
 907+ 675C DD E1                        pop     ix
 908+ 675E ED 7B 92 63                  ld      sp, (SP_Saved)
 909+ 6762 C1                           pop     bc
 910+ 6763
 911+ 6763                              next
 911+ 6763 DD E9       >                jp      (ix)
 912+ 6765
 913+ 6765              //  ______________________________________________________________________
 914+ 6765              //
 915+ 6765              // ZX Spectrum Next - Low Level disk primitives.
 916+ 6765              // this include is "here" for backward compatibility
 917+ 6765
 918+ 6765                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6765              //  ______________________________________________________________________
   2++6765              //
   3++6765              //  next-opt.asm
   4++6765              //
   5++6765              //  ZX Spectrum Next - peculiar definitions
   6++6765              //  ______________________________________________________________________
   7++6765
   8++6765              //  ______________________________________________________________________
   9++6765              //
  10++6765              // f_seek       d u -- f
  11++6765              // Seek to position d in file-handle u.
  12++6765              // Return a false-flag 0 on success, True flag on error
  13++6765                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6765             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6765             >
  13++6765             >                // dummy db directives used to calculate length of namec
  13++6765 46 5F 53 45 >                db      "F_SEEK"
  13++6769 45 4B       >
  13++676B             >len_NFA         defl    $ - temp_NFA
  13++676B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6765             >
  13++6765 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6766 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++676A 45 4B       >
  13++676C             >                org     $-1                 // alter last byte of Name just above to set
  13++676B CB          >                db      {b $} | END_BIT     // msb as name end
  13++676C             >
  13++676C 44 67       >                dw      last_NFA            // Link to previous definition Name
  13++676E             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++676E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++676E ~           >
  13++676E ~           >
  13++676E             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++676E             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++676E             >
  13++676E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++676E E1                           pop     hl                  // file-handle
  15++676F 7D                           ld      a, l                // file-handle
  16++6770 60                           ld      h, b                // save Intruction Pointer
  17++6771 69                           ld      l, c
  18++6772 C1                           pop     bc                  // bc has high-word of d
  19++6773 D1                           pop     de
  20++6774 DD E5                        push    ix
  21++6776 E5                           push    hl                  // save Instruction Pointer
  22++6777 DD 21 00 00                  ld      ix, 0
  23++677B CF                           rst     $08
  24++677C 9F                           db      $9F
  25++677D              F_Seek_Exit:
  26++677D C1                           pop     bc                  // restore Instruction Pointer
  27++677E DD E1                        pop     ix
  28++6780 ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6782
  30++6782                              psh1
  30++6782 E5          >                push    hl
  30++6783 DD E9       >                jp      (ix)
  31++6785
  32++6785              //  ______________________________________________________________________
  33++6785              //
  34++6785              // f_close      u -- f
  35++6785              // Close file-handle u.
  36++6785              // Return 0 on success, True flag on error
  37++6785
  38++6785                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6785             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6785             >
  38++6785             >                // dummy db directives used to calculate length of namec
  38++6785 46 5F 43 4C >                db      "F_CLOSE"
  38++6789 4F 53 45    >
  38++678C             >len_NFA         defl    $ - temp_NFA
  38++678C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6785             >
  38++6785 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6786 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++678A 4F 53 45    >
  38++678D             >                org     $-1                 // alter last byte of Name just above to set
  38++678C C5          >                db      {b $} | END_BIT     // msb as name end
  38++678D             >
  38++678D 65 67       >                dw      last_NFA            // Link to previous definition Name
  38++678F             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++678F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++678F ~           >
  38++678F ~           >
  38++678F             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++678F             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++678F             >
  38++678F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++678F
  40++678F E1                           pop     hl
  41++6790 7D                           ld      a, l                // file-handle
  42++6791 DD E5                        push    ix
  43++6793 C5                           push    bc                  // Save Instruction pointer
  44++6794 CF                           rst     $08
  45++6795 9B                           db      $9B
  46++6796 18 E5                        jr      F_Seek_Exit
  47++6798              //              pop     bc
  48++6798              //              pop     ix
  49++6798              //              sbc     hl, hl
  50++6798              //              psh1
  51++6798
  52++6798              //  ______________________________________________________________________
  53++6798              //
  54++6798              // f_sync      u -- f
  55++6798              // Close file-handle u.
  56++6798              // Return 0 on success, True flag on error
  57++6798
  58++6798                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6798             >
  58++6798             >                // dummy db directives used to calculate length of namec
  58++6798 46 5F 53 59 >                db      "F_SYNC"
  58++679C 4E 43       >
  58++679E             >len_NFA         defl    $ - temp_NFA
  58++679E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6798             >
  58++6798 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6799 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++679D 4E 43       >
  58++679F             >                org     $-1                 // alter last byte of Name just above to set
  58++679E C3          >                db      {b $} | END_BIT     // msb as name end
  58++679F             >
  58++679F 85 67       >                dw      last_NFA            // Link to previous definition Name
  58++67A1             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++67A1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++67A1 ~           >
  58++67A1 ~           >
  58++67A1             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++67A1             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++67A1             >
  58++67A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++67A1 E1                           pop     hl
  60++67A2 7D                           ld      a, l                // file-handle
  61++67A3 DD E5                        push    ix
  62++67A5 C5                           push    bc
  63++67A6 CF                           rst     $08
  64++67A7 9C                           db      $9C
  65++67A8 18 D3                        jr      F_Seek_Exit
  66++67AA              //              pop     bc
  67++67AA              //              pop     ix
  68++67AA              //              sbc     hl, hl
  69++67AA              //              psh1
  70++67AA
  71++67AA              //  ______________________________________________________________________
  72++67AA              //
  73++67AA              // f_fgetpos    u -- d f
  74++67AA              // Seek to position d in file-handle u.
  75++67AA              // Return a false-flag 0 on success, True flag on error
  76++67AA                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67AA             >
  76++67AA             >                // dummy db directives used to calculate length of namec
  76++67AA 46 5F 46 47 >                db      "F_FGETPOS"
  76++67AE 45 54 50 4F >
  76++67B2 53          >
  76++67B3             >len_NFA         defl    $ - temp_NFA
  76++67B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67AA             >
  76++67AA 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67AB 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67AF 45 54 50 4F >
  76++67B3 53          >
  76++67B4             >                org     $-1                 // alter last byte of Name just above to set
  76++67B3 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67B4             >
  76++67B4 98 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B6             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B6 ~           >
  76++67B6 ~           >
  76++67B6             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B6             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B6             >
  76++67B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B6 E1                           pop     hl
  78++67B7 7D                           ld      a, l                // file-handle
  79++67B8 DD E5                        push    ix
  80++67BA C5                           push    bc
  81++67BB CF                           rst     $08
  82++67BC A0                           db      $A0
  83++67BD E1                           pop     hl                  // restore Instruction Pointer
  84++67BE DD E1                        pop     ix
  85++67C0 D5                           push    de
  86++67C1 C5                           push    bc
  87++67C2 44                           ld      b, h                // restore Instruction Pointer
  88++67C3 4D                           ld      c, l
  89++67C4 ED 62                        sbc     hl, hl
  90++67C6
  91++67C6                              psh1
  91++67C6 E5          >                push    hl
  91++67C7 DD E9       >                jp      (ix)
  92++67C9
  93++67C9              //  ______________________________________________________________________
  94++67C9              //
  95++67C9              // f_read       a b u -- n f
  96++67C9              // Read b bytes from file-handle u to address a
  97++67C9              // Return the actual number n of bytes read
  98++67C9              // Return 0 on success, True flag on error
  99++67C9                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67C9             >
  99++67C9             >                // dummy db directives used to calculate length of namec
  99++67C9 46 5F 52 45 >                db      "F_READ"
  99++67CD 41 44       >
  99++67CF             >len_NFA         defl    $ - temp_NFA
  99++67CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67C9             >
  99++67C9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67CA 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67CE 41 44       >
  99++67D0             >                org     $-1                 // alter last byte of Name just above to set
  99++67CF C4          >                db      {b $} | END_BIT     // msb as name end
  99++67D0             >
  99++67D0 AA 67       >                dw      last_NFA            // Link to previous definition Name
  99++67D2             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67D2 ~           >
  99++67D2 ~           >
  99++67D2             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67D2             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67D2             >
  99++67D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67D2
 101++67D2 50                           ld      d, b
 102++67D3 59                           ld      e, c
 103++67D4 E1                           pop     hl
 104++67D5 7D                           ld      a, l                // file-handle
 105++67D6 C1                           pop     bc                  // bc has bytes to read
 106++67D7 DD E3                        ex      (sp), ix            // ix has address
 107++67D9 D5                           push    de                  // Save Instruction pointer
 108++67DA CF                           rst     $08
 109++67DB 9D                           db      $9D
 110++67DC              F_Read_Exit:
 111++67DC C1                           pop     bc                  // Restore Instruction pointer
 112++67DD DD E1                        pop     ix                  // Restore ix
 113++67DF D5                           push    de                  // bytes written
 114++67E0 ED 62                        sbc     hl, hl
 115++67E2
 116++67E2                              psh1
 116++67E2 E5          >                push    hl
 116++67E3 DD E9       >                jp      (ix)
 117++67E5
 118++67E5              //  ______________________________________________________________________
 119++67E5              //
 120++67E5              // f_write      a b u -- n f
 121++67E5              // Write bytes currently stored at address a to file-handle u.
 122++67E5              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E5                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E5             >
 123++67E5             >                // dummy db directives used to calculate length of namec
 123++67E5 46 5F 57 52 >                db      "F_WRITE"
 123++67E9 49 54 45    >
 123++67EC             >len_NFA         defl    $ - temp_NFA
 123++67EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E5             >
 123++67E5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E6 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67EA 49 54 45    >
 123++67ED             >                org     $-1                 // alter last byte of Name just above to set
 123++67EC C5          >                db      {b $} | END_BIT     // msb as name end
 123++67ED             >
 123++67ED C9 67       >                dw      last_NFA            // Link to previous definition Name
 123++67EF             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67EF ~           >
 123++67EF ~           >
 123++67EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67EF             >
 123++67EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67EF
 125++67EF 50                           ld      d, b
 126++67F0 59                           ld      e, c
 127++67F1 E1                           pop     hl
 128++67F2 7D                           ld      a, l                // file-handle
 129++67F3 C1                           pop     bc                  // bc has bytes to read
 130++67F4 DD E3                        ex      (sp), ix            // ix has address
 131++67F6 D5                           push    de                  // Save Instruction pointer
 132++67F7 CF                           rst     $08
 133++67F8 9E                           db      $9E
 134++67F9 18 E1                        jr F_Read_Exit
 135++67FB              //              pop     bc                  // Restore Instruction pointer
 136++67FB              //              pop     ix                  // Restore ix
 137++67FB              //              push    de                  // bytes written
 138++67FB              //              sbc     hl, hl
 139++67FB              //
 140++67FB              //              psh1
 141++67FB
 142++67FB              //  ______________________________________________________________________
 143++67FB              //
 144++67FB              // f_open       a1 a2 b -- u f
 145++67FB              // open a file
 146++67FB              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67FB              // a2 is address to an 8-byte header data used in some cases.
 148++67FB              // b is access mode-byte, that is a combination of:
 149++67FB              // any/all of:
 150++67FB              //   esx_mode_read          $01 request read access
 151++67FB              //   esx_mode_write         $02 request write access
 152++67FB              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67FB              // plus one of:
 154++67FB              //   esx_mode_open_exist    $00 only open existing file
 155++67FB              //   esx_mode_open_creat    $08 open existing or create file
 156++67FB              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67FB              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67FB              // Return file-handle u and 0 on success, True flag on error
 159++67FB                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67FB             >
 159++67FB             >                // dummy db directives used to calculate length of namec
 159++67FB 46 5F 4F 50 >                db      "F_OPEN"
 159++67FF 45 4E       >
 159++6801             >len_NFA         defl    $ - temp_NFA
 159++6801             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67FB             >
 159++67FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67FC 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++6800 45 4E       >
 159++6802             >                org     $-1                 // alter last byte of Name just above to set
 159++6801 CE          >                db      {b $} | END_BIT     // msb as name end
 159++6802             >
 159++6802 E5 67       >                dw      last_NFA            // Link to previous definition Name
 159++6804             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6804 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++6804 ~           >
 159++6804 ~           >
 159++6804             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6804             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6804             >
 159++6804             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6804 60                           ld      h, b                // Save Instruction pointer
 161++6805 69                           ld      l, c
 162++6806 C1                           pop     bc                  // file-mode
 163++6807 41                           ld      b, c                // file-mode
 164++6808 D1                           pop     de                  // 8-bytes buffer if any
 165++6809 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++680B E5                           push    hl                  // Save Instruction pointer
 167++680C 3E 2A                        ld      a, "*"
 168++680E CF                           rst     $08
 169++680F 9A                           db      $9A
 170++6810              F_Open_Exit:
 171++6810 C1                           pop     bc
 172++6811 DD E1                        pop     ix
 173++6813 ED 62                        sbc     hl, hl
 174++6815 5F                           ld      e, a
 175++6816 16 00                        ld      d, 0
 176++6818
 177++6818
 178++6818                              psh2
 178++6818 D5          >                push    de
 178++6819 E5          >                push    hl
 178++681A DD E9       >                jp      (ix)
 179++681C
 180++681C              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 181++681C              //   \ FILENAME 1+ PAD 1 F_OPEN
 182++681C              //   \ DROP
 183++681C              //   \ F_CLOSE
 184++681C
 185++681C
 186++681C              //  ______________________________________________________________________
 187++681C              //
 188++681C              // f_opendir    a1 a2 b -- u f
 189++681C              // open a file
 190++681C                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 190++681C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++681C             >
 190++681C             >                // dummy db directives used to calculate length of namec
 190++681C 46 5F 4F 50 >                db      "F_OPENDIR"
 190++6820 45 4E 44 49 >
 190++6824 52          >
 190++6825             >len_NFA         defl    $ - temp_NFA
 190++6825             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++681C             >
 190++681C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++681D 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 190++6821 45 4E 44 49 >
 190++6825 52          >
 190++6826             >                org     $-1                 // alter last byte of Name just above to set
 190++6825 D2          >                db      {b $} | END_BIT     // msb as name end
 190++6826             >
 190++6826 FB 67       >                dw      last_NFA            // Link to previous definition Name
 190++6828             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6828 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++6828 ~           >
 190++6828 ~           >
 190++6828             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6828             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6828             >
 190++6828             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6828 DD E3                        ex      (sp), ix            // filespec nul-terminated
 192++682A C5                           push    bc                  // Save Instruction pointer
 193++682B 06 10                        ld      b, $10              // file-mode
 194++682D 3E 43                        ld      a, "C"
 195++682F CF                           rst     $08
 196++6830 A3                           db      $A3
 197++6831 18 DD                        jr      F_Open_Exit
 198++6833
 199++6833
 200++6833              //  ______________________________________________________________________
 201++6833              //
 202++6833              // f_readdir    a1 a2 b -- u f
 203++6833              // open a file
 204++6833                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 204++6833             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204++6833             >
 204++6833             >                // dummy db directives used to calculate length of namec
 204++6833 46 5F 52 45 >                db      "F_READDIR"
 204++6837 41 44 44 49 >
 204++683B 52          >
 204++683C             >len_NFA         defl    $ - temp_NFA
 204++683C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204++6833             >
 204++6833 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204++6834 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 204++6838 41 44 44 49 >
 204++683C 52          >
 204++683D             >                org     $-1                 // alter last byte of Name just above to set
 204++683C D2          >                db      {b $} | END_BIT     // msb as name end
 204++683D             >
 204++683D 1C 68       >                dw      last_NFA            // Link to previous definition Name
 204++683F             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 204++683F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 204++683F ~           >
 204++683F ~           >
 204++683F             >                endif           ; ok        // for other definitions it "points" the correct handler
 204++683F             >                // Use of "; ok" to suppress "warning[fwdref]"
 204++683F             >
 204++683F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205++683F E1                           pop     hl
 206++6840 7D                           ld      a, l
 207++6841 D1                           pop     de
 208++6842 DD E3                        ex      (sp), ix            // filespec nul-terminated
 209++6844 C5                           push    bc                  // Save Instruction pointer
 210++6845 CF                           rst     $08
 211++6846 A4                           db      $A4
 212++6847 18 C7                        jr      F_Open_Exit
 213++6849
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 919+ 6849
 920+ 6849
 921+ 6849              //  ______________________________________________________________________
 922+ 6849              //
 923+ 6849              // cmove    a1 a2 u --
 924+ 6849              // If u > 0, moves memory content starting at address a1 for n bytes long
 925+ 6849              // storing then starting at address addr2.
 926+ 6849              // The content of a1 is moved first. See CMOVE> also.
 927+ 6849                              New_Def CMOVE, "CMOVE", is_code, is_normal
 927+ 6849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 6849             >
 927+ 6849             >                // dummy db directives used to calculate length of namec
 927+ 6849 43 4D 4F 56 >                db      "CMOVE"
 927+ 684D 45          >
 927+ 684E             >len_NFA         defl    $ - temp_NFA
 927+ 684E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 6849             >
 927+ 6849 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 684A 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 927+ 684E 45          >
 927+ 684F             >                org     $-1                 // alter last byte of Name just above to set
 927+ 684E C5          >                db      {b $} | END_BIT     // msb as name end
 927+ 684F             >
 927+ 684F 33 68       >                dw      last_NFA            // Link to previous definition Name
 927+ 6851             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 6851 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 927+ 6851 ~           >
 927+ 6851 ~           >
 927+ 6851             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 6851             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 6851             >
 927+ 6851             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 6851 D9                           exx
 929+ 6852
 930+ 6852 C1                           pop     bc                  // bc has counter
 931+ 6853 D1                           pop     de                  // de now has dest
 932+ 6854 E1                           pop     hl                 // hl has source, save Instruction Pointer
 933+ 6855 78                           ld      a, b
 934+ 6856 B1                           or      c
 935+ 6857 28 02                        jr      z, Cmove_NoMove
 936+ 6859 ED B0                            ldir
 937+ 685B              Cmove_NoMove:
 938+ 685B D9                           exx
 939+ 685C
 940+ 685C                              next
 940+ 685C DD E9       >                jp      (ix)
 941+ 685E
 942+ 685E              //  ______________________________________________________________________
 943+ 685E              //
 944+ 685E              // cmove>    a1 a2 u --
 945+ 685E              // If u > 0, moves memory content starting at address a1 for n bytes long
 946+ 685E              // storing then starting at address addr2.
 947+ 685E              // The content of a1 is moved last. See cmove.
 948+ 685E                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 948+ 685E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 685E             >
 948+ 685E             >                // dummy db directives used to calculate length of namec
 948+ 685E 43 4D 4F 56 >                db      "CMOVE>"
 948+ 6862 45 3E       >
 948+ 6864             >len_NFA         defl    $ - temp_NFA
 948+ 6864             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 685E             >
 948+ 685E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 685F 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 948+ 6863 45 3E       >
 948+ 6865             >                org     $-1                 // alter last byte of Name just above to set
 948+ 6864 BE          >                db      {b $} | END_BIT     // msb as name end
 948+ 6865             >
 948+ 6865 49 68       >                dw      last_NFA            // Link to previous definition Name
 948+ 6867             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 6867 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 948+ 6867 ~           >
 948+ 6867 ~           >
 948+ 6867             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 6867             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 6867             >
 948+ 6867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 6867 D9                           exx
 950+ 6868
 951+ 6868 C1                           pop     bc                  // bc has counter
 952+ 6869 D1                           pop     de                  // de has dest
 953+ 686A E1                           pop     hl                  // hl has source, save Instruction Pointer
 954+ 686B 78                           ld      a, b
 955+ 686C B1                           or      c
 956+ 686D 28 08                        jr      z, CmoveV_NoMove
 957+ 686F EB                               ex      de, hl              // compute address to
 958+ 6870 09                               add     hl, bc              // operate backward
 959+ 6871 2B                               dec     hl
 960+ 6872 EB                               ex      de, hl
 961+ 6873 09                               add     hl, bc
 962+ 6874 2B                               dec     hl
 963+ 6875 ED B8                            lddr                        // backward
 964+ 6877              CmoveV_NoMove:
 965+ 6877 D9                           exx
 966+ 6878
 967+ 6878                              next
 967+ 6878 DD E9       >                jp      (ix)
 968+ 687A
 969+ 687A              //  ______________________________________________________________________
 970+ 687A              //
 971+ 687A              // um*      u1 u2 -- ud
 972+ 687A              // Unsigned multiplication
 973+ 687A              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
 974+ 687A              // On the stack a double number is treated as two single numbers
 975+ 687A              // where DE is on the top of the stack and HL is the second from top,
 976+ 687A              // Instead, in 2VARIABLE a double number is stored as EDLH.
 977+ 687A              // this definition could use "MUL" Z80N new op-code.
 978+ 687A                              New_Def UM_MUL, "UM*", is_code, is_normal
 978+ 687A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ 687A             >
 978+ 687A             >                // dummy db directives used to calculate length of namec
 978+ 687A 55 4D 2A    >                db      "UM*"
 978+ 687D             >len_NFA         defl    $ - temp_NFA
 978+ 687D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ 687A             >
 978+ 687A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ 687B 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
 978+ 687E             >                org     $-1                 // alter last byte of Name just above to set
 978+ 687D AA          >                db      {b $} | END_BIT     // msb as name end
 978+ 687E             >
 978+ 687E 5E 68       >                dw      last_NFA            // Link to previous definition Name
 978+ 6880             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 6880 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 978+ 6880 ~           >
 978+ 6880 ~           >
 978+ 6880             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 6880             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 6880             >
 978+ 6880             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 6880 D9                           exx
 980+ 6881 D1                           pop     de                    // de has u2 operand
 981+ 6882 E1                           pop     hl                    // hl has u1 operand
 982+ 6883 45                           ld      b, l
 983+ 6884 4B                           ld      c, e
 984+ 6885 5D                           ld      e, l
 985+ 6886 6A                           ld      l, d
 986+ 6887 E5                           push    hl
 987+ 6888 69                           ld      l, c
 988+ 6889 ED 30                        mul
 989+ 688B EB                           ex      de, hl
 990+ 688C ED 30                        mul
 991+ 688E AF                           xor     a
 992+ 688F 19                           add     hl, de
 993+ 6890 8F                           adc     a
 994+ 6891 59                           ld      e, c
 995+ 6892 50                           ld      d, b
 996+ 6893 ED 30                        mul
 997+ 6895 47                           ld      b, a
 998+ 6896 4C                           ld      c, h
 999+ 6897 7A                           ld      a, d
1000+ 6898 85                           add     l
1001+ 6899 67                           ld      h, a
1002+ 689A 6B                           ld      l, e
1003+ 689B D1                           pop     de
1004+ 689C ED 30                        mul
1005+ 689E EB                           ex      de, hl
1006+ 689F ED 4A                        adc     hl, bc
1007+ 68A1 D5                           push    de
1008+ 68A2 E5                           push    hl
1009+ 68A3 D9                           exx
1010+ 68A4                              next
1010+ 68A4 DD E9       >                jp      (ix)
1011+ 68A6
1012+ 68A6              //  ______________________________________________________________________
1013+ 68A6              //
1014+ 68A6              // um/mod      ud u1 -- q r
1015+ 68A6              // divides ud into u1 giving quotient q and remainder r
1016+ 68A6              // algorithm takes 16 bit at a time starting from msb
1017+ 68A6              // DE grows from lsb upward with quotient result
1018+ 68A6              // HL keeps the remainder at each stage of division
1019+ 68A6              // each loop 'lowers' the next binary digit to form the current dividend
1020+ 68A6                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1020+ 68A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 68A6             >
1020+ 68A6             >                // dummy db directives used to calculate length of namec
1020+ 68A6 55 4D 2F 4D >                db      "UM/MOD"
1020+ 68AA 4F 44       >
1020+ 68AC             >len_NFA         defl    $ - temp_NFA
1020+ 68AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 68A6             >
1020+ 68A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 68A7 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1020+ 68AB 4F 44       >
1020+ 68AD             >                org     $-1                 // alter last byte of Name just above to set
1020+ 68AC C4          >                db      {b $} | END_BIT     // msb as name end
1020+ 68AD             >
1020+ 68AD 7A 68       >                dw      last_NFA            // Link to previous definition Name
1020+ 68AF             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 68AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1020+ 68AF ~           >
1020+ 68AF ~           >
1020+ 68AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 68AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 68AF             >
1020+ 68AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 68AF D9                           exx
1022+ 68B0 C1                           pop     bc                      // divisor
1023+ 68B1
1024+ 68B1 E1                           pop     hl                      // < high part
1025+ 68B2 D1                           pop     de                      // < low part and
1026+ 68B3
1027+ 68B3 7D                           ld      a, l                    // check without changing arguments
1028+ 68B4 91                           sub     c                       // if divisor is greater than high part
1029+ 68B5 7C                           ld      a, h                    // so quotient will be in range
1030+ 68B6 98                           sbc     a, b
1031+ 68B7 30 20                        jr      nc, Um_DivMod_OutOfRange
1032+ 68B9 3E 10                            ld      a, 16
1033+ 68BB              Um_DivMod_Loop:
1034+ 68BB CB 23                                sla     e
1035+ 68BD CB 12                                rl      d
1036+ 68BF ED 6A                                adc     hl, hl
1037+ 68C1 30 05                                jr      nc, Um_DivMod_Carry
1038+ 68C3 A7                                       and     a
1039+ 68C4 ED 42                                    sbc     hl, bc
1040+ 68C6 18 07                                jr      Um_DivMod_Endif    // else
1041+ 68C8              Um_DivMod_Carry:
1042+ 68C8 A7                                       and     a
1043+ 68C9 ED 42                                    sbc     hl, bc
1044+ 68CB 30 02                                    jr      nc, Um_DivMod_Endif
1045+ 68CD 09                                           add     hl, bc
1046+ 68CE 1B                                           dec     de
1047+ 68CF              Um_DivMod_Endif:                                   // endif
1048+ 68CF 13                                   inc     de
1049+ 68D0 3D                                   dec     a
1050+ 68D1 20 E8                            jr      nz, Um_DivMod_Loop
1051+ 68D3 EB                               ex      de, hl
1052+ 68D4              Um_DivMod_Bailout:
1053+ 68D4 D5                               push    de                  // de := remanider
1054+ 68D5 E5                               push    hl                  // hl := quotient
1055+ 68D6 D9                               exx
1056+ 68D7                                  next
1056+ 68D7 DD E9       >                jp      (ix)
1057+ 68D9
1058+ 68D9              Um_DivMod_OutOfRange:
1059+ 68D9 21 FF FF                     ld      hl, -1
1060+ 68DC 54                           ld      d, h
1061+ 68DD 5D                           ld      e, l
1062+ 68DE 18 F4                        jr      Um_DivMod_Bailout
1063+ 68E0
1064+ 68E0              //  ______________________________________________________________________
1065+ 68E0              //
1066+ 68E0              // and          n1 n2 -- n3
1067+ 68E0              // bit logical AND. Returns n3 as n1 & n2
1068+ 68E0                              New_Def AND_OP, "AND", is_code, is_normal
1068+ 68E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1068+ 68E0             >
1068+ 68E0             >                // dummy db directives used to calculate length of namec
1068+ 68E0 41 4E 44    >                db      "AND"
1068+ 68E3             >len_NFA         defl    $ - temp_NFA
1068+ 68E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1068+ 68E0             >
1068+ 68E0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1068+ 68E1 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1068+ 68E4             >                org     $-1                 // alter last byte of Name just above to set
1068+ 68E3 C4          >                db      {b $} | END_BIT     // msb as name end
1068+ 68E4             >
1068+ 68E4 A6 68       >                dw      last_NFA            // Link to previous definition Name
1068+ 68E6             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1068+ 68E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1068+ 68E6 ~           >
1068+ 68E6 ~           >
1068+ 68E6             >                endif           ; ok        // for other definitions it "points" the correct handler
1068+ 68E6             >                // Use of "; ok" to suppress "warning[fwdref]"
1068+ 68E6             >
1068+ 68E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1069+ 68E6 D1                           pop     de
1070+ 68E7 E1                           pop     hl
1071+ 68E8 7B                           ld      a, e
1072+ 68E9 A5                           and     l
1073+ 68EA 6F                           ld      l, a
1074+ 68EB 7A                           ld      a, d
1075+ 68EC A4                           and     h
1076+ 68ED 67                           ld      h, a
1077+ 68EE
1078+ 68EE                              psh1
1078+ 68EE E5          >                push    hl
1078+ 68EF DD E9       >                jp      (ix)
1079+ 68F1
1080+ 68F1              //  ______________________________________________________________________
1081+ 68F1              //
1082+ 68F1              // or           n1 n2 -- n3
1083+ 68F1              // bit logical OR. Returns n3 as n1 | n2
1084+ 68F1                              New_Def OR_OP, "OR", is_code, is_normal
1084+ 68F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 68F1             >
1084+ 68F1             >                // dummy db directives used to calculate length of namec
1084+ 68F1 4F 52       >                db      "OR"
1084+ 68F3             >len_NFA         defl    $ - temp_NFA
1084+ 68F3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 68F1             >
1084+ 68F1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 68F2 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1084+ 68F4             >                org     $-1                 // alter last byte of Name just above to set
1084+ 68F3 D2          >                db      {b $} | END_BIT     // msb as name end
1084+ 68F4             >
1084+ 68F4 E0 68       >                dw      last_NFA            // Link to previous definition Name
1084+ 68F6             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 68F6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1084+ 68F6 ~           >
1084+ 68F6 ~           >
1084+ 68F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 68F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 68F6             >
1084+ 68F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 68F6 D1                           pop     de
1086+ 68F7 E1                           pop     hl
1087+ 68F8 7B                           ld      a, e
1088+ 68F9 B5                           or      l
1089+ 68FA 6F                           ld      l, a
1090+ 68FB 7A                           ld      a, d
1091+ 68FC B4                           or      h
1092+ 68FD 67                           ld      h, a
1093+ 68FE
1094+ 68FE                              psh1
1094+ 68FE E5          >                push    hl
1094+ 68FF DD E9       >                jp      (ix)
1095+ 6901
1096+ 6901              //  ______________________________________________________________________
1097+ 6901              //
1098+ 6901              // xor          n1 n2 -- n3
1099+ 6901              // bit logical OR. Returns n3 as n1 ^ n2
1100+ 6901                              New_Def XOR_OP, "XOR", is_code, is_normal
1100+ 6901             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1100+ 6901             >
1100+ 6901             >                // dummy db directives used to calculate length of namec
1100+ 6901 58 4F 52    >                db      "XOR"
1100+ 6904             >len_NFA         defl    $ - temp_NFA
1100+ 6904             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1100+ 6901             >
1100+ 6901 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1100+ 6902 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1100+ 6905             >                org     $-1                 // alter last byte of Name just above to set
1100+ 6904 D2          >                db      {b $} | END_BIT     // msb as name end
1100+ 6905             >
1100+ 6905 F1 68       >                dw      last_NFA            // Link to previous definition Name
1100+ 6907             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1100+ 6907 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1100+ 6907 ~           >
1100+ 6907 ~           >
1100+ 6907             >                endif           ; ok        // for other definitions it "points" the correct handler
1100+ 6907             >                // Use of "; ok" to suppress "warning[fwdref]"
1100+ 6907             >
1100+ 6907             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1101+ 6907 D1                           pop     de
1102+ 6908 E1                           pop     hl
1103+ 6909 7B                           ld      a, e
1104+ 690A AD                           xor     l
1105+ 690B 6F                           ld      l, a
1106+ 690C 7A                           ld      a, d
1107+ 690D AC                           xor     h
1108+ 690E 67                           ld      h, a
1109+ 690F
1110+ 690F                              psh1
1110+ 690F E5          >                push    hl
1110+ 6910 DD E9       >                jp      (ix)
1111+ 6912
1112+ 6912              //  ______________________________________________________________________
1113+ 6912              //
1114+ 6912              // sp@      -- a
1115+ 6912              // returns on top of stack the value of SP before execution
1116+ 6912                              New_Def SPFETCH, "SP@", is_code, is_normal
1116+ 6912             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1116+ 6912             >
1116+ 6912             >                // dummy db directives used to calculate length of namec
1116+ 6912 53 50 40    >                db      "SP@"
1116+ 6915             >len_NFA         defl    $ - temp_NFA
1116+ 6915             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1116+ 6912             >
1116+ 6912 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1116+ 6913 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1116+ 6916             >                org     $-1                 // alter last byte of Name just above to set
1116+ 6915 C0          >                db      {b $} | END_BIT     // msb as name end
1116+ 6916             >
1116+ 6916 01 69       >                dw      last_NFA            // Link to previous definition Name
1116+ 6918             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1116+ 6918 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1116+ 6918 ~           >
1116+ 6918 ~           >
1116+ 6918             >                endif           ; ok        // for other definitions it "points" the correct handler
1116+ 6918             >                // Use of "; ok" to suppress "warning[fwdref]"
1116+ 6918             >
1116+ 6918             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1117+ 6918
1118+ 6918 21 00 00                     ld      hl, 0
1119+ 691B 39                           add     hl, sp
1120+ 691C
1121+ 691C                              psh1
1121+ 691C E5          >                push    hl
1121+ 691D DD E9       >                jp      (ix)
1122+ 691F
1123+ 691F              //  ______________________________________________________________________
1124+ 691F              //
1125+ 691F              // sp!      a --
1126+ 691F              // restore SP to the initial value passed
1127+ 691F              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1128+ 691F                              New_Def SPSTORE, "SP!", is_code, is_normal
1128+ 691F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1128+ 691F             >
1128+ 691F             >                // dummy db directives used to calculate length of namec
1128+ 691F 53 50 21    >                db      "SP!"
1128+ 6922             >len_NFA         defl    $ - temp_NFA
1128+ 6922             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1128+ 691F             >
1128+ 691F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1128+ 6920 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1128+ 6923             >                org     $-1                 // alter last byte of Name just above to set
1128+ 6922 A1          >                db      {b $} | END_BIT     // msb as name end
1128+ 6923             >
1128+ 6923 12 69       >                dw      last_NFA            // Link to previous definition Name
1128+ 6925             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1128+ 6925 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1128+ 6925 ~           >
1128+ 6925 ~           >
1128+ 6925             >                endif           ; ok        // for other definitions it "points" the correct handler
1128+ 6925             >                // Use of "; ok" to suppress "warning[fwdref]"
1128+ 6925             >
1128+ 6925             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1129+ 6925 E1                           pop     hl
1130+ 6926 F9                           ld      sp, hl
1131+ 6927
1132+ 6927                              next
1132+ 6927 DD E9       >                jp      (ix)
1133+ 6929
1134+ 6929              //  ______________________________________________________________________
1135+ 6929              //
1136+ 6929              // rp@      -- a
1137+ 6929              // returns on top of stack the value of Return-Pointer
1138+ 6929                              New_Def RPFETCH, "RP@", is_code, is_normal
1138+ 6929             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1138+ 6929             >
1138+ 6929             >                // dummy db directives used to calculate length of namec
1138+ 6929 52 50 40    >                db      "RP@"
1138+ 692C             >len_NFA         defl    $ - temp_NFA
1138+ 692C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1138+ 6929             >
1138+ 6929 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1138+ 692A 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1138+ 692D             >                org     $-1                 // alter last byte of Name just above to set
1138+ 692C C0          >                db      {b $} | END_BIT     // msb as name end
1138+ 692D             >
1138+ 692D 1F 69       >                dw      last_NFA            // Link to previous definition Name
1138+ 692F             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1138+ 692F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1138+ 692F ~           >
1138+ 692F ~           >
1138+ 692F             >                endif           ; ok        // for other definitions it "points" the correct handler
1138+ 692F             >                // Use of "; ok" to suppress "warning[fwdref]"
1138+ 692F             >
1138+ 692F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1139+ 692F
1140+ 692F                              ldhlrp
1140+ 692F 2A 96 63    >                ld      hl,(RP_Pointer)
1141+ 6932
1142+ 6932                              psh1
1142+ 6932 E5          >                push    hl
1142+ 6933 DD E9       >                jp      (ix)
1143+ 6935
1144+ 6935              //  ______________________________________________________________________
1145+ 6935              //
1146+ 6935              // rp!      a --
1147+ 6935              // restore RP to the initial value passed
1148+ 6935              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1149+ 6935                              New_Def RPSTORE, "RP!", is_code, is_normal
1149+ 6935             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1149+ 6935             >
1149+ 6935             >                // dummy db directives used to calculate length of namec
1149+ 6935 52 50 21    >                db      "RP!"
1149+ 6938             >len_NFA         defl    $ - temp_NFA
1149+ 6938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1149+ 6935             >
1149+ 6935 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1149+ 6936 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1149+ 6939             >                org     $-1                 // alter last byte of Name just above to set
1149+ 6938 A1          >                db      {b $} | END_BIT     // msb as name end
1149+ 6939             >
1149+ 6939 29 69       >                dw      last_NFA            // Link to previous definition Name
1149+ 693B             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1149+ 693B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1149+ 693B ~           >
1149+ 693B ~           >
1149+ 693B             >                endif           ; ok        // for other definitions it "points" the correct handler
1149+ 693B             >                // Use of "; ok" to suppress "warning[fwdref]"
1149+ 693B             >
1149+ 693B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1150+ 693B E1                           pop     hl
1151+ 693C                              ldrphl
1151+ 693C 22 96 63    >                ld      (RP_Pointer),hl
1152+ 693F
1153+ 693F                              next
1153+ 693F DD E9       >                jp      (ix)
1154+ 6941
1155+ 6941              //  ______________________________________________________________________
1156+ 6941              //
1157+ 6941              // exit       --
1158+ 6941              // exits back to the caller word
1159+ 6941                              New_Def EXIT, "EXIT", is_code, is_normal
1159+ 6941             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1159+ 6941             >
1159+ 6941             >                // dummy db directives used to calculate length of namec
1159+ 6941 45 58 49 54 >                db      "EXIT"
1159+ 6945             >len_NFA         defl    $ - temp_NFA
1159+ 6945             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1159+ 6941             >
1159+ 6941 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1159+ 6942 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1159+ 6946             >                org     $-1                 // alter last byte of Name just above to set
1159+ 6945 D4          >                db      {b $} | END_BIT     // msb as name end
1159+ 6946             >
1159+ 6946 35 69       >                dw      last_NFA            // Link to previous definition Name
1159+ 6948             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1159+ 6948 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1159+ 6948 ~           >
1159+ 6948 ~           >
1159+ 6948             >                endif           ; ok        // for other definitions it "points" the correct handler
1159+ 6948             >                // Use of "; ok" to suppress "warning[fwdref]"
1159+ 6948             >
1159+ 6948             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1160+ 6948                              ldhlrp                      // Get Return Stack Pointer
1160+ 6948 2A 96 63    >                ld      hl,(RP_Pointer)
1161+ 694B 4E                           ld      c, (hl)             // pop Instruction Pointer
1162+ 694C 23                           inc     hl                  // from Return Stack
1163+ 694D 46                           ld      b, (hl)
1164+ 694E 23                           inc     hl
1165+ 694F                              ldrphl                      // Set Return Stack Pointer
1165+ 694F 22 96 63    >                ld      (RP_Pointer),hl
1166+ 6952                              next
1166+ 6952 DD E9       >                jp      (ix)
1167+ 6954
1168+ 6954              //  ______________________________________________________________________
1169+ 6954              //
1170+ 6954              // lastl      --
1171+ 6954              // exits back to the caller word
1172+ 6954              //              New_Def EXIT, "LASTL", is_code, is_normal
1173+ 6954              //              ldhlrp                      // Get Return Stack Pointer
1174+ 6954              //              ld      e, (hl)             // pop Instruction Pointer
1175+ 6954              //              inc     hl                  // from Return Stack
1176+ 6954              //              ld      d, (hl)
1177+ 6954              //              inc     hl
1178+ 6954              //              ld      (hl), e
1179+ 6954              //              inc     hl
1180+ 6954              //              ld      (hl), d
1181+ 6954              //              next
1182+ 6954
1183+ 6954              //  ______________________________________________________________________
1184+ 6954              //
1185+ 6954              // >r      n --
1186+ 6954              // pop from calculator-stack and push into return-stack
1187+ 6954                              New_Def TO_R, ">R", is_code, is_normal
1187+ 6954             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ 6954             >
1187+ 6954             >                // dummy db directives used to calculate length of namec
1187+ 6954 3E 52       >                db      ">R"
1187+ 6956             >len_NFA         defl    $ - temp_NFA
1187+ 6956             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ 6954             >
1187+ 6954 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ 6955 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1187+ 6957             >                org     $-1                 // alter last byte of Name just above to set
1187+ 6956 D2          >                db      {b $} | END_BIT     // msb as name end
1187+ 6957             >
1187+ 6957 41 69       >                dw      last_NFA            // Link to previous definition Name
1187+ 6959             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 6959 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1187+ 6959 ~           >
1187+ 6959 ~           >
1187+ 6959             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 6959             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 6959             >
1187+ 6959             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 6959 D1                           pop     de
1189+ 695A                              ldhlrp
1189+ 695A 2A 96 63    >                ld      hl,(RP_Pointer)
1190+ 695D 2B                           dec     hl
1191+ 695E 72                           ld      (hl), d             // store current TOS
1192+ 695F 2B                           dec     hl                  // to Return Stack
1193+ 6960 73                           ld      (hl), e
1194+ 6961                              ldrphl
1194+ 6961 22 96 63    >                ld      (RP_Pointer),hl
1195+ 6964
1196+ 6964                              next
1196+ 6964 DD E9       >                jp      (ix)
1197+ 6966
1198+ 6966              //  ______________________________________________________________________
1199+ 6966              //
1200+ 6966              // r>      -- n
1201+ 6966              // pop from return-stack and push into calculator-stack
1202+ 6966                              New_Def R_TO, "R>", is_code, is_normal
1202+ 6966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1202+ 6966             >
1202+ 6966             >                // dummy db directives used to calculate length of namec
1202+ 6966 52 3E       >                db      "R>"
1202+ 6968             >len_NFA         defl    $ - temp_NFA
1202+ 6968             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1202+ 6966             >
1202+ 6966 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1202+ 6967 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1202+ 6969             >                org     $-1                 // alter last byte of Name just above to set
1202+ 6968 BE          >                db      {b $} | END_BIT     // msb as name end
1202+ 6969             >
1202+ 6969 54 69       >                dw      last_NFA            // Link to previous definition Name
1202+ 696B             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1202+ 696B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1202+ 696B ~           >
1202+ 696B ~           >
1202+ 696B             >                endif           ; ok        // for other definitions it "points" the correct handler
1202+ 696B             >                // Use of "; ok" to suppress "warning[fwdref]"
1202+ 696B             >
1202+ 696B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1203+ 696B
1204+ 696B                              ldhlrp
1204+ 696B 2A 96 63    >                ld      hl,(RP_Pointer)
1205+ 696E 5E                           ld      e, (hl)             // retrieve from Return Stack
1206+ 696F 23                           inc     hl
1207+ 6970 56                           ld      d, (hl)
1208+ 6971 23                           inc     hl
1209+ 6972                              ldrphl
1209+ 6972 22 96 63    >                ld      (RP_Pointer),hl
1210+ 6975 D5                           push    de
1211+ 6976                              next
1211+ 6976 DD E9       >                jp      (ix)
1212+ 6978
1213+ 6978              //  ______________________________________________________________________
1214+ 6978              //
1215+ 6978              // r@           -- n
1216+ 6978              // return on top of stack the value of top of return-stack
1217+ 6978              // Since this is the same as I, we alter R's CFA to jump there
1218+ 6978                              New_Def R_OP, "R@", is_code, is_normal
1218+ 6978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1218+ 6978             >
1218+ 6978             >                // dummy db directives used to calculate length of namec
1218+ 6978 52 40       >                db      "R@"
1218+ 697A             >len_NFA         defl    $ - temp_NFA
1218+ 697A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1218+ 6978             >
1218+ 6978 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1218+ 6979 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1218+ 697B             >                org     $-1                 // alter last byte of Name just above to set
1218+ 697A C0          >                db      {b $} | END_BIT     // msb as name end
1218+ 697B             >
1218+ 697B 66 69       >                dw      last_NFA            // Link to previous definition Name
1218+ 697D             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1218+ 697D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1218+ 697D ~           >
1218+ 697D ~           >
1218+ 697D             >                endif           ; ok        // for other definitions it "points" the correct handler
1218+ 697D             >                // Use of "; ok" to suppress "warning[fwdref]"
1218+ 697D             >
1218+ 697D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1219+ 697D C3 78 64                     jp      I_Ptr
1220+ 6980
1221+ 6980              //  ______________________________________________________________________
1222+ 6980              //
1223+ 6980              // r            -- n
1224+ 6980              // return on top of stack the value of top of return-stack
1225+ 6980              // Since this is the same as I, we alter R's CFA to jump there
1226+ 6980              //              New_Def R_OLD, "R", is_code, is_normal
1227+ 6980              //              jp      I_Ptr
1228+ 6980
1229+ 6980              //  ______________________________________________________________________
1230+ 6980              //
1231+ 6980              // 0=           n -- f
1232+ 6980              // true (non zero) if n is zero, false (0) elsewere
1233+ 6980                              New_Def ZEQUAL, "0=", is_code, is_normal
1233+ 6980             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1233+ 6980             >
1233+ 6980             >                // dummy db directives used to calculate length of namec
1233+ 6980 30 3D       >                db      "0="
1233+ 6982             >len_NFA         defl    $ - temp_NFA
1233+ 6982             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1233+ 6980             >
1233+ 6980 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1233+ 6981 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1233+ 6983             >                org     $-1                 // alter last byte of Name just above to set
1233+ 6982 BD          >                db      {b $} | END_BIT     // msb as name end
1233+ 6983             >
1233+ 6983 78 69       >                dw      last_NFA            // Link to previous definition Name
1233+ 6985             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1233+ 6985 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1233+ 6985 ~           >
1233+ 6985 ~           >
1233+ 6985             >                endif           ; ok        // for other definitions it "points" the correct handler
1233+ 6985             >                // Use of "; ok" to suppress "warning[fwdref]"
1233+ 6985             >
1233+ 6985             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1234+ 6985              Zero_Equal:
1235+ 6985 E1                           pop     hl
1236+ 6986 7D                           ld      a, l
1237+ 6987 B4                           or      h
1238+ 6988 21 00 00                     ld      hl, FALSE_FLAG
1239+ 698B 20 01                        jr      nz, ZEqual_Skip
1240+ 698D 2B                               dec     hl
1241+ 698E              ZEqual_Skip:
1242+ 698E                              psh1
1242+ 698E E5          >                push    hl
1242+ 698F DD E9       >                jp      (ix)
1243+ 6991
1244+ 6991              //  ______________________________________________________________________
1245+ 6991              //
1246+ 6991              // not         a1 -- a2
1247+ 6991              // increment by 2 top of stack
1248+ 6991                              New_Def NOT_OP, "NOT", is_code, is_normal
1248+ 6991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1248+ 6991             >
1248+ 6991             >                // dummy db directives used to calculate length of namec
1248+ 6991 4E 4F 54    >                db      "NOT"
1248+ 6994             >len_NFA         defl    $ - temp_NFA
1248+ 6994             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1248+ 6991             >
1248+ 6991 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1248+ 6992 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1248+ 6995             >                org     $-1                 // alter last byte of Name just above to set
1248+ 6994 D4          >                db      {b $} | END_BIT     // msb as name end
1248+ 6995             >
1248+ 6995 80 69       >                dw      last_NFA            // Link to previous definition Name
1248+ 6997             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1248+ 6997 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1248+ 6997 ~           >
1248+ 6997 ~           >
1248+ 6997             >                endif           ; ok        // for other definitions it "points" the correct handler
1248+ 6997             >                // Use of "; ok" to suppress "warning[fwdref]"
1248+ 6997             >
1248+ 6997             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1249+ 6997 C3 85 69                     jp      Zero_Equal
1250+ 699A
1251+ 699A              //  ______________________________________________________________________
1252+ 699A              //
1253+ 699A              // 0<           n -- f
1254+ 699A              // true (non zero) if n is less than zero, false (0) elsewere
1255+ 699A                              New_Def ZLESS, "0<", is_code, is_normal
1255+ 699A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1255+ 699A             >
1255+ 699A             >                // dummy db directives used to calculate length of namec
1255+ 699A 30 3C       >                db      "0<"
1255+ 699C             >len_NFA         defl    $ - temp_NFA
1255+ 699C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1255+ 699A             >
1255+ 699A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1255+ 699B 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1255+ 699D             >                org     $-1                 // alter last byte of Name just above to set
1255+ 699C BC          >                db      {b $} | END_BIT     // msb as name end
1255+ 699D             >
1255+ 699D 91 69       >                dw      last_NFA            // Link to previous definition Name
1255+ 699F             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1255+ 699F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1255+ 699F ~           >
1255+ 699F ~           >
1255+ 699F             >                endif           ; ok        // for other definitions it "points" the correct handler
1255+ 699F             >                // Use of "; ok" to suppress "warning[fwdref]"
1255+ 699F             >
1255+ 699F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1256+ 699F E1                           pop     hl
1257+ 69A0 29                           add     hl, hl
1258+ 69A1 21 00 00                     ld      hl, 0
1259+ 69A4 30 01                        jr      nc, ZLess_Skip
1260+ 69A6 2B                               dec     hl
1261+ 69A7              ZLess_Skip:
1262+ 69A7                              psh1
1262+ 69A7 E5          >                push    hl
1262+ 69A8 DD E9       >                jp      (ix)
1263+ 69AA
1264+ 69AA              //  ______________________________________________________________________
1265+ 69AA              //
1266+ 69AA              // 0>           n -- f
1267+ 69AA              // true (non zero) if n is less than zero, false (0) elsewere
1268+ 69AA                              New_Def ZGREATER, "0>", is_code, is_normal
1268+ 69AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1268+ 69AA             >
1268+ 69AA             >                // dummy db directives used to calculate length of namec
1268+ 69AA 30 3E       >                db      "0>"
1268+ 69AC             >len_NFA         defl    $ - temp_NFA
1268+ 69AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1268+ 69AA             >
1268+ 69AA 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1268+ 69AB 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1268+ 69AD             >                org     $-1                 // alter last byte of Name just above to set
1268+ 69AC BE          >                db      {b $} | END_BIT     // msb as name end
1268+ 69AD             >
1268+ 69AD 9A 69       >                dw      last_NFA            // Link to previous definition Name
1268+ 69AF             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1268+ 69AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1268+ 69AF ~           >
1268+ 69AF ~           >
1268+ 69AF             >                endif           ; ok        // for other definitions it "points" the correct handler
1268+ 69AF             >                // Use of "; ok" to suppress "warning[fwdref]"
1268+ 69AF             >
1268+ 69AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1269+ 69AF E1                           pop     hl
1270+ 69B0 7D                           ld      a, l
1271+ 69B1 B4                           or      h
1272+ 69B2 29                           add     hl, hl
1273+ 69B3 21 00 00                     ld      hl, FALSE_FLAG
1274+ 69B6 38 04                        jr      c, ZGreater_Skip
1275+ 69B8 A7                               and     a
1276+ 69B9 28 01                            jr      z, ZGreater_Skip
1277+ 69BB 2B                                   dec     hl
1278+ 69BC              ZGreater_Skip:
1279+ 69BC                              psh1
1279+ 69BC E5          >                push    hl
1279+ 69BD DD E9       >                jp      (ix)
1280+ 69BF
1281+ 69BF              //  ______________________________________________________________________
1282+ 69BF              //
1283+ 69BF              // +            n1 n2 -- n3
1284+ 69BF              // returns the unsigned sum of two top values
1285+ 69BF                              New_Def PLUS, "+", is_code, is_normal
1285+ 69BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1285+ 69BF             >
1285+ 69BF             >                // dummy db directives used to calculate length of namec
1285+ 69BF 2B          >                db      "+"
1285+ 69C0             >len_NFA         defl    $ - temp_NFA
1285+ 69C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1285+ 69BF             >
1285+ 69BF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1285+ 69C0 2B          >                db      "+"               // name string in 7-bit ascii, but
1285+ 69C1             >                org     $-1                 // alter last byte of Name just above to set
1285+ 69C0 AB          >                db      {b $} | END_BIT     // msb as name end
1285+ 69C1             >
1285+ 69C1 AA 69       >                dw      last_NFA            // Link to previous definition Name
1285+ 69C3             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1285+ 69C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1285+ 69C3 ~           >
1285+ 69C3 ~           >
1285+ 69C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1285+ 69C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1285+ 69C3             >
1285+ 69C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1286+ 69C3 E1                           pop     hl
1287+ 69C4 D1                           pop     de
1288+ 69C5 19                           add     hl, de
1289+ 69C6
1290+ 69C6                              psh1
1290+ 69C6 E5          >                push    hl
1290+ 69C7 DD E9       >                jp      (ix)
1291+ 69C9
1292+ 69C9
1293+ 69C9              //  ______________________________________________________________________
1294+ 69C9              //
1295+ 69C9              // d+           d1 d2 -- d3
1296+ 69C9              // returns the unsigned sum of two top double-numbers
1297+ 69C9              //      d2  d1
1298+ 69C9              //      h l h l
1299+ 69C9              // SP   LHEDLHED
1300+ 69C9              // SP  +01234567
1301+ 69C9                              New_Def DPLUS, "D+", is_code, is_normal
1301+ 69C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ 69C9             >
1301+ 69C9             >                // dummy db directives used to calculate length of namec
1301+ 69C9 44 2B       >                db      "D+"
1301+ 69CB             >len_NFA         defl    $ - temp_NFA
1301+ 69CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ 69C9             >
1301+ 69C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ 69CA 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1301+ 69CC             >                org     $-1                 // alter last byte of Name just above to set
1301+ 69CB AB          >                db      {b $} | END_BIT     // msb as name end
1301+ 69CC             >
1301+ 69CC BF 69       >                dw      last_NFA            // Link to previous definition Name
1301+ 69CE             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 69CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1301+ 69CE ~           >
1301+ 69CE ~           >
1301+ 69CE             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 69CE             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 69CE             >
1301+ 69CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 69CE
1303+ 69CE D9                           exx
1304+ 69CF C1                           pop     bc                  // bc := d2.H
1305+ 69D0 D1                           pop     de                  // hl := d2.L
1306+ 69D1 E1                           pop     hl                  // d1.H
1307+ 69D2 E3                           ex      (sp), hl            // d1.L
1308+ 69D3 19                           add     hl, de              // hl := d2.L + d1.L
1309+ 69D4 E3                           ex      (sp), hl            // d1.H
1310+ 69D5 ED 4A                        adc     hl, bc              // d1.H + d2.H
1311+ 69D7 E5                           push    hl
1312+ 69D8 D9                           exx
1313+ 69D9                              next
1313+ 69D9 DD E9       >                jp      (ix)
1314+ 69DB
1315+ 69DB              //  ______________________________________________________________________
1316+ 69DB              //
1317+ 69DB              // 1+           n1 -- n2
1318+ 69DB              // increment by 1 top of stack
1319+ 69DB                              New_Def ONE_PLUS, "1+", is_code, is_normal
1319+ 69DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ 69DB             >
1319+ 69DB             >                // dummy db directives used to calculate length of namec
1319+ 69DB 31 2B       >                db      "1+"
1319+ 69DD             >len_NFA         defl    $ - temp_NFA
1319+ 69DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ 69DB             >
1319+ 69DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ 69DC 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1319+ 69DE             >                org     $-1                 // alter last byte of Name just above to set
1319+ 69DD AB          >                db      {b $} | END_BIT     // msb as name end
1319+ 69DE             >
1319+ 69DE C9 69       >                dw      last_NFA            // Link to previous definition Name
1319+ 69E0             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 69E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1319+ 69E0 ~           >
1319+ 69E0 ~           >
1319+ 69E0             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 69E0             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 69E0             >
1319+ 69E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 69E0 E1                           pop     hl
1321+ 69E1 23                           inc     hl
1322+ 69E2
1323+ 69E2                              psh1
1323+ 69E2 E5          >                push    hl
1323+ 69E3 DD E9       >                jp      (ix)
1324+ 69E5
1325+ 69E5              //  ______________________________________________________________________
1326+ 69E5              //
1327+ 69E5              // 1-           n1 -- n2
1328+ 69E5              // decrement by 1 top of stack
1329+ 69E5                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1329+ 69E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1329+ 69E5             >
1329+ 69E5             >                // dummy db directives used to calculate length of namec
1329+ 69E5 31 2D       >                db      "1-"
1329+ 69E7             >len_NFA         defl    $ - temp_NFA
1329+ 69E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1329+ 69E5             >
1329+ 69E5 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1329+ 69E6 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1329+ 69E8             >                org     $-1                 // alter last byte of Name just above to set
1329+ 69E7 AD          >                db      {b $} | END_BIT     // msb as name end
1329+ 69E8             >
1329+ 69E8 DB 69       >                dw      last_NFA            // Link to previous definition Name
1329+ 69EA             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1329+ 69EA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1329+ 69EA ~           >
1329+ 69EA ~           >
1329+ 69EA             >                endif           ; ok        // for other definitions it "points" the correct handler
1329+ 69EA             >                // Use of "; ok" to suppress "warning[fwdref]"
1329+ 69EA             >
1329+ 69EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1330+ 69EA E1                           pop     hl
1331+ 69EB 2B                           dec     hl
1332+ 69EC
1333+ 69EC                              psh1
1333+ 69EC E5          >                push    hl
1333+ 69ED DD E9       >                jp      (ix)
1334+ 69EF
1335+ 69EF              //  ______________________________________________________________________
1336+ 69EF              //
1337+ 69EF              // 2+           n1 -- n2
1338+ 69EF              // increment by 2 top of stack
1339+ 69EF                              New_Def TWO_PLUS, "2+", is_code, is_normal
1339+ 69EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ 69EF             >
1339+ 69EF             >                // dummy db directives used to calculate length of namec
1339+ 69EF 32 2B       >                db      "2+"
1339+ 69F1             >len_NFA         defl    $ - temp_NFA
1339+ 69F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ 69EF             >
1339+ 69EF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ 69F0 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1339+ 69F2             >                org     $-1                 // alter last byte of Name just above to set
1339+ 69F1 AB          >                db      {b $} | END_BIT     // msb as name end
1339+ 69F2             >
1339+ 69F2 E5 69       >                dw      last_NFA            // Link to previous definition Name
1339+ 69F4             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 69F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1339+ 69F4 ~           >
1339+ 69F4 ~           >
1339+ 69F4             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 69F4             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 69F4             >
1339+ 69F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 69F4              Two_Plus:
1341+ 69F4 E1                           pop     hl
1342+ 69F5 23                           inc     hl
1343+ 69F6 23                           inc     hl
1344+ 69F7
1345+ 69F7                              psh1
1345+ 69F7 E5          >                push    hl
1345+ 69F8 DD E9       >                jp      (ix)
1346+ 69FA
1347+ 69FA              //  ______________________________________________________________________
1348+ 69FA              //
1349+ 69FA              // cell+        a1 -- a2
1350+ 69FA              // increment by 2 top of stack
1351+ 69FA                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1351+ 69FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1351+ 69FA             >
1351+ 69FA             >                // dummy db directives used to calculate length of namec
1351+ 69FA 43 45 4C 4C >                db      "CELL+"
1351+ 69FE 2B          >
1351+ 69FF             >len_NFA         defl    $ - temp_NFA
1351+ 69FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1351+ 69FA             >
1351+ 69FA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1351+ 69FB 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1351+ 69FF 2B          >
1351+ 6A00             >                org     $-1                 // alter last byte of Name just above to set
1351+ 69FF AB          >                db      {b $} | END_BIT     // msb as name end
1351+ 6A00             >
1351+ 6A00 EF 69       >                dw      last_NFA            // Link to previous definition Name
1351+ 6A02             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1351+ 6A02 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1351+ 6A02 ~           >
1351+ 6A02 ~           >
1351+ 6A02             >                endif           ; ok        // for other definitions it "points" the correct handler
1351+ 6A02             >                // Use of "; ok" to suppress "warning[fwdref]"
1351+ 6A02             >
1351+ 6A02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1352+ 6A02 C3 F4 69                     jp      Two_Plus
1353+ 6A05
1354+ 6A05              //  ______________________________________________________________________
1355+ 6A05              //
1356+ 6A05              // align        a1 -- a2
1357+ 6A05              // align memory : not used
1358+ 6A05              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1359+ 6A05              //            next
1360+ 6A05
1361+ 6A05              //  ______________________________________________________________________
1362+ 6A05              //
1363+ 6A05              // cell-        a1 -- a2
1364+ 6A05              // decrement by 2 top of stack
1365+ 6A05                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1365+ 6A05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1365+ 6A05             >
1365+ 6A05             >                // dummy db directives used to calculate length of namec
1365+ 6A05 43 45 4C 4C >                db      "CELL-"
1365+ 6A09 2D          >
1365+ 6A0A             >len_NFA         defl    $ - temp_NFA
1365+ 6A0A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1365+ 6A05             >
1365+ 6A05 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1365+ 6A06 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1365+ 6A0A 2D          >
1365+ 6A0B             >                org     $-1                 // alter last byte of Name just above to set
1365+ 6A0A AD          >                db      {b $} | END_BIT     // msb as name end
1365+ 6A0B             >
1365+ 6A0B FA 69       >                dw      last_NFA            // Link to previous definition Name
1365+ 6A0D             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1365+ 6A0D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1365+ 6A0D ~           >
1365+ 6A0D ~           >
1365+ 6A0D             >                endif           ; ok        // for other definitions it "points" the correct handler
1365+ 6A0D             >                // Use of "; ok" to suppress "warning[fwdref]"
1365+ 6A0D             >
1365+ 6A0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1366+ 6A0D              CellMinus:
1367+ 6A0D E1                           pop     hl
1368+ 6A0E 2B                           dec     hl
1369+ 6A0F 2B                           dec     hl
1370+ 6A10
1371+ 6A10                              psh1
1371+ 6A10 E5          >                push    hl
1371+ 6A11 DD E9       >                jp      (ix)
1372+ 6A13
1373+ 6A13              //  ______________________________________________________________________
1374+ 6A13              //
1375+ 6A13              // 2-           a1 -- a2
1376+ 6A13              // decrement by 2 top of stack
1377+ 6A13                              New_Def TWO_MINUS, "2-", is_code, is_normal
1377+ 6A13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1377+ 6A13             >
1377+ 6A13             >                // dummy db directives used to calculate length of namec
1377+ 6A13 32 2D       >                db      "2-"
1377+ 6A15             >len_NFA         defl    $ - temp_NFA
1377+ 6A15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1377+ 6A13             >
1377+ 6A13 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1377+ 6A14 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1377+ 6A16             >                org     $-1                 // alter last byte of Name just above to set
1377+ 6A15 AD          >                db      {b $} | END_BIT     // msb as name end
1377+ 6A16             >
1377+ 6A16 05 6A       >                dw      last_NFA            // Link to previous definition Name
1377+ 6A18             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1377+ 6A18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1377+ 6A18 ~           >
1377+ 6A18 ~           >
1377+ 6A18             >                endif           ; ok        // for other definitions it "points" the correct handler
1377+ 6A18             >                // Use of "; ok" to suppress "warning[fwdref]"
1377+ 6A18             >
1377+ 6A18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1378+ 6A18 C3 0D 6A                     jp      CellMinus
1379+ 6A1B
1380+ 6A1B              //  ______________________________________________________________________
1381+ 6A1B              //
1382+ 6A1B              // negate       n1 -- n2
1383+ 6A1B              // change the sign of number
1384+ 6A1B                              New_Def MINUS, "NEGATE", is_code, is_normal
1384+ 6A1B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1384+ 6A1B             >
1384+ 6A1B             >                // dummy db directives used to calculate length of namec
1384+ 6A1B 4E 45 47 41 >                db      "NEGATE"
1384+ 6A1F 54 45       >
1384+ 6A21             >len_NFA         defl    $ - temp_NFA
1384+ 6A21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1384+ 6A1B             >
1384+ 6A1B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1384+ 6A1C 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1384+ 6A20 54 45       >
1384+ 6A22             >                org     $-1                 // alter last byte of Name just above to set
1384+ 6A21 C5          >                db      {b $} | END_BIT     // msb as name end
1384+ 6A22             >
1384+ 6A22 13 6A       >                dw      last_NFA            // Link to previous definition Name
1384+ 6A24             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1384+ 6A24 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1384+ 6A24 ~           >
1384+ 6A24 ~           >
1384+ 6A24             >                endif           ; ok        // for other definitions it "points" the correct handler
1384+ 6A24             >                // Use of "; ok" to suppress "warning[fwdref]"
1384+ 6A24             >
1384+ 6A24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1385+ 6A24 21 00 00                     ld      hl, 0               // subtract from 0
1386+ 6A27 D1                           pop     de
1387+ 6A28 B7                           or      a
1388+ 6A29 ED 52                        sbc     hl, de
1389+ 6A2B
1390+ 6A2B                              psh1
1390+ 6A2B E5          >                push    hl
1390+ 6A2C DD E9       >                jp      (ix)
1391+ 6A2E
1392+ 6A2E              //  ______________________________________________________________________
1393+ 6A2E              //
1394+ 6A2E              // dnegate      d1 -- d2
1395+ 6A2E              // change the sign of a double number
1396+ 6A2E                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1396+ 6A2E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1396+ 6A2E             >
1396+ 6A2E             >                // dummy db directives used to calculate length of namec
1396+ 6A2E 44 4E 45 47 >                db      "DNEGATE"
1396+ 6A32 41 54 45    >
1396+ 6A35             >len_NFA         defl    $ - temp_NFA
1396+ 6A35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1396+ 6A2E             >
1396+ 6A2E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1396+ 6A2F 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1396+ 6A33 41 54 45    >
1396+ 6A36             >                org     $-1                 // alter last byte of Name just above to set
1396+ 6A35 C5          >                db      {b $} | END_BIT     // msb as name end
1396+ 6A36             >
1396+ 6A36 1B 6A       >                dw      last_NFA            // Link to previous definition Name
1396+ 6A38             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1396+ 6A38 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1396+ 6A38 ~           >
1396+ 6A38 ~           >
1396+ 6A38             >                endif           ; ok        // for other definitions it "points" the correct handler
1396+ 6A38             >                // Use of "; ok" to suppress "warning[fwdref]"
1396+ 6A38             >
1396+ 6A38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1397+ 6A38 D9                           exx
1398+ 6A39 C1                           pop     bc                  // d1.H
1399+ 6A3A D1                           pop     de                  // d1.L
1400+ 6A3B AF                           xor     a
1401+ 6A3C 67                           ld      h, a
1402+ 6A3D 6F                           ld      l, a
1403+ 6A3E ED 52                        sbc     hl, de              // subtact from zero
1404+ 6A40 E5                           push    hl                  // > d2-L
1405+ 6A41 67                           ld      h, a
1406+ 6A42 6F                           ld      l, a
1407+ 6A43 ED 42                        sbc     hl, bc              // subtract from zero with carry
1408+ 6A45                                                          // > d2-H
1409+ 6A45 E5                           push    hl
1410+ 6A46 D9                           exx
1411+ 6A47                              next
1411+ 6A47 DD E9       >                jp      (ix)
1412+ 6A49
1413+ 6A49              //  ______________________________________________________________________
1414+ 6A49              //
1415+ 6A49              // over         n1 n2 -- n1 n2 n1
1416+ 6A49              // copy the second value of stack and put it on top.
1417+ 6A49                              New_Def OVER, "OVER", is_code, is_normal
1417+ 6A49             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1417+ 6A49             >
1417+ 6A49             >                // dummy db directives used to calculate length of namec
1417+ 6A49 4F 56 45 52 >                db      "OVER"
1417+ 6A4D             >len_NFA         defl    $ - temp_NFA
1417+ 6A4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1417+ 6A49             >
1417+ 6A49 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1417+ 6A4A 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1417+ 6A4E             >                org     $-1                 // alter last byte of Name just above to set
1417+ 6A4D D2          >                db      {b $} | END_BIT     // msb as name end
1417+ 6A4E             >
1417+ 6A4E 2E 6A       >                dw      last_NFA            // Link to previous definition Name
1417+ 6A50             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1417+ 6A50 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1417+ 6A50 ~           >
1417+ 6A50 ~           >
1417+ 6A50             >                endif           ; ok        // for other definitions it "points" the correct handler
1417+ 6A50             >                // Use of "; ok" to suppress "warning[fwdref]"
1417+ 6A50             >
1417+ 6A50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1418+ 6A50 D1                           pop     de                  //   n2
1419+ 6A51 E1                           pop     hl                  // < n1
1420+ 6A52 E5                           push    hl                  // > n1
1421+ 6A53 D5                           push    de                  // > n2
1422+ 6A54 E5                           push    hl                  // > n1
1423+ 6A55                              next
1423+ 6A55 DD E9       >                jp      (ix)
1424+ 6A57
1425+ 6A57              //  ______________________________________________________________________
1426+ 6A57              //
1427+ 6A57              // drop         n1 --
1428+ 6A57              // drops the top of stack
1429+ 6A57                              New_Def DROP, "DROP", is_code, is_normal
1429+ 6A57             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1429+ 6A57             >
1429+ 6A57             >                // dummy db directives used to calculate length of namec
1429+ 6A57 44 52 4F 50 >                db      "DROP"
1429+ 6A5B             >len_NFA         defl    $ - temp_NFA
1429+ 6A5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1429+ 6A57             >
1429+ 6A57 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1429+ 6A58 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1429+ 6A5C             >                org     $-1                 // alter last byte of Name just above to set
1429+ 6A5B D0          >                db      {b $} | END_BIT     // msb as name end
1429+ 6A5C             >
1429+ 6A5C 49 6A       >                dw      last_NFA            // Link to previous definition Name
1429+ 6A5E             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1429+ 6A5E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1429+ 6A5E ~           >
1429+ 6A5E ~           >
1429+ 6A5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1429+ 6A5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1429+ 6A5E             >
1429+ 6A5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1430+ 6A5E E1                           pop     hl                  // < n1 and discard previous TOS
1431+ 6A5F                              next
1431+ 6A5F DD E9       >                jp      (ix)
1432+ 6A61
1433+ 6A61              //  ______________________________________________________________________
1434+ 6A61              //
1435+ 6A61              // nip          n1 n2 -- n2
1436+ 6A61              // drops the second elemento on the stack
1437+ 6A61                              New_Def NIP, "NIP", is_code, is_normal
1437+ 6A61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1437+ 6A61             >
1437+ 6A61             >                // dummy db directives used to calculate length of namec
1437+ 6A61 4E 49 50    >                db      "NIP"
1437+ 6A64             >len_NFA         defl    $ - temp_NFA
1437+ 6A64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1437+ 6A61             >
1437+ 6A61 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1437+ 6A62 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1437+ 6A65             >                org     $-1                 // alter last byte of Name just above to set
1437+ 6A64 D0          >                db      {b $} | END_BIT     // msb as name end
1437+ 6A65             >
1437+ 6A65 57 6A       >                dw      last_NFA            // Link to previous definition Name
1437+ 6A67             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1437+ 6A67 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1437+ 6A67 ~           >
1437+ 6A67 ~           >
1437+ 6A67             >                endif           ; ok        // for other definitions it "points" the correct handler
1437+ 6A67             >                // Use of "; ok" to suppress "warning[fwdref]"
1437+ 6A67             >
1437+ 6A67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1438+ 6A67
1439+ 6A67 E1                           pop     hl                  // < n1 discarded
1440+ 6A68 E3                           ex      (sp), hl
1441+ 6A69                              next
1441+ 6A69 DD E9       >                jp      (ix)
1442+ 6A6B
1443+ 6A6B              //  ______________________________________________________________________
1444+ 6A6B              //
1445+ 6A6B              // tuck         n1 n2 -- n2 n1 n2
1446+ 6A6B              // copy the top element after the second.
1447+ 6A6B                              New_Def TUCK, "TUCK", is_code, is_normal
1447+ 6A6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1447+ 6A6B             >
1447+ 6A6B             >                // dummy db directives used to calculate length of namec
1447+ 6A6B 54 55 43 4B >                db      "TUCK"
1447+ 6A6F             >len_NFA         defl    $ - temp_NFA
1447+ 6A6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1447+ 6A6B             >
1447+ 6A6B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1447+ 6A6C 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1447+ 6A70             >                org     $-1                 // alter last byte of Name just above to set
1447+ 6A6F CB          >                db      {b $} | END_BIT     // msb as name end
1447+ 6A70             >
1447+ 6A70 61 6A       >                dw      last_NFA            // Link to previous definition Name
1447+ 6A72             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1447+ 6A72 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1447+ 6A72 ~           >
1447+ 6A72 ~           >
1447+ 6A72             >                endif           ; ok        // for other definitions it "points" the correct handler
1447+ 6A72             >                // Use of "; ok" to suppress "warning[fwdref]"
1447+ 6A72             >
1447+ 6A72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1448+ 6A72 E1                           pop     hl
1449+ 6A73 D1                           pop     de                  // < n1
1450+ 6A74 E5                           push    hl                  // > n2  and TOS
1451+ 6A75 D5                           push    de                  // > n1
1452+ 6A76 E5                           push    hl
1453+ 6A77                              next
1453+ 6A77 DD E9       >                jp      (ix)
1454+ 6A79
1455+ 6A79              //  ______________________________________________________________________
1456+ 6A79              //
1457+ 6A79              // swap         n1 n2 -- n2 n1
1458+ 6A79              // swaps the two values on top of stack
1459+ 6A79                              New_Def SWAP, "SWAP", is_code, is_normal
1459+ 6A79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1459+ 6A79             >
1459+ 6A79             >                // dummy db directives used to calculate length of namec
1459+ 6A79 53 57 41 50 >                db      "SWAP"
1459+ 6A7D             >len_NFA         defl    $ - temp_NFA
1459+ 6A7D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1459+ 6A79             >
1459+ 6A79 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1459+ 6A7A 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1459+ 6A7E             >                org     $-1                 // alter last byte of Name just above to set
1459+ 6A7D D0          >                db      {b $} | END_BIT     // msb as name end
1459+ 6A7E             >
1459+ 6A7E 6B 6A       >                dw      last_NFA            // Link to previous definition Name
1459+ 6A80             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1459+ 6A80 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1459+ 6A80 ~           >
1459+ 6A80 ~           >
1459+ 6A80             >                endif           ; ok        // for other definitions it "points" the correct handler
1459+ 6A80             >                // Use of "; ok" to suppress "warning[fwdref]"
1459+ 6A80             >
1459+ 6A80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1460+ 6A80 E1                           pop     hl                  // < n1
1461+ 6A81 E3                           ex      (sp),hl             // > n2
1462+ 6A82 E5                           push    hl                  // copy n1 to TOS
1463+ 6A83                              next
1463+ 6A83 DD E9       >                jp      (ix)
1464+ 6A85
1465+ 6A85              //  ______________________________________________________________________
1466+ 6A85              //
1467+ 6A85              // dup         n -- n n
1468+ 6A85              // duplicates the top value of stack
1469+ 6A85                              New_Def DUP, "DUP", is_code, is_normal
1469+ 6A85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1469+ 6A85             >
1469+ 6A85             >                // dummy db directives used to calculate length of namec
1469+ 6A85 44 55 50    >                db      "DUP"
1469+ 6A88             >len_NFA         defl    $ - temp_NFA
1469+ 6A88             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1469+ 6A85             >
1469+ 6A85 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1469+ 6A86 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1469+ 6A89             >                org     $-1                 // alter last byte of Name just above to set
1469+ 6A88 D0          >                db      {b $} | END_BIT     // msb as name end
1469+ 6A89             >
1469+ 6A89 79 6A       >                dw      last_NFA            // Link to previous definition Name
1469+ 6A8B             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1469+ 6A8B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1469+ 6A8B ~           >
1469+ 6A8B ~           >
1469+ 6A8B             >                endif           ; ok        // for other definitions it "points" the correct handler
1469+ 6A8B             >                // Use of "; ok" to suppress "warning[fwdref]"
1469+ 6A8B             >
1469+ 6A8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1470+ 6A8B E1                           pop     hl
1471+ 6A8C E5                           push    hl                  // > n duplicate TOS
1472+ 6A8D E5                           push    hl
1473+ 6A8E                              next
1473+ 6A8E DD E9       >                jp      (ix)
1474+ 6A90
1475+ 6A90              //  ______________________________________________________________________
1476+ 6A90              //
1477+ 6A90              // rot         n1 n2 n3 -- n2 n3 n1
1478+ 6A90              // Rotates the 3 top values of stack by picking the 3rd in access-order
1479+ 6A90              // and putting it on top. The other two are shifted down one place.
1480+ 6A90                              New_Def ROT, "ROT", is_code, is_normal
1480+ 6A90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1480+ 6A90             >
1480+ 6A90             >                // dummy db directives used to calculate length of namec
1480+ 6A90 52 4F 54    >                db      "ROT"
1480+ 6A93             >len_NFA         defl    $ - temp_NFA
1480+ 6A93             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1480+ 6A90             >
1480+ 6A90 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1480+ 6A91 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1480+ 6A94             >                org     $-1                 // alter last byte of Name just above to set
1480+ 6A93 D4          >                db      {b $} | END_BIT     // msb as name end
1480+ 6A94             >
1480+ 6A94 85 6A       >                dw      last_NFA            // Link to previous definition Name
1480+ 6A96             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1480+ 6A96 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1480+ 6A96 ~           >
1480+ 6A96 ~           >
1480+ 6A96             >                endif           ; ok        // for other definitions it "points" the correct handler
1480+ 6A96             >                // Use of "; ok" to suppress "warning[fwdref]"
1480+ 6A96             >
1480+ 6A96             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1481+ 6A96 D1                           pop     de                  // < n3
1482+ 6A97 E1                           pop     hl                  // < n2
1483+ 6A98 E3                           ex      (sp),hl             // > n2 < n1
1484+ 6A99 D5                           push    de                  // > n3
1485+ 6A9A E5                           push    hl                  // copy n1 to TOS
1486+ 6A9B                              next
1486+ 6A9B DD E9       >                jp      (ix)
1487+ 6A9D
1488+ 6A9D              //  ______________________________________________________________________
1489+ 6A9D              //
1490+ 6A9D              // -rot         n1 n2 n3 -- n3 n1 n2
1491+ 6A9D              // Rotates the 3 top values of stack by picking the 1st in access-order
1492+ 6A9D              // and putting back to 3rd place. The other two are shifted down one place.
1493+ 6A9D                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1493+ 6A9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ 6A9D             >
1493+ 6A9D             >                // dummy db directives used to calculate length of namec
1493+ 6A9D 2D 52 4F 54 >                db      "-ROT"
1493+ 6AA1             >len_NFA         defl    $ - temp_NFA
1493+ 6AA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ 6A9D             >
1493+ 6A9D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ 6A9E 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1493+ 6AA2             >                org     $-1                 // alter last byte of Name just above to set
1493+ 6AA1 D4          >                db      {b $} | END_BIT     // msb as name end
1493+ 6AA2             >
1493+ 6AA2 90 6A       >                dw      last_NFA            // Link to previous definition Name
1493+ 6AA4             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 6AA4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1493+ 6AA4 ~           >
1493+ 6AA4 ~           >
1493+ 6AA4             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 6AA4             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 6AA4             >
1493+ 6AA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 6AA4 E1                           pop     hl                  // < n3
1495+ 6AA5 D1                           pop     de                  // < n2
1496+ 6AA6 E3                           ex      (sp),hl             // > n3 < n1
1497+ 6AA7 E5                           push    hl                  // > n1
1498+ 6AA8 D5                           push    de                  // copy n3 to TOS
1499+ 6AA9                              next
1499+ 6AA9 DD E9       >                jp      (ix)
1500+ 6AAB
1501+ 6AAB              //  ______________________________________________________________________
1502+ 6AAB              //
1503+ 6AAB              // pick        n1 -- nx
1504+ 6AAB              // picks the nth element from TOS
1505+ 6AAB                              New_Def PICK, "PICK", is_code, is_normal
1505+ 6AAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1505+ 6AAB             >
1505+ 6AAB             >                // dummy db directives used to calculate length of namec
1505+ 6AAB 50 49 43 4B >                db      "PICK"
1505+ 6AAF             >len_NFA         defl    $ - temp_NFA
1505+ 6AAF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1505+ 6AAB             >
1505+ 6AAB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1505+ 6AAC 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1505+ 6AB0             >                org     $-1                 // alter last byte of Name just above to set
1505+ 6AAF CB          >                db      {b $} | END_BIT     // msb as name end
1505+ 6AB0             >
1505+ 6AB0 9D 6A       >                dw      last_NFA            // Link to previous definition Name
1505+ 6AB2             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1505+ 6AB2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1505+ 6AB2 ~           >
1505+ 6AB2 ~           >
1505+ 6AB2             >                endif           ; ok        // for other definitions it "points" the correct handler
1505+ 6AB2             >                // Use of "; ok" to suppress "warning[fwdref]"
1505+ 6AB2             >
1505+ 6AB2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1506+ 6AB2 E1                           pop     hl                  // take TOS as index
1507+ 6AB3 29                           add     hl, hl              // as cells
1508+ 6AB4 39                           add     hl, sp              // from Stack Pointer
1509+ 6AB5 7E                           ld      a, (hl)             // replace TOS
1510+ 6AB6 23                           inc     hl
1511+ 6AB7 66                           ld      h, (hl)
1512+ 6AB8 6F                           ld      l, a
1513+ 6AB9
1514+ 6AB9                              psh1
1514+ 6AB9 E5          >                push    hl
1514+ 6ABA DD E9       >                jp      (ix)
1515+ 6ABC
1516+ 6ABC
1517+ 6ABC              //  ______________________________________________________________________
1518+ 6ABC              //
1519+ 6ABC              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1520+ 6ABC              // picks the nth element from TOS
1521+ 6ABC              //              New_Def ROLL, "ROLL", is_code, is_normal
1522+ 6ABC              //              exx                     // we need all registers free
1523+ 6ABC              //              pop     hl              // number of cells to roll
1524+ 6ABC              //              ld      a, h
1525+ 6ABC              //              or       l
1526+ 6ABC              //              jr      z, Roll_Zero
1527+ 6ABC              //                  add     hl, hl              // number of bytes to move
1528+ 6ABC              //                  ld      b, h
1529+ 6ABC              //                  ld      c, l
1530+ 6ABC              //                  add     hl, sp          // address of n1
1531+ 6ABC              //                  ld      a, (hl)         // take n1 into a and a,
1532+ 6ABC              //                  inc     hl
1533+ 6ABC              //                  ex      af, af'
1534+ 6ABC              //                  ld      a, (hl)         // take n1 into a and a,
1535+ 6ABC              //                  ld      d, h
1536+ 6ABC              //                  ld      e, l
1537+ 6ABC              //                  dec     hl
1538+ 6ABC              //                  dec     hl
1539+ 6ABC              //                  lddr
1540+ 6ABC              //                  ex      de, hl
1541+ 6ABC              //                  ld      (hl), a
1542+ 6ABC              //                  dec     hl
1543+ 6ABC              //                  ex      af, af'
1544+ 6ABC              //                  ld      (hl), a
1545+ 6ABC              //Roll_Zero:
1546+ 6ABC              //              exx
1547+ 6ABC              //              next
1548+ 6ABC
1549+ 6ABC
1550+ 6ABC              //  ______________________________________________________________________
1551+ 6ABC              //
1552+ 6ABC              // 2over        d1 d2 -- d1 d2 d1
1553+ 6ABC              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1554+ 6ABC              // copy the second double of stack and put on top.
1555+ 6ABC              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1556+ 6ABC              //
1557+ 6ABC              //              ld      hl, 7
1558+ 6ABC              //              add     hl, sp
1559+ 6ABC              //              ld      d, (hl)
1560+ 6ABC              //              dec     hl
1561+ 6ABC              //              ld      e, (hl)             // d1-L
1562+ 6ABC              //              push    de
1563+ 6ABC              //              dec     hl
1564+ 6ABC              //              ld      d, (hl)
1565+ 6ABC              //              dec     hl
1566+ 6ABC              //              ld      e, (hl)             // d1-H
1567+ 6ABC              //              push    de
1568+ 6ABC              //              next
1569+ 6ABC
1570+ 6ABC              //  ______________________________________________________________________
1571+ 6ABC              //
1572+ 6ABC              // 2drop        d --
1573+ 6ABC              //              n1 n2 --
1574+ 6ABC              // drops the top double from stack
1575+ 6ABC                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1575+ 6ABC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1575+ 6ABC             >
1575+ 6ABC             >                // dummy db directives used to calculate length of namec
1575+ 6ABC 32 44 52 4F >                db      "2DROP"
1575+ 6AC0 50          >
1575+ 6AC1             >len_NFA         defl    $ - temp_NFA
1575+ 6AC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1575+ 6ABC             >
1575+ 6ABC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1575+ 6ABD 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1575+ 6AC1 50          >
1575+ 6AC2             >                org     $-1                 // alter last byte of Name just above to set
1575+ 6AC1 D0          >                db      {b $} | END_BIT     // msb as name end
1575+ 6AC2             >
1575+ 6AC2 AB 6A       >                dw      last_NFA            // Link to previous definition Name
1575+ 6AC4             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1575+ 6AC4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1575+ 6AC4 ~           >
1575+ 6AC4 ~           >
1575+ 6AC4             >                endif           ; ok        // for other definitions it "points" the correct handler
1575+ 6AC4             >                // Use of "; ok" to suppress "warning[fwdref]"
1575+ 6AC4             >
1575+ 6AC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1576+ 6AC4 E1                           pop     hl
1577+ 6AC5 E1                           pop     hl
1578+ 6AC6                              next
1578+ 6AC6 DD E9       >                jp      (ix)
1579+ 6AC8
1580+ 6AC8              //  ______________________________________________________________________
1581+ 6AC8              //
1582+ 6AC8              // 2nip         d1 d2 -- d2
1583+ 6AC8              //              n1 n2 n3 n4 -- n3 n4
1584+ 6AC8              // drops the second double on the stack
1585+ 6AC8              //              New_Def TWO_NIP, 4, "2nip"
1586+ 6AC8              //              ...
1587+ 6AC8
1588+ 6AC8              //  ______________________________________________________________________
1589+ 6AC8              //
1590+ 6AC8              // 2tuck         d1 d2 -- d2 d1 d2
1591+ 6AC8              // copy the top element after the second.
1592+ 6AC8              //              New_Def TWO_TUCK, 5, "2tuck"
1593+ 6AC8              //              ...
1594+ 6AC8
1595+ 6AC8              //  ______________________________________________________________________
1596+ 6AC8              //
1597+ 6AC8              // 2swap         d1 d2 -- d2 d1
1598+ 6AC8              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1599+ 6AC8              // swaps the two doubles on top of stack
1600+ 6AC8                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1600+ 6AC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1600+ 6AC8             >
1600+ 6AC8             >                // dummy db directives used to calculate length of namec
1600+ 6AC8 32 53 57 41 >                db      "2SWAP"
1600+ 6ACC 50          >
1600+ 6ACD             >len_NFA         defl    $ - temp_NFA
1600+ 6ACD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1600+ 6AC8             >
1600+ 6AC8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1600+ 6AC9 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1600+ 6ACD 50          >
1600+ 6ACE             >                org     $-1                 // alter last byte of Name just above to set
1600+ 6ACD D0          >                db      {b $} | END_BIT     // msb as name end
1600+ 6ACE             >
1600+ 6ACE BC 6A       >                dw      last_NFA            // Link to previous definition Name
1600+ 6AD0             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1600+ 6AD0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1600+ 6AD0 ~           >
1600+ 6AD0 ~           >
1600+ 6AD0             >                endif           ; ok        // for other definitions it "points" the correct handler
1600+ 6AD0             >                // Use of "; ok" to suppress "warning[fwdref]"
1600+ 6AD0             >
1600+ 6AD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1601+ 6AD0 F1                           pop     af                  //   d2-H
1602+ 6AD1 E1                           pop     hl                  // < d2-L
1603+ 6AD2 D1                           pop     de                  // < d1-H
1604+ 6AD3 E3                           ex      (sp), hl            // < d1-L > d2-L
1605+ 6AD4 F5                           push    af                  // > d2-H
1606+ 6AD5 E5                           push    hl                  // > d1-L
1607+ 6AD6 D5                           push    de
1608+ 6AD7
1609+ 6AD7                              next
1609+ 6AD7 DD E9       >                jp      (ix)
1610+ 6AD9
1611+ 6AD9              //  ______________________________________________________________________
1612+ 6AD9              //
1613+ 6AD9              // 2dup         d -- d d
1614+ 6AD9              //              n1 n2 -- n1 n2 n1 n2
1615+ 6AD9              // duplicates the top double of stack
1616+ 6AD9                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1616+ 6AD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1616+ 6AD9             >
1616+ 6AD9             >                // dummy db directives used to calculate length of namec
1616+ 6AD9 32 44 55 50 >                db      "2DUP"
1616+ 6ADD             >len_NFA         defl    $ - temp_NFA
1616+ 6ADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1616+ 6AD9             >
1616+ 6AD9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1616+ 6ADA 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1616+ 6ADE             >                org     $-1                 // alter last byte of Name just above to set
1616+ 6ADD D0          >                db      {b $} | END_BIT     // msb as name end
1616+ 6ADE             >
1616+ 6ADE C8 6A       >                dw      last_NFA            // Link to previous definition Name
1616+ 6AE0             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1616+ 6AE0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1616+ 6AE0 ~           >
1616+ 6AE0 ~           >
1616+ 6AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
1616+ 6AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
1616+ 6AE0             >
1616+ 6AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1617+ 6AE0 E1                           pop     hl                  // < d-H
1618+ 6AE1 D1                           pop     de                  // < d-L
1619+ 6AE2 D5                           push    de                  // < d-L
1620+ 6AE3 E5                           push    hl                  // > d-H
1621+ 6AE4 D5                           push    de                  // > d-L
1622+ 6AE5 E5                           push    hl                  // > d-H
1623+ 6AE6                              next
1623+ 6AE6 DD E9       >                jp      (ix)
1624+ 6AE8
1625+ 6AE8              //  ______________________________________________________________________
1626+ 6AE8              //
1627+ 6AE8              // 2rot         d1 d2 d3 -- d2 d3 d1
1628+ 6AE8              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1629+ 6AE8              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1630+ 6AE8              // and putting it on top. The other two are shifted down one place.
1631+ 6AE8              //              New_Def TWO?ROT, 4, "2rot"
1632+ 6AE8              //              ...
1633+ 6AE8              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1634+ 6AE8              //
1635+ 6AE8              //      d3  |d2  |d1  |
1636+ 6AE8              //      h l |h l |h l |
1637+ 6AE8              // SP   LHED|LHED|LHED|
1638+ 6AE8              // SP  +0123|4567|89ab|
1639+ 6AE8              //              ld      hl, $000B
1640+ 6AE8              //              add     hl, sp
1641+ 6AE8              //              ld      d, (hl)
1642+ 6AE8              //              dec     hl
1643+ 6AE8              //              ld      e, (hl)
1644+ 6AE8              //              dec     hl
1645+ 6AE8              //              push    de
1646+ 6AE8              //              ld      d, (hl)
1647+ 6AE8              //              dec     hl
1648+ 6AE8              //              ld      e, (hl)
1649+ 6AE8              //              dec     hl
1650+ 6AE8              //              push    de
1651+ 6AE8
1652+ 6AE8              //      d1  |d3  |d2  |d1  |
1653+ 6AE8              //      h l |h l |h l |h l |
1654+ 6AE8              // SP   LHED|LHED|LHED|LHED|
1655+ 6AE8              // SP       +0123|4567|89ab|
1656+ 6AE8
1657+ 6AE8              //              ld      d, h
1658+ 6AE8              //              ld      e, l
1659+ 6AE8              //              inc     de
1660+ 6AE8              //              inc     de
1661+ 6AE8              //              inc     de
1662+ 6AE8              //              inc     de
1663+ 6AE8              //              push    bc
1664+ 6AE8              //              ld      bc, $000C
1665+ 6AE8              //              lddr
1666+ 6AE8              //              pop     bc
1667+ 6AE8              //              pop     de
1668+ 6AE8              //              pop     de
1669+ 6AE8              //
1670+ 6AE8              //              next
1671+ 6AE8
1672+ 6AE8
1673+ 6AE8              //  ______________________________________________________________________
1674+ 6AE8              //
1675+ 6AE8              // +!           n a --
1676+ 6AE8              // Sums to the content of address a the number n.
1677+ 6AE8              // It is the same of  a @ n + a !
1678+ 6AE8                              New_Def PLUSSTORE, "+!", is_code, is_normal
1678+ 6AE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1678+ 6AE8             >
1678+ 6AE8             >                // dummy db directives used to calculate length of namec
1678+ 6AE8 2B 21       >                db      "+!"
1678+ 6AEA             >len_NFA         defl    $ - temp_NFA
1678+ 6AEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1678+ 6AE8             >
1678+ 6AE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1678+ 6AE9 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1678+ 6AEB             >                org     $-1                 // alter last byte of Name just above to set
1678+ 6AEA A1          >                db      {b $} | END_BIT     // msb as name end
1678+ 6AEB             >
1678+ 6AEB D9 6A       >                dw      last_NFA            // Link to previous definition Name
1678+ 6AED             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1678+ 6AED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1678+ 6AED ~           >
1678+ 6AED ~           >
1678+ 6AED             >                endif           ; ok        // for other definitions it "points" the correct handler
1678+ 6AED             >                // Use of "; ok" to suppress "warning[fwdref]"
1678+ 6AED             >
1678+ 6AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1679+ 6AED E1                           pop     hl                  // hl is the address
1680+ 6AEE D1                           pop     de                  // de is the number
1681+ 6AEF 7E                           ld      a, (hl)
1682+ 6AF0 83                           add     e
1683+ 6AF1 77                           ld      (hl), a
1684+ 6AF2 23                           inc     hl
1685+ 6AF3 7E                           ld      a, (hl)
1686+ 6AF4 8A                           adc     d
1687+ 6AF5 77                           ld      (hl), a
1688+ 6AF6
1689+ 6AF6                              next
1689+ 6AF6 DD E9       >                jp      (ix)
1690+ 6AF8
1691+ 6AF8              //  ______________________________________________________________________
1692+ 6AF8              //
1693+ 6AF8              // toggle       a n --
1694+ 6AF8              // Complements (xor) the byte at addrress  a  with the model n.
1695+ 6AF8                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1695+ 6AF8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1695+ 6AF8             >
1695+ 6AF8             >                // dummy db directives used to calculate length of namec
1695+ 6AF8 54 4F 47 47 >                db      "TOGGLE"
1695+ 6AFC 4C 45       >
1695+ 6AFE             >len_NFA         defl    $ - temp_NFA
1695+ 6AFE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1695+ 6AF8             >
1695+ 6AF8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1695+ 6AF9 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1695+ 6AFD 4C 45       >
1695+ 6AFF             >                org     $-1                 // alter last byte of Name just above to set
1695+ 6AFE C5          >                db      {b $} | END_BIT     // msb as name end
1695+ 6AFF             >
1695+ 6AFF E8 6A       >                dw      last_NFA            // Link to previous definition Name
1695+ 6B01             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1695+ 6B01 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1695+ 6B01 ~           >
1695+ 6B01 ~           >
1695+ 6B01             >                endif           ; ok        // for other definitions it "points" the correct handler
1695+ 6B01             >                // Use of "; ok" to suppress "warning[fwdref]"
1695+ 6B01             >
1695+ 6B01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1696+ 6B01 D1                           pop     de
1697+ 6B02 E1                           pop     hl
1698+ 6B03 7E                           ld      a, (hl)
1699+ 6B04 AB                           xor     e
1700+ 6B05 77                           ld      (hl), a
1701+ 6B06
1702+ 6B06                              next
1702+ 6B06 DD E9       >                jp      (ix)
1703+ 6B08
1704+ 6B08              //  ______________________________________________________________________
1705+ 6B08              //
1706+ 6B08              // @            a -- n
1707+ 6B08              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1708+ 6B08                              New_Def FETCH, "@", is_code, is_normal
1708+ 6B08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1708+ 6B08             >
1708+ 6B08             >                // dummy db directives used to calculate length of namec
1708+ 6B08 40          >                db      "@"
1708+ 6B09             >len_NFA         defl    $ - temp_NFA
1708+ 6B09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1708+ 6B08             >
1708+ 6B08 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1708+ 6B09 40          >                db      "@"               // name string in 7-bit ascii, but
1708+ 6B0A             >                org     $-1                 // alter last byte of Name just above to set
1708+ 6B09 C0          >                db      {b $} | END_BIT     // msb as name end
1708+ 6B0A             >
1708+ 6B0A F8 6A       >                dw      last_NFA            // Link to previous definition Name
1708+ 6B0C             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1708+ 6B0C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1708+ 6B0C ~           >
1708+ 6B0C ~           >
1708+ 6B0C             >                endif           ; ok        // for other definitions it "points" the correct handler
1708+ 6B0C             >                // Use of "; ok" to suppress "warning[fwdref]"
1708+ 6B0C             >
1708+ 6B0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1709+ 6B0C E1                           pop     hl
1710+ 6B0D 5E                           ld      e, (hl)             // low-byte
1711+ 6B0E 23                           inc     hl
1712+ 6B0F 56                           ld      d, (hl)             // high-byte
1713+ 6B10 D5                           push    de
1714+ 6B11                              next
1714+ 6B11 DD E9       >                jp      (ix)
1715+ 6B13
1716+ 6B13              //  ______________________________________________________________________
1717+ 6B13              //
1718+ 6B13              // !            n a --
1719+ 6B13              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1720+ 6B13                              New_Def STORE, "!", is_code, is_normal
1720+ 6B13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1720+ 6B13             >
1720+ 6B13             >                // dummy db directives used to calculate length of namec
1720+ 6B13 21          >                db      "!"
1720+ 6B14             >len_NFA         defl    $ - temp_NFA
1720+ 6B14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1720+ 6B13             >
1720+ 6B13 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1720+ 6B14 21          >                db      "!"               // name string in 7-bit ascii, but
1720+ 6B15             >                org     $-1                 // alter last byte of Name just above to set
1720+ 6B14 A1          >                db      {b $} | END_BIT     // msb as name end
1720+ 6B15             >
1720+ 6B15 08 6B       >                dw      last_NFA            // Link to previous definition Name
1720+ 6B17             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1720+ 6B17 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1720+ 6B17 ~           >
1720+ 6B17 ~           >
1720+ 6B17             >                endif           ; ok        // for other definitions it "points" the correct handler
1720+ 6B17             >                // Use of "; ok" to suppress "warning[fwdref]"
1720+ 6B17             >
1720+ 6B17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1721+ 6B17 E1                           pop     hl                  // address
1722+ 6B18 D1                           pop     de                  // < n
1723+ 6B19 73                           ld      (hl), e             // low-byte
1724+ 6B1A 23                           inc     hl
1725+ 6B1B 72                           ld      (hl), d             // high-byte
1726+ 6B1C
1727+ 6B1C                              next
1727+ 6B1C DD E9       >                jp      (ix)
1728+ 6B1E
1729+ 6B1E              //  ______________________________________________________________________
1730+ 6B1E              //
1731+ 6B1E              // c@           a -- c
1732+ 6B1E              // fetch a character n from address a
1733+ 6B1E                              New_Def CFETCH, "C@", is_code, is_normal
1733+ 6B1E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1733+ 6B1E             >
1733+ 6B1E             >                // dummy db directives used to calculate length of namec
1733+ 6B1E 43 40       >                db      "C@"
1733+ 6B20             >len_NFA         defl    $ - temp_NFA
1733+ 6B20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1733+ 6B1E             >
1733+ 6B1E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1733+ 6B1F 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1733+ 6B21             >                org     $-1                 // alter last byte of Name just above to set
1733+ 6B20 C0          >                db      {b $} | END_BIT     // msb as name end
1733+ 6B21             >
1733+ 6B21 13 6B       >                dw      last_NFA            // Link to previous definition Name
1733+ 6B23             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1733+ 6B23 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1733+ 6B23 ~           >
1733+ 6B23 ~           >
1733+ 6B23             >                endif           ; ok        // for other definitions it "points" the correct handler
1733+ 6B23             >                // Use of "; ok" to suppress "warning[fwdref]"
1733+ 6B23             >
1733+ 6B23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1734+ 6B23 E1                           pop     hl
1735+ 6B24 6E                           ld      l, (hl)             // low-byte
1736+ 6B25 26 00                        ld      h, 0
1737+ 6B27
1738+ 6B27                              psh1
1738+ 6B27 E5          >                push    hl
1738+ 6B28 DD E9       >                jp      (ix)
1739+ 6B2A
1740+ 6B2A              //  ______________________________________________________________________
1741+ 6B2A              //
1742+ 6B2A              // c!           c a --
1743+ 6B2A              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1744+ 6B2A                              New_Def CSTORE, "C!", is_code, is_normal
1744+ 6B2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1744+ 6B2A             >
1744+ 6B2A             >                // dummy db directives used to calculate length of namec
1744+ 6B2A 43 21       >                db      "C!"
1744+ 6B2C             >len_NFA         defl    $ - temp_NFA
1744+ 6B2C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1744+ 6B2A             >
1744+ 6B2A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1744+ 6B2B 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1744+ 6B2D             >                org     $-1                 // alter last byte of Name just above to set
1744+ 6B2C A1          >                db      {b $} | END_BIT     // msb as name end
1744+ 6B2D             >
1744+ 6B2D 1E 6B       >                dw      last_NFA            // Link to previous definition Name
1744+ 6B2F             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1744+ 6B2F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1744+ 6B2F ~           >
1744+ 6B2F ~           >
1744+ 6B2F             >                endif           ; ok        // for other definitions it "points" the correct handler
1744+ 6B2F             >                // Use of "; ok" to suppress "warning[fwdref]"
1744+ 6B2F             >
1744+ 6B2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1745+ 6B2F E1                           pop     hl                  // < address
1746+ 6B30 D1                           pop     de
1747+ 6B31 73                           ld      (hl), e             // low-byte
1748+ 6B32
1749+ 6B32                              next
1749+ 6B32 DD E9       >                jp      (ix)
1750+ 6B34
1751+ 6B34              //  ______________________________________________________________________
1752+ 6B34              //
1753+ 6B34              // 2@           a -- d
1754+ 6B34              // fetch a 32 bits number d from address a and leaves it on top of the
1755+ 6B34              // stack as two single numbers, high part as top of the stack.
1756+ 6B34              // A double number is normally kept in CPU registers as HLDE.
1757+ 6B34              // On stack a double number is treated as two single numbers
1758+ 6B34              // where BC is on the top of the stack and HL is the second from top,
1759+ 6B34              // so the sign of the number can be checked on top of stack
1760+ 6B34              // and in the stack memory it appears as LHED.
1761+ 6B34                              New_Def TWO_FETCH, "2@", is_code, is_normal
1761+ 6B34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1761+ 6B34             >
1761+ 6B34             >                // dummy db directives used to calculate length of namec
1761+ 6B34 32 40       >                db      "2@"
1761+ 6B36             >len_NFA         defl    $ - temp_NFA
1761+ 6B36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1761+ 6B34             >
1761+ 6B34 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1761+ 6B35 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1761+ 6B37             >                org     $-1                 // alter last byte of Name just above to set
1761+ 6B36 C0          >                db      {b $} | END_BIT     // msb as name end
1761+ 6B37             >
1761+ 6B37 2A 6B       >                dw      last_NFA            // Link to previous definition Name
1761+ 6B39             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1761+ 6B39 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1761+ 6B39 ~           >
1761+ 6B39 ~           >
1761+ 6B39             >                endif           ; ok        // for other definitions it "points" the correct handler
1761+ 6B39             >                // Use of "; ok" to suppress "warning[fwdref]"
1761+ 6B39             >
1761+ 6B39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1762+ 6B39 E1                           pop     hl                  // address
1763+ 6B3A 5E                           ld      e, (hl)             // low-byte
1764+ 6B3B 23                           inc     hl
1765+ 6B3C 56                           ld      d, (hl)             // high-byte
1766+ 6B3D 23                           inc     hl
1767+ 6B3E 7E                           ld      a, (hl)             // low-byte
1768+ 6B3F 23                           inc     hl
1769+ 6B40 66                           ld      h, (hl)             // high-byte
1770+ 6B41 6F                           ld      l, a
1771+ 6B42 E5                           push    hl
1772+ 6B43 D5                           push    de
1773+ 6B44                              next
1773+ 6B44 DD E9       >                jp      (ix)
1774+ 6B46
1775+ 6B46              //  ______________________________________________________________________
1776+ 6B46              //
1777+ 6B46              // 2!           d a --
1778+ 6B46              // stores a 32 bits number d from address a and leaves it on top of the
1779+ 6B46              // stack as two single numbers, high part as top of the stack.
1780+ 6B46              // A double number is normally kept in CPU registers as HLDE.
1781+ 6B46              // On stack a double number is treated as two single numbers
1782+ 6B46              // where BC is on the top of the stack and HL is the second from top,
1783+ 6B46              // so the sign of the number can be checked on top of stack
1784+ 6B46              // and in the stack memory it appears as LHED.
1785+ 6B46                              New_Def TWO_STORE, "2!", is_code, is_normal
1785+ 6B46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1785+ 6B46             >
1785+ 6B46             >                // dummy db directives used to calculate length of namec
1785+ 6B46 32 21       >                db      "2!"
1785+ 6B48             >len_NFA         defl    $ - temp_NFA
1785+ 6B48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1785+ 6B46             >
1785+ 6B46 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1785+ 6B47 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1785+ 6B49             >                org     $-1                 // alter last byte of Name just above to set
1785+ 6B48 A1          >                db      {b $} | END_BIT     // msb as name end
1785+ 6B49             >
1785+ 6B49 34 6B       >                dw      last_NFA            // Link to previous definition Name
1785+ 6B4B             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1785+ 6B4B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1785+ 6B4B ~           >
1785+ 6B4B ~           >
1785+ 6B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
1785+ 6B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
1785+ 6B4B             >
1785+ 6B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1786+ 6B4B D9                           exx
1787+ 6B4C E1                           pop     hl                  // address
1788+ 6B4D C1                           pop     bc                  // < high-part
1789+ 6B4E D1                           pop     de                  // < low-part > Instruction Pointer
1790+ 6B4F 71                           ld      (hl), c
1791+ 6B50 23                           inc     hl
1792+ 6B51 70                           ld      (hl), b
1793+ 6B52 23                           inc     hl
1794+ 6B53 73                           ld      (hl), e
1795+ 6B54 23                           inc     hl
1796+ 6B55 72                           ld      (hl), d
1797+ 6B56 D9                           exx
1798+ 6B57                              next
1798+ 6B57 DD E9       >                jp      (ix)
1799+ 6B59
1800+ 6B59              //  ______________________________________________________________________
1801+ 6B59              //
1802+ 6B59              // p@           a -- c
1803+ 6B59              // Read one byte from port a and leave the result on top of stack
1804+ 6B59                              New_Def PFETCH, "P@", is_code, is_normal
1804+ 6B59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1804+ 6B59             >
1804+ 6B59             >                // dummy db directives used to calculate length of namec
1804+ 6B59 50 40       >                db      "P@"
1804+ 6B5B             >len_NFA         defl    $ - temp_NFA
1804+ 6B5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1804+ 6B59             >
1804+ 6B59 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1804+ 6B5A 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1804+ 6B5C             >                org     $-1                 // alter last byte of Name just above to set
1804+ 6B5B C0          >                db      {b $} | END_BIT     // msb as name end
1804+ 6B5C             >
1804+ 6B5C 46 6B       >                dw      last_NFA            // Link to previous definition Name
1804+ 6B5E             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1804+ 6B5E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1804+ 6B5E ~           >
1804+ 6B5E ~           >
1804+ 6B5E             >                endif           ; ok        // for other definitions it "points" the correct handler
1804+ 6B5E             >                // Use of "; ok" to suppress "warning[fwdref]"
1804+ 6B5E             >
1804+ 6B5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1805+ 6B5E D9                           exx
1806+ 6B5F C1                           pop     bc
1807+ 6B60 26 00                        ld      h, 0
1808+ 6B62 ED 68                        in      l, (c)
1809+ 6B64 E5                           push    hl
1810+ 6B65 D9                           exx
1811+ 6B66                              next
1811+ 6B66 DD E9       >                jp      (ix)
1812+ 6B68
1813+ 6B68              //  ______________________________________________________________________
1814+ 6B68              //
1815+ 6B68              // p!           c a --
1816+ 6B68              // Send one byte (top of stack) to port a
1817+ 6B68                              New_Def PSTORE, "P!", is_code, is_normal
1817+ 6B68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1817+ 6B68             >
1817+ 6B68             >                // dummy db directives used to calculate length of namec
1817+ 6B68 50 21       >                db      "P!"
1817+ 6B6A             >len_NFA         defl    $ - temp_NFA
1817+ 6B6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1817+ 6B68             >
1817+ 6B68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1817+ 6B69 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1817+ 6B6B             >                org     $-1                 // alter last byte of Name just above to set
1817+ 6B6A A1          >                db      {b $} | END_BIT     // msb as name end
1817+ 6B6B             >
1817+ 6B6B 59 6B       >                dw      last_NFA            // Link to previous definition Name
1817+ 6B6D             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1817+ 6B6D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1817+ 6B6D ~           >
1817+ 6B6D ~           >
1817+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1817+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1817+ 6B6D             >
1817+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1818+ 6B6D D9                           exx
1819+ 6B6E C1                           pop     bc
1820+ 6B6F E1                           pop     hl                  // < c
1821+ 6B70 ED 69                        out     (c), l              // low-byte
1822+ 6B72 D9                           exx
1823+ 6B73                              next
1823+ 6B73 DD E9       >                jp      (ix)
1824+ 6B75
1825+ 6B75
1826+ 6B75              //  ______________________________________________________________________
1827+ 6B75              //
1828+ 6B75              // 2*           n1 -- n2
1829+ 6B75              // doubles the number at top of stack
1830+ 6B75                              New_Def TWO_MUL, "2*", is_code, is_normal
1830+ 6B75             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1830+ 6B75             >
1830+ 6B75             >                // dummy db directives used to calculate length of namec
1830+ 6B75 32 2A       >                db      "2*"
1830+ 6B77             >len_NFA         defl    $ - temp_NFA
1830+ 6B77             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1830+ 6B75             >
1830+ 6B75 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1830+ 6B76 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1830+ 6B78             >                org     $-1                 // alter last byte of Name just above to set
1830+ 6B77 AA          >                db      {b $} | END_BIT     // msb as name end
1830+ 6B78             >
1830+ 6B78 68 6B       >                dw      last_NFA            // Link to previous definition Name
1830+ 6B7A             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1830+ 6B7A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1830+ 6B7A ~           >
1830+ 6B7A ~           >
1830+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
1830+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
1830+ 6B7A             >
1830+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1831+ 6B7A              Two_Mul_Ptr:
1832+ 6B7A E1                           pop     hl
1833+ 6B7B 29                           add     hl, hl
1834+ 6B7C
1835+ 6B7C                              psh1
1835+ 6B7C E5          >                push    hl
1835+ 6B7D DD E9       >                jp      (ix)
1836+ 6B7F
1837+ 6B7F              //  ______________________________________________________________________
1838+ 6B7F              //
1839+ 6B7F              // 2/           n1 -- n2
1840+ 6B7F              // halves the top of stack, sign is unchanged
1841+ 6B7F                              New_Def TWO_DIV, "2/", is_code, is_normal
1841+ 6B7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1841+ 6B7F             >
1841+ 6B7F             >                // dummy db directives used to calculate length of namec
1841+ 6B7F 32 2F       >                db      "2/"
1841+ 6B81             >len_NFA         defl    $ - temp_NFA
1841+ 6B81             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1841+ 6B7F             >
1841+ 6B7F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1841+ 6B80 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1841+ 6B82             >                org     $-1                 // alter last byte of Name just above to set
1841+ 6B81 AF          >                db      {b $} | END_BIT     // msb as name end
1841+ 6B82             >
1841+ 6B82 75 6B       >                dw      last_NFA            // Link to previous definition Name
1841+ 6B84             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1841+ 6B84 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1841+ 6B84 ~           >
1841+ 6B84 ~           >
1841+ 6B84             >                endif           ; ok        // for other definitions it "points" the correct handler
1841+ 6B84             >                // Use of "; ok" to suppress "warning[fwdref]"
1841+ 6B84             >
1841+ 6B84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1842+ 6B84 E1                           pop     hl
1843+ 6B85 CB 2C                        sra     h
1844+ 6B87 CB 1D                        rr      l
1845+ 6B89
1846+ 6B89                              psh1
1846+ 6B89 E5          >                push    hl
1846+ 6B8A DD E9       >                jp      (ix)
1847+ 6B8C
1848+ 6B8C              //  ______________________________________________________________________
1849+ 6B8C              //
1850+ 6B8C              // lshift       n1 u -- n2
1851+ 6B8C              // bit left shift of u bits
1852+ 6B8C                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1852+ 6B8C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1852+ 6B8C             >
1852+ 6B8C             >                // dummy db directives used to calculate length of namec
1852+ 6B8C 4C 53 48 49 >                db      "LSHIFT"
1852+ 6B90 46 54       >
1852+ 6B92             >len_NFA         defl    $ - temp_NFA
1852+ 6B92             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1852+ 6B8C             >
1852+ 6B8C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1852+ 6B8D 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1852+ 6B91 46 54       >
1852+ 6B93             >                org     $-1                 // alter last byte of Name just above to set
1852+ 6B92 D4          >                db      {b $} | END_BIT     // msb as name end
1852+ 6B93             >
1852+ 6B93 7F 6B       >                dw      last_NFA            // Link to previous definition Name
1852+ 6B95             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1852+ 6B95 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1852+ 6B95 ~           >
1852+ 6B95 ~           >
1852+ 6B95             >                endif           ; ok        // for other definitions it "points" the correct handler
1852+ 6B95             >                // Use of "; ok" to suppress "warning[fwdref]"
1852+ 6B95             >
1852+ 6B95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1853+ 6B95 D1                           pop     de
1854+ 6B96
1855+ 6B96 E1                           pop     hl
1856+ 6B97 7B                           ld      a, e
1857+ 6B98 B7                           or      a
1858+ 6B99 28 04                        jr      z, Lshift_Zero
1859+ 6B9B              Lshift_Loop:
1860+ 6B9B 29                                   add     hl, hl
1861+ 6B9C 3D                                   dec     a
1862+ 6B9D 20 FC                            jr      nz, Lshift_Loop
1863+ 6B9F              Lshift_Zero:
1864+ 6B9F
1865+ 6B9F
1866+ 6B9F                              psh1
1866+ 6B9F E5          >                push    hl
1866+ 6BA0 DD E9       >                jp      (ix)
1867+ 6BA2
1868+ 6BA2              //  ______________________________________________________________________
1869+ 6BA2              //
1870+ 6BA2              // rshift       n1 u -- n2
1871+ 6BA2              // bit right shift of u bits
1872+ 6BA2                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1872+ 6BA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1872+ 6BA2             >
1872+ 6BA2             >                // dummy db directives used to calculate length of namec
1872+ 6BA2 52 53 48 49 >                db      "RSHIFT"
1872+ 6BA6 46 54       >
1872+ 6BA8             >len_NFA         defl    $ - temp_NFA
1872+ 6BA8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1872+ 6BA2             >
1872+ 6BA2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1872+ 6BA3 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1872+ 6BA7 46 54       >
1872+ 6BA9             >                org     $-1                 // alter last byte of Name just above to set
1872+ 6BA8 D4          >                db      {b $} | END_BIT     // msb as name end
1872+ 6BA9             >
1872+ 6BA9 8C 6B       >                dw      last_NFA            // Link to previous definition Name
1872+ 6BAB             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1872+ 6BAB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1872+ 6BAB ~           >
1872+ 6BAB ~           >
1872+ 6BAB             >                endif           ; ok        // for other definitions it "points" the correct handler
1872+ 6BAB             >                // Use of "; ok" to suppress "warning[fwdref]"
1872+ 6BAB             >
1872+ 6BAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1873+ 6BAB D1                           pop     de
1874+ 6BAC
1875+ 6BAC E1                           pop     hl
1876+ 6BAD 7B                           ld      a, e
1877+ 6BAE B7                           or      a
1878+ 6BAF 28 07                        jr      z, Rshift_Zero
1879+ 6BB1              Rshift_Loop:
1880+ 6BB1 CB 3C                                srl     h
1881+ 6BB3 CB 1D                                rr      l
1882+ 6BB5 3D                                   dec     a
1883+ 6BB6 20 F9                            jr      nz, Rshift_Loop
1884+ 6BB8              Rshift_Zero:
1885+ 6BB8
1886+ 6BB8
1887+ 6BB8                              psh1
1887+ 6BB8 E5          >                push    hl
1887+ 6BB9 DD E9       >                jp      (ix)
1888+ 6BBB
1889+ 6BBB              //  ______________________________________________________________________
1890+ 6BBB              //
1891+ 6BBB              // cells        n1 -- n2
1892+ 6BBB              // decrement by 2 top of stack
1893+ 6BBB                              New_Def CELLS, "CELLS", is_code, is_normal
1893+ 6BBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1893+ 6BBB             >
1893+ 6BBB             >                // dummy db directives used to calculate length of namec
1893+ 6BBB 43 45 4C 4C >                db      "CELLS"
1893+ 6BBF 53          >
1893+ 6BC0             >len_NFA         defl    $ - temp_NFA
1893+ 6BC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1893+ 6BBB             >
1893+ 6BBB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1893+ 6BBC 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1893+ 6BC0 53          >
1893+ 6BC1             >                org     $-1                 // alter last byte of Name just above to set
1893+ 6BC0 D3          >                db      {b $} | END_BIT     // msb as name end
1893+ 6BC1             >
1893+ 6BC1 A2 6B       >                dw      last_NFA            // Link to previous definition Name
1893+ 6BC3             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1893+ 6BC3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1893+ 6BC3 ~           >
1893+ 6BC3 ~           >
1893+ 6BC3             >                endif           ; ok        // for other definitions it "points" the correct handler
1893+ 6BC3             >                // Use of "; ok" to suppress "warning[fwdref]"
1893+ 6BC3             >
1893+ 6BC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1894+ 6BC3 C3 7A 6B                     jp      Two_Mul_Ptr
1895+ 6BC6
1896+ 6BC6
1897+ 6BC6              //  ______________________________________________________________________
1898+ 6BC6
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BC6                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BC6              //  ______________________________________________________________________
   2+ 6BC6              //
   3+ 6BC6              //  L1.asm
   4+ 6BC6              //
   5+ 6BC6              //  Level-1 definitions and derivate
   6+ 6BC6              //  ______________________________________________________________________
   7+ 6BC6
   8+ 6BC6              //  ______________________________________________________________________
   9+ 6BC6              //
  10+ 6BC6              // :            -- cccc     ( compile time )
  11+ 6BC6              //              i*x -- j*x  ( run time )
  12+ 6BC6              // Colon Definition
  13+ 6BC6                              Colon_Def COLON, ":", is_immediate      // has forward-ref
  13+ 6BC6             >                New_Def  COLON, ":", Enter_Ptr, is_immediate ; ok
  13+ 6BC6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BC6             >
  13+ 6BC6             >                // dummy db directives used to calculate length of namec
  13+ 6BC6 3A          >                db      ":"
  13+ 6BC7             >len_NFA         defl    $ - temp_NFA
  13+ 6BC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BC6             >
  13+ 6BC6 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BC7 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BC8             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BC7 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BC8             >
  13+ 6BC8 BB 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BCA             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BCA CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BCD             >
  13+ 6BCD             >
  13+ 6BCD             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BCD             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BCD             >
  13+ 6BCD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BCD
  15+ 6BCD 6D 70                        dw      QEXEC                   // ?exec
  16+ 6BCF 25 70                        dw      STORE_CSP               // !csp
  17+ 6BD1 B5 6D 0C 6B                  dw      CURRENT, FETCH          // current @
  18+ 6BD5 A7 6D 17 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BD9 8C 76                        dw      CREATE                  // create  ( forward )
  20+ 6BDB 22 71                        dw      SMUDGE                  // dmudge
  21+ 6BDD 0C 71                        dw      SQUARED_CLOSE           // ]
  22+ 6BDF 7C 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BE1                                                              // ... immediate
  24+ 6BE1              Enter_Ptr:
  25+ 6BE1                              // via call coded in CFA
  26+ 6BE1                              ldhlrp
  26+ 6BE1 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BE4 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BE5 70                           ld      (hl), b
  29+ 6BE6 2B                           dec     hl
  30+ 6BE7 71                           ld      (hl), c
  31+ 6BE8                              ldrphl
  31+ 6BE8 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BEB
  33+ 6BEB
  34+ 6BEB C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BEC                              next
  35+ 6BEC DD E9       >                jp      (ix)
  36+ 6BEE
  37+ 6BEE              //  ______________________________________________________________________
  38+ 6BEE              //
  39+ 6BEE              // ;            --
  40+ 6BEE              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BEE                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BEE             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BEE             >
  41+ 6BEE             >                // dummy db directives used to calculate length of namec
  41+ 6BEE 3B          >                db      ";"
  41+ 6BEF             >len_NFA         defl    $ - temp_NFA
  41+ 6BEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BEE             >
  41+ 6BEE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BEF 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BF0             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BEF BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BF0             >
  41+ 6BF0 C6 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BF2             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BF2 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BF5             >
  41+ 6BF5             >
  41+ 6BF5             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BF5             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BF5             >
  41+ 6BF5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BF5
  43+ 6BF5 99 70                        dw      QCSP                    // ?csp
  44+ 6BF7 D2 70 48 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BFB 22 71                        dw      SMUDGE                  // smudge
  46+ 6BFD FD 70                        dw      SQUARED_OPEN            // [
  47+ 6BFF 48 69                        dw      EXIT                    // ; immediate
  48+ 6C01
  49+ 6C01              //  ______________________________________________________________________
  50+ 6C01              //
  51+ 6C01              // noop         --
  52+ 6C01
  53+ 6C01                              New_Def NOOP, "NOOP", is_code, is_normal
  53+ 6C01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6C01             >
  53+ 6C01             >                // dummy db directives used to calculate length of namec
  53+ 6C01 4E 4F 4F 50 >                db      "NOOP"
  53+ 6C05             >len_NFA         defl    $ - temp_NFA
  53+ 6C05             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6C01             >
  53+ 6C01 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6C02 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6C06             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6C05 D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6C06             >
  53+ 6C06 EE 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6C08             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6C08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  53+ 6C08 ~           >
  53+ 6C08 ~           >
  53+ 6C08             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6C08             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6C08             >
  53+ 6C08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6C08                              next
  54+ 6C08 DD E9       >                jp      (ix)
  55+ 6C0A
  56+ 6C0A              //  ______________________________________________________________________
  57+ 6C0A              //
  58+ 6C0A              // constant     n -- cccc     ( compile time )
  59+ 6C0A              //              -- n          ( run time )
  60+ 6C0A              // Constant definition.
  61+ 6C0A                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6C0A             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6C0A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6C0A             >
  61+ 6C0A             >                // dummy db directives used to calculate length of namec
  61+ 6C0A 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6C0E 54 41 4E 54 >
  61+ 6C12             >len_NFA         defl    $ - temp_NFA
  61+ 6C12             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6C0A             >
  61+ 6C0A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6C0B 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6C0F 54 41 4E 54 >
  61+ 6C13             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6C12 D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6C13             >
  61+ 6C13 01 6C       >                dw      last_NFA            // Link to previous definition Name
  61+ 6C15             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6C15 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C18             >
  61+ 6C18             >
  61+ 6C18             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C18             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C18             >
  61+ 6C18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C18
  63+ 6C18 8C 76                        dw      CREATE                  // create
  64+ 6C1A 82 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C1C 7C 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C1E              Constant_Ptr:
  67+ 6C1E
  68+ 6C1E
  69+ 6C1E E1                           pop     hl
  70+ 6C1F
  71+ 6C1F 5E                           ld      e, (hl)
  72+ 6C20 23                           inc     hl
  73+ 6C21 56                           ld      d, (hl)
  74+ 6C22 D5                           push    de
  75+ 6C23                              next
  75+ 6C23 DD E9       >                jp      (ix)
  76+ 6C25
  77+ 6C25              //  ______________________________________________________________________
  78+ 6C25              //
  79+ 6C25              // variable     n -- cccc     ( compile time )
  80+ 6C25              //              -- a          ( run time )
  81+ 6C25              // Variable definition, n is the initial value.
  82+ 6C25                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  82+ 6C25             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  82+ 6C25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  82+ 6C25             >
  82+ 6C25             >                // dummy db directives used to calculate length of namec
  82+ 6C25 56 41 52 49 >                db      "VARIABLE"
  82+ 6C29 41 42 4C 45 >
  82+ 6C2D             >len_NFA         defl    $ - temp_NFA
  82+ 6C2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  82+ 6C25             >
  82+ 6C25 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  82+ 6C26 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  82+ 6C2A 41 42 4C 45 >
  82+ 6C2E             >                org     $-1                 // alter last byte of Name just above to set
  82+ 6C2D C5          >                db      {b $} | END_BIT     // msb as name end
  82+ 6C2E             >
  82+ 6C2E 0A 6C       >                dw      last_NFA            // Link to previous definition Name
  82+ 6C30             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  82+ 6C30 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  82+ 6C33             >
  82+ 6C33             >
  82+ 6C33             >                endif           ; ok        // for other definitions it "points" the correct handler
  82+ 6C33             >                // Use of "; ok" to suppress "warning[fwdref]"
  82+ 6C33             >
  82+ 6C33             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  83+ 6C33
  84+ 6C33 5A 6C                        dw      ZERO
  85+ 6C35 15 6C                        dw      CONSTANT                // constant
  86+ 6C37 7C 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  87+ 6C39              Variable_Ptr:
  88+ 6C39
  89+ 6C39
  90+ 6C39
  91+ 6C39
  92+ 6C39                              next
  92+ 6C39 DD E9       >                jp      (ix)
  93+ 6C3B
  94+ 6C3B              //  ______________________________________________________________________
  95+ 6C3B              //
  96+ 6C3B              // user         b -- cccc     ( compile time )
  97+ 6C3B              //              -- a          ( run time )
  98+ 6C3B              // User variable definition
  99+ 6C3B                              Colon_Def USER, "USER", is_normal
  99+ 6C3B             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
  99+ 6C3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99+ 6C3B             >
  99+ 6C3B             >                // dummy db directives used to calculate length of namec
  99+ 6C3B 55 53 45 52 >                db      "USER"
  99+ 6C3F             >len_NFA         defl    $ - temp_NFA
  99+ 6C3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99+ 6C3B             >
  99+ 6C3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99+ 6C3C 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
  99+ 6C40             >                org     $-1                 // alter last byte of Name just above to set
  99+ 6C3F D2          >                db      {b $} | END_BIT     // msb as name end
  99+ 6C40             >
  99+ 6C40 25 6C       >                dw      last_NFA            // Link to previous definition Name
  99+ 6C42             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  99+ 6C42 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  99+ 6C45             >
  99+ 6C45             >
  99+ 6C45             >                endif           ; ok        // for other definitions it "points" the correct handler
  99+ 6C45             >                // Use of "; ok" to suppress "warning[fwdref]"
  99+ 6C45             >
  99+ 6C45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100+ 6C45
 101+ 6C45 8C 76                        dw      CREATE                  // create
 102+ 6C47 94 6E                        dw      CCOMMA                  // c,
 103+ 6C49 7C 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 104+ 6C4B
 105+ 6C4B
 106+ 6C4B              User_Ptr:
 107+ 6C4B                              // via call coded in CFA
 108+ 6C4B E1                           pop     hl
 109+ 6C4C
 110+ 6C4C 5E                           ld      e, (hl)
 111+ 6C4D 16 00                        ld      d, 0
 112+ 6C4F 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C52 19                           add     hl, de
 114+ 6C53
 115+ 6C53                              psh1
 115+ 6C53 E5          >                push    hl
 115+ 6C54 DD E9       >                jp      (ix)
 116+ 6C56
 117+ 6C56              //  ______________________________________________________________________
 118+ 6C56              //
 119+ 6C56                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C56             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C56             >
 119+ 6C56             >                // dummy db directives used to calculate length of namec
 119+ 6C56 30          >                db      "0"
 119+ 6C57             >len_NFA         defl    $ - temp_NFA
 119+ 6C57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C56             >
 119+ 6C56 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C57 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C58             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C57 B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C58             >
 119+ 6C58 3B 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C5A             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C5A CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C5D             >
 119+ 6C5D             >
 119+ 6C5D             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C5D             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C5D             >
 119+ 6C5D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C5D 00 00       >                dw      0
 120+ 6C5F                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C5F             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C5F             >
 120+ 6C5F             >                // dummy db directives used to calculate length of namec
 120+ 6C5F 31          >                db      "1"
 120+ 6C60             >len_NFA         defl    $ - temp_NFA
 120+ 6C60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C5F             >
 120+ 6C5F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C60 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C61             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C60 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C61             >
 120+ 6C61 56 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C63             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C63 CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C66             >
 120+ 6C66             >
 120+ 6C66             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C66             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C66             >
 120+ 6C66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C66 01 00       >                dw      1
 121+ 6C68                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C68             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C68             >
 121+ 6C68             >                // dummy db directives used to calculate length of namec
 121+ 6C68 32          >                db      "2"
 121+ 6C69             >len_NFA         defl    $ - temp_NFA
 121+ 6C69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C68             >
 121+ 6C68 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C69 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C6A             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C69 B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C6A             >
 121+ 6C6A 5F 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C6C             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C6C CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C6F             >
 121+ 6C6F             >
 121+ 6C6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C6F             >
 121+ 6C6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C6F 02 00       >                dw      2
 122+ 6C71                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C71             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C71             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C71             >
 122+ 6C71             >                // dummy db directives used to calculate length of namec
 122+ 6C71 33          >                db      "3"
 122+ 6C72             >len_NFA         defl    $ - temp_NFA
 122+ 6C72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C71             >
 122+ 6C71 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C72 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C73             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C72 B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C73             >
 122+ 6C73 68 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C75             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C75 CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C78             >
 122+ 6C78             >
 122+ 6C78             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C78             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C78             >
 122+ 6C78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C78 03 00       >                dw      3
 123+ 6C7A                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C7A             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C7A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C7A             >
 123+ 6C7A             >                // dummy db directives used to calculate length of namec
 123+ 6C7A 2D 31       >                db      "-1"
 123+ 6C7C             >len_NFA         defl    $ - temp_NFA
 123+ 6C7C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C7A             >
 123+ 6C7A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C7B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C7D             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C7C B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C7D             >
 123+ 6C7D 71 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C7F             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C7F CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C82             >
 123+ 6C82             >
 123+ 6C82             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C82             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C82             >
 123+ 6C82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C82 FF FF       >                dw      -1
 124+ 6C84                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C84             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C84             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C84             >
 124+ 6C84             >                // dummy db directives used to calculate length of namec
 124+ 6C84 42 4C       >                db      "BL"
 124+ 6C86             >len_NFA         defl    $ - temp_NFA
 124+ 6C86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C84             >
 124+ 6C84 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C85 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C87             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C86 CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C87             >
 124+ 6C87 7A 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C89             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C89 CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C8C             >
 124+ 6C8C             >
 124+ 6C8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C8C             >
 124+ 6C8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C8C 20 00       >                dw      $20
 125+ 6C8E                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C8E             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C8E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C8E             >
 125+ 6C8E             >                // dummy db directives used to calculate length of namec
 125+ 6C8E 43 2F 4C    >                db      "C/L"
 125+ 6C91             >len_NFA         defl    $ - temp_NFA
 125+ 6C91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C8E             >
 125+ 6C8E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C8F 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C92             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C91 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C92             >
 125+ 6C92 84 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C94             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C94 CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C97             >
 125+ 6C97             >
 125+ 6C97             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C97             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C97             >
 125+ 6C97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C97 40 00       >                dw      64
 126+ 6C99                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C99             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C99             >
 126+ 6C99             >                // dummy db directives used to calculate length of namec
 126+ 6C99 42 2F 42 55 >                db      "B/BUF"
 126+ 6C9D 46          >
 126+ 6C9E             >len_NFA         defl    $ - temp_NFA
 126+ 6C9E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C99             >
 126+ 6C99 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C9A 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6C9E 46          >
 126+ 6C9F             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C9E C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C9F             >
 126+ 6C9F 8E 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6CA1             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6CA1 CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6CA4             >
 126+ 6CA4             >
 126+ 6CA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6CA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6CA4             >
 126+ 6CA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6CA4 00 02       >                dw      512
 127+ 6CA6                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6CA6             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6CA6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6CA6             >
 127+ 6CA6             >                // dummy db directives used to calculate length of namec
 127+ 6CA6 42 2F 53 43 >                db      "B/SCR"
 127+ 6CAA 52          >
 127+ 6CAB             >len_NFA         defl    $ - temp_NFA
 127+ 6CAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6CA6             >
 127+ 6CA6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6CA7 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6CAB 52          >
 127+ 6CAC             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6CAB D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6CAC             >
 127+ 6CAC 99 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6CAE             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6CAE CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6CB1             >
 127+ 6CB1             >
 127+ 6CB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6CB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6CB1             >
 127+ 6CB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6CB1 02 00       >                dw      2
 128+ 6CB3                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6CB3             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6CB3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6CB3             >
 128+ 6CB3             >                // dummy db directives used to calculate length of namec
 128+ 6CB3 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CB7 52          >
 128+ 6CB8             >len_NFA         defl    $ - temp_NFA
 128+ 6CB8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6CB3             >
 128+ 6CB3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6CB4 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CB8 52          >
 128+ 6CB9             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CB8 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CB9             >
 128+ 6CB9 A6 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CBB             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CBB CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CBE             >
 128+ 6CBE             >
 128+ 6CBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CBE             >
 128+ 6CBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CBE 10 00       >                dw      16
 129+ 6CC0
 130+ 6CC0              //  ______________________________________________________________________
 131+ 6CC0              //
 132+ 6CC0              // +origin         --
 133+ 6CC0              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CC0              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CC0              //              dw      PLUS                    // +
 136+ 6CC0              //              dw      EXIT                    // ;
 137+ 6CC0                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CC0             >
 137+ 6CC0             >                // dummy db directives used to calculate length of namec
 137+ 6CC0 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CC4 47 49 4E    >
 137+ 6CC7             >len_NFA         defl    $ - temp_NFA
 137+ 6CC7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CC0             >
 137+ 6CC0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CC1 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CC5 47 49 4E    >
 137+ 6CC8             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CC7 CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CC8             >
 137+ 6CC8 B3 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CCA             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CCA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CCA ~           >
 137+ 6CCA ~           >
 137+ 6CCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CCA             >
 137+ 6CCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CCA E1                           pop     hl
 139+ 6CCB 11 66 63                     ld      de, Cold_origin
 140+ 6CCE 19                           add     hl, de
 141+ 6CCF E5                           push    hl
 142+ 6CD0                              next
 142+ 6CD0 DD E9       >                jp      (ix)
 143+ 6CD2
 144+ 6CD2
 145+ 6CD2              //  ______________________________________________________________________
 146+ 6CD2              //
 147+ 6CD2                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 147+ 6CD2             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 147+ 6CD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147+ 6CD2             >
 147+ 6CD2             >                // dummy db directives used to calculate length of namec
 147+ 6CD2 28 4E 45 58 >                db      "(NEXT)"
 147+ 6CD6 54 29       >
 147+ 6CD8             >len_NFA         defl    $ - temp_NFA
 147+ 6CD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147+ 6CD2             >
 147+ 6CD2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147+ 6CD3 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 147+ 6CD7 54 29       >
 147+ 6CD9             >                org     $-1                 // alter last byte of Name just above to set
 147+ 6CD8 A9          >                db      {b $} | END_BIT     // msb as name end
 147+ 6CD9             >
 147+ 6CD9 C0 6C       >                dw      last_NFA            // Link to previous definition Name
 147+ 6CDB             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 147+ 6CDB CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 147+ 6CDE             >
 147+ 6CDE             >
 147+ 6CDE             >                endif           ; ok        // for other definitions it "points" the correct handler
 147+ 6CDE             >                // Use of "; ok" to suppress "warning[fwdref]"
 147+ 6CDE             >
 147+ 6CDE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 147+ 6CDE 98 63       >                dw      Next_Ptr
 148+ 6CE0
 149+ 6CE0              //  ______________________________________________________________________
 150+ 6CE0              //
 151+ 6CE0
 152+ 6CE0                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 152+ 6CE0             >                New_Def  S0, "S0", User_Ptr, is_normal
 152+ 6CE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ 6CE0             >
 152+ 6CE0             >                // dummy db directives used to calculate length of namec
 152+ 6CE0 53 30       >                db      "S0"
 152+ 6CE2             >len_NFA         defl    $ - temp_NFA
 152+ 6CE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ 6CE0             >
 152+ 6CE0 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ 6CE1 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 152+ 6CE3             >                org     $-1                 // alter last byte of Name just above to set
 152+ 6CE2 B0          >                db      {b $} | END_BIT     // msb as name end
 152+ 6CE3             >
 152+ 6CE3 D2 6C       >                dw      last_NFA            // Link to previous definition Name
 152+ 6CE5             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 6CE5 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 152+ 6CE8             >
 152+ 6CE8             >
 152+ 6CE8             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 6CE8             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 6CE8             >
 152+ 6CE8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 6CE8 06          >                db      06
 153+ 6CE9                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 153+ 6CE9             >                New_Def  R0, "R0", User_Ptr, is_normal
 153+ 6CE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 6CE9             >
 153+ 6CE9             >                // dummy db directives used to calculate length of namec
 153+ 6CE9 52 30       >                db      "R0"
 153+ 6CEB             >len_NFA         defl    $ - temp_NFA
 153+ 6CEB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 6CE9             >
 153+ 6CE9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 6CEA 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 153+ 6CEC             >                org     $-1                 // alter last byte of Name just above to set
 153+ 6CEB B0          >                db      {b $} | END_BIT     // msb as name end
 153+ 6CEC             >
 153+ 6CEC E0 6C       >                dw      last_NFA            // Link to previous definition Name
 153+ 6CEE             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 6CEE CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 153+ 6CF1             >
 153+ 6CF1             >
 153+ 6CF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 6CF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 6CF1             >
 153+ 6CF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 153+ 6CF1 08          >                db      08
 154+ 6CF2                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 154+ 6CF2             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 154+ 6CF2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CF2             >
 154+ 6CF2             >                // dummy db directives used to calculate length of namec
 154+ 6CF2 54 49 42    >                db      "TIB"
 154+ 6CF5             >len_NFA         defl    $ - temp_NFA
 154+ 6CF5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CF2             >
 154+ 6CF2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CF3 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 154+ 6CF6             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CF5 C2          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CF6             >
 154+ 6CF6 E9 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CF8             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CF8 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CFB             >
 154+ 6CFB             >
 154+ 6CFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CFB             >
 154+ 6CFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CFB 0A          >                db      10
 155+ 6CFC                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 155+ 6CFC             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 155+ 6CFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CFC             >
 155+ 6CFC             >                // dummy db directives used to calculate length of namec
 155+ 6CFC 57 49 44 54 >                db      "WIDTH"
 155+ 6D00 48          >
 155+ 6D01             >len_NFA         defl    $ - temp_NFA
 155+ 6D01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CFC             >
 155+ 6CFC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CFD 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 155+ 6D01 48          >
 155+ 6D02             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6D01 C8          >                db      {b $} | END_BIT     // msb as name end
 155+ 6D02             >
 155+ 6D02 F2 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6D04             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6D04 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6D07             >
 155+ 6D07             >
 155+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6D07             >
 155+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6D07 0C          >                db      12
 156+ 6D08                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 156+ 6D08             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 156+ 6D08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6D08             >
 156+ 6D08             >                // dummy db directives used to calculate length of namec
 156+ 6D08 57 41 52 4E >                db      "WARNING"
 156+ 6D0C 49 4E 47    >
 156+ 6D0F             >len_NFA         defl    $ - temp_NFA
 156+ 6D0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6D08             >
 156+ 6D08 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6D09 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 156+ 6D0D 49 4E 47    >
 156+ 6D10             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6D0F C7          >                db      {b $} | END_BIT     // msb as name end
 156+ 6D10             >
 156+ 6D10 FC 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6D12             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6D12 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6D15             >
 156+ 6D15             >
 156+ 6D15             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6D15             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6D15             >
 156+ 6D15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6D15 0E          >                db      14
 157+ 6D16                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 157+ 6D16             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 157+ 6D16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6D16             >
 157+ 6D16             >                // dummy db directives used to calculate length of namec
 157+ 6D16 46 45 4E 43 >                db      "FENCE"
 157+ 6D1A 45          >
 157+ 6D1B             >len_NFA         defl    $ - temp_NFA
 157+ 6D1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6D16             >
 157+ 6D16 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6D17 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 157+ 6D1B 45          >
 157+ 6D1C             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6D1B C5          >                db      {b $} | END_BIT     // msb as name end
 157+ 6D1C             >
 157+ 6D1C 08 6D       >                dw      last_NFA            // Link to previous definition Name
 157+ 6D1E             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6D1E CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6D21             >
 157+ 6D21             >
 157+ 6D21             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6D21             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6D21             >
 157+ 6D21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6D21 10          >                db      16
 158+ 6D22                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 158+ 6D22             >                New_Def  DP, "DP", User_Ptr, is_normal
 158+ 6D22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6D22             >
 158+ 6D22             >                // dummy db directives used to calculate length of namec
 158+ 6D22 44 50       >                db      "DP"
 158+ 6D24             >len_NFA         defl    $ - temp_NFA
 158+ 6D24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6D22             >
 158+ 6D22 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6D23 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 158+ 6D25             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6D24 D0          >                db      {b $} | END_BIT     // msb as name end
 158+ 6D25             >
 158+ 6D25 16 6D       >                dw      last_NFA            // Link to previous definition Name
 158+ 6D27             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6D27 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6D2A             >
 158+ 6D2A             >
 158+ 6D2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6D2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6D2A             >
 158+ 6D2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6D2A 12          >                db      18
 159+ 6D2B                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 159+ 6D2B             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 159+ 6D2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6D2B             >
 159+ 6D2B             >                // dummy db directives used to calculate length of namec
 159+ 6D2B 56 4F 43 2D >                db      "VOC-LINK"
 159+ 6D2F 4C 49 4E 4B >
 159+ 6D33             >len_NFA         defl    $ - temp_NFA
 159+ 6D33             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6D2B             >
 159+ 6D2B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D2C 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 159+ 6D30 4C 49 4E 4B >
 159+ 6D34             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D33 CB          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D34             >
 159+ 6D34 22 6D       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D36             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D36 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D39             >
 159+ 6D39             >
 159+ 6D39             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D39             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D39             >
 159+ 6D39             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D39 14          >                db      20
 160+ 6D3A                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 160+ 6D3A             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 160+ 6D3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D3A             >
 160+ 6D3A             >                // dummy db directives used to calculate length of namec
 160+ 6D3A 46 49 52 53 >                db      "FIRST"
 160+ 6D3E 54          >
 160+ 6D3F             >len_NFA         defl    $ - temp_NFA
 160+ 6D3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D3A             >
 160+ 6D3A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D3B 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 160+ 6D3F 54          >
 160+ 6D40             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D3F D4          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D40             >
 160+ 6D40 2B 6D       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D42             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D42 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D45             >
 160+ 6D45             >
 160+ 6D45             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D45             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D45             >
 160+ 6D45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D45 16          >                db      22
 161+ 6D46                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 161+ 6D46             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 161+ 6D46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D46             >
 161+ 6D46             >                // dummy db directives used to calculate length of namec
 161+ 6D46 4C 49 4D 49 >                db      "LIMIT"
 161+ 6D4A 54          >
 161+ 6D4B             >len_NFA         defl    $ - temp_NFA
 161+ 6D4B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D46             >
 161+ 6D46 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D47 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 161+ 6D4B 54          >
 161+ 6D4C             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D4B D4          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D4C             >
 161+ 6D4C 3A 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D4E             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D4E CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D51             >
 161+ 6D51             >
 161+ 6D51             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D51             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D51             >
 161+ 6D51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D51 18          >                db      24
 162+ 6D52                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 162+ 6D52             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 162+ 6D52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D52             >
 162+ 6D52             >                // dummy db directives used to calculate length of namec
 162+ 6D52 45 58 50    >                db      "EXP"
 162+ 6D55             >len_NFA         defl    $ - temp_NFA
 162+ 6D55             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D52             >
 162+ 6D52 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D53 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 162+ 6D56             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D55 D0          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D56             >
 162+ 6D56 46 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D58             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D58 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D5B             >
 162+ 6D5B             >
 162+ 6D5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D5B             >
 162+ 6D5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D5B 1A          >                db      26
 163+ 6D5C                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 163+ 6D5C             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 163+ 6D5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D5C             >
 163+ 6D5C             >                // dummy db directives used to calculate length of namec
 163+ 6D5C 4E 4D 4F 44 >                db      "NMODE"
 163+ 6D60 45          >
 163+ 6D61             >len_NFA         defl    $ - temp_NFA
 163+ 6D61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D5C             >
 163+ 6D5C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D5D 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 163+ 6D61 45          >
 163+ 6D62             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D61 C5          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D62             >
 163+ 6D62 52 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D64             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D64 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D67             >
 163+ 6D67             >
 163+ 6D67             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D67             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D67             >
 163+ 6D67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D67 1C          >                db      28
 164+ 6D68                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 164+ 6D68             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 164+ 6D68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D68             >
 164+ 6D68             >                // dummy db directives used to calculate length of namec
 164+ 6D68 42 4C 4B    >                db      "BLK"
 164+ 6D6B             >len_NFA         defl    $ - temp_NFA
 164+ 6D6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D68             >
 164+ 6D68 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D69 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 164+ 6D6C             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D6B CB          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D6C             >
 164+ 6D6C 5C 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D6E             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D6E CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D71             >
 164+ 6D71             >
 164+ 6D71             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D71             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D71             >
 164+ 6D71             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D71 1E          >                db      30
 165+ 6D72                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 165+ 6D72             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 165+ 6D72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D72             >
 165+ 6D72             >                // dummy db directives used to calculate length of namec
 165+ 6D72 3E 49 4E    >                db      ">IN"
 165+ 6D75             >len_NFA         defl    $ - temp_NFA
 165+ 6D75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D72             >
 165+ 6D72 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D73 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 165+ 6D76             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D75 CE          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D76             >
 165+ 6D76 68 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D78             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D78 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D7B             >
 165+ 6D7B             >
 165+ 6D7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D7B             >
 165+ 6D7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D7B 20          >                db      32
 166+ 6D7C                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 166+ 6D7C             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 166+ 6D7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D7C             >
 166+ 6D7C             >                // dummy db directives used to calculate length of namec
 166+ 6D7C 4F 55 54    >                db      "OUT"
 166+ 6D7F             >len_NFA         defl    $ - temp_NFA
 166+ 6D7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D7C             >
 166+ 6D7C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D7D 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 166+ 6D80             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D7F D4          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D80             >
 166+ 6D80 72 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D82             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D82 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D85             >
 166+ 6D85             >
 166+ 6D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D85             >
 166+ 6D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D85 22          >                db      34
 167+ 6D86                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 167+ 6D86             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 167+ 6D86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D86             >
 167+ 6D86             >                // dummy db directives used to calculate length of namec
 167+ 6D86 53 43 52    >                db      "SCR"
 167+ 6D89             >len_NFA         defl    $ - temp_NFA
 167+ 6D89             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D86             >
 167+ 6D86 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D87 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 167+ 6D8A             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D89 D2          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D8A             >
 167+ 6D8A 7C 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D8C             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D8C CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D8F             >
 167+ 6D8F             >
 167+ 6D8F             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D8F             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D8F             >
 167+ 6D8F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D8F 24          >                db      36
 168+ 6D90                              User_Def OFFSET     , "OFFSET"    , 38 //
 168+ 6D90             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 168+ 6D90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D90             >
 168+ 6D90             >                // dummy db directives used to calculate length of namec
 168+ 6D90 4F 46 46 53 >                db      "OFFSET"
 168+ 6D94 45 54       >
 168+ 6D96             >len_NFA         defl    $ - temp_NFA
 168+ 6D96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D90             >
 168+ 6D90 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D91 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 168+ 6D95 45 54       >
 168+ 6D97             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D96 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D97             >
 168+ 6D97 86 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D99             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D99 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D9C             >
 168+ 6D9C             >
 168+ 6D9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D9C             >
 168+ 6D9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D9C 26          >                db      38
 169+ 6D9D                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 169+ 6D9D             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 169+ 6D9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D9D             >
 169+ 6D9D             >                // dummy db directives used to calculate length of namec
 169+ 6D9D 43 4F 4E 54 >                db      "CONTEXT"
 169+ 6DA1 45 58 54    >
 169+ 6DA4             >len_NFA         defl    $ - temp_NFA
 169+ 6DA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D9D             >
 169+ 6D9D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D9E 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 169+ 6DA2 45 58 54    >
 169+ 6DA5             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6DA4 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ 6DA5             >
 169+ 6DA5 90 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6DA7             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6DA7 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6DAA             >
 169+ 6DAA             >
 169+ 6DAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6DAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6DAA             >
 169+ 6DAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6DAA 28          >                db      40
 170+ 6DAB                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 170+ 6DAB             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 170+ 6DAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6DAB             >
 170+ 6DAB             >                // dummy db directives used to calculate length of namec
 170+ 6DAB 43 55 52 52 >                db      "CURRENT"
 170+ 6DAF 45 4E 54    >
 170+ 6DB2             >len_NFA         defl    $ - temp_NFA
 170+ 6DB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6DAB             >
 170+ 6DAB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6DAC 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 170+ 6DB0 45 4E 54    >
 170+ 6DB3             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6DB2 D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6DB3             >
 170+ 6DB3 9D 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6DB5             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6DB5 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6DB8             >
 170+ 6DB8             >
 170+ 6DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6DB8             >
 170+ 6DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6DB8 2A          >                db      42
 171+ 6DB9                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 171+ 6DB9             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 171+ 6DB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6DB9             >
 171+ 6DB9             >                // dummy db directives used to calculate length of namec
 171+ 6DB9 53 54 41 54 >                db      "STATE"
 171+ 6DBD 45          >
 171+ 6DBE             >len_NFA         defl    $ - temp_NFA
 171+ 6DBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6DB9             >
 171+ 6DB9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6DBA 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 171+ 6DBE 45          >
 171+ 6DBF             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6DBE C5          >                db      {b $} | END_BIT     // msb as name end
 171+ 6DBF             >
 171+ 6DBF AB 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6DC1             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6DC1 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6DC4             >
 171+ 6DC4             >
 171+ 6DC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6DC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6DC4             >
 171+ 6DC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6DC4 2C          >                db      44
 172+ 6DC5                              User_Def BASE       , "BASE"      , 46 //
 172+ 6DC5             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 172+ 6DC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6DC5             >
 172+ 6DC5             >                // dummy db directives used to calculate length of namec
 172+ 6DC5 42 41 53 45 >                db      "BASE"
 172+ 6DC9             >len_NFA         defl    $ - temp_NFA
 172+ 6DC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6DC5             >
 172+ 6DC5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6DC6 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 172+ 6DCA             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6DC9 C5          >                db      {b $} | END_BIT     // msb as name end
 172+ 6DCA             >
 172+ 6DCA B9 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6DCC             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6DCC CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DCF             >
 172+ 6DCF             >
 172+ 6DCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DCF             >
 172+ 6DCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DCF 2E          >                db      46
 173+ 6DD0                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 173+ 6DD0             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 173+ 6DD0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DD0             >
 173+ 6DD0             >                // dummy db directives used to calculate length of namec
 173+ 6DD0 44 50 4C    >                db      "DPL"
 173+ 6DD3             >len_NFA         defl    $ - temp_NFA
 173+ 6DD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DD0             >
 173+ 6DD0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DD1 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 173+ 6DD4             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DD3 CC          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DD4             >
 173+ 6DD4 C5 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DD6             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DD6 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DD9             >
 173+ 6DD9             >
 173+ 6DD9             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DD9             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DD9             >
 173+ 6DD9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DD9 30          >                db      48
 174+ 6DDA                              User_Def FLD        , "FLD"       , 50 // output field width
 174+ 6DDA             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 174+ 6DDA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DDA             >
 174+ 6DDA             >                // dummy db directives used to calculate length of namec
 174+ 6DDA 46 4C 44    >                db      "FLD"
 174+ 6DDD             >len_NFA         defl    $ - temp_NFA
 174+ 6DDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DDA             >
 174+ 6DDA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DDB 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 174+ 6DDE             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DDD C4          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DDE             >
 174+ 6DDE D0 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DE0             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DE0 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DE3             >
 174+ 6DE3             >
 174+ 6DE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DE3             >
 174+ 6DE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DE3 32          >                db      50
 175+ 6DE4                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 175+ 6DE4             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 175+ 6DE4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DE4             >
 175+ 6DE4             >                // dummy db directives used to calculate length of namec
 175+ 6DE4 43 53 50    >                db      "CSP"
 175+ 6DE7             >len_NFA         defl    $ - temp_NFA
 175+ 6DE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DE4             >
 175+ 6DE4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DE5 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 175+ 6DE8             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DE7 D0          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DE8             >
 175+ 6DE8 DA 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DEA             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DEA CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DED             >
 175+ 6DED             >
 175+ 6DED             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DED             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DED             >
 175+ 6DED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DED 34          >                db      52
 176+ 6DEE                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 176+ 6DEE             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 176+ 6DEE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DEE             >
 176+ 6DEE             >                // dummy db directives used to calculate length of namec
 176+ 6DEE 52 23       >                db      "R#"
 176+ 6DF0             >len_NFA         defl    $ - temp_NFA
 176+ 6DF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DEE             >
 176+ 6DEE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DEF 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 176+ 6DF1             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DF0 A3          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DF1             >
 176+ 6DF1 E4 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DF3             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DF3 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DF6             >
 176+ 6DF6             >
 176+ 6DF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DF6             >
 176+ 6DF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DF6 36          >                db      54
 177+ 6DF7                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 177+ 6DF7             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 177+ 6DF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DF7             >
 177+ 6DF7             >                // dummy db directives used to calculate length of namec
 177+ 6DF7 48 4C 44    >                db      "HLD"
 177+ 6DFA             >len_NFA         defl    $ - temp_NFA
 177+ 6DFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DF7             >
 177+ 6DF7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DF8 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 177+ 6DFB             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DFA C4          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DFB             >
 177+ 6DFB EE 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DFD             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DFD CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6E00             >
 177+ 6E00             >
 177+ 6E00             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6E00             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6E00             >
 177+ 6E00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6E00 38          >                db      56
 178+ 6E01                              User_Def USE        , "USE"       , 58 // address of last used block
 178+ 6E01             >                New_Def  USE, "USE", User_Ptr, is_normal
 178+ 6E01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6E01             >
 178+ 6E01             >                // dummy db directives used to calculate length of namec
 178+ 6E01 55 53 45    >                db      "USE"
 178+ 6E04             >len_NFA         defl    $ - temp_NFA
 178+ 6E04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6E01             >
 178+ 6E01 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6E02 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 178+ 6E05             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6E04 C5          >                db      {b $} | END_BIT     // msb as name end
 178+ 6E05             >
 178+ 6E05 F7 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6E07             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6E07 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6E0A             >
 178+ 6E0A             >
 178+ 6E0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6E0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6E0A             >
 178+ 6E0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6E0A 3A          >                db      58
 179+ 6E0B                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 179+ 6E0B             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 179+ 6E0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6E0B             >
 179+ 6E0B             >                // dummy db directives used to calculate length of namec
 179+ 6E0B 50 52 45 56 >                db      "PREV"
 179+ 6E0F             >len_NFA         defl    $ - temp_NFA
 179+ 6E0F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6E0B             >
 179+ 6E0B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6E0C 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 179+ 6E10             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6E0F D6          >                db      {b $} | END_BIT     // msb as name end
 179+ 6E10             >
 179+ 6E10 01 6E       >                dw      last_NFA            // Link to previous definition Name
 179+ 6E12             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6E12 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6E15             >
 179+ 6E15             >
 179+ 6E15             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6E15             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6E15             >
 179+ 6E15             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6E15 3C          >                db      60
 180+ 6E16                              User_Def LP         , "LP"        , 62 // line printer (not used)
 180+ 6E16             >                New_Def  LP, "LP", User_Ptr, is_normal
 180+ 6E16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6E16             >
 180+ 6E16             >                // dummy db directives used to calculate length of namec
 180+ 6E16 4C 50       >                db      "LP"
 180+ 6E18             >len_NFA         defl    $ - temp_NFA
 180+ 6E18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6E16             >
 180+ 6E16 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6E17 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 180+ 6E19             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6E18 D0          >                db      {b $} | END_BIT     // msb as name end
 180+ 6E19             >
 180+ 6E19 0B 6E       >                dw      last_NFA            // Link to previous definition Name
 180+ 6E1B             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6E1B CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6E1E             >
 180+ 6E1E             >
 180+ 6E1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6E1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6E1E             >
 180+ 6E1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6E1E 3E          >                db      62
 181+ 6E1F                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 181+ 6E1F             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 181+ 6E1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6E1F             >
 181+ 6E1F             >                // dummy db directives used to calculate length of namec
 181+ 6E1F 50 4C 41 43 >                db      "PLACE"
 181+ 6E23 45          >
 181+ 6E24             >len_NFA         defl    $ - temp_NFA
 181+ 6E24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6E1F             >
 181+ 6E1F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6E20 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 181+ 6E24 45          >
 181+ 6E25             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6E24 C5          >                db      {b $} | END_BIT     // msb as name end
 181+ 6E25             >
 181+ 6E25 16 6E       >                dw      last_NFA            // Link to previous definition Name
 181+ 6E27             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6E27 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6E2A             >
 181+ 6E2A             >
 181+ 6E2A             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6E2A             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6E2A             >
 181+ 6E2A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6E2A 40          >                db      64
 182+ 6E2B                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 182+ 6E2B             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 182+ 6E2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6E2B             >
 182+ 6E2B             >                // dummy db directives used to calculate length of namec
 182+ 6E2B 53 4F 55 52 >                db      "SOURCE-ID"
 182+ 6E2F 43 45 2D 49 >
 182+ 6E33 44          >
 182+ 6E34             >len_NFA         defl    $ - temp_NFA
 182+ 6E34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6E2B             >
 182+ 6E2B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E2C 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 182+ 6E30 43 45 2D 49 >
 182+ 6E34 44          >
 182+ 6E35             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E34 C4          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E35             >
 182+ 6E35 1F 6E       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E37             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E37 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E3A             >
 182+ 6E3A             >
 182+ 6E3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E3A             >
 182+ 6E3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E3A 42          >                db      66
 183+ 6E3B                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 183+ 6E3B             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 183+ 6E3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E3B             >
 183+ 6E3B             >                // dummy db directives used to calculate length of namec
 183+ 6E3B 53 50 41 4E >                db      "SPAN"
 183+ 6E3F             >len_NFA         defl    $ - temp_NFA
 183+ 6E3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E3B             >
 183+ 6E3B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E3C 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 183+ 6E40             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E3F CE          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E40             >
 183+ 6E40 2B 6E       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E42             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E42 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E45             >
 183+ 6E45             >
 183+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E45             >
 183+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E45 44          >                db      68
 184+ 6E46                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 184+ 6E46             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 184+ 6E46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E46             >
 184+ 6E46             >                // dummy db directives used to calculate length of namec
 184+ 6E46 48 41 4E 44 >                db      "HANDLER"
 184+ 6E4A 4C 45 52    >
 184+ 6E4D             >len_NFA         defl    $ - temp_NFA
 184+ 6E4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E46             >
 184+ 6E46 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E47 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 184+ 6E4B 4C 45 52    >
 184+ 6E4E             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E4D D2          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E4E             >
 184+ 6E4E 3B 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E50             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E50 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E53             >
 184+ 6E53             >
 184+ 6E53             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E53             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E53             >
 184+ 6E53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E53 46          >                db      70
 185+ 6E54                              User_Def HP         , "HP"        , 72 // heap-pointer address
 185+ 6E54             >                New_Def  HP, "HP", User_Ptr, is_normal
 185+ 6E54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E54             >
 185+ 6E54             >                // dummy db directives used to calculate length of namec
 185+ 6E54 48 50       >                db      "HP"
 185+ 6E56             >len_NFA         defl    $ - temp_NFA
 185+ 6E56             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E54             >
 185+ 6E54 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E55 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 185+ 6E57             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E56 D0          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E57             >
 185+ 6E57 46 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E59             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E59 CD 4B 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E5C             >
 185+ 6E5C             >
 185+ 6E5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E5C             >
 185+ 6E5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E5C 48          >                db      72
 186+ 6E5D
 187+ 6E5D              //  ______________________________________________________________________
 188+ 6E5D              //
 189+ 6E5D              // here         -- a
 190+ 6E5D                              Colon_Def HERE, "HERE", is_normal
 190+ 6E5D             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 190+ 6E5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 6E5D             >
 190+ 6E5D             >                // dummy db directives used to calculate length of namec
 190+ 6E5D 48 45 52 45 >                db      "HERE"
 190+ 6E61             >len_NFA         defl    $ - temp_NFA
 190+ 6E61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 6E5D             >
 190+ 6E5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 6E5E 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 190+ 6E62             >                org     $-1                 // alter last byte of Name just above to set
 190+ 6E61 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 6E62             >
 190+ 6E62 54 6E       >                dw      last_NFA            // Link to previous definition Name
 190+ 6E64             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 6E64 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 190+ 6E67             >
 190+ 6E67             >
 190+ 6E67             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 6E67             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 6E67             >
 190+ 6E67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 6E67 27 6D 0C 6B                  dw      DP, FETCH               // dp @
 192+ 6E6B 48 69                        dw      EXIT                    // ;
 193+ 6E6D
 194+ 6E6D              //  ______________________________________________________________________
 195+ 6E6D              //
 196+ 6E6D              // allot        n --
 197+ 6E6D                              Colon_Def ALLOT, "ALLOT", is_normal
 197+ 6E6D             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 197+ 6E6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 197+ 6E6D             >
 197+ 6E6D             >                // dummy db directives used to calculate length of namec
 197+ 6E6D 41 4C 4C 4F >                db      "ALLOT"
 197+ 6E71 54          >
 197+ 6E72             >len_NFA         defl    $ - temp_NFA
 197+ 6E72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 197+ 6E6D             >
 197+ 6E6D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 197+ 6E6E 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 197+ 6E72 54          >
 197+ 6E73             >                org     $-1                 // alter last byte of Name just above to set
 197+ 6E72 D4          >                db      {b $} | END_BIT     // msb as name end
 197+ 6E73             >
 197+ 6E73 5D 6E       >                dw      last_NFA            // Link to previous definition Name
 197+ 6E75             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 197+ 6E75 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 197+ 6E78             >
 197+ 6E78             >
 197+ 6E78             >                endif           ; ok        // for other definitions it "points" the correct handler
 197+ 6E78             >                // Use of "; ok" to suppress "warning[fwdref]"
 197+ 6E78             >
 197+ 6E78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 198+ 6E78 27 6D ED 6A                  dw      DP,  PLUSSTORE          // dp +!
 199+ 6E7C 48 69                        dw      EXIT                    // ;
 200+ 6E7E
 201+ 6E7E              //  ______________________________________________________________________
 202+ 6E7E              //
 203+ 6E7E              // comma        n --
 204+ 6E7E                              Colon_Def COMMA, ",", is_normal
 204+ 6E7E             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 204+ 6E7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ 6E7E             >
 204+ 6E7E             >                // dummy db directives used to calculate length of namec
 204+ 6E7E 2C          >                db      ","
 204+ 6E7F             >len_NFA         defl    $ - temp_NFA
 204+ 6E7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ 6E7E             >
 204+ 6E7E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ 6E7F 2C          >                db      ","               // name string in 7-bit ascii, but
 204+ 6E80             >                org     $-1                 // alter last byte of Name just above to set
 204+ 6E7F AC          >                db      {b $} | END_BIT     // msb as name end
 204+ 6E80             >
 204+ 6E80 6D 6E       >                dw      last_NFA            // Link to previous definition Name
 204+ 6E82             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 6E82 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 6E85             >
 204+ 6E85             >
 204+ 6E85             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 6E85             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 6E85             >
 204+ 6E85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 6E85 64 6E 17 6B                  dw      HERE, STORE             // here !
 206+ 6E89 6C 6C 75 6E                  dw      TWO, ALLOT              // 2 allot
 207+ 6E8D 48 69                        dw      EXIT                    // ;
 208+ 6E8F
 209+ 6E8F              //  ______________________________________________________________________
 210+ 6E8F              //
 211+ 6E8F              // ccomma       c --
 212+ 6E8F                              Colon_Def CCOMMA, "C,", is_normal
 212+ 6E8F             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 212+ 6E8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 212+ 6E8F             >
 212+ 6E8F             >                // dummy db directives used to calculate length of namec
 212+ 6E8F 43 2C       >                db      "C,"
 212+ 6E91             >len_NFA         defl    $ - temp_NFA
 212+ 6E91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 212+ 6E8F             >
 212+ 6E8F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 212+ 6E90 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 212+ 6E92             >                org     $-1                 // alter last byte of Name just above to set
 212+ 6E91 AC          >                db      {b $} | END_BIT     // msb as name end
 212+ 6E92             >
 212+ 6E92 7E 6E       >                dw      last_NFA            // Link to previous definition Name
 212+ 6E94             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 212+ 6E94 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 212+ 6E97             >
 212+ 6E97             >
 212+ 6E97             >                endif           ; ok        // for other definitions it "points" the correct handler
 212+ 6E97             >                // Use of "; ok" to suppress "warning[fwdref]"
 212+ 6E97             >
 212+ 6E97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 213+ 6E97 64 6E 2F 6B                  dw      HERE, CSTORE            // here c!
 214+ 6E9B 63 6C 75 6E                  dw      ONE, ALLOT              // 1 allot
 215+ 6E9F 48 69                        dw      EXIT                    // ;
 216+ 6EA1
 217+ 6EA1              //  ______________________________________________________________________
 218+ 6EA1              //
 219+ 6EA1              // s>d          n -- d
 220+ 6EA1              // converts a single precision integer in a double precision
 221+ 6EA1                              New_Def S_TO_D, "S>D", is_code, is_normal
 221+ 6EA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 221+ 6EA1             >
 221+ 6EA1             >                // dummy db directives used to calculate length of namec
 221+ 6EA1 53 3E 44    >                db      "S>D"
 221+ 6EA4             >len_NFA         defl    $ - temp_NFA
 221+ 6EA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 221+ 6EA1             >
 221+ 6EA1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 221+ 6EA2 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 221+ 6EA5             >                org     $-1                 // alter last byte of Name just above to set
 221+ 6EA4 C4          >                db      {b $} | END_BIT     // msb as name end
 221+ 6EA5             >
 221+ 6EA5 8F 6E       >                dw      last_NFA            // Link to previous definition Name
 221+ 6EA7             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 221+ 6EA7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 221+ 6EA7 ~           >
 221+ 6EA7 ~           >
 221+ 6EA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 221+ 6EA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 221+ 6EA7             >
 221+ 6EA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 222+ 6EA7 D1                           pop     de
 223+ 6EA8 21 00 00                     ld      hl, 0
 224+ 6EAB 7A                           ld      a, d
 225+ 6EAC E6 80                        and     $80
 226+ 6EAE 28 01                        jr      z, S_to_D_Skip
 227+ 6EB0 2B                           dec     hl                  // $FFFF
 228+ 6EB1              S_to_D_Skip:
 229+ 6EB1 D5                           push    de
 230+ 6EB2 E5                           push    hl
 231+ 6EB3                              next
 231+ 6EB3 DD E9       >                jp      (ix)
 232+ 6EB5
 233+ 6EB5              //  ______________________________________________________________________
 234+ 6EB5              //
 235+ 6EB5              // -            n1 n2 -- n3
 236+ 6EB5              // subtraction
 237+ 6EB5                              New_Def SUBTRACT, "-", is_code, is_normal
 237+ 6EB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 237+ 6EB5             >
 237+ 6EB5             >                // dummy db directives used to calculate length of namec
 237+ 6EB5 2D          >                db      "-"
 237+ 6EB6             >len_NFA         defl    $ - temp_NFA
 237+ 6EB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 237+ 6EB5             >
 237+ 6EB5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 237+ 6EB6 2D          >                db      "-"               // name string in 7-bit ascii, but
 237+ 6EB7             >                org     $-1                 // alter last byte of Name just above to set
 237+ 6EB6 AD          >                db      {b $} | END_BIT     // msb as name end
 237+ 6EB7             >
 237+ 6EB7 A1 6E       >                dw      last_NFA            // Link to previous definition Name
 237+ 6EB9             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 237+ 6EB9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 237+ 6EB9 ~           >
 237+ 6EB9 ~           >
 237+ 6EB9             >                endif           ; ok        // for other definitions it "points" the correct handler
 237+ 6EB9             >                // Use of "; ok" to suppress "warning[fwdref]"
 237+ 6EB9             >
 237+ 6EB9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 238+ 6EB9 D1                           pop     de
 239+ 6EBA E1                           pop     hl
 240+ 6EBB A7                           and     a
 241+ 6EBC ED 52                        sbc     hl, de
 242+ 6EBE
 243+ 6EBE                              psh1
 243+ 6EBE E5          >                push    hl
 243+ 6EBF DD E9       >                jp      (ix)
 244+ 6EC1
 245+ 6EC1              //  ______________________________________________________________________
 246+ 6EC1              //
 247+ 6EC1              // =            n1 n2 -- n3
 248+ 6EC1              // equals
 249+ 6EC1                              Colon_Def EQUALS, "=", is_normal
 249+ 6EC1             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 249+ 6EC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 6EC1             >
 249+ 6EC1             >                // dummy db directives used to calculate length of namec
 249+ 6EC1 3D          >                db      "="
 249+ 6EC2             >len_NFA         defl    $ - temp_NFA
 249+ 6EC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 6EC1             >
 249+ 6EC1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 6EC2 3D          >                db      "="               // name string in 7-bit ascii, but
 249+ 6EC3             >                org     $-1                 // alter last byte of Name just above to set
 249+ 6EC2 BD          >                db      {b $} | END_BIT     // msb as name end
 249+ 6EC3             >
 249+ 6EC3 B5 6E       >                dw      last_NFA            // Link to previous definition Name
 249+ 6EC5             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 6EC5 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 249+ 6EC8             >
 249+ 6EC8             >
 249+ 6EC8             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 6EC8             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 6EC8             >
 249+ 6EC8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 250+ 6EC8 B9 6E 85 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 251+ 6ECC 48 69                        dw      EXIT                    // ;
 252+ 6ECE
 253+ 6ECE              //  ______________________________________________________________________
 254+ 6ECE              //
 255+ 6ECE              // u<           u1 u2 -- u3
 256+ 6ECE              // unsigned less-than
 257+ 6ECE                              New_Def ULESS, "U<", is_code, is_normal
 257+ 6ECE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 257+ 6ECE             >
 257+ 6ECE             >                // dummy db directives used to calculate length of namec
 257+ 6ECE 55 3C       >                db      "U<"
 257+ 6ED0             >len_NFA         defl    $ - temp_NFA
 257+ 6ED0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 257+ 6ECE             >
 257+ 6ECE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 257+ 6ECF 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 257+ 6ED1             >                org     $-1                 // alter last byte of Name just above to set
 257+ 6ED0 BC          >                db      {b $} | END_BIT     // msb as name end
 257+ 6ED1             >
 257+ 6ED1 C1 6E       >                dw      last_NFA            // Link to previous definition Name
 257+ 6ED3             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 257+ 6ED3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 257+ 6ED3 ~           >
 257+ 6ED3 ~           >
 257+ 6ED3             >                endif           ; ok        // for other definitions it "points" the correct handler
 257+ 6ED3             >                // Use of "; ok" to suppress "warning[fwdref]"
 257+ 6ED3             >
 257+ 6ED3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 258+ 6ED3 D1                           pop     de
 259+ 6ED4 E1                           pop     hl
 260+ 6ED5 A7                           and     a
 261+ 6ED6 ED 52                        sbc     hl, de
 262+ 6ED8 21 FF FF                     ld      hl, -1
 263+ 6EDB 38 01                        jr      c, ULess_Skip
 264+ 6EDD 23                               inc     hl
 265+ 6EDE              ULess_Skip:
 266+ 6EDE
 267+ 6EDE                              psh1
 267+ 6EDE E5          >                push    hl
 267+ 6EDF DD E9       >                jp      (ix)
 268+ 6EE1
 269+ 6EE1              //  ______________________________________________________________________
 270+ 6EE1              //
 271+ 6EE1              // <           n1 n2 -- n3
 272+ 6EE1              // less-than
 273+ 6EE1                              New_Def LESS, "<", is_code, is_normal
 273+ 6EE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 273+ 6EE1             >
 273+ 6EE1             >                // dummy db directives used to calculate length of namec
 273+ 6EE1 3C          >                db      "<"
 273+ 6EE2             >len_NFA         defl    $ - temp_NFA
 273+ 6EE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 273+ 6EE1             >
 273+ 6EE1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 273+ 6EE2 3C          >                db      "<"               // name string in 7-bit ascii, but
 273+ 6EE3             >                org     $-1                 // alter last byte of Name just above to set
 273+ 6EE2 BC          >                db      {b $} | END_BIT     // msb as name end
 273+ 6EE3             >
 273+ 6EE3 CE 6E       >                dw      last_NFA            // Link to previous definition Name
 273+ 6EE5             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 273+ 6EE5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 273+ 6EE5 ~           >
 273+ 6EE5 ~           >
 273+ 6EE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 273+ 6EE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 273+ 6EE5             >
 273+ 6EE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 274+ 6EE5 D1                           pop     de
 275+ 6EE6 E1                           pop     hl
 276+ 6EE7 7C                           ld      a, h
 277+ 6EE8 EE 80                        xor     $80
 278+ 6EEA 67                           ld      h, a
 279+ 6EEB 7A                           ld      a, d
 280+ 6EEC EE 80                        xor     $80
 281+ 6EEE 57                           ld      d, a
 282+ 6EEF              //              and     a
 283+ 6EEF ED 52                        sbc     hl, de
 284+ 6EF1 ED 62                        sbc     hl, hl
 285+ 6EF3                              psh1
 285+ 6EF3 E5          >                push    hl
 285+ 6EF4 DD E9       >                jp      (ix)
 286+ 6EF6
 287+ 6EF6              //  ______________________________________________________________________
 288+ 6EF6              //
 289+ 6EF6              // >            n1 n2 -- n3
 290+ 6EF6              // greater than
 291+ 6EF6                              Colon_Def GREATER, ">", is_normal
 291+ 6EF6             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 291+ 6EF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 291+ 6EF6             >
 291+ 6EF6             >                // dummy db directives used to calculate length of namec
 291+ 6EF6 3E          >                db      ">"
 291+ 6EF7             >len_NFA         defl    $ - temp_NFA
 291+ 6EF7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 291+ 6EF6             >
 291+ 6EF6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 291+ 6EF7 3E          >                db      ">"               // name string in 7-bit ascii, but
 291+ 6EF8             >                org     $-1                 // alter last byte of Name just above to set
 291+ 6EF7 BE          >                db      {b $} | END_BIT     // msb as name end
 291+ 6EF8             >
 291+ 6EF8 E1 6E       >                dw      last_NFA            // Link to previous definition Name
 291+ 6EFA             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 291+ 6EFA CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 291+ 6EFD             >
 291+ 6EFD             >
 291+ 6EFD             >                endif           ; ok        // for other definitions it "points" the correct handler
 291+ 6EFD             >                // Use of "; ok" to suppress "warning[fwdref]"
 291+ 6EFD             >
 291+ 6EFD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 292+ 6EFD 80 6A E5 6E                  dw      SWAP, LESS              // swap <
 293+ 6F01 48 69                        dw      EXIT                    // ;
 294+ 6F03              //  ______________________________________________________________________
 295+ 6F03              //
 296+ 6F03              // min          n1 n2 -- n3
 297+ 6F03              // minimum between n1 and n2
 298+ 6F03                              Colon_Def MIN, "MIN" , is_normal
 298+ 6F03             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 298+ 6F03             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 298+ 6F03             >
 298+ 6F03             >                // dummy db directives used to calculate length of namec
 298+ 6F03 4D 49 4E    >                db      "MIN"
 298+ 6F06             >len_NFA         defl    $ - temp_NFA
 298+ 6F06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 298+ 6F03             >
 298+ 6F03 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 298+ 6F04 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 298+ 6F07             >                org     $-1                 // alter last byte of Name just above to set
 298+ 6F06 CE          >                db      {b $} | END_BIT     // msb as name end
 298+ 6F07             >
 298+ 6F07 F6 6E       >                dw      last_NFA            // Link to previous definition Name
 298+ 6F09             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 298+ 6F09 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 298+ 6F0C             >
 298+ 6F0C             >
 298+ 6F0C             >                endif           ; ok        // for other definitions it "points" the correct handler
 298+ 6F0C             >                // Use of "; ok" to suppress "warning[fwdref]"
 298+ 6F0C             >
 298+ 6F0C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 299+ 6F0C E0 6A                        dw      TWO_DUP                 // 2dup
 300+ 6F0E FA 6E                        dw      GREATER                 // >
 301+ 6F10 1C 64                        dw      ZBRANCH
 302+ 6F12 04 00                        dw      Min_Skip - $   // if
 303+ 6F14 80 6A                        dw          SWAP                //      swap
 304+ 6F16              Min_Skip:                                       // endif
 305+ 6F16 5E 6A                        dw      DROP                    // drop
 306+ 6F18 48 69                        dw      EXIT                    // ;
 307+ 6F1A
 308+ 6F1A              //  ______________________________________________________________________
 309+ 6F1A              //
 310+ 6F1A              // max          n1 n2 -- n3
 311+ 6F1A              // maximum between n1 and n2
 312+ 6F1A                              Colon_Def MAX, "MAX", is_normal
 312+ 6F1A             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 312+ 6F1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 312+ 6F1A             >
 312+ 6F1A             >                // dummy db directives used to calculate length of namec
 312+ 6F1A 4D 41 58    >                db      "MAX"
 312+ 6F1D             >len_NFA         defl    $ - temp_NFA
 312+ 6F1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 312+ 6F1A             >
 312+ 6F1A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 312+ 6F1B 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 312+ 6F1E             >                org     $-1                 // alter last byte of Name just above to set
 312+ 6F1D D8          >                db      {b $} | END_BIT     // msb as name end
 312+ 6F1E             >
 312+ 6F1E 03 6F       >                dw      last_NFA            // Link to previous definition Name
 312+ 6F20             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 312+ 6F20 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 312+ 6F23             >
 312+ 6F23             >
 312+ 6F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 312+ 6F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 312+ 6F23             >
 312+ 6F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 313+ 6F23 E0 6A                        dw      TWO_DUP                 // 2dup
 314+ 6F25 E5 6E                        dw      LESS                    // <
 315+ 6F27 1C 64                        dw      ZBRANCH
 316+ 6F29 04 00                        dw      Max_Skip - $   // if
 317+ 6F2B 80 6A                        dw          SWAP                //      swap
 318+ 6F2D              Max_Skip:                                       // endif
 319+ 6F2D 5E 6A                        dw      DROP                    // drop
 320+ 6F2F 48 69                        dw      EXIT                    // ;
 321+ 6F31
 322+ 6F31              //  ______________________________________________________________________
 323+ 6F31              //
 324+ 6F31              // ?dup         n -- 0 | n n
 325+ 6F31              // duplicate if not zero
 326+ 6F31                              New_Def QDUP, "?DUP", is_code, is_normal
 326+ 6F31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ 6F31             >
 326+ 6F31             >                // dummy db directives used to calculate length of namec
 326+ 6F31 3F 44 55 50 >                db      "?DUP"
 326+ 6F35             >len_NFA         defl    $ - temp_NFA
 326+ 6F35             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ 6F31             >
 326+ 6F31 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ 6F32 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 326+ 6F36             >                org     $-1                 // alter last byte of Name just above to set
 326+ 6F35 D0          >                db      {b $} | END_BIT     // msb as name end
 326+ 6F36             >
 326+ 6F36 1A 6F       >                dw      last_NFA            // Link to previous definition Name
 326+ 6F38             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 6F38 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 6F38 ~           >
 326+ 6F38 ~           >
 326+ 6F38             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 6F38             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 6F38             >
 326+ 6F38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 6F38              QDup_Ptr:
 328+ 6F38 E1                           pop     hl
 329+ 6F39 7C                           ld      a, h
 330+ 6F3A B5                           or      l
 331+ 6F3B 28 01                        jr      z, QDup_Skip
 332+ 6F3D E5                               push    hl
 333+ 6F3E              QDup_Skip:
 334+ 6F3E                              psh1
 334+ 6F3E E5          >                push    hl
 334+ 6F3F DD E9       >                jp      (ix)
 335+ 6F41
 336+ 6F41              //  ______________________________________________________________________
 337+ 6F41              //
 338+ 6F41              // -dup         n -- 0 | n n
 339+ 6F41              // duplicate if not zero
 340+ 6F41                              New_Def LDUP, "-DUP", is_code, is_normal
 340+ 6F41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 340+ 6F41             >
 340+ 6F41             >                // dummy db directives used to calculate length of namec
 340+ 6F41 2D 44 55 50 >                db      "-DUP"
 340+ 6F45             >len_NFA         defl    $ - temp_NFA
 340+ 6F45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 340+ 6F41             >
 340+ 6F41 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 340+ 6F42 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 340+ 6F46             >                org     $-1                 // alter last byte of Name just above to set
 340+ 6F45 D0          >                db      {b $} | END_BIT     // msb as name end
 340+ 6F46             >
 340+ 6F46 31 6F       >                dw      last_NFA            // Link to previous definition Name
 340+ 6F48             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 340+ 6F48 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 340+ 6F48 ~           >
 340+ 6F48 ~           >
 340+ 6F48             >                endif           ; ok        // for other definitions it "points" the correct handler
 340+ 6F48             >                // Use of "; ok" to suppress "warning[fwdref]"
 340+ 6F48             >
 340+ 6F48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 341+ 6F48 C3 38 6F                     jp      QDup_Ptr
 342+ 6F4B
 343+ 6F4B              //  ______________________________________________________________________
 344+ 6F4B              //
 345+ 6F4B              // emit         c --
 346+ 6F4B                              Colon_Def EMIT, "EMIT", is_normal
 346+ 6F4B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 346+ 6F4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 346+ 6F4B             >
 346+ 6F4B             >                // dummy db directives used to calculate length of namec
 346+ 6F4B 45 4D 49 54 >                db      "EMIT"
 346+ 6F4F             >len_NFA         defl    $ - temp_NFA
 346+ 6F4F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 346+ 6F4B             >
 346+ 6F4B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 346+ 6F4C 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 346+ 6F50             >                org     $-1                 // alter last byte of Name just above to set
 346+ 6F4F D4          >                db      {b $} | END_BIT     // msb as name end
 346+ 6F50             >
 346+ 6F50 41 6F       >                dw      last_NFA            // Link to previous definition Name
 346+ 6F52             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 346+ 6F52 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 346+ 6F55             >
 346+ 6F55             >
 346+ 6F55             >                endif           ; ok        // for other definitions it "points" the correct handler
 346+ 6F55             >                // Use of "; ok" to suppress "warning[fwdref]"
 346+ 6F55             >
 346+ 6F55             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 347+ 6F55 22 66                        dw      C_EMIT                      // (?emit)
 348+ 6F57 38 6F                        dw      QDUP                        // ?dup
 349+ 6F59                                                                  // if
 350+ 6F59 1C 64                        dw      ZBRANCH
 351+ 6F5B 0A 00                        dw      Emit_Skip - $
 352+ 6F5D E7 65                        dw          EMITC                   //      emitc
 353+ 6F5F 63 6C                        dw          ONE                     //      1
 354+ 6F61 82 6D ED 6A                  dw          OUT, PLUSSTORE        //      out +!
 355+ 6F65              Emit_Skip:                                          // endif
 356+ 6F65 48 69                        dw      EXIT                        // ;
 357+ 6F67
 358+ 6F67              //  ______________________________________________________________________
 359+ 6F67              //
 360+ 6F67              // space        --
 361+ 6F67                              Colon_Def SPACE, "SPACE", is_normal
 361+ 6F67             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 361+ 6F67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 361+ 6F67             >
 361+ 6F67             >                // dummy db directives used to calculate length of namec
 361+ 6F67 53 50 41 43 >                db      "SPACE"
 361+ 6F6B 45          >
 361+ 6F6C             >len_NFA         defl    $ - temp_NFA
 361+ 6F6C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 361+ 6F67             >
 361+ 6F67 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 361+ 6F68 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 361+ 6F6C 45          >
 361+ 6F6D             >                org     $-1                 // alter last byte of Name just above to set
 361+ 6F6C C5          >                db      {b $} | END_BIT     // msb as name end
 361+ 6F6D             >
 361+ 6F6D 4B 6F       >                dw      last_NFA            // Link to previous definition Name
 361+ 6F6F             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 361+ 6F6F CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 361+ 6F72             >
 361+ 6F72             >
 361+ 6F72             >                endif           ; ok        // for other definitions it "points" the correct handler
 361+ 6F72             >                // Use of "; ok" to suppress "warning[fwdref]"
 361+ 6F72             >
 361+ 6F72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 362+ 6F72 89 6C 52 6F                  dw      BL, EMIT                // bl emit
 363+ 6F76 48 69                        dw      EXIT                    // ;
 364+ 6F78
 365+ 6F78              //  ______________________________________________________________________
 366+ 6F78              //
 367+ 6F78              // traverse     a n -- a
 368+ 6F78              // A dictionary entry is structured as follows
 369+ 6F78              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 370+ 6F78              //      +1   word name, last character is toggled with $80
 371+ 6F78              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 372+ 6F78              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 373+ 6F78              // PFA: +6+n "is_code", definitions have no PFA. // +5
 374+ 6F78              //
 375+ 6F78                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 375+ 6F78             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 375+ 6F78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ 6F78             >
 375+ 6F78             >                // dummy db directives used to calculate length of namec
 375+ 6F78 54 52 41 56 >                db      "TRAVERSE"
 375+ 6F7C 45 52 53 45 >
 375+ 6F80             >len_NFA         defl    $ - temp_NFA
 375+ 6F80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ 6F78             >
 375+ 6F78 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ 6F79 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 375+ 6F7D 45 52 53 45 >
 375+ 6F81             >                org     $-1                 // alter last byte of Name just above to set
 375+ 6F80 C5          >                db      {b $} | END_BIT     // msb as name end
 375+ 6F81             >
 375+ 6F81 67 6F       >                dw      last_NFA            // Link to previous definition Name
 375+ 6F83             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 6F83 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 375+ 6F86             >
 375+ 6F86             >
 375+ 6F86             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 6F86             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 6F86             >
 375+ 6F86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 6F86 80 6A                        dw      SWAP                    // swap
 377+ 6F88              Traverse_Begin:                                 // begin
 378+ 6F88 50 6A C3 69                  dw          OVER, PLUS          //      over +
 379+ 6F8C A5 63 7F 00                  dw          LIT, 127            //      127
 380+ 6F90 50 6A 23 6B                  dw          OVER, CFETCH        //      over @
 381+ 6F94 E5 6E                        dw          LESS                //      <
 382+ 6F96                                                              // until
 383+ 6F96 1C 64                        dw      ZBRANCH
 384+ 6F98 F0 FF                        dw      Traverse_Begin - $
 385+ 6F9A 67 6A                        dw      NIP                     //  nip
 386+ 6F9C 48 69                        dw      EXIT                    //  ;
 387+ 6F9E
 388+ 6F9E              //  ______________________________________________________________________
 389+ 6F9E              //
 390+ 6F9E              // latest       -- nfa
 391+ 6F9E                              Colon_Def LATEST, "LATEST", is_normal
 391+ 6F9E             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 391+ 6F9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 391+ 6F9E             >
 391+ 6F9E             >                // dummy db directives used to calculate length of namec
 391+ 6F9E 4C 41 54 45 >                db      "LATEST"
 391+ 6FA2 53 54       >
 391+ 6FA4             >len_NFA         defl    $ - temp_NFA
 391+ 6FA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 391+ 6F9E             >
 391+ 6F9E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 391+ 6F9F 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 391+ 6FA3 53 54       >
 391+ 6FA5             >                org     $-1                 // alter last byte of Name just above to set
 391+ 6FA4 D4          >                db      {b $} | END_BIT     // msb as name end
 391+ 6FA5             >
 391+ 6FA5 78 6F       >                dw      last_NFA            // Link to previous definition Name
 391+ 6FA7             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 391+ 6FA7 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 391+ 6FAA             >
 391+ 6FAA             >
 391+ 6FAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 391+ 6FAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 391+ 6FAA             >
 391+ 6FAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 392+ 6FAA B5 6D                        dw      CURRENT                 // current
 393+ 6FAC 0C 6B 0C 6B                  dw      FETCH, FETCH            // @ @
 394+ 6FB0 48 69                        dw      EXIT                    // ;
 395+ 6FB2
 396+ 6FB2              //  ______________________________________________________________________
 397+ 6FB2              //
 398+ 6FB2              // lfa          pfa -- lfa
 399+ 6FB2                              Colon_Def LFA, "LFA", is_normal
 399+ 6FB2             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 399+ 6FB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ 6FB2             >
 399+ 6FB2             >                // dummy db directives used to calculate length of namec
 399+ 6FB2 4C 46 41    >                db      "LFA"
 399+ 6FB5             >len_NFA         defl    $ - temp_NFA
 399+ 6FB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ 6FB2             >
 399+ 6FB2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ 6FB3 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 399+ 6FB6             >                org     $-1                 // alter last byte of Name just above to set
 399+ 6FB5 C1          >                db      {b $} | END_BIT     // msb as name end
 399+ 6FB6             >
 399+ 6FB6 9E 6F       >                dw      last_NFA            // Link to previous definition Name
 399+ 6FB8             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 6FB8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 6FBB             >
 399+ 6FBB             >
 399+ 6FBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 6FBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 6FBB             >
 399+ 6FBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 6FBB A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 401+ 6FBF B9 6E                        dw      SUBTRACT                // cell- --> -
 402+ 6FC1 48 69                        dw      EXIT                    // ;
 403+ 6FC3
 404+ 6FC3              //  ______________________________________________________________________
 405+ 6FC3              //
 406+ 6FC3              // cfa          pfa -- cfa
 407+ 6FC3                              Colon_Def CFA, "CFA", is_normal
 407+ 6FC3             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 407+ 6FC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 6FC3             >
 407+ 6FC3             >                // dummy db directives used to calculate length of namec
 407+ 6FC3 43 46 41    >                db      "CFA"
 407+ 6FC6             >len_NFA         defl    $ - temp_NFA
 407+ 6FC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 6FC3             >
 407+ 6FC3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 6FC4 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 407+ 6FC7             >                org     $-1                 // alter last byte of Name just above to set
 407+ 6FC6 C1          >                db      {b $} | END_BIT     // msb as name end
 407+ 6FC7             >
 407+ 6FC7 B2 6F       >                dw      last_NFA            // Link to previous definition Name
 407+ 6FC9             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 6FC9 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 6FCC             >
 407+ 6FCC             >
 407+ 6FCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 6FCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 6FCC             >
 407+ 6FCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 6FCC              //              dw      CELL_MINUS              // cell-
 409+ 6FCC 75 6C B9 6E                  dw      THREE, SUBTRACT         // 3 -
 410+ 6FD0 48 69                        dw      EXIT                    // ;
 411+ 6FD2
 412+ 6FD2              //  ______________________________________________________________________
 413+ 6FD2              //
 414+ 6FD2              // nfa          pfa -- nfa
 415+ 6FD2                              Colon_Def NFA, "NFA", is_normal
 415+ 6FD2             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 415+ 6FD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 415+ 6FD2             >
 415+ 6FD2             >                // dummy db directives used to calculate length of namec
 415+ 6FD2 4E 46 41    >                db      "NFA"
 415+ 6FD5             >len_NFA         defl    $ - temp_NFA
 415+ 6FD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 415+ 6FD2             >
 415+ 6FD2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 415+ 6FD3 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 415+ 6FD6             >                org     $-1                 // alter last byte of Name just above to set
 415+ 6FD5 C1          >                db      {b $} | END_BIT     // msb as name end
 415+ 6FD6             >
 415+ 6FD6 C3 6F       >                dw      last_NFA            // Link to previous definition Name
 415+ 6FD8             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 415+ 6FD8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 415+ 6FDB             >
 415+ 6FDB             >
 415+ 6FDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 415+ 6FDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 415+ 6FDB             >
 415+ 6FDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 416+ 6FDB A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 417+ 6FDF B9 6E                        dw      SUBTRACT                // -
 418+ 6FE1 7F 6C                        dw      NEG_ONE                 // -1
 419+ 6FE3 83 6F                        dw      TRAVERSE                // traverse
 420+ 6FE5 48 69                        dw      EXIT                    // ;
 421+ 6FE7
 422+ 6FE7              //  ______________________________________________________________________
 423+ 6FE7              //
 424+ 6FE7              // pfa          nfa -- pfa
 425+ 6FE7                              Colon_Def PFA, "PFA", is_normal
 425+ 6FE7             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 425+ 6FE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 425+ 6FE7             >
 425+ 6FE7             >                // dummy db directives used to calculate length of namec
 425+ 6FE7 50 46 41    >                db      "PFA"
 425+ 6FEA             >len_NFA         defl    $ - temp_NFA
 425+ 6FEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 425+ 6FE7             >
 425+ 6FE7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 425+ 6FE8 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 425+ 6FEB             >                org     $-1                 // alter last byte of Name just above to set
 425+ 6FEA C1          >                db      {b $} | END_BIT     // msb as name end
 425+ 6FEB             >
 425+ 6FEB D2 6F       >                dw      last_NFA            // Link to previous definition Name
 425+ 6FED             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 425+ 6FED CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 425+ 6FF0             >
 425+ 6FF0             >
 425+ 6FF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 425+ 6FF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 425+ 6FF0             >
 425+ 6FF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 426+ 6FF0 63 6C                        dw      ONE                     // 1
 427+ 6FF2 83 6F                        dw      TRAVERSE                // traverse
 428+ 6FF4 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 429+ 6FF8 C3 69                        dw      PLUS                    // +
 430+ 6FFA 48 69                        dw      EXIT                    // ;
 431+ 6FFC
 432+ 6FFC              //  ______________________________________________________________________
 433+ 6FFC              //
 434+ 6FFC              // >body        cfa -- pfa
 435+ 6FFC                              Colon_Def TO_BODY, ">BODY", is_normal
 435+ 6FFC             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 435+ 6FFC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 435+ 6FFC             >
 435+ 6FFC             >                // dummy db directives used to calculate length of namec
 435+ 6FFC 3E 42 4F 44 >                db      ">BODY"
 435+ 7000 59          >
 435+ 7001             >len_NFA         defl    $ - temp_NFA
 435+ 7001             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 435+ 6FFC             >
 435+ 6FFC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 435+ 6FFD 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 435+ 7001 59          >
 435+ 7002             >                org     $-1                 // alter last byte of Name just above to set
 435+ 7001 D9          >                db      {b $} | END_BIT     // msb as name end
 435+ 7002             >
 435+ 7002 E7 6F       >                dw      last_NFA            // Link to previous definition Name
 435+ 7004             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 435+ 7004 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 435+ 7007             >
 435+ 7007             >
 435+ 7007             >                endif           ; ok        // for other definitions it "points" the correct handler
 435+ 7007             >                // Use of "; ok" to suppress "warning[fwdref]"
 435+ 7007             >
 435+ 7007             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 436+ 7007 75 6C C3 69                  dw      THREE, PLUS             // cell+ --> 3 +
 437+ 700B 48 69                        dw      EXIT                    // ;
 438+ 700D
 439+ 700D              //  ______________________________________________________________________
 440+ 700D              //
 441+ 700D              // <name        cfa -- nfa
 442+ 700D                              Colon_Def TO_NAME, "<NAME", is_normal
 442+ 700D             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 442+ 700D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ 700D             >
 442+ 700D             >                // dummy db directives used to calculate length of namec
 442+ 700D 3C 4E 41 4D >                db      "<NAME"
 442+ 7011 45          >
 442+ 7012             >len_NFA         defl    $ - temp_NFA
 442+ 7012             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ 700D             >
 442+ 700D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ 700E 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 442+ 7012 45          >
 442+ 7013             >                org     $-1                 // alter last byte of Name just above to set
 442+ 7012 C5          >                db      {b $} | END_BIT     // msb as name end
 442+ 7013             >
 442+ 7013 FC 6F       >                dw      last_NFA            // Link to previous definition Name
 442+ 7015             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 7015 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 442+ 7018             >
 442+ 7018             >
 442+ 7018             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 7018             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 7018             >
 442+ 7018             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 7018 04 70                        dw      TO_BODY                 // >body
 444+ 701A D8 6F                        dw      NFA                     // nfa
 445+ 701C 48 69                        dw      EXIT                    // ;
 446+ 701E
 447+ 701E              //  ______________________________________________________________________
 448+ 701E              //
 449+ 701E              // !csp         --
 450+ 701E              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 451+ 701E                              Colon_Def STORE_CSP, "!CSP", is_normal
 451+ 701E             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 451+ 701E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 451+ 701E             >
 451+ 701E             >                // dummy db directives used to calculate length of namec
 451+ 701E 21 43 53 50 >                db      "!CSP"
 451+ 7022             >len_NFA         defl    $ - temp_NFA
 451+ 7022             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 451+ 701E             >
 451+ 701E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 451+ 701F 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 451+ 7023             >                org     $-1                 // alter last byte of Name just above to set
 451+ 7022 D0          >                db      {b $} | END_BIT     // msb as name end
 451+ 7023             >
 451+ 7023 0D 70       >                dw      last_NFA            // Link to previous definition Name
 451+ 7025             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 451+ 7025 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 451+ 7028             >
 451+ 7028             >
 451+ 7028             >                endif           ; ok        // for other definitions it "points" the correct handler
 451+ 7028             >                // Use of "; ok" to suppress "warning[fwdref]"
 451+ 7028             >
 451+ 7028             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 452+ 7028 18 69                        dw      SPFETCH                 // sp@
 453+ 702A EA 6D 17 6B                  dw      CSP, STORE              // csp !
 454+ 702E 48 69                        dw      EXIT                    // ;
 455+ 7030
 456+ 7030              //  ______________________________________________________________________
 457+ 7030              //
 458+ 7030              // ?error       f n --
 459+ 7030              // rase error n if flag f it true
 460+ 7030                              Colon_Def QERROR, "?ERROR", is_normal
 460+ 7030             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 460+ 7030             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 460+ 7030             >
 460+ 7030             >                // dummy db directives used to calculate length of namec
 460+ 7030 3F 45 52 52 >                db      "?ERROR"
 460+ 7034 4F 52       >
 460+ 7036             >len_NFA         defl    $ - temp_NFA
 460+ 7036             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 460+ 7030             >
 460+ 7030 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 460+ 7031 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 460+ 7035 4F 52       >
 460+ 7037             >                org     $-1                 // alter last byte of Name just above to set
 460+ 7036 D2          >                db      {b $} | END_BIT     // msb as name end
 460+ 7037             >
 460+ 7037 1E 70       >                dw      last_NFA            // Link to previous definition Name
 460+ 7039             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 460+ 7039 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 460+ 703C             >
 460+ 703C             >
 460+ 703C             >                endif           ; ok        // for other definitions it "points" the correct handler
 460+ 703C             >                // Use of "; ok" to suppress "warning[fwdref]"
 460+ 703C             >
 460+ 703C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 461+ 703C 80 6A                        dw      SWAP                    // swap
 462+ 703E                                                              // if
 463+ 703E 1C 64                        dw      ZBRANCH
 464+ 7040 08 00                        dw      QError_Else - $
 465+ 7042 CC 75                        dw          ERROR               //      error  ( is a forward-ref )
 466+ 7044                                                              // else
 467+ 7044 07 64                        dw      BRANCH
 468+ 7046 04 00                        dw      QError_Endif - $
 469+ 7048              QError_Else:
 470+ 7048 5E 6A                        dw          DROP                //      drop
 471+ 704A              QError_Endif:                                   // endif
 472+ 704A 48 69                        dw      EXIT                    // ;
 473+ 704C
 474+ 704C              //  ______________________________________________________________________
 475+ 704C              //
 476+ 704C              // ?comp       --
 477+ 704C              // raise msg #17 if not compiling
 478+ 704C                              Colon_Def QCOMP, "?COMP", is_normal
 478+ 704C             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 478+ 704C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 704C             >
 478+ 704C             >                // dummy db directives used to calculate length of namec
 478+ 704C 3F 43 4F 4D >                db      "?COMP"
 478+ 7050 50          >
 478+ 7051             >len_NFA         defl    $ - temp_NFA
 478+ 7051             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 704C             >
 478+ 704C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 704D 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 478+ 7051 50          >
 478+ 7052             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7051 D0          >                db      {b $} | END_BIT     // msb as name end
 478+ 7052             >
 478+ 7052 30 70       >                dw      last_NFA            // Link to previous definition Name
 478+ 7054             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7054 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7057             >
 478+ 7057             >
 478+ 7057             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7057             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7057             >
 478+ 7057             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7057 C1 6D 0C 6B                  dw      STATE, FETCH            // state @
 480+ 705B 85 69                        dw      ZEQUAL                  // 0=
 481+ 705D A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 482+ 7061 39 70                        dw      QERROR                  // ?error
 483+ 7063 48 69                        dw      EXIT                    // ;
 484+ 7065
 485+ 7065              //  ______________________________________________________________________
 486+ 7065              //
 487+ 7065              // ?exec       --
 488+ 7065              // raise msg #18 if compiling
 489+ 7065                              Colon_Def QEXEC, "?EXEC", is_normal
 489+ 7065             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 489+ 7065             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 489+ 7065             >
 489+ 7065             >                // dummy db directives used to calculate length of namec
 489+ 7065 3F 45 58 45 >                db      "?EXEC"
 489+ 7069 43          >
 489+ 706A             >len_NFA         defl    $ - temp_NFA
 489+ 706A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 489+ 7065             >
 489+ 7065 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 489+ 7066 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 489+ 706A 43          >
 489+ 706B             >                org     $-1                 // alter last byte of Name just above to set
 489+ 706A C3          >                db      {b $} | END_BIT     // msb as name end
 489+ 706B             >
 489+ 706B 4C 70       >                dw      last_NFA            // Link to previous definition Name
 489+ 706D             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 489+ 706D CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 489+ 7070             >
 489+ 7070             >
 489+ 7070             >                endif           ; ok        // for other definitions it "points" the correct handler
 489+ 7070             >                // Use of "; ok" to suppress "warning[fwdref]"
 489+ 7070             >
 489+ 7070             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 490+ 7070 C1 6D 0C 6B                  dw      STATE, FETCH            // state @
 491+ 7074 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 492+ 7078 39 70                        dw      QERROR                  // ?error
 493+ 707A 48 69                        dw      EXIT                    // ;
 494+ 707C
 495+ 707C              //  ______________________________________________________________________
 496+ 707C              //
 497+ 707C              // ?pairs       n1 n2 --
 498+ 707C              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 499+ 707C                              Colon_Def QPAIRS, "?PAIRS", is_normal
 499+ 707C             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 499+ 707C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 499+ 707C             >
 499+ 707C             >                // dummy db directives used to calculate length of namec
 499+ 707C 3F 50 41 49 >                db      "?PAIRS"
 499+ 7080 52 53       >
 499+ 7082             >len_NFA         defl    $ - temp_NFA
 499+ 7082             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 499+ 707C             >
 499+ 707C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 499+ 707D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 499+ 7081 52 53       >
 499+ 7083             >                org     $-1                 // alter last byte of Name just above to set
 499+ 7082 D3          >                db      {b $} | END_BIT     // msb as name end
 499+ 7083             >
 499+ 7083 65 70       >                dw      last_NFA            // Link to previous definition Name
 499+ 7085             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 499+ 7085 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 499+ 7088             >
 499+ 7088             >
 499+ 7088             >                endif           ; ok        // for other definitions it "points" the correct handler
 499+ 7088             >                // Use of "; ok" to suppress "warning[fwdref]"
 499+ 7088             >
 499+ 7088             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 500+ 7088 B9 6E                        dw      SUBTRACT                // -
 501+ 708A A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 502+ 708E 39 70                        dw      QERROR                  // ?error
 503+ 7090 48 69                        dw      EXIT                    // ;
 504+ 7092
 505+ 7092              //  ______________________________________________________________________
 506+ 7092              //
 507+ 7092              // ?csp       --
 508+ 7092              // raise msg #20 if surrent SP in not what previously saved in CSP.
 509+ 7092              // Compiler relies on that for  syntax checking of structures
 510+ 7092                              Colon_Def QCSP, "?CSP", is_normal
 510+ 7092             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 510+ 7092             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 510+ 7092             >
 510+ 7092             >                // dummy db directives used to calculate length of namec
 510+ 7092 3F 43 53 50 >                db      "?CSP"
 510+ 7096             >len_NFA         defl    $ - temp_NFA
 510+ 7096             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 510+ 7092             >
 510+ 7092 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 510+ 7093 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 510+ 7097             >                org     $-1                 // alter last byte of Name just above to set
 510+ 7096 D0          >                db      {b $} | END_BIT     // msb as name end
 510+ 7097             >
 510+ 7097 7C 70       >                dw      last_NFA            // Link to previous definition Name
 510+ 7099             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 510+ 7099 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 510+ 709C             >
 510+ 709C             >
 510+ 709C             >                endif           ; ok        // for other definitions it "points" the correct handler
 510+ 709C             >                // Use of "; ok" to suppress "warning[fwdref]"
 510+ 709C             >
 510+ 709C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 511+ 709C 18 69                        dw      SPFETCH                 // sp@
 512+ 709E EA 6D 0C 6B                  dw      CSP, FETCH              // csp @
 513+ 70A2 B9 6E                        dw      SUBTRACT                // -
 514+ 70A4 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 515+ 70A8 39 70                        dw      QERROR                  // ?error
 516+ 70AA 48 69                        dw      EXIT                    // ;
 517+ 70AC
 518+ 70AC              //  ______________________________________________________________________
 519+ 70AC              //
 520+ 70AC              // ?loading      --
 521+ 70AC              // raise msg #22 if not loading
 522+ 70AC                              Colon_Def QLOADING, "?LOADING", is_normal
 522+ 70AC             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 522+ 70AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 70AC             >
 522+ 70AC             >                // dummy db directives used to calculate length of namec
 522+ 70AC 3F 4C 4F 41 >                db      "?LOADING"
 522+ 70B0 44 49 4E 47 >
 522+ 70B4             >len_NFA         defl    $ - temp_NFA
 522+ 70B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 70AC             >
 522+ 70AC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 70AD 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 522+ 70B1 44 49 4E 47 >
 522+ 70B5             >                org     $-1                 // alter last byte of Name just above to set
 522+ 70B4 C7          >                db      {b $} | END_BIT     // msb as name end
 522+ 70B5             >
 522+ 70B5 92 70       >                dw      last_NFA            // Link to previous definition Name
 522+ 70B7             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 70B7 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 70BA             >
 522+ 70BA             >
 522+ 70BA             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 70BA             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 70BA             >
 522+ 70BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 70BA 6E 6D 0C 6B                  dw      BLK, FETCH              // blk @
 524+ 70BE 85 69                        dw      ZEQUAL                  // 0=
 525+ 70C0 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 526+ 70C4 39 70                        dw      QERROR                  // ?error
 527+ 70C6 48 69                        dw      EXIT                    // ;
 528+ 70C8
 529+ 70C8              //  ______________________________________________________________________
 530+ 70C8              //
 531+ 70C8              // compile      --
 532+ 70C8              // compiles the following word
 533+ 70C8                              Colon_Def COMPILE, "COMPILE", is_normal
 533+ 70C8             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 533+ 70C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 533+ 70C8             >
 533+ 70C8             >                // dummy db directives used to calculate length of namec
 533+ 70C8 43 4F 4D 50 >                db      "COMPILE"
 533+ 70CC 49 4C 45    >
 533+ 70CF             >len_NFA         defl    $ - temp_NFA
 533+ 70CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 533+ 70C8             >
 533+ 70C8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 533+ 70C9 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 533+ 70CD 49 4C 45    >
 533+ 70D0             >                org     $-1                 // alter last byte of Name just above to set
 533+ 70CF C5          >                db      {b $} | END_BIT     // msb as name end
 533+ 70D0             >
 533+ 70D0 AC 70       >                dw      last_NFA            // Link to previous definition Name
 533+ 70D2             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 533+ 70D2 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 533+ 70D5             >
 533+ 70D5             >
 533+ 70D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 533+ 70D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 533+ 70D5             >
 533+ 70D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 534+ 70D5 54 70                        dw      QCOMP                   // ?comp
 535+ 70D7 6B 69                        dw      R_TO                    // r>
 536+ 70D9 8B 6A 02 6A                  dw      DUP, CELL_PLUS          // dup, cell+
 537+ 70DD 59 69                        dw      TO_R                    // >r
 538+ 70DF 0C 6B 82 6E                  dw      FETCH, COMMA            // @ ,
 539+ 70E3 48 69                        dw      EXIT                    // ;
 540+ 70E5
 541+ 70E5              //  ______________________________________________________________________
 542+ 70E5              //
 543+ 70E5              // compile,     --
 544+ 70E5              // compiles the following word
 545+ 70E5                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 545+ 70E5             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 545+ 70E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 545+ 70E5             >
 545+ 70E5             >                // dummy db directives used to calculate length of namec
 545+ 70E5 43 4F 4D 50 >                db      "COMPILE,"
 545+ 70E9 49 4C 45 2C >
 545+ 70ED             >len_NFA         defl    $ - temp_NFA
 545+ 70ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 545+ 70E5             >
 545+ 70E5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 545+ 70E6 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 545+ 70EA 49 4C 45 2C >
 545+ 70EE             >                org     $-1                 // alter last byte of Name just above to set
 545+ 70ED AC          >                db      {b $} | END_BIT     // msb as name end
 545+ 70EE             >
 545+ 70EE C8 70       >                dw      last_NFA            // Link to previous definition Name
 545+ 70F0             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 545+ 70F0 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 545+ 70F3             >
 545+ 70F3             >
 545+ 70F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 545+ 70F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 545+ 70F3             >
 545+ 70F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 546+ 70F3 54 70                        dw      QCOMP                   // ?comp
 547+ 70F5 82 6E                        dw      COMMA                   // ,
 548+ 70F7 48 69                        dw      EXIT                    // ;
 549+ 70F9
 550+ 70F9              //  ______________________________________________________________________
 551+ 70F9              //
 552+ 70F9              // [            --
 553+ 70F9              // stop compilation
 554+ 70F9                              Colon_Def SQUARED_OPEN, "[", is_immediate
 554+ 70F9             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 554+ 70F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 554+ 70F9             >
 554+ 70F9             >                // dummy db directives used to calculate length of namec
 554+ 70F9 5B          >                db      "["
 554+ 70FA             >len_NFA         defl    $ - temp_NFA
 554+ 70FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 554+ 70F9             >
 554+ 70F9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 554+ 70FA 5B          >                db      "["               // name string in 7-bit ascii, but
 554+ 70FB             >                org     $-1                 // alter last byte of Name just above to set
 554+ 70FA DB          >                db      {b $} | END_BIT     // msb as name end
 554+ 70FB             >
 554+ 70FB E5 70       >                dw      last_NFA            // Link to previous definition Name
 554+ 70FD             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 554+ 70FD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 554+ 7100             >
 554+ 7100             >
 554+ 7100             >                endif           ; ok        // for other definitions it "points" the correct handler
 554+ 7100             >                // Use of "; ok" to suppress "warning[fwdref]"
 554+ 7100             >
 554+ 7100             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 555+ 7100 5A 6C                        dw      ZERO                    // 0
 556+ 7102 C1 6D 17 6B                  dw      STATE, STORE            // state !
 557+ 7106 48 69                        dw      EXIT                    // ; immediate
 558+ 7108
 559+ 7108              //  ______________________________________________________________________
 560+ 7108              //
 561+ 7108              // ]            --
 562+ 7108              // start compilation
 563+ 7108                              Colon_Def SQUARED_CLOSE, "]", is_normal
 563+ 7108             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 563+ 7108             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 7108             >
 563+ 7108             >                // dummy db directives used to calculate length of namec
 563+ 7108 5D          >                db      "]"
 563+ 7109             >len_NFA         defl    $ - temp_NFA
 563+ 7109             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 7108             >
 563+ 7108 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 7109 5D          >                db      "]"               // name string in 7-bit ascii, but
 563+ 710A             >                org     $-1                 // alter last byte of Name just above to set
 563+ 7109 DD          >                db      {b $} | END_BIT     // msb as name end
 563+ 710A             >
 563+ 710A F9 70       >                dw      last_NFA            // Link to previous definition Name
 563+ 710C             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 710C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 710F             >
 563+ 710F             >
 563+ 710F             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 710F             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 710F             >
 563+ 710F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 710F A5 63 C0 00                  dw      LIT, $C0                // 192
 565+ 7113 C1 6D 17 6B                  dw      STATE, STORE            // state !
 566+ 7117 48 69                        dw      EXIT                    // ;
 567+ 7119
 568+ 7119              //  ______________________________________________________________________
 569+ 7119              //
 570+ 7119              // smudge       --
 571+ 7119              // toggle smudge bit of latest definition
 572+ 7119                              Colon_Def SMUDGE, "SMUDGE", is_normal
 572+ 7119             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 572+ 7119             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 572+ 7119             >
 572+ 7119             >                // dummy db directives used to calculate length of namec
 572+ 7119 53 4D 55 44 >                db      "SMUDGE"
 572+ 711D 47 45       >
 572+ 711F             >len_NFA         defl    $ - temp_NFA
 572+ 711F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 572+ 7119             >
 572+ 7119 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 572+ 711A 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 572+ 711E 47 45       >
 572+ 7120             >                org     $-1                 // alter last byte of Name just above to set
 572+ 711F C5          >                db      {b $} | END_BIT     // msb as name end
 572+ 7120             >
 572+ 7120 08 71       >                dw      last_NFA            // Link to previous definition Name
 572+ 7122             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 572+ 7122 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 572+ 7125             >
 572+ 7125             >
 572+ 7125             >                endif           ; ok        // for other definitions it "points" the correct handler
 572+ 7125             >                // Use of "; ok" to suppress "warning[fwdref]"
 572+ 7125             >
 572+ 7125             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 573+ 7125 A7 6F                        dw      LATEST                  // latest
 574+ 7127 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 575+ 712B 01 6B                        dw      TOGGLE                  // toggle
 576+ 712D 48 69                        dw      EXIT                    // ;
 577+ 712F
 578+ 712F              //  ______________________________________________________________________
 579+ 712F              //
 580+ 712F              // immediate    --
 581+ 712F              // make immediate the latest definition
 582+ 712F                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 582+ 712F             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 582+ 712F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 582+ 712F             >
 582+ 712F             >                // dummy db directives used to calculate length of namec
 582+ 712F 49 4D 4D 45 >                db      "IMMEDIATE"
 582+ 7133 44 49 41 54 >
 582+ 7137 45          >
 582+ 7138             >len_NFA         defl    $ - temp_NFA
 582+ 7138             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 582+ 712F             >
 582+ 712F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 582+ 7130 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 582+ 7134 44 49 41 54 >
 582+ 7138 45          >
 582+ 7139             >                org     $-1                 // alter last byte of Name just above to set
 582+ 7138 C5          >                db      {b $} | END_BIT     // msb as name end
 582+ 7139             >
 582+ 7139 19 71       >                dw      last_NFA            // Link to previous definition Name
 582+ 713B             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 582+ 713B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 582+ 713E             >
 582+ 713E             >
 582+ 713E             >                endif           ; ok        // for other definitions it "points" the correct handler
 582+ 713E             >                // Use of "; ok" to suppress "warning[fwdref]"
 582+ 713E             >
 582+ 713E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 583+ 713E A7 6F                        dw      LATEST                  // latest
 584+ 7140 A5 63 40 00                  dw      LIT, $40                // 64
 585+ 7144 01 6B                        dw      TOGGLE                  // toggle
 586+ 7146 48 69                        dw      EXIT                    // ;
 587+ 7148
 588+ 7148              //  ______________________________________________________________________
 589+ 7148              //
 590+ 7148              // hex          --
 591+ 7148              // change numeration base
 592+ 7148                              Colon_Def HEX, "HEX", is_normal
 592+ 7148             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 592+ 7148             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 592+ 7148             >
 592+ 7148             >                // dummy db directives used to calculate length of namec
 592+ 7148 48 45 58    >                db      "HEX"
 592+ 714B             >len_NFA         defl    $ - temp_NFA
 592+ 714B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 592+ 7148             >
 592+ 7148 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 592+ 7149 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 592+ 714C             >                org     $-1                 // alter last byte of Name just above to set
 592+ 714B D8          >                db      {b $} | END_BIT     // msb as name end
 592+ 714C             >
 592+ 714C 2F 71       >                dw      last_NFA            // Link to previous definition Name
 592+ 714E             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 592+ 714E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 592+ 7151             >
 592+ 7151             >
 592+ 7151             >                endif           ; ok        // for other definitions it "points" the correct handler
 592+ 7151             >                // Use of "; ok" to suppress "warning[fwdref]"
 592+ 7151             >
 592+ 7151             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 593+ 7151 A5 63 10 00                  dw      LIT, 16                 // 16
 594+ 7155 CC 6D 17 6B                  dw      BASE, STORE             // base !
 595+ 7159 48 69                        dw      EXIT                    // ;
 596+ 715B
 597+ 715B              //  ______________________________________________________________________
 598+ 715B              //
 599+ 715B              // decimal      --
 600+ 715B              // change numeration base
 601+ 715B                              Colon_Def DECIMAL, "DECIMAL", is_normal
 601+ 715B             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 601+ 715B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 715B             >
 601+ 715B             >                // dummy db directives used to calculate length of namec
 601+ 715B 44 45 43 49 >                db      "DECIMAL"
 601+ 715F 4D 41 4C    >
 601+ 7162             >len_NFA         defl    $ - temp_NFA
 601+ 7162             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 715B             >
 601+ 715B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 715C 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 601+ 7160 4D 41 4C    >
 601+ 7163             >                org     $-1                 // alter last byte of Name just above to set
 601+ 7162 CC          >                db      {b $} | END_BIT     // msb as name end
 601+ 7163             >
 601+ 7163 48 71       >                dw      last_NFA            // Link to previous definition Name
 601+ 7165             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 7165 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 7168             >
 601+ 7168             >
 601+ 7168             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 7168             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 7168             >
 601+ 7168             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 7168 A5 63 0A 00                  dw      LIT, 10                 // 10
 603+ 716C CC 6D 17 6B                  dw      BASE, STORE             // base !
 604+ 7170 48 69                        dw      EXIT                    // ;
 605+ 7172
 606+ 7172              //  ______________________________________________________________________
 607+ 7172              //
 608+ 7172              // (;code)       --
 609+ 7172              // patch to CFA to call/jump to the "following code"
 610+ 7172                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 610+ 7172             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 610+ 7172             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 610+ 7172             >
 610+ 7172             >                // dummy db directives used to calculate length of namec
 610+ 7172 28 3B 43 4F >                db      "(;CODE)"
 610+ 7176 44 45 29    >
 610+ 7179             >len_NFA         defl    $ - temp_NFA
 610+ 7179             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 610+ 7172             >
 610+ 7172 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 610+ 7173 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 610+ 7177 44 45 29    >
 610+ 717A             >                org     $-1                 // alter last byte of Name just above to set
 610+ 7179 A9          >                db      {b $} | END_BIT     // msb as name end
 610+ 717A             >
 610+ 717A 5B 71       >                dw      last_NFA            // Link to previous definition Name
 610+ 717C             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 610+ 717C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 610+ 717F             >
 610+ 717F             >
 610+ 717F             >                endif           ; ok        // for other definitions it "points" the correct handler
 610+ 717F             >                // Use of "; ok" to suppress "warning[fwdref]"
 610+ 717F             >
 610+ 717F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 611+ 717F 6B 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 612+ 7181 A7 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 613+ 7183 ED 6F C9 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 614+ 7187
 615+ 7187 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 616+ 718B 50 6A 2F 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 617+ 718F E0 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 618+ 7191
 619+ 7191 17 6B                        dw      STORE                   // !
 620+ 7193 48 69                        dw      EXIT                    // ;
 621+ 7195
 622+ 7195              //  ______________________________________________________________________
 623+ 7195              //
 624+ 7195              // ;code        --
 625+ 7195                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 625+ 7195             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 625+ 7195             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ 7195             >
 625+ 7195             >                // dummy db directives used to calculate length of namec
 625+ 7195 3B 43 4F 44 >                db      ";CODE"
 625+ 7199 45          >
 625+ 719A             >len_NFA         defl    $ - temp_NFA
 625+ 719A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ 7195             >
 625+ 7195 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ 7196 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 625+ 719A 45          >
 625+ 719B             >                org     $-1                 // alter last byte of Name just above to set
 625+ 719A C5          >                db      {b $} | END_BIT     // msb as name end
 625+ 719B             >
 625+ 719B 72 71       >                dw      last_NFA            // Link to previous definition Name
 625+ 719D             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 719D CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 71A0             >
 625+ 71A0             >
 625+ 71A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 71A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 71A0             >
 625+ 71A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 71A0 99 70                        dw      QCSP                    // ?csp
 627+ 71A2 D2 70                        dw      COMPILE                 // compile
 628+ 71A4 7C 71                        dw      C_SEMICOLON_CODE        // (;code)
 629+ 71A6 FD 70                        dw      SQUARED_OPEN            // [
 630+ 71A8 08 6C                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 631+ 71AA 48 69                        dw      EXIT                    // ; immediate
 632+ 71AC
 633+ 71AC              //  ______________________________________________________________________
 634+ 71AC              //
 635+ 71AC              // <builds      --
 636+ 71AC                              Colon_Def CBUILDS, "<BUILDS", is_normal
 636+ 71AC             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 636+ 71AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 636+ 71AC             >
 636+ 71AC             >                // dummy db directives used to calculate length of namec
 636+ 71AC 3C 42 55 49 >                db      "<BUILDS"
 636+ 71B0 4C 44 53    >
 636+ 71B3             >len_NFA         defl    $ - temp_NFA
 636+ 71B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 636+ 71AC             >
 636+ 71AC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 636+ 71AD 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 636+ 71B1 4C 44 53    >
 636+ 71B4             >                org     $-1                 // alter last byte of Name just above to set
 636+ 71B3 D3          >                db      {b $} | END_BIT     // msb as name end
 636+ 71B4             >
 636+ 71B4 95 71       >                dw      last_NFA            // Link to previous definition Name
 636+ 71B6             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 636+ 71B6 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 636+ 71B9             >
 636+ 71B9             >
 636+ 71B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 636+ 71B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 636+ 71B9             >
 636+ 71B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 637+ 71B9 5A 6C                        dw      ZERO                    // 0
 638+ 71BB 15 6C                        dw      CONSTANT                // constant
 639+ 71BD 48 69                        dw      EXIT                    // ;
 640+ 71BF
 641+ 71BF              //  ______________________________________________________________________
 642+ 71BF              //
 643+ 71BF              // recurse      --
 644+ 71BF              //              Colon_Def RECURSE, "RECURSE", is_immediate
 645+ 71BF              //              dw      QCOMP                   // ?comp
 646+ 71BF              //              dw      LATEST                  // latest
 647+ 71BF              //              dw      PFA, CFA                // pfa cfa
 648+ 71BF              //              dw      COMMA                   // ,
 649+ 71BF              //              dw      EXIT                    // ; immediate
 650+ 71BF
 651+ 71BF              //  ______________________________________________________________________
 652+ 71BF              //
 653+ 71BF              // does>     --
 654+ 71BF                              Colon_Def DOES_TO, "DOES>", is_normal
 654+ 71BF             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 654+ 71BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ 71BF             >
 654+ 71BF             >                // dummy db directives used to calculate length of namec
 654+ 71BF 44 4F 45 53 >                db      "DOES>"
 654+ 71C3 3E          >
 654+ 71C4             >len_NFA         defl    $ - temp_NFA
 654+ 71C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ 71BF             >
 654+ 71BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ 71C0 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 654+ 71C4 3E          >
 654+ 71C5             >                org     $-1                 // alter last byte of Name just above to set
 654+ 71C4 BE          >                db      {b $} | END_BIT     // msb as name end
 654+ 71C5             >
 654+ 71C5 AC 71       >                dw      last_NFA            // Link to previous definition Name
 654+ 71C7             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 71C7 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 71CA             >
 654+ 71CA             >
 654+ 71CA             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 71CA             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 71CA             >
 654+ 71CA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 71CA 6B 69                        dw      R_TO                    // r>
 656+ 71CC A7 6F                        dw      LATEST                  // latest
 657+ 71CE ED 6F                        dw      PFA                     // pfa
 658+ 71D0 17 6B                        dw      STORE                   // !
 659+ 71D2 7C 71                        dw      C_SEMICOLON_CODE        // ;code
 660+ 71D4              Does_Ptr:
 661+ 71D4                              // via call coded in CFA
 662+ 71D4                              ldhlrp
 662+ 71D4 2A 96 63    >                ld      hl,(RP_Pointer)
 663+ 71D7 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 664+ 71D8 70                           ld      (hl), b
 665+ 71D9 2B                           dec     hl
 666+ 71DA 71                           ld      (hl), c
 667+ 71DB                              ldrphl
 667+ 71DB 22 96 63    >                ld      (RP_Pointer),hl
 668+ 71DE E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 669+ 71DF
 670+ 71DF 4E                           ld      c, (hl)
 671+ 71E0 23                           inc     hl
 672+ 71E1 46                           ld      b, (hl)
 673+ 71E2 23                           inc     hl
 674+ 71E3
 675+ 71E3                              psh1
 675+ 71E3 E5          >                push    hl
 675+ 71E4 DD E9       >                jp      (ix)
 676+ 71E6                              // SMUDGE !
 677+ 71E6
 678+ 71E6              //  ______________________________________________________________________
 679+ 71E6              //
 680+ 71E6              // count        a -- a2 n
 681+ 71E6              // expects a counted string at address a, returns string address and counter
 682+ 71E6                              New_Def COUNT, "COUNT", is_code, is_normal
 682+ 71E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 682+ 71E6             >
 682+ 71E6             >                // dummy db directives used to calculate length of namec
 682+ 71E6 43 4F 55 4E >                db      "COUNT"
 682+ 71EA 54          >
 682+ 71EB             >len_NFA         defl    $ - temp_NFA
 682+ 71EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 682+ 71E6             >
 682+ 71E6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 682+ 71E7 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 682+ 71EB 54          >
 682+ 71EC             >                org     $-1                 // alter last byte of Name just above to set
 682+ 71EB D4          >                db      {b $} | END_BIT     // msb as name end
 682+ 71EC             >
 682+ 71EC BF 71       >                dw      last_NFA            // Link to previous definition Name
 682+ 71EE             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 682+ 71EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 682+ 71EE ~           >
 682+ 71EE ~           >
 682+ 71EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 682+ 71EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 682+ 71EE             >
 682+ 71EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 683+ 71EE E1                           pop     hl
 684+ 71EF 5E                           ld      e, (hl)
 685+ 71F0 16 00                        ld      d, 0
 686+ 71F2 23                           inc     hl
 687+ 71F3              Count_Ptr:
 688+ 71F3 E5                           push    hl
 689+ 71F4 D5                           push    de
 690+ 71F5                              next
 690+ 71F5 DD E9       >                jp      (ix)
 691+ 71F7
 692+ 71F7              //  ______________________________________________________________________
 693+ 71F7              //
 694+ 71F7              // bounds       a n -- a+n n
 695+ 71F7              // given an address and a length ( a n ) calculate the bound addresses
 696+ 71F7              // suitable for DO-LOOP
 697+ 71F7                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 697+ 71F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 697+ 71F7             >
 697+ 71F7             >                // dummy db directives used to calculate length of namec
 697+ 71F7 42 4F 55 4E >                db      "BOUNDS"
 697+ 71FB 44 53       >
 697+ 71FD             >len_NFA         defl    $ - temp_NFA
 697+ 71FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 697+ 71F7             >
 697+ 71F7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 697+ 71F8 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 697+ 71FC 44 53       >
 697+ 71FE             >                org     $-1                 // alter last byte of Name just above to set
 697+ 71FD D3          >                db      {b $} | END_BIT     // msb as name end
 697+ 71FE             >
 697+ 71FE E6 71       >                dw      last_NFA            // Link to previous definition Name
 697+ 7200             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 697+ 7200 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 697+ 7200 ~           >
 697+ 7200 ~           >
 697+ 7200             >                endif           ; ok        // for other definitions it "points" the correct handler
 697+ 7200             >                // Use of "; ok" to suppress "warning[fwdref]"
 697+ 7200             >
 697+ 7200             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 698+ 7200 E1                           pop     hl
 699+ 7201 D1                           pop     de
 700+ 7202 19                           add     hl, de
 701+ 7203 18 EE                        jr      Count_Ptr
 702+ 7205
 703+ 7205              //  ______________________________________________________________________
 704+ 7205              //
 705+ 7205              // type         a n --
 706+ 7205              // Sends to current output channel n characters starting at address a.
 707+ 7205                              Colon_Def TYPE, "TYPE", is_normal
 707+ 7205             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 707+ 7205             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 707+ 7205             >
 707+ 7205             >                // dummy db directives used to calculate length of namec
 707+ 7205 54 59 50 45 >                db      "TYPE"
 707+ 7209             >len_NFA         defl    $ - temp_NFA
 707+ 7209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 707+ 7205             >
 707+ 7205 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 707+ 7206 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 707+ 720A             >                org     $-1                 // alter last byte of Name just above to set
 707+ 7209 C5          >                db      {b $} | END_BIT     // msb as name end
 707+ 720A             >
 707+ 720A F7 71       >                dw      last_NFA            // Link to previous definition Name
 707+ 720C             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 707+ 720C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 707+ 720F             >
 707+ 720F             >
 707+ 720F             >                endif           ; ok        // for other definitions it "points" the correct handler
 707+ 720F             >                // Use of "; ok" to suppress "warning[fwdref]"
 707+ 720F             >
 707+ 720F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 708+ 720F 00 72                        dw      BOUNDS                  // bounds
 709+ 7211 45 64                        dw      C_Q_DO                  // ?do
 710+ 7213 0C 00                        dw      Type_Skip - $
 711+ 7215              Type_Loop:
 712+ 7215 78 64 23 6B                  dw          I, CFETCH           //      i c@
 713+ 7219 52 6F                        dw          EMIT                //      emit
 714+ 721B F8 63                        dw      C_LOOP                  // loop
 715+ 721D F8 FF                        dw      Type_Loop - $
 716+ 721F              Type_Skip:
 717+ 721F 48 69                        dw      EXIT                    // ;
 718+ 7221
 719+ 7221              //  ______________________________________________________________________
 720+ 7221              //
 721+ 7221              // leave        --
 722+ 7221              // Compile (leave) to leave current LOOP and jump just after it
 723+ 7221                              Colon_Def LEAVE, "LEAVE", is_immediate
 723+ 7221             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 723+ 7221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ 7221             >
 723+ 7221             >                // dummy db directives used to calculate length of namec
 723+ 7221 4C 45 41 56 >                db      "LEAVE"
 723+ 7225 45          >
 723+ 7226             >len_NFA         defl    $ - temp_NFA
 723+ 7226             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ 7221             >
 723+ 7221 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ 7222 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 723+ 7226 45          >
 723+ 7227             >                org     $-1                 // alter last byte of Name just above to set
 723+ 7226 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ 7227             >
 723+ 7227 05 72       >                dw      last_NFA            // Link to previous definition Name
 723+ 7229             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 7229 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 722C             >
 723+ 722C             >
 723+ 722C             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 722C             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 722C             >
 723+ 722C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 722C D2 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 725+ 7230 64 6E 59 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 725+ 7234 5A 6C 82 6E
 726+ 7238 5A 6C 5A 6C                  dw      ZERO, ZERO
 727+ 723C 18 69 8B 6A                  dw      SPFETCH, DUP
 728+ 7240 02 6A 02 6A                  dw      CELL_PLUS, CELL_PLUS
 729+ 7244 72 6A                        dw      TUCK
 730+ 7246 EA 6D 0C 6B                  dw      CSP, FETCH
 731+ 724A 80 6A B9 6E                  dw      SWAP, SUBTRACT
 732+ 724E 51 68                        dw      CMOVE
 733+ 7250 EA 6D 0C 6B                  dw      CSP, FETCH, CELL_MINUS
 733+ 7254 0D 6A
 734+ 7256 6B 69 50 6A                  dw      R_TO, OVER, STORE
 734+ 725A 17 6B
 735+ 725C 0D 6A 5A 6C                  dw      CELL_MINUS, ZERO
 736+ 7260 80 6A 17 6B                  dw      SWAP, STORE
 737+ 7264 48 69                        dw      EXIT                    // ;
 738+ 7266
 739+ 7266              //  ______________________________________________________________________
 740+ 7266              //
 741+ 7266              // -trailing    a n1 -- a n2
 742+ 7266              // Assumes that an n1 bytes-long string is stored at address a
 743+ 7266              // and the string contains a space delimited word,
 744+ 7266              // Finds n2 as the position of the first character after the word.
 745+ 7266                              Colon_Def LTRAILING, "-TRAILING", is_normal
 745+ 7266             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 745+ 7266             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ 7266             >
 745+ 7266             >                // dummy db directives used to calculate length of namec
 745+ 7266 2D 54 52 41 >                db      "-TRAILING"
 745+ 726A 49 4C 49 4E >
 745+ 726E 47          >
 745+ 726F             >len_NFA         defl    $ - temp_NFA
 745+ 726F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ 7266             >
 745+ 7266 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ 7267 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 745+ 726B 49 4C 49 4E >
 745+ 726F 47          >
 745+ 7270             >                org     $-1                 // alter last byte of Name just above to set
 745+ 726F C7          >                db      {b $} | END_BIT     // msb as name end
 745+ 7270             >
 745+ 7270 21 72       >                dw      last_NFA            // Link to previous definition Name
 745+ 7272             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7272 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 745+ 7275             >
 745+ 7275             >
 745+ 7275             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7275             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7275             >
 745+ 7275             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7275 8B 6A 5A 6C                  dw      DUP, ZERO               // dup 0
 747+ 7279                                                              // do
 748+ 7279 45 64                        dw      C_Q_DO
 749+ 727B 20 00                        dw      LTrailing_Leave - $
 750+ 727D              LTrailing_Loop:
 751+ 727D E0 6A C3 69                  dw          TWO_DUP, PLUS       //      2dup +
 752+ 7281 EA 69                        dw          ONE_SUBTRACT        //      1-
 753+ 7283 23 6B                        dw          CFETCH              //      c@
 754+ 7285 89 6C B9 6E                  dw          BL, SUBTRACT        //      bl -
 755+ 7289                                                              //      if
 756+ 7289 1C 64                        dw          ZBRANCH
 757+ 728B 0A 00                        dw          LTrailing_Else - $
 758+ 728D 2F 64                        dw              C_LEAVE         //          leave
 759+ 728F 0C 00                        dw              LTrailing_Leave - $
 760+ 7291 07 64                        dw          BRANCH              //      else
 761+ 7293 04 00                        dw          LTrailing_Endif - $
 762+ 7295              LTrailing_Else:
 763+ 7295 EA 69                        dw              ONE_SUBTRACT    //          1-
 764+ 7297              LTrailing_Endif:                                //      endif
 765+ 7297                                                              // loop
 766+ 7297 F8 63                        dw      C_LOOP
 767+ 7299 E4 FF                        dw      LTrailing_Loop - $
 768+ 729B              LTrailing_Leave:
 769+ 729B 48 69                        dw      EXIT                    // ;
 770+ 729D
 771+ 729D              //  ______________________________________________________________________
 772+ 729D              //
 773+ 729D              // accept       a n1 -- n2
 774+ 729D              // Accepts at most n1 characters from terminal and stores them at address a
 775+ 729D              // CR stops input. A 'nul' is added as trailer.
 776+ 729D              // n2 is the string length. n2 is kept in span user variable also.
 777+ 729D                              Colon_Def ACCEPT, "ACCEPT", is_normal
 777+ 729D             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 777+ 729D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 777+ 729D             >
 777+ 729D             >                // dummy db directives used to calculate length of namec
 777+ 729D 41 43 43 45 >                db      "ACCEPT"
 777+ 72A1 50 54       >
 777+ 72A3             >len_NFA         defl    $ - temp_NFA
 777+ 72A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 777+ 729D             >
 777+ 729D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 777+ 729E 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 777+ 72A2 50 54       >
 777+ 72A4             >                org     $-1                 // alter last byte of Name just above to set
 777+ 72A3 D4          >                db      {b $} | END_BIT     // msb as name end
 777+ 72A4             >
 777+ 72A4 66 72       >                dw      last_NFA            // Link to previous definition Name
 777+ 72A6             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 777+ 72A6 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 777+ 72A9             >
 777+ 72A9             >
 777+ 72A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 777+ 72A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 777+ 72A9             >
 777+ 72A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 778+ 72A9 50 6A C3 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 778+ 72AD 50 6A
 779+ 72AF 5A 6C A4 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 780+ 72B3                                                              // do
 781+ 72B3 45 64                        dw      C_Q_DO
 782+ 72B5 8A 00                        dw      Accept_Leave - $
 783+ 72B7              Accept_Loop:
 784+ 72B7 5E 6A 86 66                  dw          DROP, KEY           //      drop key        ( a  c )
 785+ 72BB 8B 6A                        dw          DUP                 //      dup             ( a  c  c )
 786+ 72BD A5 63 0E 00                  dw          LIT, $0E            //      0E
 787+ 72C1 CA 6C                        dw          PLUS_ORIGIN         //      +origin
 788+ 72C3 0C 6B                        dw          FETCH               //      @               ( a  c  c  del )
 789+ 72C5 C5 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 790+ 72C7                                                              //      if
 791+ 72C7 1C 64                        dw          ZBRANCH
 792+ 72C9 2C 00                        dw          Accept_Else_0 - $
 793+ 72CB 5E 6A                        dw              DROP            //          drop        ( a  )
 794+ 72CD 8B 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 794+ 72D1 C5 6E
 795+ 72D3 63 6C E6 68                  dw              ONE, AND_OP     //          1 and
 796+ 72D7 8B 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 797+ 72D9 6B 69                        dw              R_TO            //          r> 2 - + r>
 798+ 72DB 18 6A C3 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 799+ 72DF 59 69                        dw              TO_R            //
 800+ 72E1                                                              //          if
 801+ 72E1 1C 64                        dw              ZBRANCH
 802+ 72E3 0A 00                        dw              Accept_Else_1 - $
 803+ 72E5 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 804+ 72E9                                                              //          else
 805+ 72E9 07 64                        dw              BRANCH
 806+ 72EB 06 00                        dw              Accept_Endif_1 - $
 807+ 72ED              Accept_Else_1:
 808+ 72ED A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 809+ 72F1              Accept_Endif_1:                                 //          endif
 810+ 72F1 07 64                        dw          BRANCH
 811+ 72F3 2E 00                        dw          Accept_Endif_0 - $
 812+ 72F5              Accept_Else_0:                                  //      else
 813+ 72F5 8B 6A                        dw              DUP             //          dup         ( a  c  c )
 814+ 72F7 A5 63 0D 00                  dw              LIT, 13         //          13
 815+ 72FB C5 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 816+ 72FD                                                              //          if
 817+ 72FD 1C 64                        dw              ZBRANCH
 818+ 72FF 0C 00                        dw              Accept_Else_2 - $
 819+ 7301 5E 6A 89 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 820+ 7305 5A 6C                        dw                  ZERO        //              0       ( a  c  0 )
 821+ 7307                                                              //          else
 822+ 7307 07 64                        dw              BRANCH
 823+ 7309 04 00                        dw              Accept_Endif_2 - $
 824+ 730B              Accept_Else_2:
 825+ 730B 8B 6A                        dw                  DUP         //              dup     ( a  c  c )
 826+ 730D                                                              //          endif
 827+ 730D              Accept_Endif_2:
 828+ 730D 78 64 2F 6B                  dw              I, CSTORE       //          i           ( a  c )
 829+ 7311 8B 6A 89 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 829+ 7315 E5 6E
 830+ 7317                                                              //          if
 831+ 7317 1C 64                        dw              ZBRANCH
 832+ 7319 08 00                        dw              Accept_Endif_3 - $
 833+ 731B 6B 69                        dw                  R_TO        //              r>
 834+ 731D EA 69                        dw                  ONE_SUBTRACT//              1-
 835+ 731F 59 69                        dw                  TO_R        //              >r
 836+ 7321                                                              //          endif
 837+ 7321              Accept_Endif_3:
 838+ 7321              Accept_Endif_0:                                 //      endif
 839+ 7321 52 6F                        dw          EMIT                //      emit
 840+ 7323 5A 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 840+ 7327 E0 69
 841+ 7329 17 6B                        dw          STORE               //          ( zero pad )
 842+ 732B 78 64                        dw          I                   //      i
 843+ 732D 78 64 23 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 843+ 7331 85 69
 844+ 7333 1C 64                        dw          ZBRANCH             //
 845+ 7335 06 00                        dw              Accept_Endif_4 - $
 846+ 7337 2F 64                        dw                  C_LEAVE     //              leave
 847+ 7339 06 00                        dw                  Accept_Leave - $
 848+ 733B              Accept_Endif_4:                                 //      endif
 849+ 733B                                                              // loop
 850+ 733B F8 63                        dw      C_LOOP
 851+ 733D 7A FF                        dw      Accept_Loop - $
 852+ 733F              Accept_Leave:
 853+ 733F 80 6A B9 6E                  dw      SWAP, SUBTRACT          // swap -
 854+ 7343 E0 69                        dw      ONE_PLUS                // 1+
 855+ 7345 8B 6A 42 6E                  dw      DUP, SPAN, STORE        // dup span !
 855+ 7349 17 6B
 856+ 734B 48 69                        dw      EXIT                    // ;
 857+ 734D
 858+ 734D              //  ______________________________________________________________________
 859+ 734D              //
 860+ 734D              // expect      a n --
 861+ 734D              // Accepts at most n1 characters from terminal and stores them at address a
 862+ 734D              // CR stops input. A 'nul' is added as trailer.
 863+ 734D              // n2 is the string length. n2 is kept in span user variable also.
 864+ 734D              //              Colon_Def EXPECT, "EXPECT", is_normal
 865+ 734D              //              dw      ACCEPT, DROP            // accept drop
 866+ 734D              //              dw      EXIT                    // ;
 867+ 734D
 868+ 734D              //  ______________________________________________________________________
 869+ 734D              //
 870+ 734D              // query        --
 871+ 734D              // Accept at most 80 character from console. CR stops.
 872+ 734D              // Text is stored in TIB. Variable IN is zeroed.
 873+ 734D                              Colon_Def QUERY, "QUERY", is_normal
 873+ 734D             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 873+ 734D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 873+ 734D             >
 873+ 734D             >                // dummy db directives used to calculate length of namec
 873+ 734D 51 55 45 52 >                db      "QUERY"
 873+ 7351 59          >
 873+ 7352             >len_NFA         defl    $ - temp_NFA
 873+ 7352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 873+ 734D             >
 873+ 734D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 873+ 734E 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 873+ 7352 59          >
 873+ 7353             >                org     $-1                 // alter last byte of Name just above to set
 873+ 7352 D9          >                db      {b $} | END_BIT     // msb as name end
 873+ 7353             >
 873+ 7353 9D 72       >                dw      last_NFA            // Link to previous definition Name
 873+ 7355             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 873+ 7355 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 873+ 7358             >
 873+ 7358             >
 873+ 7358             >                endif           ; ok        // for other definitions it "points" the correct handler
 873+ 7358             >                // Use of "; ok" to suppress "warning[fwdref]"
 873+ 7358             >
 873+ 7358             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 874+ 7358 F8 6C 0C 6B                  dw      TIB, FETCH              // tib @
 875+ 735C A5 63 50 00                  dw      LIT, 80                 // 80
 876+ 7360 A6 72 5E 6A                  dw      ACCEPT, DROP            // accept drop
 877+ 7364 5A 6C 78 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 877+ 7368 17 6B
 878+ 736A 48 69                        dw      EXIT                    // ;
 879+ 736C
 880+ 736C              //  ______________________________________________________________________
 881+ 736C              //
 882+ 736C              // fill        a n c --
 883+ 736C              // If n > 0, fills n locations starting from address a with the value c.
 884+ 736C                              New_Def FILL, "FILL", is_code, is_normal
 884+ 736C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 884+ 736C             >
 884+ 736C             >                // dummy db directives used to calculate length of namec
 884+ 736C 46 49 4C 4C >                db      "FILL"
 884+ 7370             >len_NFA         defl    $ - temp_NFA
 884+ 7370             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 884+ 736C             >
 884+ 736C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 884+ 736D 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 884+ 7371             >                org     $-1                 // alter last byte of Name just above to set
 884+ 7370 CC          >                db      {b $} | END_BIT     // msb as name end
 884+ 7371             >
 884+ 7371 4D 73       >                dw      last_NFA            // Link to previous definition Name
 884+ 7373             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 884+ 7373 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 884+ 7373 ~           >
 884+ 7373 ~           >
 884+ 7373             >                endif           ; ok        // for other definitions it "points" the correct handler
 884+ 7373             >                // Use of "; ok" to suppress "warning[fwdref]"
 884+ 7373             >
 884+ 7373             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 885+ 7373 D9                           exx
 886+ 7374 D1                           pop     de                  // de has character
 887+ 7375 C1                           pop     bc                  // bc has counter
 888+ 7376 E1                           pop     hl                  // hl has address, save Instruction Pointer
 889+ 7377              Fill_Loop:
 890+ 7377 78                               ld      a, b
 891+ 7378 B1                               or      c
 892+ 7379 28 05                        jr      z, Fill_While_End
 893+ 737B 73                               ld      (hl), e
 894+ 737C 0B                               dec     bc
 895+ 737D 23                               inc     hl
 896+ 737E 18 F7                        jr      Fill_Loop
 897+ 7380              Fill_While_End:
 898+ 7380 D9                           exx
 899+ 7381                              next
 899+ 7381 DD E9       >                jp      (ix)
 900+ 7383
 901+ 7383              //  ______________________________________________________________________
 902+ 7383              //
 903+ 7383              // erase        a n --
 904+ 7383              // If n > 0, fills n locations starting from address a with 'nul' characters.
 905+ 7383                              Colon_Def ERASE, "ERASE", is_normal
 905+ 7383             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 905+ 7383             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 905+ 7383             >
 905+ 7383             >                // dummy db directives used to calculate length of namec
 905+ 7383 45 52 41 53 >                db      "ERASE"
 905+ 7387 45          >
 905+ 7388             >len_NFA         defl    $ - temp_NFA
 905+ 7388             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 905+ 7383             >
 905+ 7383 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 905+ 7384 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 905+ 7388 45          >
 905+ 7389             >                org     $-1                 // alter last byte of Name just above to set
 905+ 7388 C5          >                db      {b $} | END_BIT     // msb as name end
 905+ 7389             >
 905+ 7389 6C 73       >                dw      last_NFA            // Link to previous definition Name
 905+ 738B             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 905+ 738B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 905+ 738E             >
 905+ 738E             >
 905+ 738E             >                endif           ; ok        // for other definitions it "points" the correct handler
 905+ 738E             >                // Use of "; ok" to suppress "warning[fwdref]"
 905+ 738E             >
 905+ 738E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 906+ 738E 5A 6C 73 73                  dw      ZERO, FILL              // 0 fill
 907+ 7392 48 69                        dw      EXIT                    // ;
 908+ 7394
 909+ 7394              //  ______________________________________________________________________
 910+ 7394              //
 911+ 7394              // blanks       a n --
 912+ 7394              // If n > 0, fills n locations starting from address a with 'nul' characters.
 913+ 7394                              Colon_Def BLANKS, "BLANKS", is_normal
 913+ 7394             >                New_Def  BLANKS, "BLANKS", Enter_Ptr, is_normal ; ok
 913+ 7394             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 913+ 7394             >
 913+ 7394             >                // dummy db directives used to calculate length of namec
 913+ 7394 42 4C 41 4E >                db      "BLANKS"
 913+ 7398 4B 53       >
 913+ 739A             >len_NFA         defl    $ - temp_NFA
 913+ 739A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 913+ 7394             >
 913+ 7394 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 913+ 7395 42 4C 41 4E >                db      "BLANKS"               // name string in 7-bit ascii, but
 913+ 7399 4B 53       >
 913+ 739B             >                org     $-1                 // alter last byte of Name just above to set
 913+ 739A D3          >                db      {b $} | END_BIT     // msb as name end
 913+ 739B             >
 913+ 739B 83 73       >                dw      last_NFA            // Link to previous definition Name
 913+ 739D             >BLANKS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 913+ 739D CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 913+ 73A0             >
 913+ 73A0             >
 913+ 73A0             >                endif           ; ok        // for other definitions it "points" the correct handler
 913+ 73A0             >                // Use of "; ok" to suppress "warning[fwdref]"
 913+ 73A0             >
 913+ 73A0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 914+ 73A0 89 6C 73 73                  dw      BL, FILL                // bl fill
 915+ 73A4 48 69                        dw      EXIT                    // ;
 916+ 73A6
 917+ 73A6              //  ______________________________________________________________________
 918+ 73A6              //
 919+ 73A6              // hold         c --
 920+ 73A6              // Used between <# and #> to insert a character c in numeric formatting.
 921+ 73A6                              Colon_Def HOLD, "HOLD", is_normal
 921+ 73A6             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 921+ 73A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 921+ 73A6             >
 921+ 73A6             >                // dummy db directives used to calculate length of namec
 921+ 73A6 48 4F 4C 44 >                db      "HOLD"
 921+ 73AA             >len_NFA         defl    $ - temp_NFA
 921+ 73AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 921+ 73A6             >
 921+ 73A6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 921+ 73A7 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 921+ 73AB             >                org     $-1                 // alter last byte of Name just above to set
 921+ 73AA C4          >                db      {b $} | END_BIT     // msb as name end
 921+ 73AB             >
 921+ 73AB 94 73       >                dw      last_NFA            // Link to previous definition Name
 921+ 73AD             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 921+ 73AD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 921+ 73B0             >
 921+ 73B0             >
 921+ 73B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 921+ 73B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 921+ 73B0             >
 921+ 73B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 922+ 73B0 7F 6C                        dw      NEG_ONE                 // -1
 923+ 73B2 FD 6D ED 6A                  dw      HLD, PLUSSTORE          // hld +!
 924+ 73B6 FD 6D 0C 6B                  dw      HLD, FETCH, CSTORE      // hld @ c!
 924+ 73BA 2F 6B
 925+ 73BC 48 69                        dw      EXIT                    // ;
 926+ 73BE
 927+ 73BE              //  ______________________________________________________________________
 928+ 73BE              //
 929+ 73BE              // pad         -- a
 930+ 73BE              // leaves the buffer text address. This is at a fixed distance over HERE.
 931+ 73BE                              Colon_Def PAD, "PAD", is_normal
 931+ 73BE             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 931+ 73BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 931+ 73BE             >
 931+ 73BE             >                // dummy db directives used to calculate length of namec
 931+ 73BE 50 41 44    >                db      "PAD"
 931+ 73C1             >len_NFA         defl    $ - temp_NFA
 931+ 73C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 931+ 73BE             >
 931+ 73BE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 931+ 73BF 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 931+ 73C2             >                org     $-1                 // alter last byte of Name just above to set
 931+ 73C1 C4          >                db      {b $} | END_BIT     // msb as name end
 931+ 73C2             >
 931+ 73C2 A6 73       >                dw      last_NFA            // Link to previous definition Name
 931+ 73C4             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 931+ 73C4 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 931+ 73C7             >
 931+ 73C7             >
 931+ 73C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 931+ 73C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 931+ 73C7             >
 931+ 73C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 932+ 73C7 64 6E                        dw      HERE                    // here
 933+ 73C9 A5 63 44 00                  dw      LIT, 68                 // 68
 934+ 73CD C3 69                        dw      PLUS                    // +
 935+ 73CF 48 69                        dw      EXIT                    // ;
 936+ 73D1
 937+ 73D1              //  ______________________________________________________________________
 938+ 73D1              //
 939+ 73D1              // word         c -- a
 940+ 73D1              // reads characters from input streams until it encouners a c delimiter.
 941+ 73D1              // Stores that packet so it starts from HERE
 942+ 73D1              // WORD leaves a counter as first byte and ends the packet with two spaces.
 943+ 73D1              // Other occurrences of c are ignored.
 944+ 73D1              // If BLK is zero, text is taken from terminal buffer TIB.
 945+ 73D1              // Otherwise text is taken from the disk-block given by BLK.
 946+ 73D1              // "in" variable is incremented of the number of character read.
 947+ 73D1              // The number of characters read is given by ENCLOSE.
 948+ 73D1                              Colon_Def WORD, "WORD", is_normal
 948+ 73D1             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 948+ 73D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 73D1             >
 948+ 73D1             >                // dummy db directives used to calculate length of namec
 948+ 73D1 57 4F 52 44 >                db      "WORD"
 948+ 73D5             >len_NFA         defl    $ - temp_NFA
 948+ 73D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 73D1             >
 948+ 73D1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 73D2 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 948+ 73D6             >                org     $-1                 // alter last byte of Name just above to set
 948+ 73D5 C4          >                db      {b $} | END_BIT     // msb as name end
 948+ 73D6             >
 948+ 73D6 BE 73       >                dw      last_NFA            // Link to previous definition Name
 948+ 73D8             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 73D8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 73DB             >
 948+ 73DB             >
 948+ 73DB             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 73DB             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 73DB             >
 948+ 73DB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 73DB 6E 6D 0C 6B                  dw      BLK, FETCH              // blk @
 950+ 73DF                                                              // if
 951+ 73DF 1C 64                        dw      ZBRANCH
 952+ 73E1 0C 00                        dw      Word_Else - $
 953+ 73E3 6E 6D 0C 6B                  dw          BLK, FETCH          //      blk @
 954+ 73E7 64 7D                        dw          BLOCK               //      block ( forward )
 955+ 73E9                                                              // else
 956+ 73E9 07 64                        dw      BRANCH
 957+ 73EB 06 00                        dw      Word_Endif - $
 958+ 73ED              Word_Else:
 959+ 73ED F8 6C 0C 6B                  dw         TIB, FETCH           //      tib @
 960+ 73F1              Word_Endif:                                     // endif
 961+ 73F1 78 6D 0C 6B                  dw      TO_IN, FETCH, PLUS      // >in @ +
 961+ 73F5 C3 69
 962+ 73F7 80 6A 58 65                  dw      SWAP, ENCLOSE           // swap enclose
 963+ 73FB 64 6E A5 63                  dw      HERE, LIT, 34, BLANKS   // here 34 blanks
 963+ 73FF 22 00 9D 73
 964+ 7403 78 6D ED 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 965+ 7407 50 6A B9 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 965+ 740B 59 69
 966+ 740D 7D 69 64 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 966+ 7411 2F 6B
 967+ 7413 C3 69                        dw      PLUS                    // +
 968+ 7415 64 6E E0 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 968+ 7419 6B 69
 969+ 741B 51 68                        dw      CMOVE                   // cmove
 970+ 741D 64 6E                        dw      HERE                    // here
 971+ 741F 48 69                        dw      EXIT                    // ;
 972+ 7421
 973+ 7421              //  ______________________________________________________________________
 974+ 7421              //
 975+ 7421              // (.")         --
 976+ 7421              // Direct procedure compiled by ." and  .(  It executes TYPE.
 977+ 7421                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 977+ 7421             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 977+ 7421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 977+ 7421             >
 977+ 7421             >                // dummy db directives used to calculate length of namec
 977+ 7421 28 2E 22 29 >                db      '(.")'
 977+ 7425             >len_NFA         defl    $ - temp_NFA
 977+ 7425             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 977+ 7421             >
 977+ 7421 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 977+ 7422 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 977+ 7426             >                org     $-1                 // alter last byte of Name just above to set
 977+ 7425 A9          >                db      {b $} | END_BIT     // msb as name end
 977+ 7426             >
 977+ 7426 D1 73       >                dw      last_NFA            // Link to previous definition Name
 977+ 7428             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 977+ 7428 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 977+ 742B             >
 977+ 742B             >
 977+ 742B             >                endif           ; ok        // for other definitions it "points" the correct handler
 977+ 742B             >                // Use of "; ok" to suppress "warning[fwdref]"
 977+ 742B             >
 977+ 742B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 978+ 742B 7D 69 EE 71                  dw      R_OP, COUNT             // r count
 979+ 742F 8B 6A E0 69                  dw      DUP, ONE_PLUS           // dup 1+
 980+ 7433 6B 69 C3 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 980+ 7437 59 69
 981+ 7439 0C 72                        dw      TYPE                    // type
 982+ 743B 48 69                        dw      EXIT                    // ;
 983+ 743D
 984+ 743D              //  ______________________________________________________________________
 985+ 743D              //
 986+ 743D              // char         -- c
 987+ 743D              // get first character from next input word
 988+ 743D                              Colon_Def CHAR,  "CHAR", is_normal
 988+ 743D             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 988+ 743D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 988+ 743D             >
 988+ 743D             >                // dummy db directives used to calculate length of namec
 988+ 743D 43 48 41 52 >                db      "CHAR"
 988+ 7441             >len_NFA         defl    $ - temp_NFA
 988+ 7441             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 988+ 743D             >
 988+ 743D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 988+ 743E 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 988+ 7442             >                org     $-1                 // alter last byte of Name just above to set
 988+ 7441 D2          >                db      {b $} | END_BIT     // msb as name end
 988+ 7442             >
 988+ 7442 21 74       >                dw      last_NFA            // Link to previous definition Name
 988+ 7444             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 988+ 7444 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 988+ 7447             >
 988+ 7447             >
 988+ 7447             >                endif           ; ok        // for other definitions it "points" the correct handler
 988+ 7447             >                // Use of "; ok" to suppress "warning[fwdref]"
 988+ 7447             >
 988+ 7447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 989+ 7447 89 6C D8 73                  dw      BL, WORD                // bl word
 990+ 744B E0 69 23 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 991+ 744F 48 69                        dw      EXIT                    // ;
 992+ 7451
 993+ 7451              //  ______________________________________________________________________
 994+ 7451              //
 995+ 7451              // ,"           --
 996+ 7451              // compiles a string terminated by " as a counted string from next input stream
 997+ 7451                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 997+ 7451             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 997+ 7451             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 7451             >
 997+ 7451             >                // dummy db directives used to calculate length of namec
 997+ 7451 2C 22       >                db      ',"'
 997+ 7453             >len_NFA         defl    $ - temp_NFA
 997+ 7453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 7451             >
 997+ 7451 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 7452 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 997+ 7454             >                org     $-1                 // alter last byte of Name just above to set
 997+ 7453 A2          >                db      {b $} | END_BIT     // msb as name end
 997+ 7454             >
 997+ 7454 3D 74       >                dw      last_NFA            // Link to previous definition Name
 997+ 7456             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 7456 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 997+ 7459             >
 997+ 7459             >
 997+ 7459             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 7459             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 7459             >
 997+ 7459             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 7459 A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 999+ 745D D8 73                        dw      WORD                    // word
1000+ 745F 23 6B E0 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
1001+ 7463 75 6E                        dw      ALLOT                   // allot
1002+ 7465 5A 6C 94 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1003+ 7469 48 69                        dw      EXIT
1004+ 746B
1005+ 746B              //  ______________________________________________________________________
1006+ 746B              //
1007+ 746B              // .c           c --
1008+ 746B              // intermediate general purpose string builder, used by ." and .(
1009+ 746B                              Colon_Def DOT_C,  ".C", is_immediate
1009+ 746B             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1009+ 746B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ 746B             >
1009+ 746B             >                // dummy db directives used to calculate length of namec
1009+ 746B 2E 43       >                db      ".C"
1009+ 746D             >len_NFA         defl    $ - temp_NFA
1009+ 746D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ 746B             >
1009+ 746B C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ 746C 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1009+ 746E             >                org     $-1                 // alter last byte of Name just above to set
1009+ 746D C3          >                db      {b $} | END_BIT     // msb as name end
1009+ 746E             >
1009+ 746E 51 74       >                dw      last_NFA            // Link to previous definition Name
1009+ 7470             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 7470 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1009+ 7473             >
1009+ 7473             >
1009+ 7473             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 7473             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 7473             >
1009+ 7473             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 7473 C1 6D 0C 6B                  dw      STATE, FETCH            // state @
1011+ 7477                                                              // if
1012+ 7477 1C 64                        dw      ZBRANCH
1013+ 7479 12 00                        dw      Dot_C_Else - $
1014+ 747B D2 70 28 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1015+ 747F D8 73 23 6B                  dw          WORD, CFETCH        //      word c@
1016+ 7483 E0 69 75 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1017+ 7487                                                              // else
1018+ 7487 07 64                        dw      BRANCH
1019+ 7489 08 00                        dw      Dot_C_Endif - $
1020+ 748B              Dot_C_Else:
1021+ 748B D8 73 EE 71                  dw          WORD, COUNT, TYPE   //      word count type
1021+ 748F 0C 72
1022+ 7491              Dot_C_Endif:                                    // endif
1023+ 7491 48 69                        dw      EXIT                    ;
1024+ 7493
1025+ 7493              //  ______________________________________________________________________
1026+ 7493              //
1027+ 7493              // ."           c --
1028+ 7493                              Colon_Def DOT_QUOTE,  '."', is_immediate
1028+ 7493             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1028+ 7493             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1028+ 7493             >
1028+ 7493             >                // dummy db directives used to calculate length of namec
1028+ 7493 2E 22       >                db      '."'
1028+ 7495             >len_NFA         defl    $ - temp_NFA
1028+ 7495             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1028+ 7493             >
1028+ 7493 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1028+ 7494 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1028+ 7496             >                org     $-1                 // alter last byte of Name just above to set
1028+ 7495 A2          >                db      {b $} | END_BIT     // msb as name end
1028+ 7496             >
1028+ 7496 6B 74       >                dw      last_NFA            // Link to previous definition Name
1028+ 7498             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1028+ 7498 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1028+ 749B             >
1028+ 749B             >
1028+ 749B             >                endif           ; ok        // for other definitions it "points" the correct handler
1028+ 749B             >                // Use of "; ok" to suppress "warning[fwdref]"
1028+ 749B             >
1028+ 749B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1029+ 749B A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1030+ 749F 70 74                        dw      DOT_C                   // [compile] .c
1031+ 74A1 48 69                        dw      EXIT                    // ; immediate
1032+ 74A3
1033+ 74A3              //  ______________________________________________________________________
1034+ 74A3              //
1035+ 74A3              // .(           c --
1036+ 74A3                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1036+ 74A3             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1036+ 74A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1036+ 74A3             >
1036+ 74A3             >                // dummy db directives used to calculate length of namec
1036+ 74A3 2E 28       >                db      ".("
1036+ 74A5             >len_NFA         defl    $ - temp_NFA
1036+ 74A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1036+ 74A3             >
1036+ 74A3 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1036+ 74A4 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1036+ 74A6             >                org     $-1                 // alter last byte of Name just above to set
1036+ 74A5 A8          >                db      {b $} | END_BIT     // msb as name end
1036+ 74A6             >
1036+ 74A6 93 74       >                dw      last_NFA            // Link to previous definition Name
1036+ 74A8             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1036+ 74A8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1036+ 74AB             >
1036+ 74AB             >
1036+ 74AB             >                endif           ; ok        // for other definitions it "points" the correct handler
1036+ 74AB             >                // Use of "; ok" to suppress "warning[fwdref]"
1036+ 74AB             >
1036+ 74AB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1037+ 74AB A5 63 29 00                  dw      LIT, ")"                // [char] )
1038+ 74AF 70 74                        dw      DOT_C                   // [compile] .c
1039+ 74B1 48 69                        dw      EXIT                    // ; immediate
1040+ 74B3
1041+ 74B3              //  ______________________________________________________________________
1042+ 74B3              //
1043+ 74B3              // (sgn)        a -- a f
1044+ 74B3              // determines if char in addr a is a sign (+ or -), and in that case increments
1045+ 74B3              // a flag. Returns f as the sign, true for negative, false for positive.
1046+ 74B3              // called by NUMBER and (EXP)
1047+ 74B3                              Colon_Def CSGN,  "(SGN)", is_normal
1047+ 74B3             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1047+ 74B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1047+ 74B3             >
1047+ 74B3             >                // dummy db directives used to calculate length of namec
1047+ 74B3 28 53 47 4E >                db      "(SGN)"
1047+ 74B7 29          >
1047+ 74B8             >len_NFA         defl    $ - temp_NFA
1047+ 74B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1047+ 74B3             >
1047+ 74B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1047+ 74B4 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1047+ 74B8 29          >
1047+ 74B9             >                org     $-1                 // alter last byte of Name just above to set
1047+ 74B8 A9          >                db      {b $} | END_BIT     // msb as name end
1047+ 74B9             >
1047+ 74B9 A3 74       >                dw      last_NFA            // Link to previous definition Name
1047+ 74BB             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1047+ 74BB CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1047+ 74BE             >
1047+ 74BE             >
1047+ 74BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1047+ 74BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1047+ 74BE             >
1047+ 74BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1048+ 74BE 8B 6A E0 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1048+ 74C2 23 6B
1049+ 74C4 8B 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1049+ 74C8 2D 00 C5 6E
1050+ 74CC                                                              // if
1051+ 74CC 1C 64                        dw      ZBRANCH
1052+ 74CE 12 00                        dw      CSgn_Else_0 - $
1053+ 74D0 5E 6A                        dw          DROP                //      drop
1054+ 74D2 E0 69                        dw          ONE_PLUS            //      1+
1055+ 74D4 63 6C D6 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1055+ 74D8 ED 6A
1056+ 74DA 63 6C                        dw          ONE                 //      1
1057+ 74DC                                                              // else
1058+ 74DC 07 64                        dw      BRANCH
1059+ 74DE 16 00                        dw      CSgn_Endif_0 - $
1060+ 74E0              CSgn_Else_0:
1061+ 74E0 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1061+ 74E4 C5 6E
1062+ 74E6                                                              //      if
1063+ 74E6 1C 64                        dw          ZBRANCH
1064+ 74E8 0A 00                        dw          CSgn_Endif_1 - $
1065+ 74EA E0 69                        dw              ONE_PLUS        //          1+
1066+ 74EC 63 6C D6 6D                  dw              ONE, DPL        //          1 dpl
1067+ 74F0 ED 6A                        dw              PLUSSTORE       //          +!
1068+ 74F2              CSgn_Endif_1                                    //      endif
1069+ 74F2 5A 6C                        dw          ZERO                //      0
1070+ 74F4              CSgn_Endif_0:                                   // endif
1071+ 74F4 48 69                        dw      EXIT
1072+ 74F6
1073+ 74F6              //  ______________________________________________________________________
1074+ 74F6              //
1075+ 74F6              // (number)     d a -- d1 a1
1076+ 74F6              // using the current BASE parse characters stored in address a
1077+ 74F6              // accumulating a double precision integer d
1078+ 74F6              // the process stops at the first not-convertible character
1079+ 74F6              // A double-number is kept in CPU registers as HLDE.
1080+ 74F6              // On the stack a double number is treated as two single numbers
1081+ 74F6              // where HL is on the top of the stack and DE is the second from top,
1082+ 74F6              // so in the stack memory it appears as LHED.
1083+ 74F6              // Instead, in 2VARIABLE a double number is stored as EDLH.
1084+ 74F6                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1084+ 74F6             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1084+ 74F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1084+ 74F6             >
1084+ 74F6             >                // dummy db directives used to calculate length of namec
1084+ 74F6 28 4E 55 4D >                db      "(NUMBER)"
1084+ 74FA 42 45 52 29 >
1084+ 74FE             >len_NFA         defl    $ - temp_NFA
1084+ 74FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1084+ 74F6             >
1084+ 74F6 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1084+ 74F7 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1084+ 74FB 42 45 52 29 >
1084+ 74FF             >                org     $-1                 // alter last byte of Name just above to set
1084+ 74FE A9          >                db      {b $} | END_BIT     // msb as name end
1084+ 74FF             >
1084+ 74FF B3 74       >                dw      last_NFA            // Link to previous definition Name
1084+ 7501             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1084+ 7501 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1084+ 7504             >
1084+ 7504             >
1084+ 7504             >                endif           ; ok        // for other definitions it "points" the correct handler
1084+ 7504             >                // Use of "; ok" to suppress "warning[fwdref]"
1084+ 7504             >
1084+ 7504             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1085+ 7504                                                              // begin
1086+ 7504              CNumber_Begin:
1087+ 7504 E0 69                        dw          ONE_PLUS            //      1+
1088+ 7506 8B 6A 59 69                  dw          DUP, TO_R           //      dup >r
1089+ 750A 23 6B                        dw          CFETCH              //      @
1090+ 750C CC 6D 0C 6B                  dw          BASE, FETCH         //      base @
1091+ 7510 95 64                        dw          DIGIT               //      digit
1092+ 7512                                                              // while
1093+ 7512 1C 64                        dw      ZBRANCH
1094+ 7514 2C 00                        dw      CNumber_While_end - $
1095+ 7516 80 6A                        dw          SWAP                //      swap
1096+ 7518 CC 6D 0C 6B                  dw          BASE, FETCH         //      base @
1097+ 751C 80 68                        dw          UM_MUL              //      um*
1098+ 751E 5E 6A 96 6A                  dw          DROP, ROT           //      drop rot
1099+ 7522 CC 6D 0C 6B                  dw          BASE, FETCH         //      base @
1100+ 7526 80 68                        dw          UM_MUL              //      um*
1101+ 7528 CE 69                        dw          DPLUS               //      d+
1102+ 752A D6 6D 0C 6B                  dw          DPL, FETCH          //      dpl @
1103+ 752E E0 69                        dw          ONE_PLUS            //      1+
1104+ 7530                                                              //      if
1105+ 7530 1C 64                        dw          ZBRANCH
1106+ 7532 08 00                        dw          CNumber_Endif - $
1107+ 7534 63 6C D6 6D                  dw              ONE, DPL        //          1 dpl
1108+ 7538 ED 6A                        dw              PLUSSTORE       //          +!
1109+ 753A              CNumber_Endif:                                  //      endif
1110+ 753A 6B 69                        dw             R_TO             //      r>  ( balance rp )
1111+ 753C 07 64                        dw      BRANCH
1112+ 753E C6 FF                        dw      CNumber_Begin - $
1113+ 7540              CNumber_While_end:                              // repeat
1114+ 7540 6B 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1115+ 7542 48 69                        dw      EXIT                    // ;
1116+ 7544
1117+ 7544              //  ______________________________________________________________________
1118+ 7544              //
1119+ 7544              // number       a -- d
1120+ 7544                              Colon_Def NUMBER,  "NUMBER", is_normal
1120+ 7544             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1120+ 7544             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ 7544             >
1120+ 7544             >                // dummy db directives used to calculate length of namec
1120+ 7544 4E 55 4D 42 >                db      "NUMBER"
1120+ 7548 45 52       >
1120+ 754A             >len_NFA         defl    $ - temp_NFA
1120+ 754A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ 7544             >
1120+ 7544 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ 7545 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1120+ 7549 45 52       >
1120+ 754B             >                org     $-1                 // alter last byte of Name just above to set
1120+ 754A D2          >                db      {b $} | END_BIT     // msb as name end
1120+ 754B             >
1120+ 754B F6 74       >                dw      last_NFA            // Link to previous definition Name
1120+ 754D             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 754D CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 7550             >
1120+ 7550             >
1120+ 7550             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 7550             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 7550             >
1120+ 7550             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 7550 5A 6C 5A 6C                  dw      ZERO, ZERO              // 0 0
1122+ 7554 96 6A                        dw      ROT                     // rot
1123+ 7556 BB 74 59 69                  dw      CSGN, TO_R              // (sgn) >r
1124+ 755A 7F 6C D6 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1124+ 755E 17 6B
1125+ 7560 01 75                        dw      CNUMBER                 // (number)
1126+ 7562 8B 6A 23 6B                  dw      DUP, CFETCH             // dup c@
1127+ 7566 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1127+ 756A C5 6E
1128+ 756C                                                              // if
1129+ 756C 1C 64                        dw      ZBRANCH
1130+ 756E 0A 00                        dw      Number_Endif_1 - $
1131+ 7570 5A 6C D6 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1131+ 7574 17 6B
1132+ 7576 01 75                        dw          CNUMBER             //      (number)
1133+ 7578              Number_Endif_1:                                 // endif
1134+ 7578 23 6B 89 6C                  dw      CFETCH, BL              // c@ bl
1135+ 757C B9 6E 5A 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1135+ 7580 39 70
1136+ 7582 6B 69                        dw      R_TO                    // r>
1137+ 7584                                                              // if
1138+ 7584 1C 64                        dw      ZBRANCH
1139+ 7586 04 00                        dw      Number_Endif_2 - $
1140+ 7588 38 6A                        dw          DMINUS              //      dminus
1141+ 758A              Number_Endif_2:                                 // endif
1142+ 758A 48 69                        dw      EXIT                    // ;
1143+ 758C
1144+ 758C              //  ______________________________________________________________________
1145+ 758C              //
1146+ 758C              // -find        a -- d
1147+ 758C                              Colon_Def LFIND,  "-FIND", is_normal
1147+ 758C             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1147+ 758C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ 758C             >
1147+ 758C             >                // dummy db directives used to calculate length of namec
1147+ 758C 2D 46 49 4E >                db      "-FIND"
1147+ 7590 44          >
1147+ 7591             >len_NFA         defl    $ - temp_NFA
1147+ 7591             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ 758C             >
1147+ 758C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ 758D 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1147+ 7591 44          >
1147+ 7592             >                org     $-1                 // alter last byte of Name just above to set
1147+ 7591 C4          >                db      {b $} | END_BIT     // msb as name end
1147+ 7592             >
1147+ 7592 44 75       >                dw      last_NFA            // Link to previous definition Name
1147+ 7594             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 7594 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 7597             >
1147+ 7597             >
1147+ 7597             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 7597             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 7597             >
1147+ 7597             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 7597 89 6C D8 73                  dw      BL, WORD                // bl word
1149+ 759B A7 6D 0C 6B                  dw      CONTEXT, FETCH, FETCH   // context @ @
1149+ 759F 0C 6B
1150+ 75A1 02 65                        dw      C_FIND                  // (find)
1151+ 75A3 38 6F                        dw      QDUP                    // ?dup
1152+ 75A5 85 69                        dw      ZEQUAL                  // 0=
1153+ 75A7                                                              // if
1154+ 75A7 1C 64                        dw      ZBRANCH
1155+ 75A9 08 00                        dw      LFind_Endif - $
1156+ 75AB 64 6E                        dw          HERE                //      here
1157+ 75AD A7 6F                        dw          LATEST              //      latest
1158+ 75AF 02 65                        dw          C_FIND              //      (find)
1159+ 75B1              LFind_Endif:                                    // endif
1160+ 75B1 48 69                        dw      EXIT                    // ;
1161+ 75B3
1162+ 75B3              //  ______________________________________________________________________
1163+ 75B3              //
1164+ 75B3              // (abort)      --
1165+ 75B3                              Colon_Def CABORT,  "(ABORT)", is_normal
1165+ 75B3             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1165+ 75B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 75B3             >
1165+ 75B3             >                // dummy db directives used to calculate length of namec
1165+ 75B3 28 41 42 4F >                db      "(ABORT)"
1165+ 75B7 52 54 29    >
1165+ 75BA             >len_NFA         defl    $ - temp_NFA
1165+ 75BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 75B3             >
1165+ 75B3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 75B4 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1165+ 75B8 52 54 29    >
1165+ 75BB             >                org     $-1                 // alter last byte of Name just above to set
1165+ 75BA A9          >                db      {b $} | END_BIT     // msb as name end
1165+ 75BB             >
1165+ 75BB 8C 75       >                dw      last_NFA            // Link to previous definition Name
1165+ 75BD             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 75BD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1165+ 75C0             >
1165+ 75C0             >
1165+ 75C0             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 75C0             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 75C0             >
1165+ 75C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 75C0 99 78                        dw      ABORT                   // abort
1167+ 75C2 48 69                        dw      EXIT                    // ;
1168+ 75C4
1169+ 75C4              //  ______________________________________________________________________
1170+ 75C4              //
1171+ 75C4              // error        n --
1172+ 75C4              // raise an error
1173+ 75C4              // if WARNING is 0, prints "MSG#n".
1174+ 75C4              // if WARNING is 1, prints line n of screen 4.
1175+ 75C4              // if WARNING is -1 does (ABORT) that normally does ABORT
1176+ 75C4              // value can be negative or beyond block 4.
1177+ 75C4                              Colon_Def ERROR,  "ERROR", is_normal
1177+ 75C4             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1177+ 75C4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 75C4             >
1177+ 75C4             >                // dummy db directives used to calculate length of namec
1177+ 75C4 45 52 52 4F >                db      "ERROR"
1177+ 75C8 52          >
1177+ 75C9             >len_NFA         defl    $ - temp_NFA
1177+ 75C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 75C4             >
1177+ 75C4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 75C5 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1177+ 75C9 52          >
1177+ 75CA             >                org     $-1                 // alter last byte of Name just above to set
1177+ 75C9 D2          >                db      {b $} | END_BIT     // msb as name end
1177+ 75CA             >
1177+ 75CA B3 75       >                dw      last_NFA            // Link to previous definition Name
1177+ 75CC             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 75CC CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1177+ 75CF             >
1177+ 75CF             >
1177+ 75CF             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 75CF             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 75CF             >
1177+ 75CF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 75CF 12 6D 0C 6B                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1178+ 75D3 9F 69
1179+ 75D5                                                              // if
1180+ 75D5 1C 64                        dw      ZBRANCH
1181+ 75D7 04 00                        dw      Error_Endif_1 - $
1182+ 75D9 BD 75                        dw          CABORT              //      (abort)
1183+ 75DB              Error_Endif_1:                                  // endif
1184+ 75DB 64 6E EE 71                  dw      HERE, COUNT, TYPE       // here count type
1184+ 75DF 0C 72
1185+ 75E1 28 74                        dw      C_DOT_QUOTE             // .( ? )
1186+ 75E3 02 3F 20                     db      2, "? "
1187+ 75E6 DC 7A                        dw      MESSAGE                 // message  ( forward )
1188+ 75E8 E5 6C 0C 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1188+ 75EC 25 69
1189+ 75EE 6E 6D 0C 6B                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1189+ 75F2 38 6F
1190+ 75F4                                                              // if
1191+ 75F4 1C 64                        dw      ZBRANCH
1192+ 75F6 08 00                        dw      Error_Endif_2 - $
1193+ 75F8 78 6D 0C 6B                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1193+ 75FC 80 6A
1194+ 75FE              Error_Endif_2:                                  // endif
1195+ 75FE 57 78                        dw      QUIT                    // quit ( forward )
1196+ 7600 48 69                        dw      EXIT                    // ;
1197+ 7602              //  ______________________________________________________________________
1198+ 7602              //
1199+ 7602              // id.          nfa --
1200+ 7602                              Colon_Def ID_DOT,  "ID.", is_normal
1200+ 7602             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1200+ 7602             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1200+ 7602             >
1200+ 7602             >                // dummy db directives used to calculate length of namec
1200+ 7602 49 44 2E    >                db      "ID."
1200+ 7605             >len_NFA         defl    $ - temp_NFA
1200+ 7605             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1200+ 7602             >
1200+ 7602 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1200+ 7603 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1200+ 7606             >                org     $-1                 // alter last byte of Name just above to set
1200+ 7605 AE          >                db      {b $} | END_BIT     // msb as name end
1200+ 7606             >
1200+ 7606 C4 75       >                dw      last_NFA            // Link to previous definition Name
1200+ 7608             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1200+ 7608 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1200+ 760B             >
1200+ 760B             >
1200+ 760B             >                endif           ; ok        // for other definitions it "points" the correct handler
1200+ 760B             >                // Use of "; ok" to suppress "warning[fwdref]"
1200+ 760B             >
1200+ 760B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1201+ 760B C4 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1201+ 760F 20 00 A5 63
1201+ 7613 60 00
1202+ 7615 73 73                        dw      FILL                    // fill
1203+ 7617 8B 6A ED 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1203+ 761B B8 6F
1204+ 761D 50 6A B9 6E                  dw      OVER, SUBTRACT          // over -
1205+ 7621 C4 73 80 6A                  dw      PAD, SWAP               // pad swap
1206+ 7625 51 68                        dw      CMOVE                   // cmove
1207+ 7627 C4 73 EE 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1207+ 762B A5 63 1F 00
1208+ 762F E6 68                        dw      AND_OP                  // and  ( use only lower bits )
1209+ 7631 0C 72 6F 6F                  dw      TYPE, SPACE             // type
1210+ 7635 48 69                        dw      EXIT                    // ;
1211+ 7637
1212+ 7637              //  ______________________________________________________________________
1213+ 7637              //
1214+ 7637              // code         -- cccc
1215+ 7637                              Colon_Def CODE,  "CODE", is_normal
1215+ 7637             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1215+ 7637             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1215+ 7637             >
1215+ 7637             >                // dummy db directives used to calculate length of namec
1215+ 7637 43 4F 44 45 >                db      "CODE"
1215+ 763B             >len_NFA         defl    $ - temp_NFA
1215+ 763B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1215+ 7637             >
1215+ 7637 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1215+ 7638 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1215+ 763C             >                org     $-1                 // alter last byte of Name just above to set
1215+ 763B C5          >                db      {b $} | END_BIT     // msb as name end
1215+ 763C             >
1215+ 763C 02 76       >                dw      last_NFA            // Link to previous definition Name
1215+ 763E             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1215+ 763E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1215+ 7641             >
1215+ 7641             >
1215+ 7641             >                endif           ; ok        // for other definitions it "points" the correct handler
1215+ 7641             >                // Use of "; ok" to suppress "warning[fwdref]"
1215+ 7641             >
1215+ 7641             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1216+ 7641 94 75                        dw      LFIND                   // -find
1217+ 7643                                                              // if
1218+ 7643 1C 64                        dw      ZBRANCH
1219+ 7645 10 00                        dw      Code_Endif - $
1220+ 7647 5E 6A                        dw          DROP                //      drop
1221+ 7649 15 70 08 76                  dw          TO_NAME, ID_DOT     //      >name id.
1222+ 764D A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1222+ 7651 DC 7A
1223+ 7653 6F 6F                        dw          SPACE               //      space
1224+ 7655              Code_Endif:                                     // endif
1225+ 7655 64 6E                        dw      HERE                    // here
1226+ 7657                                                              // ( ---- here begins NFA ---- )
1227+ 7657 8B 6A 23 6B                  dw      DUP, CFETCH             // dup c@
1228+ 765B 04 6D 0C 6B                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1228+ 765F 09 6F
1229+ 7661 E0 69 75 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1230+ 7665 8B 6A                        dw      DUP                     // dup
1231+ 7667 A5 63                        dw      LIT
1232+ 7669 A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1233+ 766B 01 6B                        dw      TOGGLE                  // toggle
1234+ 766D 64 6E EA 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1235+ 7671 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1235+ 7675 01 6B
1236+ 7677                                                              // ( ---- here is LFA ---- )
1237+ 7677 A7 6F 82 6E                  dw      LATEST, COMMA           // latest ,
1238+ 767B B5 6D 0C 6B                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1238+ 767F 17 6B
1239+ 7681                                                              // ( ---- here is LFA ---- )
1240+ 7681              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1241+ 7681 48 69                        dw      EXIT                    // ;
1242+ 7683
1243+ 7683              //  ______________________________________________________________________
1244+ 7683              //
1245+ 7683              // create       -- cccc     ( compile time )
1246+ 7683              //              -- a        ( run time )
1247+ 7683                              Colon_Def CREATE,  "CREATE", is_normal
1247+ 7683             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1247+ 7683             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ 7683             >
1247+ 7683             >                // dummy db directives used to calculate length of namec
1247+ 7683 43 52 45 41 >                db      "CREATE"
1247+ 7687 54 45       >
1247+ 7689             >len_NFA         defl    $ - temp_NFA
1247+ 7689             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ 7683             >
1247+ 7683 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ 7684 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1247+ 7688 54 45       >
1247+ 768A             >                org     $-1                 // alter last byte of Name just above to set
1247+ 7689 C5          >                db      {b $} | END_BIT     // msb as name end
1247+ 768A             >
1247+ 768A 37 76       >                dw      last_NFA            // Link to previous definition Name
1247+ 768C             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 768C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1247+ 768F             >
1247+ 768F             >
1247+ 768F             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 768F             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 768F             >
1247+ 768F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 768F 3E 76 22 71                  dw      CODE, SMUDGE            // code smudge
1249+ 7693 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1249+ 7697 94 6E
1250+ 7699 A5 63 39 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1250+ 769D 82 6E
1251+ 769F 7C 71                        dw      C_SEMICOLON_CODE
1252+ 76A1                              // this routine is called from the call coded in CFA
1253+ 76A1              Create_Ptr:
1254+ 76A1
1255+ 76A1
1256+ 76A1
1257+ 76A1                              next
1257+ 76A1 DD E9       >                jp      (ix)
1258+ 76A3
1259+ 76A3              //  ______________________________________________________________________
1260+ 76A3              //
1261+ 76A3              // [compile]    -- cccc     ( compile time )
1262+ 76A3                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1262+ 76A3             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1262+ 76A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1262+ 76A3             >
1262+ 76A3             >                // dummy db directives used to calculate length of namec
1262+ 76A3 5B 43 4F 4D >                db      "[COMPILE]"
1262+ 76A7 50 49 4C 45 >
1262+ 76AB 5D          >
1262+ 76AC             >len_NFA         defl    $ - temp_NFA
1262+ 76AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1262+ 76A3             >
1262+ 76A3 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1262+ 76A4 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1262+ 76A8 50 49 4C 45 >
1262+ 76AC 5D          >
1262+ 76AD             >                org     $-1                 // alter last byte of Name just above to set
1262+ 76AC DD          >                db      {b $} | END_BIT     // msb as name end
1262+ 76AD             >
1262+ 76AD 83 76       >                dw      last_NFA            // Link to previous definition Name
1262+ 76AF             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1262+ 76AF CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1262+ 76B2             >
1262+ 76B2             >
1262+ 76B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1262+ 76B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1262+ 76B2             >
1262+ 76B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1263+ 76B2 94 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1264+ 76B4 85 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1265+ 76B6 5A 6C 39 70                  dw      ZERO, QERROR            // 0 ?error
1266+ 76BA 5E 6A                        dw      DROP                    // drop       (  cfa  )
1267+ 76BC 82 6E                        dw      COMMA                   // ,
1268+ 76BE 48 69                        dw      EXIT                    // ; immediate
1269+ 76C0
1270+ 76C0              //  ______________________________________________________________________
1271+ 76C0              //
1272+ 76C0              // literal      n --      ( compile time )
1273+ 76C0                              Colon_Def LITERAL,  "LITERAL", is_immediate
1273+ 76C0             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1273+ 76C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1273+ 76C0             >
1273+ 76C0             >                // dummy db directives used to calculate length of namec
1273+ 76C0 4C 49 54 45 >                db      "LITERAL"
1273+ 76C4 52 41 4C    >
1273+ 76C7             >len_NFA         defl    $ - temp_NFA
1273+ 76C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1273+ 76C0             >
1273+ 76C0 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1273+ 76C1 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1273+ 76C5 52 41 4C    >
1273+ 76C8             >                org     $-1                 // alter last byte of Name just above to set
1273+ 76C7 CC          >                db      {b $} | END_BIT     // msb as name end
1273+ 76C8             >
1273+ 76C8 A3 76       >                dw      last_NFA            // Link to previous definition Name
1273+ 76CA             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1273+ 76CA CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1273+ 76CD             >
1273+ 76CD             >
1273+ 76CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1273+ 76CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1273+ 76CD             >
1273+ 76CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1274+ 76CD C1 6D 0C 6B                  dw      STATE, FETCH            // state @
1275+ 76D1                                                              // if
1276+ 76D1 1C 64                        dw      ZBRANCH
1277+ 76D3 08 00                        dw      Literal_Endif - $
1278+ 76D5 D2 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1279+ 76D9 82 6E                        dw          COMMA               //      ,
1280+ 76DB              Literal_Endif:                                  // endif
1281+ 76DB 48 69                        dw      EXIT                    // ; immediate
1282+ 76DD
1283+ 76DD              //  ______________________________________________________________________
1284+ 76DD              //
1285+ 76DD              // dliteral     n --      ( compile time )
1286+ 76DD                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1286+ 76DD             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1286+ 76DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1286+ 76DD             >
1286+ 76DD             >                // dummy db directives used to calculate length of namec
1286+ 76DD 44 4C 49 54 >                db      "DLITERAL"
1286+ 76E1 45 52 41 4C >
1286+ 76E5             >len_NFA         defl    $ - temp_NFA
1286+ 76E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1286+ 76DD             >
1286+ 76DD C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1286+ 76DE 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1286+ 76E2 45 52 41 4C >
1286+ 76E6             >                org     $-1                 // alter last byte of Name just above to set
1286+ 76E5 CC          >                db      {b $} | END_BIT     // msb as name end
1286+ 76E6             >
1286+ 76E6 C0 76       >                dw      last_NFA            // Link to previous definition Name
1286+ 76E8             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1286+ 76E8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1286+ 76EB             >
1286+ 76EB             >
1286+ 76EB             >                endif           ; ok        // for other definitions it "points" the correct handler
1286+ 76EB             >                // Use of "; ok" to suppress "warning[fwdref]"
1286+ 76EB             >
1286+ 76EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1287+ 76EB C1 6D 0C 6B                  dw      STATE, FETCH            // state @
1288+ 76EF                                                              // if
1289+ 76EF 1C 64                        dw      ZBRANCH
1290+ 76F1 08 00                        dw      DLiteral_Endif - $
1291+ 76F3 80 6A                        dw          SWAP                //      swap
1292+ 76F5 CA 76 CA 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1293+ 76F9              DLiteral_Endif:                                 // endif
1294+ 76F9 48 69                        dw      EXIT                    // ; immediate
1295+ 76FB
1296+ 76FB              //  ______________________________________________________________________
1297+ 76FB              //
1298+ 76FB              // [char]       n --      ( compile time )
1299+ 76FB              // inside colon definition, gets first character from next input word
1300+ 76FB              // and compiles it as literal.
1301+ 76FB                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1301+ 76FB             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1301+ 76FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1301+ 76FB             >
1301+ 76FB             >                // dummy db directives used to calculate length of namec
1301+ 76FB 5B 43 48 41 >                db      "[CHAR]"
1301+ 76FF 52 5D       >
1301+ 7701             >len_NFA         defl    $ - temp_NFA
1301+ 7701             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1301+ 76FB             >
1301+ 76FB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1301+ 76FC 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1301+ 7700 52 5D       >
1301+ 7702             >                org     $-1                 // alter last byte of Name just above to set
1301+ 7701 DD          >                db      {b $} | END_BIT     // msb as name end
1301+ 7702             >
1301+ 7702 DD 76       >                dw      last_NFA            // Link to previous definition Name
1301+ 7704             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1301+ 7704 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1301+ 7707             >
1301+ 7707             >
1301+ 7707             >                endif           ; ok        // for other definitions it "points" the correct handler
1301+ 7707             >                // Use of "; ok" to suppress "warning[fwdref]"
1301+ 7707             >
1301+ 7707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1302+ 7707 44 74 CA 76                  dw      CHAR, LITERAL           // char [compile] literal
1303+ 770B 48 69                        dw      EXIT                    // ; immediate
1304+ 770D
1305+ 770D              //  ______________________________________________________________________
1306+ 770D              //
1307+ 770D              // 0x00         n --      ( compile time )
1308+ 770D                              Colon_Def NUL_WORD,  $00, is_immediate
1308+ 770D             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1308+ 770D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1308+ 770D             >
1308+ 770D             >                // dummy db directives used to calculate length of namec
1308+ 770D 00          >                db      $00
1308+ 770E             >len_NFA         defl    $ - temp_NFA
1308+ 770E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1308+ 770D             >
1308+ 770D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1308+ 770E 00          >                db      $00               // name string in 7-bit ascii, but
1308+ 770F             >                org     $-1                 // alter last byte of Name just above to set
1308+ 770E 80          >                db      {b $} | END_BIT     // msb as name end
1308+ 770F             >
1308+ 770F FB 76       >                dw      last_NFA            // Link to previous definition Name
1308+ 7711             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1308+ 7711 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1308+ 7714             >
1308+ 7714             >
1308+ 7714             >                endif           ; ok        // for other definitions it "points" the correct handler
1308+ 7714             >                // Use of "; ok" to suppress "warning[fwdref]"
1308+ 7714             >
1308+ 7714             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1309+ 7714 6E 6D 0C 6B                  dw      BLK, FETCH, ONE         // blk @ 1
1309+ 7718 63 6C
1310+ 771A FA 6E                        dw      GREATER                 // > if
1311+ 771C                                                              // if
1312+ 771C 1C 64                        dw      ZBRANCH
1313+ 771E 28 00                        dw      Nul_Else_1 - $
1314+ 7720 63 6C 6E 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1314+ 7724 ED 6A
1315+ 7726 5A 6C 78 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1315+ 772A 17 6B
1316+ 772C 6E 6D 0C 6B                  dw          BLK, FETCH          //      blk @
1317+ 7730 AE 6C                        dw          BSCR                //      b/scr
1318+ 7732 EA 69                        dw          ONE_SUBTRACT        //      1 -
1319+ 7734 E6 68                        dw          AND_OP              //      and  ( this is tricky )
1320+ 7736 85 69                        dw          ZEQUAL              //      0=
1321+ 7738                                                              //      if
1322+ 7738 1C 64                        dw          ZBRANCH
1323+ 773A 08 00                        dw          Nul_Endif_2 - $
1324+ 773C 6D 70                        dw              QEXEC           //          ?exec
1325+ 773E 6B 69 5E 6A                  dw              R_TO, DROP      //          r> drop
1326+ 7742              Nul_Endif_2:                                    //      endif
1327+ 7742 07 64                        dw      BRANCH
1328+ 7744 06 00                        dw      Nul_Endif_1 - $
1329+ 7746              Nul_Else_1:                                     // else
1330+ 7746 6B 69 5E 6A                  dw          R_TO, DROP          //      r> drop
1331+ 774A              Nul_Endif_1:                                    // endif
1332+ 774A 48 69                        dw      EXIT                    // ;
1333+ 774C
1334+ 774C              //  ______________________________________________________________________
1335+ 774C              //
1336+ 774C              // ?stack       --
1337+ 774C              // Raise error #1 if stack is empty and you pop it
1338+ 774C              // Raise error #7 if stack is full.
1339+ 774C              // This means SP must always stay between HERE and FFFF
1340+ 774C              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1341+ 774C              // for Next 8K MMU paging this is $DOE8
1342+ 774C                              Colon_Def QSTACK, "?STACK", is_normal
1342+ 774C             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1342+ 774C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1342+ 774C             >
1342+ 774C             >                // dummy db directives used to calculate length of namec
1342+ 774C 3F 53 54 41 >                db      "?STACK"
1342+ 7750 43 4B       >
1342+ 7752             >len_NFA         defl    $ - temp_NFA
1342+ 7752             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1342+ 774C             >
1342+ 774C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1342+ 774D 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1342+ 7751 43 4B       >
1342+ 7753             >                org     $-1                 // alter last byte of Name just above to set
1342+ 7752 CB          >                db      {b $} | END_BIT     // msb as name end
1342+ 7753             >
1342+ 7753 0D 77       >                dw      last_NFA            // Link to previous definition Name
1342+ 7755             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1342+ 7755 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1342+ 7758             >
1342+ 7758             >
1342+ 7758             >                endif           ; ok        // for other definitions it "points" the correct handler
1342+ 7758             >                // Use of "; ok" to suppress "warning[fwdref]"
1342+ 7758             >
1342+ 7758             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1343+ 7758 18 69                        dw      SPFETCH                 // sp@
1344+ 775A E5 6C 0C 6B                  dw      S0, FETCH               // s0 @
1345+ 775E 80 6A D3 6E                  dw      SWAP, ULESS             // swap u<
1346+ 7762 63 6C 39 70                  dw      ONE, QERROR             // 1 ?error
1347+ 7766 64 6E                        dw      HERE                    // here
1348+ 7768 E5 6C 0C 6B                  dw      S0, FETCH, LESS         // s0 @ <
1348+ 776C E5 6E
1349+ 776E                                                              // if
1350+ 776E 1C 64                        dw      ZBRANCH
1351+ 7770 14 00                        dw      QStack_Endif - $
1352+ 7772 18 69                        dw          SPFETCH             //      sp@
1353+ 7774 64 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1353+ 7778 80 00
1354+ 777A C3 69 D3 6E                  dw          PLUS, ULESS         //      plus u<
1355+ 777E A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1355+ 7782 39 70
1356+ 7784              QStack_Endif:                                   // endif
1357+ 7784 48 69                        dw      EXIT                    // ;
1358+ 7786
1359+ 7786
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7786                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7786              //  ______________________________________________________________________
   2+ 7786              //
   3+ 7786              //  L2.asm
   4+ 7786              //
   5+ 7786              //  Level-2
   6+ 7786              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7786              //  ______________________________________________________________________
   8+ 7786
   9+ 7786
  10+ 7786              //  ______________________________________________________________________
  11+ 7786              //
  12+ 7786              // interpret    --
  13+ 7786              // This is the text interpreter.
  14+ 7786              // It executes or compiles, depending on STATE, the text coming from
  15+ 7786              // current input stream.
  16+ 7786              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7786              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7786              // leaving on top of stack a single or double precision number, depending
  19+ 7786              // on the presence of a decimal point.
  20+ 7786              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7786              // by the offending word.
  22+ 7786                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7786             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7786             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7786             >
  22+ 7786             >                // dummy db directives used to calculate length of namec
  22+ 7786 49 4E 54 45 >                db      "INTERPRET"
  22+ 778A 52 50 52 45 >
  22+ 778E 54          >
  22+ 778F             >len_NFA         defl    $ - temp_NFA
  22+ 778F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7786             >
  22+ 7786 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7787 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 778B 52 50 52 45 >
  22+ 778F 54          >
  22+ 7790             >                org     $-1                 // alter last byte of Name just above to set
  22+ 778F D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7790             >
  22+ 7790 4C 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7792             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7792 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7795             >
  22+ 7795             >
  22+ 7795             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7795             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7795             >
  22+ 7795             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7795
  24+ 7795              Interpret_Begin:                                        // begin
  25+ 7795 94 75                        dw          LFIND                       //      -find
  26+ 7797                                                                      //      if
  27+ 7797 1C 64                        dw          ZBRANCH
  28+ 7799 1A 00                        dw          Interpret_Else_1 - $
  29+ 779B C1 6D 0C 6B                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 779F E5 6E
  30+ 77A1                                                                      //          if
  31+ 77A1 1C 64                        dw              ZBRANCH
  32+ 77A3 08 00                        dw              Interpret_Else_2 - $
  33+ 77A5 F0 70                        dw                  COMPILE_XT          //              compile,
  34+ 77A7                                                                      //          else
  35+ 77A7 07 64                        dw              BRANCH
  36+ 77A9 06 00                        dw              Interpret_Endif_2 - $
  37+ 77AB              Interpret_Else_2:
  38+ 77AB B8 63 08 6C                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 77AF              Interpret_Endif_2:                                      //          endif
  40+ 77AF                                                                      //      else
  41+ 77AF 07 64                        dw          BRANCH
  42+ 77B1 1A 00                        dw          Interpret_Endif_1 - $
  43+ 77B3              Interpret_Else_1:
  44+ 77B3 64 6E 4D 75                  dw              HERE, NUMBER            //          here number
  45+ 77B7 D6 6D 0C 6B                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 77BB E0 69
  46+ 77BD                                                                      //          if
  47+ 77BD 1C 64                        dw              ZBRANCH
  48+ 77BF 08 00                        dw              Interpret_Else_3 - $
  49+ 77C1              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77C1              //                                                      //              if
  51+ 77C1              //              dw                  ZBRANCH
  52+ 77C1              //              dw                  Interpret_Endif_4 - $
  53+ 77C1              //              dw                      ONE, ZERO       //                  1 0
  54+ 77C1              //              dw                      TWO_DROP        //                  2drop
  55+ 77C1              //Interpret_Endif_4:                                      //              endif
  56+ 77C1 E8 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77C3                                                                      //          else
  58+ 77C3 07 64                        dw              BRANCH
  59+ 77C5 06 00                        dw              Interpret_Endif_3 - $
  60+ 77C7              Interpret_Else_3:
  61+ 77C7 5E 6A                        dw                  DROP                //              drop
  62+ 77C9 CA 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77CB              Interpret_Endif_3:                                      //          endif
  64+ 77CB              Interpret_Endif_1:                                      //      endif
  65+ 77CB 55 77                        dw          QSTACK                      //      ?stack
  66+ 77CD 0B 67                        dw          QTERMINAL                   //      ?terminal
  67+ 77CF                                                                      //      if
  68+ 77CF 1C 64                        dw          ZBRANCH
  69+ 77D1 04 00                        dw          Interpret_Endif_5 - $
  70+ 77D3 BD 75                        dw              CABORT                  //          (abort)
  71+ 77D5              Interpret_Endif_5:                                      //      endif
  72+ 77D5 07 64                        dw      BRANCH
  73+ 77D7 BE FF                        dw      Interpret_Begin - $
  74+ 77D9 48 69                        dw      EXIT                            // ;
  75+ 77DB
  76+ 77DB              //  ______________________________________________________________________
  77+ 77DB              //
  78+ 77DB              // vocabulary   -- cccc     ( compile time )
  79+ 77DB              // Defining word used in the form   VOCABULARY cccc
  80+ 77DB              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77DB              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77DB              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77DB              // so new definitions can be inserted in that vocabulary.
  84+ 77DB                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77DB             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77DB             >
  84+ 77DB             >                // dummy db directives used to calculate length of namec
  84+ 77DB 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77DF 42 55 4C 41 >
  84+ 77E3 52 59       >
  84+ 77E5             >len_NFA         defl    $ - temp_NFA
  84+ 77E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77DB             >
  84+ 77DB 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77DC 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77E0 42 55 4C 41 >
  84+ 77E4 52 59       >
  84+ 77E6             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77E5 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77E6             >
  84+ 77E6 86 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77E8             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77E8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77EB             >
  84+ 77EB             >
  84+ 77EB             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77EB             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77EB             >
  84+ 77EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77EB
  86+ 77EB B6 71                        dw      CBUILDS
  87+ 77ED
  88+ 77ED A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77F1 82 6E
  89+ 77F3 B5 6D 0C 6B                  dw      CURRENT, FETCH          // current @
  90+ 77F7 0D 6A 82 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77FB 64 6E                        dw      HERE                    // here
  92+ 77FD 36 6D 0C 6B                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 7801 82 6E
  93+ 7803 36 6D 17 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 7807
  95+ 7807 C7 71                        dw      DOES_TO                 // does>
  96+ 7809              Vocabulary_Does:
  97+ 7809 02 6A                        dw      CELL_PLUS               // cell+
  98+ 780B A7 6D 17 6B                  dw      CONTEXT, STORE          // context !
  99+ 780F 48 69                        dw      EXIT                    // ;
 100+ 7811
 101+ 7811              //  ______________________________________________________________________
 102+ 7811              //
 103+ 7811              // forth        --
 104+ 7811              // Name of the first vocabulary.
 105+ 7811              // It makes FORTH the CONTEXT vocabulary.
 106+ 7811              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 7811              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 7811              // of a colon definition to be able to select the vocabulary.
 109+ 7811
 110+ 7811                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 7811             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 7811             >
 110+ 7811             >                // dummy db directives used to calculate length of namec
 110+ 7811 46 4F 52 54 >                db      "FORTH"
 110+ 7815 48          >
 110+ 7816             >len_NFA         defl    $ - temp_NFA
 110+ 7816             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 7811             >
 110+ 7811 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 7812 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 7816 48          >
 110+ 7817             >                org     $-1                 // alter last byte of Name just above to set
 110+ 7816 C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 7817             >
 110+ 7817 DB 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 7819             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 7819 CD D4 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 781C             >
 110+ 781C             >
 110+ 781C             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 781C             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 781C             >
 110+ 781C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 781C 09 78                        dw      Vocabulary_Does
 112+ 781E 81 A0                        db      $81, $A0
 113+ 7820              Forth_Latest_Ptr:
 114+ 7820 93 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition
 115+ 7822              Voclink_Ptr:
 116+ 7822 00 00                        dw      0
 117+ 7824              // Any new vocabulary is structured as follow:
 118+ 7824              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 7824              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 7824              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 7824              //       at creations it points to the null-word of its parent vocabulary
 122+ 7824              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 7824              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 7824              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 7824              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 7824              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 7824              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 7824
 129+ 7824              //  ______________________________________________________________________
 130+ 7824              //
 131+ 7824              // definitions  --
 132+ 7824              // Used in the form  cccc DEFINITIONS
 133+ 7824              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 7824              // vocabulary cccc.
 135+ 7824                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 7824             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 7824             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 7824             >
 135+ 7824             >                // dummy db directives used to calculate length of namec
 135+ 7824 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7828 4E 49 54 49 >
 135+ 782C 4F 4E 53    >
 135+ 782F             >len_NFA         defl    $ - temp_NFA
 135+ 782F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 7824             >
 135+ 7824 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 7825 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7829 4E 49 54 49 >
 135+ 782D 4F 4E 53    >
 135+ 7830             >                org     $-1                 // alter last byte of Name just above to set
 135+ 782F D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7830             >
 135+ 7830 11 78       >                dw      last_NFA            // Link to previous definition Name
 135+ 7832             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 7832 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 7835             >
 135+ 7835             >
 135+ 7835             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 7835             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 7835             >
 135+ 7835             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 7835 A7 6D 0C 6B                  dw      CONTEXT, FETCH          // context @
 137+ 7839 B5 6D 17 6B                  dw      CURRENT, STORE          // current !
 138+ 783D 48 69                        dw      EXIT                    // ;
 139+ 783F
 140+ 783F              //  ______________________________________________________________________
 141+ 783F              //
 142+ 783F              // (            -- cccc )
 143+ 783F              // the following text is interpreted as a comment until a closing )
 144+ 783F                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 783F             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 783F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 783F             >
 144+ 783F             >                // dummy db directives used to calculate length of namec
 144+ 783F 28          >                db      "("
 144+ 7840             >len_NFA         defl    $ - temp_NFA
 144+ 7840             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 783F             >
 144+ 783F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7840 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 7841             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7840 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 7841             >
 144+ 7841 24 78       >                dw      last_NFA            // Link to previous definition Name
 144+ 7843             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7843 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 7846             >
 144+ 7846             >
 144+ 7846             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7846             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7846             >
 144+ 7846             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7846 A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 784A D8 73 5E 6A                  dw      WORD, DROP              // word drop
 147+ 784E 48 69                        dw      EXIT                    // ;
 148+ 7850
 149+ 7850              //  ______________________________________________________________________
 150+ 7850              //
 151+ 7850              // quit         --
 152+ 7850              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7850                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7850             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7850             >
 153+ 7850             >                // dummy db directives used to calculate length of namec
 153+ 7850 51 55 49 54 >                db      "QUIT"
 153+ 7854             >len_NFA         defl    $ - temp_NFA
 153+ 7854             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7850             >
 153+ 7850 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 7851 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 7855             >                org     $-1                 // alter last byte of Name just above to set
 153+ 7854 D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 7855             >
 153+ 7855 3F 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7857             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7857 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 785A             >
 153+ 785A             >
 153+ 785A             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 785A             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 785A             >
 153+ 785A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 785A
 155+ 785A 37 6E 0C 6B                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 785E 8F 67 5E 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 7862 5A 6C 37 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 7866 17 6B
 158+ 7868 5A 6C 6E 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 786C 17 6B
 159+ 786E FD 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7870                                                              // begin
 161+ 7870              Quit_Begin:
 162+ 7870 EE 6C 0C 6B                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 7874 3B 69
 163+ 7876 FC 65                        dw      CR                      //      cr
 164+ 7878 55 73                        dw      QUERY                   //      query
 165+ 787A              Next_Breakpoint_1:
 166+ 787A 92 77                        dw      INTERPRET               //      interpret
 167+ 787C C1 6D 0C 6B                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7880 85 69
 168+ 7882                                                              //      if
 169+ 7882 1C 64                        dw      ZBRANCH
 170+ 7884 07 00                        dw      Quit_Endif - $
 171+ 7886 28 74                        dw          C_DOT_QUOTE
 172+ 7888 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 788B              Quit_Endif:                                     //      else
 174+ 788B                                                              // again
 175+ 788B 07 64                        dw      BRANCH
 176+ 788D E3 FF                        dw      Quit_Begin - $
 177+ 788F 48 69                        dw      EXIT                    // ;
 178+ 7891
 179+ 7891              //  ______________________________________________________________________
 180+ 7891              //
 181+ 7891              // abort        --
 182+ 7891                              Colon_Def ABORT, "ABORT", is_normal
 182+ 7891             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 7891             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 7891             >
 182+ 7891             >                // dummy db directives used to calculate length of namec
 182+ 7891 41 42 4F 52 >                db      "ABORT"
 182+ 7895 54          >
 182+ 7896             >len_NFA         defl    $ - temp_NFA
 182+ 7896             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 7891             >
 182+ 7891 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 7892 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 7896 54          >
 182+ 7897             >                org     $-1                 // alter last byte of Name just above to set
 182+ 7896 D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7897             >
 182+ 7897 50 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7899             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7899 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 789C             >
 182+ 789C             >
 182+ 789C             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 789C             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 789C             >
 182+ 789C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 789C E5 6C 0C 6B                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 78A0 25 69
 184+ 78A2 65 71                        dw      DECIMAL                 // decimal
 185+ 78A4 19 78                        dw      FORTH                   // [compile] forth
 186+ 78A6 32 78                        dw      DEFINITIONS             // definitions
 187+ 78A8              Autoexec_Ptr:
 188+ 78A8 A0 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 78AA 57 78                        dw      QUIT                    // quit
 190+ 78AC 48 69                        dw      EXIT                    // ;
 191+ 78AE
 192+ 78AE              //  ______________________________________________________________________
 193+ 78AE              //
 194+ 78AE              // warm         --
 195+ 78AE                              Colon_Def WARM, "WARM", is_normal
 195+ 78AE             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 78AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 78AE             >
 195+ 78AE             >                // dummy db directives used to calculate length of namec
 195+ 78AE 57 41 52 4D >                db      "WARM"
 195+ 78B2             >len_NFA         defl    $ - temp_NFA
 195+ 78B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 78AE             >
 195+ 78AE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 78AF 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 78B3             >                org     $-1                 // alter last byte of Name just above to set
 195+ 78B2 CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 78B3             >
 195+ 78B3 91 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 78B5             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 78B5 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 78B8             >
 195+ 78B8             >
 195+ 78B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 78B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 78B8             >
 195+ 78B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 78B8 45 7C                        dw      BLK_INIT                // blk-init
 197+ 78BA 4E 84                        dw      SPLASH                  // splash
 198+ 78BC A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 78C0 52 6F
 199+ 78C2 99 78                        dw      ABORT                   // abort
 200+ 78C4 48 69                        dw      EXIT                    // exit
 201+ 78C6
 202+ 78C6              //  ______________________________________________________________________
 203+ 78C6              //
 204+ 78C6              // cold         --
 205+ 78C6                              Colon_Def COLD, "COLD", is_normal
 205+ 78C6             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 78C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 78C6             >
 205+ 78C6             >                // dummy db directives used to calculate length of namec
 205+ 78C6 43 4F 4C 44 >                db      "COLD"
 205+ 78CA             >len_NFA         defl    $ - temp_NFA
 205+ 78CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 78C6             >
 205+ 78C6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78C7 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78CB             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78CA C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78CB             >
 205+ 78CB AE 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78CD             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78CD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78D0             >
 205+ 78D0             >
 205+ 78D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78D0             >
 205+ 78D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78D0 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78D4 A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78D8 0C 6B                        dw      FETCH                   // @
 209+ 78DA A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78DE C3 69
 210+ 78E0 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78E4 51 68                        dw      CMOVE
 212+ 78E6 A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78EA 0C 6B                        dw      FETCH                   // @
 214+ 78EC A5 63 20 78                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78F0 17 6B                        dw      STORE                   // !
 216+ 78F2 5A 6C 64 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78F6 17 6B
 217+ 78F8 42 6D 0C 6B                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78FC 8B 6A
 218+ 78FE 07 6E 17 6B                  dw      USE, STORE              // use !
 219+ 7902 12 6E 17 6B                  dw      PREV, STORE             // prev !
 220+ 7906 A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 790A 27 6E 17 6B
 221+ 790E              //              dw      LIT, 8
 222+ 790E              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 790E 6C 6C 59 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 7912 17 6B
 224+ 7914 B5 78        Warm_Start:     dw      WARM
 225+ 7916 CD 78        Cold_Start:     dw      COLD
 226+ 7918 48 69                        dw      EXIT
 227+ 791A
 228+ 791A              //  ______________________________________________________________________
 229+ 791A              WarmRoutine:
 230+ 791A              ColdRoutine:
 231+ 791A DD 21 98 63                  ld      ix, Next_Ptr
 232+ 791E D9                           exx
 233+ 791F E5                           push    hl
 234+ 7920 D9                           exx
 235+ 7921
 236+ 7921 ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 7925 ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7929              //              nop
 239+ 7929 2A 7A 63                     ld      hl, (R0_origin)
 240+ 792C              //              nop
 241+ 792C                              ldrphl
 241+ 792C 22 96 63    >                ld      (RP_Pointer),hl
 242+ 792F 01 14 79                     ld      bc, Warm_Start
 243+ 7932 38 02                        jr      c, Warm_Skip
 244+ 7934 03                           inc     bc
 245+ 7935 03                           inc     bc
 246+ 7936              Warm_Skip:
 247+ 7936                              next
 247+ 7936 DD E9       >                jp      (ix)
 248+ 7938
 249+ 7938              //  ______________________________________________________________________
 250+ 7938              //
 251+ 7938              // basic        --
 252+ 7938                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7938             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7938             >
 252+ 7938             >                // dummy db directives used to calculate length of namec
 252+ 7938 42 41 53 49 >                db      "BASIC"
 252+ 793C 43          >
 252+ 793D             >len_NFA         defl    $ - temp_NFA
 252+ 793D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7938             >
 252+ 7938 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7939 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 793D 43          >
 252+ 793E             >                org     $-1                 // alter last byte of Name just above to set
 252+ 793D C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 793E             >
 252+ 793E C6 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7940             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7940 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7940 ~           >
 252+ 7940 ~           >
 252+ 7940             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7940             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7940             >
 252+ 7940             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7940 C1                           pop     bc
 254+ 7941 21 00 00                     ld      hl, 0
 255+ 7944 39                           add     hl, sp
 256+ 7945 ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7949              //              nop
 258+ 7949 22 6E 63                     ld      (SP_Basic),hl
 259+ 794C D9                           exx
 260+ 794D E1                           pop     hl
 261+ 794E D9                           exx
 262+ 794F C9                           ret     // to Basic
 263+ 7950
 264+ 7950              //  ______________________________________________________________________
 265+ 7950              //
 266+ 7950              // +-           n1 n2 -- n3
 267+ 7950              // leaves n1 with the sign of n2 as n3.
 268+ 7950                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7950             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7950             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7950             >
 268+ 7950             >                // dummy db directives used to calculate length of namec
 268+ 7950 2B 2D       >                db      "+-"
 268+ 7952             >len_NFA         defl    $ - temp_NFA
 268+ 7952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7950             >
 268+ 7950 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 7951 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 7953             >                org     $-1                 // alter last byte of Name just above to set
 268+ 7952 AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 7953             >
 268+ 7953 38 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 7955             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 7955 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7958             >
 268+ 7958             >
 268+ 7958             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7958             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7958             >
 268+ 7958             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7958 9F 69                        dw      ZLESS                   // 0<
 270+ 795A                                                              // if
 271+ 795A 1C 64                        dw      ZBRANCH
 272+ 795C 04 00                        dw      Plus_Minus_Endif - $
 273+ 795E 24 6A                        dw          MINUS               //      minus
 274+ 7960              Plus_Minus_Endif:                               // endif
 275+ 7960 48 69                        dw      EXIT                    // ;
 276+ 7962
 277+ 7962              //  ______________________________________________________________________
 278+ 7962              //
 279+ 7962              // d+-          d1 n -- d2
 280+ 7962              // leaves d1 with the sign of n as d2.
 281+ 7962                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 7962             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 7962             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 7962             >
 281+ 7962             >                // dummy db directives used to calculate length of namec
 281+ 7962 44 2B 2D    >                db      "D+-"
 281+ 7965             >len_NFA         defl    $ - temp_NFA
 281+ 7965             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 7962             >
 281+ 7962 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 7963 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 7966             >                org     $-1                 // alter last byte of Name just above to set
 281+ 7965 AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 7966             >
 281+ 7966 50 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7968             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7968 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 796B             >
 281+ 796B             >
 281+ 796B             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 796B             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 796B             >
 281+ 796B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 796B 9F 69                        dw      ZLESS                   // 0<
 283+ 796D                                                              // if
 284+ 796D 1C 64                        dw      ZBRANCH
 285+ 796F 04 00                        dw      DPlus_Minus_Endif - $
 286+ 7971 38 6A                        dw          DMINUS              //      dminus
 287+ 7973              DPlus_Minus_Endif:                              // endif
 288+ 7973 48 69                        dw      EXIT                    // ;
 289+ 7975
 290+ 7975              //  ______________________________________________________________________
 291+ 7975              //
 292+ 7975              // abs          n1 -- n2
 293+ 7975                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 7975             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 7975             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 7975             >
 293+ 7975             >                // dummy db directives used to calculate length of namec
 293+ 7975 41 42 53    >                db      "ABS"
 293+ 7978             >len_NFA         defl    $ - temp_NFA
 293+ 7978             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 7975             >
 293+ 7975 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 7976 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7979             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7978 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7979             >
 293+ 7979 62 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 797B             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 797B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 797E             >
 293+ 797E             >
 293+ 797E             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 797E             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 797E             >
 293+ 797E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 797E 8B 6A                        dw      DUP                     // dup
 295+ 7980 55 79                        dw      PLUS_MINUS              // +-
 296+ 7982 48 69                        dw      EXIT                    // ;
 297+ 7984
 298+ 7984              //  ______________________________________________________________________
 299+ 7984              //
 300+ 7984              // dabs         d1 -- d2
 301+ 7984                              Colon_Def DABS, "DABS", is_normal
 301+ 7984             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 7984             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 7984             >
 301+ 7984             >                // dummy db directives used to calculate length of namec
 301+ 7984 44 41 42 53 >                db      "DABS"
 301+ 7988             >len_NFA         defl    $ - temp_NFA
 301+ 7988             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 7984             >
 301+ 7984 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 7985 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7989             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7988 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7989             >
 301+ 7989 75 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 798B             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 798B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 798E             >
 301+ 798E             >
 301+ 798E             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 798E             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 798E             >
 301+ 798E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 798E 8B 6A                        dw      DUP                     // dup
 303+ 7990 68 79                        dw      DPLUS_MINUS             // d+-
 304+ 7992 48 69                        dw      EXIT                    // ;
 305+ 7994
 306+ 7994              //  ______________________________________________________________________
 307+ 7994              //
 308+ 7994              // m*           n1 n2 -- d
 309+ 7994              // multiply two integer giving a double
 310+ 7994                              Colon_Def MMUL, "M*", is_normal
 310+ 7994             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 7994             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 7994             >
 310+ 7994             >                // dummy db directives used to calculate length of namec
 310+ 7994 4D 2A       >                db      "M*"
 310+ 7996             >len_NFA         defl    $ - temp_NFA
 310+ 7996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 7994             >
 310+ 7994 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 7995 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7997             >                org     $-1                 // alter last byte of Name just above to set
 310+ 7996 AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7997             >
 310+ 7997 84 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7999             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7999 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 799C             >
 310+ 799C             >
 310+ 799C             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 799C             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 799C             >
 310+ 799C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 799C E0 6A 07 69                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 79A0 59 69
 312+ 79A2 7B 79 80 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 79A6 7B 79 80 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 79AA 6B 69 68 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 79AE 48 69                        dw      EXIT                    // ;
 316+ 79B0
 317+ 79B0              //  ______________________________________________________________________
 318+ 79B0              //
 319+ 79B0              // sm/rem       d n -- q r
 320+ 79B0              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 79B0              // the remainder has the sign of d.
 322+ 79B0                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 79B0             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 79B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 79B0             >
 322+ 79B0             >                // dummy db directives used to calculate length of namec
 322+ 79B0 53 4D 2F 52 >                db      "SM/REM"
 322+ 79B4 45 4D       >
 322+ 79B6             >len_NFA         defl    $ - temp_NFA
 322+ 79B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 79B0             >
 322+ 79B0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 79B1 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 79B5 45 4D       >
 322+ 79B7             >                org     $-1                 // alter last byte of Name just above to set
 322+ 79B6 CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 79B7             >
 322+ 79B7 94 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 79B9             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 79B9 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 79BC             >
 322+ 79BC             >
 322+ 79BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 79BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 79BC             >
 322+ 79BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 79BC 50 6A 59 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 79C0 59 69
 324+ 79C2 8B 79 7D 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 79C6 7B 79
 325+ 79C8 AF 68                        dw      UMDIVMOD                // um/mod
 326+ 79CA 6B 69                        dw      R_TO                    // r>
 327+ 79CC 7D 69 07 69                  dw      R_OP, XOR_OP            // r xor
 328+ 79D0 55 79 80 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79D4 6B 69                        dw      R_TO                    // r>
 330+ 79D6 55 79 80 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79DA 48 69                        dw      EXIT                    // ;
 332+ 79DC
 333+ 79DC              //  ______________________________________________________________________
 334+ 79DC              //
 335+ 79DC              // fm/mod       d n -- q r
 336+ 79DC              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79DC              // the remainder has the sign of d.
 338+ 79DC                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79DC             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79DC             >
 338+ 79DC             >                // dummy db directives used to calculate length of namec
 338+ 79DC 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79E0 4F 44       >
 338+ 79E2             >len_NFA         defl    $ - temp_NFA
 338+ 79E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79DC             >
 338+ 79DC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79DD 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79E1 4F 44       >
 338+ 79E3             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79E2 C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79E3             >
 338+ 79E3 B0 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79E5             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79E5 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79E8             >
 338+ 79E8             >
 338+ 79E8             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79E8             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79E8             >
 338+ 79E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79E8 8B 6A 59 69                  dw      DUP, TO_R               // dup >r
 340+ 79EC B9 79                        dw      SMDIVM
 341+ 79EE 50 6A 8B 6A                  dw      OVER, DUP
 342+ 79F2 85 69 85 69                  dw      ZEQUAL, ZEQUAL
 343+ 79F6 80 6A 9F 69                  dw      SWAP, ZLESS
 344+ 79FA 7D 69 9F 69                  dw      R_OP, ZLESS
 345+ 79FE 07 69 E6 68                  dw      XOR_OP, AND_OP
 346+ 7A02 1C 64                        dw      ZBRANCH
 347+ 7A04 10 00                        dw      Fm_Mod_Else - $
 348+ 7A06 EA 69                        dw          ONE_SUBTRACT
 349+ 7A08 80 6A 6B 69                  dw          SWAP, R_TO
 350+ 7A0C C3 69 80 6A                  dw          PLUS, SWAP
 351+ 7A10 07 64                        dw      BRANCH
 352+ 7A12 06 00                        dw      Fm_Mod_Endif - $
 353+ 7A14              Fm_Mod_Else:
 354+ 7A14 6B 69 5E 6A                  dw          R_TO, DROP
 355+ 7A18              Fm_Mod_Endif:
 356+ 7A18 48 69                        dw      EXIT
 357+ 7A1A              //              dw      TWO_DUP                 // 2dup
 358+ 7A1A              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 7A1A              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 7A1A              //              dw      UMDIVMOD                // um/mod
 361+ 7A1A              //              dw      SWAP                    // swap
 362+ 7A1A              //              dw      II, ZLESS               // i'
 363+ 7A1A              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 7A1A              //              dw      R_TO                    // r>
 365+ 7A1A              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 7A1A              //              dw      R_OP                    // r@
 367+ 7A1A              //              dw      ZLESS                   // i'
 368+ 7A1A              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 7A1A              //              dw      R_TO                    // r>
 370+ 7A1A              //              dw      PLUS_MINUS              // +- swap
 371+ 7A1A              //              dw      EXIT                    // ;
 372+ 7A1A
 373+ 7A1A              //  ______________________________________________________________________
 374+ 7A1A              //
 375+ 7A1A              // m/mod        d n -- q r
 376+ 7A1A              // multiply two integer giving a double
 377+ 7A1A                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 7A1A             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 7A1A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 7A1A             >
 377+ 7A1A             >                // dummy db directives used to calculate length of namec
 377+ 7A1A 4D 2F 4D 4F >                db      "M/MOD"
 377+ 7A1E 44          >
 377+ 7A1F             >len_NFA         defl    $ - temp_NFA
 377+ 7A1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 7A1A             >
 377+ 7A1A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 7A1B 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 7A1F 44          >
 377+ 7A20             >                org     $-1                 // alter last byte of Name just above to set
 377+ 7A1F C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 7A20             >
 377+ 7A20 DC 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 7A22             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 7A22 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 7A25             >
 377+ 7A25             >
 377+ 7A25             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 7A25             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 7A25             >
 377+ 7A25             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 7A25 B9 79                        dw      SMDIVM
 379+ 7A27 48 69                        dw      EXIT                    // ;
 380+ 7A29
 381+ 7A29              //  ______________________________________________________________________
 382+ 7A29              //
 383+ 7A29              // m/           d n -- q
 384+ 7A29              // multiply two integer giving a double
 385+ 7A29                              Colon_Def MDIV, "M/", is_normal
 385+ 7A29             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A29             >
 385+ 7A29             >                // dummy db directives used to calculate length of namec
 385+ 7A29 4D 2F       >                db      "M/"
 385+ 7A2B             >len_NFA         defl    $ - temp_NFA
 385+ 7A2B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A29             >
 385+ 7A29 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A2A 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A2C             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A2B AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A2C             >
 385+ 7A2C 1A 7A       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A2E             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A2E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A31             >
 385+ 7A31             >
 385+ 7A31             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A31             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A31             >
 385+ 7A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A31 22 7A 67 6A                  dw      MDIVM, NIP
 387+ 7A35 48 69                        dw      EXIT                    // ;
 388+ 7A37
 389+ 7A37              //  ______________________________________________________________________
 390+ 7A37              //
 391+ 7A37              // *            n1 n2 -- n3
 392+ 7A37              // multiply two integer
 393+ 7A37                              Colon_Def MUL, "*", is_normal
 393+ 7A37             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A37             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A37             >
 393+ 7A37             >                // dummy db directives used to calculate length of namec
 393+ 7A37 2A          >                db      "*"
 393+ 7A38             >len_NFA         defl    $ - temp_NFA
 393+ 7A38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A37             >
 393+ 7A37 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A38 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A39             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A38 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A39             >
 393+ 7A39 29 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A3B             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A3B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A3E             >
 393+ 7A3E             >
 393+ 7A3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A3E             >
 393+ 7A3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A3E 99 79 5E 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A42 48 69                        dw      EXIT                    // ;
 396+ 7A44
 397+ 7A44              //  ______________________________________________________________________
 398+ 7A44              //
 399+ 7A44              // /mod         n1 n2 -- n3 n4
 400+ 7A44              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A44              // The remainder has the sign of n1
 402+ 7A44                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A44             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A44             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A44             >
 402+ 7A44             >                // dummy db directives used to calculate length of namec
 402+ 7A44 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A48             >len_NFA         defl    $ - temp_NFA
 402+ 7A48             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A44             >
 402+ 7A44 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A45 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A49             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A48 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A49             >
 402+ 7A49 37 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A4B             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A4B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A4E             >
 402+ 7A4E             >
 402+ 7A4E             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A4E             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A4E             >
 402+ 7A4E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A4E 59 69 A7 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A52 6B 69
 404+ 7A54 22 7A                        dw      MDIVM                   // m/mod
 405+ 7A56 48 69                        dw      EXIT                    // ;
 406+ 7A58
 407+ 7A58              //  ______________________________________________________________________
 408+ 7A58              //
 409+ 7A58              // /            n1 n2 -- n3
 410+ 7A58              // division
 411+ 7A58                              Colon_Def DIV, "/", is_normal
 411+ 7A58             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A58             >
 411+ 7A58             >                // dummy db directives used to calculate length of namec
 411+ 7A58 2F          >                db      "/"
 411+ 7A59             >len_NFA         defl    $ - temp_NFA
 411+ 7A59             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A58             >
 411+ 7A58 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A59 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A5A             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A59 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A5A             >
 411+ 7A5A 44 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A5C             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A5C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A5F             >
 411+ 7A5F             >
 411+ 7A5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A5F             >
 411+ 7A5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A5F 4B 7A 67 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A63 48 69                        dw      EXIT                    // ;
 414+ 7A65
 415+ 7A65              //  ______________________________________________________________________
 416+ 7A65              //
 417+ 7A65              // mod          n1 n2 -- n3
 418+ 7A65                              Colon_Def MOD, "MOD", is_normal
 418+ 7A65             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A65             >
 418+ 7A65             >                // dummy db directives used to calculate length of namec
 418+ 7A65 4D 4F 44    >                db      "MOD"
 418+ 7A68             >len_NFA         defl    $ - temp_NFA
 418+ 7A68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A65             >
 418+ 7A65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A66 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A69             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A68 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A69             >
 418+ 7A69 58 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A6B             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A6B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A6E             >
 418+ 7A6E             >
 418+ 7A6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A6E             >
 418+ 7A6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A6E 4B 7A 5E 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A72 48 69                        dw      EXIT                    // ;
 421+ 7A74
 422+ 7A74              //  ______________________________________________________________________
 423+ 7A74              //
 424+ 7A74              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A74              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A74              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A74              // avoids loss of precision
 428+ 7A74                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A74             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A74             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A74             >
 428+ 7A74             >                // dummy db directives used to calculate length of namec
 428+ 7A74 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A78 44          >
 428+ 7A79             >len_NFA         defl    $ - temp_NFA
 428+ 7A79             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A74             >
 428+ 7A74 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A75 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A79 44          >
 428+ 7A7A             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A79 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A7A             >
 428+ 7A7A 65 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A7C             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A7C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A7F             >
 428+ 7A7F             >
 428+ 7A7F             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A7F             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A7F             >
 428+ 7A7F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A7F 59 69 99 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A83 6B 69 22 7A                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A87 48 69                        dw      EXIT                    // ;
 432+ 7A89
 433+ 7A89              //  ______________________________________________________________________
 434+ 7A89              //
 435+ 7A89              // */          n1 n2 n3 -- n4
 436+ 7A89              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A89                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A89             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A89             >
 437+ 7A89             >                // dummy db directives used to calculate length of namec
 437+ 7A89 2A 2F       >                db      "*/"
 437+ 7A8B             >len_NFA         defl    $ - temp_NFA
 437+ 7A8B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A89             >
 437+ 7A89 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A8A 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A8C             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A8B AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A8C             >
 437+ 7A8C 74 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A8E             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A8E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A91             >
 437+ 7A91             >
 437+ 7A91             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A91             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A91             >
 437+ 7A91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A91 7C 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A93 67 6A                        dw     NIP                      // nip
 440+ 7A95 48 69                        dw     EXIT                     // ;
 441+ 7A97
 442+ 7A97
 443+ 7A97              //  ______________________________________________________________________
 444+ 7A97              //
 445+ 7A97              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A97              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A97              // All terms are unsigned.
 448+ 7A97              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A97              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A97              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A97              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A97              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A97              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A97              //              dw      EXIT                    // ;
 455+ 7A97
 456+ 7A97              //  ______________________________________________________________________
 457+ 7A97              //
 458+ 7A97              // (line)       n1 n2 -- a b
 459+ 7A97              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A97              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A97                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A97             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A97             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A97             >
 461+ 7A97             >                // dummy db directives used to calculate length of namec
 461+ 7A97 28 4C 49 4E >                db      "(LINE)"
 461+ 7A9B 45 29       >
 461+ 7A9D             >len_NFA         defl    $ - temp_NFA
 461+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A97             >
 461+ 7A97 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A98 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A9C 45 29       >
 461+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A9D A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A9E             >
 461+ 7A9E 89 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7AA0             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7AA0 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7AA3             >
 461+ 7AA3             >
 461+ 7AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7AA3             >
 461+ 7AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7AA3 59 69                        dw      TO_R                    // >r
 463+ 7AA5 08 6C                        dw      NOOP                    // noop
 464+ 7AA7 94 6C                        dw      CL                      // c/l
 465+ 7AA9 A1 6C 7C 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7AAD 6B 69                        dw      R_TO                    // r>
 467+ 7AAF AE 6C 3B 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7AB3 C3 69
 468+ 7AB5 64 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7AB7 C3 69                        dw      PLUS                    // +
 470+ 7AB9 08 6C                        dw      NOOP                    // noop
 471+ 7ABB 94 6C                        dw      CL                      // c/l
 472+ 7ABD 48 69                        dw      EXIT                    // ;
 473+ 7ABF
 474+ 7ABF              //  ______________________________________________________________________
 475+ 7ABF              //
 476+ 7ABF              // .line        n1 n2 --
 477+ 7ABF              // Sends to output line  n1  of screen n2.
 478+ 7ABF                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7ABF             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7ABF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7ABF             >
 478+ 7ABF             >                // dummy db directives used to calculate length of namec
 478+ 7ABF 2E 4C 49 4E >                db      ".LINE"
 478+ 7AC3 45          >
 478+ 7AC4             >len_NFA         defl    $ - temp_NFA
 478+ 7AC4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7ABF             >
 478+ 7ABF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7AC0 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7AC4 45          >
 478+ 7AC5             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7AC4 C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7AC5             >
 478+ 7AC5 97 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AC7             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AC7 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7ACA             >
 478+ 7ACA             >
 478+ 7ACA             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7ACA             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7ACA             >
 478+ 7ACA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7ACA A0 7A 72 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7ACE 0C 72
 480+ 7AD0 48 69                        dw      EXIT                    // ;
 481+ 7AD2
 482+ 7AD2              //  ______________________________________________________________________
 483+ 7AD2              //
 484+ 7AD2              // message       n1 n2 --
 485+ 7AD2              // prints error message to current channel.
 486+ 7AD2              // if WARNING is 0, prints "MSG#n".
 487+ 7AD2              // if WARNING is 1, prints line n of screen 4.
 488+ 7AD2              // if WARNING is -1, see ERROR
 489+ 7AD2              // value can be negative or beyond block 4.
 490+ 7AD2                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AD2             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AD2             >
 490+ 7AD2             >                // dummy db directives used to calculate length of namec
 490+ 7AD2 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AD6 41 47 45    >
 490+ 7AD9             >len_NFA         defl    $ - temp_NFA
 490+ 7AD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AD2             >
 490+ 7AD2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AD3 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AD7 41 47 45    >
 490+ 7ADA             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AD9 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7ADA             >
 490+ 7ADA BF 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7ADC             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7ADC CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7ADF             >
 490+ 7ADF             >
 490+ 7ADF             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7ADF             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7ADF             >
 490+ 7ADF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7ADF 12 6D 0C 6B                  dw      WARNING, FETCH          // warning @
 492+ 7AE3                                                              // if
 493+ 7AE3 1C 64                        dw      ZBRANCH
 494+ 7AE5 18 00                        dw      Message_Else - $
 495+ 7AE7 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AEB 99 6D 0C 6B                  dw          OFFSET, FETCH       //      offset @
 497+ 7AEF AE 6C 5C 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7AF3 B9 6E
 498+ 7AF5 C7 7A                        dw          DOT_LINE            //      .line
 499+ 7AF7 6F 6F                        dw          SPACE               //      space
 500+ 7AF9                                                              // else
 501+ 7AF9
 502+ 7AF9 07 64                        dw      BRANCH
 503+ 7AFB 0B 00                        dw      Message_ENdif - $
 504+ 7AFD              Message_Else:
 505+ 7AFD 28 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AFF 04 6D 73 67                  db          4, "msg#"
 506+ 7B03 23
 507+ 7B04 40 83                        dw          DOT                 //      .  ( forward )
 508+ 7B06              Message_ENdif:                                  // endif
 509+ 7B06 48 69                        dw      EXIT                    // ;
 510+ 7B08
 511+ 7B08
 512+ 7B08              //  ______________________________________________________________________
 513+ 7B08              //
 514+ 7B08              // device
 515+ 7B08                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7B08             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7B08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7B08             >
 515+ 7B08             >                // dummy db directives used to calculate length of namec
 515+ 7B08 44 45 56 49 >                db      "DEVICE"
 515+ 7B0C 43 45       >
 515+ 7B0E             >len_NFA         defl    $ - temp_NFA
 515+ 7B0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7B08             >
 515+ 7B08 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7B09 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7B0D 43 45       >
 515+ 7B0F             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7B0E C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7B0F             >
 515+ 7B0F D2 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7B11             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7B11 CD 39 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7B14             >
 515+ 7B14             >
 515+ 7B14             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7B14             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7B14             >
 515+ 7B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7B14 02 00       >                dw      2
 516+ 7B16
 517+ 7B16              //  ______________________________________________________________________
 518+ 7B16
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7B16                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7B16              //  ______________________________________________________________________
   2+ 7B16              //
   3+ 7B16              //  next-opt.asm
   4+ 7B16              //
   5+ 7B16              //  ZX Spectrum Next - peculiar definitions
   6+ 7B16              //  ______________________________________________________________________
   7+ 7B16
   8+ 7B16              //  ______________________________________________________________________
   9+ 7B16              //
  10+ 7B16              // reg@         n -- b
  11+ 7B16              // read Next REGister n giving byte b
  12+ 7B16              //
  13+ 7B16              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7B16              //              dw      LIT, $243B
  15+ 7B16              //              dw      PSTORE
  16+ 7B16              //              dw      LIT, $253B
  17+ 7B16              //              dw      PFETCH
  18+ 7B16              //              dw      EXIT
  19+ 7B16                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7B16             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7B16             >
  19+ 7B16             >                // dummy db directives used to calculate length of namec
  19+ 7B16 52 45 47 40 >                db      "REG@"
  19+ 7B1A             >len_NFA         defl    $ - temp_NFA
  19+ 7B1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7B16             >
  19+ 7B16 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7B17 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7B1B             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7B1A C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7B1B             >
  19+ 7B1B 08 7B       >                dw      last_NFA            // Link to previous definition Name
  19+ 7B1D             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7B1D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7B1D ~           >
  19+ 7B1D ~           >
  19+ 7B1D             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7B1D             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7B1D             >
  19+ 7B1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7B1D D9                           exx
  21+ 7B1E 01 3B 24                     ld      bc, $243B
  22+ 7B21 E1                           pop     hl
  23+ 7B22 ED 69                        out     (c), l
  24+ 7B24 04                           inc     b
  25+ 7B25 ED 68                        in      l, (c)
  26+ 7B27 E5                           push    hl
  27+ 7B28 D9                           exx
  28+ 7B29                              next
  28+ 7B29 DD E9       >                jp      (ix)
  29+ 7B2B
  30+ 7B2B
  31+ 7B2B              //  ______________________________________________________________________
  32+ 7B2B              //
  33+ 7B2B              // reg!         b n --
  34+ 7B2B              // write value b to Next REGister n
  35+ 7B2B              //
  36+ 7B2B              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B2B              //              dw      LIT, $243B
  38+ 7B2B              //              dw      PSTORE
  39+ 7B2B              //              dw      LIT, $253B
  40+ 7B2B              //              dw      PSTORE
  41+ 7B2B              //              dw      EXIT
  42+ 7B2B                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B2B             >
  42+ 7B2B             >                // dummy db directives used to calculate length of namec
  42+ 7B2B 52 45 47 21 >                db      "REG!"
  42+ 7B2F             >len_NFA         defl    $ - temp_NFA
  42+ 7B2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B2B             >
  42+ 7B2B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B2C 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B30             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B2F A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B30             >
  42+ 7B30 16 7B       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B32             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B32 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B32 ~           >
  42+ 7B32 ~           >
  42+ 7B32             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B32             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B32             >
  42+ 7B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B32 D9                           exx
  44+ 7B33 01 3B 24                     ld      bc, $243B
  45+ 7B36 E1                           pop     hl
  46+ 7B37 ED 69                        out     (c), l
  47+ 7B39 04                           inc     b
  48+ 7B3A E1                           pop     hl
  49+ 7B3B ED 69                        out     (c), l
  50+ 7B3D D9                           exx
  51+ 7B3E                              next
  51+ 7B3E DD E9       >                jp      (ix)
  52+ 7B40
  53+ 7B40
  54+ 7B40              //  ______________________________________________________________________
  55+ 7B40              //
  56+ 7B40              // mmu7@        -- n
  57+ 7B40              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B40
  59+ 7B40                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B40             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B40             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B40             >
  59+ 7B40             >                // dummy db directives used to calculate length of namec
  59+ 7B40 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B44 40          >
  59+ 7B45             >len_NFA         defl    $ - temp_NFA
  59+ 7B45             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B40             >
  59+ 7B40 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B41 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B45 40          >
  59+ 7B46             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B45 C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B46             >
  59+ 7B46 2B 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B48             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B48 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B4B             >
  59+ 7B4B             >
  59+ 7B4B             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B4B             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B4B             >
  59+ 7B4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B4B A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B4F 1D 7B
  61+ 7B51 48 69                        dw      EXIT
  62+ 7B53
  63+ 7B53              //  ______________________________________________________________________
  64+ 7B53              //
  65+ 7B53              // mmu7!        n --
  66+ 7B53              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B53              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B53
  69+ 7B53                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B53             >
  69+ 7B53             >                // dummy db directives used to calculate length of namec
  69+ 7B53 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B57 21          >
  69+ 7B58             >len_NFA         defl    $ - temp_NFA
  69+ 7B58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B53             >
  69+ 7B53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B54 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B58 21          >
  69+ 7B59             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B58 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B59             >
  69+ 7B59 40 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B5B             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B5B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B5B ~           >
  69+ 7B5B ~           >
  69+ 7B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B5B             >
  69+ 7B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B5B E1                           pop     hl
  71+ 7B5C 7D                           ld      a, l
  72+ 7B5D ED 92 57                     nextreg 87, a
  73+ 7B60
  74+ 7B60                              next
  74+ 7B60 DD E9       >                jp      (ix)
  75+ 7B62
  76+ 7B62              //  ______________________________________________________________________
  77+ 7B62              //
  78+ 7B62              // >far         ha -- a n
  79+ 7B62              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B62              // take lower bits of H and L as an offset from E000h
  81+ 7B62              // then return address  a  between E000h-FFFFh
  82+ 7B62              // and page number n  between 64-71 (40h-47h)
  83+ 7B62              // For example, in hex:
  84+ 7B62              //   0000 >FAR  gives  40.E000
  85+ 7B62              //   1FFF >FAR  gives  40.FFFF
  86+ 7B62              //   2000 >FAR  gives  41.E000
  87+ 7B62              //   3FFF >FAR  gives  41.FFFF
  88+ 7B62              //   EFFF >FAR  gives  47.EFFF
  89+ 7B62              //   FFFF >FAR  gives  47.FFFF
  90+ 7B62              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B62              //                pop     de
  92+ 7B62              //                ld      a, d
  93+ 7B62              //                and     $E0
  94+ 7B62              //                rlca
  95+ 7B62              //                rlca
  96+ 7B62              //                rlca
  97+ 7B62              //                add     $40
  98+ 7B62              //                ld      l, a
  99+ 7B62              //                ld      h, 0
 100+ 7B62              //                ld      a, d
 101+ 7B62              //                or      $E0
 102+ 7B62              //                ld      d, a
 103+ 7B62              //                push    hl
 104+ 7B62              //                push    de
 105+ 7B62              //                next
 106+ 7B62
 107+ 7B62              //  ______________________________________________________________________
 108+ 7B62              //
 109+ 7B62              // <far         a n  -- ha
 110+ 7B62              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B62              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B62              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B62              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B62              //                pop     de                  // page number in e
 115+ 7B62              //                pop     hl                  // address in hl
 116+ 7B62              //                ld      a, e
 117+ 7B62              //                sub     $40                 // reduced to 0-7
 118+ 7B62              //                rrca
 119+ 7B62              //                rrca
 120+ 7B62              //                rrca
 121+ 7B62              //                ld      d, a                // save to d bits 765
 122+ 7B62              //                ld      a, h                // drops
 123+ 7B62              //                and     $1F
 124+ 7B62              //                or      d
 125+ 7B62              //                ld      h, a
 126+ 7B62              //
 127+ 7B62              //                psh1
 128+ 7B62
 129+ 7B62              //  ______________________________________________________________________
 130+ 7B62              //
 131+ 7B62              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B62              // NextZXOS call wrapper.
 133+ 7B62              //  n1 = hl register parameter value
 134+ 7B62              //  n2 = de register parameter value
 135+ 7B62              //  n3 = bc register parameter value
 136+ 7B62              //  n4 =  a register parameter value
 137+ 7B62              //   a = routine address in ROM 3
 138+ 7B62              // ----
 139+ 7B62              //  n5 = hl returned value
 140+ 7B62              //  n6 = de returned value
 141+ 7B62              //  n7 = bc returned value
 142+ 7B62              //  n8 =  a returned value
 143+ 7B62              //   f
 144+ 7B62                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B62             >
 144+ 7B62             >                // dummy db directives used to calculate length of namec
 144+ 7B62 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B66 44 4F 53    >
 144+ 7B69             >len_NFA         defl    $ - temp_NFA
 144+ 7B69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B62             >
 144+ 7B62 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B63 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B67 44 4F 53    >
 144+ 7B6A             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B69 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B6A             >
 144+ 7B6A 53 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B6C             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B6C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B6C ~           >
 144+ 7B6C ~           >
 144+ 7B6C             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B6C             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B6C             >
 144+ 7B6C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B6C D1                           pop     de                  // dos call entry address in de
 146+ 7B6D E1                           pop     hl                  // a register
 147+ 7B6E 7D                           ld      a, l
 148+ 7B6F D9                           exx
 149+ 7B70 C1                           pop     bc
 150+ 7B71 D1                           pop     de
 151+ 7B72 E1                           pop     hl
 152+ 7B73 D9                           exx
 153+ 7B74
 154+ 7B74 C5                           push    bc
 155+ 7B75 DD E5                        push    ix
 156+ 7B77
 157+ 7B77              //              ld      (SP_Saved), sp
 158+ 7B77              //              ld      sp, Cold_origin - 5
 159+ 7B77 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B79
 161+ 7B79 CF                           rst     08
 162+ 7B7A 94                           db      $94
 163+ 7B7B
 164+ 7B7B              //              ld      sp, (SP_Saved)
 165+ 7B7B              //              push    ix
 166+ 7B7B              //              pop     hl
 167+ 7B7B              //              ld      (IX_Echo), hl
 168+ 7B7B DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B7F              //              nop
 170+ 7B7F DD E1                        pop     ix
 171+ 7B81 E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B82 D5                           push    de
 173+ 7B83 C5                           push    bc
 174+ 7B84 4D                           ld      c, l
 175+ 7B85 44                           ld      b, h
 176+ 7B86
 177+ 7B86 26 00                        ld      h, 0
 178+ 7B88 6F                           ld      l, a
 179+ 7B89 E5                           push    hl
 180+ 7B8A ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B8C 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B8D
 183+ 7B8D                              psh1
 183+ 7B8D E5          >                push    hl
 183+ 7B8E DD E9       >                jp      (ix)
 184+ 7B90
 185+ 7B90              //  ______________________________________________________________________
 186+ 7B90              //
 187+ 7B90              // blk-fh
 188+ 7B90                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7B90             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7B90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7B90             >
 188+ 7B90             >                // dummy db directives used to calculate length of namec
 188+ 7B90 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7B94 46 48       >
 188+ 7B96             >len_NFA         defl    $ - temp_NFA
 188+ 7B96             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7B90             >
 188+ 7B90 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7B91 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7B95 46 48       >
 188+ 7B97             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7B96 C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7B97             >
 188+ 7B97 62 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7B99             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7B99 CD 39 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7B9C             >
 188+ 7B9C             >
 188+ 7B9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7B9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7B9C             >
 188+ 7B9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7B9C 01 00       >                dw      1
 189+ 7B9E
 190+ 7B9E                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7B9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7B9E             >
 190+ 7B9E             >                // dummy db directives used to calculate length of namec
 190+ 7B9E 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7BA2 46 4E 41 4D >
 190+ 7BA6 45          >
 190+ 7BA7             >len_NFA         defl    $ - temp_NFA
 190+ 7BA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7B9E             >
 190+ 7B9E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7B9F 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7BA3 46 4E 41 4D >
 190+ 7BA7 45          >
 190+ 7BA8             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7BA7 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7BA8             >
 190+ 7BA8 90 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7BAA             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7BAA CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7BAD             >
 190+ 7BAD             >
 190+ 7BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7BAD             >
 190+ 7BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7BAD 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7BB1 6F 63 6B 73
 191+ 7BB5 2D 36 34 2E
 191+ 7BB9 62 69 6E 00
 192+ 7BBD 00 00 00...                  ds      24
 193+ 7BD5
 194+ 7BD5              //  ______________________________________________________________________
 195+ 7BD5              //
 196+ 7BD5              // blk-seek     n --
 197+ 7BD5              // seek block n  within blocks!.bin  file
 198+ 7BD5                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BD5             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BD5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BD5             >
 198+ 7BD5             >                // dummy db directives used to calculate length of namec
 198+ 7BD5 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BD9 53 45 45 4B >
 198+ 7BDD             >len_NFA         defl    $ - temp_NFA
 198+ 7BDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BD5             >
 198+ 7BD5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BD6 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BDA 53 45 45 4B >
 198+ 7BDE             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BDD CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BDE             >
 198+ 7BDE 9E 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BE0             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BE0 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BE3             >
 198+ 7BE3             >
 198+ 7BE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BE3             >
 198+ 7BE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BE3 A1 6C 99 79                  dw  BBUF, MMUL
 200+ 7BE7 99 7B 0C 6B                  dw  BLK_FH, FETCH
 201+ 7BEB 6E 67                        dw  F_SEEK
 202+ 7BED A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7BF1 39 70
 203+ 7BF3 48 69                        dw  EXIT
 204+ 7BF5
 205+ 7BF5              //  ______________________________________________________________________
 206+ 7BF5              //
 207+ 7BF5              // blk-read     n --
 208+ 7BF5              // seek block n  within blocks!.bin  file
 209+ 7BF5                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7BF5             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7BF5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BF5             >
 209+ 7BF5             >                // dummy db directives used to calculate length of namec
 209+ 7BF5 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7BF9 52 45 41 44 >
 209+ 7BFD             >len_NFA         defl    $ - temp_NFA
 209+ 7BFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BF5             >
 209+ 7BF5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BF6 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7BFA 52 45 41 44 >
 209+ 7BFE             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BFD C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BFE             >
 209+ 7BFE D5 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7C00             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7C00 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7C03             >
 209+ 7C03             >
 209+ 7C03             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7C03             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7C03             >
 209+ 7C03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7C03 E0 7B                        dw  BLK_SEEK
 211+ 7C05 A1 6C                        dw  BBUF
 212+ 7C07 99 7B 0C 6B                  dw  BLK_FH, FETCH
 213+ 7C0B D2 67                        dw  F_READ
 214+ 7C0D A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7C11 39 70
 215+ 7C13 5E 6A                        dw  DROP
 216+ 7C15 48 69                        dw  EXIT
 217+ 7C17
 218+ 7C17              //  ______________________________________________________________________
 219+ 7C17              //
 220+ 7C17              // blk-write     n --
 221+ 7C17              // seek block n  within blocks!.bin  file
 222+ 7C17                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7C17             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7C17             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7C17             >
 222+ 7C17             >                // dummy db directives used to calculate length of namec
 222+ 7C17 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7C1B 57 52 49 54 >
 222+ 7C1F 45          >
 222+ 7C20             >len_NFA         defl    $ - temp_NFA
 222+ 7C20             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7C17             >
 222+ 7C17 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7C18 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7C1C 57 52 49 54 >
 222+ 7C20 45          >
 222+ 7C21             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7C20 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7C21             >
 222+ 7C21 F5 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7C23             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7C23 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7C26             >
 222+ 7C26             >
 222+ 7C26             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7C26             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7C26             >
 222+ 7C26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7C26 E0 7B                        dw  BLK_SEEK
 224+ 7C28 A1 6C                        dw  BBUF
 225+ 7C2A 99 7B 0C 6B                  dw  BLK_FH, FETCH
 226+ 7C2E EF 67                        dw  F_WRITE
 227+ 7C30 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C34 39 70
 228+ 7C36 5E 6A                        dw  DROP
 229+ 7C38 48 69                        dw  EXIT
 230+ 7C3A
 231+ 7C3A              //  ______________________________________________________________________
 232+ 7C3A              //
 233+ 7C3A              // blk-init     n --
 234+ 7C3A              // seek block n  within blocks!.bin  file
 235+ 7C3A                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C3A             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C3A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C3A             >
 235+ 7C3A             >                // dummy db directives used to calculate length of namec
 235+ 7C3A 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C3E 49 4E 49 54 >
 235+ 7C42             >len_NFA         defl    $ - temp_NFA
 235+ 7C42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C3A             >
 235+ 7C3A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C3B 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C3F 49 4E 49 54 >
 235+ 7C43             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C42 D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C43             >
 235+ 7C43 17 7C       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C45             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C45 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C48             >
 235+ 7C48             >
 235+ 7C48             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C48             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C48             >
 235+ 7C48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C48 99 7B 0C 6B                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C4C 8F 67 5E 6A
 237+ 7C50 AA 7B E0 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C54 64 6E 75 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C58 04 68
 239+ 7C5A A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C5E 39 70
 240+ 7C60 99 7B 17 6B                  dw  BLK_FH, STORE
 241+ 7C64 48 69                        dw  EXIT
 242+ 7C66
 243+ 7C66              //  ______________________________________________________________________
 244+ 7C66              //
 245+ 7C66              // #sec
 246+ 7C66              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C66              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C66
 249+ 7C66                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C66             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C66             >
 249+ 7C66             >                // dummy db directives used to calculate length of namec
 249+ 7C66 23 53 45 43 >                db      "#SEC"
 249+ 7C6A             >len_NFA         defl    $ - temp_NFA
 249+ 7C6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C66             >
 249+ 7C66 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C67 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C6B             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C6A C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C6B             >
 249+ 7C6B 3A 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C6D             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C6D CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C70             >
 249+ 7C70             >
 249+ 7C70             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C70             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C70             >
 249+ 7C70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C70 FF 7F       >                dw      32767
 250+ 7C72
 251+ 7C72              //  ______________________________________________________________________
 252+ 7C72
 253+ 7C72
 254+ 7C72
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C72                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C72              //  ______________________________________________________________________
   2+ 7C72              //
   3+ 7C72              //  L3.asm
   4+ 7C72              //
   5+ 7C72              //  Continuation of L2.asm
   6+ 7C72              //  I/O Block definitions
   7+ 7C72              //  ______________________________________________________________________
   8+ 7C72
   9+ 7C72
  10+ 7C72              //  ______________________________________________________________________
  11+ 7C72              //
  12+ 7C72              // r/w          a n f --
  13+ 7C72              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C72                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C72             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C72             >
  14+ 7C72             >                // dummy db directives used to calculate length of namec
  14+ 7C72 52 2F 57    >                db      "R/W"
  14+ 7C75             >len_NFA         defl    $ - temp_NFA
  14+ 7C75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C72             >
  14+ 7C72 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C73 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C76             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C75 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C76             >
  14+ 7C76 66 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C78             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C78 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C7B             >
  14+ 7C7B             >
  14+ 7C7B             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C7B             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C7B             >
  14+ 7C7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C7B 59 69                        dw      TO_R                    // >r
  16+ 7C7D EA 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C7F 8B 6A 9F 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C83 50 6A 6D 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C87 EA 69 FA 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C8B F6 68                        dw      OR_OP                   // or
  21+ 7C8D A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C91 39 70
  22+ 7C93 6B 69                        dw      R_TO                    // r>
  23+ 7C95                                                              // if
  24+ 7C95 1C 64                        dw      ZBRANCH
  25+ 7C97 08 00                        dw      Read_Write_Else - $
  26+ 7C99 00 7C                        dw          BLK_READ            //      blk-read
  27+ 7C9B 07 64                        dw      BRANCH
  28+ 7C9D 04 00                        dw      Read_Write_Endif - $
  29+ 7C9F              Read_Write_Else:                                // else
  30+ 7C9F 23 7C                        dw          BLK_WRITE           //      blk-write
  31+ 7CA1              Read_Write_Endif:                               // endif
  32+ 7CA1 48 69                        dw      EXIT                    // ;
  33+ 7CA3
  34+ 7CA3
  35+ 7CA3              //  ______________________________________________________________________
  36+ 7CA3              //
  37+ 7CA3              // +buf        a1 -- a2 f
  38+ 7CA3              // advences to next buffer, cyclically rotating along them
  39+ 7CA3                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7CA3             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7CA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7CA3             >
  39+ 7CA3             >                // dummy db directives used to calculate length of namec
  39+ 7CA3 2B 42 55 46 >                db      "+BUF"
  39+ 7CA7             >len_NFA         defl    $ - temp_NFA
  39+ 7CA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7CA3             >
  39+ 7CA3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7CA4 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7CA8             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7CA7 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7CA8             >
  39+ 7CA8 72 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7CAA             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7CAA CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7CAD             >
  39+ 7CAD             >
  39+ 7CAD             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7CAD             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7CAD             >
  39+ 7CAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7CAD A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7CB1 C3 69
  41+ 7CB3 8B 6A 4E 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7CB7 0C 6B
  42+ 7CB9 C5 6E                        dw      EQUALS                  // =
  43+ 7CBB                                                              // if
  44+ 7CBB 1C 64                        dw      ZBRANCH
  45+ 7CBD 08 00                        dw      PBuf_Endif - $
  46+ 7CBF 5E 6A                        dw          DROP                //      drop
  47+ 7CC1 42 6D 0C 6B                  dw          FIRST, FETCH        //      first @
  48+ 7CC5              PBuf_Endif:                                     // endif
  49+ 7CC5 8B 6A 12 6E                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CC9 0C 6B
  50+ 7CCB B9 6E                        dw      SUBTRACT                // -
  51+ 7CCD 48 69                        dw      EXIT                    // ;
  52+ 7CCF
  53+ 7CCF              //  ______________________________________________________________________
  54+ 7CCF              //
  55+ 7CCF              // update       --
  56+ 7CCF              // mark the last used block to be written to disk
  57+ 7CCF                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CCF             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CCF             >
  57+ 7CCF             >                // dummy db directives used to calculate length of namec
  57+ 7CCF 55 50 44 41 >                db      "UPDATE"
  57+ 7CD3 54 45       >
  57+ 7CD5             >len_NFA         defl    $ - temp_NFA
  57+ 7CD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CCF             >
  57+ 7CCF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CD0 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CD4 54 45       >
  57+ 7CD6             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CD5 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CD6             >
  57+ 7CD6 A3 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CD8             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CD8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CDB             >
  57+ 7CDB             >
  57+ 7CDB             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CDB             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CDB             >
  57+ 7CDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CDB 12 6E 0C 6B                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CDF 0C 6B
  59+ 7CE1 A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CE5 F6 68
  60+ 7CE7 12 6E 0C 6B                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CEB 17 6B
  61+ 7CED 48 69                        dw      EXIT                    // ;
  62+ 7CEF
  63+ 7CEF
  64+ 7CEF              //  ______________________________________________________________________
  65+ 7CEF              //
  66+ 7CEF              // empty-buffers --
  67+ 7CEF                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CEF             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CEF             >
  67+ 7CEF             >                // dummy db directives used to calculate length of namec
  67+ 7CEF 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CF3 59 2D 42 55 >
  67+ 7CF7 46 46 45 52 >
  67+ 7CFB 53          >
  67+ 7CFC             >len_NFA         defl    $ - temp_NFA
  67+ 7CFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CEF             >
  67+ 7CEF 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CF0 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CF4 59 2D 42 55 >
  67+ 7CF8 46 46 45 52 >
  67+ 7CFC 53          >
  67+ 7CFD             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CFC D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CFD             >
  67+ 7CFD CF 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CFF             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CFF CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7D02             >
  67+ 7D02             >
  67+ 7D02             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7D02             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7D02             >
  67+ 7D02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7D02 42 6D 0C 6B                  dw      FIRST, FETCH            // first @
  69+ 7D06 4E 6D 0C 6B                  dw      LIMIT, FETCH            // limit @
  70+ 7D0A 50 6A B9 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7D0E 8B 73
  71+ 7D10 48 69                        dw      EXIT                    // ;
  72+ 7D12
  73+ 7D12              //  ______________________________________________________________________
  74+ 7D12              //
  75+ 7D12              // buffer       n -- a
  76+ 7D12              // read block n and gives the address to a buffer
  77+ 7D12              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7D12              // disk before reading the block n.
  79+ 7D12
  80+ 7D12                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7D12             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7D12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7D12             >
  80+ 7D12             >                // dummy db directives used to calculate length of namec
  80+ 7D12 42 55 46 46 >                db      "BUFFER"
  80+ 7D16 45 52       >
  80+ 7D18             >len_NFA         defl    $ - temp_NFA
  80+ 7D18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7D12             >
  80+ 7D12 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7D13 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7D17 45 52       >
  80+ 7D19             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7D18 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7D19             >
  80+ 7D19 EF 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7D1B             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7D1B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7D1E             >
  80+ 7D1E             >
  80+ 7D1E             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7D1E             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7D1E             >
  80+ 7D1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7D1E 07 6E 0C 6B                  dw      USE, FETCH              // use @
  82+ 7D22 8B 6A 59 69                  dw      DUP, TO_R               // dup >r
  83+ 7D26                                                              // begin
  84+ 7D26              Buffer_Begin:
  85+ 7D26 AA 7C                        dw          PBUF                //      +buf
  86+ 7D28                                                              // until
  87+ 7D28 1C 64                        dw      ZBRANCH
  88+ 7D2A FC FF                        dw      Buffer_Begin - $
  89+ 7D2C 07 6E 17 6B                  dw      USE, STORE              // use !
  90+ 7D30 7D 69 0C 6B                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D34 9F 69
  91+ 7D36                                                              // if
  92+ 7D36 1C 64                        dw      ZBRANCH
  93+ 7D38 14 00                        dw      Buffer_Endif - $
  94+ 7D3A 7D 69 02 6A                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D3E 7D 69 0C 6B                  dw          R_OP, FETCH         //      r fetch
  96+ 7D42 A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D46 E6 68                        dw          AND_OP              //      and
  98+ 7D48 5A 6C 78 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D4C              Buffer_Endif:                                   // endif
 100+ 7D4C 7D 69 17 6B                  dw      R_OP, STORE             // r !
 101+ 7D50 7D 69 12 6E                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D54 17 6B
 102+ 7D56 6B 69 02 6A                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D5A 48 69                        dw      EXIT                    // ;
 104+ 7D5C
 105+ 7D5C              //  ______________________________________________________________________
 106+ 7D5C              //
 107+ 7D5C              // block        n -- a
 108+ 7D5C              // Leaves the buffer address that contains the block n.
 109+ 7D5C              // If the block is not already present, it will be loaded from disk
 110+ 7D5C              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D5C              // disk before reading the block n.
 112+ 7D5C              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D5C
 114+ 7D5C                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D5C             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D5C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D5C             >
 114+ 7D5C             >                // dummy db directives used to calculate length of namec
 114+ 7D5C 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D60 4B          >
 114+ 7D61             >len_NFA         defl    $ - temp_NFA
 114+ 7D61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D5C             >
 114+ 7D5C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D5D 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D61 4B          >
 114+ 7D62             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D61 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D62             >
 114+ 7D62 12 7D       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D64             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D64 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D67             >
 114+ 7D67             >
 114+ 7D67             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D67             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D67             >
 114+ 7D67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D67 99 6D 0C 6B                  dw      OFFSET, FETCH           // offset @
 116+ 7D6B C3 69 59 69                  dw      PLUS, TO_R              // + >r
 117+ 7D6F 12 6E 0C 6B                  dw      PREV, FETCH             // prev @
 118+ 7D73 8B 6A 0C 6B                  dw      DUP, FETCH              // dup @
 119+ 7D77 7D 69 B9 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D7B 8B 6A C3 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D7F                                                              // if
 122+ 7D7F 1C 64                        dw        ZBRANCH
 123+ 7D81 32 00                        dw        Block_Endif_1 - $
 124+ 7D83              Block_Begin:                                    //      begin
 125+ 7D83 AA 7C 85 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D87                                                              //          if
 127+ 7D87 1C 64                        dw          ZBRANCH
 128+ 7D89 12 00                        dw          Block_Endif_2 - $
 129+ 7D8B 5E 6A                        dw              DROP            //              drop
 130+ 7D8D 7D 69 1B 7D                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D91 8B 6A                        dw              DUP             //              dup
 132+ 7D93 7D 69 63 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D97 78 7C                        dw              READ_WRITE      //              r/w
 134+ 7D99 18 6A                        dw              TWO_MINUS       //              2-
 135+ 7D9B              Block_Endif_2:                                  //          endif
 136+ 7D9B 8B 6A 0C 6B                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D9F 7D 69
 137+ 7DA1 B9 6E 8B 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7DA5 C3 69 85 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7DA9                                                              //      until
 140+ 7DA9 1C 64                        dw        ZBRANCH
 141+ 7DAB D8 FF                        dw        Block_Begin - $
 142+ 7DAD 8B 6A 12 6E                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7DB1 17 6B
 143+ 7DB3              Block_Endif_1:                                  // endif
 144+ 7DB3 6B 69 5E 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7DB7 02 6A
 145+ 7DB9 48 69                        dw      EXIT                    // ;
 146+ 7DBB
 147+ 7DBB              //  ______________________________________________________________________
 148+ 7DBB              //
 149+ 7DBB              // #buff        -- n
 150+ 7DBB              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7DBB                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7DBB             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7DBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7DBB             >
 151+ 7DBB             >                // dummy db directives used to calculate length of namec
 151+ 7DBB 23 42 55 46 >                db      "#BUFF"
 151+ 7DBF 46          >
 151+ 7DC0             >len_NFA         defl    $ - temp_NFA
 151+ 7DC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7DBB             >
 151+ 7DBB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7DBC 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7DC0 46          >
 151+ 7DC1             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7DC0 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7DC1             >
 151+ 7DC1 5C 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7DC3             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7DC3 CD 1E 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7DC6             >
 151+ 7DC6             >
 151+ 7DC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7DC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7DC6             >
 151+ 7DC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7DC6 07 00       >                dw      7
 152+ 7DC8
 153+ 7DC8              //  ______________________________________________________________________
 154+ 7DC8              //
 155+ 7DC8              // flush        --
 156+ 7DC8                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DC8             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DC8             >
 156+ 7DC8             >                // dummy db directives used to calculate length of namec
 156+ 7DC8 46 4C 55 53 >                db      "FLUSH"
 156+ 7DCC 48          >
 156+ 7DCD             >len_NFA         defl    $ - temp_NFA
 156+ 7DCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DC8             >
 156+ 7DC8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DC9 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DCD 48          >
 156+ 7DCE             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DCD C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DCE             >
 156+ 7DCE BB 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DD0             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DD0 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DD3             >
 156+ 7DD3             >
 156+ 7DD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DD3             >
 156+ 7DD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DD3 C3 7D E0 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DD7 5A 6C
 158+ 7DD9              Flush_Do:                                       // do
 159+ 7DD9 70 64                        dw      C_DO
 160+ 7DDB 5A 6C 1B 7D                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DDF 5E 6A
 161+ 7DE1                                                              // loop
 162+ 7DE1 F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DE5 99 7B 0C 6B                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DE9 A1 67 5E 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DED 48 69                        dw      EXIT                    // exit
 166+ 7DEF
 167+ 7DEF              //  ______________________________________________________________________
 168+ 7DEF              //
 169+ 7DEF              // f_getline    a m fh -- n
 170+ 7DEF              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DEF              // Address a is left for subsequent processing
 172+ 7DEF              // and n as the actual number of byte read, that is the length of line
 173+ 7DEF                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DEF             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DEF             >
 173+ 7DEF             >                // dummy db directives used to calculate length of namec
 173+ 7DEF 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DF3 54 4C 49 4E >
 173+ 7DF7 45          >
 173+ 7DF8             >len_NFA         defl    $ - temp_NFA
 173+ 7DF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DEF             >
 173+ 7DEF 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DF0 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DF4 54 4C 49 4E >
 173+ 7DF8 45          >
 173+ 7DF9             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DF8 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DF9             >
 173+ 7DF9 C8 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DFB             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DFB CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DFE             >
 173+ 7DFE             >
 173+ 7DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DFE             >
 173+ 7DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DFE 59 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7E00 72 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7E02 7D 69 B6 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7E06 A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7E0A 39 70
 178+ 7E0C
 179+ 7E0C D0 6A 50 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7E10 E0 69 80 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7E14
 182+ 7E14 7D 69 D2 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7E18 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7E1C 39 70
 184+ 7E1E                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7E1E 1C 64                        dw      ZBRANCH
 186+ 7E20 3C 00                        dw      FGetline_Else - $
 187+ 7E22 A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7E26 58 65
 188+ 7E28 5E 6A 67 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E2C 80 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E2E A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E32 58 65
 191+ 7E34 5E 6A 67 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E38 96 6A 09 6F                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E3C 8B 6A 42 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E40 17 6B
 194+ 7E42 8B 6A 59 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E46 D0 6A 6B 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E4A 5A 6C CE 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E4E 6B 69 6E 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E52 A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E56 39 70
 199+ 7E58                                                              // else
 200+ 7E58 07 64                        dw      BRANCH
 201+ 7E5A 0C 00                        dw      FGetline_Endif - $
 202+ 7E5C              FGetline_Else:
 203+ 7E5C 6B 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E5E D0 6A C4 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E62 5E 6A 5A 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E66              FGetline_Endif:                                 // endif
 207+ 7E66 59 69 8B 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E6A 8B 6A
 208+ 7E6C E0 69 80 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E70 7D 69 51 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E74 E0 6A C3 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E78 5A 6C 80 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E7C 0D 6A 17 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E80 7D 69 C3 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E84 EA 69
 214+ 7E86 80 6A 7D 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E8A B9 6E
 215+ 7E8C 9D 73                        dw      BLANKS                  // blanks
 216+ 7E8E 6B 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E90 48 69                        dw      EXIT                    // ;
 218+ 7E92
 219+ 7E92              //  ______________________________________________________________________
 220+ 7E92              //
 221+ 7E92              // f_include    fh --
 222+ 7E92              // Given a filehandle includes the source from file
 223+ 7E92                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E92             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E92             >
 223+ 7E92             >                // dummy db directives used to calculate length of namec
 223+ 7E92 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E96 43 4C 55 44 >
 223+ 7E9A 45          >
 223+ 7E9B             >len_NFA         defl    $ - temp_NFA
 223+ 7E9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E92             >
 223+ 7E92 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E93 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E97 43 4C 55 44 >
 223+ 7E9B 45          >
 223+ 7E9C             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E9B C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E9C             >
 223+ 7E9C EF 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E9E             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E9E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7EA1             >
 223+ 7EA1             >
 223+ 7EA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7EA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7EA1             >
 223+ 7EA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7EA1 6E 6D 0C 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7EA5 59 69
 225+ 7EA7 78 6D 0C 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7EAB 59 69
 226+ 7EAD 37 6E 0C 6B                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7EB1 59 69
 227+ 7EB3 7D 69                        dw      R_OP                    // r
 228+ 7EB5                                                              // if
 229+ 7EB5 1C 64                        dw      ZBRANCH
 230+ 7EB7 20 00                        dw      FInclude_Else_1 - $
 231+ 7EB9 7D 69 B6 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7EBD A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7EC1 39 70
 233+ 7EC3 78 6D 0C 6B                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EC7 18 6A                        dw          TWO_MINUS
 235+ 7EC9 42 6E 0C 6B                  dw          SPAN, FETCH         //      span @ -
 236+ 7ECD B9 6E                        dw          SUBTRACT
 237+ 7ECF A7 6E CE 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7ED3                                                              // else
 239+ 7ED3 07 64                        dw      BRANCH
 240+ 7ED5 06 00                        dw      FInclude_Endif_1 - $
 241+ 7ED7              FInclude_Else_1:
 242+ 7ED7 5A 6C 5A 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EDB                                                              // endif
 244+ 7EDB              FInclude_Endif_1:
 245+ 7EDB 59 69 59 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EDF 37 6E 17 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EE3              FInclude_Begin:                                 // begin
 248+ 7EE3 63 6C 64 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EE7 A1 6C
 249+ 7EE9 E0 6A 9D 73                  dw          TWO_DUP, BLANKS     //      2dup blanks
 250+ 7EED 80 6A E0 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7EF1 80 6A 0D 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7EF5 37 6E 0C 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7EF9 FB 7D                        dw          F_GETLINE           //      f_getline
 254+ 7EFB                                                              // while
 255+ 7EFB 1C 64                        dw      ZBRANCH
 256+ 7EFD 14 00                        dw      FInclude_Repeat - $
 257+ 7EFF 63 6C 6E 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7F03 17 6B
 258+ 7F05 5A 6C 78 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7F09 17 6B
 259+ 7F0B 92 77                        dw          INTERPRET           //      interpret
 260+ 7F0D 07 64                        dw      BRANCH
 261+ 7F0F D4 FF                        dw      FInclude_Begin - $
 262+ 7F11              FInclude_Repeat:                                // repeat
 263+ 7F11 37 6E 0C 6B                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7F15 5A 6C 37 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7F19 17 6B
 265+ 7F1B 8F 67                        dw      F_CLOSE                 // f_close
 266+ 7F1D A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7F21 39 70
 267+ 7F23 6B 69 6B 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F27 6B 69
 268+ 7F29 8B 6A 37 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F2D 17 6B
 269+ 7F2F                                                              // if
 270+ 7F2F 1C 64                        dw      ZBRANCH
 271+ 7F31 12 00                        dw      FInclude_Else_2 - $
 272+ 7F33 37 6E 0C 6B                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F37 6E 67                        dw          F_SEEK              //      f_seek
 274+ 7F39 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F3D 39 70
 275+ 7F3F                                                              // else
 276+ 7F3F 07 64                        dw      BRANCH
 277+ 7F41 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F43              FInclude_Else_2:
 279+ 7F43 C4 6A                        dw          TWO_DROP            //      2drop
 280+ 7F45              FInclude_Endif_2:                               // endif
 281+ 7F45 6B 69 78 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F49 17 6B
 282+ 7F4B 6B 69 6E 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F4F 17 6B
 283+ 7F51 48 69                        dw      EXIT                    // ;
 284+ 7F53
 285+ 7F53              //  ______________________________________________________________________
 286+ 7F53              //
 287+ 7F53              // open<         -- fh
 288+ 7F53              // Open the following filename and return it file-handle
 289+ 7F53              // Used in the form OPEN CCCC
 290+ 7F53                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F53             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F53             >
 290+ 7F53             >                // dummy db directives used to calculate length of namec
 290+ 7F53 4F 50 45 4E >                db      "OPEN<"
 290+ 7F57 3C          >
 290+ 7F58             >len_NFA         defl    $ - temp_NFA
 290+ 7F58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F53             >
 290+ 7F53 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F54 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F58 3C          >
 290+ 7F59             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F58 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F59             >
 290+ 7F59 92 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F5B             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F5B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F5E             >
 290+ 7F5E             >
 290+ 7F5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F5E             >
 290+ 7F5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F5E 89 6C                        dw      BL
 292+ 7F60 D8 73 EE 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F64 50 6A
 293+ 7F66 C3 69 5A 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F6A 80 6A 17 6B
 294+ 7F6E C4 73 63 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F72 04 68
 295+ 7F74 A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F78 39 70                        dw      QERROR                  // ?error
 297+ 7F7A 48 69                        dw      EXIT                    // ;
 298+ 7F7C
 299+ 7F7C              //  ______________________________________________________________________
 300+ 7F7C              //
 301+ 7F7C              // include      -- cccc
 302+ 7F7C              // Include the following filename
 303+ 7F7C                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F7C             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F7C             >
 303+ 7F7C             >                // dummy db directives used to calculate length of namec
 303+ 7F7C 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F80 55 44 45    >
 303+ 7F83             >len_NFA         defl    $ - temp_NFA
 303+ 7F83             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F7C             >
 303+ 7F7C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F7D 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F81 55 44 45    >
 303+ 7F84             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F83 C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F84             >
 303+ 7F84 53 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F86             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F86 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F89             >
 303+ 7F89             >
 303+ 7F89             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F89             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F89             >
 303+ 7F89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F89 5B 7F                        dw      OPEN_FH                 // open
 305+ 7F8B 8B 6A 9E 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F8F 8F 67 5E 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F93 48 69                        dw      EXIT                    // ;
 308+ 7F95
 309+ 7F95              //  ______________________________________________________________________
 310+ 7F95              //
 311+ 7F95              // needs
 312+ 7F95              // check for cccc exists in vocabulary
 313+ 7F95              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F95
 315+ 7F95              // temp filename cccc.f as counted string zero-padded
 316+ 7F95                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F95             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F95             >
 316+ 7F95             >                // dummy db directives used to calculate length of namec
 316+ 7F95 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F99 53 2D 57    >
 316+ 7F9C             >len_NFA         defl    $ - temp_NFA
 316+ 7F9C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F95             >
 316+ 7F95 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F96 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F9A 53 2D 57    >
 316+ 7F9D             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F9C D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F9D             >
 316+ 7F9D 7C 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F9F             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F9F CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7FA2             >
 316+ 7FA2             >
 316+ 7FA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7FA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7FA2             >
 316+ 7FA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7FA2 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7FC5              // temp complete path+filename
 319+ 7FC5                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7FC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7FC5             >
 319+ 7FC5             >                // dummy db directives used to calculate length of namec
 319+ 7FC5 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FC9 53 2D 46 4E >
 319+ 7FCD             >len_NFA         defl    $ - temp_NFA
 319+ 7FCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7FC5             >
 319+ 7FC5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7FC6 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FCA 53 2D 46 4E >
 319+ 7FCE             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FCD CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FCE             >
 319+ 7FCE 95 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FD0             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FD0 CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FD3             >
 319+ 7FD3             >
 319+ 7FD3             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FD3             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FD3             >
 319+ 7FD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FD3 00 00 00...                  ds      40
 321+ 7FFB              // constant path
 322+ 7FFB                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FFB             >
 322+ 7FFB             >                // dummy db directives used to calculate length of namec
 322+ 7FFB 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FFF 53 2D 49 4E >
 322+ 8003 43          >
 322+ 8004             >len_NFA         defl    $ - temp_NFA
 322+ 8004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FFB             >
 322+ 7FFB 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FFC 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 8000 53 2D 49 4E >
 322+ 8004 43          >
 322+ 8005             >                org     $-1                 // alter last byte of Name just above to set
 322+ 8004 C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 8005             >
 322+ 8005 C5 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 8007             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 8007 CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 800A             >
 322+ 800A             >
 322+ 800A             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 800A             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 800A             >
 322+ 800A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 800A 04 69 6E 63                  db      4, "inc/", 0
 323+ 800E 2F 00
 324+ 8010                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 8010             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 8010             >
 324+ 8010             >                // dummy db directives used to calculate length of namec
 324+ 8010 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 8014 53 2D 4C 49 >
 324+ 8018 42          >
 324+ 8019             >len_NFA         defl    $ - temp_NFA
 324+ 8019             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 8010             >
 324+ 8010 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 8011 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 8015 53 2D 4C 49 >
 324+ 8019 42          >
 324+ 801A             >                org     $-1                 // alter last byte of Name just above to set
 324+ 8019 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 801A             >
 324+ 801A FB 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 801C             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 801C CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 801F             >
 324+ 801F             >
 324+ 801F             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 801F             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 801F             >
 324+ 801F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 801F 04 6C 69 62                  db      4, "lib/", 0
 325+ 8023 2F 00
 326+ 8025
 327+ 8025              // Concatenate path at a and filename and include it
 328+ 8025              // No error is issued if filename doesn't exist.
 329+ 8025                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 8025             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 8025             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 8025             >
 329+ 8025             >                // dummy db directives used to calculate length of namec
 329+ 8025 4E 45 45 44 >                db      "NEEDS/"
 329+ 8029 53 2F       >
 329+ 802B             >len_NFA         defl    $ - temp_NFA
 329+ 802B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 8025             >
 329+ 8025 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 8026 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 802A 53 2F       >
 329+ 802C             >                org     $-1                 // alter last byte of Name just above to set
 329+ 802B AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 802C             >
 329+ 802C 10 80       >                dw      last_NFA            // Link to previous definition Name
 329+ 802E             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 802E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 8031             >
 329+ 8031             >
 329+ 8031             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 8031             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 8031             >
 329+ 8031             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 8031 EE 71 72 6A                  dw      COUNT, TUCK             // n a n
 331+ 8035 D0 7F 80 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8039 51 68
 332+ 803B D0 7F C3 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 803F 9F 7F E0 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 8043 80 6A
 334+ 8045 A5 63 23 00                  dw      LIT, 35
 335+ 8049 51 68                        dw      CMOVE
 336+ 804B D0 7F                        dw      NEEDS_FN
 337+ 804D C4 73 63 6C                  dw      PAD, ONE, F_OPEN
 337+ 8051 04 68
 338+ 8053 85 69                        dw      ZEQUAL
 339+ 8055 1C 64                        dw      ZBRANCH
 340+ 8057 08 00                        dw      Needs_1 - $
 341+ 8059 9E 7E                        dw          F_INCLUDE
 342+ 805B 07 64                        dw      BRANCH
 343+ 805D 04 00                        dw      Needs_2 - $
 344+ 805F              Needs_1:
 345+ 805F              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 805F              //              dw          LIT, 43, MESSAGE
 347+ 805F 5E 6A                        dw          DROP
 348+ 8061              Needs_2:
 349+ 8061 48 69                        dw      EXIT                    // ;
 350+ 8063
 351+ 8063
 352+ 8063                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 8063             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 8063             >
 352+ 8063             >                // dummy db directives used to calculate length of namec
 352+ 8063 4E 44 4F 4D >                db      "NDOM"
 352+ 8067             >len_NFA         defl    $ - temp_NFA
 352+ 8067             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 8063             >
 352+ 8063 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 8064 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8068             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8067 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8068             >
 352+ 8068 25 80       >                dw      last_NFA            // Link to previous definition Name
 352+ 806A             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 806A CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 806D             >
 352+ 806D             >
 352+ 806D             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 806D             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 806D             >
 352+ 806D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 806D              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 806D 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 8071 7C 5C 3C 3E
 354+ 8075 22
 355+ 8076
 356+ 8076                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 356+ 8076             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ 8076             >
 356+ 8076             >                // dummy db directives used to calculate length of namec
 356+ 8076 4E 43 44 4D >                db      "NCDM"
 356+ 807A             >len_NFA         defl    $ - temp_NFA
 356+ 807A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ 8076             >
 356+ 8076 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ 8077 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 356+ 807B             >                org     $-1                 // alter last byte of Name just above to set
 356+ 807A CD          >                db      {b $} | END_BIT     // msb as name end
 356+ 807B             >
 356+ 807B 63 80       >                dw      last_NFA            // Link to previous definition Name
 356+ 807D             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 807D CD A1 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 356+ 8080             >
 356+ 8080             >
 356+ 8080             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 8080             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 8080             >
 356+ 8080             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 8080              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 358+ 8080 5F 5E 25 26                  db '_^%&$_{}~'
 358+ 8084 24 5F 7B 7D
 358+ 8088 7E
 359+ 8089
 360+ 8089
 361+ 8089              // Replace illegal character in filename using the map here above
 362+ 8089              // at the moment we need only  "
 363+ 8089                              Colon_Def NEEDS_CHECK, "NEEDS-CH", is_normal
 363+ 8089             >                New_Def  NEEDS_CHECK, "NEEDS-CH", Enter_Ptr, is_normal ; ok
 363+ 8089             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 363+ 8089             >
 363+ 8089             >                // dummy db directives used to calculate length of namec
 363+ 8089 4E 45 45 44 >                db      "NEEDS-CH"
 363+ 808D 53 2D 43 48 >
 363+ 8091             >len_NFA         defl    $ - temp_NFA
 363+ 8091             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 363+ 8089             >
 363+ 8089 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 363+ 808A 4E 45 45 44 >                db      "NEEDS-CH"               // name string in 7-bit ascii, but
 363+ 808E 53 2D 43 48 >
 363+ 8092             >                org     $-1                 // alter last byte of Name just above to set
 363+ 8091 C8          >                db      {b $} | END_BIT     // msb as name end
 363+ 8092             >
 363+ 8092 76 80       >                dw      last_NFA            // Link to previous definition Name
 363+ 8094             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 363+ 8094 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 363+ 8097             >
 363+ 8097             >
 363+ 8097             >                endif           ; ok        // for other definitions it "points" the correct handler
 363+ 8097             >                // Use of "; ok" to suppress "warning[fwdref]"
 363+ 8097             >
 363+ 8097             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 364+ 8097 EE 71 00 72                  dw      COUNT, BOUNDS
 365+ 809B 70 64                        dw      C_DO
 366+ 809D              Needs_3:
 367+ 809D 7D 80 6A 80                  dw          NCDM, NDOM, LIT, 9
 367+ 80A1 A5 63 09 00
 368+ 80A5 78 64 23 6B                  dw          I, CFETCH
 369+ 80A9 90 65                        dw          C_MAP
 370+ 80AB 78 64 2F 6B                  dw          I, CSTORE
 371+ 80AF              Needs_4:
 372+ 80AF F8 63                        dw      C_LOOP
 373+ 80B1 EC FF                        dw      Needs_3 - $
 374+ 80B3 48 69                        dw      EXIT
 375+ 80B5
 376+ 80B5
 377+ 80B5              // include  "path/cccc.f" if cccc is not defined
 378+ 80B5              // filename cccc.f is temporary stored at NEEDS-W
 379+ 80B5                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 379+ 80B5             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 379+ 80B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 379+ 80B5             >
 379+ 80B5             >                // dummy db directives used to calculate length of namec
 379+ 80B5 4E 45 45 44 >                db      "NEEDS-F"
 379+ 80B9 53 2D 46    >
 379+ 80BC             >len_NFA         defl    $ - temp_NFA
 379+ 80BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 379+ 80B5             >
 379+ 80B5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 379+ 80B6 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 379+ 80BA 53 2D 46    >
 379+ 80BD             >                org     $-1                 // alter last byte of Name just above to set
 379+ 80BC C6          >                db      {b $} | END_BIT     // msb as name end
 379+ 80BD             >
 379+ 80BD 89 80       >                dw      last_NFA            // Link to previous definition Name
 379+ 80BF             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 379+ 80BF CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 379+ 80C2             >
 379+ 80C2             >
 379+ 80C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 379+ 80C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 379+ 80C2             >
 379+ 80C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 380+ 80C2 94 75                        dw      LFIND
 381+ 80C4 1C 64                        dw      ZBRANCH
 382+ 80C6 0A 00                        dw      Needs_5 - $
 383+ 80C8
 384+ 80C8 5E 6A C4 6A                  dw          DROP, TWO_DROP
 385+ 80CC 07 64                        dw      BRANCH
 386+ 80CE 2C 00                        dw      Needs_6 - $
 387+ 80D0              Needs_5:
 388+ 80D0 9F 7F                        dw          NEEDS_W
 389+ 80D2 A5 63 23 00                  dw          LIT, 35
 390+ 80D6 8B 73                        dw          ERASE                   // a
 391+ 80D8 64 6E 23 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 391+ 80DC E0 69
 392+ 80DE 64 6E 50 6A                  dw          HERE, OVER              // a n here n
 393+ 80E2 9F 7F 80 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 393+ 80E6 51 68
 394+ 80E8 9F 7F 94 80                  dw          NEEDS_W, NEEDS_CHECK
 395+ 80EC 9F 7F C3 69                  dw          NEEDS_W, PLUS           // a a1+1
 396+ 80F0 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 397+ 80F4 80 6A 17 6B                  dw          SWAP, STORE             // a
 398+ 80F8 2E 80                        dw          NEEDS_SLASH
 399+ 80FA              Needs_6:
 400+ 80FA 48 69                        dw      EXIT
 401+ 80FC
 402+ 80FC
 403+ 80FC              // check for cccc exists in vocabulary
 404+ 80FC              // if it doesn't then  INCLUDE  inc/cccc.F
 405+ 80FC              // search in inc subdirectory
 406+ 80FC                              Colon_Def NEEDS, "NEEDS", is_normal
 406+ 80FC             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 406+ 80FC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ 80FC             >
 406+ 80FC             >                // dummy db directives used to calculate length of namec
 406+ 80FC 4E 45 45 44 >                db      "NEEDS"
 406+ 8100 53          >
 406+ 8101             >len_NFA         defl    $ - temp_NFA
 406+ 8101             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ 80FC             >
 406+ 80FC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ 80FD 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 406+ 8101 53          >
 406+ 8102             >                org     $-1                 // alter last byte of Name just above to set
 406+ 8101 D3          >                db      {b $} | END_BIT     // msb as name end
 406+ 8102             >
 406+ 8102 B5 80       >                dw      last_NFA            // Link to previous definition Name
 406+ 8104             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 8104 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 406+ 8107             >
 406+ 8107             >
 406+ 8107             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 8107             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 8107             >
 406+ 8107             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 8107 78 6D 0C 6B                  dw      TO_IN, FETCH
 408+ 810B 8B 6A                        dw      DUP
 409+ 810D 07 80 BF 80                  dw      NEEDS_INC, NEEDS_PATH
 410+ 8111 78 6D 17 6B                  dw      TO_IN, STORE
 411+ 8115 1C 80 BF 80                  dw      NEEDS_LIB, NEEDS_PATH
 412+ 8119 78 6D 17 6B                  dw      TO_IN, STORE
 413+ 811D 94 75                        dw      LFIND
 414+ 811F 1C 64                        dw      ZBRANCH
 415+ 8121 08 00                        dw      Needs_10 - $
 416+ 8123 C4 6A                        dw          TWO_DROP
 417+ 8125 07 64                        dw      BRANCH
 418+ 8127 10 00                        dw      Needs_11 - $
 419+ 8129              Needs_10:
 420+ 8129 9F 7F EE 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 420+ 812D 0C 72 6F 6F
 421+ 8131 A5 63 2B 00                  dw      LIT, 43, MESSAGE
 421+ 8135 DC 7A
 422+ 8137              Needs_11:
 423+ 8137 48 69                        dw      EXIT
 424+ 8139
 425+ 8139
 426+ 8139              //  ______________________________________________________________________
 427+ 8139              //
 428+ 8139              // load+        n --
 429+ 8139                              Colon_Def LOAD_P, "LOAD+", is_normal
 429+ 8139             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 429+ 8139             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 429+ 8139             >
 429+ 8139             >                // dummy db directives used to calculate length of namec
 429+ 8139 4C 4F 41 44 >                db      "LOAD+"
 429+ 813D 2B          >
 429+ 813E             >len_NFA         defl    $ - temp_NFA
 429+ 813E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 429+ 8139             >
 429+ 8139 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 429+ 813A 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 429+ 813E 2B          >
 429+ 813F             >                org     $-1                 // alter last byte of Name just above to set
 429+ 813E AB          >                db      {b $} | END_BIT     // msb as name end
 429+ 813F             >
 429+ 813F FC 80       >                dw      last_NFA            // Link to previous definition Name
 429+ 8141             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 429+ 8141 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 429+ 8144             >
 429+ 8144             >
 429+ 8144             >                endif           ; ok        // for other definitions it "points" the correct handler
 429+ 8144             >                // Use of "; ok" to suppress "warning[fwdref]"
 429+ 8144             >
 429+ 8144             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 430+ 8144 6E 6D 0C 6B                  dw      BLK, FETCH, TO_R        // blk @ >r
 430+ 8148 59 69
 431+ 814A 78 6D 0C 6B                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 431+ 814E 59 69
 432+ 8150
 433+ 8150 5A 6C 78 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 433+ 8154 17 6B
 434+ 8156 AE 6C 3B 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 434+ 815A 6E 6D 17 6B
 435+ 815E 92 77                        dw      INTERPRET               // interpret
 436+ 8160
 437+ 8160 6B 69 78 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 437+ 8164 17 6B
 438+ 8166 6B 69 6E 6D                  dw      R_TO, BLK, STORE        // r> blk !
 438+ 816A 17 6B
 439+ 816C 48 69                        dw      EXIT                    // ;
 440+ 816E
 441+ 816E              //  ______________________________________________________________________
 442+ 816E              //
 443+ 816E              // -->          --
 444+ 816E                              Colon_Def LOAD_NEXT, "-->", is_immediate
 444+ 816E             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 444+ 816E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 444+ 816E             >
 444+ 816E             >                // dummy db directives used to calculate length of namec
 444+ 816E 2D 2D 3E    >                db      "-->"
 444+ 8171             >len_NFA         defl    $ - temp_NFA
 444+ 8171             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 444+ 816E             >
 444+ 816E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 444+ 816F 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 444+ 8172             >                org     $-1                 // alter last byte of Name just above to set
 444+ 8171 BE          >                db      {b $} | END_BIT     // msb as name end
 444+ 8172             >
 444+ 8172 39 81       >                dw      last_NFA            // Link to previous definition Name
 444+ 8174             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 444+ 8174 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 444+ 8177             >
 444+ 8177             >
 444+ 8177             >                endif           ; ok        // for other definitions it "points" the correct handler
 444+ 8177             >                // Use of "; ok" to suppress "warning[fwdref]"
 444+ 8177             >
 444+ 8177             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 445+ 8177 B7 70                        dw      QLOADING                // ?loading
 446+ 8179 5A 6C 78 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 446+ 817D 17 6B
 447+ 817F AE 6C                        dw      BSCR                    // b/scr
 448+ 8181 6E 6D 0C 6B                  dw      BLK, FETCH              // blk @
 449+ 8185 50 6A                        dw      OVER                    // over
 450+ 8187 6B 7A                        dw      MOD                     // mod
 451+ 8189 B9 6E                        dw      SUBTRACT                // -
 452+ 818B 6E 6D ED 6A                  dw      BLK, PLUSSTORE          // +!
 453+ 818F 48 69                        dw      EXIT                    // ;
 454+ 8191
 455+ 8191              //  ______________________________________________________________________
 456+ 8191              //
 457+ 8191              // '            -- xt
 458+ 8191                              Colon_Def TICK, "'", is_normal
 458+ 8191             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 458+ 8191             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 458+ 8191             >
 458+ 8191             >                // dummy db directives used to calculate length of namec
 458+ 8191 27          >                db      "'"
 458+ 8192             >len_NFA         defl    $ - temp_NFA
 458+ 8192             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 458+ 8191             >
 458+ 8191 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 458+ 8192 27          >                db      "'"               // name string in 7-bit ascii, but
 458+ 8193             >                org     $-1                 // alter last byte of Name just above to set
 458+ 8192 A7          >                db      {b $} | END_BIT     // msb as name end
 458+ 8193             >
 458+ 8193 6E 81       >                dw      last_NFA            // Link to previous definition Name
 458+ 8195             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 458+ 8195 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 458+ 8198             >
 458+ 8198             >
 458+ 8198             >                endif           ; ok        // for other definitions it "points" the correct handler
 458+ 8198             >                // Use of "; ok" to suppress "warning[fwdref]"
 458+ 8198             >
 458+ 8198             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 459+ 8198 94 75                        dw      LFIND                   // -find
 460+ 819A 85 69                        dw      ZEQUAL                  // 0=
 461+ 819C 5A 6C 39 70                  dw      ZERO, QERROR            // 0 ?error
 462+ 81A0 5E 6A                        dw      DROP                    // drop
 463+ 81A2 48 69                        dw      EXIT                    // ;
 464+ 81A4
 465+ 81A4              //  ______________________________________________________________________
 466+ 81A4              //
 467+ 81A4              // forget       -- cccc
 468+ 81A4                              Colon_Def FORGET, "FORGET", is_normal
 468+ 81A4             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 468+ 81A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 468+ 81A4             >
 468+ 81A4             >                // dummy db directives used to calculate length of namec
 468+ 81A4 46 4F 52 47 >                db      "FORGET"
 468+ 81A8 45 54       >
 468+ 81AA             >len_NFA         defl    $ - temp_NFA
 468+ 81AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 468+ 81A4             >
 468+ 81A4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 468+ 81A5 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 468+ 81A9 45 54       >
 468+ 81AB             >                org     $-1                 // alter last byte of Name just above to set
 468+ 81AA D4          >                db      {b $} | END_BIT     // msb as name end
 468+ 81AB             >
 468+ 81AB 91 81       >                dw      last_NFA            // Link to previous definition Name
 468+ 81AD             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 468+ 81AD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 468+ 81B0             >
 468+ 81B0             >
 468+ 81B0             >                endif           ; ok        // for other definitions it "points" the correct handler
 468+ 81B0             >                // Use of "; ok" to suppress "warning[fwdref]"
 468+ 81B0             >
 468+ 81B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 469+ 81B0 B5 6D 0C 6B                  dw      CURRENT, FETCH          // current @
 470+ 81B4 A7 6D 0C 6B                  dw      CONTEXT, FETCH          // context @
 471+ 81B8 B9 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 471+ 81BC 17 00 39 70
 472+ 81C0 95 81 04 70                  dw      TICK, TO_BODY           // ' >body
 473+ 81C4 8B 6A 1E 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 473+ 81C8 0C 6B
 474+ 81CA D3 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 474+ 81CE 15 00 39 70
 475+ 81D2 8B 6A D8 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 475+ 81D6 27 6D 17 6B
 476+ 81DA B8 6F 0C 6B                  dw      LFA, FETCH              // lfa @
 477+ 81DE A7 6D 0C 6B                  dw      CONTEXT, FETCH, STORE   // context @ !
 477+ 81E2 17 6B
 478+ 81E4 48 69                        dw      EXIT                    // ;
 479+ 81E6
 480+ 81E6              //  ______________________________________________________________________
 481+ 81E6              //
 482+ 81E6              // marker       -- cccc
 483+ 81E6                              Colon_Def MARKER, "MARKER", is_immediate
 483+ 81E6             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 483+ 81E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 483+ 81E6             >
 483+ 81E6             >                // dummy db directives used to calculate length of namec
 483+ 81E6 4D 41 52 4B >                db      "MARKER"
 483+ 81EA 45 52       >
 483+ 81EC             >len_NFA         defl    $ - temp_NFA
 483+ 81EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 483+ 81E6             >
 483+ 81E6 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 483+ 81E7 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 483+ 81EB 45 52       >
 483+ 81ED             >                org     $-1                 // alter last byte of Name just above to set
 483+ 81EC D2          >                db      {b $} | END_BIT     // msb as name end
 483+ 81ED             >
 483+ 81ED A4 81       >                dw      last_NFA            // Link to previous definition Name
 483+ 81EF             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 483+ 81EF CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 483+ 81F2             >
 483+ 81F2             >
 483+ 81F2             >                endif           ; ok        // for other definitions it "points" the correct handler
 483+ 81F2             >                // Use of "; ok" to suppress "warning[fwdref]"
 483+ 81F2             >
 483+ 81F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 484+ 81F2 B6 71                        dw      CBUILDS
 485+ 81F4 36 6D 0C 6B                  dw      VOC_LINK, FETCH, COMMA
 485+ 81F8 82 6E
 486+ 81FA B5 6D 0C 6B                  dw      CURRENT, FETCH, COMMA
 486+ 81FE 82 6E
 487+ 8200 A7 6D 0C 6B                  dw      CONTEXT, FETCH, COMMA
 487+ 8204 82 6E
 488+ 8206 A7 6F 82 6E                  dw      LATEST, COMMA
 489+ 820A A7 6F ED 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 489+ 820E B8 6F 0C 6B
 489+ 8212 82 6E
 490+ 8214 C7 71                        dw      DOES_TO
 491+ 8216 8B 6A 0C 6B                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 491+ 821A 36 6D 17 6B
 491+ 821E 02 6A
 492+ 8220 8B 6A 0C 6B                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 492+ 8224 B5 6D 17 6B
 492+ 8228 02 6A
 493+ 822A 8B 6A 0C 6B                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 493+ 822E A7 6D 17 6B
 493+ 8232 02 6A
 494+ 8234 8B 6A 0C 6B                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 494+ 8238 27 6D 17 6B
 494+ 823C 02 6A
 495+ 823E 0C 6B B5 6D                  dw           FETCH, CURRENT, FETCH, STORE
 495+ 8242 0C 6B 17 6B
 496+ 8246 48 69                        dw      EXIT
 497+ 8248
 498+ 8248              //  ______________________________________________________________________
 499+ 8248              //
 500+ 8248              // spaces       n --
 501+ 8248                              Colon_Def SPACES, "SPACES", is_normal
 501+ 8248             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 501+ 8248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 501+ 8248             >
 501+ 8248             >                // dummy db directives used to calculate length of namec
 501+ 8248 53 50 41 43 >                db      "SPACES"
 501+ 824C 45 53       >
 501+ 824E             >len_NFA         defl    $ - temp_NFA
 501+ 824E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 501+ 8248             >
 501+ 8248 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 501+ 8249 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 501+ 824D 45 53       >
 501+ 824F             >                org     $-1                 // alter last byte of Name just above to set
 501+ 824E D3          >                db      {b $} | END_BIT     // msb as name end
 501+ 824F             >
 501+ 824F E6 81       >                dw      last_NFA            // Link to previous definition Name
 501+ 8251             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 501+ 8251 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 501+ 8254             >
 501+ 8254             >
 501+ 8254             >                endif           ; ok        // for other definitions it "points" the correct handler
 501+ 8254             >                // Use of "; ok" to suppress "warning[fwdref]"
 501+ 8254             >
 501+ 8254             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 502+ 8254 5A 6C 20 6F                  dw      ZERO, MAX
 503+ 8258 5A 6C 45 64                  dw      ZERO, C_Q_DO
 504+ 825C 08 00                        dw      Spaces_Leave - $
 505+ 825E              Spaces_Loop:
 506+ 825E 6F 6F                        dw          SPACE
 507+ 8260 F8 63                        dw      C_LOOP
 508+ 8262 FC FF                        dw      Spaces_Loop - $
 509+ 8264              Spaces_Leave:
 510+ 8264 48 69                        dw      EXIT                    // ;
 511+ 8266
 512+ 8266              //  ______________________________________________________________________
 513+ 8266              //
 514+ 8266              // <#           --
 515+ 8266                              Colon_Def BEGIN_DASH, "<#", is_normal
 515+ 8266             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 515+ 8266             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 8266             >
 515+ 8266             >                // dummy db directives used to calculate length of namec
 515+ 8266 3C 23       >                db      "<#"
 515+ 8268             >len_NFA         defl    $ - temp_NFA
 515+ 8268             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 8266             >
 515+ 8266 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 8267 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 515+ 8269             >                org     $-1                 // alter last byte of Name just above to set
 515+ 8268 A3          >                db      {b $} | END_BIT     // msb as name end
 515+ 8269             >
 515+ 8269 48 82       >                dw      last_NFA            // Link to previous definition Name
 515+ 826B             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 826B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 515+ 826E             >
 515+ 826E             >
 515+ 826E             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 826E             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 826E             >
 515+ 826E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 516+ 826E C4 73 FD 6D                  dw      PAD, HLD, STORE
 516+ 8272 17 6B
 517+ 8274 48 69                        dw      EXIT
 518+ 8276
 519+ 8276              //  ______________________________________________________________________
 520+ 8276              //
 521+ 8276              // #>           --
 522+ 8276                              Colon_Def DASH_END, "#>", is_normal
 522+ 8276             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 522+ 8276             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 522+ 8276             >
 522+ 8276             >                // dummy db directives used to calculate length of namec
 522+ 8276 23 3E       >                db      "#>"
 522+ 8278             >len_NFA         defl    $ - temp_NFA
 522+ 8278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 522+ 8276             >
 522+ 8276 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 522+ 8277 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 522+ 8279             >                org     $-1                 // alter last byte of Name just above to set
 522+ 8278 BE          >                db      {b $} | END_BIT     // msb as name end
 522+ 8279             >
 522+ 8279 66 82       >                dw      last_NFA            // Link to previous definition Name
 522+ 827B             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 522+ 827B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 522+ 827E             >
 522+ 827E             >
 522+ 827E             >                endif           ; ok        // for other definitions it "points" the correct handler
 522+ 827E             >                // Use of "; ok" to suppress "warning[fwdref]"
 522+ 827E             >
 522+ 827E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 523+ 827E C4 6A                        dw      TWO_DROP
 524+ 8280 FD 6D 0C 6B                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 524+ 8284 C4 73 50 6A
 524+ 8288 B9 6E
 525+ 828A 48 69                        dw      EXIT
 526+ 828C
 527+ 828C              //  ______________________________________________________________________
 528+ 828C              //
 529+ 828C              // sign         n d -- d
 530+ 828C                              Colon_Def SIGN, "SIGN", is_normal
 530+ 828C             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 530+ 828C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 828C             >
 530+ 828C             >                // dummy db directives used to calculate length of namec
 530+ 828C 53 49 47 4E >                db      "SIGN"
 530+ 8290             >len_NFA         defl    $ - temp_NFA
 530+ 8290             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 828C             >
 530+ 828C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 828D 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 530+ 8291             >                org     $-1                 // alter last byte of Name just above to set
 530+ 8290 CE          >                db      {b $} | END_BIT     // msb as name end
 530+ 8291             >
 530+ 8291 76 82       >                dw      last_NFA            // Link to previous definition Name
 530+ 8293             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 8293 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 8296             >
 530+ 8296             >
 530+ 8296             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 8296             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 8296             >
 530+ 8296             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 8296 96 6A 9F 69                  dw      ROT, ZLESS
 532+ 829A 1C 64                        dw      ZBRANCH
 533+ 829C 08 00                        dw      Sign_Endif - $
 534+ 829E A5 63 2D 00                  dw          LIT, 45, HOLD
 534+ 82A2 AD 73
 535+ 82A4              Sign_Endif:
 536+ 82A4 48 69                        dw      EXIT
 537+ 82A6
 538+ 82A6              //  ______________________________________________________________________
 539+ 82A6              //
 540+ 82A6              // #           d1 -- d2
 541+ 82A6                              Colon_Def DASH, "#", is_normal
 541+ 82A6             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 541+ 82A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ 82A6             >
 541+ 82A6             >                // dummy db directives used to calculate length of namec
 541+ 82A6 23          >                db      "#"
 541+ 82A7             >len_NFA         defl    $ - temp_NFA
 541+ 82A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ 82A6             >
 541+ 82A6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ 82A7 23          >                db      "#"               // name string in 7-bit ascii, but
 541+ 82A8             >                org     $-1                 // alter last byte of Name just above to set
 541+ 82A7 A3          >                db      {b $} | END_BIT     // msb as name end
 541+ 82A8             >
 541+ 82A8 8C 82       >                dw      last_NFA            // Link to previous definition Name
 541+ 82AA             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 82AA CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 82AD             >
 541+ 82AD             >
 541+ 82AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 82AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 82AD             >
 541+ 82AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 82AD CC 6D 0C 6B                  dw      BASE, FETCH
 543+ 82B1
 544+ 82B1 59 69                        dw      TO_R                    // >r           ( ud1 )
 545+ 82B3 5A 6C 7D 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 545+ 82B7 AF 68
 546+ 82B9 6B 69 80 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 546+ 82BD 59 69
 547+ 82BF AF 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 548+ 82C1 6B 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 549+ 82C3
 550+ 82C3 96 6A                        dw      ROT
 551+ 82C5 A5 63 09 00                  dw      LIT, 9, OVER, LESS
 551+ 82C9 50 6A E5 6E
 552+ 82CD 1C 64                        dw      ZBRANCH
 553+ 82CF 08 00                        dw      Dash_Endif - $
 554+ 82D1 A5 63 07 00                  dw          LIT, 7, PLUS
 554+ 82D5 C3 69
 555+ 82D7              Dash_Endif:
 556+ 82D7
 557+ 82D7 A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 557+ 82DB C3 69 AD 73
 558+ 82DF 48 69                        dw      EXIT
 559+ 82E1
 560+ 82E1              //  ______________________________________________________________________
 561+ 82E1              //
 562+ 82E1              // #s           d1 -- d2
 563+ 82E1                              Colon_Def DASHES, "#S", is_normal
 563+ 82E1             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 563+ 82E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 563+ 82E1             >
 563+ 82E1             >                // dummy db directives used to calculate length of namec
 563+ 82E1 23 53       >                db      "#S"
 563+ 82E3             >len_NFA         defl    $ - temp_NFA
 563+ 82E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 563+ 82E1             >
 563+ 82E1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 563+ 82E2 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 563+ 82E4             >                org     $-1                 // alter last byte of Name just above to set
 563+ 82E3 D3          >                db      {b $} | END_BIT     // msb as name end
 563+ 82E4             >
 563+ 82E4 A6 82       >                dw      last_NFA            // Link to previous definition Name
 563+ 82E6             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 563+ 82E6 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 563+ 82E9             >
 563+ 82E9             >
 563+ 82E9             >                endif           ; ok        // for other definitions it "points" the correct handler
 563+ 82E9             >                // Use of "; ok" to suppress "warning[fwdref]"
 563+ 82E9             >
 563+ 82E9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 564+ 82E9              Dashes_Begin:
 565+ 82E9 AA 82 E0 6A                  dw      DASH, TWO_DUP
 566+ 82ED F6 68 85 69                  dw          OR_OP, ZEQUAL
 567+ 82F1 1C 64                        dw      ZBRANCH
 568+ 82F3 F6 FF                        dw      Dashes_Begin - $
 569+ 82F5 48 69                        dw      EXIT
 570+ 82F7
 571+ 82F7              //  ______________________________________________________________________
 572+ 82F7              //
 573+ 82F7              // d.r          d n --
 574+ 82F7                              Colon_Def D_DOT_R, "D.R", is_normal
 574+ 82F7             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 574+ 82F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 574+ 82F7             >
 574+ 82F7             >                // dummy db directives used to calculate length of namec
 574+ 82F7 44 2E 52    >                db      "D.R"
 574+ 82FA             >len_NFA         defl    $ - temp_NFA
 574+ 82FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 574+ 82F7             >
 574+ 82F7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 574+ 82F8 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 574+ 82FB             >                org     $-1                 // alter last byte of Name just above to set
 574+ 82FA D2          >                db      {b $} | END_BIT     // msb as name end
 574+ 82FB             >
 574+ 82FB E1 82       >                dw      last_NFA            // Link to previous definition Name
 574+ 82FD             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 574+ 82FD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 574+ 8300             >
 574+ 8300             >
 574+ 8300             >                endif           ; ok        // for other definitions it "points" the correct handler
 574+ 8300             >                // Use of "; ok" to suppress "warning[fwdref]"
 574+ 8300             >
 574+ 8300             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 575+ 8300 59 69                        dw      TO_R
 576+ 8302 72 6A 8B 79                  dw      TUCK, DABS
 577+ 8306 6B 82 E6 82                  dw      BEGIN_DASH, DASHES, SIGN, DASH_END
 577+ 830A 93 82 7B 82
 578+ 830E 6B 69                        dw      R_TO
 579+ 8310 50 6A B9 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 579+ 8314 51 82 0C 72
 580+ 8318 48 69                        dw      EXIT
 581+ 831A
 582+ 831A              //  ______________________________________________________________________
 583+ 831A              //
 584+ 831A              // .r           n1 n2 --
 585+ 831A                              Colon_Def DOT_R, ".R", is_normal
 585+ 831A             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 585+ 831A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 585+ 831A             >
 585+ 831A             >                // dummy db directives used to calculate length of namec
 585+ 831A 2E 52       >                db      ".R"
 585+ 831C             >len_NFA         defl    $ - temp_NFA
 585+ 831C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 585+ 831A             >
 585+ 831A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 585+ 831B 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 585+ 831D             >                org     $-1                 // alter last byte of Name just above to set
 585+ 831C D2          >                db      {b $} | END_BIT     // msb as name end
 585+ 831D             >
 585+ 831D F7 82       >                dw      last_NFA            // Link to previous definition Name
 585+ 831F             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 585+ 831F CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 585+ 8322             >
 585+ 8322             >
 585+ 8322             >                endif           ; ok        // for other definitions it "points" the correct handler
 585+ 8322             >                // Use of "; ok" to suppress "warning[fwdref]"
 585+ 8322             >
 585+ 8322             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 586+ 8322 59 69                        dw      TO_R
 587+ 8324 A7 6E 6B 69                  dw      S_TO_D, R_TO
 588+ 8328 FD 82                        dw      D_DOT_R
 589+ 832A 48 69                        dw      EXIT
 590+ 832C
 591+ 832C              //  ______________________________________________________________________
 592+ 832C              //
 593+ 832C              // d.           d --
 594+ 832C                              Colon_Def D_DOT, "D.", is_normal
 594+ 832C             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 594+ 832C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ 832C             >
 594+ 832C             >                // dummy db directives used to calculate length of namec
 594+ 832C 44 2E       >                db      "D."
 594+ 832E             >len_NFA         defl    $ - temp_NFA
 594+ 832E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ 832C             >
 594+ 832C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ 832D 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 594+ 832F             >                org     $-1                 // alter last byte of Name just above to set
 594+ 832E AE          >                db      {b $} | END_BIT     // msb as name end
 594+ 832F             >
 594+ 832F 1A 83       >                dw      last_NFA            // Link to previous definition Name
 594+ 8331             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 8331 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 8334             >
 594+ 8334             >
 594+ 8334             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 8334             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 8334             >
 594+ 8334             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 8334 5A 6C FD 82                  dw      ZERO, D_DOT_R, SPACE
 595+ 8338 6F 6F
 596+ 833A 48 69                        dw      EXIT
 597+ 833C
 598+ 833C              //  ______________________________________________________________________
 599+ 833C              //
 600+ 833C              // .            n --
 601+ 833C                              Colon_Def DOT, ".", is_normal
 601+ 833C             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 601+ 833C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ 833C             >
 601+ 833C             >                // dummy db directives used to calculate length of namec
 601+ 833C 2E          >                db      "."
 601+ 833D             >len_NFA         defl    $ - temp_NFA
 601+ 833D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ 833C             >
 601+ 833C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ 833D 2E          >                db      "."               // name string in 7-bit ascii, but
 601+ 833E             >                org     $-1                 // alter last byte of Name just above to set
 601+ 833D AE          >                db      {b $} | END_BIT     // msb as name end
 601+ 833E             >
 601+ 833E 2C 83       >                dw      last_NFA            // Link to previous definition Name
 601+ 8340             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 8340 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 8343             >
 601+ 8343             >
 601+ 8343             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 8343             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 8343             >
 601+ 8343             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 8343 A7 6E 31 83                  dw      S_TO_D, D_DOT
 603+ 8347 48 69                        dw      EXIT
 604+ 8349
 605+ 8349              //  ______________________________________________________________________
 606+ 8349              //
 607+ 8349              // ?            n --
 608+ 8349                              Colon_Def QUESTION, "?", is_normal
 608+ 8349             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 608+ 8349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 608+ 8349             >
 608+ 8349             >                // dummy db directives used to calculate length of namec
 608+ 8349 3F          >                db      "?"
 608+ 834A             >len_NFA         defl    $ - temp_NFA
 608+ 834A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 608+ 8349             >
 608+ 8349 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 608+ 834A 3F          >                db      "?"               // name string in 7-bit ascii, but
 608+ 834B             >                org     $-1                 // alter last byte of Name just above to set
 608+ 834A BF          >                db      {b $} | END_BIT     // msb as name end
 608+ 834B             >
 608+ 834B 3C 83       >                dw      last_NFA            // Link to previous definition Name
 608+ 834D             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 608+ 834D CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 608+ 8350             >
 608+ 8350             >
 608+ 8350             >                endif           ; ok        // for other definitions it "points" the correct handler
 608+ 8350             >                // Use of "; ok" to suppress "warning[fwdref]"
 608+ 8350             >
 608+ 8350             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 609+ 8350 0C 6B 40 83                  dw      FETCH, DOT
 610+ 8354 48 69                        dw      EXIT
 611+ 8356
 612+ 8356              //  ______________________________________________________________________
 613+ 8356              //
 614+ 8356              // u.           u --
 615+ 8356                              Colon_Def U_DOT, "U.", is_normal
 615+ 8356             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 615+ 8356             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 615+ 8356             >
 615+ 8356             >                // dummy db directives used to calculate length of namec
 615+ 8356 55 2E       >                db      "U."
 615+ 8358             >len_NFA         defl    $ - temp_NFA
 615+ 8358             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 615+ 8356             >
 615+ 8356 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 615+ 8357 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 615+ 8359             >                org     $-1                 // alter last byte of Name just above to set
 615+ 8358 AE          >                db      {b $} | END_BIT     // msb as name end
 615+ 8359             >
 615+ 8359 49 83       >                dw      last_NFA            // Link to previous definition Name
 615+ 835B             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 615+ 835B CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 615+ 835E             >
 615+ 835E             >
 615+ 835E             >                endif           ; ok        // for other definitions it "points" the correct handler
 615+ 835E             >                // Use of "; ok" to suppress "warning[fwdref]"
 615+ 835E             >
 615+ 835E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 616+ 835E 5A 6C 31 83                  dw      ZERO, D_DOT
 617+ 8362 48 69                        dw      EXIT
 618+ 8364
 619+ 8364              //  ______________________________________________________________________
 620+ 8364              //
 621+ 8364              // words        --
 622+ 8364                              Colon_Def WORDS, "WORDS", is_normal
 622+ 8364             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 622+ 8364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 8364             >
 622+ 8364             >                // dummy db directives used to calculate length of namec
 622+ 8364 57 4F 52 44 >                db      "WORDS"
 622+ 8368 53          >
 622+ 8369             >len_NFA         defl    $ - temp_NFA
 622+ 8369             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 8364             >
 622+ 8364 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 8365 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 622+ 8369 53          >
 622+ 836A             >                org     $-1                 // alter last byte of Name just above to set
 622+ 8369 D3          >                db      {b $} | END_BIT     // msb as name end
 622+ 836A             >
 622+ 836A 56 83       >                dw      last_NFA            // Link to previous definition Name
 622+ 836C             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 836C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 836F             >
 622+ 836F             >
 622+ 836F             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 836F             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 836F             >
 622+ 836F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 836F A5 63 80 00                  dw      LIT, 128, OUT, STORE
 623+ 8373 82 6D 17 6B
 624+ 8377 A7 6D 0C 6B                  dw      CONTEXT, FETCH, FETCH
 624+ 837B 0C 6B
 625+ 837D              Words_Begin:
 626+ 837D 8B 6A 23 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 626+ 8381 A5 63 1F 00
 626+ 8385 E6 68
 627+ 8387 82 6D 0C 6B                  dw          OUT, FETCH, PLUS
 627+ 838B C3 69
 628+ 838D 94 6C E5 6E                  dw          CL, LESS, ZEQUAL
 628+ 8391 85 69
 629+ 8393 1C 64                        dw          ZBRANCH
 630+ 8395 0A 00                        dw          Words_Endif - $
 631+ 8397 FC 65 5A 6C                  dw              CR, ZERO, OUT, STORE
 631+ 839B 82 6D 17 6B
 632+ 839F              Words_Endif:
 633+ 839F 8B 6A 08 76                  dw          DUP, ID_DOT
 634+ 83A3 ED 6F B8 6F                  dw          PFA, LFA, FETCH
 634+ 83A7 0C 6B
 635+ 83A9 8B 6A 85 69                  dw          DUP, ZEQUAL
 636+ 83AD 0B 67 F6 68                  dw          QTERMINAL, OR_OP
 637+ 83B1 1C 64                        dw      ZBRANCH
 638+ 83B3 CA FF                        dw      Words_Begin - $
 639+ 83B5 5E 6A                        dw      DROP
 640+ 83B7 48 69                        dw      EXIT
 641+ 83B9
 642+ 83B9              //  ______________________________________________________________________
 643+ 83B9              //
 644+ 83B9              // list         n --
 645+ 83B9                              Colon_Def LIST, "LIST", is_normal
 645+ 83B9             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 645+ 83B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 645+ 83B9             >
 645+ 83B9             >                // dummy db directives used to calculate length of namec
 645+ 83B9 4C 49 53 54 >                db      "LIST"
 645+ 83BD             >len_NFA         defl    $ - temp_NFA
 645+ 83BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 645+ 83B9             >
 645+ 83B9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 645+ 83BA 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 645+ 83BE             >                org     $-1                 // alter last byte of Name just above to set
 645+ 83BD D4          >                db      {b $} | END_BIT     // msb as name end
 645+ 83BE             >
 645+ 83BE 64 83       >                dw      last_NFA            // Link to previous definition Name
 645+ 83C0             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 645+ 83C0 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 645+ 83C3             >
 645+ 83C3             >
 645+ 83C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 645+ 83C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 645+ 83C3             >
 645+ 83C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 646+ 83C3 65 71 FC 65                  dw      DECIMAL, CR
 647+ 83C7 8B 6A 8C 6D                  dw      DUP, SCR, STORE
 647+ 83CB 17 6B
 648+ 83CD 28 74                        dw      C_DOT_QUOTE
 649+ 83CF 05 53 63 72                  db      5, "Scr# "
 649+ 83D3 23 20
 650+ 83D5 40 83                        dw      DOT
 651+ 83D7 BB 6C 5A 6C                  dw      LSCR, ZERO, C_DO
 651+ 83DB 70 64
 652+ 83DD              List_Loop:
 653+ 83DD FC 65                        dw          CR
 654+ 83DF 78 64 75 6C                  dw          I, THREE
 655+ 83E3 1F 83 6F 6F                  dw          DOT_R, SPACE
 656+ 83E7 78 64 8C 6D                  dw          I, SCR, FETCH, DOT_LINE
 656+ 83EB 0C 6B C7 7A
 657+ 83EF 0B 67                        dw          QTERMINAL
 658+ 83F1 1C 64                        dw          ZBRANCH
 659+ 83F3 06 00                        dw          List_Endif - $
 660+ 83F5 2F 64                        dw              C_LEAVE
 661+ 83F7 06 00                        dw              List_Leave - $
 662+ 83F9              List_Endif:
 663+ 83F9 F8 63                        dw      C_LOOP
 664+ 83FB E2 FF                        dw      List_Loop - $
 665+ 83FD              List_Leave:
 666+ 83FD FC 65                        dw      CR
 667+ 83FF 48 69                        dw      EXIT
 668+ 8401
 669+ 8401              //  ______________________________________________________________________
 670+ 8401              //
 671+ 8401              // index        n1 n2 --
 672+ 8401                              Colon_Def INDEX, "INDEX", is_normal
 672+ 8401             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 672+ 8401             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 672+ 8401             >
 672+ 8401             >                // dummy db directives used to calculate length of namec
 672+ 8401 49 4E 44 45 >                db      "INDEX"
 672+ 8405 58          >
 672+ 8406             >len_NFA         defl    $ - temp_NFA
 672+ 8406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 672+ 8401             >
 672+ 8401 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 672+ 8402 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 672+ 8406 58          >
 672+ 8407             >                org     $-1                 // alter last byte of Name just above to set
 672+ 8406 D8          >                db      {b $} | END_BIT     // msb as name end
 672+ 8407             >
 672+ 8407 B9 83       >                dw      last_NFA            // Link to previous definition Name
 672+ 8409             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 672+ 8409 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 672+ 840C             >
 672+ 840C             >
 672+ 840C             >                endif           ; ok        // for other definitions it "points" the correct handler
 672+ 840C             >                // Use of "; ok" to suppress "warning[fwdref]"
 672+ 840C             >
 672+ 840C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 673+ 840C E0 69 80 6A                  dw      ONE_PLUS, SWAP, C_DO
 673+ 8410 70 64
 674+ 8412              Index_Loop:
 675+ 8412 FC 65 78 64                  dw          CR, I, THREE
 675+ 8416 75 6C
 676+ 8418 1F 83 6F 6F                  dw          DOT_R, SPACE
 677+ 841C 5A 6C 78 64                  dw          ZERO, I, DOT_LINE
 677+ 8420 C7 7A
 678+ 8422 0B 67                        dw          QTERMINAL
 679+ 8424 1C 64                        dw          ZBRANCH
 680+ 8426 06 00                        dw          Index_Endif - $
 681+ 8428 2F 64                        dw              C_LEAVE
 682+ 842A 06 00                        dw              Index_Leave - $
 683+ 842C              Index_Endif:
 684+ 842C F8 63                        dw      C_LOOP
 685+ 842E E4 FF                        dw      Index_Loop - $
 686+ 8430              Index_Leave:
 687+ 8430 FC 65                        dw      CR
 688+ 8432 48 69                        dw      EXIT
 689+ 8434
 690+ 8434              //  ______________________________________________________________________
 691+ 8434              //
 692+ 8434              // cls          --
 693+ 8434                              Colon_Def CLS, "CLS", is_normal
 693+ 8434             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 693+ 8434             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 693+ 8434             >
 693+ 8434             >                // dummy db directives used to calculate length of namec
 693+ 8434 43 4C 53    >                db      "CLS"
 693+ 8437             >len_NFA         defl    $ - temp_NFA
 693+ 8437             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 693+ 8434             >
 693+ 8434 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 693+ 8435 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 693+ 8438             >                org     $-1                 // alter last byte of Name just above to set
 693+ 8437 D3          >                db      {b $} | END_BIT     // msb as name end
 693+ 8438             >
 693+ 8438 01 84       >                dw      last_NFA            // Link to previous definition Name
 693+ 843A             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 693+ 843A CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 693+ 843D             >
 693+ 843D             >
 693+ 843D             >                endif           ; ok        // for other definitions it "points" the correct handler
 693+ 843D             >                // Use of "; ok" to suppress "warning[fwdref]"
 693+ 843D             >
 693+ 843D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 694+ 843D A5 63 0E 00                  dw      LIT, $0E, EMITC
 694+ 8441 E7 65
 695+ 8443 48 69                        dw      EXIT
 696+ 8445
 697+ 8445              //  ______________________________________________________________________
 698+ 8445              //
 699+ 8445              // splash       --
 700+ 8445                              Colon_Def SPLASH, "SPLASH", is_normal
 700+ 8445             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 700+ 8445             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ 8445             >
 700+ 8445             >                // dummy db directives used to calculate length of namec
 700+ 8445 53 50 4C 41 >                db      "SPLASH"
 700+ 8449 53 48       >
 700+ 844B             >len_NFA         defl    $ - temp_NFA
 700+ 844B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ 8445             >
 700+ 8445 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ 8446 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 700+ 844A 53 48       >
 700+ 844C             >                org     $-1                 // alter last byte of Name just above to set
 700+ 844B C8          >                db      {b $} | END_BIT     // msb as name end
 700+ 844C             >
 700+ 844C 34 84       >                dw      last_NFA            // Link to previous definition Name
 700+ 844E             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 844E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 8451             >
 700+ 8451             >
 700+ 8451             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 8451             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 8451             >
 700+ 8451             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 8451 3A 84                        dw      CLS
 702+ 8453 28 74                        dw      C_DOT_QUOTE
 703+ 8455 58                           db      88
 704+ 8456 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 704+ 845A 72 74 68 20
 704+ 845E 31 2E 35 32
 704+ 8462 20 4E 65 78
 704+ 8466 74 5A 58 4F
 704+ 846A 53 20 76 65
 704+ 846E 72 73 69 6F
 704+ 8472 6E 0D
 705+ 8474 44 69 72 65                  db      "Direct Threaded - build 20220508", 13  // 31
 705+ 8478 63 74 20 54
 705+ 847C 68 72 65 61
 705+ 8480 64 65 64 20
 705+ 8484 2D 20 62 75
 705+ 8488 69 6C 64 20
 705+ 848C 32 30 32 32
 705+ 8490 30 35 30 38
 705+ 8494 0D
 706+ 8495 31 39 39 30                  db      "1990-2022 Matteo Vitturi", 13        // 25
 706+ 8499 2D 32 30 32
 706+ 849D 32 20 4D 61
 706+ 84A1 74 74 65 6F
 706+ 84A5 20 56 69 74
 706+ 84A9 74 75 72 69
 706+ 84AD 0D
 707+ 84AE 48 69                        dw      EXIT
 708+ 84B0
 709+ 84B0              //  ______________________________________________________________________
 710+ 84B0              //
 711+ 84B0              // video        --
 712+ 84B0                              Colon_Def VIDEO, "VIDEO", is_normal
 712+ 84B0             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 712+ 84B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ 84B0             >
 712+ 84B0             >                // dummy db directives used to calculate length of namec
 712+ 84B0 56 49 44 45 >                db      "VIDEO"
 712+ 84B4 4F          >
 712+ 84B5             >len_NFA         defl    $ - temp_NFA
 712+ 84B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ 84B0             >
 712+ 84B0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ 84B1 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 712+ 84B5 4F          >
 712+ 84B6             >                org     $-1                 // alter last byte of Name just above to set
 712+ 84B5 CF          >                db      {b $} | END_BIT     // msb as name end
 712+ 84B6             >
 712+ 84B6 45 84       >                dw      last_NFA            // Link to previous definition Name
 712+ 84B8             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 84B8 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 84BB             >
 712+ 84BB             >
 712+ 84BB             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 84BB             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 84BB             >
 712+ 84BB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 84BB 6C 6C 8B 6A                  dw      TWO, DUP, DEVICE, STORE
 713+ 84BF 11 7B 17 6B
 714+ 84C3 4D 67                        dw      SELECT
 715+ 84C5 48 69                        dw      EXIT
 716+ 84C7
 717+ 84C7              //  ______________________________________________________________________
 718+ 84C7              //
 719+ 84C7              // accept-      a n1 -- n2
 720+ 84C7                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 720+ 84C7             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 720+ 84C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 720+ 84C7             >
 720+ 84C7             >                // dummy db directives used to calculate length of namec
 720+ 84C7 41 43 43 45 >                db      "ACCEPT-"
 720+ 84CB 50 54 2D    >
 720+ 84CE             >len_NFA         defl    $ - temp_NFA
 720+ 84CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 720+ 84C7             >
 720+ 84C7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 720+ 84C8 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 720+ 84CC 50 54 2D    >
 720+ 84CF             >                org     $-1                 // alter last byte of Name just above to set
 720+ 84CE AD          >                db      {b $} | END_BIT     // msb as name end
 720+ 84CF             >
 720+ 84CF B0 84       >                dw      last_NFA            // Link to previous definition Name
 720+ 84D1             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 720+ 84D1 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 720+ 84D4             >
 720+ 84D4             >
 720+ 84D4             >                endif           ; ok        // for other definitions it "points" the correct handler
 720+ 84D4             >                // Use of "; ok" to suppress "warning[fwdref]"
 720+ 84D4             >
 720+ 84D4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 721+ 84D4 59 69                        dw      TO_R
 722+ 84D6 5A 6C                        dw      ZERO
 723+ 84D8 80 6A                        dw      SWAP
 724+ 84DA 8B 6A                        dw      DUP
 725+ 84DC 6B 69                        dw      R_TO
 726+ 84DE C3 69                        dw      PLUS
 727+ 84E0 80 6A                        dw      SWAP
 728+ 84E2 70 64                        dw      C_DO
 729+ 84E4              AcceptN_Loop:
 730+ 84E4 48 7B                        dw          MMU7_FETCH
 731+ 84E6 2A 67                        dw          INKEY
 732+ 84E8 80 6A 5B 7B                  dw          SWAP, MMU7_STORE
 733+ 84EC 8B 6A 85 69                  dw          DUP, ZEQUAL
 734+ 84F0 1C 64                        dw          ZBRANCH
 735+ 84F2 06 00                        dw          AcceptN_Endif_1 - $
 736+ 84F4 B8 84 57 78                  dw              VIDEO, QUIT
 737+ 84F8              AcceptN_Endif_1:
 738+ 84F8 8B 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 738+ 84FC 0D 00 C5 6E
 739+ 8500 1C 64                        dw          ZBRANCH
 740+ 8502 06 00                        dw          AcceptN_Endif_2 - $
 741+ 8504 5E 6A 5A 6C                  dw              DROP, ZERO
 742+ 8508              AcceptN_Endif_2:
 743+ 8508 8B 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 743+ 850C 0A 00 C5 6E
 744+ 8510 1C 64                        dw          ZBRANCH
 745+ 8512 06 00                        dw          AcceptN_Endif_3 - $
 746+ 8514 5E 6A 5A 6C                  dw              DROP, ZERO
 747+ 8518              AcceptN_Endif_3:
 748+ 8518 78 64 2F 6B                  dw          I, CSTORE, ONE_PLUS
 748+ 851C E0 69
 749+ 851E
 750+ 851E 78 64 23 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 750+ 8522 85 69
 751+ 8524 1C 64                        dw          ZBRANCH
 752+ 8526 06 00                        dw              AcceptN_Endif_4 - $
 753+ 8528 2F 64                        dw                  C_LEAVE     //              leave
 754+ 852A 06 00                        dw                  AcceptN_Leave - $
 755+ 852C              AcceptN_Endif_4:                                 //      endif
 756+ 852C
 757+ 852C F8 63                        dw      C_LOOP
 758+ 852E B6 FF                        dw      AcceptN_Loop -$
 759+ 8530              AcceptN_Leave:
 760+ 8530 48 69                        dw      EXIT
 761+ 8532
 762+ 8532              //  ______________________________________________________________________
 763+ 8532              //
 764+ 8532              // load-        n --
 765+ 8532              // Provided that a stream n is OPEN# via the standart BASIC
 766+ 8532              // it accepts text from stream #n to the normal INTERPRET
 767+ 8532              // up to now, text-file must end with QUIT
 768+ 8532                              Colon_Def LOAD_N, "LOAD-", is_normal
 768+ 8532             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 768+ 8532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 768+ 8532             >
 768+ 8532             >                // dummy db directives used to calculate length of namec
 768+ 8532 4C 4F 41 44 >                db      "LOAD-"
 768+ 8536 2D          >
 768+ 8537             >len_NFA         defl    $ - temp_NFA
 768+ 8537             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 768+ 8532             >
 768+ 8532 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 768+ 8533 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 768+ 8537 2D          >
 768+ 8538             >                org     $-1                 // alter last byte of Name just above to set
 768+ 8537 AD          >                db      {b $} | END_BIT     // msb as name end
 768+ 8538             >
 768+ 8538 C7 84       >                dw      last_NFA            // Link to previous definition Name
 768+ 853A             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 768+ 853A CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 768+ 853D             >
 768+ 853D             >
 768+ 853D             >                endif           ; ok        // for other definitions it "points" the correct handler
 768+ 853D             >                // Use of "; ok" to suppress "warning[fwdref]"
 768+ 853D             >
 768+ 853D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 769+ 853D 37 6E 17 6B                  dw      SOURCE_ID, STORE
 770+ 8541              Load_N_Begin:
 771+ 8541 F8 6C 0C 6B                  dw          TIB, FETCH
 772+ 8545 8B 6A A5 63                  dw          DUP, LIT, 80
 772+ 8549 50 00
 773+ 854B E0 6A 9D 73                  dw          TWO_DUP, BLANKS
 774+ 854F 37 6E 0C 6B                  dw          SOURCE_ID, FETCH
 775+ 8553 7B 79 8B 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 775+ 8557 11 7B 17 6B
 776+ 855B 4D 67                        dw          SELECT
 777+ 855D D1 84                        dw          ACCEPT_N
 778+ 855F B8 84                        dw          VIDEO
 779+ 8561 C4 6A                        dw          TWO_DROP
 780+ 8563 5A 6C 6E 6D                  dw          ZERO, BLK, STORE
 780+ 8567 17 6B
 781+ 8569 5A 6C 78 6D                  dw          ZERO, TO_IN, STORE
 781+ 856D 17 6B
 782+ 856F 92 77                        dw          INTERPRET
 783+ 8571 0B 67                        dw          QTERMINAL
 784+ 8573 1C 64                        dw      ZBRANCH
 785+ 8575 CC FF                        dw      Load_N_Begin - $
 786+ 8577 48 69                        dw      EXIT
 787+ 8579
 788+ 8579              //  ______________________________________________________________________
 789+ 8579              //
 790+ 8579              // load         n --
 791+ 8579              // if n is positive, it loads screen #n (as usual)
 792+ 8579              // if n is negative, it connects stream #n to the normal INTERPRET
 793+ 8579              // this second way is useful if you want to load any kind of file
 794+ 8579              // provied that it is OPEN# the usual BASIC way.
 795+ 8579                              Colon_Def LOAD, "LOAD", is_normal
 795+ 8579             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 795+ 8579             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 795+ 8579             >
 795+ 8579             >                // dummy db directives used to calculate length of namec
 795+ 8579 4C 4F 41 44 >                db      "LOAD"
 795+ 857D             >len_NFA         defl    $ - temp_NFA
 795+ 857D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 795+ 8579             >
 795+ 8579 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 795+ 857A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 795+ 857E             >                org     $-1                 // alter last byte of Name just above to set
 795+ 857D C4          >                db      {b $} | END_BIT     // msb as name end
 795+ 857E             >
 795+ 857E 32 85       >                dw      last_NFA            // Link to previous definition Name
 795+ 8580             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 795+ 8580 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 795+ 8583             >
 795+ 8583             >
 795+ 8583             >                endif           ; ok        // for other definitions it "points" the correct handler
 795+ 8583             >                // Use of "; ok" to suppress "warning[fwdref]"
 795+ 8583             >
 795+ 8583             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 796+ 8583 8B 6A 9F 69                  dw      DUP, ZLESS
 797+ 8587 1C 64                        dw      ZBRANCH
 798+ 8589 08 00                        dw      Load_Else - $
 799+ 858B 3A 85                        dw          LOAD_N
 800+ 858D 07 64                        dw      BRANCH
 801+ 858F 04 00                        dw      Load_Endif - $
 802+ 8591              Load_Else:
 803+ 8591 41 81                        dw          LOAD_P
 804+ 8593              Load_Endif:
 805+ 8593 48 69                        dw      EXIT
 806+ 8595
 807+ 8595
 808+ 8595              //  ______________________________________________________________________
 809+ 8595              //
 810+ 8595              // autoexec     --
 811+ 8595              // this word is called the first time the Forth system boot to
 812+ 8595              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 813+ 8595                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 813+ 8595             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 813+ 8595             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 813+ 8595             >
 813+ 8595             >                // dummy db directives used to calculate length of namec
 813+ 8595 41 55 54 4F >                db      "AUTOEXEC"
 813+ 8599 45 58 45 43 >
 813+ 859D             >len_NFA         defl    $ - temp_NFA
 813+ 859D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 813+ 8595             >
 813+ 8595 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 813+ 8596 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 813+ 859A 45 58 45 43 >
 813+ 859E             >                org     $-1                 // alter last byte of Name just above to set
 813+ 859D C3          >                db      {b $} | END_BIT     // msb as name end
 813+ 859E             >
 813+ 859E 79 85       >                dw      last_NFA            // Link to previous definition Name
 813+ 85A0             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 813+ 85A0 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 813+ 85A3             >
 813+ 85A3             >
 813+ 85A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 813+ 85A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 813+ 85A3             >
 813+ 85A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 814+ 85A3 A5 63 0B 00                  dw      LIT, 11
 815+ 85A7 A5 63 08 6C                  dw      LIT, NOOP
 816+ 85AB A5 63 A8 78                  dw      LIT, Autoexec_Ptr
 817+ 85AF 17 6B                        dw      STORE
 818+ 85B1 80 85                        dw      LOAD
 819+ 85B3 57 78                        dw      QUIT
 820+ 85B5 48 69                        dw      EXIT
 821+ 85B7
 822+ 85B7
 823+ 85B7              //  ______________________________________________________________________
 824+ 85B7              //
 825+ 85B7              // bye     --
 826+ 85B7              //
 827+ 85B7                              Colon_Def BYE, "BYE", is_normal
 827+ 85B7             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 827+ 85B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 827+ 85B7             >
 827+ 85B7             >                // dummy db directives used to calculate length of namec
 827+ 85B7 42 59 45    >                db      "BYE"
 827+ 85BA             >len_NFA         defl    $ - temp_NFA
 827+ 85BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 827+ 85B7             >
 827+ 85B7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 827+ 85B8 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 827+ 85BB             >                org     $-1                 // alter last byte of Name just above to set
 827+ 85BA C5          >                db      {b $} | END_BIT     // msb as name end
 827+ 85BB             >
 827+ 85BB 95 85       >                dw      last_NFA            // Link to previous definition Name
 827+ 85BD             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 827+ 85BD CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 827+ 85C0             >
 827+ 85C0             >
 827+ 85C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 827+ 85C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 827+ 85C0             >
 827+ 85C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 828+ 85C0 D0 7D                        dw      FLUSH
 829+ 85C2 FF 7C                        dw      EMPTY_BUFFERS
 830+ 85C4 99 7B 0C 6B                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 830+ 85C8 8F 67 5E 6A
 831+ 85CC 5A 6C CA 6C                  dw      ZERO, PLUS_ORIGIN
 832+ 85D0 40 79                        dw      BASIC
 833+ 85D2
 834+ 85D2              //  ______________________________________________________________________
 835+ 85D2              //
 836+ 85D2              // invv     --
 837+ 85D2              //
 838+ 85D2              //              Colon_Def INVV, "INVV", is_normal
 839+ 85D2              //              dw      LIT, 20, EMITC, ONE, EMITC
 840+ 85D2              //              dw      EXIT
 841+ 85D2
 842+ 85D2              //  ______________________________________________________________________
 843+ 85D2              //
 844+ 85D2              // truv     --
 845+ 85D2              //
 846+ 85D2              //              Colon_Def TRUV, "TRUV", is_normal
 847+ 85D2              //              dw      LIT, 20, EMITC, ZERO, EMITC
 848+ 85D2              //              dw      EXIT
 849+ 85D2
 850+ 85D2              //  ______________________________________________________________________
 851+ 85D2              //
 852+ 85D2              // mark     --
 853+ 85D2              //
 854+ 85D2              //              Colon_Def MARK, "MARK", is_normal
 855+ 85D2              //              dw      INVV, TYPE, TRUV
 856+ 85D2              //              dw      EXIT
 857+ 85D2
 858+ 85D2              //  ______________________________________________________________________
 859+ 85D2              //
 860+ 85D2              // back     --
 861+ 85D2              //
 862+ 85D2                              Colon_Def BACK, "BACK", is_normal
 862+ 85D2             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 862+ 85D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 862+ 85D2             >
 862+ 85D2             >                // dummy db directives used to calculate length of namec
 862+ 85D2 42 41 43 4B >                db      "BACK"
 862+ 85D6             >len_NFA         defl    $ - temp_NFA
 862+ 85D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 862+ 85D2             >
 862+ 85D2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 862+ 85D3 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 862+ 85D7             >                org     $-1                 // alter last byte of Name just above to set
 862+ 85D6 CB          >                db      {b $} | END_BIT     // msb as name end
 862+ 85D7             >
 862+ 85D7 B7 85       >                dw      last_NFA            // Link to previous definition Name
 862+ 85D9             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 862+ 85D9 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 862+ 85DC             >
 862+ 85DC             >
 862+ 85DC             >                endif           ; ok        // for other definitions it "points" the correct handler
 862+ 85DC             >                // Use of "; ok" to suppress "warning[fwdref]"
 862+ 85DC             >
 862+ 85DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 863+ 85DC 64 6E B9 6E                  dw      HERE, SUBTRACT, COMMA
 863+ 85E0 82 6E
 864+ 85E2 48 69                        dw      EXIT
 865+ 85E4
 866+ 85E4              //  ______________________________________________________________________
 867+ 85E4              //
 868+ 85E4              // if          ( -- a 2 ) \ compile-time
 869+ 85E4              // IF ... THEN
 870+ 85E4              // IF ... ELSE ... ENDIF
 871+ 85E4                              Colon_Def IF, "IF", is_immediate
 871+ 85E4             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 871+ 85E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 85E4             >
 871+ 85E4             >                // dummy db directives used to calculate length of namec
 871+ 85E4 49 46       >                db      "IF"
 871+ 85E6             >len_NFA         defl    $ - temp_NFA
 871+ 85E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 85E4             >
 871+ 85E4 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 85E5 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 871+ 85E7             >                org     $-1                 // alter last byte of Name just above to set
 871+ 85E6 C6          >                db      {b $} | END_BIT     // msb as name end
 871+ 85E7             >
 871+ 85E7 D2 85       >                dw      last_NFA            // Link to previous definition Name
 871+ 85E9             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 85E9 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 85EC             >
 871+ 85EC             >
 871+ 85EC             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 85EC             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 85EC             >
 871+ 85EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 85EC D2 70 1C 64                  dw      COMPILE, ZBRANCH
 873+ 85F0 64 6E 5A 6C                  dw      HERE, ZERO, COMMA
 873+ 85F4 82 6E
 874+ 85F6 6C 6C                        dw      TWO
 875+ 85F8 48 69                        dw      EXIT
 876+ 85FA
 877+ 85FA              //  ______________________________________________________________________
 878+ 85FA              //
 879+ 85FA              // then        ( a 2 -- ) \ compile-time
 880+ 85FA              //
 881+ 85FA                              Colon_Def THEN, "THEN", is_immediate
 881+ 85FA             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 881+ 85FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 881+ 85FA             >
 881+ 85FA             >                // dummy db directives used to calculate length of namec
 881+ 85FA 54 48 45 4E >                db      "THEN"
 881+ 85FE             >len_NFA         defl    $ - temp_NFA
 881+ 85FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 881+ 85FA             >
 881+ 85FA C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 881+ 85FB 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 881+ 85FF             >                org     $-1                 // alter last byte of Name just above to set
 881+ 85FE CE          >                db      {b $} | END_BIT     // msb as name end
 881+ 85FF             >
 881+ 85FF E4 85       >                dw      last_NFA            // Link to previous definition Name
 881+ 8601             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 881+ 8601 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 881+ 8604             >
 881+ 8604             >
 881+ 8604             >                endif           ; ok        // for other definitions it "points" the correct handler
 881+ 8604             >                // Use of "; ok" to suppress "warning[fwdref]"
 881+ 8604             >
 881+ 8604             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 882+ 8604 54 70                        dw      QCOMP
 883+ 8606 6C 6C 85 70                  dw      TWO, QPAIRS
 884+ 860A 64 6E 50 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 884+ 860E B9 6E 80 6A
 884+ 8612 17 6B
 885+ 8614 48 69                        dw      EXIT
 886+ 8616
 887+ 8616              //  ______________________________________________________________________
 888+ 8616              //
 889+ 8616              // endif       ( a 2 -- ) \ compile-time
 890+ 8616              //
 891+ 8616                              Colon_Def ENDIF, "ENDIF", is_immediate
 891+ 8616             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 891+ 8616             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 891+ 8616             >
 891+ 8616             >                // dummy db directives used to calculate length of namec
 891+ 8616 45 4E 44 49 >                db      "ENDIF"
 891+ 861A 46          >
 891+ 861B             >len_NFA         defl    $ - temp_NFA
 891+ 861B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 891+ 8616             >
 891+ 8616 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 891+ 8617 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 891+ 861B 46          >
 891+ 861C             >                org     $-1                 // alter last byte of Name just above to set
 891+ 861B C6          >                db      {b $} | END_BIT     // msb as name end
 891+ 861C             >
 891+ 861C FA 85       >                dw      last_NFA            // Link to previous definition Name
 891+ 861E             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 891+ 861E CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 891+ 8621             >
 891+ 8621             >
 891+ 8621             >                endif           ; ok        // for other definitions it "points" the correct handler
 891+ 8621             >                // Use of "; ok" to suppress "warning[fwdref]"
 891+ 8621             >
 891+ 8621             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 892+ 8621 01 86                        dw      THEN
 893+ 8623 48 69                        dw      EXIT
 894+ 8625
 895+ 8625              //  ______________________________________________________________________
 896+ 8625              //
 897+ 8625              // else        ( a1 2 -- a2 2 ) \ compile-time
 898+ 8625              //
 899+ 8625                              Colon_Def ELSE, "ELSE", is_immediate
 899+ 8625             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 899+ 8625             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ 8625             >
 899+ 8625             >                // dummy db directives used to calculate length of namec
 899+ 8625 45 4C 53 45 >                db      "ELSE"
 899+ 8629             >len_NFA         defl    $ - temp_NFA
 899+ 8629             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ 8625             >
 899+ 8625 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ 8626 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 899+ 862A             >                org     $-1                 // alter last byte of Name just above to set
 899+ 8629 C5          >                db      {b $} | END_BIT     // msb as name end
 899+ 862A             >
 899+ 862A 16 86       >                dw      last_NFA            // Link to previous definition Name
 899+ 862C             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 862C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 899+ 862F             >
 899+ 862F             >
 899+ 862F             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 862F             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 862F             >
 899+ 862F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 862F 54 70                        dw      QCOMP
 901+ 8631 6C 6C 85 70                  dw      TWO, QPAIRS
 902+ 8635 D2 70 07 64                  dw      COMPILE, BRANCH
 903+ 8639 64 6E 5A 6C                  dw      HERE, ZERO, COMMA
 903+ 863D 82 6E
 904+ 863F 80 6A 6C 6C                  dw      SWAP, TWO, THEN
 904+ 8643 01 86
 905+ 8645 6C 6C                        dw      TWO
 906+ 8647 48 69                        dw      EXIT
 907+ 8649
 908+ 8649              //  ______________________________________________________________________
 909+ 8649              //
 910+ 8649              // begin        ( -- a 1 ) \ compile-time
 911+ 8649              // BEGIN ... AGAIN
 912+ 8649              // BEGIN ... f UNTIL
 913+ 8649              // BEGIN ... f WHILE ... REPEAT
 914+ 8649                              Colon_Def BEGIN, "BEGIN", is_immediate
 914+ 8649             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 914+ 8649             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 914+ 8649             >
 914+ 8649             >                // dummy db directives used to calculate length of namec
 914+ 8649 42 45 47 49 >                db      "BEGIN"
 914+ 864D 4E          >
 914+ 864E             >len_NFA         defl    $ - temp_NFA
 914+ 864E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 914+ 8649             >
 914+ 8649 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 914+ 864A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 914+ 864E 4E          >
 914+ 864F             >                org     $-1                 // alter last byte of Name just above to set
 914+ 864E CE          >                db      {b $} | END_BIT     // msb as name end
 914+ 864F             >
 914+ 864F 25 86       >                dw      last_NFA            // Link to previous definition Name
 914+ 8651             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 914+ 8651 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 914+ 8654             >
 914+ 8654             >
 914+ 8654             >                endif           ; ok        // for other definitions it "points" the correct handler
 914+ 8654             >                // Use of "; ok" to suppress "warning[fwdref]"
 914+ 8654             >
 914+ 8654             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 915+ 8654 54 70                        dw      QCOMP
 916+ 8656 64 6E                        dw      HERE
 917+ 8658 6C 6C                        dw      TWO
 918+ 865A 48 69                        dw      EXIT
 919+ 865C
 920+ 865C              //  ______________________________________________________________________
 921+ 865C              //
 922+ 865C              // again        ( a 1 -- ) \ compile-time
 923+ 865C                              Colon_Def AGAIN, "AGAIN", is_immediate
 923+ 865C             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 923+ 865C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 923+ 865C             >
 923+ 865C             >                // dummy db directives used to calculate length of namec
 923+ 865C 41 47 41 49 >                db      "AGAIN"
 923+ 8660 4E          >
 923+ 8661             >len_NFA         defl    $ - temp_NFA
 923+ 8661             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 923+ 865C             >
 923+ 865C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 923+ 865D 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 923+ 8661 4E          >
 923+ 8662             >                org     $-1                 // alter last byte of Name just above to set
 923+ 8661 CE          >                db      {b $} | END_BIT     // msb as name end
 923+ 8662             >
 923+ 8662 49 86       >                dw      last_NFA            // Link to previous definition Name
 923+ 8664             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 923+ 8664 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 923+ 8667             >
 923+ 8667             >
 923+ 8667             >                endif           ; ok        // for other definitions it "points" the correct handler
 923+ 8667             >                // Use of "; ok" to suppress "warning[fwdref]"
 923+ 8667             >
 923+ 8667             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 924+ 8667 54 70                        dw      QCOMP
 925+ 8669 6C 6C 85 70                  dw      TWO, QPAIRS
 926+ 866D D2 70 07 64                  dw      COMPILE, BRANCH
 927+ 8671 D9 85                        dw      BACK
 928+ 8673 48 69                        dw      EXIT
 929+ 8675
 930+ 8675              //  ______________________________________________________________________
 931+ 8675              //
 932+ 8675              // until        ( a 1 -- ) \ compile-time
 933+ 8675                              Colon_Def UNTIL, "UNTIL", is_immediate
 933+ 8675             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 933+ 8675             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ 8675             >
 933+ 8675             >                // dummy db directives used to calculate length of namec
 933+ 8675 55 4E 54 49 >                db      "UNTIL"
 933+ 8679 4C          >
 933+ 867A             >len_NFA         defl    $ - temp_NFA
 933+ 867A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ 8675             >
 933+ 8675 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ 8676 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 933+ 867A 4C          >
 933+ 867B             >                org     $-1                 // alter last byte of Name just above to set
 933+ 867A CC          >                db      {b $} | END_BIT     // msb as name end
 933+ 867B             >
 933+ 867B 5C 86       >                dw      last_NFA            // Link to previous definition Name
 933+ 867D             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 867D CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 8680             >
 933+ 8680             >
 933+ 8680             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 8680             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 8680             >
 933+ 8680             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 8680 54 70                        dw      QCOMP
 935+ 8682 6C 6C 85 70                  dw      TWO, QPAIRS
 936+ 8686 D2 70 1C 64                  dw      COMPILE, ZBRANCH
 937+ 868A D9 85                        dw      BACK
 938+ 868C 48 69                        dw      EXIT
 939+ 868E
 940+ 868E              //  ______________________________________________________________________
 941+ 868E              //
 942+ 868E              // end          ( a 1 -- ) \ compile-time
 943+ 868E                              Colon_Def END, "END", is_immediate
 943+ 868E             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 943+ 868E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 943+ 868E             >
 943+ 868E             >                // dummy db directives used to calculate length of namec
 943+ 868E 45 4E 44    >                db      "END"
 943+ 8691             >len_NFA         defl    $ - temp_NFA
 943+ 8691             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 943+ 868E             >
 943+ 868E C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 943+ 868F 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 943+ 8692             >                org     $-1                 // alter last byte of Name just above to set
 943+ 8691 C4          >                db      {b $} | END_BIT     // msb as name end
 943+ 8692             >
 943+ 8692 75 86       >                dw      last_NFA            // Link to previous definition Name
 943+ 8694             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 943+ 8694 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 943+ 8697             >
 943+ 8697             >
 943+ 8697             >                endif           ; ok        // for other definitions it "points" the correct handler
 943+ 8697             >                // Use of "; ok" to suppress "warning[fwdref]"
 943+ 8697             >
 943+ 8697             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 944+ 8697 7D 86                        dw      UNTIL
 945+ 8699 48 69                        dw      EXIT
 946+ 869B
 947+ 869B              //  ______________________________________________________________________
 948+ 869B              //
 949+ 869B              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 950+ 869B                              Colon_Def WHILE, "WHILE", is_immediate
 950+ 869B             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 950+ 869B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 950+ 869B             >
 950+ 869B             >                // dummy db directives used to calculate length of namec
 950+ 869B 57 48 49 4C >                db      "WHILE"
 950+ 869F 45          >
 950+ 86A0             >len_NFA         defl    $ - temp_NFA
 950+ 86A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 950+ 869B             >
 950+ 869B C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 950+ 869C 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 950+ 86A0 45          >
 950+ 86A1             >                org     $-1                 // alter last byte of Name just above to set
 950+ 86A0 C5          >                db      {b $} | END_BIT     // msb as name end
 950+ 86A1             >
 950+ 86A1 8E 86       >                dw      last_NFA            // Link to previous definition Name
 950+ 86A3             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 950+ 86A3 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 950+ 86A6             >
 950+ 86A6             >
 950+ 86A6             >                endif           ; ok        // for other definitions it "points" the correct handler
 950+ 86A6             >                // Use of "; ok" to suppress "warning[fwdref]"
 950+ 86A6             >
 950+ 86A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 951+ 86A6 E9 85                        dw      IF
 952+ 86A8              //              dw      TWO_PLUS // ( that is 4 )
 953+ 86A8 D0 6A                        dw      TWO_SWAP
 954+ 86AA 48 69                        dw      EXIT
 955+ 86AC
 956+ 86AC              //  ______________________________________________________________________
 957+ 86AC              //
 958+ 86AC              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 959+ 86AC                              Colon_Def REPEAT, "REPEAT", is_immediate
 959+ 86AC             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 959+ 86AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 959+ 86AC             >
 959+ 86AC             >                // dummy db directives used to calculate length of namec
 959+ 86AC 52 45 50 45 >                db      "REPEAT"
 959+ 86B0 41 54       >
 959+ 86B2             >len_NFA         defl    $ - temp_NFA
 959+ 86B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 959+ 86AC             >
 959+ 86AC C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 959+ 86AD 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 959+ 86B1 41 54       >
 959+ 86B3             >                org     $-1                 // alter last byte of Name just above to set
 959+ 86B2 D4          >                db      {b $} | END_BIT     // msb as name end
 959+ 86B3             >
 959+ 86B3 9B 86       >                dw      last_NFA            // Link to previous definition Name
 959+ 86B5             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 959+ 86B5 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 959+ 86B8             >
 959+ 86B8             >
 959+ 86B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 959+ 86B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 959+ 86B8             >
 959+ 86B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 960+ 86B8 64 86                        dw      AGAIN
 961+ 86BA              //              dw      TWO_MINUS
 962+ 86BA 01 86                        dw      THEN
 963+ 86BC 48 69                        dw      EXIT
 964+ 86BE
 965+ 86BE              //  ______________________________________________________________________
 966+ 86BE              //
 967+ 86BE              // ?do-
 968+ 86BE              // special version of "BACK" used by ?DO and LOOP
 969+ 86BE                              Colon_Def C_DO_BACK, "?DO-", is_normal
 969+ 86BE             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 969+ 86BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 969+ 86BE             >
 969+ 86BE             >                // dummy db directives used to calculate length of namec
 969+ 86BE 3F 44 4F 2D >                db      "?DO-"
 969+ 86C2             >len_NFA         defl    $ - temp_NFA
 969+ 86C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 969+ 86BE             >
 969+ 86BE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 969+ 86BF 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 969+ 86C3             >                org     $-1                 // alter last byte of Name just above to set
 969+ 86C2 AD          >                db      {b $} | END_BIT     // msb as name end
 969+ 86C3             >
 969+ 86C3 AC 86       >                dw      last_NFA            // Link to previous definition Name
 969+ 86C5             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 969+ 86C5 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 969+ 86C8             >
 969+ 86C8             >
 969+ 86C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 969+ 86C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 969+ 86C8             >
 969+ 86C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 970+ 86C8 D9 85                        dw      BACK
 971+ 86CA              CDoBack_Begin:
 972+ 86CA 18 69 EA 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 972+ 86CE 0C 6B B9 6E
 973+ 86D2 1C 64                        dw      ZBRANCH
 974+ 86D4 0A 00                        dw      CDoBack_While - $
 975+ 86D6 F4 69 01 86                  dw          TWO_PLUS, THEN
 976+ 86DA 07 64                        dw      BRANCH
 977+ 86DC EE FF                        dw      CDoBack_Begin - $
 978+ 86DE              CDoBack_While:
 979+ 86DE 99 70 EA 6D                  dw      QCSP, CSP, STORE
 979+ 86E2 17 6B
 980+ 86E4 48 69                        dw      EXIT
 981+ 86E6
 982+ 86E6              //  ______________________________________________________________________
 983+ 86E6              //
 984+ 86E6              // do
 985+ 86E6              // DO  ... LOOP
 986+ 86E6              // DO  ... n +LOOP
 987+ 86E6              // ?DO ... LOOP
 988+ 86E6              // ?DO ... n +LOOP
 989+ 86E6                              Colon_Def DO, "DO", is_immediate
 989+ 86E6             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 989+ 86E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 989+ 86E6             >
 989+ 86E6             >                // dummy db directives used to calculate length of namec
 989+ 86E6 44 4F       >                db      "DO"
 989+ 86E8             >len_NFA         defl    $ - temp_NFA
 989+ 86E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 989+ 86E6             >
 989+ 86E6 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 989+ 86E7 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 989+ 86E9             >                org     $-1                 // alter last byte of Name just above to set
 989+ 86E8 CF          >                db      {b $} | END_BIT     // msb as name end
 989+ 86E9             >
 989+ 86E9 BE 86       >                dw      last_NFA            // Link to previous definition Name
 989+ 86EB             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 989+ 86EB CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 989+ 86EE             >
 989+ 86EE             >
 989+ 86EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 989+ 86EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 989+ 86EE             >
 989+ 86EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 990+ 86EE D2 70 70 64                  dw      COMPILE, C_DO
 991+ 86F2 EA 6D 0C 6B                  dw      CSP, FETCH, STORE_CSP
 991+ 86F6 25 70
 992+ 86F8 64 6E 75 6C                  dw      HERE, THREE
 993+ 86FC 48 69                        dw      EXIT
 994+ 86FE
 995+ 86FE              //  ______________________________________________________________________
 996+ 86FE              //
 997+ 86FE              // loop
 998+ 86FE                              Colon_Def LOOP, "LOOP", is_immediate
 998+ 86FE             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 998+ 86FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 998+ 86FE             >
 998+ 86FE             >                // dummy db directives used to calculate length of namec
 998+ 86FE 4C 4F 4F 50 >                db      "LOOP"
 998+ 8702             >len_NFA         defl    $ - temp_NFA
 998+ 8702             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 998+ 86FE             >
 998+ 86FE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 998+ 86FF 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 998+ 8703             >                org     $-1                 // alter last byte of Name just above to set
 998+ 8702 D0          >                db      {b $} | END_BIT     // msb as name end
 998+ 8703             >
 998+ 8703 E6 86       >                dw      last_NFA            // Link to previous definition Name
 998+ 8705             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 998+ 8705 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 998+ 8708             >
 998+ 8708             >
 998+ 8708             >                endif           ; ok        // for other definitions it "points" the correct handler
 998+ 8708             >                // Use of "; ok" to suppress "warning[fwdref]"
 998+ 8708             >
 998+ 8708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 999+ 8708 75 6C 85 70                  dw      THREE, QPAIRS
1000+ 870C D2 70 F8 63                  dw      COMPILE, C_LOOP
1001+ 8710 C5 86                        dw      C_DO_BACK
1002+ 8712 48 69                        dw      EXIT
1003+ 8714
1004+ 8714              //  ______________________________________________________________________
1005+ 8714              //
1006+ 8714              // +loop
1007+ 8714                              Colon_Def PLOOP, "+LOOP", is_immediate
1007+ 8714             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1007+ 8714             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 8714             >
1007+ 8714             >                // dummy db directives used to calculate length of namec
1007+ 8714 2B 4C 4F 4F >                db      "+LOOP"
1007+ 8718 50          >
1007+ 8719             >len_NFA         defl    $ - temp_NFA
1007+ 8719             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 8714             >
1007+ 8714 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 8715 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1007+ 8719 50          >
1007+ 871A             >                org     $-1                 // alter last byte of Name just above to set
1007+ 8719 D0          >                db      {b $} | END_BIT     // msb as name end
1007+ 871A             >
1007+ 871A FE 86       >                dw      last_NFA            // Link to previous definition Name
1007+ 871C             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 871C CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 871F             >
1007+ 871F             >
1007+ 871F             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 871F             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 871F             >
1007+ 871F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 871F 75 6C 85 70                  dw      THREE, QPAIRS
1009+ 8723 D2 70 C3 63                  dw      COMPILE, C_PLOOP
1010+ 8727 C5 86                        dw      C_DO_BACK
1011+ 8729 48 69                        dw      EXIT
1012+ 872B
1013+ 872B              //  ______________________________________________________________________
1014+ 872B              //
1015+ 872B              // ?do
1016+ 872B                              Colon_Def QDO, "?DO", is_immediate
1016+ 872B             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1016+ 872B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1016+ 872B             >
1016+ 872B             >                // dummy db directives used to calculate length of namec
1016+ 872B 3F 44 4F    >                db      "?DO"
1016+ 872E             >len_NFA         defl    $ - temp_NFA
1016+ 872E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1016+ 872B             >
1016+ 872B C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1016+ 872C 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1016+ 872F             >                org     $-1                 // alter last byte of Name just above to set
1016+ 872E CF          >                db      {b $} | END_BIT     // msb as name end
1016+ 872F             >
1016+ 872F 14 87       >                dw      last_NFA            // Link to previous definition Name
1016+ 8731             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1016+ 8731 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1016+ 8734             >
1016+ 8734             >
1016+ 8734             >                endif           ; ok        // for other definitions it "points" the correct handler
1016+ 8734             >                // Use of "; ok" to suppress "warning[fwdref]"
1016+ 8734             >
1016+ 8734             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1017+ 8734 D2 70 45 64                  dw      COMPILE, C_Q_DO
1018+ 8738 EA 6D 0C 6B                  dw      CSP, FETCH, STORE_CSP
1018+ 873C 25 70
1019+ 873E 64 6E 5A 6C                  dw      HERE, ZERO, COMMA, ZERO
1019+ 8742 82 6E 5A 6C
1020+ 8746 64 6E 75 6C                  dw      HERE, THREE
1021+ 874A 48 69                        dw      EXIT
1022+ 874C
1023+ 874C              Latest_Definition:
1024+ 874C              //  ______________________________________________________________________
1025+ 874C              //
1026+ 874C              // \
1027+ 874C                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1027+ 874C             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1027+ 874C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 874C             >
1027+ 874C             >                // dummy db directives used to calculate length of namec
1027+ 874C 5C          >                db      "\\"
1027+ 874D             >len_NFA         defl    $ - temp_NFA
1027+ 874D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 874C             >
1027+ 874C C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 874D 5C          >                db      "\\"               // name string in 7-bit ascii, but
1027+ 874E             >                org     $-1                 // alter last byte of Name just above to set
1027+ 874D DC          >                db      {b $} | END_BIT     // msb as name end
1027+ 874E             >
1027+ 874E 2B 87       >                dw      last_NFA            // Link to previous definition Name
1027+ 8750             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 8750 CD E1 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1027+ 8753             >
1027+ 8753             >
1027+ 8753             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 8753             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 8753             >
1027+ 8753             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 8753 6E 6D 0C 6B                  dw      BLK, FETCH
1029+ 8757 1C 64                        dw      ZBRANCH
1030+ 8759 30 00                        dw      Backslash_Else_1 - $
1031+ 875B 6E 6D 0C 6B                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1031+ 875F 63 6C FA 6E
1032+ 8763 1C 64                        dw          ZBRANCH
1033+ 8765 18 00                        dw          Backslash_Else_2 - $
1034+ 8767 78 6D 0C 6B                  dw              TO_IN, FETCH, CL, MOD, CL
1034+ 876B 94 6C 6B 7A
1034+ 876F 94 6C
1035+ 8771 80 6A B9 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1035+ 8775 78 6D ED 6A
1036+ 8779 07 64                        dw          BRANCH
1037+ 877B 0A 00                        dw          Backslash_Endif_2 - $
1038+ 877D              Backslash_Else_2:
1039+ 877D A1 6C 0D 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1039+ 8781 78 6D 17 6B
1040+ 8785              Backslash_Endif_2:
1041+ 8785 07 64                        dw      BRANCH
1042+ 8787 0A 00                        dw      Backslash_Endif_1 - $
1043+ 8789              Backslash_Else_1:
1044+ 8789 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1044+ 878D 78 6D 17 6B
1045+ 8791              Backslash_Endif_1:
1046+ 8791 48 69                        dw      EXIT
1047+ 8793
1048+ 8793              Fence_Word:
1049+ 8793              //  ______________________________________________________________________
1050+ 8793              //
1051+ 8793
1052+ 8793 00           Here_Dictionary db      0
1053+ 8794
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  8794
 116  8794              // now we save the compiled file so we can either run it or debug it
 117  8794                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  8794                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  8794                              SAVENEX CFG  0
 120  8794                              SAVENEX BANK 2, 0
 121  8794                              SAVENEX AUTO
 122  8794                              SAVENEX CLOSE
 123  8794
 124  8794              //              PAGE 7 ;set 7 page to current slot
 125  8794              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  8794              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  8794
 128  8794                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  8794
 130  8794                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  8794
 132  8794                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
