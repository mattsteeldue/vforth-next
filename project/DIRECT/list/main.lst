# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.52 NextZXOS version
   7  0000              //  build 20230106
   8  0000              //
   9  0000              //  Direct-Thread version.
  10  0000              //
  11  0000              //  NextZXOS version
  12  0000              //  ______________________________________________________________________
  13  0000              //
  14  0000              //  This work is available as-is with no whatsoever warranty.
  15  0000              //  Copying, modifying and distributing this software is allowed
  16  0000              //  provided that the copyright notice is kept.
  17  0000              //  ______________________________________________________________________
  18  0000              //
  19  0000              //  by Matteo Vitturi, 1990-2022
  20  0000              //
  21  0000              //  https://sites.google.com/view/vforth/vforth15-next
  22  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  23  0000              //
  24  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  25  0000              //  Each line of this source list mustn't exceed 80 bytes.
  26  0000              //  Z80N (ZX Spectrum Next) extension is available.
  27  0000              //
  28  0000              //  This list has been tested using the following configuration:
  29  0000              //      - CSpect emulator V.2.12.30
  30  0000              //  ______________________________________________________________________
  31  0000              //
  32  0000              //  Z80 Registers usage map
  33  0000              //
  34  0000              //  AF
  35  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  36  0000              //  DE - Working
  37  0000              //  HL - Working
  38  0000              //
  39  0000              //  AF'- Sometime used for backup purpose
  40  0000              //  BC'- Not used
  41  0000              //  DE'- Not used
  42  0000              //  HL'- Not used: (saved at startup)
  43  0000              //
  44  0000              //  SP - Calculator Stack Pointer
  45  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  46  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  47  0000              //
  48  0000              //  ______________________________________________________________________
  49  0000              //
  50  0000              //  _________________
  51  0000              //
  52  0000              //  FORTH DEFINITIONS
  53  0000              //  _________________
  54  0000
  55  0000                              OPT     --zxnext
  56  0000              //  ______________________________________________________________________
  57  0000              //
  58  0000              // this controls some debugging code in L0.asm
  59  0000              //  0 for final binary release.
  60  0000              //  1 for debugging with Visual Studio Code and DeZog
  61  0000              // -1 for for binary comparison with Forth generated code.
  62  0000              DEBUGGING       equ     -1
  63  0000              //
  64  0000              //  ______________________________________________________________________
  65  0000
  66  0000                              if ( -1 == DEBUGGING )
  67  0000              ORIGIN          equ     $62E6                   // for binary comparison
  68  0000              //ORIGIN          equ     $8CC1                   // for binary comparison
  69  0000                              endif
  70  0000              //  ______________________________________________________________________
  71  0000
  72  0000                              if (  0 == DEBUGGING )
  73  0000 ~            ORIGIN          equ     $6366                   // binary and Tape
  74  0000                              endif
  75  0000              //  ______________________________________________________________________
  76  0000
  77  0000                              if (  1 == DEBUGGING )
  78  0000 ~            ORIGIN          equ     $8080                   // for DeZog
  79  0000                              endif
  80  0000              //  ______________________________________________________________________
  81  0000
  82  0000                              DEVICE  ZXSPECTRUMNEXT
  83  0000
  84  0000                              ORG     ORIGIN
  85  62E6
  86  62E6                              if ( -1 == DEBUGGING )
  87  62E6 00 00 00...                  ds 128                            // for binary comparison
  88  62EA                              endif
  89  6366
  90  6366              //  ______________________________________________________________________
  91  6366              //
  92  6366              //  Naming convention for Label vs Forth correspondance
  93  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
  94  6366              //    - Leading "0" is converted into "Z_"
  95  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
  96  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
  97  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
  98  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
  99  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 100  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 101  6366              //    - Equal sign "=" is converted in EQUAL
 102  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 103  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 104  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 105  6366              //    - Exclamation mark "!" is converted in STORE
 106  6366              //    - At-Sign "@" is converted in FETCH
 107  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 108  6366
 109  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE:
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366
  22+ 6366              //  ______________________________________________________________________
  23+ 6366              //
  24+ 6366              // Flag constants
  25+ 6366              TRUE_FLAG       equ     $FFFF
  26+ 6366              FALSE_FLAG      equ     $0000
  27+ 6366
  28+ 6366              //  ______________________________________________________________________
  29+ 6366              //
  30+ 6366              // Ascii char constants
  31+ 6366              NUL_CHAR        equ     $00
  32+ 6366              COMMA_CHAR      equ     $06
  33+ 6366              BACKSPACE_CHAR  equ     $08
  34+ 6366              CR_CHAR         equ     $0D
  35+ 6366              BLANK_CHAR      equ     $20
  36+ 6366              QUOTE_CHAR      equ     "'"
  37+ 6366              DQUOTE_CHAR     equ     '"'
  38+ 6366              UNDERSCORE_CHAR equ     $5F
  39+ 6366              SOLIDBLOCK_CHAR equ     $8F
  40+ 6366              HALFBLOCK_CHAR  equ     $8C
  41+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  42+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  43+ 6366
  44+ 6366
  45+ 6366              //  ______________________________________________________________________
  46+ 6366              //
  47+ 6366
  48+ 6366                              // emulate something like:  ld hl,rp
  49+ 6366              ldhlrp          macro
  50+ 6366 ~                            ld      hl,(RP_Pointer)
  51+ 6366                              endm
  52+ 6366
  53+ 6366                              // emulate something like:  ld rp,hl
  54+ 6366              ldrphl          macro
  55+ 6366 ~                            ld      (RP_Pointer),hl
  56+ 6366                              endm
  57+ 6366
  58+ 6366              //  ______________________________________________________________________
  59+ 6366              //
  60+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  61+ 6366              next            macro
  62+ 6366 ~                            jp      (ix)
  63+ 6366                              endm
  64+ 6366
  65+ 6366              psh1            macro
  66+ 6366 ~                            push    hl
  67+ 6366 ~                            jp      (ix)
  68+ 6366                              endm
  69+ 6366
  70+ 6366              psh2            macro
  71+ 6366 ~                            push    de
  72+ 6366 ~                            push    hl
  73+ 6366 ~                            jp      (ix)
  74+ 6366                              endm
  75+ 6366
  76+ 6366              //  ______________________________________________________________________
  77+ 6366              //
  78+ 6366              // Bit constants in length-byte
  79+ 6366
  80+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  81+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  82+ 6366              END_BIT         equ     %10000000               // $80
  83+ 6366
  84+ 6366
  85+ 6366              //  ______________________________________________________________________
  86+ 6366              //
  87+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  88+ 6366              //  pointers
  89+ 6366              temp_NFA        defl    0
  90+ 6366              last_NFA        defl    0
  91+ 6366              len_NFA         defl    0
  92+ 6366
  93+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
  94+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
  95+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
  96+ 6366
  97+ 6366              //  ______________________________________________________________________
  98+ 6366              //
  99+ 6366              //  Create a new "low-level" definition
 100+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 101+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 102+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 103+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 104+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 105+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 106+ 6366              //  This macro acts much like the standard Forth definition CREATE
 107+ 6366
 108+ 6366              New_Def         macro   label, namec, runcode, bits
 109+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 6366 ~
 111+ 6366 ~                            // dummy db directives used to calculate length of namec
 112+ 6366 ~                            db      namec
 113+ 6366 ~            len_NFA         defl    $ - temp_NFA
 114+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 115+ 6366 ~
 116+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 117+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 118+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 119+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 120+ 6366 ~
 121+ 6366 ~                            dw      last_NFA            // Link to previous definition Name
 122+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 124+ 6366 ~
 125+ 6366 ~
 126+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6366 ~
 129+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 130+ 6366                              endm
 131+ 6366
 132+ 6366              //  ______________________________________________________________________
 133+ 6366              //
 134+ 6366              // Create a "constant"
 135+ 6366              // The constant value is compiled in first PFA cell
 136+ 6366              Constant_Def    macro   label, namec, constant_value
 137+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 138+ 6366 ~                            dw      constant_value
 139+ 6366                              endm
 140+ 6366
 141+ 6366              //  ______________________________________________________________________
 142+ 6366              //
 143+ 6366              // Create a "variable"
 144+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 145+ 6366              // this allow creation of "variables" which content is  of any length
 146+ 6366              Variable_Def    macro   label, namec, initial_value
 147+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 148+ 6366 ~                            dw      initial_value
 149+ 6366                              endm
 150+ 6366
 151+ 6366              //  ______________________________________________________________________
 152+ 6366              //
 153+ 6366              // Create a "user"
 154+ 6366              // It uses a single byte as offset to calculate the address of the variable
 155+ 6366              User_Def        macro   label, namec, offset_value
 156+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 157+ 6366 ~                            db      offset_value
 158+ 6366                              endm
 159+ 6366
 160+ 6366              //  ______________________________________________________________________
 161+ 6366              //
 162+ 6366              // Create a "colon-definition"
 163+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 164+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 165+ 6366              Colon_Def       macro   label, namec, bits
 166+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 167+ 6366                              endm
 168+ 6366
 169+ 6366              //  ______________________________________________________________________
 170+ 6366              //
 171+ 6366
 172+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 173+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 174+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 175+ 6366              USER_system:    equ     $D188               // User variables zone.
 176+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 177+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 178+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/system.asm
 110  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366
   9+ 6366              Cold_origin:
  10+ 6366 A7                           and     a
  11+ 6367 C3 F3 78                     jp      ColdRoutine
  12+ 636A              Warm_origin:
  13+ 636A 37                           scf
  14+ 636B C3 F3 78                     jp      WarmRoutine
  15+ 636E
  16+ 636E              // +008
  17+ 636E E6 D0        SP_Basic:       dw      $D0E6               // These are bits with some "standard" meaning... 0101
  18+ 6370
  19+ 6370              // +00A
  20+ 6370 00 0E                        dw      $0E00
  21+ 6372
  22+ 6372              // +00C
  23+ 6372 25 87        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  24+ 6374
  25+ 6374              // +00E
  26+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  27+ 6376
  28+ 6376              // +010
  29+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  30+ 6378
  31+ 6378              // +012
  32+ 6378 E8 D0        S0_origin:      dw      S0_system
  33+ 637A 88 D1        R0_origin:      dw      R0_system
  34+ 637C E8 D0        TIB_origin:     dw      TIB_system
  35+ 637E 1F 00        WIDTH_origin:   dw      31
  36+ 6380 01 00        WARNING_origin: dw      1
  37+ 6382 6C 87        FENCE_origin:   dw      Fence_Word
  38+ 6384 6C 87        DP_origin       dw      Fence_Word
  39+ 6386 FB 77        VOCLINK_origin: dw      Voclink_Ptr
  40+ 6388 E4 D1                        dw      FIRST_system
  41+ 638A 00 E0                        dw      LIMIT_system
  42+ 638C
  43+ 638C              // +026
  44+ 638C 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638D 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 638E 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 638F 00                           db      0
  48+ 6390
  49+ 6390              // +02A
  50+ 6390 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  51+ 6392
  52+ 6392              // +02C
  53+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP dufing NextOS call
  54+ 6394
  55+ 6394              // +02E
  56+ 6394 88 D1        USER_Pointer:   dw      USER_system
  57+ 6396
  58+ 6396              // +030
  59+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  60+ 6398
  61+ 6398              // +32
  62+ 6398              // SP_Basic        dw      0
  63+ 6398
  64+ 6398
  65+ 6398              //  ______________________________________________________________________
  66+ 6398
  67+ 6398              // from this point we can use LDHLRP and LDRPHL Assembler macros
  68+ 6398              // instead of their equivalent long sequences.
  69+ 6398
  70+ 6398              //  ______________________________________________________________________
  71+ 6398
  72+ 6398              // address for "next" - inner interpreter
  73+ 6398              // This address must always be pointed by IX
  74+ 6398              // "next" macro simply does a  jp(ix)  instruction
  75+ 6398
  76+ 6398              // Psh2_Ptr:       push    de
  77+ 6398              // Psh1_Ptr:       push    hl
  78+ 6398
  79+ 6398              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  80+ 6398
  81+ 6398                              if ( 1 == DEBUGGING )
  82+ 6398 ~                            ld      hl, Next_Breakpoint_1
  83+ 6398 ~                            and     a
  84+ 6398 ~                            sbc     hl, bc
  85+ 6398 ~                            jr      nz, Next_Continue
  86+ 6398 ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  87+ 6398                              endif
  88+ 6398
  89+ 6398              Next_Continue:
  90+ 6398 0A                           ld      a, (bc)
  91+ 6399 03                           inc     bc
  92+ 639A 6F                           ld      l, a
  93+ 639B 0A                           ld      a, (bc)
  94+ 639C 03                           inc     bc
  95+ 639D 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
  96+ 639E
  97+ 639E              // Execute xt i.e. CFA held in HL
  98+ 639E              Exec_Ptr:
  99+ 639E
 100+ 639E
 101+ 639E
 102+ 639E
 103+ 639E E9                           jp      (hl)                // and jump to it
 104+ 639F                                                          // there you'll find the real code or a CALL to a ;code part
 105+ 639F
 106+ 639F              //  ______________________________________________________________________
 107+ 639F              //
 108+ 639F              // lit          -- x
 109+ 639F              // puts on top of stack the value of the following word.
 110+ 639F              // it is compiled in colon definition before a literal number
 111+ 639F
 112+ 639F                              New_Def  LIT, "LIT", is_code, is_normal
 112+ 639F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 112+ 639F             >
 112+ 639F             >                // dummy db directives used to calculate length of namec
 112+ 639F 4C 49 54    >                db      "LIT"
 112+ 63A2             >len_NFA         defl    $ - temp_NFA
 112+ 63A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 112+ 639F             >
 112+ 639F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 112+ 63A0 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 112+ 63A3             >                org     $-1                 // alter last byte of Name just above to set
 112+ 63A2 D4          >                db      {b $} | END_BIT     // msb as name end
 112+ 63A3             >
 112+ 63A3 00 00       >                dw      last_NFA            // Link to previous definition Name
 112+ 63A5             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 112+ 63A5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 112+ 63A5 ~           >
 112+ 63A5 ~           >
 112+ 63A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 112+ 63A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 112+ 63A5             >
 112+ 63A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 113+ 63A5
 114+ 63A5 0A                           ld      a, (bc)
 115+ 63A6 03                           inc     bc
 116+ 63A7 6F                           ld      l, a
 117+ 63A8 0A                           ld      a, (bc)
 118+ 63A9 03                           inc     bc
 119+ 63AA 67                           ld      h, a
 120+ 63AB                              psh1
 120+ 63AB E5          >                push    hl
 120+ 63AC DD E9       >                jp      (ix)
 121+ 63AE
 122+ 63AE              //  ______________________________________________________________________
 123+ 63AE              //
 124+ 63AE              // execute      i*x xt -- j*x
 125+ 63AE              // execution token. usually xt is given by CFA
 126+ 63AE
 127+ 63AE                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 127+ 63AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 63AE             >
 127+ 63AE             >                // dummy db directives used to calculate length of namec
 127+ 63AE 45 58 45 43 >                db      "EXECUTE"
 127+ 63B2 55 54 45    >
 127+ 63B5             >len_NFA         defl    $ - temp_NFA
 127+ 63B5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 63AE             >
 127+ 63AE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 63AF 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 127+ 63B3 55 54 45    >
 127+ 63B6             >                org     $-1                 // alter last byte of Name just above to set
 127+ 63B5 C5          >                db      {b $} | END_BIT     // msb as name end
 127+ 63B6             >
 127+ 63B6 9F 63       >                dw      last_NFA            // Link to previous definition Name
 127+ 63B8             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 63B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 127+ 63B8 ~           >
 127+ 63B8 ~           >
 127+ 63B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 63B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 63B8             >
 127+ 63B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 63B8 C9                           ret
 129+ 63B9              //              pop     hl
 130+ 63B9              //              jp      (hl)
 131+ 63B9              //              jr      Exec_Ptr
 132+ 63B9
 133+ 63B9
 134+ 63B9              //  ______________________________________________________________________
 135+ 63B9              //
 136+ 63B9              // (+loop)       --
 137+ 63B9              // compiled by +LOOP. it uses the top two values of return-stack to
 138+ 63B9              // keep track of index and limit, they are accessed via I and I'
 139+ 63B9                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 139+ 63B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 139+ 63B9             >
 139+ 63B9             >                // dummy db directives used to calculate length of namec
 139+ 63B9 28 2B 4C 4F >                db      "(+LOOP)"
 139+ 63BD 4F 50 29    >
 139+ 63C0             >len_NFA         defl    $ - temp_NFA
 139+ 63C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 139+ 63B9             >
 139+ 63B9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 139+ 63BA 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 139+ 63BE 4F 50 29    >
 139+ 63C1             >                org     $-1                 // alter last byte of Name just above to set
 139+ 63C0 A9          >                db      {b $} | END_BIT     // msb as name end
 139+ 63C1             >
 139+ 63C1 AE 63       >                dw      last_NFA            // Link to previous definition Name
 139+ 63C3             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 139+ 63C3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 139+ 63C3 ~           >
 139+ 63C3 ~           >
 139+ 63C3             >                endif           ; ok        // for other definitions it "points" the correct handler
 139+ 63C3             >                // Use of "; ok" to suppress "warning[fwdref]"
 139+ 63C3             >
 139+ 63C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 140+ 63C3
 141+ 63C3              Loop_Ptr:
 142+ 63C3 D9                           exx
 143+ 63C4                              ldhlrp                      // ld hl,rp macro 30h +Origin
 143+ 63C4 2A 96 63    >                ld      hl,(RP_Pointer)
 144+ 63C7
 145+ 63C7 C1                           pop     bc                  // bc is increment
 146+ 63C8
 147+ 63C8 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 148+ 63C9 7B                           ld      a, e                // de keeps index before increment.
 149+ 63CA 81                           add     c
 150+ 63CB 77                           ld      (hl), a
 151+ 63CC 23                           inc     hl
 152+ 63CD 56                           ld      d, (hl)
 153+ 63CE 7A                           ld      a, d
 154+ 63CF 88                           adc     b
 155+ 63D0 77                           ld      (hl),a
 156+ 63D1 23                           inc     hl
 157+ 63D2
 158+ 63D2 7B                           ld      a, e
 159+ 63D3 96                           sub     (hl)
 160+ 63D4 5F                           ld      e, a
 161+ 63D5 23                           inc     hl
 162+ 63D6 7A                           ld      a, d
 163+ 63D7 9E                           sbc     (hl)
 164+ 63D8 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 165+ 63D9
 166+ 63D9 EB                           ex      de, hl
 167+ 63DA 09                           add     hl, bc
 168+ 63DB
 169+ 63DB CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 170+ 63DD 28 01                        jr      z, Loop_NegativeIncrement
 171+ 63DF 3F                               ccf
 172+ 63E0              Loop_NegativeIncrement:
 173+ 63E0 38 03                        jr      c, Loop_Endif
 174+ 63E2 D9                               exx
 175+ 63E3 18 22                            jr      Branch_Ptr      // perform branch consuming following cell
 176+ 63E5              Loop_Endif:
 177+ 63E5 EB                           ex      de, hl
 178+ 63E6 23                           inc     hl
 179+ 63E7                              ldrphl                      // ld rp,hl macro 30h +Origin
 179+ 63E7 22 96 63    >                ld      (RP_Pointer),hl
 180+ 63EA D9                           exx
 181+ 63EB 03                           inc     bc                  // skip branch-style offset
 182+ 63EC 03                           inc     bc
 183+ 63ED                              next
 183+ 63ED DD E9       >                jp      (ix)
 184+ 63EF
 185+ 63EF              //  ______________________________________________________________________
 186+ 63EF              //
 187+ 63EF              // (loop)       n --
 188+ 63EF              // same as (LOOP) but index is incremented by 1
 189+ 63EF              // compiled by LOOP.
 190+ 63EF                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 190+ 63EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 63EF             >
 190+ 63EF             >                // dummy db directives used to calculate length of namec
 190+ 63EF 28 4C 4F 4F >                db      "(LOOP)"
 190+ 63F3 50 29       >
 190+ 63F5             >len_NFA         defl    $ - temp_NFA
 190+ 63F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 63EF             >
 190+ 63EF 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 63F0 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 190+ 63F4 50 29       >
 190+ 63F6             >                org     $-1                 // alter last byte of Name just above to set
 190+ 63F5 A9          >                db      {b $} | END_BIT     // msb as name end
 190+ 63F6             >
 190+ 63F6 B9 63       >                dw      last_NFA            // Link to previous definition Name
 190+ 63F8             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 63F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190+ 63F8 ~           >
 190+ 63F8 ~           >
 190+ 63F8             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 63F8             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 63F8             >
 190+ 63F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 63F8 ED 8A 00 01                  push    1
 192+ 63FC 18 C5                        jr      Loop_Ptr
 193+ 63FE
 194+ 63FE              //  ______________________________________________________________________
 195+ 63FE              //
 196+ 63FE              // branch       --
 197+ 63FE              // unconditional branch in colon definition using the following cell as an offset from current IP value
 198+ 63FE              // compiled by ELSE, AGAIN and some other immediate words
 199+ 63FE
 200+ 63FE                              New_Def BRANCH, "BRANCH", is_code, is_normal
 200+ 63FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ 63FE             >
 200+ 63FE             >                // dummy db directives used to calculate length of namec
 200+ 63FE 42 52 41 4E >                db      "BRANCH"
 200+ 6402 43 48       >
 200+ 6404             >len_NFA         defl    $ - temp_NFA
 200+ 6404             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ 63FE             >
 200+ 63FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ 63FF 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 200+ 6403 43 48       >
 200+ 6405             >                org     $-1                 // alter last byte of Name just above to set
 200+ 6404 C8          >                db      {b $} | END_BIT     // msb as name end
 200+ 6405             >
 200+ 6405 EF 63       >                dw      last_NFA            // Link to previous definition Name
 200+ 6407             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6407 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 200+ 6407 ~           >
 200+ 6407 ~           >
 200+ 6407             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6407             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6407             >
 200+ 6407             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6407              Branch_Ptr:
 202+ 6407 60                           ld      h, b
 203+ 6408 69                           ld      l, c
 204+ 6409 5E                           ld      e, (hl)
 205+ 640A 23                           inc     hl
 206+ 640B 56                           ld      d, (hl)
 207+ 640C 2B                           dec     hl                  // offset is calculated from current IP
 208+ 640D 19                           add     hl, de
 209+ 640E 4D                           ld      c, l
 210+ 640F 44                           ld      b, h
 211+ 6410                              next
 211+ 6410 DD E9       >                jp      (ix)
 212+ 6412
 213+ 6412
 214+ 6412              //  ______________________________________________________________________
 215+ 6412              //
 216+ 6412              // 0branch      f --
 217+ 6412              // conditional branch if the top-of-stack is ZERO or FALSE.
 218+ 6412              // compiled by IF, UNTIL and some other immediate words
 219+ 6412
 220+ 6412                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 220+ 6412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220+ 6412             >
 220+ 6412             >                // dummy db directives used to calculate length of namec
 220+ 6412 30 42 52 41 >                db      "0BRANCH"
 220+ 6416 4E 43 48    >
 220+ 6419             >len_NFA         defl    $ - temp_NFA
 220+ 6419             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220+ 6412             >
 220+ 6412 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220+ 6413 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 220+ 6417 4E 43 48    >
 220+ 641A             >                org     $-1                 // alter last byte of Name just above to set
 220+ 6419 C8          >                db      {b $} | END_BIT     // msb as name end
 220+ 641A             >
 220+ 641A FE 63       >                dw      last_NFA            // Link to previous definition Name
 220+ 641C             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220+ 641C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220+ 641C ~           >
 220+ 641C ~           >
 220+ 641C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220+ 641C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220+ 641C             >
 220+ 641C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221+ 641C              ZBranch_Ptr:
 222+ 641C E1                           pop     hl
 223+ 641D 7D                           ld      a, l
 224+ 641E B4                           or      h
 225+ 641F 28 E6                        jr      z, Branch_Ptr
 226+ 6421 03                           inc     bc                  // if not branch, skip offset cell.
 227+ 6422 03                           inc     bc
 228+ 6423                              next
 228+ 6423 DD E9       >                jp      (ix)
 229+ 6425
 230+ 6425              //  ______________________________________________________________________
 231+ 6425              //
 232+ 6425              // (leave)        --
 233+ 6425              // compiled by LEAVE
 234+ 6425              // this forces to exit from loop and jump past
 235+ 6425                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 235+ 6425             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 6425             >
 235+ 6425             >                // dummy db directives used to calculate length of namec
 235+ 6425 28 4C 45 41 >                db      "(LEAVE)"
 235+ 6429 56 45 29    >
 235+ 642C             >len_NFA         defl    $ - temp_NFA
 235+ 642C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 6425             >
 235+ 6425 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 6426 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 235+ 642A 56 45 29    >
 235+ 642D             >                org     $-1                 // alter last byte of Name just above to set
 235+ 642C A9          >                db      {b $} | END_BIT     // msb as name end
 235+ 642D             >
 235+ 642D 12 64       >                dw      last_NFA            // Link to previous definition Name
 235+ 642F             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 642F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 235+ 642F ~           >
 235+ 642F ~           >
 235+ 642F             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 642F             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 642F             >
 235+ 642F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 642F
 237+ 642F                              ldhlrp
 237+ 642F 2A 96 63    >                ld      hl,(RP_Pointer)
 238+ 6432 11 04 00                     ld      de, 4
 239+ 6435 19                           add     hl, de
 240+ 6436                              ldrphl
 240+ 6436 22 96 63    >                ld      (RP_Pointer),hl
 241+ 6439
 242+ 6439 18 CC                        jr      Branch_Ptr       // perform branch consuming following cell
 243+ 643B                              next
 243+ 643B DD E9       >                jp      (ix)
 244+ 643D
 245+ 643D              //  ______________________________________________________________________
 246+ 643D              //
 247+ 643D              // (?do)        lim ind --
 248+ 643D              // compiled by ?DO to make a loop checking for lim == ind first
 249+ 643D              // at run-time (?DO) must be followed by a BRANCH offset
 250+ 643D              // used to skip the loop if lim == ind
 251+ 643D                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 251+ 643D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 251+ 643D             >
 251+ 643D             >                // dummy db directives used to calculate length of namec
 251+ 643D 28 3F 44 4F >                db      "(?DO)"
 251+ 6441 29          >
 251+ 6442             >len_NFA         defl    $ - temp_NFA
 251+ 6442             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 251+ 643D             >
 251+ 643D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 251+ 643E 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 251+ 6442 29          >
 251+ 6443             >                org     $-1                 // alter last byte of Name just above to set
 251+ 6442 A9          >                db      {b $} | END_BIT     // msb as name end
 251+ 6443             >
 251+ 6443 25 64       >                dw      last_NFA            // Link to previous definition Name
 251+ 6445             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 251+ 6445 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 251+ 6445 ~           >
 251+ 6445 ~           >
 251+ 6445             >                endif           ; ok        // for other definitions it "points" the correct handler
 251+ 6445             >                // Use of "; ok" to suppress "warning[fwdref]"
 251+ 6445             >
 251+ 6445             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 252+ 6445 D1                           pop     de                  // de has the index
 253+ 6446 E1                           pop     hl                  // hl has the limit
 254+ 6447 E5                           push    hl
 255+ 6448 D5                           push    de
 256+ 6449 A7                           and     a                   // reset carry flag
 257+ 644A ED 52                        sbc     hl, de              // compute limit - index
 258+ 644C 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 259+ 644E D1                               pop     de
 260+ 644F E1                               pop     hl
 261+ 6450
 262+ 6450 18 B5                            jr      Branch_Ptr          // perform branch consuming following cell
 263+ 6452              Do_Ptr:
 264+ 6452                              ldhlrp                      // prepare RP
 264+ 6452 2A 96 63    >                ld      hl,(RP_Pointer)
 265+ 6455 2B                           dec     hl
 266+ 6456 2B                           dec     hl
 267+ 6457 2B                           dec     hl
 268+ 6458 2B                           dec     hl
 269+ 6459                              ldrphl
 269+ 6459 22 96 63    >                ld      (RP_Pointer),hl
 270+ 645C
 271+ 645C                              // store index as top RP
 272+ 645C D1                           pop     de
 273+ 645D 73                           ld      (hl), e
 274+ 645E 23                           inc     hl
 275+ 645F 72                           ld      (hl), d
 276+ 6460 23                           inc     hl
 277+ 6461                              // stores lim as second from top RP
 278+ 6461 D1                           pop     de
 279+ 6462 73                           ld      (hl), e
 280+ 6463 23                           inc     hl
 281+ 6464 72                           ld      (hl), d
 282+ 6465
 283+ 6465                              // skip branch-style offseet
 284+ 6465 03                           inc     bc
 285+ 6466 03                           inc     bc
 286+ 6467                              next
 286+ 6467 DD E9       >                jp      (ix)
 287+ 6469
 288+ 6469              //  ______________________________________________________________________
 289+ 6469              //
 290+ 6469              // (do)        lim ind --
 291+ 6469              // compiled by DO to make a loop checking for lim == ind first
 292+ 6469              // this is a simpler version of (?DO)
 293+ 6469                              New_Def C_DO, "(DO)", is_code, is_normal
 293+ 6469             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 6469             >
 293+ 6469             >                // dummy db directives used to calculate length of namec
 293+ 6469 28 44 4F 29 >                db      "(DO)"
 293+ 646D             >len_NFA         defl    $ - temp_NFA
 293+ 646D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 6469             >
 293+ 6469 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 646A 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 293+ 646E             >                org     $-1                 // alter last byte of Name just above to set
 293+ 646D A9          >                db      {b $} | END_BIT     // msb as name end
 293+ 646E             >
 293+ 646E 3D 64       >                dw      last_NFA            // Link to previous definition Name
 293+ 6470             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 6470 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 293+ 6470 ~           >
 293+ 6470 ~           >
 293+ 6470             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 6470             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 6470             >
 293+ 6470             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 6470 0B                           dec     bc                  // prepare IP beforehand
 295+ 6471 0B                           dec     bc                  // to balance the two final inc bc in (?do)
 296+ 6472 18 DE                        jr      Do_Ptr
 297+ 6474
 298+ 6474              //  ______________________________________________________________________
 299+ 6474              //
 300+ 6474              // i            -- n
 301+ 6474              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 302+ 6474              // the current value of the index-loop
 303+ 6474                              New_Def I, "I", is_code, is_normal
 303+ 6474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 6474             >
 303+ 6474             >                // dummy db directives used to calculate length of namec
 303+ 6474 49          >                db      "I"
 303+ 6475             >len_NFA         defl    $ - temp_NFA
 303+ 6475             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 6474             >
 303+ 6474 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 6475 49          >                db      "I"               // name string in 7-bit ascii, but
 303+ 6476             >                org     $-1                 // alter last byte of Name just above to set
 303+ 6475 C9          >                db      {b $} | END_BIT     // msb as name end
 303+ 6476             >
 303+ 6476 69 64       >                dw      last_NFA            // Link to previous definition Name
 303+ 6478             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 6478 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 303+ 6478 ~           >
 303+ 6478 ~           >
 303+ 6478             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 6478             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 6478             >
 303+ 6478             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 6478              I_Ptr:
 305+ 6478
 306+ 6478                              ldhlrp
 306+ 6478 2A 96 63    >                ld      hl,(RP_Pointer)
 307+ 647B              I_Ptr_prime
 308+ 647B 5E                           ld      e, (hl)
 309+ 647C 23                           inc     hl
 310+ 647D 56                           ld      d, (hl)
 311+ 647E D5                           push    de
 312+ 647F                              next
 312+ 647F DD E9       >                jp      (ix)
 313+ 6481
 314+ 6481
 315+ 6481              //  ______________________________________________________________________
 316+ 6481              //
 317+ 6481              // i'            -- n
 318+ 6481              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 319+ 6481              // the limit of the index-loop
 320+ 6481
 321+ 6481                              New_Def II, "I'", is_code, is_normal
 321+ 6481             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 321+ 6481             >
 321+ 6481             >                // dummy db directives used to calculate length of namec
 321+ 6481 49 27       >                db      "I'"
 321+ 6483             >len_NFA         defl    $ - temp_NFA
 321+ 6483             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 321+ 6481             >
 321+ 6481 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 321+ 6482 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 321+ 6484             >                org     $-1                 // alter last byte of Name just above to set
 321+ 6483 A7          >                db      {b $} | END_BIT     // msb as name end
 321+ 6484             >
 321+ 6484 74 64       >                dw      last_NFA            // Link to previous definition Name
 321+ 6486             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 321+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 321+ 6486 ~           >
 321+ 6486 ~           >
 321+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 321+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 321+ 6486             >
 321+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 322+ 6486                              ldhlrp
 322+ 6486 2A 96 63    >                ld      hl,(RP_Pointer)
 323+ 6489 23                           inc     hl
 324+ 648A 23                           inc     hl
 325+ 648B 18 EE                        jr      I_Ptr_prime
 326+ 648D
 327+ 648D
 328+ 648D              //  ______________________________________________________________________
 329+ 648D              //
 330+ 648D              // digit        c n -- u 1  |  0
 331+ 648D              // convert a character c using base n
 332+ 648D              // returns a unsigned number and a true flag
 333+ 648D              // or just a false flag if the conversion fails
 334+ 648D                              New_Def DIGIT, "DIGIT", is_code, is_normal
 334+ 648D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 334+ 648D             >
 334+ 648D             >                // dummy db directives used to calculate length of namec
 334+ 648D 44 49 47 49 >                db      "DIGIT"
 334+ 6491 54          >
 334+ 6492             >len_NFA         defl    $ - temp_NFA
 334+ 6492             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 334+ 648D             >
 334+ 648D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 334+ 648E 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 334+ 6492 54          >
 334+ 6493             >                org     $-1                 // alter last byte of Name just above to set
 334+ 6492 D4          >                db      {b $} | END_BIT     // msb as name end
 334+ 6493             >
 334+ 6493 81 64       >                dw      last_NFA            // Link to previous definition Name
 334+ 6495             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 334+ 6495 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 334+ 6495 ~           >
 334+ 6495 ~           >
 334+ 6495             >                endif           ; ok        // for other definitions it "points" the correct handler
 334+ 6495             >                // Use of "; ok" to suppress "warning[fwdref]"
 334+ 6495             >
 334+ 6495             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 335+ 6495 E1                           pop     hl                  // l has the base
 336+ 6496 D1                           pop     de                  // e has the digit
 337+ 6497 7B                           ld      a, e
 338+ 6498 FE 60                        cp      $60                 // check if lowercase
 339+ 649A 38 02                        jr      c, Digit_Uppercase
 340+ 649C D6 20                            sub     $20                 // quick'n'dirty uppercase
 341+ 649E              Digit_Uppercase:
 342+ 649E D6 30                        sub     $30
 343+ 64A0 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 344+ 64A2 FE 0A                            cp      $0A
 345+ 64A4 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 346+ 64A6 D6 07                                sub     7                   // try hex and subtract 7
 347+ 64A8 FE 0A                                cp      $0A
 348+ 64AA 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 349+ 64AC
 350+ 64AC              Digit_Decimal:
 351+ 64AC                              // compare digit
 352+ 64AC BD                           cp      l                   // compare with base
 353+ 64AD
 354+ 64AD 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 355+ 64AF 5F                               ld      e, a                // digit is returned as second from TOS
 356+ 64B0 21 01 00                         ld      hl, 1
 357+ 64B3
 358+ 64B3                                  psh2
 358+ 64B3 D5          >                push    de
 358+ 64B4 E5          >                push    hl
 358+ 64B5 DD E9       >                jp      (ix)
 359+ 64B7              Digit_Fail:
 360+ 64B7 21 00 00                     ld      hl, 0
 361+ 64BA                              psh1
 361+ 64BA E5          >                push    hl
 361+ 64BB DD E9       >                jp      (ix)
 362+ 64BD
 363+ 64BD              //  ______________________________________________________________________
 364+ 64BD              //
 365+ 64BD              //  parametric uppercase routine
 366+ 64BD              //  depending on the following op-code the routine can be by-passed
 367+ 64BD              //  changing the behaviour of some callers.
 368+ 64BD              //  If it is "ret" then the system is Case-Sensitive
 369+ 64BD              //  If it is "Nop" then the system is Case-Insensitive
 370+ 64BD              //  Only A register is touched.
 371+ 64BD 00           Case_Sensitive: nop                         // Default is case-insensitive.
 372+ 64BE              Case_Upper:
 373+ 64BE FE 61                        cp      LC_A_CHAR           // lower-case "a"
 374+ 64C0 D8                           ret     c                   // no change if A < "a"
 375+ 64C1 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 376+ 64C3 D0                           ret     nc                  // no change if A > "z"
 377+ 64C4 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 378+ 64C6 C9                           ret
 379+ 64C7
 380+ 64C7              //  ______________________________________________________________________
 381+ 64C7              //
 382+ 64C7              //  caseon      --
 383+ 64C7              // set system case-sensitivity on
 384+ 64C7              // it patches a RET/NOP at the beginning of the uppercase-routine
 385+ 64C7                              New_Def CASEON, "CASEON", is_code, is_normal
 385+ 64C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 64C7             >
 385+ 64C7             >                // dummy db directives used to calculate length of namec
 385+ 64C7 43 41 53 45 >                db      "CASEON"
 385+ 64CB 4F 4E       >
 385+ 64CD             >len_NFA         defl    $ - temp_NFA
 385+ 64CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 64C7             >
 385+ 64C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 64C8 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 385+ 64CC 4F 4E       >
 385+ 64CE             >                org     $-1                 // alter last byte of Name just above to set
 385+ 64CD CE          >                db      {b $} | END_BIT     // msb as name end
 385+ 64CE             >
 385+ 64CE 8D 64       >                dw      last_NFA            // Link to previous definition Name
 385+ 64D0             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 64D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 385+ 64D0 ~           >
 385+ 64D0 ~           >
 385+ 64D0             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 64D0             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 64D0             >
 385+ 64D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 64D0 3E C9                        ld      a, $C9              // "ret"
 387+ 64D2 32 BD 64                     ld      (Case_Sensitive), a
 388+ 64D5                              next
 388+ 64D5 DD E9       >                jp      (ix)
 389+ 64D7
 390+ 64D7              //  ______________________________________________________________________
 391+ 64D7              //
 392+ 64D7              //  caseoff     --
 393+ 64D7              // set system case-sensitivity on
 394+ 64D7              // it patches a RET/NOP at the beginning of the uppercase-routine
 395+ 64D7                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 395+ 64D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 395+ 64D7             >
 395+ 64D7             >                // dummy db directives used to calculate length of namec
 395+ 64D7 43 41 53 45 >                db      "CASEOFF"
 395+ 64DB 4F 46 46    >
 395+ 64DE             >len_NFA         defl    $ - temp_NFA
 395+ 64DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 395+ 64D7             >
 395+ 64D7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 395+ 64D8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 395+ 64DC 4F 46 46    >
 395+ 64DF             >                org     $-1                 // alter last byte of Name just above to set
 395+ 64DE C6          >                db      {b $} | END_BIT     // msb as name end
 395+ 64DF             >
 395+ 64DF C7 64       >                dw      last_NFA            // Link to previous definition Name
 395+ 64E1             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 395+ 64E1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 395+ 64E1 ~           >
 395+ 64E1 ~           >
 395+ 64E1             >                endif           ; ok        // for other definitions it "points" the correct handler
 395+ 64E1             >                // Use of "; ok" to suppress "warning[fwdref]"
 395+ 64E1             >
 395+ 64E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 396+ 64E1 3E 00                        ld      a, $00              // "nop"
 397+ 64E3 32 BD 64                     ld      (Case_Sensitive), a
 398+ 64E6                              next
 398+ 64E6 DD E9       >                jp      (ix)
 399+ 64E8
 400+ 64E8              //  ______________________________________________________________________
 401+ 64E8              //
 402+ 64E8              //  upper       c1 -- c1 | c2
 403+ 64E8              // character on top of stack is forced to Uppercase.
 404+ 64E8                              New_Def UPPER, "UPPER", is_code, is_normal
 404+ 64E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 64E8             >
 404+ 64E8             >                // dummy db directives used to calculate length of namec
 404+ 64E8 55 50 50 45 >                db      "UPPER"
 404+ 64EC 52          >
 404+ 64ED             >len_NFA         defl    $ - temp_NFA
 404+ 64ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 64E8             >
 404+ 64E8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 64E9 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 404+ 64ED 52          >
 404+ 64EE             >                org     $-1                 // alter last byte of Name just above to set
 404+ 64ED D2          >                db      {b $} | END_BIT     // msb as name end
 404+ 64EE             >
 404+ 64EE D7 64       >                dw      last_NFA            // Link to previous definition Name
 404+ 64F0             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 64F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 404+ 64F0 ~           >
 404+ 64F0 ~           >
 404+ 64F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 64F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 64F0             >
 404+ 64F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 64F0 E1                           pop     hl
 406+ 64F1 7D                           ld      a, l
 407+ 64F2 CD BE 64                     call    Case_Upper
 408+ 64F5 6F                           ld      l, a
 409+ 64F6
 410+ 64F6                              psh1
 410+ 64F6 E5          >                push    hl
 410+ 64F7 DD E9       >                jp      (ix)
 411+ 64F9
 412+ 64F9              //  ______________________________________________________________________
 413+ 64F9              //
 414+ 64F9              // (find)       addr voc -- 0 | cfa b 1
 415+ 64F9              // vocabulary search,
 416+ 64F9              // - voc is starting word's NFA
 417+ 64F9              // - addr is the string to be searched for
 418+ 64F9              // On success, it returns the CFA of found word, the first NFA byte
 419+ 64F9              // (which contains length and some flags) and a true flag.
 420+ 64F9              // On fail, a false flag  (no more: leaves addr unchanged)
 421+ 64F9                              New_Def C_FIND, "(FIND)", is_code, is_normal
 421+ 64F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ 64F9             >
 421+ 64F9             >                // dummy db directives used to calculate length of namec
 421+ 64F9 28 46 49 4E >                db      "(FIND)"
 421+ 64FD 44 29       >
 421+ 64FF             >len_NFA         defl    $ - temp_NFA
 421+ 64FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ 64F9             >
 421+ 64F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ 64FA 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 421+ 64FE 44 29       >
 421+ 6500             >                org     $-1                 // alter last byte of Name just above to set
 421+ 64FF A9          >                db      {b $} | END_BIT     // msb as name end
 421+ 6500             >
 421+ 6500 E8 64       >                dw      last_NFA            // Link to previous definition Name
 421+ 6502             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6502 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6502 ~           >
 421+ 6502 ~           >
 421+ 6502             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6502             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6502             >
 421+ 6502             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6502
 423+ 6502 D1                           pop     de                      // de has dictionary pointer
 424+ 6503              Find_VocabularyLoop:
 425+ 6503 E1                               pop     hl                  // string pointer to search for
 426+ 6504 E5                               push    hl                  // keep it on stack too for the end.
 427+ 6505 1A                               ld      a, (de)             // save NFA length byte
 428+ 6506 08                               ex      af,af'              // for later use (!)
 429+ 6507 1A                               ld      a, (de)             // reload NFA length byte
 430+ 6508 AE                               xor     (hl)                // check if same length
 431+ 6509 E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 432+ 650B                                  // word and text haven't the same length, skip to next vocabulary entry
 433+ 650B 20 2C                            jr      nz, Find_DifferentLenght
 434+ 650D
 435+ 650D              Find_ThisWord:      // begin loop
 436+ 650D 23                                   inc     hl
 437+ 650E 13                                   inc     de
 438+ 650F 1A                                   ld      a, (de)
 439+ 6510                                      // case insensitive option - begin
 440+ 6510 C5                                   push    bc
 441+ 6511 E6 80                                and     $80                 // split A in msb and the rest
 442+ 6513 47                                   ld      b, a
 443+ 6514 1A                                   ld      a, (de)
 444+ 6515 E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 445+ 6517 CD BD 64                             call    Case_Sensitive      // uppercase routine
 446+ 651A 4F                                   ld      c, a
 447+ 651B 7E                                   ld      a, (hl)
 448+ 651C CD BD 64                             call    Case_Sensitive      // uppercase routine
 449+ 651F A9                                   xor     c
 450+ 6520 A8                                   xor     b
 451+ 6521 C1                                   pop     bc
 452+ 6522                                      // case insensitive option - end
 453+ 6522 87                                   add     a                   // ignore msb during compare
 454+ 6523 20 12                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 455+ 6525
 456+ 6525                                  // loop back until last byte msb is found set
 457+ 6525                                  // that bit marks the ending char of this word
 458+ 6525 30 E6                            jr      nc, Find_ThisWord
 459+ 6527
 460+ 6527                                  // match found !
 461+ 6527 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 462+ 652A 19                               add     hl, de
 463+ 652B E3                               ex      (sp), hl            // CFA on stack and drop addr
 464+ 652C 08                               ex      af, af'             // retrieve NFA byte (!)
 465+ 652D 5F                               ld      e, a
 466+ 652E 16 00                            ld      d, 0
 467+ 6530
 468+ 6530
 469+ 6530 21 FF FF                         ld      hl, -1
 470+ 6533                                  psh2
 470+ 6533 D5          >                push    de
 470+ 6534 E5          >                push    hl
 470+ 6535 DD E9       >                jp      (ix)
 471+ 6537
 472+ 6537              Find_DidntMatch: // didn't match (*)
 473+ 6537 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 474+ 6539
 475+ 6539              Find_DifferentLenght:
 476+ 6539                                  // consume chars until the end of the word
 477+ 6539                                  // that is last byte msb is found set
 478+ 6539 13                                   inc     de
 479+ 653A 1A                                   ld      a, (de)
 480+ 653B 87                                   add     a, a
 481+ 653C 30 FB                            jr      nc, Find_DifferentLenght
 482+ 653E
 483+ 653E              Find_WordEnd:   // word-end  found (**)
 484+ 653E                                  // take LFA and use it
 485+ 653E 13                               inc     de
 486+ 653F EB                               ex      de, hl
 487+ 6540 5E                               ld      e, (hl)
 488+ 6541 23                               inc     hl
 489+ 6542 56                               ld      d, (hl)
 490+ 6543 7A                               ld      a, d
 491+ 6544 B3                               or      e
 492+ 6545
 493+ 6545                              // loop until end of vocabulary
 494+ 6545 20 BC                        jr      nz, Find_VocabularyLoop
 495+ 6547
 496+ 6547 E1                           pop     hl              // without this, leaves addr unchanged
 497+ 6548 21 00 00                     ld      hl, FALSE_FLAG
 498+ 654B
 499+ 654B                              psh1
 499+ 654B E5          >                push    hl
 499+ 654C DD E9       >                jp      (ix)
 500+ 654E
 501+ 654E              //  ______________________________________________________________________
 502+ 654E              //
 503+ 654E              // enclose      a c -- a  n1 n2 n3
 504+ 654E              // starting from a, using delimiter c, determines the offsets:
 505+ 654E              //   n1   the first character non-delimiter
 506+ 654E              //   n2   the first delimiter after the text
 507+ 654E              //   n3   the first character non enclosed.
 508+ 654E              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 509+ 654E              // an uncoditional delimiter.
 510+ 654E              // Examples:
 511+ 654E              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 512+ 654E              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 513+ 654E              // iii:	c  c  'nul'          -- 2  3  2
 514+ 654E                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 514+ 654E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 514+ 654E             >
 514+ 654E             >                // dummy db directives used to calculate length of namec
 514+ 654E 45 4E 43 4C >                db      "ENCLOSE"
 514+ 6552 4F 53 45    >
 514+ 6555             >len_NFA         defl    $ - temp_NFA
 514+ 6555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 514+ 654E             >
 514+ 654E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 514+ 654F 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 514+ 6553 4F 53 45    >
 514+ 6556             >                org     $-1                 // alter last byte of Name just above to set
 514+ 6555 C5          >                db      {b $} | END_BIT     // msb as name end
 514+ 6556             >
 514+ 6556 F9 64       >                dw      last_NFA            // Link to previous definition Name
 514+ 6558             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 514+ 6558 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 514+ 6558 ~           >
 514+ 6558 ~           >
 514+ 6558             >                endif           ; ok        // for other definitions it "points" the correct handler
 514+ 6558             >                // Use of "; ok" to suppress "warning[fwdref]"
 514+ 6558             >
 514+ 6558             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 6558 D1                           pop     de                  //  e has the character
 516+ 6559 E1                           pop     hl                  // hl has the string address
 517+ 655A E5                           push    hl
 518+ 655B 7B                           ld      a, e
 519+ 655C 11 FF FF                     ld      de, -1              // let's start from -1
 520+ 655F 2B                           dec     hl
 521+ 6560              Enclose_NonDelimiter:
 522+ 6560                              // find first non delimiter
 523+ 6560 23                               inc     hl
 524+ 6561 13                               inc     de
 525+ 6562 BE                               cp      (hl)
 526+ 6563 28 FB                        jr      z, Enclose_NonDelimiter
 527+ 6565 D5                           push    de
 528+ 6566
 529+ 6566 C5                           push    bc                  // save Instruction Pointer
 530+ 6567
 531+ 6567 4F                           ld      c, a                // save char
 532+ 6568 7E                           ld      a, (hl)
 533+ 6569 A7                           and     a                   // stop if 0x00
 534+ 656A 20 07                        jr      nz, Enclose_NextChar
 535+ 656C
 536+ 656C                              /// case iii. no more character in string
 537+ 656C C1                               pop     bc                  // restore Instruction Pointer
 538+ 656D 13                               inc     de
 539+ 656E D5                               push    de
 540+ 656F 1B                               dec     de
 541+ 6570 D5                               push    de
 542+ 6571                                  next
 542+ 6571 DD E9       >                jp      (ix)
 543+ 6573              Enclose_NextChar:
 544+ 6573 79                               ld      a, c
 545+ 6574 23                               inc     hl
 546+ 6575 13                               inc     de
 547+ 6576 BE                               cp      (hl)
 548+ 6577 20 06                            jr      nz, Enclose_NonSeparator
 549+ 6579
 550+ 6579                                      // case i. first non enclosed
 551+ 6579 C1                                   pop     bc                  // restore Instruction Pointer
 552+ 657A D5                                   push    de
 553+ 657B 13                                   inc     de
 554+ 657C D5                                   push    de
 555+ 657D                                      next
 555+ 657D DD E9       >                jp      (ix)
 556+ 657F              Enclose_NonSeparator:
 557+ 657F 7E                               ld      a, (hl)
 558+ 6580 A7                               and     a
 559+ 6581 20 F0                        jr      nz, Enclose_NextChar
 560+ 6583
 561+ 6583                              // case ii. separator & terminator
 562+ 6583 C1                           pop     bc                  // restore Instruction Pointer
 563+ 6584 D5                           push    de
 564+ 6585 D5                           push    de
 565+ 6586                              next
 565+ 6586 DD E9       >                jp      (ix)
 566+ 6588
 567+ 6588              //  ______________________________________________________________________
 568+ 6588              //
 569+ 6588              // (map)        a2 a1 n c1 -- c2
 570+ 6588              // translate character c1 using mapping string a2 and a2
 571+ 6588              // if c1 is not present within string a1 then
 572+ 6588              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 573+ 6588                              New_Def C_MAP, "(MAP)", is_code, is_normal
 573+ 6588             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 573+ 6588             >
 573+ 6588             >                // dummy db directives used to calculate length of namec
 573+ 6588 28 4D 41 50 >                db      "(MAP)"
 573+ 658C 29          >
 573+ 658D             >len_NFA         defl    $ - temp_NFA
 573+ 658D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 573+ 6588             >
 573+ 6588 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 573+ 6589 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 573+ 658D 29          >
 573+ 658E             >                org     $-1                 // alter last byte of Name just above to set
 573+ 658D A9          >                db      {b $} | END_BIT     // msb as name end
 573+ 658E             >
 573+ 658E 4E 65       >                dw      last_NFA            // Link to previous definition Name
 573+ 6590             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 573+ 6590 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 573+ 6590 ~           >
 573+ 6590 ~           >
 573+ 6590             >                endif           ; ok        // for other definitions it "points" the correct handler
 573+ 6590             >                // Use of "; ok" to suppress "warning[fwdref]"
 573+ 6590             >
 573+ 6590             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 574+ 6590 D9                           exx
 575+ 6591 E1                           pop     hl
 576+ 6592 7D                           ld      a, l
 577+ 6593 C1                           pop     bc
 578+ 6594 E1                           pop     hl
 579+ 6595 50                           ld      d, b
 580+ 6596 59                           ld      e, c
 581+ 6597 ED B1                        cpir
 582+ 6599 E1                           pop     hl
 583+ 659A 20 05                        jr      nz, C_Map_Then
 583+ 659C
 584+ 659C 19                               add     hl, de
 585+ 659D 2B                               dec     hl
 586+ 659E ED 42                            sbc     hl, bc
 587+ 65A0 7E                               ld      a, (hl)
 588+ 65A1              C_Map_Then:
 589+ 65A1 6F                           ld      l, a
 590+ 65A2 26 00                        ld      h, 0
 591+ 65A4 E5                           push    hl
 592+ 65A5 D9                           exx
 593+ 65A6                              next
 593+ 65A6 DD E9       >                jp      (ix)
 594+ 65A8
 595+ 65A8              //  ______________________________________________________________________
 596+ 65A8              //
 597+ 65A8              // (compare)    a1 a2 n -- b
 598+ 65A8              // this word performs a lexicographic compare of n bytes of text at address a1
 599+ 65A8              // with n bytes of text at address a2. It returns numeric a value:
 600+ 65A8              //  0 : if strings are equal
 601+ 65A8              // +1 : if string at a1 greater than string at a2
 602+ 65A8              // -1 : if string at a1 less than string at a2
 603+ 65A8              // strings can be 256 bytes in length at most.
 604+ 65A8                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 604+ 65A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 604+ 65A8             >
 604+ 65A8             >                // dummy db directives used to calculate length of namec
 604+ 65A8 28 43 4F 4D >                db      "(COMPARE)"
 604+ 65AC 50 41 52 45 >
 604+ 65B0 29          >
 604+ 65B1             >len_NFA         defl    $ - temp_NFA
 604+ 65B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 604+ 65A8             >
 604+ 65A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 604+ 65A9 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 604+ 65AD 50 41 52 45 >
 604+ 65B1 29          >
 604+ 65B2             >                org     $-1                 // alter last byte of Name just above to set
 604+ 65B1 A9          >                db      {b $} | END_BIT     // msb as name end
 604+ 65B2             >
 604+ 65B2 88 65       >                dw      last_NFA            // Link to previous definition Name
 604+ 65B4             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 604+ 65B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 604+ 65B4 ~           >
 604+ 65B4 ~           >
 604+ 65B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 604+ 65B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 604+ 65B4             >
 604+ 65B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 605+ 65B4 D9                           exx
 606+ 65B5 E1                           pop     hl                  // Number of bytes
 607+ 65B6 7D                           ld      a, l
 608+ 65B7 E1                           pop     hl                  // hl points string a2
 609+ 65B8 D1                           pop     de                  // hl points string a1
 610+ 65B9              //              push    bc                  // Instruction pointer on stack
 611+ 65B9 47                           ld      b, a
 612+ 65BA              C_Compare_Loop:
 613+ 65BA 7E                               ld      a, (hl)
 614+ 65BB CD BD 64                         call    Case_Sensitive
 615+ 65BE 4F                               ld      c, a
 616+ 65BF 1A                               ld      a, (de)
 617+ 65C0 CD BD 64                         call    Case_Sensitive
 618+ 65C3 B9                               cp      c
 619+ 65C4 13                               inc     de
 620+ 65C5 23                               inc     hl
 621+ 65C6 28 0E                            jr      z, C_Compare_Equal
 622+ 65C8 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 623+ 65CA 21 01 00                                 ld      hl, 1               // a1 gt a2
 624+ 65CD 18 03                                jr      C_Compare_Then      // Else
 625+ 65CF              C_Compare_NotLessThan:
 626+ 65CF 21 FF FF                                 ld      hl, -1              // a1 lt a2
 627+ 65D2              C_Compare_Then:                                 // Endif
 628+ 65D2              //                      pop     bc              // restore Instruction Pointer
 629+ 65D2 E5                                   push    hl
 630+ 65D3 D9                                   exx
 631+ 65D4
 632+ 65D4                                      next
 632+ 65D4 DD E9       >                jp      (ix)
 633+ 65D6
 634+ 65D6              C_Compare_Equal:
 635+ 65D6 10 E2                        djnz    C_Compare_Loop
 636+ 65D8 21 00 00                     ld      hl, 0               // a1 eq a2
 637+ 65DB              //              pop     bc                  // restore Instruction Pointer
 638+ 65DB E5                           push    hl
 639+ 65DC D9                           exx
 640+ 65DD
 641+ 65DD                              next
 641+ 65DD DD E9       >                jp      (ix)
 642+ 65DF
 643+ 65DF              //  ______________________________________________________________________
 644+ 65DF              //
 645+ 65DF              // emitc        c --
 646+ 65DF              // low level emit, calls ROM routine at #10 to send a character to
 647+ 65DF              // the the current channel (see SELECT to change stream-channel)
 648+ 65DF                              New_Def EMITC, "EMITC", is_code, is_normal
 648+ 65DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ 65DF             >
 648+ 65DF             >                // dummy db directives used to calculate length of namec
 648+ 65DF 45 4D 49 54 >                db      "EMITC"
 648+ 65E3 43          >
 648+ 65E4             >len_NFA         defl    $ - temp_NFA
 648+ 65E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ 65DF             >
 648+ 65DF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ 65E0 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 648+ 65E4 43          >
 648+ 65E5             >                org     $-1                 // alter last byte of Name just above to set
 648+ 65E4 C3          >                db      {b $} | END_BIT     // msb as name end
 648+ 65E5             >
 648+ 65E5 A8 65       >                dw      last_NFA            // Link to previous definition Name
 648+ 65E7             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 65E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 648+ 65E7 ~           >
 648+ 65E7 ~           >
 648+ 65E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 65E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 65E7             >
 648+ 65E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 65E7 E1                           pop     hl
 650+ 65E8 7D                           ld      a, l
 651+ 65E9              Emitc_Ptr:
 652+ 65E9 C5                           push    bc
 653+ 65EA DD E5                        push    ix
 654+ 65EC D7                           rst     $10
 655+ 65ED DD E1                        pop     ix
 656+ 65EF C1                           pop     bc
 657+ 65F0 3E FF                        ld      a, 255            // max possible
 658+ 65F2 32 8C 5C                     ld      (SCR_CT), a
 659+ 65F5
 660+ 65F5                              next
 660+ 65F5 DD E9       >                jp      (ix)
 661+ 65F7
 662+ 65F7              //  ______________________________________________________________________
 663+ 65F7              //
 664+ 65F7              // cr           --
 665+ 65F7              // send a CR via EMITC
 666+ 65F7                              New_Def CR, "CR", is_code, is_normal
 666+ 65F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 666+ 65F7             >
 666+ 65F7             >                // dummy db directives used to calculate length of namec
 666+ 65F7 43 52       >                db      "CR"
 666+ 65F9             >len_NFA         defl    $ - temp_NFA
 666+ 65F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 666+ 65F7             >
 666+ 65F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 666+ 65F8 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 666+ 65FA             >                org     $-1                 // alter last byte of Name just above to set
 666+ 65F9 D2          >                db      {b $} | END_BIT     // msb as name end
 666+ 65FA             >
 666+ 65FA DF 65       >                dw      last_NFA            // Link to previous definition Name
 666+ 65FC             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 666+ 65FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 666+ 65FC ~           >
 666+ 65FC ~           >
 666+ 65FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 666+ 65FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 666+ 65FC             >
 666+ 65FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 667+ 65FC
 668+ 65FC 3E 0D                        ld      a, CR_CHAR
 669+ 65FE 18 E9                        jr      Emitc_Ptr
 670+ 6600
 671+ 6600              Emitc_Vec:
 672+ 6600 43 66                        dw      C_Emit_Printable  // comma
 673+ 6602 49 66                        dw      C_Emit_Bel        // bel
 674+ 6604 43 66                        dw      C_Emit_Printable  // bs
 675+ 6606 5E 66                        dw      C_Emit_Tab        // tab
 676+ 6608 43 66                        dw      C_Emit_Printable  // cr
 677+ 660A 64 66                        dw      C_Emit_NL         // lf (unix newline)
 678+ 660C 43 66                        dw      C_Emit_Printable  // blank
 679+ 660E 43 66                        dw      C_Emit_Printable  // blank
 680+ 6610
 681+ 6610              Emit_Selector_Start:
 682+ 6610 06                           db      $06                 // comma
 683+ 6611 07                           db      $07                 // bel
 684+ 6612 08                           db      $08                 // bs
 685+ 6613 09                           db      $09                 // tab
 686+ 6614 0D                           db      $0D                 // cr
 687+ 6615 0A                           db      $0A                 // lf (unix newline)
 688+ 6616 20                           db      $20
 689+ 6617              Emit_Selector_End:
 690+ 6617 20                           db      $20
 691+ 6618
 692+ 6618              //  ______________________________________________________________________
 693+ 6618              //
 694+ 6618              // (?emit)      c1 -- c2 | c1
 695+ 6618              // decode a character to be sent via EMIT
 696+ 6618              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 697+ 6618              // the routine should resolve anything and convert the character anyway.
 698+ 6618                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 698+ 6618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 698+ 6618             >
 698+ 6618             >                // dummy db directives used to calculate length of namec
 698+ 6618 28 3F 45 4D >                db      "(?EMIT)"
 698+ 661C 49 54 29    >
 698+ 661F             >len_NFA         defl    $ - temp_NFA
 698+ 661F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 698+ 6618             >
 698+ 6618 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 698+ 6619 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 698+ 661D 49 54 29    >
 698+ 6620             >                org     $-1                 // alter last byte of Name just above to set
 698+ 661F A9          >                db      {b $} | END_BIT     // msb as name end
 698+ 6620             >
 698+ 6620 F7 65       >                dw      last_NFA            // Link to previous definition Name
 698+ 6622             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 698+ 6622 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 698+ 6622 ~           >
 698+ 6622 ~           >
 698+ 6622             >                endif           ; ok        // for other definitions it "points" the correct handler
 698+ 6622             >                // Use of "; ok" to suppress "warning[fwdref]"
 698+ 6622             >
 698+ 6622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 699+ 6622 D1                           pop     de
 700+ 6623 7B                           ld      a, e                //  de has c1
 701+ 6624 E6 7F                        and     $7F                 // 7-bit ascii only
 702+ 6626 C5                           push    bc                  // save Instruction Pointer
 703+ 6627 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 704+ 662A 21 17 66                     ld      hl, Emit_Selector_End
 705+ 662D ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 706+ 662F 20 0B                        jr      nz, C_Emit_Not_Found
 707+ 6631                                  // Found then decode it
 708+ 6631 21 00 66                         ld      hl, Emitc_Vec
 709+ 6634 09                               add     hl, bc
 710+ 6635 09                               add     hl, bc
 711+ 6636 5E                               ld      e, (hl)
 712+ 6637 23                               inc     hl
 713+ 6638 56                               ld      d, (hl)
 714+ 6639 EB                               ex      de, hl
 715+ 663A C1                               pop     bc                  // restore Instruction Pointer
 716+ 663B E9                               jp      (hl)                // one of the following labels
 717+ 663C              C_Emit_Not_Found:
 718+ 663C C1                           pop     bc                  // restore Instruction Pointer
 719+ 663D FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 720+ 663F 30 02                        jr      nc, C_Emit_Printable
 721+ 6641 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 722+ 6643              C_Emit_Printable:
 723+ 6643 6F                           ld      l, a
 724+ 6644 26 00                        ld      h, 0
 725+ 6646
 726+ 6646                              psh1
 726+ 6646 E5          >                push    hl
 726+ 6647 DD E9       >                jp      (ix)
 727+ 6649
 728+ 6649              C_Emit_Bel:
 729+ 6649 C5                           push    bc                  // save Instruction Pointer
 730+ 664A 11 00 01                     ld      de, $0100
 731+ 664D 21 00 02                     ld      hl, $0200
 732+ 6650 DD E5                        push    ix                  // save Next Pointer
 733+ 6652 CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 734+ 6655 DD E1                        pop     ix                  // restore Next Pointer
 735+ 6657 C1                           pop     bc                  // restore Instruction Pointer
 736+ 6658 21 00 00                     ld      hl, NUL_CHAR
 737+ 665B
 738+ 665B                              psh1
 738+ 665B E5          >                push    hl
 738+ 665C DD E9       >                jp      (ix)
 739+ 665E
 740+ 665E 21 06 00     C_Emit_Tab:     ld      hl, COMMA_CHAR
 741+ 6661
 742+ 6661                              psh1
 742+ 6661 E5          >                push    hl
 742+ 6662 DD E9       >                jp      (ix)
 743+ 6664
 744+ 6664 21 0D 00     C_Emit_NL       ld      hl, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 745+ 6667
 746+ 6667                              psh1
 746+ 6667 E5          >                push    hl
 746+ 6668 DD E9       >                jp      (ix)
 747+ 666A
 748+ 666A              //  ______________________________________________________________________
 749+ 666A
 750+ 666A              Key_Table:
 751+ 666A E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 752+ 666B C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 753+ 666C CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 754+ 666D CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 755+ 666E CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 756+ 666F C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 757+ 6670 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 758+ 6671 AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 759+ 6672 C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 760+ 6673 C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 761+ 6674 C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 762+ 6675              Key_MapTo:
 763+ 6675 06                           db      $06                 // 10: SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 764+ 6676 0C                           db      $0C                 //  9: same as SHIFT-0 [BACKSPACE]
 765+ 6677 07                           db      $07                 //  8: same as SHIFT-1 [EDIT]
 766+ 6678 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 767+ 6679 5D                           db      $5D                 //  6: SYMBOL+U : ]
 768+ 667A 5B                           db      $5B                 //  5: SYMBOL+Y : [
 769+ 667B 7D                           db      $7D                 //  4: SYMBOL+G : }
 770+ 667C 7B                           db      $7B                 //  3: SYMBOL+F : {
 771+ 667D 5C                           db      $5C                 //  2: SYMBOl+D : //
 772+ 667E 7C                           db      $7C                 //  1: SYMBOL+S : |
 773+ 667F 7E                           db      $7E                 //  0: SYMBOL+A : ~
 774+ 6680
 775+ 6680              //  ______________________________________________________________________
 776+ 6680              //
 777+ 6680              // curs         -- c
 778+ 6680              // wait for a keypress
 779+ 6680              // This definition need Standard ROM Interrupt to be served
 780+ 6680
 781+ 6680                              New_Def CUR, "CURS", is_code, is_normal
 781+ 6680             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 781+ 6680             >
 781+ 6680             >                // dummy db directives used to calculate length of namec
 781+ 6680 43 55 52 53 >                db      "CURS"
 781+ 6684             >len_NFA         defl    $ - temp_NFA
 781+ 6684             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 781+ 6680             >
 781+ 6680 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 781+ 6681 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 781+ 6685             >                org     $-1                 // alter last byte of Name just above to set
 781+ 6684 D3          >                db      {b $} | END_BIT     // msb as name end
 781+ 6685             >
 781+ 6685 18 66       >                dw      last_NFA            // Link to previous definition Name
 781+ 6687             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 781+ 6687 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 781+ 6687 ~           >
 781+ 6687 ~           >
 781+ 6687             >                endif           ; ok        // for other definitions it "points" the correct handler
 781+ 6687             >                // Use of "; ok" to suppress "warning[fwdref]"
 781+ 6687             >
 781+ 6687             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 782+ 6687
 783+ 6687 C5                           push    bc                  // save Instruction Pointer
 784+ 6688 DD E5                        push    ix
 785+ 668A
 786+ 668A ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 787+ 668E 31 61 63                     ld      sp, Cold_origin - 5 // maybe $4000 in the future...
 788+ 6691 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 789+ 6695
 790+ 6695              Cur_Wait:
 791+ 6695 76                               halt
 792+ 6696 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 793+ 6698 CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 794+ 669B
 795+ 669B                                  // software-flash: flips face every 320 ms
 796+ 669B 3E 10                            ld      a, $10              // Timing based
 797+ 669D FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 798+ 66A0
 799+ 66A0 3A 8C 63                         ld      a, (Block_Face)     // see origin.asm
 800+ 66A3 20 0C                            jr      nz, Cur_Cursor
 801+ 66A5 3A 8D 63                             ld      a, (Half_Face)      // see origin.asm
 802+ 66A8 FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 803+ 66AC 28 03                                jr      z, Cur_Cursor
 804+ 66AE 3A 8E 63                                 ld      a, (Underscore_Face) // see origin
 805+ 66B1              Cur_Cursor:
 806+ 66B1 D7                               rst     $10
 807+ 66B2 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 808+ 66B4 D7                               rst     $10
 809+ 66B5
 810+ 66B5 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 811+ 66B9 28 DA                        jr      z, Cur_Wait
 812+ 66BB
 813+ 66BB 76                           halt    // this is to sync flashing cursor.
 814+ 66BC
 815+ 66BC 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 816+ 66BE D7                           rst     $10
 817+ 66BF 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 818+ 66C1 D7                           rst     $10
 819+ 66C2
 820+ 66C2 ED 7B 92 63                  ld      sp, (SP_Saved)
 821+ 66C6
 822+ 66C6 DD E1                        pop     ix
 823+ 66C8 C1                           pop     bc                  // Restore Instruction Pointer
 824+ 66C9
 825+ 66C9                              next
 825+ 66C9 DD E9       >                jp      (ix)
 826+ 66CB
 827+ 66CB
 828+ 66CB              //  ______________________________________________________________________
 829+ 66CB              //
 830+ 66CB              // key          -- c
 831+ 66CB              // This definition need Standard ROM Interrupt to be served
 832+ 66CB
 833+ 66CB                              New_Def KEY, "KEY", is_code, is_normal
 833+ 66CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 833+ 66CB             >
 833+ 66CB             >                // dummy db directives used to calculate length of namec
 833+ 66CB 4B 45 59    >                db      "KEY"
 833+ 66CE             >len_NFA         defl    $ - temp_NFA
 833+ 66CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 833+ 66CB             >
 833+ 66CB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 833+ 66CC 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 833+ 66CF             >                org     $-1                 // alter last byte of Name just above to set
 833+ 66CE D9          >                db      {b $} | END_BIT     // msb as name end
 833+ 66CF             >
 833+ 66CF 80 66       >                dw      last_NFA            // Link to previous definition Name
 833+ 66D1             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 833+ 66D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 833+ 66D1 ~           >
 833+ 66D1 ~           >
 833+ 66D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 833+ 66D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 833+ 66D1             >
 833+ 66D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 834+ 66D1
 835+ 66D1 C5                           push    bc
 836+ 66D2
 837+ 66D2              Key_Wait:
 838+ 66D2 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 839+ 66D6 28 FA                        jr      z, Key_Wait
 840+ 66D8
 841+ 66D8 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 842+ 66DB
 843+ 66DB                              // decode character from above table
 844+ 66DB 21 6A 66                     ld      hl, Key_Table
 845+ 66DE 01 0B 00                     ld      bc, $000B
 846+ 66E1 ED B1                        cpir
 847+ 66E3 20 05                        jr      nz, Key_DontMap
 848+ 66E5 21 75 66                         ld      hl, Key_MapTo
 849+ 66E8 09                               add     hl, bc
 850+ 66E9 7E                               ld      a, (hl)
 851+ 66EA FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 852+ 66EC 20 09                        jr      nz, Key_NoCapsLock
 853+ 66EE 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 854+ 66F1 7E                               ld      a, (hl)
 855+ 66F2 EE 08                            xor     $08
 856+ 66F4 77                               ld      (hl), a
 857+ 66F5 3E 00                            ld      a, NUL_CHAR
 858+ 66F7 6F           Key_NoCapsLock: ld      l, a
 859+ 66F8 26 00                        ld      h, 0                // Prepare TOS
 860+ 66FA
 861+ 66FA FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 862+ 66FE
 863+ 66FE C1                           pop     bc                  // Restore Instruction Pointer
 864+ 66FF
 865+ 66FF                              psh1
 865+ 66FF E5          >                push    hl
 865+ 6700 DD E9       >                jp      (ix)
 866+ 6702
 867+ 6702
 868+ 6702              //  ______________________________________________________________________
 869+ 6702              //
 870+ 6702              // click        --
 871+ 6702              // This definition need Standard ROM Interrupt to be served
 872+ 6702              //
 873+ 6702              //              New_Def CLICK, "CLICK", is_code, is_normal
 874+ 6702              //
 875+ 6702              //                push    bc
 876+ 6702              //              ld      a, ($5C48)          // BORDCR system variable
 877+ 6702              //              rra
 878+ 6702              //              rra
 879+ 6702              //              rra
 880+ 6702              //              or      $18                 // quick'n'dirty click
 881+ 6702              //              out     ($fe), a
 882+ 6702              //              ld      b, 0
 883+ 6702              //              djnz    $                   // wait loop
 884+ 6702              //              xor     $18
 885+ 6702              //              out     ($fe), a
 886+ 6702              //                pop     bc
 887+ 6702
 888+ 6702              //              next
 889+ 6702
 890+ 6702              //  ______________________________________________________________________
 891+ 6702              //
 892+ 6702              // key?         -- f
 893+ 6702              // key available
 894+ 6702              //
 895+ 6702              //              New_Def KEY_Q, "KEY?", is_code, is_normal
 896+ 6702              //
 897+ 6702              //              ld      hl, 0000
 898+ 6702              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
 899+ 6702              //              jr      z, Key_Q
 900+ 6702              //                  dec     hl
 901+ 6702              // Key_Q:
 902+ 6702              //                psh1
 903+ 6702              //              next
 904+ 6702
 905+ 6702              //  ______________________________________________________________________
 906+ 6702              //
 907+ 6702              // ?terminal    -- FALSE | TRUE
 908+ 6702              // test for BREAK keypress
 909+ 6702                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
 909+ 6702             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 909+ 6702             >
 909+ 6702             >                // dummy db directives used to calculate length of namec
 909+ 6702 3F 54 45 52 >                db      "?TERMINAL"
 909+ 6706 4D 49 4E 41 >
 909+ 670A 4C          >
 909+ 670B             >len_NFA         defl    $ - temp_NFA
 909+ 670B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 909+ 6702             >
 909+ 6702 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 909+ 6703 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
 909+ 6707 4D 49 4E 41 >
 909+ 670B 4C          >
 909+ 670C             >                org     $-1                 // alter last byte of Name just above to set
 909+ 670B CC          >                db      {b $} | END_BIT     // msb as name end
 909+ 670C             >
 909+ 670C CB 66       >                dw      last_NFA            // Link to previous definition Name
 909+ 670E             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 909+ 670E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 909+ 670E ~           >
 909+ 670E ~           >
 909+ 670E             >                endif           ; ok        // for other definitions it "points" the correct handler
 909+ 670E             >                // Use of "; ok" to suppress "warning[fwdref]"
 909+ 670E             >
 909+ 670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 910+ 670E D9                           exx
 911+ 670F 01 FE 7F                     ld      bc, $7ffe
 912+ 6712 ED 50                        in      d, (c)
 913+ 6714 41                           ld      b, c
 914+ 6715 ED 78                        in      a, (c)
 915+ 6717 B2                           or       d
 916+ 6718 1F                           rra
 917+ 6719 3F                           ccf
 918+ 671A ED 62                        sbc     hl, hl
 919+ 671C E5                           push    hl
 920+ 671D D9                           exx
 921+ 671E                              next
 921+ 671E DD E9       >                jp      (ix)
 922+ 6720
 923+ 6720
 924+ 6720              //  ______________________________________________________________________
 925+ 6720              //
 926+ 6720              // inkey        -- c | 0
 927+ 6720              // call ROM inkey$ routine, returns c or "zero".
 928+ 6720
 929+ 6720                              New_Def INKEY, "INKEY", is_code, is_normal
 929+ 6720             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ 6720             >
 929+ 6720             >                // dummy db directives used to calculate length of namec
 929+ 6720 49 4E 4B 45 >                db      "INKEY"
 929+ 6724 59          >
 929+ 6725             >len_NFA         defl    $ - temp_NFA
 929+ 6725             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ 6720             >
 929+ 6720 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ 6721 49 4E 4B 45 >                db      "INKEY"               // name string in 7-bit ascii, but
 929+ 6725 59          >
 929+ 6726             >                org     $-1                 // alter last byte of Name just above to set
 929+ 6725 D9          >                db      {b $} | END_BIT     // msb as name end
 929+ 6726             >
 929+ 6726 02 67       >                dw      last_NFA            // Link to previous definition Name
 929+ 6728             >INKEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 6728 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 929+ 6728 ~           >
 929+ 6728 ~           >
 929+ 6728             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 6728             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 6728             >
 929+ 6728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 6728
 931+ 6728 C5                           push    bc
 932+ 6729 ED 73 92 63                  ld      (SP_Saved), sp
 933+ 672D 31 61 63                     ld      sp, Cold_origin - 5
 934+ 6730 DD E5                        push    ix
 935+ 6732 CD E6 15                     call    $15E6                   // instead of 15E9
 936+ 6735 DD E1                        pop     ix
 937+ 6737 ED 7B 92 63                  ld      sp, (SP_Saved)
 938+ 673B 6F                           ld      l, a
 939+ 673C 26 00                        ld      h, 0
 940+ 673E C1                           pop     bc
 941+ 673F                              psh1
 941+ 673F E5          >                push    hl
 941+ 6740 DD E9       >                jp      (ix)
 942+ 6742
 943+ 6742              //  ______________________________________________________________________
 944+ 6742              //
 945+ 6742              // select      n --
 946+ 6742              // selects the given channel number
 947+ 6742
 948+ 6742                              New_Def SELECT, "SELECT", is_code, is_normal
 948+ 6742             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ 6742             >
 948+ 6742             >                // dummy db directives used to calculate length of namec
 948+ 6742 53 45 4C 45 >                db      "SELECT"
 948+ 6746 43 54       >
 948+ 6748             >len_NFA         defl    $ - temp_NFA
 948+ 6748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ 6742             >
 948+ 6742 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ 6743 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
 948+ 6747 43 54       >
 948+ 6749             >                org     $-1                 // alter last byte of Name just above to set
 948+ 6748 D4          >                db      {b $} | END_BIT     // msb as name end
 948+ 6749             >
 948+ 6749 20 67       >                dw      last_NFA            // Link to previous definition Name
 948+ 674B             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 674B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 948+ 674B ~           >
 948+ 674B ~           >
 948+ 674B             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 674B             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 674B             >
 948+ 674B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 674B E1                           pop     hl
 950+ 674C C5                           push    bc
 951+ 674D 7D                           ld      a, l
 952+ 674E ED 73 92 63                  ld      (SP_Saved), sp
 953+ 6752 31 61 63                     ld      sp, Cold_origin - 5
 954+ 6755 DD E5                        push    ix
 955+ 6757 CD 01 16                     call    $1601
 956+ 675A DD E1                        pop     ix
 957+ 675C ED 7B 92 63                  ld      sp, (SP_Saved)
 958+ 6760 C1                           pop     bc
 959+ 6761
 960+ 6761                              next
 960+ 6761 DD E9       >                jp      (ix)
 961+ 6763
 962+ 6763              //  ______________________________________________________________________
 963+ 6763              //
 964+ 6763              // ZX Spectrum Next - Low Level disk primitives.
 965+ 6763              // this include is "here" for backward compatibility
 966+ 6763
 967+ 6763                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
   1++6763              //  ______________________________________________________________________
   2++6763              //
   3++6763              //  next-opt.asm
   4++6763              //
   5++6763              //  ZX Spectrum Next - peculiar definitions
   6++6763              //  ______________________________________________________________________
   7++6763
   8++6763              //  ______________________________________________________________________
   9++6763              //
  10++6763              // f_seek       d u -- f
  11++6763              // Seek to position d in file-handle u.
  12++6763              // Return a false-flag 0 on success, True flag on error
  13++6763                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++6763             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++6763             >
  13++6763             >                // dummy db directives used to calculate length of namec
  13++6763 46 5F 53 45 >                db      "F_SEEK"
  13++6767 45 4B       >
  13++6769             >len_NFA         defl    $ - temp_NFA
  13++6769             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++6763             >
  13++6763 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++6764 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++6768 45 4B       >
  13++676A             >                org     $-1                 // alter last byte of Name just above to set
  13++6769 CB          >                db      {b $} | END_BIT     // msb as name end
  13++676A             >
  13++676A 42 67       >                dw      last_NFA            // Link to previous definition Name
  13++676C             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++676C ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++676C ~           >
  13++676C ~           >
  13++676C             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++676C             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++676C             >
  13++676C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++676C E1                           pop     hl                  // file-handle
  15++676D 7D                           ld      a, l                // file-handle
  16++676E 60                           ld      h, b                // save Intruction Pointer
  17++676F 69                           ld      l, c
  18++6770 C1                           pop     bc                  // bc has high-word of d
  19++6771 D1                           pop     de
  20++6772 DD E5                        push    ix
  21++6774 E5                           push    hl                  // save Instruction Pointer
  22++6775 DD 21 00 00                  ld      ix, 0
  23++6779 CF                           rst     $08
  24++677A 9F                           db      $9F
  25++677B              F_Seek_Exit:
  26++677B C1                           pop     bc                  // restore Instruction Pointer
  27++677C DD E1                        pop     ix
  28++677E ED 62                        sbc     hl, hl              // to get 0 or -1
  29++6780
  30++6780                              psh1
  30++6780 E5          >                push    hl
  30++6781 DD E9       >                jp      (ix)
  31++6783
  32++6783              //  ______________________________________________________________________
  33++6783              //
  34++6783              // f_close      u -- f
  35++6783              // Close file-handle u.
  36++6783              // Return 0 on success, True flag on error
  37++6783
  38++6783                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  38++6783             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  38++6783             >
  38++6783             >                // dummy db directives used to calculate length of namec
  38++6783 46 5F 43 4C >                db      "F_CLOSE"
  38++6787 4F 53 45    >
  38++678A             >len_NFA         defl    $ - temp_NFA
  38++678A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  38++6783             >
  38++6783 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  38++6784 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  38++6788 4F 53 45    >
  38++678B             >                org     $-1                 // alter last byte of Name just above to set
  38++678A C5          >                db      {b $} | END_BIT     // msb as name end
  38++678B             >
  38++678B 63 67       >                dw      last_NFA            // Link to previous definition Name
  38++678D             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  38++678D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  38++678D ~           >
  38++678D ~           >
  38++678D             >                endif           ; ok        // for other definitions it "points" the correct handler
  38++678D             >                // Use of "; ok" to suppress "warning[fwdref]"
  38++678D             >
  38++678D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  39++678D
  40++678D E1                           pop     hl
  41++678E 7D                           ld      a, l                // file-handle
  42++678F DD E5                        push    ix
  43++6791 C5                           push    bc                  // Save Instruction pointer
  44++6792 CF                           rst     $08
  45++6793 9B                           db      $9B
  46++6794 18 E5                        jr      F_Seek_Exit
  47++6796              //              pop     bc
  48++6796              //              pop     ix
  49++6796              //              sbc     hl, hl
  50++6796              //              psh1
  51++6796
  52++6796              //  ______________________________________________________________________
  53++6796              //
  54++6796              // f_sync      u -- f
  55++6796              // Close file-handle u.
  56++6796              // Return 0 on success, True flag on error
  57++6796
  58++6796                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  58++6796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  58++6796             >
  58++6796             >                // dummy db directives used to calculate length of namec
  58++6796 46 5F 53 59 >                db      "F_SYNC"
  58++679A 4E 43       >
  58++679C             >len_NFA         defl    $ - temp_NFA
  58++679C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  58++6796             >
  58++6796 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  58++6797 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  58++679B 4E 43       >
  58++679D             >                org     $-1                 // alter last byte of Name just above to set
  58++679C C3          >                db      {b $} | END_BIT     // msb as name end
  58++679D             >
  58++679D 83 67       >                dw      last_NFA            // Link to previous definition Name
  58++679F             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  58++679F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  58++679F ~           >
  58++679F ~           >
  58++679F             >                endif           ; ok        // for other definitions it "points" the correct handler
  58++679F             >                // Use of "; ok" to suppress "warning[fwdref]"
  58++679F             >
  58++679F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  59++679F E1                           pop     hl
  60++67A0 7D                           ld      a, l                // file-handle
  61++67A1 DD E5                        push    ix
  62++67A3 C5                           push    bc
  63++67A4 CF                           rst     $08
  64++67A5 9C                           db      $9C
  65++67A6 18 D3                        jr      F_Seek_Exit
  66++67A8              //              pop     bc
  67++67A8              //              pop     ix
  68++67A8              //              sbc     hl, hl
  69++67A8              //              psh1
  70++67A8
  71++67A8              //  ______________________________________________________________________
  72++67A8              //
  73++67A8              // f_fgetpos    u -- d f
  74++67A8              // Seek to position d in file-handle u.
  75++67A8              // Return a false-flag 0 on success, True flag on error
  76++67A8                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  76++67A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  76++67A8             >
  76++67A8             >                // dummy db directives used to calculate length of namec
  76++67A8 46 5F 46 47 >                db      "F_FGETPOS"
  76++67AC 45 54 50 4F >
  76++67B0 53          >
  76++67B1             >len_NFA         defl    $ - temp_NFA
  76++67B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  76++67A8             >
  76++67A8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  76++67A9 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  76++67AD 45 54 50 4F >
  76++67B1 53          >
  76++67B2             >                org     $-1                 // alter last byte of Name just above to set
  76++67B1 D3          >                db      {b $} | END_BIT     // msb as name end
  76++67B2             >
  76++67B2 96 67       >                dw      last_NFA            // Link to previous definition Name
  76++67B4             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  76++67B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  76++67B4 ~           >
  76++67B4 ~           >
  76++67B4             >                endif           ; ok        // for other definitions it "points" the correct handler
  76++67B4             >                // Use of "; ok" to suppress "warning[fwdref]"
  76++67B4             >
  76++67B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  77++67B4 E1                           pop     hl
  78++67B5 7D                           ld      a, l                // file-handle
  79++67B6 DD E5                        push    ix
  80++67B8 C5                           push    bc
  81++67B9 CF                           rst     $08
  82++67BA A0                           db      $A0
  83++67BB E1                           pop     hl                  // restore Instruction Pointer
  84++67BC DD E1                        pop     ix
  85++67BE D5                           push    de
  86++67BF C5                           push    bc
  87++67C0 44                           ld      b, h                // restore Instruction Pointer
  88++67C1 4D                           ld      c, l
  89++67C2 ED 62                        sbc     hl, hl
  90++67C4
  91++67C4                              psh1
  91++67C4 E5          >                push    hl
  91++67C5 DD E9       >                jp      (ix)
  92++67C7
  93++67C7              //  ______________________________________________________________________
  94++67C7              //
  95++67C7              // f_read       a b u -- n f
  96++67C7              // Read b bytes from file-handle u to address a
  97++67C7              // Return the actual number n of bytes read
  98++67C7              // Return 0 on success, True flag on error
  99++67C7                              New_Def F_READ, "F_READ", is_code, is_normal
  99++67C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  99++67C7             >
  99++67C7             >                // dummy db directives used to calculate length of namec
  99++67C7 46 5F 52 45 >                db      "F_READ"
  99++67CB 41 44       >
  99++67CD             >len_NFA         defl    $ - temp_NFA
  99++67CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  99++67C7             >
  99++67C7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  99++67C8 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
  99++67CC 41 44       >
  99++67CE             >                org     $-1                 // alter last byte of Name just above to set
  99++67CD C4          >                db      {b $} | END_BIT     // msb as name end
  99++67CE             >
  99++67CE A8 67       >                dw      last_NFA            // Link to previous definition Name
  99++67D0             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  99++67D0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  99++67D0 ~           >
  99++67D0 ~           >
  99++67D0             >                endif           ; ok        // for other definitions it "points" the correct handler
  99++67D0             >                // Use of "; ok" to suppress "warning[fwdref]"
  99++67D0             >
  99++67D0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 100++67D0
 101++67D0 50                           ld      d, b
 102++67D1 59                           ld      e, c
 103++67D2 E1                           pop     hl
 104++67D3 7D                           ld      a, l                // file-handle
 105++67D4 C1                           pop     bc                  // bc has bytes to read
 106++67D5 DD E3                        ex      (sp), ix            // ix has address
 107++67D7 D5                           push    de                  // Save Instruction pointer
 108++67D8 CF                           rst     $08
 109++67D9 9D                           db      $9D
 110++67DA              F_Read_Exit:
 111++67DA C1                           pop     bc                  // Restore Instruction pointer
 112++67DB DD E1                        pop     ix                  // Restore ix
 113++67DD D5                           push    de                  // bytes written
 114++67DE ED 62                        sbc     hl, hl
 115++67E0
 116++67E0                              psh1
 116++67E0 E5          >                push    hl
 116++67E1 DD E9       >                jp      (ix)
 117++67E3
 118++67E3              //  ______________________________________________________________________
 119++67E3              //
 120++67E3              // f_write      a b u -- n f
 121++67E3              // Write bytes currently stored at address a to file-handle u.
 122++67E3              // Return the actual n bytes written and 0 on success, True flag on error.
 123++67E3                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 123++67E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123++67E3             >
 123++67E3             >                // dummy db directives used to calculate length of namec
 123++67E3 46 5F 57 52 >                db      "F_WRITE"
 123++67E7 49 54 45    >
 123++67EA             >len_NFA         defl    $ - temp_NFA
 123++67EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123++67E3             >
 123++67E3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123++67E4 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 123++67E8 49 54 45    >
 123++67EB             >                org     $-1                 // alter last byte of Name just above to set
 123++67EA C5          >                db      {b $} | END_BIT     // msb as name end
 123++67EB             >
 123++67EB C7 67       >                dw      last_NFA            // Link to previous definition Name
 123++67ED             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 123++67ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
 123++67ED ~           >
 123++67ED ~           >
 123++67ED             >                endif           ; ok        // for other definitions it "points" the correct handler
 123++67ED             >                // Use of "; ok" to suppress "warning[fwdref]"
 123++67ED             >
 123++67ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124++67ED
 125++67ED 50                           ld      d, b
 126++67EE 59                           ld      e, c
 127++67EF E1                           pop     hl
 128++67F0 7D                           ld      a, l                // file-handle
 129++67F1 C1                           pop     bc                  // bc has bytes to read
 130++67F2 DD E3                        ex      (sp), ix            // ix has address
 131++67F4 D5                           push    de                  // Save Instruction pointer
 132++67F5 CF                           rst     $08
 133++67F6 9E                           db      $9E
 134++67F7 18 E1                        jr F_Read_Exit
 135++67F9              //              pop     bc                  // Restore Instruction pointer
 136++67F9              //              pop     ix                  // Restore ix
 137++67F9              //              push    de                  // bytes written
 138++67F9              //              sbc     hl, hl
 139++67F9              //
 140++67F9              //              psh1
 141++67F9
 142++67F9              //  ______________________________________________________________________
 143++67F9              //
 144++67F9              // f_open       a1 a2 b -- u f
 145++67F9              // open a file
 146++67F9              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 147++67F9              // a2 is address to an 8-byte header data used in some cases.
 148++67F9              // b is access mode-byte, that is a combination of:
 149++67F9              // any/all of:
 150++67F9              //   esx_mode_read          $01 request read access
 151++67F9              //   esx_mode_write         $02 request write access
 152++67F9              //   esx_mode_use_header    $40 read/write +3DOS header
 153++67F9              // plus one of:
 154++67F9              //   esx_mode_open_exist    $00 only open existing file
 155++67F9              //   esx_mode_open_creat    $08 open existing or create file
 156++67F9              //   esx_mode_creat_noexist $04 create new file, error if exists
 157++67F9              //   esx_mode_creat_trunc   $0c create new file, delete existing
 158++67F9              // Return file-handle u and 0 on success, True flag on error
 159++67F9                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 159++67F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159++67F9             >
 159++67F9             >                // dummy db directives used to calculate length of namec
 159++67F9 46 5F 4F 50 >                db      "F_OPEN"
 159++67FD 45 4E       >
 159++67FF             >len_NFA         defl    $ - temp_NFA
 159++67FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159++67F9             >
 159++67F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159++67FA 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 159++67FE 45 4E       >
 159++6800             >                org     $-1                 // alter last byte of Name just above to set
 159++67FF CE          >                db      {b $} | END_BIT     // msb as name end
 159++6800             >
 159++6800 E3 67       >                dw      last_NFA            // Link to previous definition Name
 159++6802             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 159++6802 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 159++6802 ~           >
 159++6802 ~           >
 159++6802             >                endif           ; ok        // for other definitions it "points" the correct handler
 159++6802             >                // Use of "; ok" to suppress "warning[fwdref]"
 159++6802             >
 159++6802             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160++6802 60                           ld      h, b                // Save Instruction pointer
 161++6803 69                           ld      l, c
 162++6804 C1                           pop     bc                  // file-mode
 163++6805 41                           ld      b, c                // file-mode
 164++6806 D1                           pop     de                  // 8-bytes buffer if any
 165++6807 DD E3                        ex      (sp), ix            // filespec nul-terminated
 166++6809 E5                           push    hl                  // Save Instruction pointer
 167++680A 3E 2A                        ld      a, "*"
 168++680C CF                           rst     $08
 169++680D 9A                           db      $9A
 170++680E              F_Open_Exit:
 171++680E 5F                           ld      e, a
 172++680F 16 00                        ld      d, 0
 173++6811 18 C7                        jr F_Read_Exit
 174++6813
 175++6813              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 176++6813              //   \ FILENAME 1+ PAD 1 F_OPEN
 177++6813              //   \ DROP
 178++6813              //   \ F_CLOSE
 179++6813
 180++6813
 181++6813              //  ______________________________________________________________________
 182++6813              //
 183++6813              // f_opendir    a1 a2 b -- u f
 184++6813              // open a file
 185++6813                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 185++6813             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185++6813             >
 185++6813             >                // dummy db directives used to calculate length of namec
 185++6813 46 5F 4F 50 >                db      "F_OPENDIR"
 185++6817 45 4E 44 49 >
 185++681B 52          >
 185++681C             >len_NFA         defl    $ - temp_NFA
 185++681C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185++6813             >
 185++6813 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185++6814 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 185++6818 45 4E 44 49 >
 185++681C 52          >
 185++681D             >                org     $-1                 // alter last byte of Name just above to set
 185++681C D2          >                db      {b $} | END_BIT     // msb as name end
 185++681D             >
 185++681D F9 67       >                dw      last_NFA            // Link to previous definition Name
 185++681F             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 185++681F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 185++681F ~           >
 185++681F ~           >
 185++681F             >                endif           ; ok        // for other definitions it "points" the correct handler
 185++681F             >                // Use of "; ok" to suppress "warning[fwdref]"
 185++681F             >
 185++681F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186++681F DD E3                        ex      (sp), ix            // filespec nul-terminated
 187++6821 C5                           push    bc                  // Save Instruction pointer
 188++6822 06 10                        ld      b, $10              // file-mode
 189++6824 3E 43                        ld      a, "C"
 190++6826 CF                           rst     $08
 191++6827 A3                           db      $A3
 192++6828 18 E4                        jr      F_Open_Exit
 193++682A
 194++682A
 195++682A              //  ______________________________________________________________________
 196++682A              //
 197++682A              // f_readdir    a1 a2 b -- u f
 198++682A              // open a file
 199++682A                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 199++682A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199++682A             >
 199++682A             >                // dummy db directives used to calculate length of namec
 199++682A 46 5F 52 45 >                db      "F_READDIR"
 199++682E 41 44 44 49 >
 199++6832 52          >
 199++6833             >len_NFA         defl    $ - temp_NFA
 199++6833             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199++682A             >
 199++682A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199++682B 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 199++682F 41 44 44 49 >
 199++6833 52          >
 199++6834             >                org     $-1                 // alter last byte of Name just above to set
 199++6833 D2          >                db      {b $} | END_BIT     // msb as name end
 199++6834             >
 199++6834 13 68       >                dw      last_NFA            // Link to previous definition Name
 199++6836             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 199++6836 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 199++6836 ~           >
 199++6836 ~           >
 199++6836             >                endif           ; ok        // for other definitions it "points" the correct handler
 199++6836             >                // Use of "; ok" to suppress "warning[fwdref]"
 199++6836             >
 199++6836             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200++6836 E1                           pop     hl
 201++6837 7D                           ld      a, l
 202++6838 D1                           pop     de
 203++6839 DD E3                        ex      (sp), ix            // filespec nul-terminated
 204++683B C5                           push    bc                  // Save Instruction pointer
 205++683C CF                           rst     $08
 206++683D A4                           db      $A4
 207++683E 18 CE                        jr      F_Open_Exit
 208++6840
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt0.asm
 968+ 6840
 969+ 6840
 970+ 6840              //  ______________________________________________________________________
 971+ 6840              //
 972+ 6840              // cmove    a1 a2 u --
 973+ 6840              // If u > 0, moves memory content starting at address a1 for n bytes long
 974+ 6840              // storing then starting at address addr2.
 975+ 6840              // The content of a1 is moved first. See CMOVE> also.
 976+ 6840                              New_Def CMOVE, "CMOVE", is_code, is_normal
 976+ 6840             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 976+ 6840             >
 976+ 6840             >                // dummy db directives used to calculate length of namec
 976+ 6840 43 4D 4F 56 >                db      "CMOVE"
 976+ 6844 45          >
 976+ 6845             >len_NFA         defl    $ - temp_NFA
 976+ 6845             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 976+ 6840             >
 976+ 6840 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 976+ 6841 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
 976+ 6845 45          >
 976+ 6846             >                org     $-1                 // alter last byte of Name just above to set
 976+ 6845 C5          >                db      {b $} | END_BIT     // msb as name end
 976+ 6846             >
 976+ 6846 2A 68       >                dw      last_NFA            // Link to previous definition Name
 976+ 6848             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 976+ 6848 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 976+ 6848 ~           >
 976+ 6848 ~           >
 976+ 6848             >                endif           ; ok        // for other definitions it "points" the correct handler
 976+ 6848             >                // Use of "; ok" to suppress "warning[fwdref]"
 976+ 6848             >
 976+ 6848             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 977+ 6848 D9                           exx
 978+ 6849
 979+ 6849 C1                           pop     bc                  // bc has counter
 980+ 684A D1                           pop     de                  // de now has dest
 981+ 684B E1                           pop     hl                 // hl has source, save Instruction Pointer
 982+ 684C 78                           ld      a, b
 983+ 684D B1                           or      c
 984+ 684E 28 02                        jr      z, Cmove_NoMove
 985+ 6850 ED B0                            ldir
 986+ 6852              Cmove_NoMove:
 987+ 6852 D9                           exx
 988+ 6853
 989+ 6853                              next
 989+ 6853 DD E9       >                jp      (ix)
 990+ 6855
 991+ 6855              //  ______________________________________________________________________
 992+ 6855              //
 993+ 6855              // cmove>    a1 a2 u --
 994+ 6855              // If u > 0, moves memory content starting at address a1 for n bytes long
 995+ 6855              // storing then starting at address addr2.
 996+ 6855              // The content of a1 is moved last. See cmove.
 997+ 6855                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
 997+ 6855             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 997+ 6855             >
 997+ 6855             >                // dummy db directives used to calculate length of namec
 997+ 6855 43 4D 4F 56 >                db      "CMOVE>"
 997+ 6859 45 3E       >
 997+ 685B             >len_NFA         defl    $ - temp_NFA
 997+ 685B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 997+ 6855             >
 997+ 6855 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 997+ 6856 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
 997+ 685A 45 3E       >
 997+ 685C             >                org     $-1                 // alter last byte of Name just above to set
 997+ 685B BE          >                db      {b $} | END_BIT     // msb as name end
 997+ 685C             >
 997+ 685C 40 68       >                dw      last_NFA            // Link to previous definition Name
 997+ 685E             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 997+ 685E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 997+ 685E ~           >
 997+ 685E ~           >
 997+ 685E             >                endif           ; ok        // for other definitions it "points" the correct handler
 997+ 685E             >                // Use of "; ok" to suppress "warning[fwdref]"
 997+ 685E             >
 997+ 685E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 998+ 685E D9                           exx
 999+ 685F
1000+ 685F C1                           pop     bc                  // bc has counter
1001+ 6860 D1                           pop     de                  // de has dest
1002+ 6861 E1                           pop     hl                  // hl has source, save Instruction Pointer
1003+ 6862 78                           ld      a, b
1004+ 6863 B1                           or      c
1005+ 6864 28 08                        jr      z, CmoveV_NoMove
1006+ 6866 EB                               ex      de, hl              // compute address to
1007+ 6867 09                               add     hl, bc              // operate backward
1008+ 6868 2B                               dec     hl
1009+ 6869 EB                               ex      de, hl
1010+ 686A 09                               add     hl, bc
1011+ 686B 2B                               dec     hl
1012+ 686C ED B8                            lddr                        // backward
1013+ 686E              CmoveV_NoMove:
1014+ 686E D9                           exx
1015+ 686F
1016+ 686F                              next
1016+ 686F DD E9       >                jp      (ix)
1017+ 6871
1018+ 6871              //  ______________________________________________________________________
1019+ 6871              //
1020+ 6871              // um*      u1 u2 -- ud
1021+ 6871              // Unsigned multiplication
1022+ 6871              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1023+ 6871              // On the stack a double number is treated as two single numbers
1024+ 6871              // where DE is on the top of the stack and HL is the second from top,
1025+ 6871              // Instead, in 2VARIABLE a double number is stored as EDLH.
1026+ 6871              // this definition could use "MUL" Z80N new op-code.
1027+ 6871                              New_Def UM_MUL, "UM*", is_code, is_normal
1027+ 6871             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1027+ 6871             >
1027+ 6871             >                // dummy db directives used to calculate length of namec
1027+ 6871 55 4D 2A    >                db      "UM*"
1027+ 6874             >len_NFA         defl    $ - temp_NFA
1027+ 6874             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1027+ 6871             >
1027+ 6871 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1027+ 6872 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1027+ 6875             >                org     $-1                 // alter last byte of Name just above to set
1027+ 6874 AA          >                db      {b $} | END_BIT     // msb as name end
1027+ 6875             >
1027+ 6875 55 68       >                dw      last_NFA            // Link to previous definition Name
1027+ 6877             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1027+ 6877 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1027+ 6877 ~           >
1027+ 6877 ~           >
1027+ 6877             >                endif           ; ok        // for other definitions it "points" the correct handler
1027+ 6877             >                // Use of "; ok" to suppress "warning[fwdref]"
1027+ 6877             >
1027+ 6877             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1028+ 6877 D9                           exx
1029+ 6878 D1                           pop     de                    // de has u2 operand
1030+ 6879 E1                           pop     hl                    // hl has u1 operand
1031+ 687A 45                           ld      b, l
1032+ 687B 4B                           ld      c, e
1033+ 687C 5D                           ld      e, l
1034+ 687D 6A                           ld      l, d
1035+ 687E E5                           push    hl
1036+ 687F 69                           ld      l, c
1037+ 6880 ED 30                        mul
1038+ 6882 EB                           ex      de, hl
1039+ 6883 ED 30                        mul
1040+ 6885 AF                           xor     a
1041+ 6886 19                           add     hl, de
1042+ 6887 8F                           adc     a
1043+ 6888 59                           ld      e, c
1044+ 6889 50                           ld      d, b
1045+ 688A ED 30                        mul
1046+ 688C 47                           ld      b, a
1047+ 688D 4C                           ld      c, h
1048+ 688E 7A                           ld      a, d
1049+ 688F 85                           add     l
1050+ 6890 67                           ld      h, a
1051+ 6891 6B                           ld      l, e
1052+ 6892 D1                           pop     de
1053+ 6893 ED 30                        mul
1054+ 6895 EB                           ex      de, hl
1055+ 6896 ED 4A                        adc     hl, bc
1056+ 6898 D5                           push    de
1057+ 6899 E5                           push    hl
1058+ 689A D9                           exx
1059+ 689B                              next
1059+ 689B DD E9       >                jp      (ix)
1060+ 689D
1061+ 689D              //  ______________________________________________________________________
1062+ 689D              //
1063+ 689D              // um/mod      ud u1 -- q r
1064+ 689D              // divides ud into u1 giving quotient q and remainder r
1065+ 689D              // algorithm takes 16 bit at a time starting from msb
1066+ 689D              // DE grows from lsb upward with quotient result
1067+ 689D              // HL keeps the remainder at each stage of division
1068+ 689D              // each loop 'lowers' the next binary digit to form the current dividend
1069+ 689D                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1069+ 689D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1069+ 689D             >
1069+ 689D             >                // dummy db directives used to calculate length of namec
1069+ 689D 55 4D 2F 4D >                db      "UM/MOD"
1069+ 68A1 4F 44       >
1069+ 68A3             >len_NFA         defl    $ - temp_NFA
1069+ 68A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1069+ 689D             >
1069+ 689D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1069+ 689E 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1069+ 68A2 4F 44       >
1069+ 68A4             >                org     $-1                 // alter last byte of Name just above to set
1069+ 68A3 C4          >                db      {b $} | END_BIT     // msb as name end
1069+ 68A4             >
1069+ 68A4 71 68       >                dw      last_NFA            // Link to previous definition Name
1069+ 68A6             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1069+ 68A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1069+ 68A6 ~           >
1069+ 68A6 ~           >
1069+ 68A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1069+ 68A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1069+ 68A6             >
1069+ 68A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1070+ 68A6 D9                           exx
1071+ 68A7 C1                           pop     bc                      // divisor
1072+ 68A8
1073+ 68A8 E1                           pop     hl                      // < high part
1074+ 68A9 D1                           pop     de                      // < low part and
1075+ 68AA
1076+ 68AA 7D                           ld      a, l                    // check without changing arguments
1077+ 68AB 91                           sub     c                       // if divisor is greater than high part
1078+ 68AC 7C                           ld      a, h                    // so quotient will be in range
1079+ 68AD 98                           sbc     a, b
1080+ 68AE 30 20                        jr      nc, Um_DivMod_OutOfRange
1081+ 68B0 3E 10                            ld      a, 16
1082+ 68B2              Um_DivMod_Loop:
1083+ 68B2 CB 23                                sla     e
1084+ 68B4 CB 12                                rl      d
1085+ 68B6 ED 6A                                adc     hl, hl
1086+ 68B8 30 05                                jr      nc, Um_DivMod_Carry
1087+ 68BA A7                                       and     a
1088+ 68BB ED 42                                    sbc     hl, bc
1089+ 68BD 18 07                                jr      Um_DivMod_Endif    // else
1090+ 68BF              Um_DivMod_Carry:
1091+ 68BF A7                                       and     a
1092+ 68C0 ED 42                                    sbc     hl, bc
1093+ 68C2 30 02                                    jr      nc, Um_DivMod_Endif
1094+ 68C4 09                                           add     hl, bc
1095+ 68C5 1B                                           dec     de
1096+ 68C6              Um_DivMod_Endif:                                   // endif
1097+ 68C6 13                                   inc     de
1098+ 68C7 3D                                   dec     a
1099+ 68C8 20 E8                            jr      nz, Um_DivMod_Loop
1100+ 68CA EB                               ex      de, hl
1101+ 68CB              Um_DivMod_Bailout:
1102+ 68CB D5                               push    de                  // de := remanider
1103+ 68CC E5                               push    hl                  // hl := quotient
1104+ 68CD D9                               exx
1105+ 68CE                                  next
1105+ 68CE DD E9       >                jp      (ix)
1106+ 68D0
1107+ 68D0              Um_DivMod_OutOfRange:
1108+ 68D0 21 FF FF                     ld      hl, -1
1109+ 68D3 54                           ld      d, h
1110+ 68D4 5D                           ld      e, l
1111+ 68D5 18 F4                        jr      Um_DivMod_Bailout
1112+ 68D7
1113+ 68D7              //  ______________________________________________________________________
1114+ 68D7              //
1115+ 68D7              // and          n1 n2 -- n3
1116+ 68D7              // bit logical AND. Returns n3 as n1 & n2
1117+ 68D7                              New_Def AND_OP, "AND", is_code, is_normal
1117+ 68D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1117+ 68D7             >
1117+ 68D7             >                // dummy db directives used to calculate length of namec
1117+ 68D7 41 4E 44    >                db      "AND"
1117+ 68DA             >len_NFA         defl    $ - temp_NFA
1117+ 68DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1117+ 68D7             >
1117+ 68D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1117+ 68D8 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1117+ 68DB             >                org     $-1                 // alter last byte of Name just above to set
1117+ 68DA C4          >                db      {b $} | END_BIT     // msb as name end
1117+ 68DB             >
1117+ 68DB 9D 68       >                dw      last_NFA            // Link to previous definition Name
1117+ 68DD             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1117+ 68DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1117+ 68DD ~           >
1117+ 68DD ~           >
1117+ 68DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1117+ 68DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1117+ 68DD             >
1117+ 68DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1118+ 68DD D1                           pop     de
1119+ 68DE E1                           pop     hl
1120+ 68DF 7B                           ld      a, e
1121+ 68E0 A5                           and     l
1122+ 68E1 6F                           ld      l, a
1123+ 68E2 7A                           ld      a, d
1124+ 68E3 A4                           and     h
1125+ 68E4 67                           ld      h, a
1126+ 68E5
1127+ 68E5                              psh1
1127+ 68E5 E5          >                push    hl
1127+ 68E6 DD E9       >                jp      (ix)
1128+ 68E8
1129+ 68E8              //  ______________________________________________________________________
1130+ 68E8              //
1131+ 68E8              // or           n1 n2 -- n3
1132+ 68E8              // bit logical OR. Returns n3 as n1 | n2
1133+ 68E8                              New_Def OR_OP, "OR", is_code, is_normal
1133+ 68E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1133+ 68E8             >
1133+ 68E8             >                // dummy db directives used to calculate length of namec
1133+ 68E8 4F 52       >                db      "OR"
1133+ 68EA             >len_NFA         defl    $ - temp_NFA
1133+ 68EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1133+ 68E8             >
1133+ 68E8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1133+ 68E9 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1133+ 68EB             >                org     $-1                 // alter last byte of Name just above to set
1133+ 68EA D2          >                db      {b $} | END_BIT     // msb as name end
1133+ 68EB             >
1133+ 68EB D7 68       >                dw      last_NFA            // Link to previous definition Name
1133+ 68ED             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1133+ 68ED ~           >                call    runcode ; ok        // for primitive definitions  actual code
1133+ 68ED ~           >
1133+ 68ED ~           >
1133+ 68ED             >                endif           ; ok        // for other definitions it "points" the correct handler
1133+ 68ED             >                // Use of "; ok" to suppress "warning[fwdref]"
1133+ 68ED             >
1133+ 68ED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1134+ 68ED D1                           pop     de
1135+ 68EE E1                           pop     hl
1136+ 68EF 7B                           ld      a, e
1137+ 68F0 B5                           or      l
1138+ 68F1 6F                           ld      l, a
1139+ 68F2 7A                           ld      a, d
1140+ 68F3 B4                           or      h
1141+ 68F4 67                           ld      h, a
1142+ 68F5
1143+ 68F5                              psh1
1143+ 68F5 E5          >                push    hl
1143+ 68F6 DD E9       >                jp      (ix)
1144+ 68F8
1145+ 68F8              //  ______________________________________________________________________
1146+ 68F8              //
1147+ 68F8              // xor          n1 n2 -- n3
1148+ 68F8              // bit logical OR. Returns n3 as n1 ^ n2
1149+ 68F8                              New_Def XOR_OP, "XOR", is_code, is_normal
1149+ 68F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1149+ 68F8             >
1149+ 68F8             >                // dummy db directives used to calculate length of namec
1149+ 68F8 58 4F 52    >                db      "XOR"
1149+ 68FB             >len_NFA         defl    $ - temp_NFA
1149+ 68FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1149+ 68F8             >
1149+ 68F8 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1149+ 68F9 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1149+ 68FC             >                org     $-1                 // alter last byte of Name just above to set
1149+ 68FB D2          >                db      {b $} | END_BIT     // msb as name end
1149+ 68FC             >
1149+ 68FC E8 68       >                dw      last_NFA            // Link to previous definition Name
1149+ 68FE             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1149+ 68FE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1149+ 68FE ~           >
1149+ 68FE ~           >
1149+ 68FE             >                endif           ; ok        // for other definitions it "points" the correct handler
1149+ 68FE             >                // Use of "; ok" to suppress "warning[fwdref]"
1149+ 68FE             >
1149+ 68FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1150+ 68FE D1                           pop     de
1151+ 68FF E1                           pop     hl
1152+ 6900 7B                           ld      a, e
1153+ 6901 AD                           xor     l
1154+ 6902 6F                           ld      l, a
1155+ 6903 7A                           ld      a, d
1156+ 6904 AC                           xor     h
1157+ 6905 67                           ld      h, a
1158+ 6906
1159+ 6906                              psh1
1159+ 6906 E5          >                push    hl
1159+ 6907 DD E9       >                jp      (ix)
1160+ 6909
1161+ 6909              //  ______________________________________________________________________
1162+ 6909              //
1163+ 6909              // sp@      -- a
1164+ 6909              // returns on top of stack the value of SP before execution
1165+ 6909                              New_Def SPFETCH, "SP@", is_code, is_normal
1165+ 6909             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1165+ 6909             >
1165+ 6909             >                // dummy db directives used to calculate length of namec
1165+ 6909 53 50 40    >                db      "SP@"
1165+ 690C             >len_NFA         defl    $ - temp_NFA
1165+ 690C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1165+ 6909             >
1165+ 6909 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1165+ 690A 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1165+ 690D             >                org     $-1                 // alter last byte of Name just above to set
1165+ 690C C0          >                db      {b $} | END_BIT     // msb as name end
1165+ 690D             >
1165+ 690D F8 68       >                dw      last_NFA            // Link to previous definition Name
1165+ 690F             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1165+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1165+ 690F ~           >
1165+ 690F ~           >
1165+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1165+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1165+ 690F             >
1165+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1166+ 690F
1167+ 690F 21 00 00                     ld      hl, 0
1168+ 6912 39                           add     hl, sp
1169+ 6913
1170+ 6913                              psh1
1170+ 6913 E5          >                push    hl
1170+ 6914 DD E9       >                jp      (ix)
1171+ 6916
1172+ 6916              //  ______________________________________________________________________
1173+ 6916              //
1174+ 6916              // sp!      a --
1175+ 6916              // restore SP to the initial value passed
1176+ 6916              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1177+ 6916                              New_Def SPSTORE, "SP!", is_code, is_normal
1177+ 6916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1177+ 6916             >
1177+ 6916             >                // dummy db directives used to calculate length of namec
1177+ 6916 53 50 21    >                db      "SP!"
1177+ 6919             >len_NFA         defl    $ - temp_NFA
1177+ 6919             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1177+ 6916             >
1177+ 6916 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1177+ 6917 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1177+ 691A             >                org     $-1                 // alter last byte of Name just above to set
1177+ 6919 A1          >                db      {b $} | END_BIT     // msb as name end
1177+ 691A             >
1177+ 691A 09 69       >                dw      last_NFA            // Link to previous definition Name
1177+ 691C             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1177+ 691C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1177+ 691C ~           >
1177+ 691C ~           >
1177+ 691C             >                endif           ; ok        // for other definitions it "points" the correct handler
1177+ 691C             >                // Use of "; ok" to suppress "warning[fwdref]"
1177+ 691C             >
1177+ 691C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1178+ 691C E1                           pop     hl
1179+ 691D F9                           ld      sp, hl
1180+ 691E
1181+ 691E                              next
1181+ 691E DD E9       >                jp      (ix)
1182+ 6920
1183+ 6920              //  ______________________________________________________________________
1184+ 6920              //
1185+ 6920              // rp@      -- a
1186+ 6920              // returns on top of stack the value of Return-Pointer
1187+ 6920                              New_Def RPFETCH, "RP@", is_code, is_normal
1187+ 6920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ 6920             >
1187+ 6920             >                // dummy db directives used to calculate length of namec
1187+ 6920 52 50 40    >                db      "RP@"
1187+ 6923             >len_NFA         defl    $ - temp_NFA
1187+ 6923             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ 6920             >
1187+ 6920 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ 6921 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1187+ 6924             >                org     $-1                 // alter last byte of Name just above to set
1187+ 6923 C0          >                db      {b $} | END_BIT     // msb as name end
1187+ 6924             >
1187+ 6924 16 69       >                dw      last_NFA            // Link to previous definition Name
1187+ 6926             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 6926 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1187+ 6926 ~           >
1187+ 6926 ~           >
1187+ 6926             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 6926             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 6926             >
1187+ 6926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 6926
1189+ 6926                              ldhlrp
1189+ 6926 2A 96 63    >                ld      hl,(RP_Pointer)
1190+ 6929
1191+ 6929                              psh1
1191+ 6929 E5          >                push    hl
1191+ 692A DD E9       >                jp      (ix)
1192+ 692C
1193+ 692C              //  ______________________________________________________________________
1194+ 692C              //
1195+ 692C              // rp!      a --
1196+ 692C              // restore RP to the initial value passed
1197+ 692C              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1198+ 692C                              New_Def RPSTORE, "RP!", is_code, is_normal
1198+ 692C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ 692C             >
1198+ 692C             >                // dummy db directives used to calculate length of namec
1198+ 692C 52 50 21    >                db      "RP!"
1198+ 692F             >len_NFA         defl    $ - temp_NFA
1198+ 692F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ 692C             >
1198+ 692C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ 692D 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1198+ 6930             >                org     $-1                 // alter last byte of Name just above to set
1198+ 692F A1          >                db      {b $} | END_BIT     // msb as name end
1198+ 6930             >
1198+ 6930 20 69       >                dw      last_NFA            // Link to previous definition Name
1198+ 6932             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 6932 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1198+ 6932 ~           >
1198+ 6932 ~           >
1198+ 6932             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 6932             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 6932             >
1198+ 6932             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 6932 E1                           pop     hl
1200+ 6933                              ldrphl
1200+ 6933 22 96 63    >                ld      (RP_Pointer),hl
1201+ 6936
1202+ 6936                              next
1202+ 6936 DD E9       >                jp      (ix)
1203+ 6938
1204+ 6938              //  ______________________________________________________________________
1205+ 6938              //
1206+ 6938              // exit       --
1207+ 6938              // exits back to the caller word
1208+ 6938                              New_Def EXIT, "EXIT", is_code, is_normal
1208+ 6938             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ 6938             >
1208+ 6938             >                // dummy db directives used to calculate length of namec
1208+ 6938 45 58 49 54 >                db      "EXIT"
1208+ 693C             >len_NFA         defl    $ - temp_NFA
1208+ 693C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ 6938             >
1208+ 6938 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ 6939 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1208+ 693D             >                org     $-1                 // alter last byte of Name just above to set
1208+ 693C D4          >                db      {b $} | END_BIT     // msb as name end
1208+ 693D             >
1208+ 693D 2C 69       >                dw      last_NFA            // Link to previous definition Name
1208+ 693F             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 693F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1208+ 693F ~           >
1208+ 693F ~           >
1208+ 693F             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 693F             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 693F             >
1208+ 693F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 693F                              ldhlrp                      // Get Return Stack Pointer
1209+ 693F 2A 96 63    >                ld      hl,(RP_Pointer)
1210+ 6942 4E                           ld      c, (hl)             // pop Instruction Pointer
1211+ 6943 23                           inc     hl                  // from Return Stack
1212+ 6944 46                           ld      b, (hl)
1213+ 6945 23                           inc     hl
1214+ 6946                              ldrphl                      // Set Return Stack Pointer
1214+ 6946 22 96 63    >                ld      (RP_Pointer),hl
1215+ 6949                              next
1215+ 6949 DD E9       >                jp      (ix)
1216+ 694B
1217+ 694B              //  ______________________________________________________________________
1218+ 694B              //
1219+ 694B              // lastl      --
1220+ 694B              // exits back to the caller word
1221+ 694B              //              New_Def EXIT, "LASTL", is_code, is_normal
1222+ 694B              //              ldhlrp                      // Get Return Stack Pointer
1223+ 694B              //              ld      e, (hl)             // pop Instruction Pointer
1224+ 694B              //              inc     hl                  // from Return Stack
1225+ 694B              //              ld      d, (hl)
1226+ 694B              //              inc     hl
1227+ 694B              //              ld      (hl), e
1228+ 694B              //              inc     hl
1229+ 694B              //              ld      (hl), d
1230+ 694B              //              next
1231+ 694B
1232+ 694B              //  ______________________________________________________________________
1233+ 694B              //
1234+ 694B              // >r      n --
1235+ 694B              // pop from calculator-stack and push into return-stack
1236+ 694B                              New_Def TO_R, ">R", is_code, is_normal
1236+ 694B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1236+ 694B             >
1236+ 694B             >                // dummy db directives used to calculate length of namec
1236+ 694B 3E 52       >                db      ">R"
1236+ 694D             >len_NFA         defl    $ - temp_NFA
1236+ 694D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1236+ 694B             >
1236+ 694B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1236+ 694C 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1236+ 694E             >                org     $-1                 // alter last byte of Name just above to set
1236+ 694D D2          >                db      {b $} | END_BIT     // msb as name end
1236+ 694E             >
1236+ 694E 38 69       >                dw      last_NFA            // Link to previous definition Name
1236+ 6950             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1236+ 6950 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1236+ 6950 ~           >
1236+ 6950 ~           >
1236+ 6950             >                endif           ; ok        // for other definitions it "points" the correct handler
1236+ 6950             >                // Use of "; ok" to suppress "warning[fwdref]"
1236+ 6950             >
1236+ 6950             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1237+ 6950 D1                           pop     de
1238+ 6951                              ldhlrp
1238+ 6951 2A 96 63    >                ld      hl,(RP_Pointer)
1239+ 6954 2B                           dec     hl
1240+ 6955 72                           ld      (hl), d             // store current TOS
1241+ 6956 2B                           dec     hl                  // to Return Stack
1242+ 6957 73                           ld      (hl), e
1243+ 6958                              ldrphl
1243+ 6958 22 96 63    >                ld      (RP_Pointer),hl
1244+ 695B
1245+ 695B                              next
1245+ 695B DD E9       >                jp      (ix)
1246+ 695D
1247+ 695D              //  ______________________________________________________________________
1248+ 695D              //
1249+ 695D              // r>      -- n
1250+ 695D              // pop from return-stack and push into calculator-stack
1251+ 695D                              New_Def R_TO, "R>", is_code, is_normal
1251+ 695D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1251+ 695D             >
1251+ 695D             >                // dummy db directives used to calculate length of namec
1251+ 695D 52 3E       >                db      "R>"
1251+ 695F             >len_NFA         defl    $ - temp_NFA
1251+ 695F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1251+ 695D             >
1251+ 695D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1251+ 695E 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1251+ 6960             >                org     $-1                 // alter last byte of Name just above to set
1251+ 695F BE          >                db      {b $} | END_BIT     // msb as name end
1251+ 6960             >
1251+ 6960 4B 69       >                dw      last_NFA            // Link to previous definition Name
1251+ 6962             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1251+ 6962 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1251+ 6962 ~           >
1251+ 6962 ~           >
1251+ 6962             >                endif           ; ok        // for other definitions it "points" the correct handler
1251+ 6962             >                // Use of "; ok" to suppress "warning[fwdref]"
1251+ 6962             >
1251+ 6962             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1252+ 6962
1253+ 6962                              ldhlrp
1253+ 6962 2A 96 63    >                ld      hl,(RP_Pointer)
1254+ 6965 5E                           ld      e, (hl)             // retrieve from Return Stack
1255+ 6966 23                           inc     hl
1256+ 6967 56                           ld      d, (hl)
1257+ 6968 23                           inc     hl
1258+ 6969                              ldrphl
1258+ 6969 22 96 63    >                ld      (RP_Pointer),hl
1259+ 696C D5                           push    de
1260+ 696D                              next
1260+ 696D DD E9       >                jp      (ix)
1261+ 696F
1262+ 696F              //  ______________________________________________________________________
1263+ 696F              //
1264+ 696F              // r@           -- n
1265+ 696F              // return on top of stack the value of top of return-stack
1266+ 696F              // Since this is the same as I, we alter R's CFA to jump there
1267+ 696F                              New_Def R_OP, "R@", is_code, is_normal
1267+ 696F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1267+ 696F             >
1267+ 696F             >                // dummy db directives used to calculate length of namec
1267+ 696F 52 40       >                db      "R@"
1267+ 6971             >len_NFA         defl    $ - temp_NFA
1267+ 6971             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1267+ 696F             >
1267+ 696F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1267+ 6970 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1267+ 6972             >                org     $-1                 // alter last byte of Name just above to set
1267+ 6971 C0          >                db      {b $} | END_BIT     // msb as name end
1267+ 6972             >
1267+ 6972 5D 69       >                dw      last_NFA            // Link to previous definition Name
1267+ 6974             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1267+ 6974 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1267+ 6974 ~           >
1267+ 6974 ~           >
1267+ 6974             >                endif           ; ok        // for other definitions it "points" the correct handler
1267+ 6974             >                // Use of "; ok" to suppress "warning[fwdref]"
1267+ 6974             >
1267+ 6974             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1268+ 6974 C3 78 64                     jp      I_Ptr
1269+ 6977
1270+ 6977              //  ______________________________________________________________________
1271+ 6977              //
1272+ 6977              // r            -- n
1273+ 6977              // return on top of stack the value of top of return-stack
1274+ 6977              // Since this is the same as I, we alter R's CFA to jump there
1275+ 6977              //              New_Def R_OLD, "R", is_code, is_normal
1276+ 6977              //              jp      I_Ptr
1277+ 6977
1278+ 6977              //  ______________________________________________________________________
1279+ 6977              //
1280+ 6977              // 0=           n -- f
1281+ 6977              // true (non zero) if n is zero, false (0) elsewere
1282+ 6977                              New_Def ZEQUAL, "0=", is_code, is_normal
1282+ 6977             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1282+ 6977             >
1282+ 6977             >                // dummy db directives used to calculate length of namec
1282+ 6977 30 3D       >                db      "0="
1282+ 6979             >len_NFA         defl    $ - temp_NFA
1282+ 6979             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1282+ 6977             >
1282+ 6977 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1282+ 6978 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1282+ 697A             >                org     $-1                 // alter last byte of Name just above to set
1282+ 6979 BD          >                db      {b $} | END_BIT     // msb as name end
1282+ 697A             >
1282+ 697A 6F 69       >                dw      last_NFA            // Link to previous definition Name
1282+ 697C             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1282+ 697C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1282+ 697C ~           >
1282+ 697C ~           >
1282+ 697C             >                endif           ; ok        // for other definitions it "points" the correct handler
1282+ 697C             >                // Use of "; ok" to suppress "warning[fwdref]"
1282+ 697C             >
1282+ 697C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1283+ 697C              Zero_Equal:
1284+ 697C E1                           pop     hl
1285+ 697D 7D                           ld      a, l
1286+ 697E B4                           or      h
1287+ 697F 21 00 00                     ld      hl, FALSE_FLAG
1288+ 6982 20 01                        jr      nz, ZEqual_Skip
1289+ 6984 2B                               dec     hl
1290+ 6985              ZEqual_Skip:
1291+ 6985                              psh1
1291+ 6985 E5          >                push    hl
1291+ 6986 DD E9       >                jp      (ix)
1292+ 6988
1293+ 6988              //  ______________________________________________________________________
1294+ 6988              //
1295+ 6988              // not         a1 -- a2
1296+ 6988              // increment by 2 top of stack
1297+ 6988                              New_Def NOT_OP, "NOT", is_code, is_normal
1297+ 6988             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1297+ 6988             >
1297+ 6988             >                // dummy db directives used to calculate length of namec
1297+ 6988 4E 4F 54    >                db      "NOT"
1297+ 698B             >len_NFA         defl    $ - temp_NFA
1297+ 698B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1297+ 6988             >
1297+ 6988 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1297+ 6989 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1297+ 698C             >                org     $-1                 // alter last byte of Name just above to set
1297+ 698B D4          >                db      {b $} | END_BIT     // msb as name end
1297+ 698C             >
1297+ 698C 77 69       >                dw      last_NFA            // Link to previous definition Name
1297+ 698E             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1297+ 698E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1297+ 698E ~           >
1297+ 698E ~           >
1297+ 698E             >                endif           ; ok        // for other definitions it "points" the correct handler
1297+ 698E             >                // Use of "; ok" to suppress "warning[fwdref]"
1297+ 698E             >
1297+ 698E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1298+ 698E C3 7C 69                     jp      Zero_Equal
1299+ 6991
1300+ 6991              //  ______________________________________________________________________
1301+ 6991              //
1302+ 6991              // 0<           n -- f
1303+ 6991              // true (non zero) if n is less than zero, false (0) elsewere
1304+ 6991                              New_Def ZLESS, "0<", is_code, is_normal
1304+ 6991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ 6991             >
1304+ 6991             >                // dummy db directives used to calculate length of namec
1304+ 6991 30 3C       >                db      "0<"
1304+ 6993             >len_NFA         defl    $ - temp_NFA
1304+ 6993             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ 6991             >
1304+ 6991 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ 6992 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1304+ 6994             >                org     $-1                 // alter last byte of Name just above to set
1304+ 6993 BC          >                db      {b $} | END_BIT     // msb as name end
1304+ 6994             >
1304+ 6994 88 69       >                dw      last_NFA            // Link to previous definition Name
1304+ 6996             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6996 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 6996 ~           >
1304+ 6996 ~           >
1304+ 6996             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6996             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6996             >
1304+ 6996             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6996 E1                           pop     hl
1306+ 6997 29                           add     hl, hl
1307+ 6998 ED 62                        sbc     hl, hl
1308+ 699A                              psh1
1308+ 699A E5          >                push    hl
1308+ 699B DD E9       >                jp      (ix)
1309+ 699D
1310+ 699D              //  ______________________________________________________________________
1311+ 699D              //
1312+ 699D              // 0>           n -- f
1313+ 699D              // true (non zero) if n is less than zero, false (0) elsewere
1314+ 699D                              New_Def ZGREATER, "0>", is_code, is_normal
1314+ 699D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1314+ 699D             >
1314+ 699D             >                // dummy db directives used to calculate length of namec
1314+ 699D 30 3E       >                db      "0>"
1314+ 699F             >len_NFA         defl    $ - temp_NFA
1314+ 699F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1314+ 699D             >
1314+ 699D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1314+ 699E 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1314+ 69A0             >                org     $-1                 // alter last byte of Name just above to set
1314+ 699F BE          >                db      {b $} | END_BIT     // msb as name end
1314+ 69A0             >
1314+ 69A0 91 69       >                dw      last_NFA            // Link to previous definition Name
1314+ 69A2             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1314+ 69A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1314+ 69A2 ~           >
1314+ 69A2 ~           >
1314+ 69A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1314+ 69A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1314+ 69A2             >
1314+ 69A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1315+ 69A2 E1                           pop     hl
1316+ 69A3 7D                           ld      a, l
1317+ 69A4 B4                           or      h
1318+ 69A5 29                           add     hl, hl
1319+ 69A6 21 00 00                     ld      hl, FALSE_FLAG
1320+ 69A9 38 04                        jr      c, ZGreater_Skip
1321+ 69AB A7                               and     a
1322+ 69AC 28 01                            jr      z, ZGreater_Skip
1323+ 69AE 2B                                   dec     hl
1324+ 69AF              ZGreater_Skip:
1325+ 69AF                              psh1
1325+ 69AF E5          >                push    hl
1325+ 69B0 DD E9       >                jp      (ix)
1326+ 69B2
1327+ 69B2              //  ______________________________________________________________________
1328+ 69B2              //
1329+ 69B2              // +            n1 n2 -- n3
1330+ 69B2              // returns the unsigned sum of two top values
1331+ 69B2                              New_Def PLUS, "+", is_code, is_normal
1331+ 69B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1331+ 69B2             >
1331+ 69B2             >                // dummy db directives used to calculate length of namec
1331+ 69B2 2B          >                db      "+"
1331+ 69B3             >len_NFA         defl    $ - temp_NFA
1331+ 69B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1331+ 69B2             >
1331+ 69B2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1331+ 69B3 2B          >                db      "+"               // name string in 7-bit ascii, but
1331+ 69B4             >                org     $-1                 // alter last byte of Name just above to set
1331+ 69B3 AB          >                db      {b $} | END_BIT     // msb as name end
1331+ 69B4             >
1331+ 69B4 9D 69       >                dw      last_NFA            // Link to previous definition Name
1331+ 69B6             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1331+ 69B6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1331+ 69B6 ~           >
1331+ 69B6 ~           >
1331+ 69B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1331+ 69B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1331+ 69B6             >
1331+ 69B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1332+ 69B6 E1                           pop     hl
1333+ 69B7 D1                           pop     de
1334+ 69B8 19                           add     hl, de
1335+ 69B9
1336+ 69B9                              psh1
1336+ 69B9 E5          >                push    hl
1336+ 69BA DD E9       >                jp      (ix)
1337+ 69BC
1338+ 69BC
1339+ 69BC              //  ______________________________________________________________________
1340+ 69BC              //
1341+ 69BC              // d+           d1 d2 -- d3
1342+ 69BC              // returns the unsigned sum of two top double-numbers
1343+ 69BC              //      d2  d1
1344+ 69BC              //      h l h l
1345+ 69BC              // SP   LHEDLHED
1346+ 69BC              // SP  +01234567
1347+ 69BC                              New_Def DPLUS, "D+", is_code, is_normal
1347+ 69BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1347+ 69BC             >
1347+ 69BC             >                // dummy db directives used to calculate length of namec
1347+ 69BC 44 2B       >                db      "D+"
1347+ 69BE             >len_NFA         defl    $ - temp_NFA
1347+ 69BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1347+ 69BC             >
1347+ 69BC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1347+ 69BD 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1347+ 69BF             >                org     $-1                 // alter last byte of Name just above to set
1347+ 69BE AB          >                db      {b $} | END_BIT     // msb as name end
1347+ 69BF             >
1347+ 69BF B2 69       >                dw      last_NFA            // Link to previous definition Name
1347+ 69C1             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1347+ 69C1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1347+ 69C1 ~           >
1347+ 69C1 ~           >
1347+ 69C1             >                endif           ; ok        // for other definitions it "points" the correct handler
1347+ 69C1             >                // Use of "; ok" to suppress "warning[fwdref]"
1347+ 69C1             >
1347+ 69C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1348+ 69C1
1349+ 69C1 D9                           exx
1350+ 69C2 C1                           pop     bc                  // bc := d2.H
1351+ 69C3 D1                           pop     de                  // hl := d2.L
1352+ 69C4 E1                           pop     hl                  // d1.H
1353+ 69C5 E3                           ex      (sp), hl            // d1.L
1354+ 69C6 19                           add     hl, de              // hl := d2.L + d1.L
1355+ 69C7 E3                           ex      (sp), hl            // d1.H
1356+ 69C8 ED 4A                        adc     hl, bc              // d1.H + d2.H
1357+ 69CA E5                           push    hl
1358+ 69CB D9                           exx
1359+ 69CC                              next
1359+ 69CC DD E9       >                jp      (ix)
1360+ 69CE
1361+ 69CE              //  ______________________________________________________________________
1362+ 69CE              //
1363+ 69CE              // 1+           n1 -- n2
1364+ 69CE              // increment by 1 top of stack
1365+ 69CE                              New_Def ONE_PLUS, "1+", is_code, is_normal
1365+ 69CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1365+ 69CE             >
1365+ 69CE             >                // dummy db directives used to calculate length of namec
1365+ 69CE 31 2B       >                db      "1+"
1365+ 69D0             >len_NFA         defl    $ - temp_NFA
1365+ 69D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1365+ 69CE             >
1365+ 69CE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1365+ 69CF 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1365+ 69D1             >                org     $-1                 // alter last byte of Name just above to set
1365+ 69D0 AB          >                db      {b $} | END_BIT     // msb as name end
1365+ 69D1             >
1365+ 69D1 BC 69       >                dw      last_NFA            // Link to previous definition Name
1365+ 69D3             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1365+ 69D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1365+ 69D3 ~           >
1365+ 69D3 ~           >
1365+ 69D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1365+ 69D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1365+ 69D3             >
1365+ 69D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1366+ 69D3 E1                           pop     hl
1367+ 69D4 23                           inc     hl
1368+ 69D5
1369+ 69D5                              psh1
1369+ 69D5 E5          >                push    hl
1369+ 69D6 DD E9       >                jp      (ix)
1370+ 69D8
1371+ 69D8              //  ______________________________________________________________________
1372+ 69D8              //
1373+ 69D8              // 1-           n1 -- n2
1374+ 69D8              // decrement by 1 top of stack
1375+ 69D8                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1375+ 69D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1375+ 69D8             >
1375+ 69D8             >                // dummy db directives used to calculate length of namec
1375+ 69D8 31 2D       >                db      "1-"
1375+ 69DA             >len_NFA         defl    $ - temp_NFA
1375+ 69DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1375+ 69D8             >
1375+ 69D8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1375+ 69D9 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1375+ 69DB             >                org     $-1                 // alter last byte of Name just above to set
1375+ 69DA AD          >                db      {b $} | END_BIT     // msb as name end
1375+ 69DB             >
1375+ 69DB CE 69       >                dw      last_NFA            // Link to previous definition Name
1375+ 69DD             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1375+ 69DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1375+ 69DD ~           >
1375+ 69DD ~           >
1375+ 69DD             >                endif           ; ok        // for other definitions it "points" the correct handler
1375+ 69DD             >                // Use of "; ok" to suppress "warning[fwdref]"
1375+ 69DD             >
1375+ 69DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1376+ 69DD E1                           pop     hl
1377+ 69DE 2B                           dec     hl
1378+ 69DF
1379+ 69DF                              psh1
1379+ 69DF E5          >                push    hl
1379+ 69E0 DD E9       >                jp      (ix)
1380+ 69E2
1381+ 69E2              //  ______________________________________________________________________
1382+ 69E2              //
1383+ 69E2              // 2+           n1 -- n2
1384+ 69E2              // increment by 2 top of stack
1385+ 69E2                              New_Def TWO_PLUS, "2+", is_code, is_normal
1385+ 69E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1385+ 69E2             >
1385+ 69E2             >                // dummy db directives used to calculate length of namec
1385+ 69E2 32 2B       >                db      "2+"
1385+ 69E4             >len_NFA         defl    $ - temp_NFA
1385+ 69E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1385+ 69E2             >
1385+ 69E2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1385+ 69E3 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1385+ 69E5             >                org     $-1                 // alter last byte of Name just above to set
1385+ 69E4 AB          >                db      {b $} | END_BIT     // msb as name end
1385+ 69E5             >
1385+ 69E5 D8 69       >                dw      last_NFA            // Link to previous definition Name
1385+ 69E7             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1385+ 69E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1385+ 69E7 ~           >
1385+ 69E7 ~           >
1385+ 69E7             >                endif           ; ok        // for other definitions it "points" the correct handler
1385+ 69E7             >                // Use of "; ok" to suppress "warning[fwdref]"
1385+ 69E7             >
1385+ 69E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1386+ 69E7              Two_Plus:
1387+ 69E7 E1                           pop     hl
1388+ 69E8 23                           inc     hl
1389+ 69E9 23                           inc     hl
1390+ 69EA
1391+ 69EA                              psh1
1391+ 69EA E5          >                push    hl
1391+ 69EB DD E9       >                jp      (ix)
1392+ 69ED
1393+ 69ED              //  ______________________________________________________________________
1394+ 69ED              //
1395+ 69ED              // cell+        a1 -- a2
1396+ 69ED              // increment by 2 top of stack
1397+ 69ED                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1397+ 69ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1397+ 69ED             >
1397+ 69ED             >                // dummy db directives used to calculate length of namec
1397+ 69ED 43 45 4C 4C >                db      "CELL+"
1397+ 69F1 2B          >
1397+ 69F2             >len_NFA         defl    $ - temp_NFA
1397+ 69F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1397+ 69ED             >
1397+ 69ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1397+ 69EE 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1397+ 69F2 2B          >
1397+ 69F3             >                org     $-1                 // alter last byte of Name just above to set
1397+ 69F2 AB          >                db      {b $} | END_BIT     // msb as name end
1397+ 69F3             >
1397+ 69F3 E2 69       >                dw      last_NFA            // Link to previous definition Name
1397+ 69F5             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1397+ 69F5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1397+ 69F5 ~           >
1397+ 69F5 ~           >
1397+ 69F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1397+ 69F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1397+ 69F5             >
1397+ 69F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1398+ 69F5 C3 E7 69                     jp      Two_Plus
1399+ 69F8
1400+ 69F8              //  ______________________________________________________________________
1401+ 69F8              //
1402+ 69F8              // align        a1 -- a2
1403+ 69F8              // align memory : not used
1404+ 69F8              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1405+ 69F8              //            next
1406+ 69F8
1407+ 69F8              //  ______________________________________________________________________
1408+ 69F8              //
1409+ 69F8              // cell-        a1 -- a2
1410+ 69F8              // decrement by 2 top of stack
1411+ 69F8                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1411+ 69F8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1411+ 69F8             >
1411+ 69F8             >                // dummy db directives used to calculate length of namec
1411+ 69F8 43 45 4C 4C >                db      "CELL-"
1411+ 69FC 2D          >
1411+ 69FD             >len_NFA         defl    $ - temp_NFA
1411+ 69FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1411+ 69F8             >
1411+ 69F8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1411+ 69F9 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1411+ 69FD 2D          >
1411+ 69FE             >                org     $-1                 // alter last byte of Name just above to set
1411+ 69FD AD          >                db      {b $} | END_BIT     // msb as name end
1411+ 69FE             >
1411+ 69FE ED 69       >                dw      last_NFA            // Link to previous definition Name
1411+ 6A00             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1411+ 6A00 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1411+ 6A00 ~           >
1411+ 6A00 ~           >
1411+ 6A00             >                endif           ; ok        // for other definitions it "points" the correct handler
1411+ 6A00             >                // Use of "; ok" to suppress "warning[fwdref]"
1411+ 6A00             >
1411+ 6A00             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1412+ 6A00              CellMinus:
1413+ 6A00 E1                           pop     hl
1414+ 6A01 2B                           dec     hl
1415+ 6A02 2B                           dec     hl
1416+ 6A03
1417+ 6A03                              psh1
1417+ 6A03 E5          >                push    hl
1417+ 6A04 DD E9       >                jp      (ix)
1418+ 6A06
1419+ 6A06              //  ______________________________________________________________________
1420+ 6A06              //
1421+ 6A06              // 2-           a1 -- a2
1422+ 6A06              // decrement by 2 top of stack
1423+ 6A06                              New_Def TWO_MINUS, "2-", is_code, is_normal
1423+ 6A06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1423+ 6A06             >
1423+ 6A06             >                // dummy db directives used to calculate length of namec
1423+ 6A06 32 2D       >                db      "2-"
1423+ 6A08             >len_NFA         defl    $ - temp_NFA
1423+ 6A08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1423+ 6A06             >
1423+ 6A06 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1423+ 6A07 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1423+ 6A09             >                org     $-1                 // alter last byte of Name just above to set
1423+ 6A08 AD          >                db      {b $} | END_BIT     // msb as name end
1423+ 6A09             >
1423+ 6A09 F8 69       >                dw      last_NFA            // Link to previous definition Name
1423+ 6A0B             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1423+ 6A0B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1423+ 6A0B ~           >
1423+ 6A0B ~           >
1423+ 6A0B             >                endif           ; ok        // for other definitions it "points" the correct handler
1423+ 6A0B             >                // Use of "; ok" to suppress "warning[fwdref]"
1423+ 6A0B             >
1423+ 6A0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1424+ 6A0B C3 00 6A                     jp      CellMinus
1425+ 6A0E
1426+ 6A0E              //  ______________________________________________________________________
1427+ 6A0E              //
1428+ 6A0E              // negate       n1 -- n2
1429+ 6A0E              // change the sign of number
1430+ 6A0E                              New_Def MINUS, "NEGATE", is_code, is_normal
1430+ 6A0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1430+ 6A0E             >
1430+ 6A0E             >                // dummy db directives used to calculate length of namec
1430+ 6A0E 4E 45 47 41 >                db      "NEGATE"
1430+ 6A12 54 45       >
1430+ 6A14             >len_NFA         defl    $ - temp_NFA
1430+ 6A14             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1430+ 6A0E             >
1430+ 6A0E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1430+ 6A0F 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1430+ 6A13 54 45       >
1430+ 6A15             >                org     $-1                 // alter last byte of Name just above to set
1430+ 6A14 C5          >                db      {b $} | END_BIT     // msb as name end
1430+ 6A15             >
1430+ 6A15 06 6A       >                dw      last_NFA            // Link to previous definition Name
1430+ 6A17             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1430+ 6A17 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1430+ 6A17 ~           >
1430+ 6A17 ~           >
1430+ 6A17             >                endif           ; ok        // for other definitions it "points" the correct handler
1430+ 6A17             >                // Use of "; ok" to suppress "warning[fwdref]"
1430+ 6A17             >
1430+ 6A17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1431+ 6A17 21 00 00                     ld      hl, 0               // subtract from 0
1432+ 6A1A D1                           pop     de
1433+ 6A1B B7                           or      a
1434+ 6A1C ED 52                        sbc     hl, de
1435+ 6A1E
1436+ 6A1E                              psh1
1436+ 6A1E E5          >                push    hl
1436+ 6A1F DD E9       >                jp      (ix)
1437+ 6A21
1438+ 6A21              //  ______________________________________________________________________
1439+ 6A21              //
1440+ 6A21              // dnegate      d1 -- d2
1441+ 6A21              // change the sign of a double number
1442+ 6A21                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1442+ 6A21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1442+ 6A21             >
1442+ 6A21             >                // dummy db directives used to calculate length of namec
1442+ 6A21 44 4E 45 47 >                db      "DNEGATE"
1442+ 6A25 41 54 45    >
1442+ 6A28             >len_NFA         defl    $ - temp_NFA
1442+ 6A28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1442+ 6A21             >
1442+ 6A21 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1442+ 6A22 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1442+ 6A26 41 54 45    >
1442+ 6A29             >                org     $-1                 // alter last byte of Name just above to set
1442+ 6A28 C5          >                db      {b $} | END_BIT     // msb as name end
1442+ 6A29             >
1442+ 6A29 0E 6A       >                dw      last_NFA            // Link to previous definition Name
1442+ 6A2B             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1442+ 6A2B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1442+ 6A2B ~           >
1442+ 6A2B ~           >
1442+ 6A2B             >                endif           ; ok        // for other definitions it "points" the correct handler
1442+ 6A2B             >                // Use of "; ok" to suppress "warning[fwdref]"
1442+ 6A2B             >
1442+ 6A2B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1443+ 6A2B D9                           exx
1444+ 6A2C C1                           pop     bc                  // d1.H
1445+ 6A2D D1                           pop     de                  // d1.L
1446+ 6A2E AF                           xor     a
1447+ 6A2F 67                           ld      h, a
1448+ 6A30 6F                           ld      l, a
1449+ 6A31 ED 52                        sbc     hl, de              // subtact from zero
1450+ 6A33 E5                           push    hl                  // > d2-L
1451+ 6A34 67                           ld      h, a
1452+ 6A35 6F                           ld      l, a
1453+ 6A36 ED 42                        sbc     hl, bc              // subtract from zero with carry
1454+ 6A38                                                          // > d2-H
1455+ 6A38 E5                           push    hl
1456+ 6A39 D9                           exx
1457+ 6A3A                              next
1457+ 6A3A DD E9       >                jp      (ix)
1458+ 6A3C
1459+ 6A3C              //  ______________________________________________________________________
1460+ 6A3C              //
1461+ 6A3C              // over         n1 n2 -- n1 n2 n1
1462+ 6A3C              // copy the second value of stack and put it on top.
1463+ 6A3C                              New_Def OVER, "OVER", is_code, is_normal
1463+ 6A3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ 6A3C             >
1463+ 6A3C             >                // dummy db directives used to calculate length of namec
1463+ 6A3C 4F 56 45 52 >                db      "OVER"
1463+ 6A40             >len_NFA         defl    $ - temp_NFA
1463+ 6A40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ 6A3C             >
1463+ 6A3C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ 6A3D 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1463+ 6A41             >                org     $-1                 // alter last byte of Name just above to set
1463+ 6A40 D2          >                db      {b $} | END_BIT     // msb as name end
1463+ 6A41             >
1463+ 6A41 21 6A       >                dw      last_NFA            // Link to previous definition Name
1463+ 6A43             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 6A43 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1463+ 6A43 ~           >
1463+ 6A43 ~           >
1463+ 6A43             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 6A43             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 6A43             >
1463+ 6A43             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 6A43 D1                           pop     de                  //   n2
1465+ 6A44 E1                           pop     hl                  // < n1
1466+ 6A45 E5                           push    hl                  // > n1
1467+ 6A46 D5                           push    de                  // > n2
1468+ 6A47 E5                           push    hl                  // > n1
1469+ 6A48                              next
1469+ 6A48 DD E9       >                jp      (ix)
1470+ 6A4A
1471+ 6A4A              //  ______________________________________________________________________
1472+ 6A4A              //
1473+ 6A4A              // drop         n1 --
1474+ 6A4A              // drops the top of stack
1475+ 6A4A                              New_Def DROP, "DROP", is_code, is_normal
1475+ 6A4A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ 6A4A             >
1475+ 6A4A             >                // dummy db directives used to calculate length of namec
1475+ 6A4A 44 52 4F 50 >                db      "DROP"
1475+ 6A4E             >len_NFA         defl    $ - temp_NFA
1475+ 6A4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ 6A4A             >
1475+ 6A4A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ 6A4B 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1475+ 6A4F             >                org     $-1                 // alter last byte of Name just above to set
1475+ 6A4E D0          >                db      {b $} | END_BIT     // msb as name end
1475+ 6A4F             >
1475+ 6A4F 3C 6A       >                dw      last_NFA            // Link to previous definition Name
1475+ 6A51             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 6A51 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1475+ 6A51 ~           >
1475+ 6A51 ~           >
1475+ 6A51             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 6A51             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 6A51             >
1475+ 6A51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 6A51 E1                           pop     hl                  // < n1 and discard previous TOS
1477+ 6A52                              next
1477+ 6A52 DD E9       >                jp      (ix)
1478+ 6A54
1479+ 6A54              //  ______________________________________________________________________
1480+ 6A54              //
1481+ 6A54              // nip          n1 n2 -- n2
1482+ 6A54              // drops the second elemento on the stack
1483+ 6A54                              New_Def NIP, "NIP", is_code, is_normal
1483+ 6A54             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1483+ 6A54             >
1483+ 6A54             >                // dummy db directives used to calculate length of namec
1483+ 6A54 4E 49 50    >                db      "NIP"
1483+ 6A57             >len_NFA         defl    $ - temp_NFA
1483+ 6A57             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1483+ 6A54             >
1483+ 6A54 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1483+ 6A55 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1483+ 6A58             >                org     $-1                 // alter last byte of Name just above to set
1483+ 6A57 D0          >                db      {b $} | END_BIT     // msb as name end
1483+ 6A58             >
1483+ 6A58 4A 6A       >                dw      last_NFA            // Link to previous definition Name
1483+ 6A5A             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1483+ 6A5A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1483+ 6A5A ~           >
1483+ 6A5A ~           >
1483+ 6A5A             >                endif           ; ok        // for other definitions it "points" the correct handler
1483+ 6A5A             >                // Use of "; ok" to suppress "warning[fwdref]"
1483+ 6A5A             >
1483+ 6A5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1484+ 6A5A
1485+ 6A5A E1                           pop     hl                  // < n1 discarded
1486+ 6A5B E3                           ex      (sp), hl
1487+ 6A5C                              next
1487+ 6A5C DD E9       >                jp      (ix)
1488+ 6A5E
1489+ 6A5E              //  ______________________________________________________________________
1490+ 6A5E              //
1491+ 6A5E              // tuck         n1 n2 -- n2 n1 n2
1492+ 6A5E              // copy the top element after the second.
1493+ 6A5E                              New_Def TUCK, "TUCK", is_code, is_normal
1493+ 6A5E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1493+ 6A5E             >
1493+ 6A5E             >                // dummy db directives used to calculate length of namec
1493+ 6A5E 54 55 43 4B >                db      "TUCK"
1493+ 6A62             >len_NFA         defl    $ - temp_NFA
1493+ 6A62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1493+ 6A5E             >
1493+ 6A5E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1493+ 6A5F 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1493+ 6A63             >                org     $-1                 // alter last byte of Name just above to set
1493+ 6A62 CB          >                db      {b $} | END_BIT     // msb as name end
1493+ 6A63             >
1493+ 6A63 54 6A       >                dw      last_NFA            // Link to previous definition Name
1493+ 6A65             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1493+ 6A65 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1493+ 6A65 ~           >
1493+ 6A65 ~           >
1493+ 6A65             >                endif           ; ok        // for other definitions it "points" the correct handler
1493+ 6A65             >                // Use of "; ok" to suppress "warning[fwdref]"
1493+ 6A65             >
1493+ 6A65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1494+ 6A65 E1                           pop     hl
1495+ 6A66 D1                           pop     de                  // < n1
1496+ 6A67 E5                           push    hl                  // > n2  and TOS
1497+ 6A68 D5                           push    de                  // > n1
1498+ 6A69 E5                           push    hl
1499+ 6A6A                              next
1499+ 6A6A DD E9       >                jp      (ix)
1500+ 6A6C
1501+ 6A6C              //  ______________________________________________________________________
1502+ 6A6C              //
1503+ 6A6C              // swap         n1 n2 -- n2 n1
1504+ 6A6C              // swaps the two values on top of stack
1505+ 6A6C                              New_Def SWAP, "SWAP", is_code, is_normal
1505+ 6A6C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1505+ 6A6C             >
1505+ 6A6C             >                // dummy db directives used to calculate length of namec
1505+ 6A6C 53 57 41 50 >                db      "SWAP"
1505+ 6A70             >len_NFA         defl    $ - temp_NFA
1505+ 6A70             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1505+ 6A6C             >
1505+ 6A6C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1505+ 6A6D 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1505+ 6A71             >                org     $-1                 // alter last byte of Name just above to set
1505+ 6A70 D0          >                db      {b $} | END_BIT     // msb as name end
1505+ 6A71             >
1505+ 6A71 5E 6A       >                dw      last_NFA            // Link to previous definition Name
1505+ 6A73             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1505+ 6A73 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1505+ 6A73 ~           >
1505+ 6A73 ~           >
1505+ 6A73             >                endif           ; ok        // for other definitions it "points" the correct handler
1505+ 6A73             >                // Use of "; ok" to suppress "warning[fwdref]"
1505+ 6A73             >
1505+ 6A73             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1506+ 6A73 E1                           pop     hl                  // < n1
1507+ 6A74 E3                           ex      (sp),hl             // > n2
1508+ 6A75 E5                           push    hl                  // copy n1 to TOS
1509+ 6A76                              next
1509+ 6A76 DD E9       >                jp      (ix)
1510+ 6A78
1511+ 6A78              //  ______________________________________________________________________
1512+ 6A78              //
1513+ 6A78              // dup         n -- n n
1514+ 6A78              // duplicates the top value of stack
1515+ 6A78                              New_Def DUP, "DUP", is_code, is_normal
1515+ 6A78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1515+ 6A78             >
1515+ 6A78             >                // dummy db directives used to calculate length of namec
1515+ 6A78 44 55 50    >                db      "DUP"
1515+ 6A7B             >len_NFA         defl    $ - temp_NFA
1515+ 6A7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1515+ 6A78             >
1515+ 6A78 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1515+ 6A79 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1515+ 6A7C             >                org     $-1                 // alter last byte of Name just above to set
1515+ 6A7B D0          >                db      {b $} | END_BIT     // msb as name end
1515+ 6A7C             >
1515+ 6A7C 6C 6A       >                dw      last_NFA            // Link to previous definition Name
1515+ 6A7E             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1515+ 6A7E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1515+ 6A7E ~           >
1515+ 6A7E ~           >
1515+ 6A7E             >                endif           ; ok        // for other definitions it "points" the correct handler
1515+ 6A7E             >                // Use of "; ok" to suppress "warning[fwdref]"
1515+ 6A7E             >
1515+ 6A7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1516+ 6A7E E1                           pop     hl
1517+ 6A7F E5                           push    hl                  // > n duplicate TOS
1518+ 6A80 E5                           push    hl
1519+ 6A81                              next
1519+ 6A81 DD E9       >                jp      (ix)
1520+ 6A83
1521+ 6A83              //  ______________________________________________________________________
1522+ 6A83              //
1523+ 6A83              // rot         n1 n2 n3 -- n2 n3 n1
1524+ 6A83              // Rotates the 3 top values of stack by picking the 3rd in access-order
1525+ 6A83              // and putting it on top. The other two are shifted down one place.
1526+ 6A83                              New_Def ROT, "ROT", is_code, is_normal
1526+ 6A83             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1526+ 6A83             >
1526+ 6A83             >                // dummy db directives used to calculate length of namec
1526+ 6A83 52 4F 54    >                db      "ROT"
1526+ 6A86             >len_NFA         defl    $ - temp_NFA
1526+ 6A86             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1526+ 6A83             >
1526+ 6A83 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1526+ 6A84 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1526+ 6A87             >                org     $-1                 // alter last byte of Name just above to set
1526+ 6A86 D4          >                db      {b $} | END_BIT     // msb as name end
1526+ 6A87             >
1526+ 6A87 78 6A       >                dw      last_NFA            // Link to previous definition Name
1526+ 6A89             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1526+ 6A89 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1526+ 6A89 ~           >
1526+ 6A89 ~           >
1526+ 6A89             >                endif           ; ok        // for other definitions it "points" the correct handler
1526+ 6A89             >                // Use of "; ok" to suppress "warning[fwdref]"
1526+ 6A89             >
1526+ 6A89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1527+ 6A89 D1                           pop     de                  // < n3
1528+ 6A8A E1                           pop     hl                  // < n2
1529+ 6A8B E3                           ex      (sp),hl             // > n2 < n1
1530+ 6A8C D5                           push    de                  // > n3
1531+ 6A8D E5                           push    hl                  // copy n1 to TOS
1532+ 6A8E                              next
1532+ 6A8E DD E9       >                jp      (ix)
1533+ 6A90
1534+ 6A90              //  ______________________________________________________________________
1535+ 6A90              //
1536+ 6A90              // -rot         n1 n2 n3 -- n3 n1 n2
1537+ 6A90              // Rotates the 3 top values of stack by picking the 1st in access-order
1538+ 6A90              // and putting back to 3rd place. The other two are shifted down one place.
1539+ 6A90                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1539+ 6A90             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1539+ 6A90             >
1539+ 6A90             >                // dummy db directives used to calculate length of namec
1539+ 6A90 2D 52 4F 54 >                db      "-ROT"
1539+ 6A94             >len_NFA         defl    $ - temp_NFA
1539+ 6A94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1539+ 6A90             >
1539+ 6A90 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1539+ 6A91 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1539+ 6A95             >                org     $-1                 // alter last byte of Name just above to set
1539+ 6A94 D4          >                db      {b $} | END_BIT     // msb as name end
1539+ 6A95             >
1539+ 6A95 83 6A       >                dw      last_NFA            // Link to previous definition Name
1539+ 6A97             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1539+ 6A97 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1539+ 6A97 ~           >
1539+ 6A97 ~           >
1539+ 6A97             >                endif           ; ok        // for other definitions it "points" the correct handler
1539+ 6A97             >                // Use of "; ok" to suppress "warning[fwdref]"
1539+ 6A97             >
1539+ 6A97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1540+ 6A97 E1                           pop     hl                  // < n3
1541+ 6A98 D1                           pop     de                  // < n2
1542+ 6A99 E3                           ex      (sp),hl             // > n3 < n1
1543+ 6A9A E5                           push    hl                  // > n1
1544+ 6A9B D5                           push    de                  // copy n3 to TOS
1545+ 6A9C                              next
1545+ 6A9C DD E9       >                jp      (ix)
1546+ 6A9E
1547+ 6A9E              //  ______________________________________________________________________
1548+ 6A9E              //
1549+ 6A9E              // pick        n1 -- nx
1550+ 6A9E              // picks the nth element from TOS
1551+ 6A9E                              New_Def PICK, "PICK", is_code, is_normal
1551+ 6A9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1551+ 6A9E             >
1551+ 6A9E             >                // dummy db directives used to calculate length of namec
1551+ 6A9E 50 49 43 4B >                db      "PICK"
1551+ 6AA2             >len_NFA         defl    $ - temp_NFA
1551+ 6AA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1551+ 6A9E             >
1551+ 6A9E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1551+ 6A9F 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1551+ 6AA3             >                org     $-1                 // alter last byte of Name just above to set
1551+ 6AA2 CB          >                db      {b $} | END_BIT     // msb as name end
1551+ 6AA3             >
1551+ 6AA3 90 6A       >                dw      last_NFA            // Link to previous definition Name
1551+ 6AA5             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1551+ 6AA5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1551+ 6AA5 ~           >
1551+ 6AA5 ~           >
1551+ 6AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
1551+ 6AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
1551+ 6AA5             >
1551+ 6AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1552+ 6AA5 E1                           pop     hl                  // take TOS as index
1553+ 6AA6 29                           add     hl, hl              // as cells
1554+ 6AA7 39                           add     hl, sp              // from Stack Pointer
1555+ 6AA8 7E                           ld      a, (hl)             // replace TOS
1556+ 6AA9 23                           inc     hl
1557+ 6AAA 66                           ld      h, (hl)
1558+ 6AAB 6F                           ld      l, a
1559+ 6AAC
1560+ 6AAC                              psh1
1560+ 6AAC E5          >                push    hl
1560+ 6AAD DD E9       >                jp      (ix)
1561+ 6AAF
1562+ 6AAF
1563+ 6AAF              //  ______________________________________________________________________
1564+ 6AAF              //
1565+ 6AAF              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1566+ 6AAF              // picks the nth element from TOS
1567+ 6AAF              //              New_Def ROLL, "ROLL", is_code, is_normal
1568+ 6AAF              //              exx                     // we need all registers free
1569+ 6AAF              //              pop     hl              // number of cells to roll
1570+ 6AAF              //              ld      a, h
1571+ 6AAF              //              or       l
1572+ 6AAF              //              jr      z, Roll_Zero
1573+ 6AAF              //                  add     hl, hl              // number of bytes to move
1574+ 6AAF              //                  ld      b, h
1575+ 6AAF              //                  ld      c, l
1576+ 6AAF              //                  add     hl, sp          // address of n1
1577+ 6AAF              //                  ld      a, (hl)         // take n1 into a and a,
1578+ 6AAF              //                  inc     hl
1579+ 6AAF              //                  ex      af, af'
1580+ 6AAF              //                  ld      a, (hl)         // take n1 into a and a,
1581+ 6AAF              //                  ld      d, h
1582+ 6AAF              //                  ld      e, l
1583+ 6AAF              //                  dec     hl
1584+ 6AAF              //                  dec     hl
1585+ 6AAF              //                  lddr
1586+ 6AAF              //                  ex      de, hl
1587+ 6AAF              //                  ld      (hl), a
1588+ 6AAF              //                  dec     hl
1589+ 6AAF              //                  ex      af, af'
1590+ 6AAF              //                  ld      (hl), a
1591+ 6AAF              //Roll_Zero:
1592+ 6AAF              //              exx
1593+ 6AAF              //              next
1594+ 6AAF
1595+ 6AAF
1596+ 6AAF              //  ______________________________________________________________________
1597+ 6AAF              //
1598+ 6AAF              // 2over        d1 d2 -- d1 d2 d1
1599+ 6AAF              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1600+ 6AAF              // copy the second double of stack and put on top.
1601+ 6AAF              //              New_Def TWO_OVER, "2OVER", is_code, is_normal
1602+ 6AAF              //
1603+ 6AAF              //              ld      hl, 7
1604+ 6AAF              //              add     hl, sp
1605+ 6AAF              //              ld      d, (hl)
1606+ 6AAF              //              dec     hl
1607+ 6AAF              //              ld      e, (hl)             // d1-L
1608+ 6AAF              //              push    de
1609+ 6AAF              //              dec     hl
1610+ 6AAF              //              ld      d, (hl)
1611+ 6AAF              //              dec     hl
1612+ 6AAF              //              ld      e, (hl)             // d1-H
1613+ 6AAF              //              push    de
1614+ 6AAF              //              next
1615+ 6AAF
1616+ 6AAF              //  ______________________________________________________________________
1617+ 6AAF              //
1618+ 6AAF              // 2drop        d --
1619+ 6AAF              //              n1 n2 --
1620+ 6AAF              // drops the top double from stack
1621+ 6AAF                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1621+ 6AAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1621+ 6AAF             >
1621+ 6AAF             >                // dummy db directives used to calculate length of namec
1621+ 6AAF 32 44 52 4F >                db      "2DROP"
1621+ 6AB3 50          >
1621+ 6AB4             >len_NFA         defl    $ - temp_NFA
1621+ 6AB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1621+ 6AAF             >
1621+ 6AAF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1621+ 6AB0 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1621+ 6AB4 50          >
1621+ 6AB5             >                org     $-1                 // alter last byte of Name just above to set
1621+ 6AB4 D0          >                db      {b $} | END_BIT     // msb as name end
1621+ 6AB5             >
1621+ 6AB5 9E 6A       >                dw      last_NFA            // Link to previous definition Name
1621+ 6AB7             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1621+ 6AB7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1621+ 6AB7 ~           >
1621+ 6AB7 ~           >
1621+ 6AB7             >                endif           ; ok        // for other definitions it "points" the correct handler
1621+ 6AB7             >                // Use of "; ok" to suppress "warning[fwdref]"
1621+ 6AB7             >
1621+ 6AB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1622+ 6AB7 E1                           pop     hl
1623+ 6AB8 E1                           pop     hl
1624+ 6AB9                              next
1624+ 6AB9 DD E9       >                jp      (ix)
1625+ 6ABB
1626+ 6ABB              //  ______________________________________________________________________
1627+ 6ABB              //
1628+ 6ABB              // 2nip         d1 d2 -- d2
1629+ 6ABB              //              n1 n2 n3 n4 -- n3 n4
1630+ 6ABB              // drops the second double on the stack
1631+ 6ABB              //              New_Def TWO_NIP, 4, "2nip"
1632+ 6ABB              //              ...
1633+ 6ABB
1634+ 6ABB              //  ______________________________________________________________________
1635+ 6ABB              //
1636+ 6ABB              // 2tuck         d1 d2 -- d2 d1 d2
1637+ 6ABB              // copy the top element after the second.
1638+ 6ABB              //              New_Def TWO_TUCK, 5, "2tuck"
1639+ 6ABB              //              ...
1640+ 6ABB
1641+ 6ABB              //  ______________________________________________________________________
1642+ 6ABB              //
1643+ 6ABB              // 2swap         d1 d2 -- d2 d1
1644+ 6ABB              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1645+ 6ABB              // swaps the two doubles on top of stack
1646+ 6ABB                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1646+ 6ABB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1646+ 6ABB             >
1646+ 6ABB             >                // dummy db directives used to calculate length of namec
1646+ 6ABB 32 53 57 41 >                db      "2SWAP"
1646+ 6ABF 50          >
1646+ 6AC0             >len_NFA         defl    $ - temp_NFA
1646+ 6AC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1646+ 6ABB             >
1646+ 6ABB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1646+ 6ABC 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1646+ 6AC0 50          >
1646+ 6AC1             >                org     $-1                 // alter last byte of Name just above to set
1646+ 6AC0 D0          >                db      {b $} | END_BIT     // msb as name end
1646+ 6AC1             >
1646+ 6AC1 AF 6A       >                dw      last_NFA            // Link to previous definition Name
1646+ 6AC3             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1646+ 6AC3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1646+ 6AC3 ~           >
1646+ 6AC3 ~           >
1646+ 6AC3             >                endif           ; ok        // for other definitions it "points" the correct handler
1646+ 6AC3             >                // Use of "; ok" to suppress "warning[fwdref]"
1646+ 6AC3             >
1646+ 6AC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1647+ 6AC3 F1                           pop     af                  //   d2-H
1648+ 6AC4 E1                           pop     hl                  // < d2-L
1649+ 6AC5 D1                           pop     de                  // < d1-H
1650+ 6AC6 E3                           ex      (sp), hl            // < d1-L > d2-L
1651+ 6AC7 F5                           push    af                  // > d2-H
1652+ 6AC8 E5                           push    hl                  // > d1-L
1653+ 6AC9 D5                           push    de
1654+ 6ACA
1655+ 6ACA                              next
1655+ 6ACA DD E9       >                jp      (ix)
1656+ 6ACC
1657+ 6ACC              //  ______________________________________________________________________
1658+ 6ACC              //
1659+ 6ACC              // 2dup         d -- d d
1660+ 6ACC              //              n1 n2 -- n1 n2 n1 n2
1661+ 6ACC              // duplicates the top double of stack
1662+ 6ACC                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1662+ 6ACC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1662+ 6ACC             >
1662+ 6ACC             >                // dummy db directives used to calculate length of namec
1662+ 6ACC 32 44 55 50 >                db      "2DUP"
1662+ 6AD0             >len_NFA         defl    $ - temp_NFA
1662+ 6AD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1662+ 6ACC             >
1662+ 6ACC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1662+ 6ACD 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1662+ 6AD1             >                org     $-1                 // alter last byte of Name just above to set
1662+ 6AD0 D0          >                db      {b $} | END_BIT     // msb as name end
1662+ 6AD1             >
1662+ 6AD1 BB 6A       >                dw      last_NFA            // Link to previous definition Name
1662+ 6AD3             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1662+ 6AD3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1662+ 6AD3 ~           >
1662+ 6AD3 ~           >
1662+ 6AD3             >                endif           ; ok        // for other definitions it "points" the correct handler
1662+ 6AD3             >                // Use of "; ok" to suppress "warning[fwdref]"
1662+ 6AD3             >
1662+ 6AD3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1663+ 6AD3 E1                           pop     hl                  // < d-H
1664+ 6AD4 D1                           pop     de                  // < d-L
1665+ 6AD5 D5                           push    de                  // < d-L
1666+ 6AD6 E5                           push    hl                  // > d-H
1667+ 6AD7 D5                           push    de                  // > d-L
1668+ 6AD8 E5                           push    hl                  // > d-H
1669+ 6AD9                              next
1669+ 6AD9 DD E9       >                jp      (ix)
1670+ 6ADB
1671+ 6ADB              //  ______________________________________________________________________
1672+ 6ADB              //
1673+ 6ADB              // 2rot         d1 d2 d3 -- d2 d3 d1
1674+ 6ADB              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1675+ 6ADB              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1676+ 6ADB              // and putting it on top. The other two are shifted down one place.
1677+ 6ADB              //              New_Def TWO?ROT, 4, "2rot"
1678+ 6ADB              //              ...
1679+ 6ADB              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1680+ 6ADB              //
1681+ 6ADB              //      d3  |d2  |d1  |
1682+ 6ADB              //      h l |h l |h l |
1683+ 6ADB              // SP   LHED|LHED|LHED|
1684+ 6ADB              // SP  +0123|4567|89ab|
1685+ 6ADB              //              ld      hl, $000B
1686+ 6ADB              //              add     hl, sp
1687+ 6ADB              //              ld      d, (hl)
1688+ 6ADB              //              dec     hl
1689+ 6ADB              //              ld      e, (hl)
1690+ 6ADB              //              dec     hl
1691+ 6ADB              //              push    de
1692+ 6ADB              //              ld      d, (hl)
1693+ 6ADB              //              dec     hl
1694+ 6ADB              //              ld      e, (hl)
1695+ 6ADB              //              dec     hl
1696+ 6ADB              //              push    de
1697+ 6ADB
1698+ 6ADB              //      d1  |d3  |d2  |d1  |
1699+ 6ADB              //      h l |h l |h l |h l |
1700+ 6ADB              // SP   LHED|LHED|LHED|LHED|
1701+ 6ADB              // SP       +0123|4567|89ab|
1702+ 6ADB
1703+ 6ADB              //              ld      d, h
1704+ 6ADB              //              ld      e, l
1705+ 6ADB              //              inc     de
1706+ 6ADB              //              inc     de
1707+ 6ADB              //              inc     de
1708+ 6ADB              //              inc     de
1709+ 6ADB              //              push    bc
1710+ 6ADB              //              ld      bc, $000C
1711+ 6ADB              //              lddr
1712+ 6ADB              //              pop     bc
1713+ 6ADB              //              pop     de
1714+ 6ADB              //              pop     de
1715+ 6ADB              //
1716+ 6ADB              //              next
1717+ 6ADB
1718+ 6ADB
1719+ 6ADB              //  ______________________________________________________________________
1720+ 6ADB              //
1721+ 6ADB              // +!           n a --
1722+ 6ADB              // Sums to the content of address a the number n.
1723+ 6ADB              // It is the same of  a @ n + a !
1724+ 6ADB                              New_Def PLUSSTORE, "+!", is_code, is_normal
1724+ 6ADB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1724+ 6ADB             >
1724+ 6ADB             >                // dummy db directives used to calculate length of namec
1724+ 6ADB 2B 21       >                db      "+!"
1724+ 6ADD             >len_NFA         defl    $ - temp_NFA
1724+ 6ADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1724+ 6ADB             >
1724+ 6ADB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1724+ 6ADC 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1724+ 6ADE             >                org     $-1                 // alter last byte of Name just above to set
1724+ 6ADD A1          >                db      {b $} | END_BIT     // msb as name end
1724+ 6ADE             >
1724+ 6ADE CC 6A       >                dw      last_NFA            // Link to previous definition Name
1724+ 6AE0             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1724+ 6AE0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1724+ 6AE0 ~           >
1724+ 6AE0 ~           >
1724+ 6AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
1724+ 6AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
1724+ 6AE0             >
1724+ 6AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1725+ 6AE0 E1                           pop     hl                  // hl is the address
1726+ 6AE1 D1                           pop     de                  // de is the number
1727+ 6AE2 7E                           ld      a, (hl)
1728+ 6AE3 83                           add     e
1729+ 6AE4 77                           ld      (hl), a
1730+ 6AE5 23                           inc     hl
1731+ 6AE6 7E                           ld      a, (hl)
1732+ 6AE7 8A                           adc     d
1733+ 6AE8 77                           ld      (hl), a
1734+ 6AE9
1735+ 6AE9                              next
1735+ 6AE9 DD E9       >                jp      (ix)
1736+ 6AEB
1737+ 6AEB              //  ______________________________________________________________________
1738+ 6AEB              //
1739+ 6AEB              // toggle       a n --
1740+ 6AEB              // Complements (xor) the byte at addrress  a  with the model n.
1741+ 6AEB                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1741+ 6AEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1741+ 6AEB             >
1741+ 6AEB             >                // dummy db directives used to calculate length of namec
1741+ 6AEB 54 4F 47 47 >                db      "TOGGLE"
1741+ 6AEF 4C 45       >
1741+ 6AF1             >len_NFA         defl    $ - temp_NFA
1741+ 6AF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1741+ 6AEB             >
1741+ 6AEB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1741+ 6AEC 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1741+ 6AF0 4C 45       >
1741+ 6AF2             >                org     $-1                 // alter last byte of Name just above to set
1741+ 6AF1 C5          >                db      {b $} | END_BIT     // msb as name end
1741+ 6AF2             >
1741+ 6AF2 DB 6A       >                dw      last_NFA            // Link to previous definition Name
1741+ 6AF4             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1741+ 6AF4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1741+ 6AF4 ~           >
1741+ 6AF4 ~           >
1741+ 6AF4             >                endif           ; ok        // for other definitions it "points" the correct handler
1741+ 6AF4             >                // Use of "; ok" to suppress "warning[fwdref]"
1741+ 6AF4             >
1741+ 6AF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1742+ 6AF4 D1                           pop     de
1743+ 6AF5 E1                           pop     hl
1744+ 6AF6 7E                           ld      a, (hl)
1745+ 6AF7 AB                           xor     e
1746+ 6AF8 77                           ld      (hl), a
1747+ 6AF9
1748+ 6AF9                              next
1748+ 6AF9 DD E9       >                jp      (ix)
1749+ 6AFB
1750+ 6AFB              //  ______________________________________________________________________
1751+ 6AFB              //
1752+ 6AFB              // @            a -- n
1753+ 6AFB              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1754+ 6AFB                              New_Def FETCH, "@", is_code, is_normal
1754+ 6AFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1754+ 6AFB             >
1754+ 6AFB             >                // dummy db directives used to calculate length of namec
1754+ 6AFB 40          >                db      "@"
1754+ 6AFC             >len_NFA         defl    $ - temp_NFA
1754+ 6AFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1754+ 6AFB             >
1754+ 6AFB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1754+ 6AFC 40          >                db      "@"               // name string in 7-bit ascii, but
1754+ 6AFD             >                org     $-1                 // alter last byte of Name just above to set
1754+ 6AFC C0          >                db      {b $} | END_BIT     // msb as name end
1754+ 6AFD             >
1754+ 6AFD EB 6A       >                dw      last_NFA            // Link to previous definition Name
1754+ 6AFF             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1754+ 6AFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1754+ 6AFF ~           >
1754+ 6AFF ~           >
1754+ 6AFF             >                endif           ; ok        // for other definitions it "points" the correct handler
1754+ 6AFF             >                // Use of "; ok" to suppress "warning[fwdref]"
1754+ 6AFF             >
1754+ 6AFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1755+ 6AFF E1                           pop     hl
1756+ 6B00 5E                           ld      e, (hl)             // low-byte
1757+ 6B01 23                           inc     hl
1758+ 6B02 56                           ld      d, (hl)             // high-byte
1759+ 6B03 D5                           push    de
1760+ 6B04                              next
1760+ 6B04 DD E9       >                jp      (ix)
1761+ 6B06
1762+ 6B06              //  ______________________________________________________________________
1763+ 6B06              //
1764+ 6B06              // !            n a --
1765+ 6B06              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1766+ 6B06                              New_Def STORE, "!", is_code, is_normal
1766+ 6B06             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1766+ 6B06             >
1766+ 6B06             >                // dummy db directives used to calculate length of namec
1766+ 6B06 21          >                db      "!"
1766+ 6B07             >len_NFA         defl    $ - temp_NFA
1766+ 6B07             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1766+ 6B06             >
1766+ 6B06 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1766+ 6B07 21          >                db      "!"               // name string in 7-bit ascii, but
1766+ 6B08             >                org     $-1                 // alter last byte of Name just above to set
1766+ 6B07 A1          >                db      {b $} | END_BIT     // msb as name end
1766+ 6B08             >
1766+ 6B08 FB 6A       >                dw      last_NFA            // Link to previous definition Name
1766+ 6B0A             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1766+ 6B0A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1766+ 6B0A ~           >
1766+ 6B0A ~           >
1766+ 6B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
1766+ 6B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
1766+ 6B0A             >
1766+ 6B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1767+ 6B0A E1                           pop     hl                  // address
1768+ 6B0B D1                           pop     de                  // < n
1769+ 6B0C 73                           ld      (hl), e             // low-byte
1770+ 6B0D 23                           inc     hl
1771+ 6B0E 72                           ld      (hl), d             // high-byte
1772+ 6B0F
1773+ 6B0F                              next
1773+ 6B0F DD E9       >                jp      (ix)
1774+ 6B11
1775+ 6B11              //  ______________________________________________________________________
1776+ 6B11              //
1777+ 6B11              // c@           a -- c
1778+ 6B11              // fetch a character n from address a
1779+ 6B11                              New_Def CFETCH, "C@", is_code, is_normal
1779+ 6B11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1779+ 6B11             >
1779+ 6B11             >                // dummy db directives used to calculate length of namec
1779+ 6B11 43 40       >                db      "C@"
1779+ 6B13             >len_NFA         defl    $ - temp_NFA
1779+ 6B13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1779+ 6B11             >
1779+ 6B11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1779+ 6B12 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1779+ 6B14             >                org     $-1                 // alter last byte of Name just above to set
1779+ 6B13 C0          >                db      {b $} | END_BIT     // msb as name end
1779+ 6B14             >
1779+ 6B14 06 6B       >                dw      last_NFA            // Link to previous definition Name
1779+ 6B16             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1779+ 6B16 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1779+ 6B16 ~           >
1779+ 6B16 ~           >
1779+ 6B16             >                endif           ; ok        // for other definitions it "points" the correct handler
1779+ 6B16             >                // Use of "; ok" to suppress "warning[fwdref]"
1779+ 6B16             >
1779+ 6B16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1780+ 6B16 E1                           pop     hl
1781+ 6B17 6E                           ld      l, (hl)             // low-byte
1782+ 6B18 26 00                        ld      h, 0
1783+ 6B1A
1784+ 6B1A                              psh1
1784+ 6B1A E5          >                push    hl
1784+ 6B1B DD E9       >                jp      (ix)
1785+ 6B1D
1786+ 6B1D              //  ______________________________________________________________________
1787+ 6B1D              //
1788+ 6B1D              // c!           c a --
1789+ 6B1D              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1790+ 6B1D                              New_Def CSTORE, "C!", is_code, is_normal
1790+ 6B1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1790+ 6B1D             >
1790+ 6B1D             >                // dummy db directives used to calculate length of namec
1790+ 6B1D 43 21       >                db      "C!"
1790+ 6B1F             >len_NFA         defl    $ - temp_NFA
1790+ 6B1F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1790+ 6B1D             >
1790+ 6B1D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1790+ 6B1E 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1790+ 6B20             >                org     $-1                 // alter last byte of Name just above to set
1790+ 6B1F A1          >                db      {b $} | END_BIT     // msb as name end
1790+ 6B20             >
1790+ 6B20 11 6B       >                dw      last_NFA            // Link to previous definition Name
1790+ 6B22             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1790+ 6B22 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1790+ 6B22 ~           >
1790+ 6B22 ~           >
1790+ 6B22             >                endif           ; ok        // for other definitions it "points" the correct handler
1790+ 6B22             >                // Use of "; ok" to suppress "warning[fwdref]"
1790+ 6B22             >
1790+ 6B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1791+ 6B22 E1                           pop     hl                  // < address
1792+ 6B23 D1                           pop     de
1793+ 6B24 73                           ld      (hl), e             // low-byte
1794+ 6B25
1795+ 6B25                              next
1795+ 6B25 DD E9       >                jp      (ix)
1796+ 6B27
1797+ 6B27              //  ______________________________________________________________________
1798+ 6B27              //
1799+ 6B27              // 2@           a -- d
1800+ 6B27              // fetch a 32 bits number d from address a and leaves it on top of the
1801+ 6B27              // stack as two single numbers, high part as top of the stack.
1802+ 6B27              // A double number is normally kept in CPU registers as HLDE.
1803+ 6B27              // On stack a double number is treated as two single numbers
1804+ 6B27              // where BC is on the top of the stack and HL is the second from top,
1805+ 6B27              // so the sign of the number can be checked on top of stack
1806+ 6B27              // and in the stack memory it appears as LHED.
1807+ 6B27                              New_Def TWO_FETCH, "2@", is_code, is_normal
1807+ 6B27             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1807+ 6B27             >
1807+ 6B27             >                // dummy db directives used to calculate length of namec
1807+ 6B27 32 40       >                db      "2@"
1807+ 6B29             >len_NFA         defl    $ - temp_NFA
1807+ 6B29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1807+ 6B27             >
1807+ 6B27 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1807+ 6B28 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1807+ 6B2A             >                org     $-1                 // alter last byte of Name just above to set
1807+ 6B29 C0          >                db      {b $} | END_BIT     // msb as name end
1807+ 6B2A             >
1807+ 6B2A 1D 6B       >                dw      last_NFA            // Link to previous definition Name
1807+ 6B2C             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1807+ 6B2C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1807+ 6B2C ~           >
1807+ 6B2C ~           >
1807+ 6B2C             >                endif           ; ok        // for other definitions it "points" the correct handler
1807+ 6B2C             >                // Use of "; ok" to suppress "warning[fwdref]"
1807+ 6B2C             >
1807+ 6B2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1808+ 6B2C E1                           pop     hl                  // address
1809+ 6B2D 5E                           ld      e, (hl)             // low-byte
1810+ 6B2E 23                           inc     hl
1811+ 6B2F 56                           ld      d, (hl)             // high-byte
1812+ 6B30 23                           inc     hl
1813+ 6B31 7E                           ld      a, (hl)             // low-byte
1814+ 6B32 23                           inc     hl
1815+ 6B33 66                           ld      h, (hl)             // high-byte
1816+ 6B34 6F                           ld      l, a
1817+ 6B35 E5                           push    hl
1818+ 6B36 D5                           push    de
1819+ 6B37                              next
1819+ 6B37 DD E9       >                jp      (ix)
1820+ 6B39
1821+ 6B39              //  ______________________________________________________________________
1822+ 6B39              //
1823+ 6B39              // 2!           d a --
1824+ 6B39              // stores a 32 bits number d from address a and leaves it on top of the
1825+ 6B39              // stack as two single numbers, high part as top of the stack.
1826+ 6B39              // A double number is normally kept in CPU registers as HLDE.
1827+ 6B39              // On stack a double number is treated as two single numbers
1828+ 6B39              // where BC is on the top of the stack and HL is the second from top,
1829+ 6B39              // so the sign of the number can be checked on top of stack
1830+ 6B39              // and in the stack memory it appears as LHED.
1831+ 6B39                              New_Def TWO_STORE, "2!", is_code, is_normal
1831+ 6B39             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1831+ 6B39             >
1831+ 6B39             >                // dummy db directives used to calculate length of namec
1831+ 6B39 32 21       >                db      "2!"
1831+ 6B3B             >len_NFA         defl    $ - temp_NFA
1831+ 6B3B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1831+ 6B39             >
1831+ 6B39 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1831+ 6B3A 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1831+ 6B3C             >                org     $-1                 // alter last byte of Name just above to set
1831+ 6B3B A1          >                db      {b $} | END_BIT     // msb as name end
1831+ 6B3C             >
1831+ 6B3C 27 6B       >                dw      last_NFA            // Link to previous definition Name
1831+ 6B3E             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1831+ 6B3E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1831+ 6B3E ~           >
1831+ 6B3E ~           >
1831+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
1831+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
1831+ 6B3E             >
1831+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1832+ 6B3E D9                           exx
1833+ 6B3F E1                           pop     hl                  // address
1834+ 6B40 C1                           pop     bc                  // < high-part
1835+ 6B41 D1                           pop     de                  // < low-part > Instruction Pointer
1836+ 6B42 71                           ld      (hl), c
1837+ 6B43 23                           inc     hl
1838+ 6B44 70                           ld      (hl), b
1839+ 6B45 23                           inc     hl
1840+ 6B46 73                           ld      (hl), e
1841+ 6B47 23                           inc     hl
1842+ 6B48 72                           ld      (hl), d
1843+ 6B49 D9                           exx
1844+ 6B4A                              next
1844+ 6B4A DD E9       >                jp      (ix)
1845+ 6B4C
1846+ 6B4C              //  ______________________________________________________________________
1847+ 6B4C              //
1848+ 6B4C              // p@           a -- c
1849+ 6B4C              // Read one byte from port a and leave the result on top of stack
1850+ 6B4C                              New_Def PFETCH, "P@", is_code, is_normal
1850+ 6B4C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1850+ 6B4C             >
1850+ 6B4C             >                // dummy db directives used to calculate length of namec
1850+ 6B4C 50 40       >                db      "P@"
1850+ 6B4E             >len_NFA         defl    $ - temp_NFA
1850+ 6B4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1850+ 6B4C             >
1850+ 6B4C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1850+ 6B4D 50 40       >                db      "P@"               // name string in 7-bit ascii, but
1850+ 6B4F             >                org     $-1                 // alter last byte of Name just above to set
1850+ 6B4E C0          >                db      {b $} | END_BIT     // msb as name end
1850+ 6B4F             >
1850+ 6B4F 39 6B       >                dw      last_NFA            // Link to previous definition Name
1850+ 6B51             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1850+ 6B51 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1850+ 6B51 ~           >
1850+ 6B51 ~           >
1850+ 6B51             >                endif           ; ok        // for other definitions it "points" the correct handler
1850+ 6B51             >                // Use of "; ok" to suppress "warning[fwdref]"
1850+ 6B51             >
1850+ 6B51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1851+ 6B51 D9                           exx
1852+ 6B52 C1                           pop     bc
1853+ 6B53 26 00                        ld      h, 0
1854+ 6B55 ED 68                        in      l, (c)
1855+ 6B57 E5                           push    hl
1856+ 6B58 D9                           exx
1857+ 6B59                              next
1857+ 6B59 DD E9       >                jp      (ix)
1858+ 6B5B
1859+ 6B5B              //  ______________________________________________________________________
1860+ 6B5B              //
1861+ 6B5B              // p!           c a --
1862+ 6B5B              // Send one byte (top of stack) to port a
1863+ 6B5B                              New_Def PSTORE, "P!", is_code, is_normal
1863+ 6B5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1863+ 6B5B             >
1863+ 6B5B             >                // dummy db directives used to calculate length of namec
1863+ 6B5B 50 21       >                db      "P!"
1863+ 6B5D             >len_NFA         defl    $ - temp_NFA
1863+ 6B5D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1863+ 6B5B             >
1863+ 6B5B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1863+ 6B5C 50 21       >                db      "P!"               // name string in 7-bit ascii, but
1863+ 6B5E             >                org     $-1                 // alter last byte of Name just above to set
1863+ 6B5D A1          >                db      {b $} | END_BIT     // msb as name end
1863+ 6B5E             >
1863+ 6B5E 4C 6B       >                dw      last_NFA            // Link to previous definition Name
1863+ 6B60             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1863+ 6B60 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1863+ 6B60 ~           >
1863+ 6B60 ~           >
1863+ 6B60             >                endif           ; ok        // for other definitions it "points" the correct handler
1863+ 6B60             >                // Use of "; ok" to suppress "warning[fwdref]"
1863+ 6B60             >
1863+ 6B60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1864+ 6B60 D9                           exx
1865+ 6B61 C1                           pop     bc
1866+ 6B62 E1                           pop     hl                  // < c
1867+ 6B63 ED 69                        out     (c), l              // low-byte
1868+ 6B65 D9                           exx
1869+ 6B66                              next
1869+ 6B66 DD E9       >                jp      (ix)
1870+ 6B68
1871+ 6B68
1872+ 6B68              //  ______________________________________________________________________
1873+ 6B68              //
1874+ 6B68              // 2*           n1 -- n2
1875+ 6B68              // doubles the number at top of stack
1876+ 6B68                              New_Def TWO_MUL, "2*", is_code, is_normal
1876+ 6B68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1876+ 6B68             >
1876+ 6B68             >                // dummy db directives used to calculate length of namec
1876+ 6B68 32 2A       >                db      "2*"
1876+ 6B6A             >len_NFA         defl    $ - temp_NFA
1876+ 6B6A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1876+ 6B68             >
1876+ 6B68 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1876+ 6B69 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
1876+ 6B6B             >                org     $-1                 // alter last byte of Name just above to set
1876+ 6B6A AA          >                db      {b $} | END_BIT     // msb as name end
1876+ 6B6B             >
1876+ 6B6B 5B 6B       >                dw      last_NFA            // Link to previous definition Name
1876+ 6B6D             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1876+ 6B6D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1876+ 6B6D ~           >
1876+ 6B6D ~           >
1876+ 6B6D             >                endif           ; ok        // for other definitions it "points" the correct handler
1876+ 6B6D             >                // Use of "; ok" to suppress "warning[fwdref]"
1876+ 6B6D             >
1876+ 6B6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1877+ 6B6D              Two_Mul_Ptr:
1878+ 6B6D E1                           pop     hl
1879+ 6B6E 29                           add     hl, hl
1880+ 6B6F
1881+ 6B6F                              psh1
1881+ 6B6F E5          >                push    hl
1881+ 6B70 DD E9       >                jp      (ix)
1882+ 6B72
1883+ 6B72              //  ______________________________________________________________________
1884+ 6B72              //
1885+ 6B72              // 2/           n1 -- n2
1886+ 6B72              // halves the top of stack, sign is unchanged
1887+ 6B72                              New_Def TWO_DIV, "2/", is_code, is_normal
1887+ 6B72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1887+ 6B72             >
1887+ 6B72             >                // dummy db directives used to calculate length of namec
1887+ 6B72 32 2F       >                db      "2/"
1887+ 6B74             >len_NFA         defl    $ - temp_NFA
1887+ 6B74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1887+ 6B72             >
1887+ 6B72 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1887+ 6B73 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
1887+ 6B75             >                org     $-1                 // alter last byte of Name just above to set
1887+ 6B74 AF          >                db      {b $} | END_BIT     // msb as name end
1887+ 6B75             >
1887+ 6B75 68 6B       >                dw      last_NFA            // Link to previous definition Name
1887+ 6B77             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1887+ 6B77 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1887+ 6B77 ~           >
1887+ 6B77 ~           >
1887+ 6B77             >                endif           ; ok        // for other definitions it "points" the correct handler
1887+ 6B77             >                // Use of "; ok" to suppress "warning[fwdref]"
1887+ 6B77             >
1887+ 6B77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1888+ 6B77 E1                           pop     hl
1889+ 6B78 CB 2C                        sra     h
1890+ 6B7A CB 1D                        rr      l
1891+ 6B7C
1892+ 6B7C                              psh1
1892+ 6B7C E5          >                push    hl
1892+ 6B7D DD E9       >                jp      (ix)
1893+ 6B7F
1894+ 6B7F              //  ______________________________________________________________________
1895+ 6B7F              //
1896+ 6B7F              // lshift       n1 u -- n2
1897+ 6B7F              // bit left shift of u bits
1898+ 6B7F                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
1898+ 6B7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1898+ 6B7F             >
1898+ 6B7F             >                // dummy db directives used to calculate length of namec
1898+ 6B7F 4C 53 48 49 >                db      "LSHIFT"
1898+ 6B83 46 54       >
1898+ 6B85             >len_NFA         defl    $ - temp_NFA
1898+ 6B85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1898+ 6B7F             >
1898+ 6B7F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1898+ 6B80 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
1898+ 6B84 46 54       >
1898+ 6B86             >                org     $-1                 // alter last byte of Name just above to set
1898+ 6B85 D4          >                db      {b $} | END_BIT     // msb as name end
1898+ 6B86             >
1898+ 6B86 72 6B       >                dw      last_NFA            // Link to previous definition Name
1898+ 6B88             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1898+ 6B88 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1898+ 6B88 ~           >
1898+ 6B88 ~           >
1898+ 6B88             >                endif           ; ok        // for other definitions it "points" the correct handler
1898+ 6B88             >                // Use of "; ok" to suppress "warning[fwdref]"
1898+ 6B88             >
1898+ 6B88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1899+ 6B88 D9                           exx
1900+ 6B89 C1                           pop     bc
1901+ 6B8A 41                           ld      b, c
1902+ 6B8B D1                           pop     de
1903+ 6B8C ED 28                        bsla    de, b
1904+ 6B8E D5                           push    de
1905+ 6B8F D9                           exx
1906+ 6B90                              next
1906+ 6B90 DD E9       >                jp      (ix)
1907+ 6B92
1908+ 6B92              //  ______________________________________________________________________
1909+ 6B92              //
1910+ 6B92              // rshift       n1 u -- n2
1911+ 6B92              // bit right shift of u bits
1912+ 6B92                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
1912+ 6B92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1912+ 6B92             >
1912+ 6B92             >                // dummy db directives used to calculate length of namec
1912+ 6B92 52 53 48 49 >                db      "RSHIFT"
1912+ 6B96 46 54       >
1912+ 6B98             >len_NFA         defl    $ - temp_NFA
1912+ 6B98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1912+ 6B92             >
1912+ 6B92 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1912+ 6B93 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
1912+ 6B97 46 54       >
1912+ 6B99             >                org     $-1                 // alter last byte of Name just above to set
1912+ 6B98 D4          >                db      {b $} | END_BIT     // msb as name end
1912+ 6B99             >
1912+ 6B99 7F 6B       >                dw      last_NFA            // Link to previous definition Name
1912+ 6B9B             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1912+ 6B9B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1912+ 6B9B ~           >
1912+ 6B9B ~           >
1912+ 6B9B             >                endif           ; ok        // for other definitions it "points" the correct handler
1912+ 6B9B             >                // Use of "; ok" to suppress "warning[fwdref]"
1912+ 6B9B             >
1912+ 6B9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1913+ 6B9B D9                           exx
1914+ 6B9C C1                           pop     bc
1915+ 6B9D 41                           ld      b, c
1916+ 6B9E D1                           pop     de
1917+ 6B9F ED 2A                        bsrl    de, b
1918+ 6BA1 D5                           push    de
1919+ 6BA2 D9                           exx
1920+ 6BA3                              next
1920+ 6BA3 DD E9       >                jp      (ix)
1921+ 6BA5
1922+ 6BA5              //  ______________________________________________________________________
1923+ 6BA5              //
1924+ 6BA5              // cells        n1 -- n2
1925+ 6BA5              // decrement by 2 top of stack
1926+ 6BA5                              New_Def CELLS, "CELLS", is_code, is_normal
1926+ 6BA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1926+ 6BA5             >
1926+ 6BA5             >                // dummy db directives used to calculate length of namec
1926+ 6BA5 43 45 4C 4C >                db      "CELLS"
1926+ 6BA9 53          >
1926+ 6BAA             >len_NFA         defl    $ - temp_NFA
1926+ 6BAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1926+ 6BA5             >
1926+ 6BA5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1926+ 6BA6 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
1926+ 6BAA 53          >
1926+ 6BAB             >                org     $-1                 // alter last byte of Name just above to set
1926+ 6BAA D3          >                db      {b $} | END_BIT     // msb as name end
1926+ 6BAB             >
1926+ 6BAB 92 6B       >                dw      last_NFA            // Link to previous definition Name
1926+ 6BAD             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1926+ 6BAD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1926+ 6BAD ~           >
1926+ 6BAD ~           >
1926+ 6BAD             >                endif           ; ok        // for other definitions it "points" the correct handler
1926+ 6BAD             >                // Use of "; ok" to suppress "warning[fwdref]"
1926+ 6BAD             >
1926+ 6BAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1927+ 6BAD C3 6D 6B                     jp      Two_Mul_Ptr
1928+ 6BB0
1929+ 6BB0
1930+ 6BB0              //  ______________________________________________________________________
1931+ 6BB0
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L0.asm
 111  6BB0                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
   1+ 6BB0              //  ______________________________________________________________________
   2+ 6BB0              //
   3+ 6BB0              //  L1.asm
   4+ 6BB0              //
   5+ 6BB0              //  Level-1 definitions and derivate
   6+ 6BB0              //  ______________________________________________________________________
   7+ 6BB0
   8+ 6BB0              //  ______________________________________________________________________
   9+ 6BB0              //
  10+ 6BB0              // :            -- cccc     ( compile time )
  11+ 6BB0              //              i*x -- j*x  ( run time )
  12+ 6BB0              // Colon Definition
  13+ 6BB0                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6BB0             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6BB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ 6BB0             >
  13+ 6BB0             >                // dummy db directives used to calculate length of namec
  13+ 6BB0 3A          >                db      ":"
  13+ 6BB1             >len_NFA         defl    $ - temp_NFA
  13+ 6BB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ 6BB0             >
  13+ 6BB0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ 6BB1 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ 6BB2             >                org     $-1                 // alter last byte of Name just above to set
  13+ 6BB1 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ 6BB2             >
  13+ 6BB2 A5 6B       >                dw      last_NFA            // Link to previous definition Name
  13+ 6BB4             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6BB4 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6BB7             >
  13+ 6BB7             >
  13+ 6BB7             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6BB7             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6BB7             >
  13+ 6BB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6BB7
  15+ 6BB7 4D 70                        dw      QEXEC                   // ?exec
  16+ 6BB9 05 70                        dw      STORE_CSP               // !csp
  17+ 6BBB 9E 6D FF 6A                  dw      CURRENT, FETCH          // current @
  18+ 6BBF 90 6D 0A 6B                  dw      CONTEXT, STORE          // context !
  19+ 6BC3 6D 76                        dw      CREATE                  // create  ( forward )
  20+ 6BC5 02 71                        dw      SMUDGE                  // dmudge
  21+ 6BC7 EC 70                        dw      SQUARED_CLOSE           // ]
  22+ 6BC9 5C 71                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6BCB                                                              // ... immediate
  24+ 6BCB              Enter_Ptr:
  25+ 6BCB                              // via call coded in CFA
  26+ 6BCB                              ldhlrp
  26+ 6BCB 2A 96 63    >                ld      hl,(RP_Pointer)
  27+ 6BCE 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  28+ 6BCF 70                           ld      (hl), b
  29+ 6BD0 2B                           dec     hl
  30+ 6BD1 71                           ld      (hl), c
  31+ 6BD2                              ldrphl
  31+ 6BD2 22 96 63    >                ld      (RP_Pointer),hl
  32+ 6BD5
  33+ 6BD5
  34+ 6BD5 C1                           pop     bc                  // points to PFA of "this" word
  35+ 6BD6                              next
  35+ 6BD6 DD E9       >                jp      (ix)
  36+ 6BD8
  37+ 6BD8              //  ______________________________________________________________________
  38+ 6BD8              //
  39+ 6BD8              // ;            --
  40+ 6BD8              // Semicolon. End of Colon-Definition. Stack must be balanced.
  41+ 6BD8                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  41+ 6BD8             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  41+ 6BD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  41+ 6BD8             >
  41+ 6BD8             >                // dummy db directives used to calculate length of namec
  41+ 6BD8 3B          >                db      ";"
  41+ 6BD9             >len_NFA         defl    $ - temp_NFA
  41+ 6BD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  41+ 6BD8             >
  41+ 6BD8 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  41+ 6BD9 3B          >                db      ";"               // name string in 7-bit ascii, but
  41+ 6BDA             >                org     $-1                 // alter last byte of Name just above to set
  41+ 6BD9 BB          >                db      {b $} | END_BIT     // msb as name end
  41+ 6BDA             >
  41+ 6BDA B0 6B       >                dw      last_NFA            // Link to previous definition Name
  41+ 6BDC             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  41+ 6BDC CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  41+ 6BDF             >
  41+ 6BDF             >
  41+ 6BDF             >                endif           ; ok        // for other definitions it "points" the correct handler
  41+ 6BDF             >                // Use of "; ok" to suppress "warning[fwdref]"
  41+ 6BDF             >
  41+ 6BDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  42+ 6BDF
  43+ 6BDF 79 70                        dw      QCSP                    // ?csp
  44+ 6BE1 B2 70 3F 69                  dw      COMPILE, EXIT           // [compile] ;s
  45+ 6BE5 02 71                        dw      SMUDGE                  // smudge
  46+ 6BE7 DD 70                        dw      SQUARED_OPEN            // [
  47+ 6BE9 3F 69                        dw      EXIT                    // ; immediate
  48+ 6BEB
  49+ 6BEB              //  ______________________________________________________________________
  50+ 6BEB              //
  51+ 6BEB              // noop         --
  52+ 6BEB
  53+ 6BEB                              New_Def NOOP, "NOOP", is_code, is_normal
  53+ 6BEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  53+ 6BEB             >
  53+ 6BEB             >                // dummy db directives used to calculate length of namec
  53+ 6BEB 4E 4F 4F 50 >                db      "NOOP"
  53+ 6BEF             >len_NFA         defl    $ - temp_NFA
  53+ 6BEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  53+ 6BEB             >
  53+ 6BEB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  53+ 6BEC 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  53+ 6BF0             >                org     $-1                 // alter last byte of Name just above to set
  53+ 6BEF D0          >                db      {b $} | END_BIT     // msb as name end
  53+ 6BF0             >
  53+ 6BF0 D8 6B       >                dw      last_NFA            // Link to previous definition Name
  53+ 6BF2             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  53+ 6BF2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  53+ 6BF2 ~           >
  53+ 6BF2 ~           >
  53+ 6BF2             >                endif           ; ok        // for other definitions it "points" the correct handler
  53+ 6BF2             >                // Use of "; ok" to suppress "warning[fwdref]"
  53+ 6BF2             >
  53+ 6BF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  54+ 6BF2                              next
  54+ 6BF2 DD E9       >                jp      (ix)
  55+ 6BF4
  56+ 6BF4              //  ______________________________________________________________________
  57+ 6BF4              //
  58+ 6BF4              // constant     n -- cccc     ( compile time )
  59+ 6BF4              //              -- n          ( run time )
  60+ 6BF4              // Constant definition.
  61+ 6BF4                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  61+ 6BF4             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  61+ 6BF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  61+ 6BF4             >
  61+ 6BF4             >                // dummy db directives used to calculate length of namec
  61+ 6BF4 43 4F 4E 53 >                db      "CONSTANT"
  61+ 6BF8 54 41 4E 54 >
  61+ 6BFC             >len_NFA         defl    $ - temp_NFA
  61+ 6BFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  61+ 6BF4             >
  61+ 6BF4 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  61+ 6BF5 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  61+ 6BF9 54 41 4E 54 >
  61+ 6BFD             >                org     $-1                 // alter last byte of Name just above to set
  61+ 6BFC D4          >                db      {b $} | END_BIT     // msb as name end
  61+ 6BFD             >
  61+ 6BFD EB 6B       >                dw      last_NFA            // Link to previous definition Name
  61+ 6BFF             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  61+ 6BFF CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  61+ 6C02             >
  61+ 6C02             >
  61+ 6C02             >                endif           ; ok        // for other definitions it "points" the correct handler
  61+ 6C02             >                // Use of "; ok" to suppress "warning[fwdref]"
  61+ 6C02             >
  61+ 6C02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  62+ 6C02
  63+ 6C02 6D 76                        dw      CREATE                  // create
  64+ 6C04 6B 6E                        dw      COMMA                   // ,    ( at PFA then, store the value )
  65+ 6C06 5C 71                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  66+ 6C08              Constant_Ptr:
  67+ 6C08
  68+ 6C08
  69+ 6C08 E1                           pop     hl
  70+ 6C09
  71+ 6C09 5E                           ld      e, (hl)
  72+ 6C0A 23                           inc     hl
  73+ 6C0B 56                           ld      d, (hl)
  74+ 6C0C
  75+ 6C0C D5                           push    de
  76+ 6C0D                              next
  76+ 6C0D DD E9       >                jp      (ix)
  77+ 6C0F
  78+ 6C0F              //  ______________________________________________________________________
  79+ 6C0F              //
  80+ 6C0F              // variable     n -- cccc     ( compile time )
  81+ 6C0F              //              -- a          ( run time )
  82+ 6C0F              // Variable definition, n is the initial value.
  83+ 6C0F                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  83+ 6C0F             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  83+ 6C0F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  83+ 6C0F             >
  83+ 6C0F             >                // dummy db directives used to calculate length of namec
  83+ 6C0F 56 41 52 49 >                db      "VARIABLE"
  83+ 6C13 41 42 4C 45 >
  83+ 6C17             >len_NFA         defl    $ - temp_NFA
  83+ 6C17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  83+ 6C0F             >
  83+ 6C0F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  83+ 6C10 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  83+ 6C14 41 42 4C 45 >
  83+ 6C18             >                org     $-1                 // alter last byte of Name just above to set
  83+ 6C17 C5          >                db      {b $} | END_BIT     // msb as name end
  83+ 6C18             >
  83+ 6C18 F4 6B       >                dw      last_NFA            // Link to previous definition Name
  83+ 6C1A             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  83+ 6C1A CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  83+ 6C1D             >
  83+ 6C1D             >
  83+ 6C1D             >                endif           ; ok        // for other definitions it "points" the correct handler
  83+ 6C1D             >                // Use of "; ok" to suppress "warning[fwdref]"
  83+ 6C1D             >
  83+ 6C1D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  84+ 6C1D
  85+ 6C1D 43 6C                        dw      ZERO
  86+ 6C1F FF 6B                        dw      CONSTANT                // constant
  87+ 6C21 5C 71                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  88+ 6C23              Variable_Ptr:
  89+ 6C23
  90+ 6C23
  91+ 6C23
  92+ 6C23
  93+ 6C23                              next
  93+ 6C23 DD E9       >                jp      (ix)
  94+ 6C25
  95+ 6C25              //  ______________________________________________________________________
  96+ 6C25              //
  97+ 6C25              // user         b -- cccc     ( compile time )
  98+ 6C25              //              -- a          ( run time )
  99+ 6C25              // User variable definition
 100+ 6C25                              Colon_Def USER, "USER", is_normal
 100+ 6C25             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 100+ 6C25             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 100+ 6C25             >
 100+ 6C25             >                // dummy db directives used to calculate length of namec
 100+ 6C25 55 53 45 52 >                db      "USER"
 100+ 6C29             >len_NFA         defl    $ - temp_NFA
 100+ 6C29             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 100+ 6C25             >
 100+ 6C25 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 100+ 6C26 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 100+ 6C2A             >                org     $-1                 // alter last byte of Name just above to set
 100+ 6C29 D2          >                db      {b $} | END_BIT     // msb as name end
 100+ 6C2A             >
 100+ 6C2A 0F 6C       >                dw      last_NFA            // Link to previous definition Name
 100+ 6C2C             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 100+ 6C2C CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 100+ 6C2F             >
 100+ 6C2F             >
 100+ 6C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 100+ 6C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 100+ 6C2F             >
 100+ 6C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 101+ 6C2F
 102+ 6C2F 6D 76                        dw      CREATE                  // create
 103+ 6C31 7D 6E                        dw      CCOMMA                  // c,
 104+ 6C33 5C 71                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 105+ 6C35
 106+ 6C35
 107+ 6C35              User_Ptr:
 108+ 6C35                              // via call coded in CFA
 109+ 6C35 E1                           pop     hl
 110+ 6C36
 111+ 6C36 7E                           ld      a, (hl)
 112+ 6C37 2A 94 63                     ld      hl, (USER_Pointer)
 113+ 6C3A ED 31                        add     hl, a
 114+ 6C3C E5                           push    hl
 115+ 6C3D                              next
 115+ 6C3D DD E9       >                jp      (ix)
 116+ 6C3F
 117+ 6C3F              //  ______________________________________________________________________
 118+ 6C3F              //
 119+ 6C3F                              Constant_Def ZERO       ,   "0"     ,   0
 119+ 6C3F             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 119+ 6C3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ 6C3F             >
 119+ 6C3F             >                // dummy db directives used to calculate length of namec
 119+ 6C3F 30          >                db      "0"
 119+ 6C40             >len_NFA         defl    $ - temp_NFA
 119+ 6C40             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ 6C3F             >
 119+ 6C3F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ 6C40 30          >                db      "0"               // name string in 7-bit ascii, but
 119+ 6C41             >                org     $-1                 // alter last byte of Name just above to set
 119+ 6C40 B0          >                db      {b $} | END_BIT     // msb as name end
 119+ 6C41             >
 119+ 6C41 25 6C       >                dw      last_NFA            // Link to previous definition Name
 119+ 6C43             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 6C43 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 119+ 6C46             >
 119+ 6C46             >
 119+ 6C46             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 6C46             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 6C46             >
 119+ 6C46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 119+ 6C46 00 00       >                dw      0
 120+ 6C48                              Constant_Def ONE        ,   "1"     ,   1
 120+ 6C48             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 120+ 6C48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ 6C48             >
 120+ 6C48             >                // dummy db directives used to calculate length of namec
 120+ 6C48 31          >                db      "1"
 120+ 6C49             >len_NFA         defl    $ - temp_NFA
 120+ 6C49             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ 6C48             >
 120+ 6C48 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ 6C49 31          >                db      "1"               // name string in 7-bit ascii, but
 120+ 6C4A             >                org     $-1                 // alter last byte of Name just above to set
 120+ 6C49 B1          >                db      {b $} | END_BIT     // msb as name end
 120+ 6C4A             >
 120+ 6C4A 3F 6C       >                dw      last_NFA            // Link to previous definition Name
 120+ 6C4C             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6C4C CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6C4F             >
 120+ 6C4F             >
 120+ 6C4F             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6C4F             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6C4F             >
 120+ 6C4F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6C4F 01 00       >                dw      1
 121+ 6C51                              Constant_Def TWO        ,   "2"     ,   2
 121+ 6C51             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 121+ 6C51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ 6C51             >
 121+ 6C51             >                // dummy db directives used to calculate length of namec
 121+ 6C51 32          >                db      "2"
 121+ 6C52             >len_NFA         defl    $ - temp_NFA
 121+ 6C52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ 6C51             >
 121+ 6C51 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ 6C52 32          >                db      "2"               // name string in 7-bit ascii, but
 121+ 6C53             >                org     $-1                 // alter last byte of Name just above to set
 121+ 6C52 B2          >                db      {b $} | END_BIT     // msb as name end
 121+ 6C53             >
 121+ 6C53 48 6C       >                dw      last_NFA            // Link to previous definition Name
 121+ 6C55             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6C55 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6C58             >
 121+ 6C58             >
 121+ 6C58             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6C58             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6C58             >
 121+ 6C58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6C58 02 00       >                dw      2
 122+ 6C5A                              Constant_Def THREE      ,   "3"     ,   3
 122+ 6C5A             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 122+ 6C5A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ 6C5A             >
 122+ 6C5A             >                // dummy db directives used to calculate length of namec
 122+ 6C5A 33          >                db      "3"
 122+ 6C5B             >len_NFA         defl    $ - temp_NFA
 122+ 6C5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ 6C5A             >
 122+ 6C5A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ 6C5B 33          >                db      "3"               // name string in 7-bit ascii, but
 122+ 6C5C             >                org     $-1                 // alter last byte of Name just above to set
 122+ 6C5B B3          >                db      {b $} | END_BIT     // msb as name end
 122+ 6C5C             >
 122+ 6C5C 51 6C       >                dw      last_NFA            // Link to previous definition Name
 122+ 6C5E             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6C5E CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6C61             >
 122+ 6C61             >
 122+ 6C61             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6C61             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6C61             >
 122+ 6C61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6C61 03 00       >                dw      3
 123+ 6C63                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 123+ 6C63             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 123+ 6C63             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ 6C63             >
 123+ 6C63             >                // dummy db directives used to calculate length of namec
 123+ 6C63 2D 31       >                db      "-1"
 123+ 6C65             >len_NFA         defl    $ - temp_NFA
 123+ 6C65             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ 6C63             >
 123+ 6C63 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ 6C64 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 123+ 6C66             >                org     $-1                 // alter last byte of Name just above to set
 123+ 6C65 B1          >                db      {b $} | END_BIT     // msb as name end
 123+ 6C66             >
 123+ 6C66 5A 6C       >                dw      last_NFA            // Link to previous definition Name
 123+ 6C68             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6C68 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6C6B             >
 123+ 6C6B             >
 123+ 6C6B             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6C6B             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6C6B             >
 123+ 6C6B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6C6B FF FF       >                dw      -1
 124+ 6C6D                              Constant_Def BL         ,   "BL"    , $20
 124+ 6C6D             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 124+ 6C6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ 6C6D             >
 124+ 6C6D             >                // dummy db directives used to calculate length of namec
 124+ 6C6D 42 4C       >                db      "BL"
 124+ 6C6F             >len_NFA         defl    $ - temp_NFA
 124+ 6C6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ 6C6D             >
 124+ 6C6D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ 6C6E 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 124+ 6C70             >                org     $-1                 // alter last byte of Name just above to set
 124+ 6C6F CC          >                db      {b $} | END_BIT     // msb as name end
 124+ 6C70             >
 124+ 6C70 63 6C       >                dw      last_NFA            // Link to previous definition Name
 124+ 6C72             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6C72 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6C75             >
 124+ 6C75             >
 124+ 6C75             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6C75             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6C75             >
 124+ 6C75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6C75 20 00       >                dw      $20
 125+ 6C77                              Constant_Def CL         ,   "C/L"   ,  64
 125+ 6C77             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 125+ 6C77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ 6C77             >
 125+ 6C77             >                // dummy db directives used to calculate length of namec
 125+ 6C77 43 2F 4C    >                db      "C/L"
 125+ 6C7A             >len_NFA         defl    $ - temp_NFA
 125+ 6C7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ 6C77             >
 125+ 6C77 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ 6C78 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 125+ 6C7B             >                org     $-1                 // alter last byte of Name just above to set
 125+ 6C7A CC          >                db      {b $} | END_BIT     // msb as name end
 125+ 6C7B             >
 125+ 6C7B 6D 6C       >                dw      last_NFA            // Link to previous definition Name
 125+ 6C7D             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6C7D CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6C80             >
 125+ 6C80             >
 125+ 6C80             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6C80             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6C80             >
 125+ 6C80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6C80 40 00       >                dw      64
 126+ 6C82                              Constant_Def BBUF       ,   "B/BUF" , 512
 126+ 6C82             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 126+ 6C82             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ 6C82             >
 126+ 6C82             >                // dummy db directives used to calculate length of namec
 126+ 6C82 42 2F 42 55 >                db      "B/BUF"
 126+ 6C86 46          >
 126+ 6C87             >len_NFA         defl    $ - temp_NFA
 126+ 6C87             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ 6C82             >
 126+ 6C82 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ 6C83 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 126+ 6C87 46          >
 126+ 6C88             >                org     $-1                 // alter last byte of Name just above to set
 126+ 6C87 C6          >                db      {b $} | END_BIT     // msb as name end
 126+ 6C88             >
 126+ 6C88 77 6C       >                dw      last_NFA            // Link to previous definition Name
 126+ 6C8A             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6C8A CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6C8D             >
 126+ 6C8D             >
 126+ 6C8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6C8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6C8D             >
 126+ 6C8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6C8D 00 02       >                dw      512
 127+ 6C8F                              Constant_Def BSCR       ,   "B/SCR" ,   2
 127+ 6C8F             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 127+ 6C8F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ 6C8F             >
 127+ 6C8F             >                // dummy db directives used to calculate length of namec
 127+ 6C8F 42 2F 53 43 >                db      "B/SCR"
 127+ 6C93 52          >
 127+ 6C94             >len_NFA         defl    $ - temp_NFA
 127+ 6C94             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ 6C8F             >
 127+ 6C8F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ 6C90 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 127+ 6C94 52          >
 127+ 6C95             >                org     $-1                 // alter last byte of Name just above to set
 127+ 6C94 D2          >                db      {b $} | END_BIT     // msb as name end
 127+ 6C95             >
 127+ 6C95 82 6C       >                dw      last_NFA            // Link to previous definition Name
 127+ 6C97             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6C97 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6C9A             >
 127+ 6C9A             >
 127+ 6C9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6C9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6C9A             >
 127+ 6C9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6C9A 02 00       >                dw      2
 128+ 6C9C                              Constant_Def LSCR       ,   "L/SCR" ,  16
 128+ 6C9C             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 128+ 6C9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ 6C9C             >
 128+ 6C9C             >                // dummy db directives used to calculate length of namec
 128+ 6C9C 4C 2F 53 43 >                db      "L/SCR"
 128+ 6CA0 52          >
 128+ 6CA1             >len_NFA         defl    $ - temp_NFA
 128+ 6CA1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ 6C9C             >
 128+ 6C9C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ 6C9D 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 128+ 6CA1 52          >
 128+ 6CA2             >                org     $-1                 // alter last byte of Name just above to set
 128+ 6CA1 D2          >                db      {b $} | END_BIT     // msb as name end
 128+ 6CA2             >
 128+ 6CA2 8F 6C       >                dw      last_NFA            // Link to previous definition Name
 128+ 6CA4             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6CA4 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6CA7             >
 128+ 6CA7             >
 128+ 6CA7             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6CA7             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6CA7             >
 128+ 6CA7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6CA7 10 00       >                dw      16
 129+ 6CA9
 130+ 6CA9              //  ______________________________________________________________________
 131+ 6CA9              //
 132+ 6CA9              // +origin         --
 133+ 6CA9              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 134+ 6CA9              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 135+ 6CA9              //              dw      PLUS                    // +
 136+ 6CA9              //              dw      EXIT                    // ;
 137+ 6CA9                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 137+ 6CA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 137+ 6CA9             >
 137+ 6CA9             >                // dummy db directives used to calculate length of namec
 137+ 6CA9 2B 4F 52 49 >                db      "+ORIGIN"
 137+ 6CAD 47 49 4E    >
 137+ 6CB0             >len_NFA         defl    $ - temp_NFA
 137+ 6CB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 137+ 6CA9             >
 137+ 6CA9 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 137+ 6CAA 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 137+ 6CAE 47 49 4E    >
 137+ 6CB1             >                org     $-1                 // alter last byte of Name just above to set
 137+ 6CB0 CE          >                db      {b $} | END_BIT     // msb as name end
 137+ 6CB1             >
 137+ 6CB1 9C 6C       >                dw      last_NFA            // Link to previous definition Name
 137+ 6CB3             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 137+ 6CB3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 137+ 6CB3 ~           >
 137+ 6CB3 ~           >
 137+ 6CB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 137+ 6CB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 137+ 6CB3             >
 137+ 6CB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 138+ 6CB3
 139+ 6CB3 E1                           pop     hl
 140+ 6CB4 11 66 63                     ld      de, Cold_origin
 141+ 6CB7 19                           add     hl, de
 142+ 6CB8 E5                           push    hl
 143+ 6CB9
 144+ 6CB9                              next
 144+ 6CB9 DD E9       >                jp      (ix)
 145+ 6CBB
 146+ 6CBB
 147+ 6CBB              //  ______________________________________________________________________
 148+ 6CBB              //
 149+ 6CBB                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 149+ 6CBB             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 149+ 6CBB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 149+ 6CBB             >
 149+ 6CBB             >                // dummy db directives used to calculate length of namec
 149+ 6CBB 28 4E 45 58 >                db      "(NEXT)"
 149+ 6CBF 54 29       >
 149+ 6CC1             >len_NFA         defl    $ - temp_NFA
 149+ 6CC1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 149+ 6CBB             >
 149+ 6CBB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 149+ 6CBC 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 149+ 6CC0 54 29       >
 149+ 6CC2             >                org     $-1                 // alter last byte of Name just above to set
 149+ 6CC1 A9          >                db      {b $} | END_BIT     // msb as name end
 149+ 6CC2             >
 149+ 6CC2 A9 6C       >                dw      last_NFA            // Link to previous definition Name
 149+ 6CC4             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 149+ 6CC4 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 149+ 6CC7             >
 149+ 6CC7             >
 149+ 6CC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 149+ 6CC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 149+ 6CC7             >
 149+ 6CC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 149+ 6CC7 98 63       >                dw      Next_Ptr
 150+ 6CC9
 151+ 6CC9              //  ______________________________________________________________________
 152+ 6CC9              //
 153+ 6CC9
 154+ 6CC9                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 154+ 6CC9             >                New_Def  S0, "S0", User_Ptr, is_normal
 154+ 6CC9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 154+ 6CC9             >
 154+ 6CC9             >                // dummy db directives used to calculate length of namec
 154+ 6CC9 53 30       >                db      "S0"
 154+ 6CCB             >len_NFA         defl    $ - temp_NFA
 154+ 6CCB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 154+ 6CC9             >
 154+ 6CC9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 154+ 6CCA 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 154+ 6CCC             >                org     $-1                 // alter last byte of Name just above to set
 154+ 6CCB B0          >                db      {b $} | END_BIT     // msb as name end
 154+ 6CCC             >
 154+ 6CCC BB 6C       >                dw      last_NFA            // Link to previous definition Name
 154+ 6CCE             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 154+ 6CCE CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 154+ 6CD1             >
 154+ 6CD1             >
 154+ 6CD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 154+ 6CD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 154+ 6CD1             >
 154+ 6CD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 6CD1 06          >                db      06
 155+ 6CD2                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 155+ 6CD2             >                New_Def  R0, "R0", User_Ptr, is_normal
 155+ 6CD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ 6CD2             >
 155+ 6CD2             >                // dummy db directives used to calculate length of namec
 155+ 6CD2 52 30       >                db      "R0"
 155+ 6CD4             >len_NFA         defl    $ - temp_NFA
 155+ 6CD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ 6CD2             >
 155+ 6CD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ 6CD3 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 155+ 6CD5             >                org     $-1                 // alter last byte of Name just above to set
 155+ 6CD4 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ 6CD5             >
 155+ 6CD5 C9 6C       >                dw      last_NFA            // Link to previous definition Name
 155+ 6CD7             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6CD7 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6CDA             >
 155+ 6CDA             >
 155+ 6CDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6CDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6CDA             >
 155+ 6CDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6CDA 08          >                db      08
 156+ 6CDB                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 156+ 6CDB             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 156+ 6CDB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 6CDB             >
 156+ 6CDB             >                // dummy db directives used to calculate length of namec
 156+ 6CDB 54 49 42    >                db      "TIB"
 156+ 6CDE             >len_NFA         defl    $ - temp_NFA
 156+ 6CDE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 6CDB             >
 156+ 6CDB 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 6CDC 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 156+ 6CDF             >                org     $-1                 // alter last byte of Name just above to set
 156+ 6CDE C2          >                db      {b $} | END_BIT     // msb as name end
 156+ 6CDF             >
 156+ 6CDF D2 6C       >                dw      last_NFA            // Link to previous definition Name
 156+ 6CE1             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6CE1 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6CE4             >
 156+ 6CE4             >
 156+ 6CE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6CE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6CE4             >
 156+ 6CE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6CE4 0A          >                db      10
 157+ 6CE5                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 157+ 6CE5             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 157+ 6CE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ 6CE5             >
 157+ 6CE5             >                // dummy db directives used to calculate length of namec
 157+ 6CE5 57 49 44 54 >                db      "WIDTH"
 157+ 6CE9 48          >
 157+ 6CEA             >len_NFA         defl    $ - temp_NFA
 157+ 6CEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ 6CE5             >
 157+ 6CE5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ 6CE6 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 157+ 6CEA 48          >
 157+ 6CEB             >                org     $-1                 // alter last byte of Name just above to set
 157+ 6CEA C8          >                db      {b $} | END_BIT     // msb as name end
 157+ 6CEB             >
 157+ 6CEB DB 6C       >                dw      last_NFA            // Link to previous definition Name
 157+ 6CED             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6CED CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6CF0             >
 157+ 6CF0             >
 157+ 6CF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6CF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6CF0             >
 157+ 6CF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6CF0 0C          >                db      12
 158+ 6CF1                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 158+ 6CF1             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 158+ 6CF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ 6CF1             >
 158+ 6CF1             >                // dummy db directives used to calculate length of namec
 158+ 6CF1 57 41 52 4E >                db      "WARNING"
 158+ 6CF5 49 4E 47    >
 158+ 6CF8             >len_NFA         defl    $ - temp_NFA
 158+ 6CF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ 6CF1             >
 158+ 6CF1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ 6CF2 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 158+ 6CF6 49 4E 47    >
 158+ 6CF9             >                org     $-1                 // alter last byte of Name just above to set
 158+ 6CF8 C7          >                db      {b $} | END_BIT     // msb as name end
 158+ 6CF9             >
 158+ 6CF9 E5 6C       >                dw      last_NFA            // Link to previous definition Name
 158+ 6CFB             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6CFB CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6CFE             >
 158+ 6CFE             >
 158+ 6CFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6CFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6CFE             >
 158+ 6CFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6CFE 0E          >                db      14
 159+ 6CFF                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 159+ 6CFF             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 159+ 6CFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ 6CFF             >
 159+ 6CFF             >                // dummy db directives used to calculate length of namec
 159+ 6CFF 46 45 4E 43 >                db      "FENCE"
 159+ 6D03 45          >
 159+ 6D04             >len_NFA         defl    $ - temp_NFA
 159+ 6D04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ 6CFF             >
 159+ 6CFF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ 6D00 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 159+ 6D04 45          >
 159+ 6D05             >                org     $-1                 // alter last byte of Name just above to set
 159+ 6D04 C5          >                db      {b $} | END_BIT     // msb as name end
 159+ 6D05             >
 159+ 6D05 F1 6C       >                dw      last_NFA            // Link to previous definition Name
 159+ 6D07             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6D07 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6D0A             >
 159+ 6D0A             >
 159+ 6D0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6D0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6D0A             >
 159+ 6D0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6D0A 10          >                db      16
 160+ 6D0B                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 160+ 6D0B             >                New_Def  DP, "DP", User_Ptr, is_normal
 160+ 6D0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ 6D0B             >
 160+ 6D0B             >                // dummy db directives used to calculate length of namec
 160+ 6D0B 44 50       >                db      "DP"
 160+ 6D0D             >len_NFA         defl    $ - temp_NFA
 160+ 6D0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ 6D0B             >
 160+ 6D0B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ 6D0C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 160+ 6D0E             >                org     $-1                 // alter last byte of Name just above to set
 160+ 6D0D D0          >                db      {b $} | END_BIT     // msb as name end
 160+ 6D0E             >
 160+ 6D0E FF 6C       >                dw      last_NFA            // Link to previous definition Name
 160+ 6D10             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6D10 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6D13             >
 160+ 6D13             >
 160+ 6D13             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6D13             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6D13             >
 160+ 6D13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6D13 12          >                db      18
 161+ 6D14                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 161+ 6D14             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 161+ 6D14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ 6D14             >
 161+ 6D14             >                // dummy db directives used to calculate length of namec
 161+ 6D14 56 4F 43 2D >                db      "VOC-LINK"
 161+ 6D18 4C 49 4E 4B >
 161+ 6D1C             >len_NFA         defl    $ - temp_NFA
 161+ 6D1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ 6D14             >
 161+ 6D14 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ 6D15 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 161+ 6D19 4C 49 4E 4B >
 161+ 6D1D             >                org     $-1                 // alter last byte of Name just above to set
 161+ 6D1C CB          >                db      {b $} | END_BIT     // msb as name end
 161+ 6D1D             >
 161+ 6D1D 0B 6D       >                dw      last_NFA            // Link to previous definition Name
 161+ 6D1F             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6D1F CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6D22             >
 161+ 6D22             >
 161+ 6D22             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6D22             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6D22             >
 161+ 6D22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6D22 14          >                db      20
 162+ 6D23                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 162+ 6D23             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 162+ 6D23             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ 6D23             >
 162+ 6D23             >                // dummy db directives used to calculate length of namec
 162+ 6D23 46 49 52 53 >                db      "FIRST"
 162+ 6D27 54          >
 162+ 6D28             >len_NFA         defl    $ - temp_NFA
 162+ 6D28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ 6D23             >
 162+ 6D23 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ 6D24 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 162+ 6D28 54          >
 162+ 6D29             >                org     $-1                 // alter last byte of Name just above to set
 162+ 6D28 D4          >                db      {b $} | END_BIT     // msb as name end
 162+ 6D29             >
 162+ 6D29 14 6D       >                dw      last_NFA            // Link to previous definition Name
 162+ 6D2B             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6D2B CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6D2E             >
 162+ 6D2E             >
 162+ 6D2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6D2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6D2E             >
 162+ 6D2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6D2E 16          >                db      22
 163+ 6D2F                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 163+ 6D2F             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 163+ 6D2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ 6D2F             >
 163+ 6D2F             >                // dummy db directives used to calculate length of namec
 163+ 6D2F 4C 49 4D 49 >                db      "LIMIT"
 163+ 6D33 54          >
 163+ 6D34             >len_NFA         defl    $ - temp_NFA
 163+ 6D34             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ 6D2F             >
 163+ 6D2F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ 6D30 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 163+ 6D34 54          >
 163+ 6D35             >                org     $-1                 // alter last byte of Name just above to set
 163+ 6D34 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ 6D35             >
 163+ 6D35 23 6D       >                dw      last_NFA            // Link to previous definition Name
 163+ 6D37             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6D37 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6D3A             >
 163+ 6D3A             >
 163+ 6D3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6D3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6D3A             >
 163+ 6D3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6D3A 18          >                db      24
 164+ 6D3B                              User_Def EXP        , "EXP"       , 26 // keeps the exponent in number conversion
 164+ 6D3B             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 164+ 6D3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ 6D3B             >
 164+ 6D3B             >                // dummy db directives used to calculate length of namec
 164+ 6D3B 45 58 50    >                db      "EXP"
 164+ 6D3E             >len_NFA         defl    $ - temp_NFA
 164+ 6D3E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ 6D3B             >
 164+ 6D3B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ 6D3C 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 164+ 6D3F             >                org     $-1                 // alter last byte of Name just above to set
 164+ 6D3E D0          >                db      {b $} | END_BIT     // msb as name end
 164+ 6D3F             >
 164+ 6D3F 2F 6D       >                dw      last_NFA            // Link to previous definition Name
 164+ 6D41             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6D41 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6D44             >
 164+ 6D44             >
 164+ 6D44             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6D44             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6D44             >
 164+ 6D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6D44 1A          >                db      26
 165+ 6D45                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 165+ 6D45             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 165+ 6D45             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ 6D45             >
 165+ 6D45             >                // dummy db directives used to calculate length of namec
 165+ 6D45 4E 4D 4F 44 >                db      "NMODE"
 165+ 6D49 45          >
 165+ 6D4A             >len_NFA         defl    $ - temp_NFA
 165+ 6D4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ 6D45             >
 165+ 6D45 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ 6D46 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 165+ 6D4A 45          >
 165+ 6D4B             >                org     $-1                 // alter last byte of Name just above to set
 165+ 6D4A C5          >                db      {b $} | END_BIT     // msb as name end
 165+ 6D4B             >
 165+ 6D4B 3B 6D       >                dw      last_NFA            // Link to previous definition Name
 165+ 6D4D             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6D4D CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6D50             >
 165+ 6D50             >
 165+ 6D50             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6D50             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6D50             >
 165+ 6D50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6D50 1C          >                db      28
 166+ 6D51                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 166+ 6D51             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 166+ 6D51             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ 6D51             >
 166+ 6D51             >                // dummy db directives used to calculate length of namec
 166+ 6D51 42 4C 4B    >                db      "BLK"
 166+ 6D54             >len_NFA         defl    $ - temp_NFA
 166+ 6D54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ 6D51             >
 166+ 6D51 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ 6D52 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 166+ 6D55             >                org     $-1                 // alter last byte of Name just above to set
 166+ 6D54 CB          >                db      {b $} | END_BIT     // msb as name end
 166+ 6D55             >
 166+ 6D55 45 6D       >                dw      last_NFA            // Link to previous definition Name
 166+ 6D57             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6D57 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6D5A             >
 166+ 6D5A             >
 166+ 6D5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6D5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6D5A             >
 166+ 6D5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6D5A 1E          >                db      30
 167+ 6D5B                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 167+ 6D5B             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 167+ 6D5B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ 6D5B             >
 167+ 6D5B             >                // dummy db directives used to calculate length of namec
 167+ 6D5B 3E 49 4E    >                db      ">IN"
 167+ 6D5E             >len_NFA         defl    $ - temp_NFA
 167+ 6D5E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ 6D5B             >
 167+ 6D5B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ 6D5C 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 167+ 6D5F             >                org     $-1                 // alter last byte of Name just above to set
 167+ 6D5E CE          >                db      {b $} | END_BIT     // msb as name end
 167+ 6D5F             >
 167+ 6D5F 51 6D       >                dw      last_NFA            // Link to previous definition Name
 167+ 6D61             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6D61 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6D64             >
 167+ 6D64             >
 167+ 6D64             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6D64             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6D64             >
 167+ 6D64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6D64 20          >                db      32
 168+ 6D65                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 168+ 6D65             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 168+ 6D65             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ 6D65             >
 168+ 6D65             >                // dummy db directives used to calculate length of namec
 168+ 6D65 4F 55 54    >                db      "OUT"
 168+ 6D68             >len_NFA         defl    $ - temp_NFA
 168+ 6D68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ 6D65             >
 168+ 6D65 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ 6D66 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 168+ 6D69             >                org     $-1                 // alter last byte of Name just above to set
 168+ 6D68 D4          >                db      {b $} | END_BIT     // msb as name end
 168+ 6D69             >
 168+ 6D69 5B 6D       >                dw      last_NFA            // Link to previous definition Name
 168+ 6D6B             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6D6B CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6D6E             >
 168+ 6D6E             >
 168+ 6D6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6D6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6D6E             >
 168+ 6D6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6D6E 22          >                db      34
 169+ 6D6F                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 169+ 6D6F             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 169+ 6D6F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ 6D6F             >
 169+ 6D6F             >                // dummy db directives used to calculate length of namec
 169+ 6D6F 53 43 52    >                db      "SCR"
 169+ 6D72             >len_NFA         defl    $ - temp_NFA
 169+ 6D72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ 6D6F             >
 169+ 6D6F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ 6D70 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 169+ 6D73             >                org     $-1                 // alter last byte of Name just above to set
 169+ 6D72 D2          >                db      {b $} | END_BIT     // msb as name end
 169+ 6D73             >
 169+ 6D73 65 6D       >                dw      last_NFA            // Link to previous definition Name
 169+ 6D75             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6D75 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6D78             >
 169+ 6D78             >
 169+ 6D78             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6D78             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6D78             >
 169+ 6D78             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6D78 24          >                db      36
 170+ 6D79                              User_Def OFFSET     , "OFFSET"    , 38 //
 170+ 6D79             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 170+ 6D79             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ 6D79             >
 170+ 6D79             >                // dummy db directives used to calculate length of namec
 170+ 6D79 4F 46 46 53 >                db      "OFFSET"
 170+ 6D7D 45 54       >
 170+ 6D7F             >len_NFA         defl    $ - temp_NFA
 170+ 6D7F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ 6D79             >
 170+ 6D79 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ 6D7A 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 170+ 6D7E 45 54       >
 170+ 6D80             >                org     $-1                 // alter last byte of Name just above to set
 170+ 6D7F D4          >                db      {b $} | END_BIT     // msb as name end
 170+ 6D80             >
 170+ 6D80 6F 6D       >                dw      last_NFA            // Link to previous definition Name
 170+ 6D82             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6D82 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6D85             >
 170+ 6D85             >
 170+ 6D85             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6D85             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6D85             >
 170+ 6D85             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6D85 26          >                db      38
 171+ 6D86                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 171+ 6D86             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 171+ 6D86             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ 6D86             >
 171+ 6D86             >                // dummy db directives used to calculate length of namec
 171+ 6D86 43 4F 4E 54 >                db      "CONTEXT"
 171+ 6D8A 45 58 54    >
 171+ 6D8D             >len_NFA         defl    $ - temp_NFA
 171+ 6D8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ 6D86             >
 171+ 6D86 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ 6D87 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 171+ 6D8B 45 58 54    >
 171+ 6D8E             >                org     $-1                 // alter last byte of Name just above to set
 171+ 6D8D D4          >                db      {b $} | END_BIT     // msb as name end
 171+ 6D8E             >
 171+ 6D8E 79 6D       >                dw      last_NFA            // Link to previous definition Name
 171+ 6D90             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6D90 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6D93             >
 171+ 6D93             >
 171+ 6D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6D93             >
 171+ 6D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6D93 28          >                db      40
 172+ 6D94                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 172+ 6D94             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 172+ 6D94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ 6D94             >
 172+ 6D94             >                // dummy db directives used to calculate length of namec
 172+ 6D94 43 55 52 52 >                db      "CURRENT"
 172+ 6D98 45 4E 54    >
 172+ 6D9B             >len_NFA         defl    $ - temp_NFA
 172+ 6D9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ 6D94             >
 172+ 6D94 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ 6D95 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 172+ 6D99 45 4E 54    >
 172+ 6D9C             >                org     $-1                 // alter last byte of Name just above to set
 172+ 6D9B D4          >                db      {b $} | END_BIT     // msb as name end
 172+ 6D9C             >
 172+ 6D9C 86 6D       >                dw      last_NFA            // Link to previous definition Name
 172+ 6D9E             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6D9E CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6DA1             >
 172+ 6DA1             >
 172+ 6DA1             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6DA1             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6DA1             >
 172+ 6DA1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6DA1 2A          >                db      42
 173+ 6DA2                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 173+ 6DA2             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 173+ 6DA2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 6DA2             >
 173+ 6DA2             >                // dummy db directives used to calculate length of namec
 173+ 6DA2 53 54 41 54 >                db      "STATE"
 173+ 6DA6 45          >
 173+ 6DA7             >len_NFA         defl    $ - temp_NFA
 173+ 6DA7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 6DA2             >
 173+ 6DA2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 6DA3 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 173+ 6DA7 45          >
 173+ 6DA8             >                org     $-1                 // alter last byte of Name just above to set
 173+ 6DA7 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 6DA8             >
 173+ 6DA8 94 6D       >                dw      last_NFA            // Link to previous definition Name
 173+ 6DAA             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6DAA CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6DAD             >
 173+ 6DAD             >
 173+ 6DAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6DAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6DAD             >
 173+ 6DAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6DAD 2C          >                db      44
 174+ 6DAE                              User_Def BASE       , "BASE"      , 46 //
 174+ 6DAE             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 174+ 6DAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ 6DAE             >
 174+ 6DAE             >                // dummy db directives used to calculate length of namec
 174+ 6DAE 42 41 53 45 >                db      "BASE"
 174+ 6DB2             >len_NFA         defl    $ - temp_NFA
 174+ 6DB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ 6DAE             >
 174+ 6DAE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ 6DAF 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 174+ 6DB3             >                org     $-1                 // alter last byte of Name just above to set
 174+ 6DB2 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ 6DB3             >
 174+ 6DB3 A2 6D       >                dw      last_NFA            // Link to previous definition Name
 174+ 6DB5             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6DB5 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6DB8             >
 174+ 6DB8             >
 174+ 6DB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6DB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6DB8             >
 174+ 6DB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6DB8 2E          >                db      46
 175+ 6DB9                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 175+ 6DB9             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 175+ 6DB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ 6DB9             >
 175+ 6DB9             >                // dummy db directives used to calculate length of namec
 175+ 6DB9 44 50 4C    >                db      "DPL"
 175+ 6DBC             >len_NFA         defl    $ - temp_NFA
 175+ 6DBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ 6DB9             >
 175+ 6DB9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ 6DBA 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 175+ 6DBD             >                org     $-1                 // alter last byte of Name just above to set
 175+ 6DBC CC          >                db      {b $} | END_BIT     // msb as name end
 175+ 6DBD             >
 175+ 6DBD AE 6D       >                dw      last_NFA            // Link to previous definition Name
 175+ 6DBF             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6DBF CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6DC2             >
 175+ 6DC2             >
 175+ 6DC2             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6DC2             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6DC2             >
 175+ 6DC2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6DC2 30          >                db      48
 176+ 6DC3                              User_Def FLD        , "FLD"       , 50 // output field width
 176+ 6DC3             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 176+ 6DC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ 6DC3             >
 176+ 6DC3             >                // dummy db directives used to calculate length of namec
 176+ 6DC3 46 4C 44    >                db      "FLD"
 176+ 6DC6             >len_NFA         defl    $ - temp_NFA
 176+ 6DC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ 6DC3             >
 176+ 6DC3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ 6DC4 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 176+ 6DC7             >                org     $-1                 // alter last byte of Name just above to set
 176+ 6DC6 C4          >                db      {b $} | END_BIT     // msb as name end
 176+ 6DC7             >
 176+ 6DC7 B9 6D       >                dw      last_NFA            // Link to previous definition Name
 176+ 6DC9             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6DC9 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6DCC             >
 176+ 6DCC             >
 176+ 6DCC             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6DCC             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6DCC             >
 176+ 6DCC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6DCC 32          >                db      50
 177+ 6DCD                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 177+ 6DCD             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 177+ 6DCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ 6DCD             >
 177+ 6DCD             >                // dummy db directives used to calculate length of namec
 177+ 6DCD 43 53 50    >                db      "CSP"
 177+ 6DD0             >len_NFA         defl    $ - temp_NFA
 177+ 6DD0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ 6DCD             >
 177+ 6DCD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ 6DCE 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 177+ 6DD1             >                org     $-1                 // alter last byte of Name just above to set
 177+ 6DD0 D0          >                db      {b $} | END_BIT     // msb as name end
 177+ 6DD1             >
 177+ 6DD1 C3 6D       >                dw      last_NFA            // Link to previous definition Name
 177+ 6DD3             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6DD3 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6DD6             >
 177+ 6DD6             >
 177+ 6DD6             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6DD6             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6DD6             >
 177+ 6DD6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6DD6 34          >                db      52
 178+ 6DD7                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 178+ 6DD7             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 178+ 6DD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ 6DD7             >
 178+ 6DD7             >                // dummy db directives used to calculate length of namec
 178+ 6DD7 52 23       >                db      "R#"
 178+ 6DD9             >len_NFA         defl    $ - temp_NFA
 178+ 6DD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ 6DD7             >
 178+ 6DD7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ 6DD8 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 178+ 6DDA             >                org     $-1                 // alter last byte of Name just above to set
 178+ 6DD9 A3          >                db      {b $} | END_BIT     // msb as name end
 178+ 6DDA             >
 178+ 6DDA CD 6D       >                dw      last_NFA            // Link to previous definition Name
 178+ 6DDC             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6DDC CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6DDF             >
 178+ 6DDF             >
 178+ 6DDF             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6DDF             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6DDF             >
 178+ 6DDF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6DDF 36          >                db      54
 179+ 6DE0                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 179+ 6DE0             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 179+ 6DE0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ 6DE0             >
 179+ 6DE0             >                // dummy db directives used to calculate length of namec
 179+ 6DE0 48 4C 44    >                db      "HLD"
 179+ 6DE3             >len_NFA         defl    $ - temp_NFA
 179+ 6DE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ 6DE0             >
 179+ 6DE0 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ 6DE1 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 179+ 6DE4             >                org     $-1                 // alter last byte of Name just above to set
 179+ 6DE3 C4          >                db      {b $} | END_BIT     // msb as name end
 179+ 6DE4             >
 179+ 6DE4 D7 6D       >                dw      last_NFA            // Link to previous definition Name
 179+ 6DE6             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6DE6 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6DE9             >
 179+ 6DE9             >
 179+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6DE9             >
 179+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6DE9 38          >                db      56
 180+ 6DEA                              User_Def USE        , "USE"       , 58 // address of last used block
 180+ 6DEA             >                New_Def  USE, "USE", User_Ptr, is_normal
 180+ 6DEA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ 6DEA             >
 180+ 6DEA             >                // dummy db directives used to calculate length of namec
 180+ 6DEA 55 53 45    >                db      "USE"
 180+ 6DED             >len_NFA         defl    $ - temp_NFA
 180+ 6DED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ 6DEA             >
 180+ 6DEA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ 6DEB 55 53 45    >                db      "USE"               // name string in 7-bit ascii, but
 180+ 6DEE             >                org     $-1                 // alter last byte of Name just above to set
 180+ 6DED C5          >                db      {b $} | END_BIT     // msb as name end
 180+ 6DEE             >
 180+ 6DEE E0 6D       >                dw      last_NFA            // Link to previous definition Name
 180+ 6DF0             >USE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6DF0 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6DF3             >
 180+ 6DF3             >
 180+ 6DF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6DF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6DF3             >
 180+ 6DF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6DF3 3A          >                db      58
 181+ 6DF4                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 181+ 6DF4             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 181+ 6DF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ 6DF4             >
 181+ 6DF4             >                // dummy db directives used to calculate length of namec
 181+ 6DF4 50 52 45 56 >                db      "PREV"
 181+ 6DF8             >len_NFA         defl    $ - temp_NFA
 181+ 6DF8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ 6DF4             >
 181+ 6DF4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ 6DF5 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 181+ 6DF9             >                org     $-1                 // alter last byte of Name just above to set
 181+ 6DF8 D6          >                db      {b $} | END_BIT     // msb as name end
 181+ 6DF9             >
 181+ 6DF9 EA 6D       >                dw      last_NFA            // Link to previous definition Name
 181+ 6DFB             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6DFB CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6DFE             >
 181+ 6DFE             >
 181+ 6DFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6DFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6DFE             >
 181+ 6DFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6DFE 3C          >                db      60
 182+ 6DFF                              User_Def LP         , "LP"        , 62 // line printer (not used)
 182+ 6DFF             >                New_Def  LP, "LP", User_Ptr, is_normal
 182+ 6DFF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 6DFF             >
 182+ 6DFF             >                // dummy db directives used to calculate length of namec
 182+ 6DFF 4C 50       >                db      "LP"
 182+ 6E01             >len_NFA         defl    $ - temp_NFA
 182+ 6E01             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 6DFF             >
 182+ 6DFF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 6E00 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 182+ 6E02             >                org     $-1                 // alter last byte of Name just above to set
 182+ 6E01 D0          >                db      {b $} | END_BIT     // msb as name end
 182+ 6E02             >
 182+ 6E02 F4 6D       >                dw      last_NFA            // Link to previous definition Name
 182+ 6E04             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6E04 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6E07             >
 182+ 6E07             >
 182+ 6E07             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6E07             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6E07             >
 182+ 6E07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6E07 3E          >                db      62
 183+ 6E08                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 183+ 6E08             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 183+ 6E08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ 6E08             >
 183+ 6E08             >                // dummy db directives used to calculate length of namec
 183+ 6E08 50 4C 41 43 >                db      "PLACE"
 183+ 6E0C 45          >
 183+ 6E0D             >len_NFA         defl    $ - temp_NFA
 183+ 6E0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ 6E08             >
 183+ 6E08 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ 6E09 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 183+ 6E0D 45          >
 183+ 6E0E             >                org     $-1                 // alter last byte of Name just above to set
 183+ 6E0D C5          >                db      {b $} | END_BIT     // msb as name end
 183+ 6E0E             >
 183+ 6E0E FF 6D       >                dw      last_NFA            // Link to previous definition Name
 183+ 6E10             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6E10 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6E13             >
 183+ 6E13             >
 183+ 6E13             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6E13             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6E13             >
 183+ 6E13             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6E13 40          >                db      64
 184+ 6E14                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 184+ 6E14             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 184+ 6E14             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ 6E14             >
 184+ 6E14             >                // dummy db directives used to calculate length of namec
 184+ 6E14 53 4F 55 52 >                db      "SOURCE-ID"
 184+ 6E18 43 45 2D 49 >
 184+ 6E1C 44          >
 184+ 6E1D             >len_NFA         defl    $ - temp_NFA
 184+ 6E1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ 6E14             >
 184+ 6E14 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ 6E15 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 184+ 6E19 43 45 2D 49 >
 184+ 6E1D 44          >
 184+ 6E1E             >                org     $-1                 // alter last byte of Name just above to set
 184+ 6E1D C4          >                db      {b $} | END_BIT     // msb as name end
 184+ 6E1E             >
 184+ 6E1E 08 6E       >                dw      last_NFA            // Link to previous definition Name
 184+ 6E20             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6E20 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6E23             >
 184+ 6E23             >
 184+ 6E23             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6E23             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6E23             >
 184+ 6E23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6E23 42          >                db      66
 185+ 6E24                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 185+ 6E24             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 185+ 6E24             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ 6E24             >
 185+ 6E24             >                // dummy db directives used to calculate length of namec
 185+ 6E24 53 50 41 4E >                db      "SPAN"
 185+ 6E28             >len_NFA         defl    $ - temp_NFA
 185+ 6E28             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ 6E24             >
 185+ 6E24 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ 6E25 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 185+ 6E29             >                org     $-1                 // alter last byte of Name just above to set
 185+ 6E28 CE          >                db      {b $} | END_BIT     // msb as name end
 185+ 6E29             >
 185+ 6E29 14 6E       >                dw      last_NFA            // Link to previous definition Name
 185+ 6E2B             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6E2B CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6E2E             >
 185+ 6E2E             >
 185+ 6E2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6E2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6E2E             >
 185+ 6E2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6E2E 44          >                db      68
 186+ 6E2F                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 186+ 6E2F             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 186+ 6E2F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ 6E2F             >
 186+ 6E2F             >                // dummy db directives used to calculate length of namec
 186+ 6E2F 48 41 4E 44 >                db      "HANDLER"
 186+ 6E33 4C 45 52    >
 186+ 6E36             >len_NFA         defl    $ - temp_NFA
 186+ 6E36             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ 6E2F             >
 186+ 6E2F 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ 6E30 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 186+ 6E34 4C 45 52    >
 186+ 6E37             >                org     $-1                 // alter last byte of Name just above to set
 186+ 6E36 D2          >                db      {b $} | END_BIT     // msb as name end
 186+ 6E37             >
 186+ 6E37 24 6E       >                dw      last_NFA            // Link to previous definition Name
 186+ 6E39             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6E39 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6E3C             >
 186+ 6E3C             >
 186+ 6E3C             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6E3C             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6E3C             >
 186+ 6E3C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6E3C 46          >                db      70
 187+ 6E3D                              User_Def HP         , "HP"        , 72 // heap-pointer address
 187+ 6E3D             >                New_Def  HP, "HP", User_Ptr, is_normal
 187+ 6E3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ 6E3D             >
 187+ 6E3D             >                // dummy db directives used to calculate length of namec
 187+ 6E3D 48 50       >                db      "HP"
 187+ 6E3F             >len_NFA         defl    $ - temp_NFA
 187+ 6E3F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ 6E3D             >
 187+ 6E3D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ 6E3E 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 187+ 6E40             >                org     $-1                 // alter last byte of Name just above to set
 187+ 6E3F D0          >                db      {b $} | END_BIT     // msb as name end
 187+ 6E40             >
 187+ 6E40 2F 6E       >                dw      last_NFA            // Link to previous definition Name
 187+ 6E42             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6E42 CD 35 6C    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6E45             >
 187+ 6E45             >
 187+ 6E45             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6E45             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6E45             >
 187+ 6E45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6E45 48          >                db      72
 188+ 6E46
 189+ 6E46              //  ______________________________________________________________________
 190+ 6E46              //
 191+ 6E46              // here         -- a
 192+ 6E46                              Colon_Def HERE, "HERE", is_normal
 192+ 6E46             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 192+ 6E46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 192+ 6E46             >
 192+ 6E46             >                // dummy db directives used to calculate length of namec
 192+ 6E46 48 45 52 45 >                db      "HERE"
 192+ 6E4A             >len_NFA         defl    $ - temp_NFA
 192+ 6E4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 192+ 6E46             >
 192+ 6E46 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 192+ 6E47 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 192+ 6E4B             >                org     $-1                 // alter last byte of Name just above to set
 192+ 6E4A C5          >                db      {b $} | END_BIT     // msb as name end
 192+ 6E4B             >
 192+ 6E4B 3D 6E       >                dw      last_NFA            // Link to previous definition Name
 192+ 6E4D             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 192+ 6E4D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 192+ 6E50             >
 192+ 6E50             >
 192+ 6E50             >                endif           ; ok        // for other definitions it "points" the correct handler
 192+ 6E50             >                // Use of "; ok" to suppress "warning[fwdref]"
 192+ 6E50             >
 192+ 6E50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 193+ 6E50 10 6D FF 6A                  dw      DP, FETCH               // dp @
 194+ 6E54 3F 69                        dw      EXIT                    // ;
 195+ 6E56
 196+ 6E56              //  ______________________________________________________________________
 197+ 6E56              //
 198+ 6E56              // allot        n --
 199+ 6E56                              Colon_Def ALLOT, "ALLOT", is_normal
 199+ 6E56             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 199+ 6E56             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 199+ 6E56             >
 199+ 6E56             >                // dummy db directives used to calculate length of namec
 199+ 6E56 41 4C 4C 4F >                db      "ALLOT"
 199+ 6E5A 54          >
 199+ 6E5B             >len_NFA         defl    $ - temp_NFA
 199+ 6E5B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 199+ 6E56             >
 199+ 6E56 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 199+ 6E57 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 199+ 6E5B 54          >
 199+ 6E5C             >                org     $-1                 // alter last byte of Name just above to set
 199+ 6E5B D4          >                db      {b $} | END_BIT     // msb as name end
 199+ 6E5C             >
 199+ 6E5C 46 6E       >                dw      last_NFA            // Link to previous definition Name
 199+ 6E5E             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 199+ 6E5E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 199+ 6E61             >
 199+ 6E61             >
 199+ 6E61             >                endif           ; ok        // for other definitions it "points" the correct handler
 199+ 6E61             >                // Use of "; ok" to suppress "warning[fwdref]"
 199+ 6E61             >
 199+ 6E61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 200+ 6E61 10 6D E0 6A                  dw      DP,  PLUSSTORE          // dp +!
 201+ 6E65 3F 69                        dw      EXIT                    // ;
 202+ 6E67
 203+ 6E67              //  ______________________________________________________________________
 204+ 6E67              //
 205+ 6E67              // comma        n --
 206+ 6E67                              Colon_Def COMMA, ",", is_normal
 206+ 6E67             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 206+ 6E67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 206+ 6E67             >
 206+ 6E67             >                // dummy db directives used to calculate length of namec
 206+ 6E67 2C          >                db      ","
 206+ 6E68             >len_NFA         defl    $ - temp_NFA
 206+ 6E68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 206+ 6E67             >
 206+ 6E67 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 206+ 6E68 2C          >                db      ","               // name string in 7-bit ascii, but
 206+ 6E69             >                org     $-1                 // alter last byte of Name just above to set
 206+ 6E68 AC          >                db      {b $} | END_BIT     // msb as name end
 206+ 6E69             >
 206+ 6E69 56 6E       >                dw      last_NFA            // Link to previous definition Name
 206+ 6E6B             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 206+ 6E6B CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 206+ 6E6E             >
 206+ 6E6E             >
 206+ 6E6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 206+ 6E6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 206+ 6E6E             >
 206+ 6E6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 207+ 6E6E 4D 6E 0A 6B                  dw      HERE, STORE             // here !
 208+ 6E72 55 6C 5E 6E                  dw      TWO, ALLOT              // 2 allot
 209+ 6E76 3F 69                        dw      EXIT                    // ;
 210+ 6E78
 211+ 6E78              //  ______________________________________________________________________
 212+ 6E78              //
 213+ 6E78              // ccomma       c --
 214+ 6E78                              Colon_Def CCOMMA, "C,", is_normal
 214+ 6E78             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 214+ 6E78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 214+ 6E78             >
 214+ 6E78             >                // dummy db directives used to calculate length of namec
 214+ 6E78 43 2C       >                db      "C,"
 214+ 6E7A             >len_NFA         defl    $ - temp_NFA
 214+ 6E7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 214+ 6E78             >
 214+ 6E78 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 214+ 6E79 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 214+ 6E7B             >                org     $-1                 // alter last byte of Name just above to set
 214+ 6E7A AC          >                db      {b $} | END_BIT     // msb as name end
 214+ 6E7B             >
 214+ 6E7B 67 6E       >                dw      last_NFA            // Link to previous definition Name
 214+ 6E7D             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 214+ 6E7D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 214+ 6E80             >
 214+ 6E80             >
 214+ 6E80             >                endif           ; ok        // for other definitions it "points" the correct handler
 214+ 6E80             >                // Use of "; ok" to suppress "warning[fwdref]"
 214+ 6E80             >
 214+ 6E80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 215+ 6E80 4D 6E 22 6B                  dw      HERE, CSTORE            // here c!
 216+ 6E84 4C 6C 5E 6E                  dw      ONE, ALLOT              // 1 allot
 217+ 6E88 3F 69                        dw      EXIT                    // ;
 218+ 6E8A
 219+ 6E8A              //  ______________________________________________________________________
 220+ 6E8A              //
 221+ 6E8A              // s>d          n -- d
 222+ 6E8A              // converts a single precision integer in a double precision
 223+ 6E8A                              New_Def S_TO_D, "S>D", is_code, is_normal
 223+ 6E8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 6E8A             >
 223+ 6E8A             >                // dummy db directives used to calculate length of namec
 223+ 6E8A 53 3E 44    >                db      "S>D"
 223+ 6E8D             >len_NFA         defl    $ - temp_NFA
 223+ 6E8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 6E8A             >
 223+ 6E8A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 6E8B 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 223+ 6E8E             >                org     $-1                 // alter last byte of Name just above to set
 223+ 6E8D C4          >                db      {b $} | END_BIT     // msb as name end
 223+ 6E8E             >
 223+ 6E8E 78 6E       >                dw      last_NFA            // Link to previous definition Name
 223+ 6E90             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 6E90 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 6E90 ~           >
 223+ 6E90 ~           >
 223+ 6E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 6E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 6E90             >
 223+ 6E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 6E90 E1                           pop     hl
 225+ 6E91 7C                           ld      a, h
 226+ 6E92 E5                           push    hl
 227+ 6E93 17                           rla
 228+ 6E94 ED 62                        sbc     hl, hl
 229+ 6E96 E5                           push    hl
 230+ 6E97                              next
 230+ 6E97 DD E9       >                jp      (ix)
 231+ 6E99
 232+ 6E99              //  ______________________________________________________________________
 233+ 6E99              //
 234+ 6E99              // -            n1 n2 -- n3
 235+ 6E99              // subtraction
 236+ 6E99                              New_Def SUBTRACT, "-", is_code, is_normal
 236+ 6E99             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236+ 6E99             >
 236+ 6E99             >                // dummy db directives used to calculate length of namec
 236+ 6E99 2D          >                db      "-"
 236+ 6E9A             >len_NFA         defl    $ - temp_NFA
 236+ 6E9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236+ 6E99             >
 236+ 6E99 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236+ 6E9A 2D          >                db      "-"               // name string in 7-bit ascii, but
 236+ 6E9B             >                org     $-1                 // alter last byte of Name just above to set
 236+ 6E9A AD          >                db      {b $} | END_BIT     // msb as name end
 236+ 6E9B             >
 236+ 6E9B 8A 6E       >                dw      last_NFA            // Link to previous definition Name
 236+ 6E9D             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236+ 6E9D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236+ 6E9D ~           >
 236+ 6E9D ~           >
 236+ 6E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 236+ 6E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 236+ 6E9D             >
 236+ 6E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237+ 6E9D D1                           pop     de
 238+ 6E9E E1                           pop     hl
 239+ 6E9F A7                           and     a
 240+ 6EA0 ED 52                        sbc     hl, de
 241+ 6EA2
 242+ 6EA2                              psh1
 242+ 6EA2 E5          >                push    hl
 242+ 6EA3 DD E9       >                jp      (ix)
 243+ 6EA5
 244+ 6EA5              //  ______________________________________________________________________
 245+ 6EA5              //
 246+ 6EA5              // =            n1 n2 -- n3
 247+ 6EA5              // equals
 248+ 6EA5                              Colon_Def EQUALS, "=", is_normal
 248+ 6EA5             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 248+ 6EA5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 248+ 6EA5             >
 248+ 6EA5             >                // dummy db directives used to calculate length of namec
 248+ 6EA5 3D          >                db      "="
 248+ 6EA6             >len_NFA         defl    $ - temp_NFA
 248+ 6EA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 248+ 6EA5             >
 248+ 6EA5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 248+ 6EA6 3D          >                db      "="               // name string in 7-bit ascii, but
 248+ 6EA7             >                org     $-1                 // alter last byte of Name just above to set
 248+ 6EA6 BD          >                db      {b $} | END_BIT     // msb as name end
 248+ 6EA7             >
 248+ 6EA7 99 6E       >                dw      last_NFA            // Link to previous definition Name
 248+ 6EA9             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 248+ 6EA9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 248+ 6EAC             >
 248+ 6EAC             >
 248+ 6EAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 248+ 6EAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 248+ 6EAC             >
 248+ 6EAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 6EAC 9D 6E 7C 69                  dw      SUBTRACT, ZEQUAL        // - 0=
 250+ 6EB0 3F 69                        dw      EXIT                    // ;
 251+ 6EB2
 252+ 6EB2              //  ______________________________________________________________________
 253+ 6EB2              //
 254+ 6EB2              // u<           u1 u2 -- u3
 255+ 6EB2              // unsigned less-than
 256+ 6EB2                              New_Def ULESS, "U<", is_code, is_normal
 256+ 6EB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 256+ 6EB2             >
 256+ 6EB2             >                // dummy db directives used to calculate length of namec
 256+ 6EB2 55 3C       >                db      "U<"
 256+ 6EB4             >len_NFA         defl    $ - temp_NFA
 256+ 6EB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 256+ 6EB2             >
 256+ 6EB2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 256+ 6EB3 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 256+ 6EB5             >                org     $-1                 // alter last byte of Name just above to set
 256+ 6EB4 BC          >                db      {b $} | END_BIT     // msb as name end
 256+ 6EB5             >
 256+ 6EB5 A5 6E       >                dw      last_NFA            // Link to previous definition Name
 256+ 6EB7             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 256+ 6EB7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 256+ 6EB7 ~           >
 256+ 6EB7 ~           >
 256+ 6EB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 256+ 6EB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 256+ 6EB7             >
 256+ 6EB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 257+ 6EB7 D1                           pop     de
 258+ 6EB8 E1                           pop     hl
 259+ 6EB9 A7                           and     a
 260+ 6EBA ED 52                        sbc     hl, de
 261+ 6EBC ED 62                        sbc     hl, hl
 262+ 6EBE E5                           push    hl
 263+ 6EBF                              next
 263+ 6EBF DD E9       >                jp      (ix)
 264+ 6EC1
 265+ 6EC1
 266+ 6EC1              //  ______________________________________________________________________
 267+ 6EC1              //
 268+ 6EC1              // <           n1 n2 -- n3
 269+ 6EC1              // less-than
 270+ 6EC1                              New_Def LESS, "<", is_code, is_normal
 270+ 6EC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 270+ 6EC1             >
 270+ 6EC1             >                // dummy db directives used to calculate length of namec
 270+ 6EC1 3C          >                db      "<"
 270+ 6EC2             >len_NFA         defl    $ - temp_NFA
 270+ 6EC2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 270+ 6EC1             >
 270+ 6EC1 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 270+ 6EC2 3C          >                db      "<"               // name string in 7-bit ascii, but
 270+ 6EC3             >                org     $-1                 // alter last byte of Name just above to set
 270+ 6EC2 BC          >                db      {b $} | END_BIT     // msb as name end
 270+ 6EC3             >
 270+ 6EC3 B2 6E       >                dw      last_NFA            // Link to previous definition Name
 270+ 6EC5             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 270+ 6EC5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 270+ 6EC5 ~           >
 270+ 6EC5 ~           >
 270+ 6EC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 270+ 6EC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 270+ 6EC5             >
 270+ 6EC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 271+ 6EC5 D1                           pop     de
 272+ 6EC6 E1                           pop     hl
 273+ 6EC7 7C                           ld      a, h
 274+ 6EC8 EE 80                        xor     $80
 275+ 6ECA 67                           ld      h, a
 276+ 6ECB 7A                           ld      a, d
 277+ 6ECC EE 80                        xor     $80
 278+ 6ECE 57                           ld      d, a
 279+ 6ECF              //              and     a
 280+ 6ECF ED 52                        sbc     hl, de
 281+ 6ED1 ED 62                        sbc     hl, hl
 282+ 6ED3                              psh1
 282+ 6ED3 E5          >                push    hl
 282+ 6ED4 DD E9       >                jp      (ix)
 283+ 6ED6
 284+ 6ED6              //  ______________________________________________________________________
 285+ 6ED6              //
 286+ 6ED6              // >            n1 n2 -- n3
 287+ 6ED6              // greater than
 288+ 6ED6                              Colon_Def GREATER, ">", is_normal
 288+ 6ED6             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 288+ 6ED6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 288+ 6ED6             >
 288+ 6ED6             >                // dummy db directives used to calculate length of namec
 288+ 6ED6 3E          >                db      ">"
 288+ 6ED7             >len_NFA         defl    $ - temp_NFA
 288+ 6ED7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 288+ 6ED6             >
 288+ 6ED6 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 288+ 6ED7 3E          >                db      ">"               // name string in 7-bit ascii, but
 288+ 6ED8             >                org     $-1                 // alter last byte of Name just above to set
 288+ 6ED7 BE          >                db      {b $} | END_BIT     // msb as name end
 288+ 6ED8             >
 288+ 6ED8 C1 6E       >                dw      last_NFA            // Link to previous definition Name
 288+ 6EDA             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 288+ 6EDA CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 288+ 6EDD             >
 288+ 6EDD             >
 288+ 6EDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 288+ 6EDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 288+ 6EDD             >
 288+ 6EDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 289+ 6EDD 73 6A C5 6E                  dw      SWAP, LESS              // swap <
 290+ 6EE1 3F 69                        dw      EXIT                    // ;
 291+ 6EE3              //  ______________________________________________________________________
 292+ 6EE3              //
 293+ 6EE3              // min          n1 n2 -- n3
 294+ 6EE3              // minimum between n1 and n2
 295+ 6EE3                              Colon_Def MIN, "MIN" , is_normal
 295+ 6EE3             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 295+ 6EE3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 295+ 6EE3             >
 295+ 6EE3             >                // dummy db directives used to calculate length of namec
 295+ 6EE3 4D 49 4E    >                db      "MIN"
 295+ 6EE6             >len_NFA         defl    $ - temp_NFA
 295+ 6EE6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 295+ 6EE3             >
 295+ 6EE3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 295+ 6EE4 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 295+ 6EE7             >                org     $-1                 // alter last byte of Name just above to set
 295+ 6EE6 CE          >                db      {b $} | END_BIT     // msb as name end
 295+ 6EE7             >
 295+ 6EE7 D6 6E       >                dw      last_NFA            // Link to previous definition Name
 295+ 6EE9             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 295+ 6EE9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 295+ 6EEC             >
 295+ 6EEC             >
 295+ 6EEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 295+ 6EEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 295+ 6EEC             >
 295+ 6EEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 296+ 6EEC D3 6A                        dw      TWO_DUP                 // 2dup
 297+ 6EEE DA 6E                        dw      GREATER                 // >
 298+ 6EF0 1C 64                        dw      ZBRANCH
 299+ 6EF2 04 00                        dw      Min_Skip - $   // if
 300+ 6EF4 73 6A                        dw          SWAP                //      swap
 301+ 6EF6              Min_Skip:                                       // endif
 302+ 6EF6 51 6A                        dw      DROP                    // drop
 303+ 6EF8 3F 69                        dw      EXIT                    // ;
 304+ 6EFA
 305+ 6EFA              //  ______________________________________________________________________
 306+ 6EFA              //
 307+ 6EFA              // max          n1 n2 -- n3
 308+ 6EFA              // maximum between n1 and n2
 309+ 6EFA                              Colon_Def MAX, "MAX", is_normal
 309+ 6EFA             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 309+ 6EFA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 309+ 6EFA             >
 309+ 6EFA             >                // dummy db directives used to calculate length of namec
 309+ 6EFA 4D 41 58    >                db      "MAX"
 309+ 6EFD             >len_NFA         defl    $ - temp_NFA
 309+ 6EFD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 309+ 6EFA             >
 309+ 6EFA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 309+ 6EFB 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 309+ 6EFE             >                org     $-1                 // alter last byte of Name just above to set
 309+ 6EFD D8          >                db      {b $} | END_BIT     // msb as name end
 309+ 6EFE             >
 309+ 6EFE E3 6E       >                dw      last_NFA            // Link to previous definition Name
 309+ 6F00             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 309+ 6F00 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 309+ 6F03             >
 309+ 6F03             >
 309+ 6F03             >                endif           ; ok        // for other definitions it "points" the correct handler
 309+ 6F03             >                // Use of "; ok" to suppress "warning[fwdref]"
 309+ 6F03             >
 309+ 6F03             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 310+ 6F03 D3 6A                        dw      TWO_DUP                 // 2dup
 311+ 6F05 C5 6E                        dw      LESS                    // <
 312+ 6F07 1C 64                        dw      ZBRANCH
 313+ 6F09 04 00                        dw      Max_Skip - $   // if
 314+ 6F0B 73 6A                        dw          SWAP                //      swap
 315+ 6F0D              Max_Skip:                                       // endif
 316+ 6F0D 51 6A                        dw      DROP                    // drop
 317+ 6F0F 3F 69                        dw      EXIT                    // ;
 318+ 6F11
 319+ 6F11              //  ______________________________________________________________________
 320+ 6F11              //
 321+ 6F11              // ?dup         n -- 0 | n n
 322+ 6F11              // duplicate if not zero
 323+ 6F11                              New_Def QDUP, "?DUP", is_code, is_normal
 323+ 6F11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 323+ 6F11             >
 323+ 6F11             >                // dummy db directives used to calculate length of namec
 323+ 6F11 3F 44 55 50 >                db      "?DUP"
 323+ 6F15             >len_NFA         defl    $ - temp_NFA
 323+ 6F15             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 323+ 6F11             >
 323+ 6F11 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 323+ 6F12 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 323+ 6F16             >                org     $-1                 // alter last byte of Name just above to set
 323+ 6F15 D0          >                db      {b $} | END_BIT     // msb as name end
 323+ 6F16             >
 323+ 6F16 FA 6E       >                dw      last_NFA            // Link to previous definition Name
 323+ 6F18             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 323+ 6F18 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 323+ 6F18 ~           >
 323+ 6F18 ~           >
 323+ 6F18             >                endif           ; ok        // for other definitions it "points" the correct handler
 323+ 6F18             >                // Use of "; ok" to suppress "warning[fwdref]"
 323+ 6F18             >
 323+ 6F18             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 324+ 6F18              QDup_Ptr:
 325+ 6F18 E1                           pop     hl
 326+ 6F19 7C                           ld      a, h
 327+ 6F1A B5                           or      l
 328+ 6F1B 28 01                        jr      z, QDup_Skip
 329+ 6F1D E5                               push    hl
 330+ 6F1E              QDup_Skip:
 331+ 6F1E                              psh1
 331+ 6F1E E5          >                push    hl
 331+ 6F1F DD E9       >                jp      (ix)
 332+ 6F21
 333+ 6F21              //  ______________________________________________________________________
 334+ 6F21              //
 335+ 6F21              // -dup         n -- 0 | n n
 336+ 6F21              // duplicate if not zero
 337+ 6F21                              New_Def LDUP, "-DUP", is_code, is_normal
 337+ 6F21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ 6F21             >
 337+ 6F21             >                // dummy db directives used to calculate length of namec
 337+ 6F21 2D 44 55 50 >                db      "-DUP"
 337+ 6F25             >len_NFA         defl    $ - temp_NFA
 337+ 6F25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ 6F21             >
 337+ 6F21 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ 6F22 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 337+ 6F26             >                org     $-1                 // alter last byte of Name just above to set
 337+ 6F25 D0          >                db      {b $} | END_BIT     // msb as name end
 337+ 6F26             >
 337+ 6F26 11 6F       >                dw      last_NFA            // Link to previous definition Name
 337+ 6F28             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 6F28 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 6F28 ~           >
 337+ 6F28 ~           >
 337+ 6F28             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 6F28             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 6F28             >
 337+ 6F28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 6F28 C3 18 6F                     jp      QDup_Ptr
 339+ 6F2B
 340+ 6F2B              //  ______________________________________________________________________
 341+ 6F2B              //
 342+ 6F2B              // emit         c --
 343+ 6F2B                              Colon_Def EMIT, "EMIT", is_normal
 343+ 6F2B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 343+ 6F2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 343+ 6F2B             >
 343+ 6F2B             >                // dummy db directives used to calculate length of namec
 343+ 6F2B 45 4D 49 54 >                db      "EMIT"
 343+ 6F2F             >len_NFA         defl    $ - temp_NFA
 343+ 6F2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 343+ 6F2B             >
 343+ 6F2B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 343+ 6F2C 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 343+ 6F30             >                org     $-1                 // alter last byte of Name just above to set
 343+ 6F2F D4          >                db      {b $} | END_BIT     // msb as name end
 343+ 6F30             >
 343+ 6F30 21 6F       >                dw      last_NFA            // Link to previous definition Name
 343+ 6F32             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 343+ 6F32 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 343+ 6F35             >
 343+ 6F35             >
 343+ 6F35             >                endif           ; ok        // for other definitions it "points" the correct handler
 343+ 6F35             >                // Use of "; ok" to suppress "warning[fwdref]"
 343+ 6F35             >
 343+ 6F35             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 344+ 6F35 22 66                        dw      C_EMIT                      // (?emit)
 345+ 6F37 18 6F                        dw      QDUP                        // ?dup
 346+ 6F39                                                                  // if
 347+ 6F39 1C 64                        dw      ZBRANCH
 348+ 6F3B 0A 00                        dw      Emit_Skip - $
 349+ 6F3D E7 65                        dw          EMITC                   //      emitc
 350+ 6F3F 4C 6C                        dw          ONE                     //      1
 351+ 6F41 6B 6D E0 6A                  dw          OUT, PLUSSTORE        //      out +!
 352+ 6F45              Emit_Skip:                                          // endif
 353+ 6F45 3F 69                        dw      EXIT                        // ;
 354+ 6F47
 355+ 6F47              //  ______________________________________________________________________
 356+ 6F47              //
 357+ 6F47              // space        --
 358+ 6F47                              Colon_Def SPACE, "SPACE", is_normal
 358+ 6F47             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 358+ 6F47             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 358+ 6F47             >
 358+ 6F47             >                // dummy db directives used to calculate length of namec
 358+ 6F47 53 50 41 43 >                db      "SPACE"
 358+ 6F4B 45          >
 358+ 6F4C             >len_NFA         defl    $ - temp_NFA
 358+ 6F4C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 358+ 6F47             >
 358+ 6F47 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 358+ 6F48 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 358+ 6F4C 45          >
 358+ 6F4D             >                org     $-1                 // alter last byte of Name just above to set
 358+ 6F4C C5          >                db      {b $} | END_BIT     // msb as name end
 358+ 6F4D             >
 358+ 6F4D 2B 6F       >                dw      last_NFA            // Link to previous definition Name
 358+ 6F4F             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 358+ 6F4F CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 358+ 6F52             >
 358+ 6F52             >
 358+ 6F52             >                endif           ; ok        // for other definitions it "points" the correct handler
 358+ 6F52             >                // Use of "; ok" to suppress "warning[fwdref]"
 358+ 6F52             >
 358+ 6F52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 359+ 6F52 72 6C 32 6F                  dw      BL, EMIT                // bl emit
 360+ 6F56 3F 69                        dw      EXIT                    // ;
 361+ 6F58
 362+ 6F58              //  ______________________________________________________________________
 363+ 6F58              //
 364+ 6F58              // traverse     a n -- a
 365+ 6F58              // A dictionary entry is structured as follows
 366+ 6F58              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 367+ 6F58              //      +1   word name, last character is toggled with $80
 368+ 6F58              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 369+ 6F58              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 370+ 6F58              // PFA: +6+n "is_code", definitions have no PFA. // +5
 371+ 6F58              //
 372+ 6F58                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 372+ 6F58             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 372+ 6F58             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ 6F58             >
 372+ 6F58             >                // dummy db directives used to calculate length of namec
 372+ 6F58 54 52 41 56 >                db      "TRAVERSE"
 372+ 6F5C 45 52 53 45 >
 372+ 6F60             >len_NFA         defl    $ - temp_NFA
 372+ 6F60             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ 6F58             >
 372+ 6F58 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ 6F59 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 372+ 6F5D 45 52 53 45 >
 372+ 6F61             >                org     $-1                 // alter last byte of Name just above to set
 372+ 6F60 C5          >                db      {b $} | END_BIT     // msb as name end
 372+ 6F61             >
 372+ 6F61 47 6F       >                dw      last_NFA            // Link to previous definition Name
 372+ 6F63             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 6F63 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 372+ 6F66             >
 372+ 6F66             >
 372+ 6F66             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 6F66             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 6F66             >
 372+ 6F66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 6F66 73 6A                        dw      SWAP                    // swap
 374+ 6F68              Traverse_Begin:                                 // begin
 375+ 6F68 43 6A B6 69                  dw          OVER, PLUS          //      over +
 376+ 6F6C A5 63 7F 00                  dw          LIT, 127            //      127
 377+ 6F70 43 6A 16 6B                  dw          OVER, CFETCH        //      over @
 378+ 6F74 C5 6E                        dw          LESS                //      <
 379+ 6F76                                                              // until
 380+ 6F76 1C 64                        dw      ZBRANCH
 381+ 6F78 F0 FF                        dw      Traverse_Begin - $
 382+ 6F7A 5A 6A                        dw      NIP                     //  nip
 383+ 6F7C 3F 69                        dw      EXIT                    //  ;
 384+ 6F7E
 385+ 6F7E              //  ______________________________________________________________________
 386+ 6F7E              //
 387+ 6F7E              // latest       -- nfa
 388+ 6F7E                              Colon_Def LATEST, "LATEST", is_normal
 388+ 6F7E             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 388+ 6F7E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ 6F7E             >
 388+ 6F7E             >                // dummy db directives used to calculate length of namec
 388+ 6F7E 4C 41 54 45 >                db      "LATEST"
 388+ 6F82 53 54       >
 388+ 6F84             >len_NFA         defl    $ - temp_NFA
 388+ 6F84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ 6F7E             >
 388+ 6F7E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ 6F7F 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 388+ 6F83 53 54       >
 388+ 6F85             >                org     $-1                 // alter last byte of Name just above to set
 388+ 6F84 D4          >                db      {b $} | END_BIT     // msb as name end
 388+ 6F85             >
 388+ 6F85 58 6F       >                dw      last_NFA            // Link to previous definition Name
 388+ 6F87             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6F87 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6F8A             >
 388+ 6F8A             >
 388+ 6F8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6F8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6F8A             >
 388+ 6F8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6F8A 9E 6D                        dw      CURRENT                 // current
 390+ 6F8C FF 6A FF 6A                  dw      FETCH, FETCH            // @ @
 391+ 6F90 3F 69                        dw      EXIT                    // ;
 392+ 6F92
 393+ 6F92              //  ______________________________________________________________________
 394+ 6F92              //
 395+ 6F92              // lfa          pfa -- lfa
 396+ 6F92                              Colon_Def LFA, "LFA", is_normal
 396+ 6F92             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 396+ 6F92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 396+ 6F92             >
 396+ 6F92             >                // dummy db directives used to calculate length of namec
 396+ 6F92 4C 46 41    >                db      "LFA"
 396+ 6F95             >len_NFA         defl    $ - temp_NFA
 396+ 6F95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 396+ 6F92             >
 396+ 6F92 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 396+ 6F93 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 396+ 6F96             >                org     $-1                 // alter last byte of Name just above to set
 396+ 6F95 C1          >                db      {b $} | END_BIT     // msb as name end
 396+ 6F96             >
 396+ 6F96 7E 6F       >                dw      last_NFA            // Link to previous definition Name
 396+ 6F98             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 396+ 6F98 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 396+ 6F9B             >
 396+ 6F9B             >
 396+ 6F9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 396+ 6F9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 396+ 6F9B             >
 396+ 6F9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 397+ 6F9B A5 63 05 00                  dw      LIT, 5                  // cell- --> 5
 398+ 6F9F 9D 6E                        dw      SUBTRACT                // cell- --> -
 399+ 6FA1 3F 69                        dw      EXIT                    // ;
 400+ 6FA3
 401+ 6FA3              //  ______________________________________________________________________
 402+ 6FA3              //
 403+ 6FA3              // cfa          pfa -- cfa
 404+ 6FA3                              Colon_Def CFA, "CFA", is_normal
 404+ 6FA3             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 404+ 6FA3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 404+ 6FA3             >
 404+ 6FA3             >                // dummy db directives used to calculate length of namec
 404+ 6FA3 43 46 41    >                db      "CFA"
 404+ 6FA6             >len_NFA         defl    $ - temp_NFA
 404+ 6FA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 404+ 6FA3             >
 404+ 6FA3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 404+ 6FA4 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 404+ 6FA7             >                org     $-1                 // alter last byte of Name just above to set
 404+ 6FA6 C1          >                db      {b $} | END_BIT     // msb as name end
 404+ 6FA7             >
 404+ 6FA7 92 6F       >                dw      last_NFA            // Link to previous definition Name
 404+ 6FA9             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 404+ 6FA9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 404+ 6FAC             >
 404+ 6FAC             >
 404+ 6FAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 404+ 6FAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 404+ 6FAC             >
 404+ 6FAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 405+ 6FAC              //              dw      CELL_MINUS              // cell-
 406+ 6FAC 5E 6C 9D 6E                  dw      THREE, SUBTRACT         // 3 -
 407+ 6FB0 3F 69                        dw      EXIT                    // ;
 408+ 6FB2
 409+ 6FB2              //  ______________________________________________________________________
 410+ 6FB2              //
 411+ 6FB2              // nfa          pfa -- nfa
 412+ 6FB2                              Colon_Def NFA, "NFA", is_normal
 412+ 6FB2             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 412+ 6FB2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ 6FB2             >
 412+ 6FB2             >                // dummy db directives used to calculate length of namec
 412+ 6FB2 4E 46 41    >                db      "NFA"
 412+ 6FB5             >len_NFA         defl    $ - temp_NFA
 412+ 6FB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ 6FB2             >
 412+ 6FB2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ 6FB3 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 412+ 6FB6             >                org     $-1                 // alter last byte of Name just above to set
 412+ 6FB5 C1          >                db      {b $} | END_BIT     // msb as name end
 412+ 6FB6             >
 412+ 6FB6 A3 6F       >                dw      last_NFA            // Link to previous definition Name
 412+ 6FB8             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 6FB8 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 6FBB             >
 412+ 6FBB             >
 412+ 6FBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 6FBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 6FBB             >
 412+ 6FBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 6FBB A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 414+ 6FBF 9D 6E                        dw      SUBTRACT                // -
 415+ 6FC1 68 6C                        dw      NEG_ONE                 // -1
 416+ 6FC3 63 6F                        dw      TRAVERSE                // traverse
 417+ 6FC5 3F 69                        dw      EXIT                    // ;
 418+ 6FC7
 419+ 6FC7              //  ______________________________________________________________________
 420+ 6FC7              //
 421+ 6FC7              // pfa          nfa -- pfa
 422+ 6FC7                              Colon_Def PFA, "PFA", is_normal
 422+ 6FC7             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 422+ 6FC7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ 6FC7             >
 422+ 6FC7             >                // dummy db directives used to calculate length of namec
 422+ 6FC7 50 46 41    >                db      "PFA"
 422+ 6FCA             >len_NFA         defl    $ - temp_NFA
 422+ 6FCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ 6FC7             >
 422+ 6FC7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ 6FC8 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 422+ 6FCB             >                org     $-1                 // alter last byte of Name just above to set
 422+ 6FCA C1          >                db      {b $} | END_BIT     // msb as name end
 422+ 6FCB             >
 422+ 6FCB B2 6F       >                dw      last_NFA            // Link to previous definition Name
 422+ 6FCD             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 6FCD CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 6FD0             >
 422+ 6FD0             >
 422+ 6FD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 6FD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 6FD0             >
 422+ 6FD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 6FD0 4C 6C                        dw      ONE                     // 1
 424+ 6FD2 63 6F                        dw      TRAVERSE                // traverse
 425+ 6FD4 A5 63 06 00                  dw      LIT, 6                  // 5 --> 6
 426+ 6FD8 B6 69                        dw      PLUS                    // +
 427+ 6FDA 3F 69                        dw      EXIT                    // ;
 428+ 6FDC
 429+ 6FDC              //  ______________________________________________________________________
 430+ 6FDC              //
 431+ 6FDC              // >body        cfa -- pfa
 432+ 6FDC                              Colon_Def TO_BODY, ">BODY", is_normal
 432+ 6FDC             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 432+ 6FDC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 432+ 6FDC             >
 432+ 6FDC             >                // dummy db directives used to calculate length of namec
 432+ 6FDC 3E 42 4F 44 >                db      ">BODY"
 432+ 6FE0 59          >
 432+ 6FE1             >len_NFA         defl    $ - temp_NFA
 432+ 6FE1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 432+ 6FDC             >
 432+ 6FDC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 432+ 6FDD 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 432+ 6FE1 59          >
 432+ 6FE2             >                org     $-1                 // alter last byte of Name just above to set
 432+ 6FE1 D9          >                db      {b $} | END_BIT     // msb as name end
 432+ 6FE2             >
 432+ 6FE2 C7 6F       >                dw      last_NFA            // Link to previous definition Name
 432+ 6FE4             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 432+ 6FE4 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 432+ 6FE7             >
 432+ 6FE7             >
 432+ 6FE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 432+ 6FE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 432+ 6FE7             >
 432+ 6FE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 433+ 6FE7 5E 6C B6 69                  dw      THREE, PLUS             // cell+ --> 3 +
 434+ 6FEB 3F 69                        dw      EXIT                    // ;
 435+ 6FED
 436+ 6FED              //  ______________________________________________________________________
 437+ 6FED              //
 438+ 6FED              // <name        cfa -- nfa
 439+ 6FED                              Colon_Def TO_NAME, "<NAME", is_normal
 439+ 6FED             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 439+ 6FED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ 6FED             >
 439+ 6FED             >                // dummy db directives used to calculate length of namec
 439+ 6FED 3C 4E 41 4D >                db      "<NAME"
 439+ 6FF1 45          >
 439+ 6FF2             >len_NFA         defl    $ - temp_NFA
 439+ 6FF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ 6FED             >
 439+ 6FED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ 6FEE 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 439+ 6FF2 45          >
 439+ 6FF3             >                org     $-1                 // alter last byte of Name just above to set
 439+ 6FF2 C5          >                db      {b $} | END_BIT     // msb as name end
 439+ 6FF3             >
 439+ 6FF3 DC 6F       >                dw      last_NFA            // Link to previous definition Name
 439+ 6FF5             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 6FF5 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 6FF8             >
 439+ 6FF8             >
 439+ 6FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 6FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 6FF8             >
 439+ 6FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 6FF8 E4 6F                        dw      TO_BODY                 // >body
 441+ 6FFA B8 6F                        dw      NFA                     // nfa
 442+ 6FFC 3F 69                        dw      EXIT                    // ;
 443+ 6FFE
 444+ 6FFE              //  ______________________________________________________________________
 445+ 6FFE              //
 446+ 6FFE              // !csp         --
 447+ 6FFE              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 448+ 6FFE                              Colon_Def STORE_CSP, "!CSP", is_normal
 448+ 6FFE             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 448+ 6FFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ 6FFE             >
 448+ 6FFE             >                // dummy db directives used to calculate length of namec
 448+ 6FFE 21 43 53 50 >                db      "!CSP"
 448+ 7002             >len_NFA         defl    $ - temp_NFA
 448+ 7002             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ 6FFE             >
 448+ 6FFE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ 6FFF 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 448+ 7003             >                org     $-1                 // alter last byte of Name just above to set
 448+ 7002 D0          >                db      {b $} | END_BIT     // msb as name end
 448+ 7003             >
 448+ 7003 ED 6F       >                dw      last_NFA            // Link to previous definition Name
 448+ 7005             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 7005 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 7008             >
 448+ 7008             >
 448+ 7008             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 7008             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 7008             >
 448+ 7008             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 7008 0F 69                        dw      SPFETCH                 // sp@
 450+ 700A D3 6D 0A 6B                  dw      CSP, STORE              // csp !
 451+ 700E 3F 69                        dw      EXIT                    // ;
 452+ 7010
 453+ 7010              //  ______________________________________________________________________
 454+ 7010              //
 455+ 7010              // ?error       f n --
 456+ 7010              // rase error n if flag f it true
 457+ 7010                              Colon_Def QERROR, "?ERROR", is_normal
 457+ 7010             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 457+ 7010             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ 7010             >
 457+ 7010             >                // dummy db directives used to calculate length of namec
 457+ 7010 3F 45 52 52 >                db      "?ERROR"
 457+ 7014 4F 52       >
 457+ 7016             >len_NFA         defl    $ - temp_NFA
 457+ 7016             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ 7010             >
 457+ 7010 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ 7011 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 457+ 7015 4F 52       >
 457+ 7017             >                org     $-1                 // alter last byte of Name just above to set
 457+ 7016 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ 7017             >
 457+ 7017 FE 6F       >                dw      last_NFA            // Link to previous definition Name
 457+ 7019             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 7019 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 457+ 701C             >
 457+ 701C             >
 457+ 701C             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 701C             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 701C             >
 457+ 701C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 701C 73 6A                        dw      SWAP                    // swap
 459+ 701E                                                              // if
 460+ 701E 1C 64                        dw      ZBRANCH
 461+ 7020 08 00                        dw      QError_Else - $
 462+ 7022 AD 75                        dw          ERROR               //      error  ( is a forward-ref )
 463+ 7024                                                              // else
 464+ 7024 07 64                        dw      BRANCH
 465+ 7026 04 00                        dw      QError_Endif - $
 466+ 7028              QError_Else:
 467+ 7028 51 6A                        dw          DROP                //      drop
 468+ 702A              QError_Endif:                                   // endif
 469+ 702A 3F 69                        dw      EXIT                    // ;
 470+ 702C
 471+ 702C              //  ______________________________________________________________________
 472+ 702C              //
 473+ 702C              // ?comp       --
 474+ 702C              // raise msg #17 if not compiling
 475+ 702C                              Colon_Def QCOMP, "?COMP", is_normal
 475+ 702C             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 475+ 702C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 475+ 702C             >
 475+ 702C             >                // dummy db directives used to calculate length of namec
 475+ 702C 3F 43 4F 4D >                db      "?COMP"
 475+ 7030 50          >
 475+ 7031             >len_NFA         defl    $ - temp_NFA
 475+ 7031             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 475+ 702C             >
 475+ 702C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 475+ 702D 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 475+ 7031 50          >
 475+ 7032             >                org     $-1                 // alter last byte of Name just above to set
 475+ 7031 D0          >                db      {b $} | END_BIT     // msb as name end
 475+ 7032             >
 475+ 7032 10 70       >                dw      last_NFA            // Link to previous definition Name
 475+ 7034             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 475+ 7034 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 475+ 7037             >
 475+ 7037             >
 475+ 7037             >                endif           ; ok        // for other definitions it "points" the correct handler
 475+ 7037             >                // Use of "; ok" to suppress "warning[fwdref]"
 475+ 7037             >
 475+ 7037             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 476+ 7037 AA 6D FF 6A                  dw      STATE, FETCH            // state @
 477+ 703B 7C 69                        dw      ZEQUAL                  // 0=
 478+ 703D A5 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 479+ 7041 19 70                        dw      QERROR                  // ?error
 480+ 7043 3F 69                        dw      EXIT                    // ;
 481+ 7045
 482+ 7045              //  ______________________________________________________________________
 483+ 7045              //
 484+ 7045              // ?exec       --
 485+ 7045              // raise msg #18 if compiling
 486+ 7045                              Colon_Def QEXEC, "?EXEC", is_normal
 486+ 7045             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 486+ 7045             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 486+ 7045             >
 486+ 7045             >                // dummy db directives used to calculate length of namec
 486+ 7045 3F 45 58 45 >                db      "?EXEC"
 486+ 7049 43          >
 486+ 704A             >len_NFA         defl    $ - temp_NFA
 486+ 704A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 486+ 7045             >
 486+ 7045 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 486+ 7046 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 486+ 704A 43          >
 486+ 704B             >                org     $-1                 // alter last byte of Name just above to set
 486+ 704A C3          >                db      {b $} | END_BIT     // msb as name end
 486+ 704B             >
 486+ 704B 2C 70       >                dw      last_NFA            // Link to previous definition Name
 486+ 704D             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 486+ 704D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 486+ 7050             >
 486+ 7050             >
 486+ 7050             >                endif           ; ok        // for other definitions it "points" the correct handler
 486+ 7050             >                // Use of "; ok" to suppress "warning[fwdref]"
 486+ 7050             >
 486+ 7050             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 487+ 7050 AA 6D FF 6A                  dw      STATE, FETCH            // state @
 488+ 7054 A5 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 489+ 7058 19 70                        dw      QERROR                  // ?error
 490+ 705A 3F 69                        dw      EXIT                    // ;
 491+ 705C
 492+ 705C              //  ______________________________________________________________________
 493+ 705C              //
 494+ 705C              // ?pairs       n1 n2 --
 495+ 705C              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 496+ 705C                              Colon_Def QPAIRS, "?PAIRS", is_normal
 496+ 705C             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 496+ 705C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ 705C             >
 496+ 705C             >                // dummy db directives used to calculate length of namec
 496+ 705C 3F 50 41 49 >                db      "?PAIRS"
 496+ 7060 52 53       >
 496+ 7062             >len_NFA         defl    $ - temp_NFA
 496+ 7062             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ 705C             >
 496+ 705C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ 705D 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 496+ 7061 52 53       >
 496+ 7063             >                org     $-1                 // alter last byte of Name just above to set
 496+ 7062 D3          >                db      {b $} | END_BIT     // msb as name end
 496+ 7063             >
 496+ 7063 45 70       >                dw      last_NFA            // Link to previous definition Name
 496+ 7065             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 7065 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 7068             >
 496+ 7068             >
 496+ 7068             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 7068             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 7068             >
 496+ 7068             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 7068 9D 6E                        dw      SUBTRACT                // -
 498+ 706A A5 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 499+ 706E 19 70                        dw      QERROR                  // ?error
 500+ 7070 3F 69                        dw      EXIT                    // ;
 501+ 7072
 502+ 7072              //  ______________________________________________________________________
 503+ 7072              //
 504+ 7072              // ?csp       --
 505+ 7072              // raise msg #20 if surrent SP in not what previously saved in CSP.
 506+ 7072              // Compiler relies on that for  syntax checking of structures
 507+ 7072                              Colon_Def QCSP, "?CSP", is_normal
 507+ 7072             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 507+ 7072             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 507+ 7072             >
 507+ 7072             >                // dummy db directives used to calculate length of namec
 507+ 7072 3F 43 53 50 >                db      "?CSP"
 507+ 7076             >len_NFA         defl    $ - temp_NFA
 507+ 7076             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 507+ 7072             >
 507+ 7072 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 507+ 7073 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 507+ 7077             >                org     $-1                 // alter last byte of Name just above to set
 507+ 7076 D0          >                db      {b $} | END_BIT     // msb as name end
 507+ 7077             >
 507+ 7077 5C 70       >                dw      last_NFA            // Link to previous definition Name
 507+ 7079             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 507+ 7079 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 507+ 707C             >
 507+ 707C             >
 507+ 707C             >                endif           ; ok        // for other definitions it "points" the correct handler
 507+ 707C             >                // Use of "; ok" to suppress "warning[fwdref]"
 507+ 707C             >
 507+ 707C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 508+ 707C 0F 69                        dw      SPFETCH                 // sp@
 509+ 707E D3 6D FF 6A                  dw      CSP, FETCH              // csp @
 510+ 7082 9D 6E                        dw      SUBTRACT                // -
 511+ 7084 A5 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 512+ 7088 19 70                        dw      QERROR                  // ?error
 513+ 708A 3F 69                        dw      EXIT                    // ;
 514+ 708C
 515+ 708C              //  ______________________________________________________________________
 516+ 708C              //
 517+ 708C              // ?loading      --
 518+ 708C              // raise msg #22 if not loading
 519+ 708C                              Colon_Def QLOADING, "?LOADING", is_normal
 519+ 708C             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 519+ 708C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 519+ 708C             >
 519+ 708C             >                // dummy db directives used to calculate length of namec
 519+ 708C 3F 4C 4F 41 >                db      "?LOADING"
 519+ 7090 44 49 4E 47 >
 519+ 7094             >len_NFA         defl    $ - temp_NFA
 519+ 7094             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 519+ 708C             >
 519+ 708C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 519+ 708D 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 519+ 7091 44 49 4E 47 >
 519+ 7095             >                org     $-1                 // alter last byte of Name just above to set
 519+ 7094 C7          >                db      {b $} | END_BIT     // msb as name end
 519+ 7095             >
 519+ 7095 72 70       >                dw      last_NFA            // Link to previous definition Name
 519+ 7097             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 519+ 7097 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 519+ 709A             >
 519+ 709A             >
 519+ 709A             >                endif           ; ok        // for other definitions it "points" the correct handler
 519+ 709A             >                // Use of "; ok" to suppress "warning[fwdref]"
 519+ 709A             >
 519+ 709A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 520+ 709A 57 6D FF 6A                  dw      BLK, FETCH              // blk @
 521+ 709E 7C 69                        dw      ZEQUAL                  // 0=
 522+ 70A0 A5 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 523+ 70A4 19 70                        dw      QERROR                  // ?error
 524+ 70A6 3F 69                        dw      EXIT                    // ;
 525+ 70A8
 526+ 70A8              //  ______________________________________________________________________
 527+ 70A8              //
 528+ 70A8              // compile      --
 529+ 70A8              // compiles the following word
 530+ 70A8                              Colon_Def COMPILE, "COMPILE", is_normal
 530+ 70A8             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 530+ 70A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ 70A8             >
 530+ 70A8             >                // dummy db directives used to calculate length of namec
 530+ 70A8 43 4F 4D 50 >                db      "COMPILE"
 530+ 70AC 49 4C 45    >
 530+ 70AF             >len_NFA         defl    $ - temp_NFA
 530+ 70AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ 70A8             >
 530+ 70A8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ 70A9 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 530+ 70AD 49 4C 45    >
 530+ 70B0             >                org     $-1                 // alter last byte of Name just above to set
 530+ 70AF C5          >                db      {b $} | END_BIT     // msb as name end
 530+ 70B0             >
 530+ 70B0 8C 70       >                dw      last_NFA            // Link to previous definition Name
 530+ 70B2             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 70B2 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 70B5             >
 530+ 70B5             >
 530+ 70B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 70B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 70B5             >
 530+ 70B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 70B5 34 70                        dw      QCOMP                   // ?comp
 532+ 70B7 62 69                        dw      R_TO                    // r>
 533+ 70B9 7E 6A F5 69                  dw      DUP, CELL_PLUS          // dup, cell+
 534+ 70BD 50 69                        dw      TO_R                    // >r
 535+ 70BF FF 6A 6B 6E                  dw      FETCH, COMMA            // @ ,
 536+ 70C3 3F 69                        dw      EXIT                    // ;
 537+ 70C5
 538+ 70C5              //  ______________________________________________________________________
 539+ 70C5              //
 540+ 70C5              // compile,     --
 541+ 70C5              // compiles the following word
 542+ 70C5                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 542+ 70C5             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 542+ 70C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 70C5             >
 542+ 70C5             >                // dummy db directives used to calculate length of namec
 542+ 70C5 43 4F 4D 50 >                db      "COMPILE,"
 542+ 70C9 49 4C 45 2C >
 542+ 70CD             >len_NFA         defl    $ - temp_NFA
 542+ 70CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 70C5             >
 542+ 70C5 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 70C6 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 542+ 70CA 49 4C 45 2C >
 542+ 70CE             >                org     $-1                 // alter last byte of Name just above to set
 542+ 70CD AC          >                db      {b $} | END_BIT     // msb as name end
 542+ 70CE             >
 542+ 70CE A8 70       >                dw      last_NFA            // Link to previous definition Name
 542+ 70D0             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 70D0 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 70D3             >
 542+ 70D3             >
 542+ 70D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 70D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 70D3             >
 542+ 70D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 70D3 34 70                        dw      QCOMP                   // ?comp
 544+ 70D5 6B 6E                        dw      COMMA                   // ,
 545+ 70D7 3F 69                        dw      EXIT                    // ;
 546+ 70D9
 547+ 70D9              //  ______________________________________________________________________
 548+ 70D9              //
 549+ 70D9              // [            --
 550+ 70D9              // stop compilation
 551+ 70D9                              Colon_Def SQUARED_OPEN, "[", is_immediate
 551+ 70D9             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 551+ 70D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 551+ 70D9             >
 551+ 70D9             >                // dummy db directives used to calculate length of namec
 551+ 70D9 5B          >                db      "["
 551+ 70DA             >len_NFA         defl    $ - temp_NFA
 551+ 70DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 551+ 70D9             >
 551+ 70D9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 551+ 70DA 5B          >                db      "["               // name string in 7-bit ascii, but
 551+ 70DB             >                org     $-1                 // alter last byte of Name just above to set
 551+ 70DA DB          >                db      {b $} | END_BIT     // msb as name end
 551+ 70DB             >
 551+ 70DB C5 70       >                dw      last_NFA            // Link to previous definition Name
 551+ 70DD             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 551+ 70DD CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 551+ 70E0             >
 551+ 70E0             >
 551+ 70E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 551+ 70E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 551+ 70E0             >
 551+ 70E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 552+ 70E0 43 6C                        dw      ZERO                    // 0
 553+ 70E2 AA 6D 0A 6B                  dw      STATE, STORE            // state !
 554+ 70E6 3F 69                        dw      EXIT                    // ; immediate
 555+ 70E8
 556+ 70E8              //  ______________________________________________________________________
 557+ 70E8              //
 558+ 70E8              // ]            --
 559+ 70E8              // start compilation
 560+ 70E8                              Colon_Def SQUARED_CLOSE, "]", is_normal
 560+ 70E8             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 560+ 70E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ 70E8             >
 560+ 70E8             >                // dummy db directives used to calculate length of namec
 560+ 70E8 5D          >                db      "]"
 560+ 70E9             >len_NFA         defl    $ - temp_NFA
 560+ 70E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ 70E8             >
 560+ 70E8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ 70E9 5D          >                db      "]"               // name string in 7-bit ascii, but
 560+ 70EA             >                org     $-1                 // alter last byte of Name just above to set
 560+ 70E9 DD          >                db      {b $} | END_BIT     // msb as name end
 560+ 70EA             >
 560+ 70EA D9 70       >                dw      last_NFA            // Link to previous definition Name
 560+ 70EC             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 70EC CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 70EF             >
 560+ 70EF             >
 560+ 70EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 70EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 70EF             >
 560+ 70EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 70EF A5 63 C0 00                  dw      LIT, $C0                // 192
 562+ 70F3 AA 6D 0A 6B                  dw      STATE, STORE            // state !
 563+ 70F7 3F 69                        dw      EXIT                    // ;
 564+ 70F9
 565+ 70F9              //  ______________________________________________________________________
 566+ 70F9              //
 567+ 70F9              // smudge       --
 568+ 70F9              // toggle smudge bit of latest definition
 569+ 70F9                              Colon_Def SMUDGE, "SMUDGE", is_normal
 569+ 70F9             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 569+ 70F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ 70F9             >
 569+ 70F9             >                // dummy db directives used to calculate length of namec
 569+ 70F9 53 4D 55 44 >                db      "SMUDGE"
 569+ 70FD 47 45       >
 569+ 70FF             >len_NFA         defl    $ - temp_NFA
 569+ 70FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ 70F9             >
 569+ 70F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ 70FA 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 569+ 70FE 47 45       >
 569+ 7100             >                org     $-1                 // alter last byte of Name just above to set
 569+ 70FF C5          >                db      {b $} | END_BIT     // msb as name end
 569+ 7100             >
 569+ 7100 E8 70       >                dw      last_NFA            // Link to previous definition Name
 569+ 7102             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 7102 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 7105             >
 569+ 7105             >
 569+ 7105             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 7105             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 7105             >
 569+ 7105             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 7105 87 6F                        dw      LATEST                  // latest
 571+ 7107 A5 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 572+ 710B F4 6A                        dw      TOGGLE                  // toggle
 573+ 710D 3F 69                        dw      EXIT                    // ;
 574+ 710F
 575+ 710F              //  ______________________________________________________________________
 576+ 710F              //
 577+ 710F              // immediate    --
 578+ 710F              // make immediate the latest definition
 579+ 710F                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 579+ 710F             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 579+ 710F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 579+ 710F             >
 579+ 710F             >                // dummy db directives used to calculate length of namec
 579+ 710F 49 4D 4D 45 >                db      "IMMEDIATE"
 579+ 7113 44 49 41 54 >
 579+ 7117 45          >
 579+ 7118             >len_NFA         defl    $ - temp_NFA
 579+ 7118             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 579+ 710F             >
 579+ 710F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 579+ 7110 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 579+ 7114 44 49 41 54 >
 579+ 7118 45          >
 579+ 7119             >                org     $-1                 // alter last byte of Name just above to set
 579+ 7118 C5          >                db      {b $} | END_BIT     // msb as name end
 579+ 7119             >
 579+ 7119 F9 70       >                dw      last_NFA            // Link to previous definition Name
 579+ 711B             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 579+ 711B CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 579+ 711E             >
 579+ 711E             >
 579+ 711E             >                endif           ; ok        // for other definitions it "points" the correct handler
 579+ 711E             >                // Use of "; ok" to suppress "warning[fwdref]"
 579+ 711E             >
 579+ 711E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 580+ 711E 87 6F                        dw      LATEST                  // latest
 581+ 7120 A5 63 40 00                  dw      LIT, $40                // 64
 582+ 7124 F4 6A                        dw      TOGGLE                  // toggle
 583+ 7126 3F 69                        dw      EXIT                    // ;
 584+ 7128
 585+ 7128              //  ______________________________________________________________________
 586+ 7128              //
 587+ 7128              // hex          --
 588+ 7128              // change numeration base
 589+ 7128                              Colon_Def HEX, "HEX", is_normal
 589+ 7128             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 589+ 7128             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 589+ 7128             >
 589+ 7128             >                // dummy db directives used to calculate length of namec
 589+ 7128 48 45 58    >                db      "HEX"
 589+ 712B             >len_NFA         defl    $ - temp_NFA
 589+ 712B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 589+ 7128             >
 589+ 7128 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 589+ 7129 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 589+ 712C             >                org     $-1                 // alter last byte of Name just above to set
 589+ 712B D8          >                db      {b $} | END_BIT     // msb as name end
 589+ 712C             >
 589+ 712C 0F 71       >                dw      last_NFA            // Link to previous definition Name
 589+ 712E             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 589+ 712E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 589+ 7131             >
 589+ 7131             >
 589+ 7131             >                endif           ; ok        // for other definitions it "points" the correct handler
 589+ 7131             >                // Use of "; ok" to suppress "warning[fwdref]"
 589+ 7131             >
 589+ 7131             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 590+ 7131 A5 63 10 00                  dw      LIT, 16                 // 16
 591+ 7135 B5 6D 0A 6B                  dw      BASE, STORE             // base !
 592+ 7139 3F 69                        dw      EXIT                    // ;
 593+ 713B
 594+ 713B              //  ______________________________________________________________________
 595+ 713B              //
 596+ 713B              // decimal      --
 597+ 713B              // change numeration base
 598+ 713B                              Colon_Def DECIMAL, "DECIMAL", is_normal
 598+ 713B             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 598+ 713B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 598+ 713B             >
 598+ 713B             >                // dummy db directives used to calculate length of namec
 598+ 713B 44 45 43 49 >                db      "DECIMAL"
 598+ 713F 4D 41 4C    >
 598+ 7142             >len_NFA         defl    $ - temp_NFA
 598+ 7142             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 598+ 713B             >
 598+ 713B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 598+ 713C 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 598+ 7140 4D 41 4C    >
 598+ 7143             >                org     $-1                 // alter last byte of Name just above to set
 598+ 7142 CC          >                db      {b $} | END_BIT     // msb as name end
 598+ 7143             >
 598+ 7143 28 71       >                dw      last_NFA            // Link to previous definition Name
 598+ 7145             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 598+ 7145 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 598+ 7148             >
 598+ 7148             >
 598+ 7148             >                endif           ; ok        // for other definitions it "points" the correct handler
 598+ 7148             >                // Use of "; ok" to suppress "warning[fwdref]"
 598+ 7148             >
 598+ 7148             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 599+ 7148 A5 63 0A 00                  dw      LIT, 10                 // 10
 600+ 714C B5 6D 0A 6B                  dw      BASE, STORE             // base !
 601+ 7150 3F 69                        dw      EXIT                    // ;
 602+ 7152
 603+ 7152              //  ______________________________________________________________________
 604+ 7152              //
 605+ 7152              // (;code)       --
 606+ 7152              // patch to CFA to call/jump to the "following code"
 607+ 7152                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 607+ 7152             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 607+ 7152             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 607+ 7152             >
 607+ 7152             >                // dummy db directives used to calculate length of namec
 607+ 7152 28 3B 43 4F >                db      "(;CODE)"
 607+ 7156 44 45 29    >
 607+ 7159             >len_NFA         defl    $ - temp_NFA
 607+ 7159             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 607+ 7152             >
 607+ 7152 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 607+ 7153 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 607+ 7157 44 45 29    >
 607+ 715A             >                org     $-1                 // alter last byte of Name just above to set
 607+ 7159 A9          >                db      {b $} | END_BIT     // msb as name end
 607+ 715A             >
 607+ 715A 3B 71       >                dw      last_NFA            // Link to previous definition Name
 607+ 715C             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 607+ 715C CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 607+ 715F             >
 607+ 715F             >
 607+ 715F             >                endif           ; ok        // for other definitions it "points" the correct handler
 607+ 715F             >                // Use of "; ok" to suppress "warning[fwdref]"
 607+ 715F             >
 607+ 715F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 608+ 715F 62 69                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 609+ 7161 87 6F                        dw      LATEST                  // latest   ( Word being defined in this moment )
 610+ 7163 CD 6F A9 6F                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 611+ 7167
 612+ 7167 A5 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 613+ 716B 43 6A 22 6B                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 614+ 716F D3 69                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 615+ 7171
 616+ 7171 0A 6B                        dw      STORE                   // !
 617+ 7173 3F 69                        dw      EXIT                    // ;
 618+ 7175
 619+ 7175              //  ______________________________________________________________________
 620+ 7175              //
 621+ 7175              // ;code        --
 622+ 7175                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 622+ 7175             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 622+ 7175             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 622+ 7175             >
 622+ 7175             >                // dummy db directives used to calculate length of namec
 622+ 7175 3B 43 4F 44 >                db      ";CODE"
 622+ 7179 45          >
 622+ 717A             >len_NFA         defl    $ - temp_NFA
 622+ 717A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 622+ 7175             >
 622+ 7175 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 622+ 7176 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 622+ 717A 45          >
 622+ 717B             >                org     $-1                 // alter last byte of Name just above to set
 622+ 717A C5          >                db      {b $} | END_BIT     // msb as name end
 622+ 717B             >
 622+ 717B 52 71       >                dw      last_NFA            // Link to previous definition Name
 622+ 717D             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 622+ 717D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 622+ 7180             >
 622+ 7180             >
 622+ 7180             >                endif           ; ok        // for other definitions it "points" the correct handler
 622+ 7180             >                // Use of "; ok" to suppress "warning[fwdref]"
 622+ 7180             >
 622+ 7180             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 623+ 7180 79 70                        dw      QCSP                    // ?csp
 624+ 7182 B2 70                        dw      COMPILE                 // compile
 625+ 7184 5C 71                        dw      C_SEMICOLON_CODE        // (;code)
 626+ 7186 DD 70                        dw      SQUARED_OPEN            // [
 627+ 7188 F2 6B                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 628+ 718A 3F 69                        dw      EXIT                    // ; immediate
 629+ 718C
 630+ 718C              //  ______________________________________________________________________
 631+ 718C              //
 632+ 718C              // <builds      --
 633+ 718C                              Colon_Def CBUILDS, "<BUILDS", is_normal
 633+ 718C             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 633+ 718C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 633+ 718C             >
 633+ 718C             >                // dummy db directives used to calculate length of namec
 633+ 718C 3C 42 55 49 >                db      "<BUILDS"
 633+ 7190 4C 44 53    >
 633+ 7193             >len_NFA         defl    $ - temp_NFA
 633+ 7193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 633+ 718C             >
 633+ 718C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 633+ 718D 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 633+ 7191 4C 44 53    >
 633+ 7194             >                org     $-1                 // alter last byte of Name just above to set
 633+ 7193 D3          >                db      {b $} | END_BIT     // msb as name end
 633+ 7194             >
 633+ 7194 75 71       >                dw      last_NFA            // Link to previous definition Name
 633+ 7196             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 633+ 7196 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 633+ 7199             >
 633+ 7199             >
 633+ 7199             >                endif           ; ok        // for other definitions it "points" the correct handler
 633+ 7199             >                // Use of "; ok" to suppress "warning[fwdref]"
 633+ 7199             >
 633+ 7199             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 634+ 7199 43 6C                        dw      ZERO                    // 0
 635+ 719B FF 6B                        dw      CONSTANT                // constant
 636+ 719D 3F 69                        dw      EXIT                    // ;
 637+ 719F
 638+ 719F              //  ______________________________________________________________________
 639+ 719F              //
 640+ 719F              // recurse      --
 641+ 719F              //              Colon_Def RECURSE, "RECURSE", is_immediate
 642+ 719F              //              dw      QCOMP                   // ?comp
 643+ 719F              //              dw      LATEST                  // latest
 644+ 719F              //              dw      PFA, CFA                // pfa cfa
 645+ 719F              //              dw      COMMA                   // ,
 646+ 719F              //              dw      EXIT                    // ; immediate
 647+ 719F
 648+ 719F              //  ______________________________________________________________________
 649+ 719F              //
 650+ 719F              // does>     --
 651+ 719F                              Colon_Def DOES_TO, "DOES>", is_normal
 651+ 719F             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 651+ 719F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 651+ 719F             >
 651+ 719F             >                // dummy db directives used to calculate length of namec
 651+ 719F 44 4F 45 53 >                db      "DOES>"
 651+ 71A3 3E          >
 651+ 71A4             >len_NFA         defl    $ - temp_NFA
 651+ 71A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 651+ 719F             >
 651+ 719F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 651+ 71A0 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 651+ 71A4 3E          >
 651+ 71A5             >                org     $-1                 // alter last byte of Name just above to set
 651+ 71A4 BE          >                db      {b $} | END_BIT     // msb as name end
 651+ 71A5             >
 651+ 71A5 8C 71       >                dw      last_NFA            // Link to previous definition Name
 651+ 71A7             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 651+ 71A7 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 651+ 71AA             >
 651+ 71AA             >
 651+ 71AA             >                endif           ; ok        // for other definitions it "points" the correct handler
 651+ 71AA             >                // Use of "; ok" to suppress "warning[fwdref]"
 651+ 71AA             >
 651+ 71AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 652+ 71AA 62 69                        dw      R_TO                    // r>
 653+ 71AC 87 6F                        dw      LATEST                  // latest
 654+ 71AE CD 6F                        dw      PFA                     // pfa
 655+ 71B0 0A 6B                        dw      STORE                   // !
 656+ 71B2 5C 71                        dw      C_SEMICOLON_CODE        // ;code
 657+ 71B4              Does_Ptr:
 658+ 71B4                              // via call coded in CFA
 659+ 71B4                              ldhlrp
 659+ 71B4 2A 96 63    >                ld      hl,(RP_Pointer)
 660+ 71B7 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 661+ 71B8 70                           ld      (hl), b
 662+ 71B9 2B                           dec     hl
 663+ 71BA 71                           ld      (hl), c
 664+ 71BB                              ldrphl
 664+ 71BB 22 96 63    >                ld      (RP_Pointer),hl
 665+ 71BE E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 666+ 71BF
 667+ 71BF 4E                           ld      c, (hl)
 668+ 71C0 23                           inc     hl
 669+ 71C1 46                           ld      b, (hl)
 670+ 71C2 23                           inc     hl
 671+ 71C3
 672+ 71C3                              psh1
 672+ 71C3 E5          >                push    hl
 672+ 71C4 DD E9       >                jp      (ix)
 673+ 71C6                              // SMUDGE !
 674+ 71C6
 675+ 71C6              //  ______________________________________________________________________
 676+ 71C6              //
 677+ 71C6              // count        a -- a2 n
 678+ 71C6              // expects a counted string at address a, returns string address and counter
 679+ 71C6                              New_Def COUNT, "COUNT", is_code, is_normal
 679+ 71C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ 71C6             >
 679+ 71C6             >                // dummy db directives used to calculate length of namec
 679+ 71C6 43 4F 55 4E >                db      "COUNT"
 679+ 71CA 54          >
 679+ 71CB             >len_NFA         defl    $ - temp_NFA
 679+ 71CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ 71C6             >
 679+ 71C6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ 71C7 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 679+ 71CB 54          >
 679+ 71CC             >                org     $-1                 // alter last byte of Name just above to set
 679+ 71CB D4          >                db      {b $} | END_BIT     // msb as name end
 679+ 71CC             >
 679+ 71CC 9F 71       >                dw      last_NFA            // Link to previous definition Name
 679+ 71CE             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 71CE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 679+ 71CE ~           >
 679+ 71CE ~           >
 679+ 71CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 71CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 71CE             >
 679+ 71CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 71CE E1                           pop     hl
 681+ 71CF 5E                           ld      e, (hl)
 682+ 71D0 16 00                        ld      d, 0
 683+ 71D2 23                           inc     hl
 684+ 71D3              Count_Ptr:
 685+ 71D3 E5                           push    hl
 686+ 71D4 D5                           push    de
 687+ 71D5                              next
 687+ 71D5 DD E9       >                jp      (ix)
 688+ 71D7
 689+ 71D7              //  ______________________________________________________________________
 690+ 71D7              //
 691+ 71D7              // bounds       a n -- a+n n
 692+ 71D7              // given an address and a length ( a n ) calculate the bound addresses
 693+ 71D7              // suitable for DO-LOOP
 694+ 71D7                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 694+ 71D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 71D7             >
 694+ 71D7             >                // dummy db directives used to calculate length of namec
 694+ 71D7 42 4F 55 4E >                db      "BOUNDS"
 694+ 71DB 44 53       >
 694+ 71DD             >len_NFA         defl    $ - temp_NFA
 694+ 71DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 71D7             >
 694+ 71D7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 71D8 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 694+ 71DC 44 53       >
 694+ 71DE             >                org     $-1                 // alter last byte of Name just above to set
 694+ 71DD D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 71DE             >
 694+ 71DE C6 71       >                dw      last_NFA            // Link to previous definition Name
 694+ 71E0             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 71E0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 694+ 71E0 ~           >
 694+ 71E0 ~           >
 694+ 71E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 71E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 71E0             >
 694+ 71E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 71E0 E1                           pop     hl
 696+ 71E1 D1                           pop     de
 697+ 71E2 19                           add     hl, de
 698+ 71E3 18 EE                        jr      Count_Ptr
 699+ 71E5
 700+ 71E5              //  ______________________________________________________________________
 701+ 71E5              //
 702+ 71E5              // leave        --
 703+ 71E5              // Compile (leave) to leave current LOOP and jump just after it
 704+ 71E5                              Colon_Def LEAVE, "LEAVE", is_immediate
 704+ 71E5             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 704+ 71E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 704+ 71E5             >
 704+ 71E5             >                // dummy db directives used to calculate length of namec
 704+ 71E5 4C 45 41 56 >                db      "LEAVE"
 704+ 71E9 45          >
 704+ 71EA             >len_NFA         defl    $ - temp_NFA
 704+ 71EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 704+ 71E5             >
 704+ 71E5 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 704+ 71E6 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 704+ 71EA 45          >
 704+ 71EB             >                org     $-1                 // alter last byte of Name just above to set
 704+ 71EA C5          >                db      {b $} | END_BIT     // msb as name end
 704+ 71EB             >
 704+ 71EB D7 71       >                dw      last_NFA            // Link to previous definition Name
 704+ 71ED             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 704+ 71ED CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 704+ 71F0             >
 704+ 71F0             >
 704+ 71F0             >                endif           ; ok        // for other definitions it "points" the correct handler
 704+ 71F0             >                // Use of "; ok" to suppress "warning[fwdref]"
 704+ 71F0             >
 704+ 71F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 705+ 71F0 B2 70 2F 64                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 706+ 71F4 4D 6E 50 69                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 706+ 71F8 43 6C 6B 6E
 707+ 71FC 43 6C 43 6C                  dw      ZERO, ZERO
 708+ 7200 0F 69 7E 6A                  dw      SPFETCH, DUP
 709+ 7204 F5 69 F5 69                  dw      CELL_PLUS, CELL_PLUS
 710+ 7208 65 6A                        dw      TUCK
 711+ 720A D3 6D FF 6A                  dw      CSP, FETCH
 712+ 720E 73 6A 9D 6E                  dw      SWAP, SUBTRACT
 713+ 7212 48 68                        dw      CMOVE
 714+ 7214 D3 6D FF 6A                  dw      CSP, FETCH, CELL_MINUS
 714+ 7218 00 6A
 715+ 721A 62 69 43 6A                  dw      R_TO, OVER, STORE
 715+ 721E 0A 6B
 716+ 7220 00 6A 43 6C                  dw      CELL_MINUS, ZERO
 717+ 7224 73 6A 0A 6B                  dw      SWAP, STORE
 718+ 7228 3F 69                        dw      EXIT                    // ;
 719+ 722A
 720+ 722A              //  ______________________________________________________________________
 721+ 722A              //
 722+ 722A              // type         a n --
 723+ 722A              // Sends to current output channel n characters starting at address a.
 724+ 722A                              Colon_Def TYPE, "TYPE", is_normal
 724+ 722A             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 724+ 722A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 724+ 722A             >
 724+ 722A             >                // dummy db directives used to calculate length of namec
 724+ 722A 54 59 50 45 >                db      "TYPE"
 724+ 722E             >len_NFA         defl    $ - temp_NFA
 724+ 722E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 724+ 722A             >
 724+ 722A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 724+ 722B 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 724+ 722F             >                org     $-1                 // alter last byte of Name just above to set
 724+ 722E C5          >                db      {b $} | END_BIT     // msb as name end
 724+ 722F             >
 724+ 722F E5 71       >                dw      last_NFA            // Link to previous definition Name
 724+ 7231             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 724+ 7231 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 724+ 7234             >
 724+ 7234             >
 724+ 7234             >                endif           ; ok        // for other definitions it "points" the correct handler
 724+ 7234             >                // Use of "; ok" to suppress "warning[fwdref]"
 724+ 7234             >
 724+ 7234             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 725+ 7234 E0 71                        dw      BOUNDS                  // bounds
 726+ 7236 45 64                        dw      C_Q_DO                  // ?do
 727+ 7238 0C 00                        dw      Type_Skip - $
 728+ 723A              Type_Loop:
 729+ 723A 78 64 16 6B                  dw          I, CFETCH           //      i c@
 730+ 723E 32 6F                        dw          EMIT                //      emit
 731+ 7240 F8 63                        dw      C_LOOP                  // loop
 732+ 7242 F8 FF                        dw      Type_Loop - $
 733+ 7244              Type_Skip:
 734+ 7244 3F 69                        dw      EXIT                    // ;
 735+ 7246
 736+ 7246              //  ______________________________________________________________________
 737+ 7246              //
 738+ 7246              // -trailing    a n1 -- a n2
 739+ 7246              // Assumes that an n1 bytes-long string is stored at address a
 740+ 7246              // and the string contains a space delimited word,
 741+ 7246              // Finds n2 as the position of the first character after the word.
 742+ 7246                              Colon_Def LTRAILING, "-TRAILING", is_normal
 742+ 7246             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 742+ 7246             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 742+ 7246             >
 742+ 7246             >                // dummy db directives used to calculate length of namec
 742+ 7246 2D 54 52 41 >                db      "-TRAILING"
 742+ 724A 49 4C 49 4E >
 742+ 724E 47          >
 742+ 724F             >len_NFA         defl    $ - temp_NFA
 742+ 724F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 742+ 7246             >
 742+ 7246 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 742+ 7247 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 742+ 724B 49 4C 49 4E >
 742+ 724F 47          >
 742+ 7250             >                org     $-1                 // alter last byte of Name just above to set
 742+ 724F C7          >                db      {b $} | END_BIT     // msb as name end
 742+ 7250             >
 742+ 7250 2A 72       >                dw      last_NFA            // Link to previous definition Name
 742+ 7252             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 742+ 7252 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 742+ 7255             >
 742+ 7255             >
 742+ 7255             >                endif           ; ok        // for other definitions it "points" the correct handler
 742+ 7255             >                // Use of "; ok" to suppress "warning[fwdref]"
 742+ 7255             >
 742+ 7255             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 743+ 7255 7E 6A 43 6C                  dw      DUP, ZERO               // dup 0
 744+ 7259                                                              // do
 745+ 7259 45 64                        dw      C_Q_DO
 746+ 725B 20 00                        dw      LTrailing_Leave - $
 747+ 725D              LTrailing_Loop:
 748+ 725D D3 6A B6 69                  dw          TWO_DUP, PLUS       //      2dup +
 749+ 7261 DD 69                        dw          ONE_SUBTRACT        //      1-
 750+ 7263 16 6B                        dw          CFETCH              //      c@
 751+ 7265 72 6C 9D 6E                  dw          BL, SUBTRACT        //      bl -
 752+ 7269                                                              //      if
 753+ 7269 1C 64                        dw          ZBRANCH
 754+ 726B 0A 00                        dw          LTrailing_Else - $
 755+ 726D 2F 64                        dw              C_LEAVE         //          leave
 756+ 726F 0C 00                        dw              LTrailing_Leave - $
 757+ 7271 07 64                        dw          BRANCH              //      else
 758+ 7273 04 00                        dw          LTrailing_Endif - $
 759+ 7275              LTrailing_Else:
 760+ 7275 DD 69                        dw              ONE_SUBTRACT    //          1-
 761+ 7277              LTrailing_Endif:                                //      endif
 762+ 7277                                                              // loop
 763+ 7277 F8 63                        dw      C_LOOP
 764+ 7279 E4 FF                        dw      LTrailing_Loop - $
 765+ 727B              LTrailing_Leave:
 766+ 727B 3F 69                        dw      EXIT                    // ;
 767+ 727D
 768+ 727D              //  ______________________________________________________________________
 769+ 727D              //
 770+ 727D              // accept       a n1 -- n2
 771+ 727D              // Accepts at most n1 characters from terminal and stores them at address a
 772+ 727D              // CR stops input. A 'nul' is added as trailer.
 773+ 727D              // n2 is the string length. n2 is kept in span user variable also.
 774+ 727D                              Colon_Def ACCEPT, "ACCEPT", is_normal
 774+ 727D             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 774+ 727D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ 727D             >
 774+ 727D             >                // dummy db directives used to calculate length of namec
 774+ 727D 41 43 43 45 >                db      "ACCEPT"
 774+ 7281 50 54       >
 774+ 7283             >len_NFA         defl    $ - temp_NFA
 774+ 7283             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ 727D             >
 774+ 727D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ 727E 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 774+ 7282 50 54       >
 774+ 7284             >                org     $-1                 // alter last byte of Name just above to set
 774+ 7283 D4          >                db      {b $} | END_BIT     // msb as name end
 774+ 7284             >
 774+ 7284 46 72       >                dw      last_NFA            // Link to previous definition Name
 774+ 7286             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 7286 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 774+ 7289             >
 774+ 7289             >
 774+ 7289             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 7289             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 7289             >
 774+ 7289             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 7289 43 6A B6 69                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 775+ 728D 43 6A
 776+ 728F 43 6C 97 6A                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 777+ 7293                                                              // do
 778+ 7293 45 64                        dw      C_Q_DO
 779+ 7295 8C 00                        dw      Accept_Leave - $
 780+ 7297              Accept_Loop:
 781+ 7297 87 66                        dw          CUR
 782+ 7299 51 6A D1 66                  dw          DROP, KEY           //      drop key        ( a  c )
 783+ 729D 7E 6A                        dw          DUP                 //      dup             ( a  c  c )
 784+ 729F A5 63 0E 00                  dw          LIT, $0E            //      0E
 785+ 72A3 B3 6C                        dw          PLUS_ORIGIN         //      +origin
 786+ 72A5 FF 6A                        dw          FETCH               //      @               ( a  c  c  del )
 787+ 72A7 A9 6E                        dw          EQUALS              //      =               ( a  c  c==del )
 788+ 72A9                                                              //      if
 789+ 72A9 1C 64                        dw          ZBRANCH
 790+ 72AB 2C 00                        dw          Accept_Else_0 - $
 791+ 72AD 51 6A                        dw              DROP            //          drop        ( a  )
 792+ 72AF 7E 6A 78 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 792+ 72B3 A9 6E
 793+ 72B5 4C 6C DD 68                  dw              ONE, AND_OP     //          1 and
 794+ 72B9 7E 6A                        dw              DUP             //          dup         ( a  a==i  a==i )
 795+ 72BB 62 69                        dw              R_TO            //          r> 2 - + r>
 796+ 72BD 0B 6A B6 69                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 797+ 72C1 50 69                        dw              TO_R            //
 798+ 72C3                                                              //          if
 799+ 72C3 1C 64                        dw              ZBRANCH
 800+ 72C5 0A 00                        dw              Accept_Else_1 - $
 801+ 72C7 A5 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
 802+ 72CB                                                              //          else
 803+ 72CB 07 64                        dw              BRANCH
 804+ 72CD 06 00                        dw              Accept_Endif_1 - $
 805+ 72CF              Accept_Else_1:
 806+ 72CF A5 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
 807+ 72D3              Accept_Endif_1:                                 //          endif
 808+ 72D3 07 64                        dw          BRANCH
 809+ 72D5 2E 00                        dw          Accept_Endif_0 - $
 810+ 72D7              Accept_Else_0:                                  //      else
 811+ 72D7 7E 6A                        dw              DUP             //          dup         ( a  c  c )
 812+ 72D9 A5 63 0D 00                  dw              LIT, 13         //          13
 813+ 72DD A9 6E                        dw              EQUALS          //          =           ( a  c  c==CR )
 814+ 72DF                                                              //          if
 815+ 72DF 1C 64                        dw              ZBRANCH
 816+ 72E1 0C 00                        dw              Accept_Else_2 - $
 817+ 72E3 51 6A 72 6C                  dw                  DROP, BL    //              drop bl ( a  bl )
 818+ 72E7 43 6C                        dw                  ZERO        //              0       ( a  c  0 )
 819+ 72E9                                                              //          else
 820+ 72E9 07 64                        dw              BRANCH
 821+ 72EB 04 00                        dw              Accept_Endif_2 - $
 822+ 72ED              Accept_Else_2:
 823+ 72ED 7E 6A                        dw                  DUP         //              dup     ( a  c  c )
 824+ 72EF                                                              //          endif
 825+ 72EF              Accept_Endif_2:
 826+ 72EF 78 64 22 6B                  dw              I, CSTORE       //          i           ( a  c )
 827+ 72F3 7E 6A 72 6C                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
 827+ 72F7 C5 6E
 828+ 72F9                                                              //          if
 829+ 72F9 1C 64                        dw              ZBRANCH
 830+ 72FB 08 00                        dw              Accept_Endif_3 - $
 831+ 72FD 62 69                        dw                  R_TO        //              r>
 832+ 72FF DD 69                        dw                  ONE_SUBTRACT//              1-
 833+ 7301 50 69                        dw                  TO_R        //              >r
 834+ 7303                                                              //          endif
 835+ 7303              Accept_Endif_3:
 836+ 7303              Accept_Endif_0:                                 //      endif
 837+ 7303 32 6F                        dw          EMIT                //      emit
 838+ 7305 43 6C 78 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
 838+ 7309 D3 69
 839+ 730B 0A 6B                        dw          STORE               //          ( zero pad )
 840+ 730D 78 64                        dw          I                   //      i
 841+ 730F 78 64 16 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 841+ 7313 7C 69
 842+ 7315 1C 64                        dw          ZBRANCH             //
 843+ 7317 06 00                        dw              Accept_Endif_4 - $
 844+ 7319 2F 64                        dw                  C_LEAVE     //              leave
 845+ 731B 06 00                        dw                  Accept_Leave - $
 846+ 731D              Accept_Endif_4:                                 //      endif
 847+ 731D                                                              // loop
 848+ 731D F8 63                        dw      C_LOOP
 849+ 731F 78 FF                        dw      Accept_Loop - $
 850+ 7321              Accept_Leave:
 851+ 7321 73 6A 9D 6E                  dw      SWAP, SUBTRACT          // swap -
 852+ 7325 D3 69                        dw      ONE_PLUS                // 1+
 853+ 7327 7E 6A 2B 6E                  dw      DUP, SPAN, STORE        // dup span !
 853+ 732B 0A 6B
 854+ 732D 3F 69                        dw      EXIT                    // ;
 855+ 732F
 856+ 732F              //  ______________________________________________________________________
 857+ 732F              //
 858+ 732F              // expect      a n --
 859+ 732F              // Accepts at most n1 characters from terminal and stores them at address a
 860+ 732F              // CR stops input. A 'nul' is added as trailer.
 861+ 732F              // n2 is the string length. n2 is kept in span user variable also.
 862+ 732F              //              Colon_Def EXPECT, "EXPECT", is_normal
 863+ 732F              //              dw      ACCEPT, DROP            // accept drop
 864+ 732F              //              dw      EXIT                    // ;
 865+ 732F
 866+ 732F              //  ______________________________________________________________________
 867+ 732F              //
 868+ 732F              // query        --
 869+ 732F              // Accept at most 80 character from console. CR stops.
 870+ 732F              // Text is stored in TIB. Variable IN is zeroed.
 871+ 732F                              Colon_Def QUERY, "QUERY", is_normal
 871+ 732F             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
 871+ 732F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 871+ 732F             >
 871+ 732F             >                // dummy db directives used to calculate length of namec
 871+ 732F 51 55 45 52 >                db      "QUERY"
 871+ 7333 59          >
 871+ 7334             >len_NFA         defl    $ - temp_NFA
 871+ 7334             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 871+ 732F             >
 871+ 732F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 871+ 7330 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
 871+ 7334 59          >
 871+ 7335             >                org     $-1                 // alter last byte of Name just above to set
 871+ 7334 D9          >                db      {b $} | END_BIT     // msb as name end
 871+ 7335             >
 871+ 7335 7D 72       >                dw      last_NFA            // Link to previous definition Name
 871+ 7337             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 871+ 7337 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 871+ 733A             >
 871+ 733A             >
 871+ 733A             >                endif           ; ok        // for other definitions it "points" the correct handler
 871+ 733A             >                // Use of "; ok" to suppress "warning[fwdref]"
 871+ 733A             >
 871+ 733A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 872+ 733A E1 6C FF 6A                  dw      TIB, FETCH              // tib @
 873+ 733E A5 63 50 00                  dw      LIT, 80                 // 80
 874+ 7342 86 72 51 6A                  dw      ACCEPT, DROP            // accept drop
 875+ 7346 43 6C 61 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 875+ 734A 0A 6B
 876+ 734C 3F 69                        dw      EXIT                    // ;
 877+ 734E
 878+ 734E              //  ______________________________________________________________________
 879+ 734E              //
 880+ 734E              // fill        a n c --
 881+ 734E              // If n > 0, fills n locations starting from address a with the value c.
 882+ 734E                              New_Def FILL, "FILL", is_code, is_normal
 882+ 734E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ 734E             >
 882+ 734E             >                // dummy db directives used to calculate length of namec
 882+ 734E 46 49 4C 4C >                db      "FILL"
 882+ 7352             >len_NFA         defl    $ - temp_NFA
 882+ 7352             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ 734E             >
 882+ 734E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ 734F 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
 882+ 7353             >                org     $-1                 // alter last byte of Name just above to set
 882+ 7352 CC          >                db      {b $} | END_BIT     // msb as name end
 882+ 7353             >
 882+ 7353 2F 73       >                dw      last_NFA            // Link to previous definition Name
 882+ 7355             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 7355 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 882+ 7355 ~           >
 882+ 7355 ~           >
 882+ 7355             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 7355             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 7355             >
 882+ 7355             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 7355 D9                           exx
 884+ 7356 D1                           pop     de                  // de has character
 885+ 7357 C1                           pop     bc                  // bc has counter
 886+ 7358 E1                           pop     hl                  // hl has address, save Instruction Pointer
 887+ 7359              Fill_Loop:
 888+ 7359 78                               ld      a, b
 889+ 735A B1                               or      c
 890+ 735B 28 05                        jr      z, Fill_While_End
 891+ 735D 73                               ld      (hl), e
 892+ 735E 0B                               dec     bc
 893+ 735F 23                               inc     hl
 894+ 7360 18 F7                        jr      Fill_Loop
 895+ 7362              Fill_While_End:
 896+ 7362 D9                           exx
 897+ 7363                              next
 897+ 7363 DD E9       >                jp      (ix)
 898+ 7365
 899+ 7365              //  ______________________________________________________________________
 900+ 7365              //
 901+ 7365              // erase        a n --
 902+ 7365              // If n > 0, fills n locations starting from address a with 'nul' characters.
 903+ 7365                              Colon_Def ERASE, "ERASE", is_normal
 903+ 7365             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
 903+ 7365             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 7365             >
 903+ 7365             >                // dummy db directives used to calculate length of namec
 903+ 7365 45 52 41 53 >                db      "ERASE"
 903+ 7369 45          >
 903+ 736A             >len_NFA         defl    $ - temp_NFA
 903+ 736A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 7365             >
 903+ 7365 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 7366 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
 903+ 736A 45          >
 903+ 736B             >                org     $-1                 // alter last byte of Name just above to set
 903+ 736A C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 736B             >
 903+ 736B 4E 73       >                dw      last_NFA            // Link to previous definition Name
 903+ 736D             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 736D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 7370             >
 903+ 7370             >
 903+ 7370             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 7370             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 7370             >
 903+ 7370             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 7370 43 6C 55 73                  dw      ZERO, FILL              // 0 fill
 905+ 7374 3F 69                        dw      EXIT                    // ;
 906+ 7376
 907+ 7376              //  ______________________________________________________________________
 908+ 7376              //
 909+ 7376              // blank        a n --
 910+ 7376              // If n > 0, fills n locations starting from address a with 'nul' characters.
 911+ 7376                              Colon_Def BLANK, "BLANK", is_normal
 911+ 7376             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
 911+ 7376             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 911+ 7376             >
 911+ 7376             >                // dummy db directives used to calculate length of namec
 911+ 7376 42 4C 41 4E >                db      "BLANK"
 911+ 737A 4B          >
 911+ 737B             >len_NFA         defl    $ - temp_NFA
 911+ 737B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 911+ 7376             >
 911+ 7376 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 911+ 7377 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
 911+ 737B 4B          >
 911+ 737C             >                org     $-1                 // alter last byte of Name just above to set
 911+ 737B CB          >                db      {b $} | END_BIT     // msb as name end
 911+ 737C             >
 911+ 737C 65 73       >                dw      last_NFA            // Link to previous definition Name
 911+ 737E             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 911+ 737E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 911+ 7381             >
 911+ 7381             >
 911+ 7381             >                endif           ; ok        // for other definitions it "points" the correct handler
 911+ 7381             >                // Use of "; ok" to suppress "warning[fwdref]"
 911+ 7381             >
 911+ 7381             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 912+ 7381 72 6C 55 73                  dw      BL, FILL                // bl fill
 913+ 7385 3F 69                        dw      EXIT                    // ;
 914+ 7387
 915+ 7387              //  ______________________________________________________________________
 916+ 7387              //
 917+ 7387              // hold         c --
 918+ 7387              // Used between <# and #> to insert a character c in numeric formatting.
 919+ 7387                              Colon_Def HOLD, "HOLD", is_normal
 919+ 7387             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
 919+ 7387             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 919+ 7387             >
 919+ 7387             >                // dummy db directives used to calculate length of namec
 919+ 7387 48 4F 4C 44 >                db      "HOLD"
 919+ 738B             >len_NFA         defl    $ - temp_NFA
 919+ 738B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 919+ 7387             >
 919+ 7387 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 919+ 7388 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
 919+ 738C             >                org     $-1                 // alter last byte of Name just above to set
 919+ 738B C4          >                db      {b $} | END_BIT     // msb as name end
 919+ 738C             >
 919+ 738C 76 73       >                dw      last_NFA            // Link to previous definition Name
 919+ 738E             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 919+ 738E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 919+ 7391             >
 919+ 7391             >
 919+ 7391             >                endif           ; ok        // for other definitions it "points" the correct handler
 919+ 7391             >                // Use of "; ok" to suppress "warning[fwdref]"
 919+ 7391             >
 919+ 7391             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 920+ 7391 68 6C                        dw      NEG_ONE                 // -1
 921+ 7393 E6 6D E0 6A                  dw      HLD, PLUSSTORE          // hld +!
 922+ 7397 E6 6D FF 6A                  dw      HLD, FETCH, CSTORE      // hld @ c!
 922+ 739B 22 6B
 923+ 739D 3F 69                        dw      EXIT                    // ;
 924+ 739F
 925+ 739F              //  ______________________________________________________________________
 926+ 739F              //
 927+ 739F              // pad         -- a
 928+ 739F              // leaves the buffer text address. This is at a fixed distance over HERE.
 929+ 739F                              Colon_Def PAD, "PAD", is_normal
 929+ 739F             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
 929+ 739F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 929+ 739F             >
 929+ 739F             >                // dummy db directives used to calculate length of namec
 929+ 739F 50 41 44    >                db      "PAD"
 929+ 73A2             >len_NFA         defl    $ - temp_NFA
 929+ 73A2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 929+ 739F             >
 929+ 739F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 929+ 73A0 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
 929+ 73A3             >                org     $-1                 // alter last byte of Name just above to set
 929+ 73A2 C4          >                db      {b $} | END_BIT     // msb as name end
 929+ 73A3             >
 929+ 73A3 87 73       >                dw      last_NFA            // Link to previous definition Name
 929+ 73A5             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 929+ 73A5 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 929+ 73A8             >
 929+ 73A8             >
 929+ 73A8             >                endif           ; ok        // for other definitions it "points" the correct handler
 929+ 73A8             >                // Use of "; ok" to suppress "warning[fwdref]"
 929+ 73A8             >
 929+ 73A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 930+ 73A8 4D 6E                        dw      HERE                    // here
 931+ 73AA A5 63 44 00                  dw      LIT, 68                 // 68
 932+ 73AE B6 69                        dw      PLUS                    // +
 933+ 73B0 3F 69                        dw      EXIT                    // ;
 934+ 73B2
 935+ 73B2              //  ______________________________________________________________________
 936+ 73B2              //
 937+ 73B2              // word         c -- a
 938+ 73B2              // reads characters from input streams until it encouners a c delimiter.
 939+ 73B2              // Stores that packet so it starts from HERE
 940+ 73B2              // WORD leaves a counter as first byte and ends the packet with two spaces.
 941+ 73B2              // Other occurrences of c are ignored.
 942+ 73B2              // If BLK is zero, text is taken from terminal buffer TIB.
 943+ 73B2              // Otherwise text is taken from the disk-block given by BLK.
 944+ 73B2              // "in" variable is incremented of the number of character read.
 945+ 73B2              // The number of characters read is given by ENCLOSE.
 946+ 73B2                              Colon_Def WORD, "WORD", is_normal
 946+ 73B2             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
 946+ 73B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 946+ 73B2             >
 946+ 73B2             >                // dummy db directives used to calculate length of namec
 946+ 73B2 57 4F 52 44 >                db      "WORD"
 946+ 73B6             >len_NFA         defl    $ - temp_NFA
 946+ 73B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 946+ 73B2             >
 946+ 73B2 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 946+ 73B3 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
 946+ 73B7             >                org     $-1                 // alter last byte of Name just above to set
 946+ 73B6 C4          >                db      {b $} | END_BIT     // msb as name end
 946+ 73B7             >
 946+ 73B7 9F 73       >                dw      last_NFA            // Link to previous definition Name
 946+ 73B9             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 946+ 73B9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 946+ 73BC             >
 946+ 73BC             >
 946+ 73BC             >                endif           ; ok        // for other definitions it "points" the correct handler
 946+ 73BC             >                // Use of "; ok" to suppress "warning[fwdref]"
 946+ 73BC             >
 946+ 73BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 947+ 73BC 57 6D FF 6A                  dw      BLK, FETCH              // blk @
 948+ 73C0                                                              // if
 949+ 73C0 1C 64                        dw      ZBRANCH
 950+ 73C2 0C 00                        dw      Word_Else - $
 951+ 73C4 57 6D FF 6A                  dw          BLK, FETCH          //      blk @
 952+ 73C8 3D 7D                        dw          BLOCK               //      block ( forward )
 953+ 73CA                                                              // else
 954+ 73CA 07 64                        dw      BRANCH
 955+ 73CC 06 00                        dw      Word_Endif - $
 956+ 73CE              Word_Else:
 957+ 73CE E1 6C FF 6A                  dw         TIB, FETCH           //      tib @
 958+ 73D2              Word_Endif:                                     // endif
 959+ 73D2 61 6D FF 6A                  dw      TO_IN, FETCH, PLUS      // >in @ +
 959+ 73D6 B6 69
 960+ 73D8 73 6A 58 65                  dw      SWAP, ENCLOSE           // swap enclose
 961+ 73DC 4D 6E A5 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
 961+ 73E0 22 00 7E 73
 962+ 73E4 61 6D E0 6A                  dw      TO_IN, PLUSSTORE        // >in @ +
 963+ 73E8 43 6A 9D 6E                  dw      OVER, SUBTRACT, TO_R    // over - >r
 963+ 73EC 50 69
 964+ 73EE 74 69 4D 6E                  dw      R_OP, HERE, CSTORE      // r here c!
 964+ 73F2 22 6B
 965+ 73F4 B6 69                        dw      PLUS                    // +
 966+ 73F6 4D 6E D3 69                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
 966+ 73FA 62 69
 967+ 73FC 48 68                        dw      CMOVE                   // cmove
 968+ 73FE 4D 6E                        dw      HERE                    // here
 969+ 7400 3F 69                        dw      EXIT                    // ;
 970+ 7402
 971+ 7402              //  ______________________________________________________________________
 972+ 7402              //
 973+ 7402              // (.")         --
 974+ 7402              // Direct procedure compiled by ." and  .(  It executes TYPE.
 975+ 7402                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
 975+ 7402             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
 975+ 7402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 975+ 7402             >
 975+ 7402             >                // dummy db directives used to calculate length of namec
 975+ 7402 28 2E 22 29 >                db      '(.")'
 975+ 7406             >len_NFA         defl    $ - temp_NFA
 975+ 7406             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 975+ 7402             >
 975+ 7402 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 975+ 7403 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
 975+ 7407             >                org     $-1                 // alter last byte of Name just above to set
 975+ 7406 A9          >                db      {b $} | END_BIT     // msb as name end
 975+ 7407             >
 975+ 7407 B2 73       >                dw      last_NFA            // Link to previous definition Name
 975+ 7409             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 975+ 7409 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 975+ 740C             >
 975+ 740C             >
 975+ 740C             >                endif           ; ok        // for other definitions it "points" the correct handler
 975+ 740C             >                // Use of "; ok" to suppress "warning[fwdref]"
 975+ 740C             >
 975+ 740C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 976+ 740C 74 69 CE 71                  dw      R_OP, COUNT             // r count
 977+ 7410 7E 6A D3 69                  dw      DUP, ONE_PLUS           // dup 1+
 978+ 7414 62 69 B6 69                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
 978+ 7418 50 69
 979+ 741A 31 72                        dw      TYPE                    // type
 980+ 741C 3F 69                        dw      EXIT                    // ;
 981+ 741E
 982+ 741E              //  ______________________________________________________________________
 983+ 741E              //
 984+ 741E              // char         -- c
 985+ 741E              // get first character from next input word
 986+ 741E                              Colon_Def CHAR,  "CHAR", is_normal
 986+ 741E             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
 986+ 741E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 986+ 741E             >
 986+ 741E             >                // dummy db directives used to calculate length of namec
 986+ 741E 43 48 41 52 >                db      "CHAR"
 986+ 7422             >len_NFA         defl    $ - temp_NFA
 986+ 7422             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 986+ 741E             >
 986+ 741E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 986+ 741F 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
 986+ 7423             >                org     $-1                 // alter last byte of Name just above to set
 986+ 7422 D2          >                db      {b $} | END_BIT     // msb as name end
 986+ 7423             >
 986+ 7423 02 74       >                dw      last_NFA            // Link to previous definition Name
 986+ 7425             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 986+ 7425 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 986+ 7428             >
 986+ 7428             >
 986+ 7428             >                endif           ; ok        // for other definitions it "points" the correct handler
 986+ 7428             >                // Use of "; ok" to suppress "warning[fwdref]"
 986+ 7428             >
 986+ 7428             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 987+ 7428 72 6C B9 73                  dw      BL, WORD                // bl word
 988+ 742C D3 69 16 6B                  dw      ONE_PLUS, CFETCH        // 1+ c@
 989+ 7430 3F 69                        dw      EXIT                    // ;
 990+ 7432
 991+ 7432              //  ______________________________________________________________________
 992+ 7432              //
 993+ 7432              // ,"           --
 994+ 7432              // compiles a string terminated by " as a counted string from next input stream
 995+ 7432                              Colon_Def COMMA_QUOTE,  ',"', is_normal
 995+ 7432             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
 995+ 7432             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 995+ 7432             >
 995+ 7432             >                // dummy db directives used to calculate length of namec
 995+ 7432 2C 22       >                db      ',"'
 995+ 7434             >len_NFA         defl    $ - temp_NFA
 995+ 7434             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 995+ 7432             >
 995+ 7432 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 995+ 7433 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
 995+ 7435             >                org     $-1                 // alter last byte of Name just above to set
 995+ 7434 A2          >                db      {b $} | END_BIT     // msb as name end
 995+ 7435             >
 995+ 7435 1E 74       >                dw      last_NFA            // Link to previous definition Name
 995+ 7437             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 995+ 7437 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 995+ 743A             >
 995+ 743A             >
 995+ 743A             >                endif           ; ok        // for other definitions it "points" the correct handler
 995+ 743A             >                // Use of "; ok" to suppress "warning[fwdref]"
 995+ 743A             >
 995+ 743A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 996+ 743A A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
 997+ 743E B9 73                        dw      WORD                    // word
 998+ 7440 16 6B D3 69                  dw      CFETCH, ONE_PLUS        // c@ 1+
 999+ 7444 5E 6E                        dw      ALLOT                   // allot
1000+ 7446 43 6C 7D 6E                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1001+ 744A 3F 69                        dw      EXIT
1002+ 744C
1003+ 744C              //  ______________________________________________________________________
1004+ 744C              //
1005+ 744C              // .c           c --
1006+ 744C              // intermediate general purpose string builder, used by ." and .(
1007+ 744C                              Colon_Def DOT_C,  ".C", is_immediate
1007+ 744C             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1007+ 744C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1007+ 744C             >
1007+ 744C             >                // dummy db directives used to calculate length of namec
1007+ 744C 2E 43       >                db      ".C"
1007+ 744E             >len_NFA         defl    $ - temp_NFA
1007+ 744E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1007+ 744C             >
1007+ 744C C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1007+ 744D 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1007+ 744F             >                org     $-1                 // alter last byte of Name just above to set
1007+ 744E C3          >                db      {b $} | END_BIT     // msb as name end
1007+ 744F             >
1007+ 744F 32 74       >                dw      last_NFA            // Link to previous definition Name
1007+ 7451             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1007+ 7451 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1007+ 7454             >
1007+ 7454             >
1007+ 7454             >                endif           ; ok        // for other definitions it "points" the correct handler
1007+ 7454             >                // Use of "; ok" to suppress "warning[fwdref]"
1007+ 7454             >
1007+ 7454             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1008+ 7454 AA 6D FF 6A                  dw      STATE, FETCH            // state @
1009+ 7458                                                              // if
1010+ 7458 1C 64                        dw      ZBRANCH
1011+ 745A 12 00                        dw      Dot_C_Else - $
1012+ 745C B2 70 09 74                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1013+ 7460 B9 73 16 6B                  dw          WORD, CFETCH        //      word c@
1014+ 7464 D3 69 5E 6E                  dw          ONE_PLUS, ALLOT     //      1+ allot
1015+ 7468                                                              // else
1016+ 7468 07 64                        dw      BRANCH
1017+ 746A 08 00                        dw      Dot_C_Endif - $
1018+ 746C              Dot_C_Else:
1019+ 746C B9 73 CE 71                  dw          WORD, COUNT, TYPE   //      word count type
1019+ 7470 31 72
1020+ 7472              Dot_C_Endif:                                    // endif
1021+ 7472 3F 69                        dw      EXIT                    ;
1022+ 7474
1023+ 7474              //  ______________________________________________________________________
1024+ 7474              //
1025+ 7474              // ."           c --
1026+ 7474                              Colon_Def DOT_QUOTE,  '."', is_immediate
1026+ 7474             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1026+ 7474             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1026+ 7474             >
1026+ 7474             >                // dummy db directives used to calculate length of namec
1026+ 7474 2E 22       >                db      '."'
1026+ 7476             >len_NFA         defl    $ - temp_NFA
1026+ 7476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1026+ 7474             >
1026+ 7474 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1026+ 7475 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1026+ 7477             >                org     $-1                 // alter last byte of Name just above to set
1026+ 7476 A2          >                db      {b $} | END_BIT     // msb as name end
1026+ 7477             >
1026+ 7477 4C 74       >                dw      last_NFA            // Link to previous definition Name
1026+ 7479             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1026+ 7479 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1026+ 747C             >
1026+ 747C             >
1026+ 747C             >                endif           ; ok        // for other definitions it "points" the correct handler
1026+ 747C             >                // Use of "; ok" to suppress "warning[fwdref]"
1026+ 747C             >
1026+ 747C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1027+ 747C A5 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1028+ 7480 51 74                        dw      DOT_C                   // [compile] .c
1029+ 7482 3F 69                        dw      EXIT                    // ; immediate
1030+ 7484
1031+ 7484              //  ______________________________________________________________________
1032+ 7484              //
1033+ 7484              // .(           c --
1034+ 7484                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1034+ 7484             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1034+ 7484             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1034+ 7484             >
1034+ 7484             >                // dummy db directives used to calculate length of namec
1034+ 7484 2E 28       >                db      ".("
1034+ 7486             >len_NFA         defl    $ - temp_NFA
1034+ 7486             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1034+ 7484             >
1034+ 7484 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1034+ 7485 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1034+ 7487             >                org     $-1                 // alter last byte of Name just above to set
1034+ 7486 A8          >                db      {b $} | END_BIT     // msb as name end
1034+ 7487             >
1034+ 7487 74 74       >                dw      last_NFA            // Link to previous definition Name
1034+ 7489             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1034+ 7489 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1034+ 748C             >
1034+ 748C             >
1034+ 748C             >                endif           ; ok        // for other definitions it "points" the correct handler
1034+ 748C             >                // Use of "; ok" to suppress "warning[fwdref]"
1034+ 748C             >
1034+ 748C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1035+ 748C A5 63 29 00                  dw      LIT, ")"                // [char] )
1036+ 7490 51 74                        dw      DOT_C                   // [compile] .c
1037+ 7492 3F 69                        dw      EXIT                    // ; immediate
1038+ 7494
1039+ 7494              //  ______________________________________________________________________
1040+ 7494              //
1041+ 7494              // (sgn)        a -- a f
1042+ 7494              // determines if char in addr a is a sign (+ or -), and in that case increments
1043+ 7494              // a flag. Returns f as the sign, true for negative, false for positive.
1044+ 7494              // called by NUMBER and (EXP)
1045+ 7494                              Colon_Def CSGN,  "(SGN)", is_normal
1045+ 7494             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1045+ 7494             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1045+ 7494             >
1045+ 7494             >                // dummy db directives used to calculate length of namec
1045+ 7494 28 53 47 4E >                db      "(SGN)"
1045+ 7498 29          >
1045+ 7499             >len_NFA         defl    $ - temp_NFA
1045+ 7499             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1045+ 7494             >
1045+ 7494 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1045+ 7495 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1045+ 7499 29          >
1045+ 749A             >                org     $-1                 // alter last byte of Name just above to set
1045+ 7499 A9          >                db      {b $} | END_BIT     // msb as name end
1045+ 749A             >
1045+ 749A 84 74       >                dw      last_NFA            // Link to previous definition Name
1045+ 749C             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1045+ 749C CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1045+ 749F             >
1045+ 749F             >
1045+ 749F             >                endif           ; ok        // for other definitions it "points" the correct handler
1045+ 749F             >                // Use of "; ok" to suppress "warning[fwdref]"
1045+ 749F             >
1045+ 749F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1046+ 749F 7E 6A D3 69                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1046+ 74A3 16 6B
1047+ 74A5 7E 6A A5 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1047+ 74A9 2D 00 A9 6E
1048+ 74AD                                                              // if
1049+ 74AD 1C 64                        dw      ZBRANCH
1050+ 74AF 12 00                        dw      CSgn_Else_0 - $
1051+ 74B1 51 6A                        dw          DROP                //      drop
1052+ 74B3 D3 69                        dw          ONE_PLUS            //      1+
1053+ 74B5 4C 6C BF 6D                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1053+ 74B9 E0 6A
1054+ 74BB 4C 6C                        dw          ONE                 //      1
1055+ 74BD                                                              // else
1056+ 74BD 07 64                        dw      BRANCH
1057+ 74BF 16 00                        dw      CSgn_Endif_0 - $
1058+ 74C1              CSgn_Else_0:
1059+ 74C1 A5 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1059+ 74C5 A9 6E
1060+ 74C7                                                              //      if
1061+ 74C7 1C 64                        dw          ZBRANCH
1062+ 74C9 0A 00                        dw          CSgn_Endif_1 - $
1063+ 74CB D3 69                        dw              ONE_PLUS        //          1+
1064+ 74CD 4C 6C BF 6D                  dw              ONE, DPL        //          1 dpl
1065+ 74D1 E0 6A                        dw              PLUSSTORE       //          +!
1066+ 74D3              CSgn_Endif_1                                    //      endif
1067+ 74D3 43 6C                        dw          ZERO                //      0
1068+ 74D5              CSgn_Endif_0:                                   // endif
1069+ 74D5 3F 69                        dw      EXIT
1070+ 74D7
1071+ 74D7              //  ______________________________________________________________________
1072+ 74D7              //
1073+ 74D7              // (number)     d a -- d1 a1
1074+ 74D7              // using the current BASE parse characters stored in address a
1075+ 74D7              // accumulating a double precision integer d
1076+ 74D7              // the process stops at the first not-convertible character
1077+ 74D7              // A double-number is kept in CPU registers as HLDE.
1078+ 74D7              // On the stack a double number is treated as two single numbers
1079+ 74D7              // where HL is on the top of the stack and DE is the second from top,
1080+ 74D7              // so in the stack memory it appears as LHED.
1081+ 74D7              // Instead, in 2VARIABLE a double number is stored as EDLH.
1082+ 74D7                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1082+ 74D7             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1082+ 74D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1082+ 74D7             >
1082+ 74D7             >                // dummy db directives used to calculate length of namec
1082+ 74D7 28 4E 55 4D >                db      "(NUMBER)"
1082+ 74DB 42 45 52 29 >
1082+ 74DF             >len_NFA         defl    $ - temp_NFA
1082+ 74DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1082+ 74D7             >
1082+ 74D7 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1082+ 74D8 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1082+ 74DC 42 45 52 29 >
1082+ 74E0             >                org     $-1                 // alter last byte of Name just above to set
1082+ 74DF A9          >                db      {b $} | END_BIT     // msb as name end
1082+ 74E0             >
1082+ 74E0 94 74       >                dw      last_NFA            // Link to previous definition Name
1082+ 74E2             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1082+ 74E2 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1082+ 74E5             >
1082+ 74E5             >
1082+ 74E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1082+ 74E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1082+ 74E5             >
1082+ 74E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1083+ 74E5                                                              // begin
1084+ 74E5              CNumber_Begin:
1085+ 74E5 D3 69                        dw          ONE_PLUS            //      1+
1086+ 74E7 7E 6A 50 69                  dw          DUP, TO_R           //      dup >r
1087+ 74EB 16 6B                        dw          CFETCH              //      @
1088+ 74ED B5 6D FF 6A                  dw          BASE, FETCH         //      base @
1089+ 74F1 95 64                        dw          DIGIT               //      digit
1090+ 74F3                                                              // while
1091+ 74F3 1C 64                        dw      ZBRANCH
1092+ 74F5 2C 00                        dw      CNumber_While_end - $
1093+ 74F7 73 6A                        dw          SWAP                //      swap
1094+ 74F9 B5 6D FF 6A                  dw          BASE, FETCH         //      base @
1095+ 74FD 77 68                        dw          UM_MUL              //      um*
1096+ 74FF 51 6A 89 6A                  dw          DROP, ROT           //      drop rot
1097+ 7503 B5 6D FF 6A                  dw          BASE, FETCH         //      base @
1098+ 7507 77 68                        dw          UM_MUL              //      um*
1099+ 7509 C1 69                        dw          DPLUS               //      d+
1100+ 750B BF 6D FF 6A                  dw          DPL, FETCH          //      dpl @
1101+ 750F D3 69                        dw          ONE_PLUS            //      1+
1102+ 7511                                                              //      if
1103+ 7511 1C 64                        dw          ZBRANCH
1104+ 7513 08 00                        dw          CNumber_Endif - $
1105+ 7515 4C 6C BF 6D                  dw              ONE, DPL        //          1 dpl
1106+ 7519 E0 6A                        dw              PLUSSTORE       //          +!
1107+ 751B              CNumber_Endif:                                  //      endif
1108+ 751B 62 69                        dw             R_TO             //      r>  ( balance rp )
1109+ 751D 07 64                        dw      BRANCH
1110+ 751F C6 FF                        dw      CNumber_Begin - $
1111+ 7521              CNumber_While_end:                              // repeat
1112+ 7521 62 69                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1113+ 7523 3F 69                        dw      EXIT                    // ;
1114+ 7525
1115+ 7525              //  ______________________________________________________________________
1116+ 7525              //
1117+ 7525              // number       a -- d
1118+ 7525                              Colon_Def NUMBER,  "NUMBER", is_normal
1118+ 7525             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1118+ 7525             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1118+ 7525             >
1118+ 7525             >                // dummy db directives used to calculate length of namec
1118+ 7525 4E 55 4D 42 >                db      "NUMBER"
1118+ 7529 45 52       >
1118+ 752B             >len_NFA         defl    $ - temp_NFA
1118+ 752B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1118+ 7525             >
1118+ 7525 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1118+ 7526 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1118+ 752A 45 52       >
1118+ 752C             >                org     $-1                 // alter last byte of Name just above to set
1118+ 752B D2          >                db      {b $} | END_BIT     // msb as name end
1118+ 752C             >
1118+ 752C D7 74       >                dw      last_NFA            // Link to previous definition Name
1118+ 752E             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1118+ 752E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1118+ 7531             >
1118+ 7531             >
1118+ 7531             >                endif           ; ok        // for other definitions it "points" the correct handler
1118+ 7531             >                // Use of "; ok" to suppress "warning[fwdref]"
1118+ 7531             >
1118+ 7531             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1119+ 7531 43 6C 43 6C                  dw      ZERO, ZERO              // 0 0
1120+ 7535 89 6A                        dw      ROT                     // rot
1121+ 7537 9C 74 50 69                  dw      CSGN, TO_R              // (sgn) >r
1122+ 753B 68 6C BF 6D                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1122+ 753F 0A 6B
1123+ 7541 E2 74                        dw      CNUMBER                 // (number)
1124+ 7543 7E 6A 16 6B                  dw      DUP, CFETCH             // dup c@
1125+ 7547 A5 63 2E 00                  dw      LIT, 46, EQUALS         // [char] . =  ( decimal point )
1125+ 754B A9 6E
1126+ 754D                                                              // if
1127+ 754D 1C 64                        dw      ZBRANCH
1128+ 754F 0A 00                        dw      Number_Endif_1 - $
1129+ 7551 43 6C BF 6D                  dw          ZERO, DPL, STORE    //      0 dpl !
1129+ 7555 0A 6B
1130+ 7557 E2 74                        dw          CNUMBER             //      (number)
1131+ 7559              Number_Endif_1:                                 // endif
1132+ 7559 16 6B 72 6C                  dw      CFETCH, BL              // c@ bl
1133+ 755D 9D 6E 43 6C                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1133+ 7561 19 70
1134+ 7563 62 69                        dw      R_TO                    // r>
1135+ 7565                                                              // if
1136+ 7565 1C 64                        dw      ZBRANCH
1137+ 7567 04 00                        dw      Number_Endif_2 - $
1138+ 7569 2B 6A                        dw          DMINUS              //      dminus
1139+ 756B              Number_Endif_2:                                 // endif
1140+ 756B 3F 69                        dw      EXIT                    // ;
1141+ 756D
1142+ 756D              //  ______________________________________________________________________
1143+ 756D              //
1144+ 756D              // -find        a -- d
1145+ 756D                              Colon_Def LFIND,  "-FIND", is_normal
1145+ 756D             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1145+ 756D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1145+ 756D             >
1145+ 756D             >                // dummy db directives used to calculate length of namec
1145+ 756D 2D 46 49 4E >                db      "-FIND"
1145+ 7571 44          >
1145+ 7572             >len_NFA         defl    $ - temp_NFA
1145+ 7572             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1145+ 756D             >
1145+ 756D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1145+ 756E 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1145+ 7572 44          >
1145+ 7573             >                org     $-1                 // alter last byte of Name just above to set
1145+ 7572 C4          >                db      {b $} | END_BIT     // msb as name end
1145+ 7573             >
1145+ 7573 25 75       >                dw      last_NFA            // Link to previous definition Name
1145+ 7575             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1145+ 7575 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1145+ 7578             >
1145+ 7578             >
1145+ 7578             >                endif           ; ok        // for other definitions it "points" the correct handler
1145+ 7578             >                // Use of "; ok" to suppress "warning[fwdref]"
1145+ 7578             >
1145+ 7578             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1146+ 7578 72 6C B9 73                  dw      BL, WORD                // bl word
1147+ 757C 90 6D FF 6A                  dw      CONTEXT, FETCH, FETCH   // context @ @
1147+ 7580 FF 6A
1148+ 7582 02 65                        dw      C_FIND                  // (find)
1149+ 7584 18 6F                        dw      QDUP                    // ?dup
1150+ 7586 7C 69                        dw      ZEQUAL                  // 0=
1151+ 7588                                                              // if
1152+ 7588 1C 64                        dw      ZBRANCH
1153+ 758A 08 00                        dw      LFind_Endif - $
1154+ 758C 4D 6E                        dw          HERE                //      here
1155+ 758E 87 6F                        dw          LATEST              //      latest
1156+ 7590 02 65                        dw          C_FIND              //      (find)
1157+ 7592              LFind_Endif:                                    // endif
1158+ 7592 3F 69                        dw      EXIT                    // ;
1159+ 7594
1160+ 7594              //  ______________________________________________________________________
1161+ 7594              //
1162+ 7594              // (abort)      --
1163+ 7594                              Colon_Def CABORT,  "(ABORT)", is_normal
1163+ 7594             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1163+ 7594             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1163+ 7594             >
1163+ 7594             >                // dummy db directives used to calculate length of namec
1163+ 7594 28 41 42 4F >                db      "(ABORT)"
1163+ 7598 52 54 29    >
1163+ 759B             >len_NFA         defl    $ - temp_NFA
1163+ 759B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1163+ 7594             >
1163+ 7594 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1163+ 7595 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1163+ 7599 52 54 29    >
1163+ 759C             >                org     $-1                 // alter last byte of Name just above to set
1163+ 759B A9          >                db      {b $} | END_BIT     // msb as name end
1163+ 759C             >
1163+ 759C 6D 75       >                dw      last_NFA            // Link to previous definition Name
1163+ 759E             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1163+ 759E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1163+ 75A1             >
1163+ 75A1             >
1163+ 75A1             >                endif           ; ok        // for other definitions it "points" the correct handler
1163+ 75A1             >                // Use of "; ok" to suppress "warning[fwdref]"
1163+ 75A1             >
1163+ 75A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1164+ 75A1 72 78                        dw      ABORT                   // abort
1165+ 75A3 3F 69                        dw      EXIT                    // ;
1166+ 75A5
1167+ 75A5              //  ______________________________________________________________________
1168+ 75A5              //
1169+ 75A5              // error        n --
1170+ 75A5              // raise an error
1171+ 75A5              // if WARNING is 0, prints "MSG#n".
1172+ 75A5              // if WARNING is 1, prints line n of screen 4.
1173+ 75A5              // if WARNING is -1 does (ABORT) that normally does ABORT
1174+ 75A5              // value can be negative or beyond block 4.
1175+ 75A5                              Colon_Def ERROR,  "ERROR", is_normal
1175+ 75A5             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1175+ 75A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1175+ 75A5             >
1175+ 75A5             >                // dummy db directives used to calculate length of namec
1175+ 75A5 45 52 52 4F >                db      "ERROR"
1175+ 75A9 52          >
1175+ 75AA             >len_NFA         defl    $ - temp_NFA
1175+ 75AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1175+ 75A5             >
1175+ 75A5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1175+ 75A6 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1175+ 75AA 52          >
1175+ 75AB             >                org     $-1                 // alter last byte of Name just above to set
1175+ 75AA D2          >                db      {b $} | END_BIT     // msb as name end
1175+ 75AB             >
1175+ 75AB 94 75       >                dw      last_NFA            // Link to previous definition Name
1175+ 75AD             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1175+ 75AD CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1175+ 75B0             >
1175+ 75B0             >
1175+ 75B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1175+ 75B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1175+ 75B0             >
1175+ 75B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1176+ 75B0 FB 6C FF 6A                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1176+ 75B4 96 69
1177+ 75B6                                                              // if
1178+ 75B6 1C 64                        dw      ZBRANCH
1179+ 75B8 04 00                        dw      Error_Endif_1 - $
1180+ 75BA 9E 75                        dw          CABORT              //      (abort)
1181+ 75BC              Error_Endif_1:                                  // endif
1182+ 75BC 4D 6E CE 71                  dw      HERE, COUNT, TYPE       // here count type
1182+ 75C0 31 72
1183+ 75C2 09 74                        dw      C_DOT_QUOTE             // .( ? )
1184+ 75C4 02 3F 20                     db      2, "? "
1185+ 75C7 B5 7A                        dw      MESSAGE                 // message  ( forward )
1186+ 75C9 CE 6C FF 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1186+ 75CD 1C 69
1187+ 75CF 57 6D FF 6A                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1187+ 75D3 18 6F
1188+ 75D5                                                              // if
1189+ 75D5 1C 64                        dw      ZBRANCH
1190+ 75D7 08 00                        dw      Error_Endif_2 - $
1191+ 75D9 61 6D FF 6A                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1191+ 75DD 73 6A
1192+ 75DF              Error_Endif_2:                                  // endif
1193+ 75DF 30 78                        dw      QUIT                    // quit ( forward )
1194+ 75E1 3F 69                        dw      EXIT                    // ;
1195+ 75E3              //  ______________________________________________________________________
1196+ 75E3              //
1197+ 75E3              // id.          nfa --
1198+ 75E3                              Colon_Def ID_DOT,  "ID.", is_normal
1198+ 75E3             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1198+ 75E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ 75E3             >
1198+ 75E3             >                // dummy db directives used to calculate length of namec
1198+ 75E3 49 44 2E    >                db      "ID."
1198+ 75E6             >len_NFA         defl    $ - temp_NFA
1198+ 75E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ 75E3             >
1198+ 75E3 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ 75E4 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1198+ 75E7             >                org     $-1                 // alter last byte of Name just above to set
1198+ 75E6 AE          >                db      {b $} | END_BIT     // msb as name end
1198+ 75E7             >
1198+ 75E7 A5 75       >                dw      last_NFA            // Link to previous definition Name
1198+ 75E9             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 75E9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 75EC             >
1198+ 75EC             >
1198+ 75EC             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 75EC             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 75EC             >
1198+ 75EC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 75EC A5 73 A5 63                  dw      PAD, LIT, 32, LIT, 96   // pad 32 96
1199+ 75F0 20 00 A5 63
1199+ 75F4 60 00
1200+ 75F6 55 73                        dw      FILL                    // fill
1201+ 75F8 7E 6A CD 6F                  dw      DUP, PFA, LFA           // dup pfa lfa
1201+ 75FC 98 6F
1202+ 75FE 43 6A 9D 6E                  dw      OVER, SUBTRACT          // over -
1203+ 7602 A5 73 73 6A                  dw      PAD, SWAP               // pad swap
1204+ 7606 48 68                        dw      CMOVE                   // cmove
1205+ 7608 A5 73 CE 71                  dw      PAD, COUNT, LIT, $1F    // pad count 01F
1205+ 760C A5 63 1F 00
1206+ 7610 DD 68                        dw      AND_OP                  // and  ( use only lower bits )
1207+ 7612 31 72 4F 6F                  dw      TYPE, SPACE             // type
1208+ 7616 3F 69                        dw      EXIT                    // ;
1209+ 7618
1210+ 7618              //  ______________________________________________________________________
1211+ 7618              //
1212+ 7618              // code         -- cccc
1213+ 7618                              Colon_Def CODE,  "CODE", is_normal
1213+ 7618             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1213+ 7618             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1213+ 7618             >
1213+ 7618             >                // dummy db directives used to calculate length of namec
1213+ 7618 43 4F 44 45 >                db      "CODE"
1213+ 761C             >len_NFA         defl    $ - temp_NFA
1213+ 761C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1213+ 7618             >
1213+ 7618 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1213+ 7619 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1213+ 761D             >                org     $-1                 // alter last byte of Name just above to set
1213+ 761C C5          >                db      {b $} | END_BIT     // msb as name end
1213+ 761D             >
1213+ 761D E3 75       >                dw      last_NFA            // Link to previous definition Name
1213+ 761F             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1213+ 761F CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1213+ 7622             >
1213+ 7622             >
1213+ 7622             >                endif           ; ok        // for other definitions it "points" the correct handler
1213+ 7622             >                // Use of "; ok" to suppress "warning[fwdref]"
1213+ 7622             >
1213+ 7622             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1214+ 7622 75 75                        dw      LFIND                   // -find
1215+ 7624                                                              // if
1216+ 7624 1C 64                        dw      ZBRANCH
1217+ 7626 10 00                        dw      Code_Endif - $
1218+ 7628 51 6A                        dw          DROP                //      drop
1219+ 762A F5 6F E9 75                  dw          TO_NAME, ID_DOT     //      >name id.
1220+ 762E A5 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1220+ 7632 B5 7A
1221+ 7634 4F 6F                        dw          SPACE               //      space
1222+ 7636              Code_Endif:                                     // endif
1223+ 7636 4D 6E                        dw      HERE                    // here
1224+ 7638                                                              // ( ---- here begins NFA ---- )
1225+ 7638 7E 6A 16 6B                  dw      DUP, CFETCH             // dup c@
1226+ 763C ED 6C FF 6A                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1226+ 7640 E9 6E
1227+ 7642 D3 69 5E 6E                  dw      ONE_PLUS, ALLOT         // 1+ allot
1228+ 7646 7E 6A                        dw      DUP                     // dup
1229+ 7648 A5 63                        dw      LIT
1230+ 764A A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1231+ 764C F4 6A                        dw      TOGGLE                  // toggle
1232+ 764E 4D 6E DD 69                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1233+ 7652 A5 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1233+ 7656 F4 6A
1234+ 7658                                                              // ( ---- here is LFA ---- )
1235+ 7658 87 6F 6B 6E                  dw      LATEST, COMMA           // latest ,
1236+ 765C 9E 6D FF 6A                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1236+ 7660 0A 6B
1237+ 7662                                                              // ( ---- here is LFA ---- )
1238+ 7662              //              dw      HERE, CELL_PLUS, COMMA  // ( CFA is empty and PFA yet to exist )
1239+ 7662 3F 69                        dw      EXIT                    // ;
1240+ 7664
1241+ 7664              //  ______________________________________________________________________
1242+ 7664              //
1243+ 7664              // create       -- cccc     ( compile time )
1244+ 7664              //              -- a        ( run time )
1245+ 7664                              Colon_Def CREATE,  "CREATE", is_normal
1245+ 7664             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1245+ 7664             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1245+ 7664             >
1245+ 7664             >                // dummy db directives used to calculate length of namec
1245+ 7664 43 52 45 41 >                db      "CREATE"
1245+ 7668 54 45       >
1245+ 766A             >len_NFA         defl    $ - temp_NFA
1245+ 766A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1245+ 7664             >
1245+ 7664 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1245+ 7665 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1245+ 7669 54 45       >
1245+ 766B             >                org     $-1                 // alter last byte of Name just above to set
1245+ 766A C5          >                db      {b $} | END_BIT     // msb as name end
1245+ 766B             >
1245+ 766B 18 76       >                dw      last_NFA            // Link to previous definition Name
1245+ 766D             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1245+ 766D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1245+ 7670             >
1245+ 7670             >
1245+ 7670             >                endif           ; ok        // for other definitions it "points" the correct handler
1245+ 7670             >                // Use of "; ok" to suppress "warning[fwdref]"
1245+ 7670             >
1245+ 7670             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1246+ 7670 1F 76 02 71                  dw      CODE, SMUDGE            // code smudge
1247+ 7674 A5 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1247+ 7678 7D 6E
1248+ 767A A5 63 23 6C                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1248+ 767E 6B 6E
1249+ 7680 5C 71                        dw      C_SEMICOLON_CODE
1250+ 7682                              // this routine is called from the call coded in CFA
1251+ 7682              Create_Ptr:
1252+ 7682
1253+ 7682
1254+ 7682
1255+ 7682                              next
1255+ 7682 DD E9       >                jp      (ix)
1256+ 7684
1257+ 7684              //  ______________________________________________________________________
1258+ 7684              //
1259+ 7684              // [compile]    -- cccc     ( compile time )
1260+ 7684                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1260+ 7684             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1260+ 7684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1260+ 7684             >
1260+ 7684             >                // dummy db directives used to calculate length of namec
1260+ 7684 5B 43 4F 4D >                db      "[COMPILE]"
1260+ 7688 50 49 4C 45 >
1260+ 768C 5D          >
1260+ 768D             >len_NFA         defl    $ - temp_NFA
1260+ 768D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1260+ 7684             >
1260+ 7684 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1260+ 7685 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1260+ 7689 50 49 4C 45 >
1260+ 768D 5D          >
1260+ 768E             >                org     $-1                 // alter last byte of Name just above to set
1260+ 768D DD          >                db      {b $} | END_BIT     // msb as name end
1260+ 768E             >
1260+ 768E 64 76       >                dw      last_NFA            // Link to previous definition Name
1260+ 7690             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1260+ 7690 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1260+ 7693             >
1260+ 7693             >
1260+ 7693             >                endif           ; ok        // for other definitions it "points" the correct handler
1260+ 7693             >                // Use of "; ok" to suppress "warning[fwdref]"
1260+ 7693             >
1260+ 7693             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1261+ 7693 75 75                        dw      LFIND                   // -find      (  cfa  b  f  )
1262+ 7695 7C 69                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1263+ 7697 43 6C 19 70                  dw      ZERO, QERROR            // 0 ?error
1264+ 769B 51 6A                        dw      DROP                    // drop       (  cfa  )
1265+ 769D 6B 6E                        dw      COMMA                   // ,
1266+ 769F 3F 69                        dw      EXIT                    // ; immediate
1267+ 76A1
1268+ 76A1              //  ______________________________________________________________________
1269+ 76A1              //
1270+ 76A1              // literal      n --      ( compile time )
1271+ 76A1                              Colon_Def LITERAL,  "LITERAL", is_immediate
1271+ 76A1             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1271+ 76A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1271+ 76A1             >
1271+ 76A1             >                // dummy db directives used to calculate length of namec
1271+ 76A1 4C 49 54 45 >                db      "LITERAL"
1271+ 76A5 52 41 4C    >
1271+ 76A8             >len_NFA         defl    $ - temp_NFA
1271+ 76A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1271+ 76A1             >
1271+ 76A1 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1271+ 76A2 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1271+ 76A6 52 41 4C    >
1271+ 76A9             >                org     $-1                 // alter last byte of Name just above to set
1271+ 76A8 CC          >                db      {b $} | END_BIT     // msb as name end
1271+ 76A9             >
1271+ 76A9 84 76       >                dw      last_NFA            // Link to previous definition Name
1271+ 76AB             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1271+ 76AB CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1271+ 76AE             >
1271+ 76AE             >
1271+ 76AE             >                endif           ; ok        // for other definitions it "points" the correct handler
1271+ 76AE             >                // Use of "; ok" to suppress "warning[fwdref]"
1271+ 76AE             >
1271+ 76AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1272+ 76AE AA 6D FF 6A                  dw      STATE, FETCH            // state @
1273+ 76B2                                                              // if
1274+ 76B2 1C 64                        dw      ZBRANCH
1275+ 76B4 08 00                        dw      Literal_Endif - $
1276+ 76B6 B2 70 A5 63                  dw          COMPILE, LIT        //      compile lit
1277+ 76BA 6B 6E                        dw          COMMA               //      ,
1278+ 76BC              Literal_Endif:                                  // endif
1279+ 76BC 3F 69                        dw      EXIT                    // ; immediate
1280+ 76BE
1281+ 76BE              //  ______________________________________________________________________
1282+ 76BE              //
1283+ 76BE              // dliteral     n --      ( compile time )
1284+ 76BE                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1284+ 76BE             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1284+ 76BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1284+ 76BE             >
1284+ 76BE             >                // dummy db directives used to calculate length of namec
1284+ 76BE 44 4C 49 54 >                db      "DLITERAL"
1284+ 76C2 45 52 41 4C >
1284+ 76C6             >len_NFA         defl    $ - temp_NFA
1284+ 76C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1284+ 76BE             >
1284+ 76BE C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1284+ 76BF 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1284+ 76C3 45 52 41 4C >
1284+ 76C7             >                org     $-1                 // alter last byte of Name just above to set
1284+ 76C6 CC          >                db      {b $} | END_BIT     // msb as name end
1284+ 76C7             >
1284+ 76C7 A1 76       >                dw      last_NFA            // Link to previous definition Name
1284+ 76C9             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1284+ 76C9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1284+ 76CC             >
1284+ 76CC             >
1284+ 76CC             >                endif           ; ok        // for other definitions it "points" the correct handler
1284+ 76CC             >                // Use of "; ok" to suppress "warning[fwdref]"
1284+ 76CC             >
1284+ 76CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1285+ 76CC AA 6D FF 6A                  dw      STATE, FETCH            // state @
1286+ 76D0                                                              // if
1287+ 76D0 1C 64                        dw      ZBRANCH
1288+ 76D2 08 00                        dw      DLiteral_Endif - $
1289+ 76D4 73 6A                        dw          SWAP                //      swap
1290+ 76D6 AB 76 AB 76                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1291+ 76DA              DLiteral_Endif:                                 // endif
1292+ 76DA 3F 69                        dw      EXIT                    // ; immediate
1293+ 76DC
1294+ 76DC              //  ______________________________________________________________________
1295+ 76DC              //
1296+ 76DC              // [char]       n --      ( compile time )
1297+ 76DC              // inside colon definition, gets first character from next input word
1298+ 76DC              // and compiles it as literal.
1299+ 76DC                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1299+ 76DC             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1299+ 76DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ 76DC             >
1299+ 76DC             >                // dummy db directives used to calculate length of namec
1299+ 76DC 5B 43 48 41 >                db      "[CHAR]"
1299+ 76E0 52 5D       >
1299+ 76E2             >len_NFA         defl    $ - temp_NFA
1299+ 76E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ 76DC             >
1299+ 76DC C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ 76DD 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1299+ 76E1 52 5D       >
1299+ 76E3             >                org     $-1                 // alter last byte of Name just above to set
1299+ 76E2 DD          >                db      {b $} | END_BIT     // msb as name end
1299+ 76E3             >
1299+ 76E3 BE 76       >                dw      last_NFA            // Link to previous definition Name
1299+ 76E5             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 76E5 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1299+ 76E8             >
1299+ 76E8             >
1299+ 76E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 76E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 76E8             >
1299+ 76E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 76E8 25 74 AB 76                  dw      CHAR, LITERAL           // char [compile] literal
1301+ 76EC 3F 69                        dw      EXIT                    // ; immediate
1302+ 76EE
1303+ 76EE              //  ______________________________________________________________________
1304+ 76EE              //
1305+ 76EE              // 0x00         n --      ( compile time )
1306+ 76EE                              Colon_Def NUL_WORD,  $00, is_immediate
1306+ 76EE             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1306+ 76EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1306+ 76EE             >
1306+ 76EE             >                // dummy db directives used to calculate length of namec
1306+ 76EE 00          >                db      $00
1306+ 76EF             >len_NFA         defl    $ - temp_NFA
1306+ 76EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1306+ 76EE             >
1306+ 76EE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1306+ 76EF 00          >                db      $00               // name string in 7-bit ascii, but
1306+ 76F0             >                org     $-1                 // alter last byte of Name just above to set
1306+ 76EF 80          >                db      {b $} | END_BIT     // msb as name end
1306+ 76F0             >
1306+ 76F0 DC 76       >                dw      last_NFA            // Link to previous definition Name
1306+ 76F2             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1306+ 76F2 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1306+ 76F5             >
1306+ 76F5             >
1306+ 76F5             >                endif           ; ok        // for other definitions it "points" the correct handler
1306+ 76F5             >                // Use of "; ok" to suppress "warning[fwdref]"
1306+ 76F5             >
1306+ 76F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1307+ 76F5 57 6D FF 6A                  dw      BLK, FETCH, ONE         // blk @ 1
1307+ 76F9 4C 6C
1308+ 76FB DA 6E                        dw      GREATER                 // > if
1309+ 76FD                                                              // if
1310+ 76FD 1C 64                        dw      ZBRANCH
1311+ 76FF 28 00                        dw      Nul_Else_1 - $
1312+ 7701 4C 6C 57 6D                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1312+ 7705 E0 6A
1313+ 7707 43 6C 61 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
1313+ 770B 0A 6B
1314+ 770D 57 6D FF 6A                  dw          BLK, FETCH          //      blk @
1315+ 7711 97 6C                        dw          BSCR                //      b/scr
1316+ 7713 DD 69                        dw          ONE_SUBTRACT        //      1 -
1317+ 7715 DD 68                        dw          AND_OP              //      and  ( this is tricky )
1318+ 7717 7C 69                        dw          ZEQUAL              //      0=
1319+ 7719                                                              //      if
1320+ 7719 1C 64                        dw          ZBRANCH
1321+ 771B 08 00                        dw          Nul_Endif_2 - $
1322+ 771D 4D 70                        dw              QEXEC           //          ?exec
1323+ 771F 62 69 51 6A                  dw              R_TO, DROP      //          r> drop
1324+ 7723              Nul_Endif_2:                                    //      endif
1325+ 7723 07 64                        dw      BRANCH
1326+ 7725 06 00                        dw      Nul_Endif_1 - $
1327+ 7727              Nul_Else_1:                                     // else
1328+ 7727 62 69 51 6A                  dw          R_TO, DROP          //      r> drop
1329+ 772B              Nul_Endif_1:                                    // endif
1330+ 772B 3F 69                        dw      EXIT                    // ;
1331+ 772D
1332+ 772D              //  ______________________________________________________________________
1333+ 772D              //
1334+ 772D              // ?stack       --
1335+ 772D              // Raise error #1 if stack is empty and you pop it
1336+ 772D              // Raise error #7 if stack is full.
1337+ 772D              // This means SP must always stay between HERE and FFFF
1338+ 772D              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1339+ 772D              // for Next 8K MMU paging this is $DOE8
1340+ 772D                              Colon_Def QSTACK, "?STACK", is_normal
1340+ 772D             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1340+ 772D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1340+ 772D             >
1340+ 772D             >                // dummy db directives used to calculate length of namec
1340+ 772D 3F 53 54 41 >                db      "?STACK"
1340+ 7731 43 4B       >
1340+ 7733             >len_NFA         defl    $ - temp_NFA
1340+ 7733             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1340+ 772D             >
1340+ 772D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1340+ 772E 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1340+ 7732 43 4B       >
1340+ 7734             >                org     $-1                 // alter last byte of Name just above to set
1340+ 7733 CB          >                db      {b $} | END_BIT     // msb as name end
1340+ 7734             >
1340+ 7734 EE 76       >                dw      last_NFA            // Link to previous definition Name
1340+ 7736             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1340+ 7736 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1340+ 7739             >
1340+ 7739             >
1340+ 7739             >                endif           ; ok        // for other definitions it "points" the correct handler
1340+ 7739             >                // Use of "; ok" to suppress "warning[fwdref]"
1340+ 7739             >
1340+ 7739             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1341+ 7739 0F 69                        dw      SPFETCH                 // sp@
1342+ 773B CE 6C FF 6A                  dw      S0, FETCH               // s0 @
1343+ 773F 73 6A B7 6E                  dw      SWAP, ULESS             // swap u<
1344+ 7743 4C 6C 19 70                  dw      ONE, QERROR             // 1 ?error
1345+ 7747 4D 6E                        dw      HERE                    // here
1346+ 7749 CE 6C FF 6A                  dw      S0, FETCH, LESS         // s0 @ <
1346+ 774D C5 6E
1347+ 774F                                                              // if
1348+ 774F 1C 64                        dw      ZBRANCH
1349+ 7751 14 00                        dw      QStack_Endif - $
1350+ 7753 0F 69                        dw          SPFETCH             //      sp@
1351+ 7755 4D 6E A5 63                  dw          HERE, LIT, 128      //      here 128
1351+ 7759 80 00
1352+ 775B B6 69 B7 6E                  dw          PLUS, ULESS         //      plus u<
1353+ 775F A5 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1353+ 7763 19 70
1354+ 7765              QStack_Endif:                                   // endif
1355+ 7765 3F 69                        dw      EXIT                    // ;
1356+ 7767
1357+ 7767
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L1.asm
 112  7767                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
   1+ 7767              //  ______________________________________________________________________
   2+ 7767              //
   3+ 7767              //  L2.asm
   4+ 7767              //
   5+ 7767              //  Level-2
   6+ 7767              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 7767              //  ______________________________________________________________________
   8+ 7767
   9+ 7767
  10+ 7767              //  ______________________________________________________________________
  11+ 7767              //
  12+ 7767              // interpret    --
  13+ 7767              // This is the text interpreter.
  14+ 7767              // It executes or compiles, depending on STATE, the text coming from
  15+ 7767              // current input stream.
  16+ 7767              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 7767              // the word is interpreted as numeric and converted, using current BASE,
  18+ 7767              // leaving on top of stack a single or double precision number, depending
  19+ 7767              // on the presence of a decimal point.
  20+ 7767              // If the number conversion fails, the terminal is notified with ? followed
  21+ 7767              // by the offending word.
  22+ 7767                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 7767             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 7767             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ 7767             >
  22+ 7767             >                // dummy db directives used to calculate length of namec
  22+ 7767 49 4E 54 45 >                db      "INTERPRET"
  22+ 776B 52 50 52 45 >
  22+ 776F 54          >
  22+ 7770             >len_NFA         defl    $ - temp_NFA
  22+ 7770             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ 7767             >
  22+ 7767 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ 7768 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ 776C 52 50 52 45 >
  22+ 7770 54          >
  22+ 7771             >                org     $-1                 // alter last byte of Name just above to set
  22+ 7770 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ 7771             >
  22+ 7771 2D 77       >                dw      last_NFA            // Link to previous definition Name
  22+ 7773             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 7773 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 7776             >
  22+ 7776             >
  22+ 7776             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 7776             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 7776             >
  22+ 7776             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 7776
  24+ 7776              Interpret_Begin:                                        // begin
  25+ 7776 75 75                        dw          LFIND                       //      -find
  26+ 7778                                                                      //      if
  27+ 7778 1C 64                        dw          ZBRANCH
  28+ 777A 1A 00                        dw          Interpret_Else_1 - $
  29+ 777C AA 6D FF 6A                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 7780 C5 6E
  30+ 7782                                                                      //          if
  31+ 7782 1C 64                        dw              ZBRANCH
  32+ 7784 08 00                        dw              Interpret_Else_2 - $
  33+ 7786 D0 70                        dw                  COMPILE_XT          //              compile,
  34+ 7788                                                                      //          else
  35+ 7788 07 64                        dw              BRANCH
  36+ 778A 06 00                        dw              Interpret_Endif_2 - $
  37+ 778C              Interpret_Else_2:
  38+ 778C B8 63 F2 6B                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 7790              Interpret_Endif_2:                                      //          endif
  40+ 7790                                                                      //      else
  41+ 7790 07 64                        dw          BRANCH
  42+ 7792 1A 00                        dw          Interpret_Endif_1 - $
  43+ 7794              Interpret_Else_1:
  44+ 7794 4D 6E 2E 75                  dw              HERE, NUMBER            //          here number
  45+ 7798 BF 6D FF 6A                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 779C D3 69
  46+ 779E                                                                      //          if
  47+ 779E 1C 64                        dw              ZBRANCH
  48+ 77A0 08 00                        dw              Interpret_Else_3 - $
  49+ 77A2              //              dw                  NMODE, FETCH        //              nmode @
  50+ 77A2              //                                                      //              if
  51+ 77A2              //              dw                  ZBRANCH
  52+ 77A2              //              dw                  Interpret_Endif_4 - $
  53+ 77A2              //              dw                      ONE, ZERO       //                  1 0
  54+ 77A2              //              dw                      TWO_DROP        //                  2drop
  55+ 77A2              //Interpret_Endif_4:                                      //              endif
  56+ 77A2 C9 76                        dw                  DLITERAL            //              [compile] dliteral
  57+ 77A4                                                                      //          else
  58+ 77A4 07 64                        dw              BRANCH
  59+ 77A6 06 00                        dw              Interpret_Endif_3 - $
  60+ 77A8              Interpret_Else_3:
  61+ 77A8 51 6A                        dw                  DROP                //              drop
  62+ 77AA AB 76                        dw                  LITERAL             //              [compile]  literal
  63+ 77AC              Interpret_Endif_3:                                      //          endif
  64+ 77AC              Interpret_Endif_1:                                      //      endif
  65+ 77AC 36 77                        dw          QSTACK                      //      ?stack
  66+ 77AE              //              dw          QTERMINAL                   //      ?terminal
  67+ 77AE              //                                                      //      if
  68+ 77AE              //              dw          ZBRANCH
  69+ 77AE              //              dw          Interpret_Endif_5 - $
  70+ 77AE              //              dw              CABORT                  //          (abort)
  71+ 77AE              //Interpret_Endif_5:                                      //      endif
  72+ 77AE 07 64                        dw      BRANCH
  73+ 77B0 C6 FF                        dw      Interpret_Begin - $
  74+ 77B2 3F 69                        dw      EXIT                            // ;
  75+ 77B4
  76+ 77B4              //  ______________________________________________________________________
  77+ 77B4              //
  78+ 77B4              // vocabulary   -- cccc     ( compile time )
  79+ 77B4              // Defining word used in the form   VOCABULARY cccc
  80+ 77B4              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 77B4              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 77B4              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 77B4              // so new definitions can be inserted in that vocabulary.
  84+ 77B4                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 77B4             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 77B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ 77B4             >
  84+ 77B4             >                // dummy db directives used to calculate length of namec
  84+ 77B4 56 4F 43 41 >                db      "VOCABULARY"
  84+ 77B8 42 55 4C 41 >
  84+ 77BC 52 59       >
  84+ 77BE             >len_NFA         defl    $ - temp_NFA
  84+ 77BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ 77B4             >
  84+ 77B4 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ 77B5 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ 77B9 42 55 4C 41 >
  84+ 77BD 52 59       >
  84+ 77BF             >                org     $-1                 // alter last byte of Name just above to set
  84+ 77BE D9          >                db      {b $} | END_BIT     // msb as name end
  84+ 77BF             >
  84+ 77BF 67 77       >                dw      last_NFA            // Link to previous definition Name
  84+ 77C1             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 77C1 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 77C4             >
  84+ 77C4             >
  84+ 77C4             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 77C4             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 77C4             >
  84+ 77C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 77C4
  86+ 77C4 96 71                        dw      CBUILDS
  87+ 77C6
  88+ 77C6 A5 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  88+ 77CA 6B 6E
  89+ 77CC 9E 6D FF 6A                  dw      CURRENT, FETCH          // current @
  90+ 77D0 00 6A 6B 6E                  dw      CELL_MINUS, COMMA       // cell- ,
  91+ 77D4 4D 6E                        dw      HERE                    // here
  92+ 77D6 1F 6D FF 6A                  dw      VOC_LINK, FETCH, COMMA  // voc-link @ ,
  92+ 77DA 6B 6E
  93+ 77DC 1F 6D 0A 6B                  dw      VOC_LINK, STORE         // voc-link !
  94+ 77E0
  95+ 77E0 A7 71                        dw      DOES_TO                 // does>
  96+ 77E2              Vocabulary_Does:
  97+ 77E2 F5 69                        dw      CELL_PLUS               // cell+
  98+ 77E4 90 6D 0A 6B                  dw      CONTEXT, STORE          // context !
  99+ 77E8 3F 69                        dw      EXIT                    // ;
 100+ 77EA
 101+ 77EA              //  ______________________________________________________________________
 102+ 77EA              //
 103+ 77EA              // forth        --
 104+ 77EA              // Name of the first vocabulary.
 105+ 77EA              // It makes FORTH the CONTEXT vocabulary.
 106+ 77EA              // Until new user vocabulary are defined, new colon-definitions becomes
 107+ 77EA              // part of FORTH. It is immediate, so it will executed during the creation
 108+ 77EA              // of a colon definition to be able to select the vocabulary.
 109+ 77EA
 110+ 77EA                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 110+ 77EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 110+ 77EA             >
 110+ 77EA             >                // dummy db directives used to calculate length of namec
 110+ 77EA 46 4F 52 54 >                db      "FORTH"
 110+ 77EE 48          >
 110+ 77EF             >len_NFA         defl    $ - temp_NFA
 110+ 77EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 110+ 77EA             >
 110+ 77EA C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 110+ 77EB 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 110+ 77EF 48          >
 110+ 77F0             >                org     $-1                 // alter last byte of Name just above to set
 110+ 77EF C8          >                db      {b $} | END_BIT     // msb as name end
 110+ 77F0             >
 110+ 77F0 B4 77       >                dw      last_NFA            // Link to previous definition Name
 110+ 77F2             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 110+ 77F2 CD B4 71    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 110+ 77F5             >
 110+ 77F5             >
 110+ 77F5             >                endif           ; ok        // for other definitions it "points" the correct handler
 110+ 77F5             >                // Use of "; ok" to suppress "warning[fwdref]"
 110+ 77F5             >
 110+ 77F5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 111+ 77F5 E2 77                        dw      Vocabulary_Does
 112+ 77F7 81 A0                        db      $81, $A0
 113+ 77F9              Forth_Latest_Ptr:
 114+ 77F9 6C 87                        dw      Here_Dictionary // Fence_Word // Latest_Definition // Here_Dictionary
 115+ 77FB              Voclink_Ptr:
 116+ 77FB 00 00                        dw      0
 117+ 77FD              // Any new vocabulary is structured as follow:
 118+ 77FD              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 119+ 77FD              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 120+ 77FD              // PFA+4 always contains the LATEST word of this VOCABULARY.
 121+ 77FD              //       at creations it points to the null-word of its parent vocabulary
 122+ 77FD              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 123+ 77FD              // PFA+6 is the pointer that builds up the vocabulary linked list.
 124+ 77FD              //       FORTH has 0 here to signal the end of the list and user's variable
 125+ 77FD              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 126+ 77FD              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 127+ 77FD              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 128+ 77FD
 129+ 77FD              //  ______________________________________________________________________
 130+ 77FD              //
 131+ 77FD              // definitions  --
 132+ 77FD              // Used in the form  cccc DEFINITIONS
 133+ 77FD              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 134+ 77FD              // vocabulary cccc.
 135+ 77FD                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 135+ 77FD             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 135+ 77FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 135+ 77FD             >
 135+ 77FD             >                // dummy db directives used to calculate length of namec
 135+ 77FD 44 45 46 49 >                db      "DEFINITIONS"
 135+ 7801 4E 49 54 49 >
 135+ 7805 4F 4E 53    >
 135+ 7808             >len_NFA         defl    $ - temp_NFA
 135+ 7808             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 135+ 77FD             >
 135+ 77FD 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 135+ 77FE 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 135+ 7802 4E 49 54 49 >
 135+ 7806 4F 4E 53    >
 135+ 7809             >                org     $-1                 // alter last byte of Name just above to set
 135+ 7808 D3          >                db      {b $} | END_BIT     // msb as name end
 135+ 7809             >
 135+ 7809 EA 77       >                dw      last_NFA            // Link to previous definition Name
 135+ 780B             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 135+ 780B CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 135+ 780E             >
 135+ 780E             >
 135+ 780E             >                endif           ; ok        // for other definitions it "points" the correct handler
 135+ 780E             >                // Use of "; ok" to suppress "warning[fwdref]"
 135+ 780E             >
 135+ 780E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 136+ 780E 90 6D FF 6A                  dw      CONTEXT, FETCH          // context @
 137+ 7812 9E 6D 0A 6B                  dw      CURRENT, STORE          // current !
 138+ 7816 3F 69                        dw      EXIT                    // ;
 139+ 7818
 140+ 7818              //  ______________________________________________________________________
 141+ 7818              //
 142+ 7818              // (            -- cccc )
 143+ 7818              // the following text is interpreted as a comment until a closing )
 144+ 7818                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 144+ 7818             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 144+ 7818             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7818             >
 144+ 7818             >                // dummy db directives used to calculate length of namec
 144+ 7818 28          >                db      "("
 144+ 7819             >len_NFA         defl    $ - temp_NFA
 144+ 7819             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7818             >
 144+ 7818 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7819 28          >                db      "("               // name string in 7-bit ascii, but
 144+ 781A             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7819 A8          >                db      {b $} | END_BIT     // msb as name end
 144+ 781A             >
 144+ 781A FD 77       >                dw      last_NFA            // Link to previous definition Name
 144+ 781C             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 781C CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 144+ 781F             >
 144+ 781F             >
 144+ 781F             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 781F             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 781F             >
 144+ 781F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 781F A5 63 29 00                  dw      LIT, ")"                // [char] )
 146+ 7823 B9 73 51 6A                  dw      WORD, DROP              // word drop
 147+ 7827 3F 69                        dw      EXIT                    // ;
 148+ 7829
 149+ 7829              //  ______________________________________________________________________
 150+ 7829              //
 151+ 7829              // quit         --
 152+ 7829              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 153+ 7829                              Colon_Def QUIT, "QUIT", is_normal
 153+ 7829             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 153+ 7829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 153+ 7829             >
 153+ 7829             >                // dummy db directives used to calculate length of namec
 153+ 7829 51 55 49 54 >                db      "QUIT"
 153+ 782D             >len_NFA         defl    $ - temp_NFA
 153+ 782D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 153+ 7829             >
 153+ 7829 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 153+ 782A 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 153+ 782E             >                org     $-1                 // alter last byte of Name just above to set
 153+ 782D D4          >                db      {b $} | END_BIT     // msb as name end
 153+ 782E             >
 153+ 782E 18 78       >                dw      last_NFA            // Link to previous definition Name
 153+ 7830             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 153+ 7830 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 153+ 7833             >
 153+ 7833             >
 153+ 7833             >                endif           ; ok        // for other definitions it "points" the correct handler
 153+ 7833             >                // Use of "; ok" to suppress "warning[fwdref]"
 153+ 7833             >
 153+ 7833             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 154+ 7833
 155+ 7833 20 6E FF 6A                  dw      SOURCE_ID, FETCH        // source-id @
 156+ 7837 8D 67 51 6A                  dw      F_CLOSE, DROP           // f_close drop
 157+ 783B 43 6C 20 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 157+ 783F 0A 6B
 158+ 7841 43 6C 57 6D                  dw      ZERO, BLK, STORE        // 0 blk !
 158+ 7845 0A 6B
 159+ 7847 DD 70                        dw      SQUARED_OPEN            // [compile] [
 160+ 7849                                                              // begin
 161+ 7849              Quit_Begin:
 162+ 7849 D7 6C FF 6A                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 162+ 784D 32 69
 163+ 784F FC 65                        dw      CR                      //      cr
 164+ 7851 37 73                        dw      QUERY                   //      query
 165+ 7853              Next_Breakpoint_1:
 166+ 7853 73 77                        dw      INTERPRET               //      interpret
 167+ 7855 AA 6D FF 6A                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 167+ 7859 7C 69
 168+ 785B                                                              //      if
 169+ 785B 1C 64                        dw      ZBRANCH
 170+ 785D 07 00                        dw      Quit_Endif - $
 171+ 785F 09 74                        dw          C_DOT_QUOTE
 172+ 7861 02 6F 6B                     db          2, "ok"             //          .( ok)
 173+ 7864              Quit_Endif:                                     //      else
 174+ 7864                                                              // again
 175+ 7864 07 64                        dw      BRANCH
 176+ 7866 E3 FF                        dw      Quit_Begin - $
 177+ 7868 3F 69                        dw      EXIT                    // ;
 178+ 786A
 179+ 786A              //  ______________________________________________________________________
 180+ 786A              //
 181+ 786A              // abort        --
 182+ 786A                              Colon_Def ABORT, "ABORT", is_normal
 182+ 786A             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 182+ 786A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ 786A             >
 182+ 786A             >                // dummy db directives used to calculate length of namec
 182+ 786A 41 42 4F 52 >                db      "ABORT"
 182+ 786E 54          >
 182+ 786F             >len_NFA         defl    $ - temp_NFA
 182+ 786F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ 786A             >
 182+ 786A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ 786B 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 182+ 786F 54          >
 182+ 7870             >                org     $-1                 // alter last byte of Name just above to set
 182+ 786F D4          >                db      {b $} | END_BIT     // msb as name end
 182+ 7870             >
 182+ 7870 29 78       >                dw      last_NFA            // Link to previous definition Name
 182+ 7872             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 7872 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 182+ 7875             >
 182+ 7875             >
 182+ 7875             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 7875             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 7875             >
 182+ 7875             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 7875 CE 6C FF 6A                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
 183+ 7879 1C 69
 184+ 787B 45 71                        dw      DECIMAL                 // decimal
 185+ 787D F2 77                        dw      FORTH                   // [compile] forth
 186+ 787F 0B 78                        dw      DEFINITIONS             // definitions
 187+ 7881              Autoexec_Ptr:
 188+ 7881 79 85                        dw      AUTOEXEC                // autoexec, patched to noop
 189+ 7883 30 78                        dw      QUIT                    // quit
 190+ 7885 3F 69                        dw      EXIT                    // ;
 191+ 7887
 192+ 7887              //  ______________________________________________________________________
 193+ 7887              //
 194+ 7887              // warm         --
 195+ 7887                              Colon_Def WARM, "WARM", is_normal
 195+ 7887             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 195+ 7887             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 195+ 7887             >
 195+ 7887             >                // dummy db directives used to calculate length of namec
 195+ 7887 57 41 52 4D >                db      "WARM"
 195+ 788B             >len_NFA         defl    $ - temp_NFA
 195+ 788B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 195+ 7887             >
 195+ 7887 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 195+ 7888 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 195+ 788C             >                org     $-1                 // alter last byte of Name just above to set
 195+ 788B CD          >                db      {b $} | END_BIT     // msb as name end
 195+ 788C             >
 195+ 788C 6A 78       >                dw      last_NFA            // Link to previous definition Name
 195+ 788E             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 195+ 788E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 195+ 7891             >
 195+ 7891             >
 195+ 7891             >                endif           ; ok        // for other definitions it "points" the correct handler
 195+ 7891             >                // Use of "; ok" to suppress "warning[fwdref]"
 195+ 7891             >
 195+ 7891             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 196+ 7891 1E 7C                        dw      BLK_INIT                // blk-init
 197+ 7893 27 84                        dw      SPLASH                  // splash
 198+ 7895 A5 63 07 00                  dw      LIT, 7, EMIT            // 7 emit
 198+ 7899 32 6F
 199+ 789B 72 78                        dw      ABORT                   // abort
 200+ 789D 3F 69                        dw      EXIT                    // exit
 201+ 789F
 202+ 789F              //  ______________________________________________________________________
 203+ 789F              //
 204+ 789F              // cold         --
 205+ 789F                              Colon_Def COLD, "COLD", is_normal
 205+ 789F             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 205+ 789F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 205+ 789F             >
 205+ 789F             >                // dummy db directives used to calculate length of namec
 205+ 789F 43 4F 4C 44 >                db      "COLD"
 205+ 78A3             >len_NFA         defl    $ - temp_NFA
 205+ 78A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 205+ 789F             >
 205+ 789F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 205+ 78A0 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 205+ 78A4             >                org     $-1                 // alter last byte of Name just above to set
 205+ 78A3 C4          >                db      {b $} | END_BIT     // msb as name end
 205+ 78A4             >
 205+ 78A4 87 78       >                dw      last_NFA            // Link to previous definition Name
 205+ 78A6             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 205+ 78A6 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 205+ 78A9             >
 205+ 78A9             >
 205+ 78A9             >                endif           ; ok        // for other definitions it "points" the correct handler
 205+ 78A9             >                // Use of "; ok" to suppress "warning[fwdref]"
 205+ 78A9             >
 205+ 78A9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 206+ 78A9 A5 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 207+ 78AD A5 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 208+ 78B1 FF 6A                        dw      FETCH                   // @
 209+ 78B3 A5 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 209+ 78B7 B6 69
 210+ 78B9 A5 63 14 00                  dw      LIT, 20                 // 20
 211+ 78BD 48 68                        dw      CMOVE
 212+ 78BF A5 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 213+ 78C3 FF 6A                        dw      FETCH                   // @
 214+ 78C5 A5 63 F9 77                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 215+ 78C9 0A 6B                        dw      STORE                   // !
 216+ 78CB 43 6C 4D 6D                  dw      ZERO, NMODE, STORE      // 0 nmode !
 216+ 78CF 0A 6B
 217+ 78D1 2B 6D FF 6A                  dw      FIRST, FETCH, DUP       // first @ dup
 217+ 78D5 7E 6A
 218+ 78D7 F0 6D 0A 6B                  dw      USE, STORE              // use !
 219+ 78DB FB 6D 0A 6B                  dw      PREV, STORE             // prev !
 220+ 78DF A5 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 220+ 78E3 10 6E 0A 6B
 221+ 78E7              //              dw      LIT, 8
 222+ 78E7              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 223+ 78E7 55 6C 42 6E                  dw      TWO, HP, STORE          // 2 hp !
 223+ 78EB 0A 6B
 224+ 78ED 8E 78        Warm_Start:     dw      WARM
 225+ 78EF A6 78        Cold_Start:     dw      COLD
 226+ 78F1 3F 69                        dw      EXIT
 227+ 78F3
 228+ 78F3              //  ______________________________________________________________________
 229+ 78F3              WarmRoutine:
 230+ 78F3              ColdRoutine:
 231+ 78F3 DD 21 98 63                  ld      ix, Next_Ptr
 232+ 78F7 D9                           exx
 233+ 78F8 E5                           push    hl
 234+ 78F9 D9                           exx
 235+ 78FA
 236+ 78FA ED 73 6E 63                  ld      (SP_Basic), sp
 237+ 78FE ED 7B 78 63                  ld      sp, (S0_origin)
 238+ 7902              //              nop
 239+ 7902 2A 7A 63                     ld      hl, (R0_origin)
 240+ 7905              //              nop
 241+ 7905                              ldrphl
 241+ 7905 22 96 63    >                ld      (RP_Pointer),hl
 242+ 7908 01 ED 78                     ld      bc, Warm_Start
 243+ 790B 38 02                        jr      c, Warm_Skip
 244+ 790D 03                           inc     bc
 245+ 790E 03                           inc     bc
 246+ 790F              Warm_Skip:
 247+ 790F                              next
 247+ 790F DD E9       >                jp      (ix)
 248+ 7911
 249+ 7911              //  ______________________________________________________________________
 250+ 7911              //
 251+ 7911              // basic        --
 252+ 7911                              New_Def BASIC, "BASIC", is_code, is_normal
 252+ 7911             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 252+ 7911             >
 252+ 7911             >                // dummy db directives used to calculate length of namec
 252+ 7911 42 41 53 49 >                db      "BASIC"
 252+ 7915 43          >
 252+ 7916             >len_NFA         defl    $ - temp_NFA
 252+ 7916             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 252+ 7911             >
 252+ 7911 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 252+ 7912 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 252+ 7916 43          >
 252+ 7917             >                org     $-1                 // alter last byte of Name just above to set
 252+ 7916 C3          >                db      {b $} | END_BIT     // msb as name end
 252+ 7917             >
 252+ 7917 9F 78       >                dw      last_NFA            // Link to previous definition Name
 252+ 7919             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 252+ 7919 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 252+ 7919 ~           >
 252+ 7919 ~           >
 252+ 7919             >                endif           ; ok        // for other definitions it "points" the correct handler
 252+ 7919             >                // Use of "; ok" to suppress "warning[fwdref]"
 252+ 7919             >
 252+ 7919             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 253+ 7919 C1                           pop     bc
 254+ 791A 21 00 00                     ld      hl, 0
 255+ 791D 39                           add     hl, sp
 256+ 791E ED 7B 6E 63                  ld      sp, (SP_Basic)
 257+ 7922              //              nop
 258+ 7922 22 6E 63                     ld      (SP_Basic),hl
 259+ 7925 D9                           exx
 260+ 7926 E1                           pop     hl
 261+ 7927 D9                           exx
 262+ 7928 C9                           ret     // to Basic
 263+ 7929
 264+ 7929              //  ______________________________________________________________________
 265+ 7929              //
 266+ 7929              // +-           n1 n2 -- n3
 267+ 7929              // leaves n1 with the sign of n2 as n3.
 268+ 7929                              Colon_Def PLUS_MINUS, "+-", is_normal
 268+ 7929             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 268+ 7929             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ 7929             >
 268+ 7929             >                // dummy db directives used to calculate length of namec
 268+ 7929 2B 2D       >                db      "+-"
 268+ 792B             >len_NFA         defl    $ - temp_NFA
 268+ 792B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ 7929             >
 268+ 7929 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ 792A 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 268+ 792C             >                org     $-1                 // alter last byte of Name just above to set
 268+ 792B AD          >                db      {b $} | END_BIT     // msb as name end
 268+ 792C             >
 268+ 792C 11 79       >                dw      last_NFA            // Link to previous definition Name
 268+ 792E             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 792E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 268+ 7931             >
 268+ 7931             >
 268+ 7931             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 7931             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 7931             >
 268+ 7931             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 7931 96 69                        dw      ZLESS                   // 0<
 270+ 7933                                                              // if
 271+ 7933 1C 64                        dw      ZBRANCH
 272+ 7935 04 00                        dw      Plus_Minus_Endif - $
 273+ 7937 17 6A                        dw          MINUS               //      minus
 274+ 7939              Plus_Minus_Endif:                               // endif
 275+ 7939 3F 69                        dw      EXIT                    // ;
 276+ 793B
 277+ 793B              //  ______________________________________________________________________
 278+ 793B              //
 279+ 793B              // d+-          d1 n -- d2
 280+ 793B              // leaves d1 with the sign of n as d2.
 281+ 793B                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 281+ 793B             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 281+ 793B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 281+ 793B             >
 281+ 793B             >                // dummy db directives used to calculate length of namec
 281+ 793B 44 2B 2D    >                db      "D+-"
 281+ 793E             >len_NFA         defl    $ - temp_NFA
 281+ 793E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 281+ 793B             >
 281+ 793B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 281+ 793C 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 281+ 793F             >                org     $-1                 // alter last byte of Name just above to set
 281+ 793E AD          >                db      {b $} | END_BIT     // msb as name end
 281+ 793F             >
 281+ 793F 29 79       >                dw      last_NFA            // Link to previous definition Name
 281+ 7941             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 281+ 7941 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 281+ 7944             >
 281+ 7944             >
 281+ 7944             >                endif           ; ok        // for other definitions it "points" the correct handler
 281+ 7944             >                // Use of "; ok" to suppress "warning[fwdref]"
 281+ 7944             >
 281+ 7944             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 282+ 7944 96 69                        dw      ZLESS                   // 0<
 283+ 7946                                                              // if
 284+ 7946 1C 64                        dw      ZBRANCH
 285+ 7948 04 00                        dw      DPlus_Minus_Endif - $
 286+ 794A 2B 6A                        dw          DMINUS              //      dminus
 287+ 794C              DPlus_Minus_Endif:                              // endif
 288+ 794C 3F 69                        dw      EXIT                    // ;
 289+ 794E
 290+ 794E              //  ______________________________________________________________________
 291+ 794E              //
 292+ 794E              // abs          n1 -- n2
 293+ 794E                              Colon_Def ABS_OP, "ABS", is_normal
 293+ 794E             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 293+ 794E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 293+ 794E             >
 293+ 794E             >                // dummy db directives used to calculate length of namec
 293+ 794E 41 42 53    >                db      "ABS"
 293+ 7951             >len_NFA         defl    $ - temp_NFA
 293+ 7951             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 293+ 794E             >
 293+ 794E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 293+ 794F 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 293+ 7952             >                org     $-1                 // alter last byte of Name just above to set
 293+ 7951 D3          >                db      {b $} | END_BIT     // msb as name end
 293+ 7952             >
 293+ 7952 3B 79       >                dw      last_NFA            // Link to previous definition Name
 293+ 7954             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 293+ 7954 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 293+ 7957             >
 293+ 7957             >
 293+ 7957             >                endif           ; ok        // for other definitions it "points" the correct handler
 293+ 7957             >                // Use of "; ok" to suppress "warning[fwdref]"
 293+ 7957             >
 293+ 7957             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 294+ 7957 7E 6A                        dw      DUP                     // dup
 295+ 7959 2E 79                        dw      PLUS_MINUS              // +-
 296+ 795B 3F 69                        dw      EXIT                    // ;
 297+ 795D
 298+ 795D              //  ______________________________________________________________________
 299+ 795D              //
 300+ 795D              // dabs         d1 -- d2
 301+ 795D                              Colon_Def DABS, "DABS", is_normal
 301+ 795D             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 301+ 795D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 301+ 795D             >
 301+ 795D             >                // dummy db directives used to calculate length of namec
 301+ 795D 44 41 42 53 >                db      "DABS"
 301+ 7961             >len_NFA         defl    $ - temp_NFA
 301+ 7961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 301+ 795D             >
 301+ 795D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 301+ 795E 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 301+ 7962             >                org     $-1                 // alter last byte of Name just above to set
 301+ 7961 D3          >                db      {b $} | END_BIT     // msb as name end
 301+ 7962             >
 301+ 7962 4E 79       >                dw      last_NFA            // Link to previous definition Name
 301+ 7964             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 301+ 7964 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 301+ 7967             >
 301+ 7967             >
 301+ 7967             >                endif           ; ok        // for other definitions it "points" the correct handler
 301+ 7967             >                // Use of "; ok" to suppress "warning[fwdref]"
 301+ 7967             >
 301+ 7967             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 302+ 7967 7E 6A                        dw      DUP                     // dup
 303+ 7969 41 79                        dw      DPLUS_MINUS             // d+-
 304+ 796B 3F 69                        dw      EXIT                    // ;
 305+ 796D
 306+ 796D              //  ______________________________________________________________________
 307+ 796D              //
 308+ 796D              // m*           n1 n2 -- d
 309+ 796D              // multiply two integer giving a double
 310+ 796D                              Colon_Def MMUL, "M*", is_normal
 310+ 796D             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 310+ 796D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 310+ 796D             >
 310+ 796D             >                // dummy db directives used to calculate length of namec
 310+ 796D 4D 2A       >                db      "M*"
 310+ 796F             >len_NFA         defl    $ - temp_NFA
 310+ 796F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 310+ 796D             >
 310+ 796D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 310+ 796E 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 310+ 7970             >                org     $-1                 // alter last byte of Name just above to set
 310+ 796F AA          >                db      {b $} | END_BIT     // msb as name end
 310+ 7970             >
 310+ 7970 5D 79       >                dw      last_NFA            // Link to previous definition Name
 310+ 7972             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 310+ 7972 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 310+ 7975             >
 310+ 7975             >
 310+ 7975             >                endif           ; ok        // for other definitions it "points" the correct handler
 310+ 7975             >                // Use of "; ok" to suppress "warning[fwdref]"
 310+ 7975             >
 310+ 7975             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 311+ 7975 D3 6A FE 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 311+ 7979 50 69
 312+ 797B 54 79 73 6A                  dw      ABS_OP, SWAP            // abs swap
 313+ 797F 54 79 77 68                  dw      ABS_OP, UM_MUL          // abs um*
 314+ 7983 62 69 41 79                  dw      R_TO, DPLUS_MINUS       // r> d+-
 315+ 7987 3F 69                        dw      EXIT                    // ;
 316+ 7989
 317+ 7989              //  ______________________________________________________________________
 318+ 7989              //
 319+ 7989              // sm/rem       d n -- q r
 320+ 7989              // Symmetric division: divides a double into n giving quotient q and remainder r
 321+ 7989              // the remainder has the sign of d.
 322+ 7989                              Colon_Def SMDIVM, "SM/REM", is_normal
 322+ 7989             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 322+ 7989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7989             >
 322+ 7989             >                // dummy db directives used to calculate length of namec
 322+ 7989 53 4D 2F 52 >                db      "SM/REM"
 322+ 798D 45 4D       >
 322+ 798F             >len_NFA         defl    $ - temp_NFA
 322+ 798F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7989             >
 322+ 7989 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 798A 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 322+ 798E 45 4D       >
 322+ 7990             >                org     $-1                 // alter last byte of Name just above to set
 322+ 798F CD          >                db      {b $} | END_BIT     // msb as name end
 322+ 7990             >
 322+ 7990 6D 79       >                dw      last_NFA            // Link to previous definition Name
 322+ 7992             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7992 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 322+ 7995             >
 322+ 7995             >
 322+ 7995             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7995             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7995             >
 322+ 7995             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7995 43 6A 50 69                  dw      OVER, TO_R, TO_R        // over >r >r
 323+ 7999 50 69
 324+ 799B 64 79 74 69                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 324+ 799F 54 79
 325+ 79A1 A6 68                        dw      UMDIVMOD                // um/mod
 326+ 79A3 62 69                        dw      R_TO                    // r>
 327+ 79A5 74 69 FE 68                  dw      R_OP, XOR_OP            // r xor
 328+ 79A9 2E 79 73 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 329+ 79AD 62 69                        dw      R_TO                    // r>
 330+ 79AF 2E 79 73 6A                  dw      PLUS_MINUS, SWAP        // +- swap
 331+ 79B3 3F 69                        dw      EXIT                    // ;
 332+ 79B5
 333+ 79B5              //  ______________________________________________________________________
 334+ 79B5              //
 335+ 79B5              // fm/mod       d n -- q r
 336+ 79B5              // Floored division: divides a double into n giving quotient q and remainder r
 337+ 79B5              // the remainder has the sign of d.
 338+ 79B5                              Colon_Def FMDIVM, "FM/MOD", is_normal
 338+ 79B5             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 338+ 79B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ 79B5             >
 338+ 79B5             >                // dummy db directives used to calculate length of namec
 338+ 79B5 46 4D 2F 4D >                db      "FM/MOD"
 338+ 79B9 4F 44       >
 338+ 79BB             >len_NFA         defl    $ - temp_NFA
 338+ 79BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ 79B5             >
 338+ 79B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ 79B6 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 338+ 79BA 4F 44       >
 338+ 79BC             >                org     $-1                 // alter last byte of Name just above to set
 338+ 79BB C4          >                db      {b $} | END_BIT     // msb as name end
 338+ 79BC             >
 338+ 79BC 89 79       >                dw      last_NFA            // Link to previous definition Name
 338+ 79BE             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 79BE CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 79C1             >
 338+ 79C1             >
 338+ 79C1             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 79C1             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 79C1             >
 338+ 79C1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 79C1 7E 6A 50 69                  dw      DUP, TO_R               // dup >r
 340+ 79C5 92 79                        dw      SMDIVM
 341+ 79C7 43 6A 7E 6A                  dw      OVER, DUP
 342+ 79CB 7C 69 7C 69                  dw      ZEQUAL, ZEQUAL
 343+ 79CF 73 6A 96 69                  dw      SWAP, ZLESS
 344+ 79D3 74 69 96 69                  dw      R_OP, ZLESS
 345+ 79D7 FE 68 DD 68                  dw      XOR_OP, AND_OP
 346+ 79DB 1C 64                        dw      ZBRANCH
 347+ 79DD 10 00                        dw      Fm_Mod_Else - $
 348+ 79DF DD 69                        dw          ONE_SUBTRACT
 349+ 79E1 73 6A 62 69                  dw          SWAP, R_TO
 350+ 79E5 B6 69 73 6A                  dw          PLUS, SWAP
 351+ 79E9 07 64                        dw      BRANCH
 352+ 79EB 06 00                        dw      Fm_Mod_Endif - $
 353+ 79ED              Fm_Mod_Else:
 354+ 79ED 62 69 51 6A                  dw          R_TO, DROP
 355+ 79F1              Fm_Mod_Endif:
 356+ 79F1 3F 69                        dw      EXIT
 357+ 79F3              //              dw      TWO_DUP                 // 2dup
 358+ 79F3              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 359+ 79F3              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 360+ 79F3              //              dw      UMDIVMOD                // um/mod
 361+ 79F3              //              dw      SWAP                    // swap
 362+ 79F3              //              dw      II, ZLESS               // i'
 363+ 79F3              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 364+ 79F3              //              dw      R_TO                    // r>
 365+ 79F3              //              dw      PLUS_MINUS, SWAP        // +- swap
 366+ 79F3              //              dw      R_OP                    // r@
 367+ 79F3              //              dw      ZLESS                   // i'
 368+ 79F3              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 369+ 79F3              //              dw      R_TO                    // r>
 370+ 79F3              //              dw      PLUS_MINUS              // +- swap
 371+ 79F3              //              dw      EXIT                    // ;
 372+ 79F3
 373+ 79F3              //  ______________________________________________________________________
 374+ 79F3              //
 375+ 79F3              // m/mod        d n -- q r
 376+ 79F3              // multiply two integer giving a double
 377+ 79F3                              Colon_Def MDIVM, "M/MOD", is_normal
 377+ 79F3             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 377+ 79F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 377+ 79F3             >
 377+ 79F3             >                // dummy db directives used to calculate length of namec
 377+ 79F3 4D 2F 4D 4F >                db      "M/MOD"
 377+ 79F7 44          >
 377+ 79F8             >len_NFA         defl    $ - temp_NFA
 377+ 79F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 377+ 79F3             >
 377+ 79F3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 377+ 79F4 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 377+ 79F8 44          >
 377+ 79F9             >                org     $-1                 // alter last byte of Name just above to set
 377+ 79F8 C4          >                db      {b $} | END_BIT     // msb as name end
 377+ 79F9             >
 377+ 79F9 B5 79       >                dw      last_NFA            // Link to previous definition Name
 377+ 79FB             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 377+ 79FB CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 377+ 79FE             >
 377+ 79FE             >
 377+ 79FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 377+ 79FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 377+ 79FE             >
 377+ 79FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 378+ 79FE 92 79                        dw      SMDIVM
 379+ 7A00 3F 69                        dw      EXIT                    // ;
 380+ 7A02
 381+ 7A02              //  ______________________________________________________________________
 382+ 7A02              //
 383+ 7A02              // m/           d n -- q
 384+ 7A02              // multiply two integer giving a double
 385+ 7A02                              Colon_Def MDIV, "M/", is_normal
 385+ 7A02             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 385+ 7A02             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 385+ 7A02             >
 385+ 7A02             >                // dummy db directives used to calculate length of namec
 385+ 7A02 4D 2F       >                db      "M/"
 385+ 7A04             >len_NFA         defl    $ - temp_NFA
 385+ 7A04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 385+ 7A02             >
 385+ 7A02 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 385+ 7A03 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 385+ 7A05             >                org     $-1                 // alter last byte of Name just above to set
 385+ 7A04 AF          >                db      {b $} | END_BIT     // msb as name end
 385+ 7A05             >
 385+ 7A05 F3 79       >                dw      last_NFA            // Link to previous definition Name
 385+ 7A07             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 385+ 7A07 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 385+ 7A0A             >
 385+ 7A0A             >
 385+ 7A0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 385+ 7A0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 385+ 7A0A             >
 385+ 7A0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 386+ 7A0A FB 79 5A 6A                  dw      MDIVM, NIP
 387+ 7A0E 3F 69                        dw      EXIT                    // ;
 388+ 7A10
 389+ 7A10              //  ______________________________________________________________________
 390+ 7A10              //
 391+ 7A10              // *            n1 n2 -- n3
 392+ 7A10              // multiply two integer
 393+ 7A10                              Colon_Def MUL, "*", is_normal
 393+ 7A10             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 393+ 7A10             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 393+ 7A10             >
 393+ 7A10             >                // dummy db directives used to calculate length of namec
 393+ 7A10 2A          >                db      "*"
 393+ 7A11             >len_NFA         defl    $ - temp_NFA
 393+ 7A11             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 393+ 7A10             >
 393+ 7A10 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 393+ 7A11 2A          >                db      "*"               // name string in 7-bit ascii, but
 393+ 7A12             >                org     $-1                 // alter last byte of Name just above to set
 393+ 7A11 AA          >                db      {b $} | END_BIT     // msb as name end
 393+ 7A12             >
 393+ 7A12 02 7A       >                dw      last_NFA            // Link to previous definition Name
 393+ 7A14             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 393+ 7A14 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 393+ 7A17             >
 393+ 7A17             >
 393+ 7A17             >                endif           ; ok        // for other definitions it "points" the correct handler
 393+ 7A17             >                // Use of "; ok" to suppress "warning[fwdref]"
 393+ 7A17             >
 393+ 7A17             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 394+ 7A17 72 79 51 6A                  dw      MMUL, DROP              // m* drop
 395+ 7A1B 3F 69                        dw      EXIT                    // ;
 396+ 7A1D
 397+ 7A1D              //  ______________________________________________________________________
 398+ 7A1D              //
 399+ 7A1D              // /mod         n1 n2 -- n3 n4
 400+ 7A1D              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 401+ 7A1D              // The remainder has the sign of n1
 402+ 7A1D                              Colon_Def DIVMOD, "/MOD", is_normal
 402+ 7A1D             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 402+ 7A1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 402+ 7A1D             >
 402+ 7A1D             >                // dummy db directives used to calculate length of namec
 402+ 7A1D 2F 4D 4F 44 >                db      "/MOD"
 402+ 7A21             >len_NFA         defl    $ - temp_NFA
 402+ 7A21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 402+ 7A1D             >
 402+ 7A1D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 402+ 7A1E 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 402+ 7A22             >                org     $-1                 // alter last byte of Name just above to set
 402+ 7A21 C4          >                db      {b $} | END_BIT     // msb as name end
 402+ 7A22             >
 402+ 7A22 10 7A       >                dw      last_NFA            // Link to previous definition Name
 402+ 7A24             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 402+ 7A24 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 402+ 7A27             >
 402+ 7A27             >
 402+ 7A27             >                endif           ; ok        // for other definitions it "points" the correct handler
 402+ 7A27             >                // Use of "; ok" to suppress "warning[fwdref]"
 402+ 7A27             >
 402+ 7A27             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 403+ 7A27 50 69 90 6E                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 403+ 7A2B 62 69
 404+ 7A2D FB 79                        dw      MDIVM                   // m/mod
 405+ 7A2F 3F 69                        dw      EXIT                    // ;
 406+ 7A31
 407+ 7A31              //  ______________________________________________________________________
 408+ 7A31              //
 409+ 7A31              // /            n1 n2 -- n3
 410+ 7A31              // division
 411+ 7A31                              Colon_Def DIV, "/", is_normal
 411+ 7A31             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 411+ 7A31             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 411+ 7A31             >
 411+ 7A31             >                // dummy db directives used to calculate length of namec
 411+ 7A31 2F          >                db      "/"
 411+ 7A32             >len_NFA         defl    $ - temp_NFA
 411+ 7A32             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 411+ 7A31             >
 411+ 7A31 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 411+ 7A32 2F          >                db      "/"               // name string in 7-bit ascii, but
 411+ 7A33             >                org     $-1                 // alter last byte of Name just above to set
 411+ 7A32 AF          >                db      {b $} | END_BIT     // msb as name end
 411+ 7A33             >
 411+ 7A33 1D 7A       >                dw      last_NFA            // Link to previous definition Name
 411+ 7A35             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 411+ 7A35 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 411+ 7A38             >
 411+ 7A38             >
 411+ 7A38             >                endif           ; ok        // for other definitions it "points" the correct handler
 411+ 7A38             >                // Use of "; ok" to suppress "warning[fwdref]"
 411+ 7A38             >
 411+ 7A38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 412+ 7A38 24 7A 5A 6A                  dw      DIVMOD, NIP             // /mod nip
 413+ 7A3C 3F 69                        dw      EXIT                    // ;
 414+ 7A3E
 415+ 7A3E              //  ______________________________________________________________________
 416+ 7A3E              //
 417+ 7A3E              // mod          n1 n2 -- n3
 418+ 7A3E                              Colon_Def MOD, "MOD", is_normal
 418+ 7A3E             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 418+ 7A3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 418+ 7A3E             >
 418+ 7A3E             >                // dummy db directives used to calculate length of namec
 418+ 7A3E 4D 4F 44    >                db      "MOD"
 418+ 7A41             >len_NFA         defl    $ - temp_NFA
 418+ 7A41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 418+ 7A3E             >
 418+ 7A3E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 418+ 7A3F 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 418+ 7A42             >                org     $-1                 // alter last byte of Name just above to set
 418+ 7A41 C4          >                db      {b $} | END_BIT     // msb as name end
 418+ 7A42             >
 418+ 7A42 31 7A       >                dw      last_NFA            // Link to previous definition Name
 418+ 7A44             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 418+ 7A44 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 418+ 7A47             >
 418+ 7A47             >
 418+ 7A47             >                endif           ; ok        // for other definitions it "points" the correct handler
 418+ 7A47             >                // Use of "; ok" to suppress "warning[fwdref]"
 418+ 7A47             >
 418+ 7A47             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 419+ 7A47 24 7A 51 6A                  dw      DIVMOD, DROP            // /mod drop
 420+ 7A4B 3F 69                        dw      EXIT                    // ;
 421+ 7A4D
 422+ 7A4D              //  ______________________________________________________________________
 423+ 7A4D              //
 424+ 7A4D              // */mod        n1 n2 n3 -- n4 n5
 425+ 7A4D              // leaves the quotient n5 and the remainder n4 of the operation
 426+ 7A4D              // (n1 * n2) / n3. The intermediate passage through a double number
 427+ 7A4D              // avoids loss of precision
 428+ 7A4D                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 428+ 7A4D             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 428+ 7A4D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ 7A4D             >
 428+ 7A4D             >                // dummy db directives used to calculate length of namec
 428+ 7A4D 2A 2F 4D 4F >                db      "*/MOD"
 428+ 7A51 44          >
 428+ 7A52             >len_NFA         defl    $ - temp_NFA
 428+ 7A52             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ 7A4D             >
 428+ 7A4D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ 7A4E 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 428+ 7A52 44          >
 428+ 7A53             >                org     $-1                 // alter last byte of Name just above to set
 428+ 7A52 C4          >                db      {b $} | END_BIT     // msb as name end
 428+ 7A53             >
 428+ 7A53 3E 7A       >                dw      last_NFA            // Link to previous definition Name
 428+ 7A55             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 7A55 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7A58             >
 428+ 7A58             >
 428+ 7A58             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7A58             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7A58             >
 428+ 7A58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7A58 50 69 72 79                  dw      TO_R, MMUL              // >r  m*
 430+ 7A5C 62 69 FB 79                  dw      R_TO, MDIVM             // r>  m/mod
 431+ 7A60 3F 69                        dw      EXIT                    // ;
 432+ 7A62
 433+ 7A62              //  ______________________________________________________________________
 434+ 7A62              //
 435+ 7A62              // */          n1 n2 n3 -- n4
 436+ 7A62              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 437+ 7A62                              Colon_Def MUL_DIV, "*/", is_normal
 437+ 7A62             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 437+ 7A62             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ 7A62             >
 437+ 7A62             >                // dummy db directives used to calculate length of namec
 437+ 7A62 2A 2F       >                db      "*/"
 437+ 7A64             >len_NFA         defl    $ - temp_NFA
 437+ 7A64             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ 7A62             >
 437+ 7A62 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ 7A63 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 437+ 7A65             >                org     $-1                 // alter last byte of Name just above to set
 437+ 7A64 AF          >                db      {b $} | END_BIT     // msb as name end
 437+ 7A65             >
 437+ 7A65 4D 7A       >                dw      last_NFA            // Link to previous definition Name
 437+ 7A67             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 7A67 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 7A6A             >
 437+ 7A6A             >
 437+ 7A6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 7A6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 7A6A             >
 437+ 7A6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 7A6A 55 7A                        dw     MUL_DIV_MOD              // */mod
 439+ 7A6C 5A 6A                        dw     NIP                      // nip
 440+ 7A6E 3F 69                        dw     EXIT                     // ;
 441+ 7A70
 442+ 7A70
 443+ 7A70              //  ______________________________________________________________________
 444+ 7A70              //
 445+ 7A70              // m/mod        ud1 u2 -- u3 ud4
 446+ 7A70              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 447+ 7A70              // All terms are unsigned.
 448+ 7A70              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 449+ 7A70              //              dw      TO_R                    // >r           ( ud1 )
 450+ 7A70              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 451+ 7A70              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 452+ 7A70              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 453+ 7A70              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 454+ 7A70              //              dw      EXIT                    // ;
 455+ 7A70
 456+ 7A70              //  ______________________________________________________________________
 457+ 7A70              //
 458+ 7A70              // (line)       n1 n2 -- a b
 459+ 7A70              // sends the line n1 of block n2 to the disk buffer.
 460+ 7A70              // it returns the address a and ca counter b = C/L meaning a whole line.
 461+ 7A70                              Colon_Def CLINE, "(LINE)", is_normal
 461+ 7A70             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 461+ 7A70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 461+ 7A70             >
 461+ 7A70             >                // dummy db directives used to calculate length of namec
 461+ 7A70 28 4C 49 4E >                db      "(LINE)"
 461+ 7A74 45 29       >
 461+ 7A76             >len_NFA         defl    $ - temp_NFA
 461+ 7A76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 461+ 7A70             >
 461+ 7A70 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 461+ 7A71 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 461+ 7A75 45 29       >
 461+ 7A77             >                org     $-1                 // alter last byte of Name just above to set
 461+ 7A76 A9          >                db      {b $} | END_BIT     // msb as name end
 461+ 7A77             >
 461+ 7A77 62 7A       >                dw      last_NFA            // Link to previous definition Name
 461+ 7A79             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 461+ 7A79 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 461+ 7A7C             >
 461+ 7A7C             >
 461+ 7A7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 461+ 7A7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 461+ 7A7C             >
 461+ 7A7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 462+ 7A7C 50 69                        dw      TO_R                    // >r
 463+ 7A7E F2 6B                        dw      NOOP                    // noop
 464+ 7A80 7D 6C                        dw      CL                      // c/l
 465+ 7A82 8A 6C 55 7A                  dw      BBUF, MUL_DIV_MOD       // */mod
 466+ 7A86 62 69                        dw      R_TO                    // r>
 467+ 7A88 97 6C 14 7A                  dw      BSCR, MUL, PLUS         // b/scr * +
 467+ 7A8C B6 69
 468+ 7A8E 3D 7D                        dw      BLOCK                   // block   ( forward )
 469+ 7A90 B6 69                        dw      PLUS                    // +
 470+ 7A92 F2 6B                        dw      NOOP                    // noop
 471+ 7A94 7D 6C                        dw      CL                      // c/l
 472+ 7A96 3F 69                        dw      EXIT                    // ;
 473+ 7A98
 474+ 7A98              //  ______________________________________________________________________
 475+ 7A98              //
 476+ 7A98              // .line        n1 n2 --
 477+ 7A98              // Sends to output line  n1  of screen n2.
 478+ 7A98                              Colon_Def DOT_LINE, ".LINE", is_normal
 478+ 7A98             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 478+ 7A98             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ 7A98             >
 478+ 7A98             >                // dummy db directives used to calculate length of namec
 478+ 7A98 2E 4C 49 4E >                db      ".LINE"
 478+ 7A9C 45          >
 478+ 7A9D             >len_NFA         defl    $ - temp_NFA
 478+ 7A9D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ 7A98             >
 478+ 7A98 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ 7A99 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 478+ 7A9D 45          >
 478+ 7A9E             >                org     $-1                 // alter last byte of Name just above to set
 478+ 7A9D C5          >                db      {b $} | END_BIT     // msb as name end
 478+ 7A9E             >
 478+ 7A9E 70 7A       >                dw      last_NFA            // Link to previous definition Name
 478+ 7AA0             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7AA0 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7AA3             >
 478+ 7AA3             >
 478+ 7AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7AA3             >
 478+ 7AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7AA3 79 7A 52 72                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 479+ 7AA7 31 72
 480+ 7AA9 3F 69                        dw      EXIT                    // ;
 481+ 7AAB
 482+ 7AAB              //  ______________________________________________________________________
 483+ 7AAB              //
 484+ 7AAB              // message       n1 n2 --
 485+ 7AAB              // prints error message to current channel.
 486+ 7AAB              // if WARNING is 0, prints "MSG#n".
 487+ 7AAB              // if WARNING is 1, prints line n of screen 4.
 488+ 7AAB              // if WARNING is -1, see ERROR
 489+ 7AAB              // value can be negative or beyond block 4.
 490+ 7AAB                              Colon_Def MESSAGE, "MESSAGE", is_normal
 490+ 7AAB             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 490+ 7AAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 490+ 7AAB             >
 490+ 7AAB             >                // dummy db directives used to calculate length of namec
 490+ 7AAB 4D 45 53 53 >                db      "MESSAGE"
 490+ 7AAF 41 47 45    >
 490+ 7AB2             >len_NFA         defl    $ - temp_NFA
 490+ 7AB2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 490+ 7AAB             >
 490+ 7AAB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 490+ 7AAC 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 490+ 7AB0 41 47 45    >
 490+ 7AB3             >                org     $-1                 // alter last byte of Name just above to set
 490+ 7AB2 C5          >                db      {b $} | END_BIT     // msb as name end
 490+ 7AB3             >
 490+ 7AB3 98 7A       >                dw      last_NFA            // Link to previous definition Name
 490+ 7AB5             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 490+ 7AB5 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 490+ 7AB8             >
 490+ 7AB8             >
 490+ 7AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 490+ 7AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 490+ 7AB8             >
 490+ 7AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 491+ 7AB8 FB 6C FF 6A                  dw      WARNING, FETCH          // warning @
 492+ 7ABC                                                              // if
 493+ 7ABC 1C 64                        dw      ZBRANCH
 494+ 7ABE 18 00                        dw      Message_Else - $
 495+ 7AC0 A5 63 04 00                  dw          LIT, 4              //      4
 496+ 7AC4 82 6D FF 6A                  dw          OFFSET, FETCH       //      offset @
 497+ 7AC8 97 6C 35 7A                  dw          BSCR, DIV, SUBTRACT //      b/scr / -
 497+ 7ACC 9D 6E
 498+ 7ACE A0 7A                        dw          DOT_LINE            //      .line
 499+ 7AD0 4F 6F                        dw          SPACE               //      space
 500+ 7AD2                                                              // else
 501+ 7AD2
 502+ 7AD2 07 64                        dw      BRANCH
 503+ 7AD4 0B 00                        dw      Message_ENdif - $
 504+ 7AD6              Message_Else:
 505+ 7AD6 09 74                        dw          C_DOT_QUOTE         //      .( msg#)
 506+ 7AD8 04 6D 73 67                  db          4, "msg#"
 506+ 7ADC 23
 507+ 7ADD 19 83                        dw          DOT                 //      .  ( forward )
 508+ 7ADF              Message_ENdif:                                  // endif
 509+ 7ADF 3F 69                        dw      EXIT                    // ;
 510+ 7AE1
 511+ 7AE1
 512+ 7AE1              //  ______________________________________________________________________
 513+ 7AE1              //
 514+ 7AE1              // device
 515+ 7AE1                              Variable_Def DEVICE,   "DEVICE",   2
 515+ 7AE1             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 515+ 7AE1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 515+ 7AE1             >
 515+ 7AE1             >                // dummy db directives used to calculate length of namec
 515+ 7AE1 44 45 56 49 >                db      "DEVICE"
 515+ 7AE5 43 45       >
 515+ 7AE7             >len_NFA         defl    $ - temp_NFA
 515+ 7AE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 515+ 7AE1             >
 515+ 7AE1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 515+ 7AE2 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 515+ 7AE6 43 45       >
 515+ 7AE8             >                org     $-1                 // alter last byte of Name just above to set
 515+ 7AE7 C5          >                db      {b $} | END_BIT     // msb as name end
 515+ 7AE8             >
 515+ 7AE8 AB 7A       >                dw      last_NFA            // Link to previous definition Name
 515+ 7AEA             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 515+ 7AEA CD 23 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 515+ 7AED             >
 515+ 7AED             >
 515+ 7AED             >                endif           ; ok        // for other definitions it "points" the correct handler
 515+ 7AED             >                // Use of "; ok" to suppress "warning[fwdref]"
 515+ 7AED             >
 515+ 7AED             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 515+ 7AED 02 00       >                dw      2
 516+ 7AEF
 517+ 7AEF              //  ______________________________________________________________________
 518+ 7AEF
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L2.asm
 113  7AEF                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
   1+ 7AEF              //  ______________________________________________________________________
   2+ 7AEF              //
   3+ 7AEF              //  next-opt.asm
   4+ 7AEF              //
   5+ 7AEF              //  ZX Spectrum Next - peculiar definitions
   6+ 7AEF              //  ______________________________________________________________________
   7+ 7AEF
   8+ 7AEF              //  ______________________________________________________________________
   9+ 7AEF              //
  10+ 7AEF              // reg@         n -- b
  11+ 7AEF              // read Next REGister n giving byte b
  12+ 7AEF              //
  13+ 7AEF              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 7AEF              //              dw      LIT, $243B
  15+ 7AEF              //              dw      PSTORE
  16+ 7AEF              //              dw      LIT, $253B
  17+ 7AEF              //              dw      PFETCH
  18+ 7AEF              //              dw      EXIT
  19+ 7AEF                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 7AEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ 7AEF             >
  19+ 7AEF             >                // dummy db directives used to calculate length of namec
  19+ 7AEF 52 45 47 40 >                db      "REG@"
  19+ 7AF3             >len_NFA         defl    $ - temp_NFA
  19+ 7AF3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ 7AEF             >
  19+ 7AEF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ 7AF0 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ 7AF4             >                org     $-1                 // alter last byte of Name just above to set
  19+ 7AF3 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ 7AF4             >
  19+ 7AF4 E1 7A       >                dw      last_NFA            // Link to previous definition Name
  19+ 7AF6             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 7AF6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 7AF6 ~           >
  19+ 7AF6 ~           >
  19+ 7AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 7AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 7AF6             >
  19+ 7AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 7AF6 D9                           exx
  21+ 7AF7 01 3B 24                     ld      bc, $243B
  22+ 7AFA E1                           pop     hl
  23+ 7AFB ED 69                        out     (c), l
  24+ 7AFD 04                           inc     b
  25+ 7AFE ED 68                        in      l, (c)
  26+ 7B00 E5                           push    hl
  27+ 7B01 D9                           exx
  28+ 7B02                              next
  28+ 7B02 DD E9       >                jp      (ix)
  29+ 7B04
  30+ 7B04
  31+ 7B04              //  ______________________________________________________________________
  32+ 7B04              //
  33+ 7B04              // reg!         b n --
  34+ 7B04              // write value b to Next REGister n
  35+ 7B04              //
  36+ 7B04              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 7B04              //              dw      LIT, $243B
  38+ 7B04              //              dw      PSTORE
  39+ 7B04              //              dw      LIT, $253B
  40+ 7B04              //              dw      PSTORE
  41+ 7B04              //              dw      EXIT
  42+ 7B04                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 7B04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ 7B04             >
  42+ 7B04             >                // dummy db directives used to calculate length of namec
  42+ 7B04 52 45 47 21 >                db      "REG!"
  42+ 7B08             >len_NFA         defl    $ - temp_NFA
  42+ 7B08             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ 7B04             >
  42+ 7B04 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ 7B05 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ 7B09             >                org     $-1                 // alter last byte of Name just above to set
  42+ 7B08 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ 7B09             >
  42+ 7B09 EF 7A       >                dw      last_NFA            // Link to previous definition Name
  42+ 7B0B             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 7B0B ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 7B0B ~           >
  42+ 7B0B ~           >
  42+ 7B0B             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 7B0B             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 7B0B             >
  42+ 7B0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 7B0B D9                           exx
  44+ 7B0C 01 3B 24                     ld      bc, $243B
  45+ 7B0F E1                           pop     hl
  46+ 7B10 ED 69                        out     (c), l
  47+ 7B12 04                           inc     b
  48+ 7B13 E1                           pop     hl
  49+ 7B14 ED 69                        out     (c), l
  50+ 7B16 D9                           exx
  51+ 7B17                              next
  51+ 7B17 DD E9       >                jp      (ix)
  52+ 7B19
  53+ 7B19
  54+ 7B19              //  ______________________________________________________________________
  55+ 7B19              //
  56+ 7B19              // mmu7@        -- n
  57+ 7B19              // query current page in MMU7 8K-RAM : 0 and 223
  58+ 7B19
  59+ 7B19                              Colon_Def MMU7_FETCH, "MMU7@", is_normal
  59+ 7B19             >                New_Def  MMU7_FETCH, "MMU7@", Enter_Ptr, is_normal ; ok
  59+ 7B19             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  59+ 7B19             >
  59+ 7B19             >                // dummy db directives used to calculate length of namec
  59+ 7B19 4D 4D 55 37 >                db      "MMU7@"
  59+ 7B1D 40          >
  59+ 7B1E             >len_NFA         defl    $ - temp_NFA
  59+ 7B1E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  59+ 7B19             >
  59+ 7B19 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  59+ 7B1A 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
  59+ 7B1E 40          >
  59+ 7B1F             >                org     $-1                 // alter last byte of Name just above to set
  59+ 7B1E C0          >                db      {b $} | END_BIT     // msb as name end
  59+ 7B1F             >
  59+ 7B1F 04 7B       >                dw      last_NFA            // Link to previous definition Name
  59+ 7B21             >MMU7_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  59+ 7B21 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  59+ 7B24             >
  59+ 7B24             >
  59+ 7B24             >                endif           ; ok        // for other definitions it "points" the correct handler
  59+ 7B24             >                // Use of "; ok" to suppress "warning[fwdref]"
  59+ 7B24             >
  59+ 7B24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  60+ 7B24 A5 63 57 00                  dw      LIT, 87, REG_FETCH
  60+ 7B28 F6 7A
  61+ 7B2A 3F 69                        dw      EXIT
  62+ 7B2C
  63+ 7B2C              //  ______________________________________________________________________
  64+ 7B2C              //
  65+ 7B2C              // mmu7!        n --
  66+ 7B2C              // set MMU7 8K-RAM page to n given between 0 and 223
  67+ 7B2C              // optimized version that uses NEXTREG n,A Z80n op-code.
  68+ 7B2C
  69+ 7B2C                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
  69+ 7B2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ 7B2C             >
  69+ 7B2C             >                // dummy db directives used to calculate length of namec
  69+ 7B2C 4D 4D 55 37 >                db      "MMU7!"
  69+ 7B30 21          >
  69+ 7B31             >len_NFA         defl    $ - temp_NFA
  69+ 7B31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ 7B2C             >
  69+ 7B2C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ 7B2D 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
  69+ 7B31 21          >
  69+ 7B32             >                org     $-1                 // alter last byte of Name just above to set
  69+ 7B31 A1          >                db      {b $} | END_BIT     // msb as name end
  69+ 7B32             >
  69+ 7B32 19 7B       >                dw      last_NFA            // Link to previous definition Name
  69+ 7B34             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 7B34 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 7B34 ~           >
  69+ 7B34 ~           >
  69+ 7B34             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 7B34             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 7B34             >
  69+ 7B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 7B34 E1                           pop     hl
  71+ 7B35 7D                           ld      a, l
  72+ 7B36 ED 92 57                     nextreg 87, a
  73+ 7B39
  74+ 7B39                              next
  74+ 7B39 DD E9       >                jp      (ix)
  75+ 7B3B
  76+ 7B3B              //  ______________________________________________________________________
  77+ 7B3B              //
  78+ 7B3B              // >far         ha -- a n
  79+ 7B3B              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
  80+ 7B3B              // take lower bits of H and L as an offset from E000h
  81+ 7B3B              // then return address  a  between E000h-FFFFh
  82+ 7B3B              // and page number n  between 64-71 (40h-47h)
  83+ 7B3B              // For example, in hex:
  84+ 7B3B              //   0000 >FAR  gives  40.E000
  85+ 7B3B              //   1FFF >FAR  gives  40.FFFF
  86+ 7B3B              //   2000 >FAR  gives  41.E000
  87+ 7B3B              //   3FFF >FAR  gives  41.FFFF
  88+ 7B3B              //   EFFF >FAR  gives  47.EFFF
  89+ 7B3B              //   FFFF >FAR  gives  47.FFFF
  90+ 7B3B              //                New_Def TO_FAR, ">FAR", is_code, is_normal
  91+ 7B3B              //                pop     de
  92+ 7B3B              //                ld      a, d
  93+ 7B3B              //                and     $E0
  94+ 7B3B              //                rlca
  95+ 7B3B              //                rlca
  96+ 7B3B              //                rlca
  97+ 7B3B              //                add     $40
  98+ 7B3B              //                ld      l, a
  99+ 7B3B              //                ld      h, 0
 100+ 7B3B              //                ld      a, d
 101+ 7B3B              //                or      $E0
 102+ 7B3B              //                ld      d, a
 103+ 7B3B              //                push    hl
 104+ 7B3B              //                push    de
 105+ 7B3B              //                next
 106+ 7B3B
 107+ 7B3B              //  ______________________________________________________________________
 108+ 7B3B              //
 109+ 7B3B              // <far         a n  -- ha
 110+ 7B3B              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 111+ 7B3B              // reverse of >FAR: encodes a FAR address compressing
 112+ 7B3B              // to bits 765 of H, lower bits of HL address offset from E000h
 113+ 7B3B              //                New_Def FROM_FAR, "<FAR", is_code, is_normal
 114+ 7B3B              //                pop     de                  // page number in e
 115+ 7B3B              //                pop     hl                  // address in hl
 116+ 7B3B              //                ld      a, e
 117+ 7B3B              //                sub     $40                 // reduced to 0-7
 118+ 7B3B              //                rrca
 119+ 7B3B              //                rrca
 120+ 7B3B              //                rrca
 121+ 7B3B              //                ld      d, a                // save to d bits 765
 122+ 7B3B              //                ld      a, h                // drops
 123+ 7B3B              //                and     $1F
 124+ 7B3B              //                or      d
 125+ 7B3B              //                ld      h, a
 126+ 7B3B              //
 127+ 7B3B              //                psh1
 128+ 7B3B
 129+ 7B3B              //  ______________________________________________________________________
 130+ 7B3B              //
 131+ 7B3B              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
 132+ 7B3B              // NextZXOS call wrapper.
 133+ 7B3B              //  n1 = hl register parameter value
 134+ 7B3B              //  n2 = de register parameter value
 135+ 7B3B              //  n3 = bc register parameter value
 136+ 7B3B              //  n4 =  a register parameter value
 137+ 7B3B              //   a = routine address in ROM 3
 138+ 7B3B              // ----
 139+ 7B3B              //  n5 = hl returned value
 140+ 7B3B              //  n6 = de returned value
 141+ 7B3B              //  n7 = bc returned value
 142+ 7B3B              //  n8 =  a returned value
 143+ 7B3B              //   f
 144+ 7B3B                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
 144+ 7B3B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 144+ 7B3B             >
 144+ 7B3B             >                // dummy db directives used to calculate length of namec
 144+ 7B3B 4D 5F 50 33 >                db      "M_P3DOS"
 144+ 7B3F 44 4F 53    >
 144+ 7B42             >len_NFA         defl    $ - temp_NFA
 144+ 7B42             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 144+ 7B3B             >
 144+ 7B3B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 144+ 7B3C 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
 144+ 7B40 44 4F 53    >
 144+ 7B43             >                org     $-1                 // alter last byte of Name just above to set
 144+ 7B42 D3          >                db      {b $} | END_BIT     // msb as name end
 144+ 7B43             >
 144+ 7B43 2C 7B       >                dw      last_NFA            // Link to previous definition Name
 144+ 7B45             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 144+ 7B45 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 144+ 7B45 ~           >
 144+ 7B45 ~           >
 144+ 7B45             >                endif           ; ok        // for other definitions it "points" the correct handler
 144+ 7B45             >                // Use of "; ok" to suppress "warning[fwdref]"
 144+ 7B45             >
 144+ 7B45             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 145+ 7B45 D1                           pop     de                  // dos call entry address in de
 146+ 7B46 E1                           pop     hl                  // a register
 147+ 7B47 7D                           ld      a, l
 148+ 7B48 D9                           exx
 149+ 7B49 C1                           pop     bc
 150+ 7B4A D1                           pop     de
 151+ 7B4B E1                           pop     hl
 152+ 7B4C D9                           exx
 153+ 7B4D
 154+ 7B4D C5                           push    bc
 155+ 7B4E DD E5                        push    ix
 156+ 7B50
 157+ 7B50              //              ld      (SP_Saved), sp
 158+ 7B50              //              ld      sp, Cold_origin - 5
 159+ 7B50 0E 07                        ld      c, 7                // use 7 RAM Bank
 160+ 7B52
 161+ 7B52 CF                           rst     08
 162+ 7B53 94                           db      $94
 163+ 7B54
 164+ 7B54              //              ld      sp, (SP_Saved)
 165+ 7B54              //              push    ix
 166+ 7B54              //              pop     hl
 167+ 7B54              //              ld      (IX_Echo), hl
 168+ 7B54 DD 22 90 63                  ld      (IX_Echo), ix
 169+ 7B58              //              nop
 170+ 7B58 DD E1                        pop     ix
 171+ 7B5A E3                           ex      (sp), hl            // hl argument and retrieve bc
 172+ 7B5B D5                           push    de
 173+ 7B5C C5                           push    bc
 174+ 7B5D 4D                           ld      c, l
 175+ 7B5E 44                           ld      b, h
 176+ 7B5F
 177+ 7B5F 26 00                        ld      h, 0
 178+ 7B61 6F                           ld      l, a
 179+ 7B62 E5                           push    hl
 180+ 7B63 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 181+ 7B65 23                           inc     hl                  //  0 for OK ; 1 for ko
 182+ 7B66
 183+ 7B66                              psh1
 183+ 7B66 E5          >                push    hl
 183+ 7B67 DD E9       >                jp      (ix)
 184+ 7B69
 185+ 7B69              //  ______________________________________________________________________
 186+ 7B69              //
 187+ 7B69              // blk-fh
 188+ 7B69                              Variable_Def BLK_FH,   "BLK-FH",   1
 188+ 7B69             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 188+ 7B69             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ 7B69             >
 188+ 7B69             >                // dummy db directives used to calculate length of namec
 188+ 7B69 42 4C 4B 2D >                db      "BLK-FH"
 188+ 7B6D 46 48       >
 188+ 7B6F             >len_NFA         defl    $ - temp_NFA
 188+ 7B6F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ 7B69             >
 188+ 7B69 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ 7B6A 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 188+ 7B6E 46 48       >
 188+ 7B70             >                org     $-1                 // alter last byte of Name just above to set
 188+ 7B6F C8          >                db      {b $} | END_BIT     // msb as name end
 188+ 7B70             >
 188+ 7B70 3B 7B       >                dw      last_NFA            // Link to previous definition Name
 188+ 7B72             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 7B72 CD 23 6C    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 188+ 7B75             >
 188+ 7B75             >
 188+ 7B75             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 7B75             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 7B75             >
 188+ 7B75             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 7B75 01 00       >                dw      1
 189+ 7B77
 190+ 7B77                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 190+ 7B77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190+ 7B77             >
 190+ 7B77             >                // dummy db directives used to calculate length of namec
 190+ 7B77 42 4C 4B 2D >                db      "BLK-FNAME"
 190+ 7B7B 46 4E 41 4D >
 190+ 7B7F 45          >
 190+ 7B80             >len_NFA         defl    $ - temp_NFA
 190+ 7B80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190+ 7B77             >
 190+ 7B77 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190+ 7B78 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 190+ 7B7C 46 4E 41 4D >
 190+ 7B80 45          >
 190+ 7B81             >                org     $-1                 // alter last byte of Name just above to set
 190+ 7B80 C5          >                db      {b $} | END_BIT     // msb as name end
 190+ 7B81             >
 190+ 7B81 69 7B       >                dw      last_NFA            // Link to previous definition Name
 190+ 7B83             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 190+ 7B83 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 190+ 7B86             >
 190+ 7B86             >
 190+ 7B86             >                endif           ; ok        // for other definitions it "points" the correct handler
 190+ 7B86             >                // Use of "; ok" to suppress "warning[fwdref]"
 190+ 7B86             >
 190+ 7B86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191+ 7B86 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 191+ 7B8A 6F 63 6B 73
 191+ 7B8E 2D 36 34 2E
 191+ 7B92 62 69 6E 00
 192+ 7B96 00 00 00...                  ds      24
 193+ 7BAE
 194+ 7BAE              //  ______________________________________________________________________
 195+ 7BAE              //
 196+ 7BAE              // blk-seek     n --
 197+ 7BAE              // seek block n  within blocks!.bin  file
 198+ 7BAE                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 198+ 7BAE             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 198+ 7BAE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 198+ 7BAE             >
 198+ 7BAE             >                // dummy db directives used to calculate length of namec
 198+ 7BAE 42 4C 4B 2D >                db      "BLK-SEEK"
 198+ 7BB2 53 45 45 4B >
 198+ 7BB6             >len_NFA         defl    $ - temp_NFA
 198+ 7BB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 198+ 7BAE             >
 198+ 7BAE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 198+ 7BAF 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 198+ 7BB3 53 45 45 4B >
 198+ 7BB7             >                org     $-1                 // alter last byte of Name just above to set
 198+ 7BB6 CB          >                db      {b $} | END_BIT     // msb as name end
 198+ 7BB7             >
 198+ 7BB7 77 7B       >                dw      last_NFA            // Link to previous definition Name
 198+ 7BB9             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 198+ 7BB9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 198+ 7BBC             >
 198+ 7BBC             >
 198+ 7BBC             >                endif           ; ok        // for other definitions it "points" the correct handler
 198+ 7BBC             >                // Use of "; ok" to suppress "warning[fwdref]"
 198+ 7BBC             >
 198+ 7BBC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 199+ 7BBC 8A 6C 72 79                  dw  BBUF, MMUL
 200+ 7BC0 72 7B FF 6A                  dw  BLK_FH, FETCH
 201+ 7BC4 6C 67                        dw  F_SEEK
 202+ 7BC6 A5 63 2D 00                  dw  LIT, $2D, QERROR
 202+ 7BCA 19 70
 203+ 7BCC 3F 69                        dw  EXIT
 204+ 7BCE
 205+ 7BCE              //  ______________________________________________________________________
 206+ 7BCE              //
 207+ 7BCE              // blk-read     n --
 208+ 7BCE              // seek block n  within blocks!.bin  file
 209+ 7BCE                              Colon_Def BLK_READ, "BLK-READ", is_normal
 209+ 7BCE             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 209+ 7BCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 209+ 7BCE             >
 209+ 7BCE             >                // dummy db directives used to calculate length of namec
 209+ 7BCE 42 4C 4B 2D >                db      "BLK-READ"
 209+ 7BD2 52 45 41 44 >
 209+ 7BD6             >len_NFA         defl    $ - temp_NFA
 209+ 7BD6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 209+ 7BCE             >
 209+ 7BCE 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 209+ 7BCF 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 209+ 7BD3 52 45 41 44 >
 209+ 7BD7             >                org     $-1                 // alter last byte of Name just above to set
 209+ 7BD6 C4          >                db      {b $} | END_BIT     // msb as name end
 209+ 7BD7             >
 209+ 7BD7 AE 7B       >                dw      last_NFA            // Link to previous definition Name
 209+ 7BD9             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 209+ 7BD9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 209+ 7BDC             >
 209+ 7BDC             >
 209+ 7BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 209+ 7BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 209+ 7BDC             >
 209+ 7BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 210+ 7BDC B9 7B                        dw  BLK_SEEK
 211+ 7BDE 8A 6C                        dw  BBUF
 212+ 7BE0 72 7B FF 6A                  dw  BLK_FH, FETCH
 213+ 7BE4 D0 67                        dw  F_READ
 214+ 7BE6 A5 63 2E 00                  dw  LIT, $2E, QERROR
 214+ 7BEA 19 70
 215+ 7BEC 51 6A                        dw  DROP
 216+ 7BEE 3F 69                        dw  EXIT
 217+ 7BF0
 218+ 7BF0              //  ______________________________________________________________________
 219+ 7BF0              //
 220+ 7BF0              // blk-write     n --
 221+ 7BF0              // seek block n  within blocks!.bin  file
 222+ 7BF0                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 222+ 7BF0             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 222+ 7BF0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ 7BF0             >
 222+ 7BF0             >                // dummy db directives used to calculate length of namec
 222+ 7BF0 42 4C 4B 2D >                db      "BLK-WRITE"
 222+ 7BF4 57 52 49 54 >
 222+ 7BF8 45          >
 222+ 7BF9             >len_NFA         defl    $ - temp_NFA
 222+ 7BF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ 7BF0             >
 222+ 7BF0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ 7BF1 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 222+ 7BF5 57 52 49 54 >
 222+ 7BF9 45          >
 222+ 7BFA             >                org     $-1                 // alter last byte of Name just above to set
 222+ 7BF9 C5          >                db      {b $} | END_BIT     // msb as name end
 222+ 7BFA             >
 222+ 7BFA CE 7B       >                dw      last_NFA            // Link to previous definition Name
 222+ 7BFC             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 7BFC CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 7BFF             >
 222+ 7BFF             >
 222+ 7BFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 7BFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 7BFF             >
 222+ 7BFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 7BFF B9 7B                        dw  BLK_SEEK
 224+ 7C01 8A 6C                        dw  BBUF
 225+ 7C03 72 7B FF 6A                  dw  BLK_FH, FETCH
 226+ 7C07 ED 67                        dw  F_WRITE
 227+ 7C09 A5 63 2F 00                  dw  LIT, $2F, QERROR
 227+ 7C0D 19 70
 228+ 7C0F 51 6A                        dw  DROP
 229+ 7C11 3F 69                        dw  EXIT
 230+ 7C13
 231+ 7C13              //  ______________________________________________________________________
 232+ 7C13              //
 233+ 7C13              // blk-init     n --
 234+ 7C13              // seek block n  within blocks!.bin  file
 235+ 7C13                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 235+ 7C13             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 235+ 7C13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 235+ 7C13             >
 235+ 7C13             >                // dummy db directives used to calculate length of namec
 235+ 7C13 42 4C 4B 2D >                db      "BLK-INIT"
 235+ 7C17 49 4E 49 54 >
 235+ 7C1B             >len_NFA         defl    $ - temp_NFA
 235+ 7C1B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 235+ 7C13             >
 235+ 7C13 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 235+ 7C14 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 235+ 7C18 49 4E 49 54 >
 235+ 7C1C             >                org     $-1                 // alter last byte of Name just above to set
 235+ 7C1B D4          >                db      {b $} | END_BIT     // msb as name end
 235+ 7C1C             >
 235+ 7C1C F0 7B       >                dw      last_NFA            // Link to previous definition Name
 235+ 7C1E             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 235+ 7C1E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 235+ 7C21             >
 235+ 7C21             >
 235+ 7C21             >                endif           ; ok        // for other definitions it "points" the correct handler
 235+ 7C21             >                // Use of "; ok" to suppress "warning[fwdref]"
 235+ 7C21             >
 235+ 7C21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 236+ 7C21 72 7B FF 6A                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 236+ 7C25 8D 67 51 6A
 237+ 7C29 83 7B D3 69                  dw  BLK_FNAME, ONE_PLUS
 238+ 7C2D 4D 6E 5E 6C                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 238+ 7C31 02 68
 239+ 7C33 A5 63 2C 00                  dw  LIT, $2C, QERROR
 239+ 7C37 19 70
 240+ 7C39 72 7B 0A 6B                  dw  BLK_FH, STORE
 241+ 7C3D 3F 69                        dw  EXIT
 242+ 7C3F
 243+ 7C3F              //  ______________________________________________________________________
 244+ 7C3F              //
 245+ 7C3F              // #sec
 246+ 7C3F              // number of 512-Byte "sectors" available on thie sysstem.
 247+ 7C3F              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 248+ 7C3F
 249+ 7C3F                              Constant_Def NSEC , "#SEC", 32767
 249+ 7C3F             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 249+ 7C3F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 249+ 7C3F             >
 249+ 7C3F             >                // dummy db directives used to calculate length of namec
 249+ 7C3F 23 53 45 43 >                db      "#SEC"
 249+ 7C43             >len_NFA         defl    $ - temp_NFA
 249+ 7C43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 249+ 7C3F             >
 249+ 7C3F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 249+ 7C40 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 249+ 7C44             >                org     $-1                 // alter last byte of Name just above to set
 249+ 7C43 C3          >                db      {b $} | END_BIT     // msb as name end
 249+ 7C44             >
 249+ 7C44 13 7C       >                dw      last_NFA            // Link to previous definition Name
 249+ 7C46             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 249+ 7C46 CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 249+ 7C49             >
 249+ 7C49             >
 249+ 7C49             >                endif           ; ok        // for other definitions it "points" the correct handler
 249+ 7C49             >                // Use of "; ok" to suppress "warning[fwdref]"
 249+ 7C49             >
 249+ 7C49             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 249+ 7C49 FF 7F       >                dw      32767
 250+ 7C4B
 251+ 7C4B              //  ______________________________________________________________________
 252+ 7C4B
 253+ 7C4B
 254+ 7C4B
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/next-opt1.asm
 114  7C4B                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
   1+ 7C4B              //  ______________________________________________________________________
   2+ 7C4B              //
   3+ 7C4B              //  L3.asm
   4+ 7C4B              //
   5+ 7C4B              //  Continuation of L2.asm
   6+ 7C4B              //  I/O Block definitions
   7+ 7C4B              //  ______________________________________________________________________
   8+ 7C4B
   9+ 7C4B
  10+ 7C4B              //  ______________________________________________________________________
  11+ 7C4B              //
  12+ 7C4B              // r/w          a n f --
  13+ 7C4B              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 7C4B                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 7C4B             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 7C4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ 7C4B             >
  14+ 7C4B             >                // dummy db directives used to calculate length of namec
  14+ 7C4B 52 2F 57    >                db      "R/W"
  14+ 7C4E             >len_NFA         defl    $ - temp_NFA
  14+ 7C4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ 7C4B             >
  14+ 7C4B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ 7C4C 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ 7C4F             >                org     $-1                 // alter last byte of Name just above to set
  14+ 7C4E D7          >                db      {b $} | END_BIT     // msb as name end
  14+ 7C4F             >
  14+ 7C4F 3F 7C       >                dw      last_NFA            // Link to previous definition Name
  14+ 7C51             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 7C51 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 7C54             >
  14+ 7C54             >
  14+ 7C54             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 7C54             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 7C54             >
  14+ 7C54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 7C54 50 69                        dw      TO_R                    // >r
  16+ 7C56 DD 69                        dw      ONE_SUBTRACT            // 1-
  17+ 7C58 7E 6A 96 69                  dw      DUP, ZLESS              // dup 0<
  18+ 7C5C 43 6A 46 7C                  dw      OVER, NSEC              // over #sec
  19+ 7C60 DD 69 DA 6E                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 7C64 ED 68                        dw      OR_OP                   // or
  21+ 7C66 A5 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 7C6A 19 70
  22+ 7C6C 62 69                        dw      R_TO                    // r>
  23+ 7C6E                                                              // if
  24+ 7C6E 1C 64                        dw      ZBRANCH
  25+ 7C70 08 00                        dw      Read_Write_Else - $
  26+ 7C72 D9 7B                        dw          BLK_READ            //      blk-read
  27+ 7C74 07 64                        dw      BRANCH
  28+ 7C76 04 00                        dw      Read_Write_Endif - $
  29+ 7C78              Read_Write_Else:                                // else
  30+ 7C78 FC 7B                        dw          BLK_WRITE           //      blk-write
  31+ 7C7A              Read_Write_Endif:                               // endif
  32+ 7C7A 3F 69                        dw      EXIT                    // ;
  33+ 7C7C
  34+ 7C7C
  35+ 7C7C              //  ______________________________________________________________________
  36+ 7C7C              //
  37+ 7C7C              // +buf        a1 -- a2 f
  38+ 7C7C              // advences to next buffer, cyclically rotating along them
  39+ 7C7C                              Colon_Def PBUF, "+BUF", is_normal
  39+ 7C7C             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 7C7C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ 7C7C             >
  39+ 7C7C             >                // dummy db directives used to calculate length of namec
  39+ 7C7C 2B 42 55 46 >                db      "+BUF"
  39+ 7C80             >len_NFA         defl    $ - temp_NFA
  39+ 7C80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ 7C7C             >
  39+ 7C7C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ 7C7D 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ 7C81             >                org     $-1                 // alter last byte of Name just above to set
  39+ 7C80 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ 7C81             >
  39+ 7C81 4B 7C       >                dw      last_NFA            // Link to previous definition Name
  39+ 7C83             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 7C83 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 7C86             >
  39+ 7C86             >
  39+ 7C86             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 7C86             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 7C86             >
  39+ 7C86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 7C86 A5 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 7C8A B6 69
  41+ 7C8C 7E 6A 37 6D                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 7C90 FF 6A
  42+ 7C92 A9 6E                        dw      EQUALS                  // =
  43+ 7C94                                                              // if
  44+ 7C94 1C 64                        dw      ZBRANCH
  45+ 7C96 08 00                        dw      PBuf_Endif - $
  46+ 7C98 51 6A                        dw          DROP                //      drop
  47+ 7C9A 2B 6D FF 6A                  dw          FIRST, FETCH        //      first @
  48+ 7C9E              PBuf_Endif:                                     // endif
  49+ 7C9E 7E 6A FB 6D                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 7CA2 FF 6A
  50+ 7CA4 9D 6E                        dw      SUBTRACT                // -
  51+ 7CA6 3F 69                        dw      EXIT                    // ;
  52+ 7CA8
  53+ 7CA8              //  ______________________________________________________________________
  54+ 7CA8              //
  55+ 7CA8              // update       --
  56+ 7CA8              // mark the last used block to be written to disk
  57+ 7CA8                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7CA8             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7CA8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ 7CA8             >
  57+ 7CA8             >                // dummy db directives used to calculate length of namec
  57+ 7CA8 55 50 44 41 >                db      "UPDATE"
  57+ 7CAC 54 45       >
  57+ 7CAE             >len_NFA         defl    $ - temp_NFA
  57+ 7CAE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ 7CA8             >
  57+ 7CA8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ 7CA9 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ 7CAD 54 45       >
  57+ 7CAF             >                org     $-1                 // alter last byte of Name just above to set
  57+ 7CAE C5          >                db      {b $} | END_BIT     // msb as name end
  57+ 7CAF             >
  57+ 7CAF 7C 7C       >                dw      last_NFA            // Link to previous definition Name
  57+ 7CB1             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7CB1 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7CB4             >
  57+ 7CB4             >
  57+ 7CB4             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7CB4             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7CB4             >
  57+ 7CB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7CB4 FB 6D FF 6A                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7CB8 FF 6A
  59+ 7CBA A5 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7CBE ED 68
  60+ 7CC0 FB 6D FF 6A                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7CC4 0A 6B
  61+ 7CC6 3F 69                        dw      EXIT                    // ;
  62+ 7CC8
  63+ 7CC8
  64+ 7CC8              //  ______________________________________________________________________
  65+ 7CC8              //
  66+ 7CC8              // empty-buffers --
  67+ 7CC8                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7CC8             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7CC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ 7CC8             >
  67+ 7CC8             >                // dummy db directives used to calculate length of namec
  67+ 7CC8 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ 7CCC 59 2D 42 55 >
  67+ 7CD0 46 46 45 52 >
  67+ 7CD4 53          >
  67+ 7CD5             >len_NFA         defl    $ - temp_NFA
  67+ 7CD5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ 7CC8             >
  67+ 7CC8 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ 7CC9 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ 7CCD 59 2D 42 55 >
  67+ 7CD1 46 46 45 52 >
  67+ 7CD5 53          >
  67+ 7CD6             >                org     $-1                 // alter last byte of Name just above to set
  67+ 7CD5 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ 7CD6             >
  67+ 7CD6 A8 7C       >                dw      last_NFA            // Link to previous definition Name
  67+ 7CD8             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7CD8 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7CDB             >
  67+ 7CDB             >
  67+ 7CDB             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7CDB             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7CDB             >
  67+ 7CDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7CDB 2B 6D FF 6A                  dw      FIRST, FETCH            // first @
  69+ 7CDF 37 6D FF 6A                  dw      LIMIT, FETCH            // limit @
  70+ 7CE3 43 6A 9D 6E                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7CE7 6D 73
  71+ 7CE9 3F 69                        dw      EXIT                    // ;
  72+ 7CEB
  73+ 7CEB              //  ______________________________________________________________________
  74+ 7CEB              //
  75+ 7CEB              // buffer       n -- a
  76+ 7CEB              // read block n and gives the address to a buffer
  77+ 7CEB              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7CEB              // disk before reading the block n.
  79+ 7CEB
  80+ 7CEB                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7CEB             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7CEB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ 7CEB             >
  80+ 7CEB             >                // dummy db directives used to calculate length of namec
  80+ 7CEB 42 55 46 46 >                db      "BUFFER"
  80+ 7CEF 45 52       >
  80+ 7CF1             >len_NFA         defl    $ - temp_NFA
  80+ 7CF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ 7CEB             >
  80+ 7CEB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ 7CEC 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ 7CF0 45 52       >
  80+ 7CF2             >                org     $-1                 // alter last byte of Name just above to set
  80+ 7CF1 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ 7CF2             >
  80+ 7CF2 C8 7C       >                dw      last_NFA            // Link to previous definition Name
  80+ 7CF4             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7CF4 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7CF7             >
  80+ 7CF7             >
  80+ 7CF7             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7CF7             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7CF7             >
  80+ 7CF7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7CF7 F0 6D FF 6A                  dw      USE, FETCH              // use @
  82+ 7CFB 7E 6A 50 69                  dw      DUP, TO_R               // dup >r
  83+ 7CFF                                                              // begin
  84+ 7CFF              Buffer_Begin:
  85+ 7CFF 83 7C                        dw          PBUF                //      +buf
  86+ 7D01                                                              // until
  87+ 7D01 1C 64                        dw      ZBRANCH
  88+ 7D03 FC FF                        dw      Buffer_Begin - $
  89+ 7D05 F0 6D 0A 6B                  dw      USE, STORE              // use !
  90+ 7D09 74 69 FF 6A                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7D0D 96 69
  91+ 7D0F                                                              // if
  92+ 7D0F 1C 64                        dw      ZBRANCH
  93+ 7D11 14 00                        dw      Buffer_Endif - $
  94+ 7D13 74 69 F5 69                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7D17 74 69 FF 6A                  dw          R_OP, FETCH         //      r fetch
  96+ 7D1B A5 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7D1F DD 68                        dw          AND_OP              //      and
  98+ 7D21 43 6C 51 7C                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7D25              Buffer_Endif:                                   // endif
 100+ 7D25 74 69 0A 6B                  dw      R_OP, STORE             // r !
 101+ 7D29 74 69 FB 6D                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7D2D 0A 6B
 102+ 7D2F 62 69 F5 69                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7D33 3F 69                        dw      EXIT                    // ;
 104+ 7D35
 105+ 7D35              //  ______________________________________________________________________
 106+ 7D35              //
 107+ 7D35              // block        n -- a
 108+ 7D35              // Leaves the buffer address that contains the block n.
 109+ 7D35              // If the block is not already present, it will be loaded from disk
 110+ 7D35              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7D35              // disk before reading the block n.
 112+ 7D35              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7D35
 114+ 7D35                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7D35             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7D35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ 7D35             >
 114+ 7D35             >                // dummy db directives used to calculate length of namec
 114+ 7D35 42 4C 4F 43 >                db      "BLOCK"
 114+ 7D39 4B          >
 114+ 7D3A             >len_NFA         defl    $ - temp_NFA
 114+ 7D3A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ 7D35             >
 114+ 7D35 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ 7D36 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ 7D3A 4B          >
 114+ 7D3B             >                org     $-1                 // alter last byte of Name just above to set
 114+ 7D3A CB          >                db      {b $} | END_BIT     // msb as name end
 114+ 7D3B             >
 114+ 7D3B EB 7C       >                dw      last_NFA            // Link to previous definition Name
 114+ 7D3D             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7D3D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7D40             >
 114+ 7D40             >
 114+ 7D40             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7D40             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7D40             >
 114+ 7D40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7D40 82 6D FF 6A                  dw      OFFSET, FETCH           // offset @
 116+ 7D44 B6 69 50 69                  dw      PLUS, TO_R              // + >r
 117+ 7D48 FB 6D FF 6A                  dw      PREV, FETCH             // prev @
 118+ 7D4C 7E 6A FF 6A                  dw      DUP, FETCH              // dup @
 119+ 7D50 74 69 9D 6E                  dw      R_OP, SUBTRACT          // r -
 120+ 7D54 7E 6A B6 69                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 121+ 7D58                                                              // if
 122+ 7D58 1C 64                        dw        ZBRANCH
 123+ 7D5A 32 00                        dw        Block_Endif_1 - $
 124+ 7D5C              Block_Begin:                                    //      begin
 125+ 7D5C 83 7C 7C 69                  dw          PBUF, ZEQUAL        //          +buf 0
 126+ 7D60                                                              //          if
 127+ 7D60 1C 64                        dw          ZBRANCH
 128+ 7D62 12 00                        dw          Block_Endif_2 - $
 129+ 7D64 51 6A                        dw              DROP            //              drop
 130+ 7D66 74 69 F4 7C                  dw              R_OP, BUFFER    //              r buffer
 131+ 7D6A 7E 6A                        dw              DUP             //              dup
 132+ 7D6C 74 69 4C 6C                  dw              R_OP, ONE       //              r 1
 133+ 7D70 51 7C                        dw              READ_WRITE      //              r/w
 134+ 7D72 0B 6A                        dw              TWO_MINUS       //              2-
 135+ 7D74              Block_Endif_2:                                  //          endif
 136+ 7D74 7E 6A FF 6A                  dw          DUP, FETCH, R_OP    //          dup @ r
 136+ 7D78 74 69
 137+ 7D7A 9D 6E 7E 6A                  dw          SUBTRACT, DUP       //          - dup
 138+ 7D7E B6 69 7C 69                  dw          PLUS, ZEQUAL        //          + 0=
 139+ 7D82                                                              //      until
 140+ 7D82 1C 64                        dw        ZBRANCH
 141+ 7D84 D8 FF                        dw        Block_Begin - $
 142+ 7D86 7E 6A FB 6D                  dw        DUP, PREV, STORE      //      dup prev !
 142+ 7D8A 0A 6B
 143+ 7D8C              Block_Endif_1:                                  // endif
 144+ 7D8C 62 69 51 6A                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 144+ 7D90 F5 69
 145+ 7D92 3F 69                        dw      EXIT                    // ;
 146+ 7D94
 147+ 7D94              //  ______________________________________________________________________
 148+ 7D94              //
 149+ 7D94              // #buff        -- n
 150+ 7D94              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 151+ 7D94                              Constant_Def NBUFF,   "#BUFF", 7
 151+ 7D94             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 151+ 7D94             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 151+ 7D94             >
 151+ 7D94             >                // dummy db directives used to calculate length of namec
 151+ 7D94 23 42 55 46 >                db      "#BUFF"
 151+ 7D98 46          >
 151+ 7D99             >len_NFA         defl    $ - temp_NFA
 151+ 7D99             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 151+ 7D94             >
 151+ 7D94 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 151+ 7D95 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 151+ 7D99 46          >
 151+ 7D9A             >                org     $-1                 // alter last byte of Name just above to set
 151+ 7D99 C6          >                db      {b $} | END_BIT     // msb as name end
 151+ 7D9A             >
 151+ 7D9A 35 7D       >                dw      last_NFA            // Link to previous definition Name
 151+ 7D9C             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 151+ 7D9C CD 08 6C    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 151+ 7D9F             >
 151+ 7D9F             >
 151+ 7D9F             >                endif           ; ok        // for other definitions it "points" the correct handler
 151+ 7D9F             >                // Use of "; ok" to suppress "warning[fwdref]"
 151+ 7D9F             >
 151+ 7D9F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 151+ 7D9F 07 00       >                dw      7
 152+ 7DA1
 153+ 7DA1              //  ______________________________________________________________________
 154+ 7DA1              //
 155+ 7DA1              // flush        --
 156+ 7DA1                              Colon_Def FLUSH, "FLUSH", is_normal
 156+ 7DA1             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 156+ 7DA1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ 7DA1             >
 156+ 7DA1             >                // dummy db directives used to calculate length of namec
 156+ 7DA1 46 4C 55 53 >                db      "FLUSH"
 156+ 7DA5 48          >
 156+ 7DA6             >len_NFA         defl    $ - temp_NFA
 156+ 7DA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ 7DA1             >
 156+ 7DA1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ 7DA2 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 156+ 7DA6 48          >
 156+ 7DA7             >                org     $-1                 // alter last byte of Name just above to set
 156+ 7DA6 C8          >                db      {b $} | END_BIT     // msb as name end
 156+ 7DA7             >
 156+ 7DA7 94 7D       >                dw      last_NFA            // Link to previous definition Name
 156+ 7DA9             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7DA9 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7DAC             >
 156+ 7DAC             >
 156+ 7DAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7DAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7DAC             >
 156+ 7DAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7DAC 9C 7D D3 69                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 157+ 7DB0 43 6C
 158+ 7DB2              Flush_Do:                                       // do
 159+ 7DB2 70 64                        dw      C_DO
 160+ 7DB4 43 6C F4 7C                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 160+ 7DB8 51 6A
 161+ 7DBA                                                              // loop
 162+ 7DBA F8 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 163+ 7DBE 72 7B FF 6A                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 164+ 7DC2 9F 67 51 6A                  dw      F_SYNC, DROP            // f_sync drop
 165+ 7DC6 3F 69                        dw      EXIT                    // exit
 166+ 7DC8
 167+ 7DC8              //  ______________________________________________________________________
 168+ 7DC8              //
 169+ 7DC8              // f_getline    a m fh -- n
 170+ 7DC8              // Given an open filehandle read next line (terminated with $0D or $0A)
 171+ 7DC8              // Address a is left for subsequent processing
 172+ 7DC8              // and n as the actual number of byte read, that is the length of line
 173+ 7DC8                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 173+ 7DC8             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 173+ 7DC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ 7DC8             >
 173+ 7DC8             >                // dummy db directives used to calculate length of namec
 173+ 7DC8 46 5F 47 45 >                db      "F_GETLINE"
 173+ 7DCC 54 4C 49 4E >
 173+ 7DD0 45          >
 173+ 7DD1             >len_NFA         defl    $ - temp_NFA
 173+ 7DD1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ 7DC8             >
 173+ 7DC8 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ 7DC9 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 173+ 7DCD 54 4C 49 4E >
 173+ 7DD1 45          >
 173+ 7DD2             >                org     $-1                 // alter last byte of Name just above to set
 173+ 7DD1 C5          >                db      {b $} | END_BIT     // msb as name end
 173+ 7DD2             >
 173+ 7DD2 A1 7D       >                dw      last_NFA            // Link to previous definition Name
 173+ 7DD4             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7DD4 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 7DD7             >
 173+ 7DD7             >
 173+ 7DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 7DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 7DD7             >
 173+ 7DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 7DD7 50 69                        dw      TO_R                    // >r               ( a  m  )     \  fh
 175+ 7DD9 65 6A                        dw      TUCK                    // tuck             ( m a m )
 176+ 7DDB 74 69 B4 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 177+ 7DDF A5 63 2C 00                  dw      LIT, 44, QERROR         // 44 ?error        ( m a m d )
 177+ 7DE3 19 70
 178+ 7DE5
 179+ 7DE5 C3 6A 43 6A                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 180+ 7DE9 D3 69 73 6A                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 181+ 7DED
 182+ 7DED 74 69 D0 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 183+ 7DF1 A5 63 2E 00                  dw      LIT, 46, QERROR         // 46 ?error        ( m d a n )
 183+ 7DF5 19 70
 184+ 7DF7                                                              // if ( at least 1 chr was read )  \  fh
 185+ 7DF7 1C 64                        dw      ZBRANCH
 186+ 7DF9 3C 00                        dw      FGetline_Else - $
 187+ 7DFB A5 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 187+ 7DFF 58 65
 188+ 7E01 51 6A 5A 6A                  dw          DROP, NIP           //      drop nip         ( m d a b )
 189+ 7E05 73 6A                        dw          SWAP                //      drop swap        ( m d b a )
 190+ 7E07 A5 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 190+ 7E0B 58 65
 191+ 7E0D 51 6A 5A 6A                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 192+ 7E11 89 6A E9 6E                  dw          ROT, MIN            //      rot min          ( m d a n )
 193+ 7E15 7E 6A 2B 6E                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 193+ 7E19 0A 6B
 194+ 7E1B 7E 6A 50 69                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 195+ 7E1F C3 6A 62 69                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 196+ 7E23 43 6C C1 69                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 197+ 7E27 62 69 6C 67                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 198+ 7E2B A5 63 2D 00                  dw          LIT, 45, QERROR     //      45 ?error        ( m a n )
 198+ 7E2F 19 70
 199+ 7E31                                                              // else
 200+ 7E31 07 64                        dw      BRANCH
 201+ 7E33 0C 00                        dw      FGetline_Endif - $
 202+ 7E35              FGetline_Else:
 203+ 7E35 62 69                        dw          R_TO                //      r>              ( m d a fh )
 204+ 7E37 C3 6A B7 6A                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 205+ 7E3B 51 6A 43 6C                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 206+ 7E3F              FGetline_Endif:                                 // endif
 207+ 7E3F 50 69 7E 6A                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 207+ 7E43 7E 6A
 208+ 7E45 D3 69 73 6A                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 209+ 7E49 74 69 48 68                  dw      R_OP, CMOVE             // r cmove              ( m a )
 210+ 7E4D D3 6A B6 69                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 211+ 7E51 43 6C 73 6A                  dw      ZERO, SWAP              // 0 swap
 212+ 7E55 00 6A 0A 6B                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 213+ 7E59 74 69 B6 69                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 213+ 7E5D DD 69
 214+ 7E5F 73 6A 74 69                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 214+ 7E63 9D 6E
 215+ 7E65 7E 73                        dw      BLANK                   // blank
 216+ 7E67 62 69                        dw      R_TO                    // r>                   ( n )
 217+ 7E69 3F 69                        dw      EXIT                    // ;
 218+ 7E6B
 219+ 7E6B              //  ______________________________________________________________________
 220+ 7E6B              //
 221+ 7E6B              // f_include    fh --
 222+ 7E6B              // Given a filehandle includes the source from file
 223+ 7E6B                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 223+ 7E6B             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 223+ 7E6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ 7E6B             >
 223+ 7E6B             >                // dummy db directives used to calculate length of namec
 223+ 7E6B 46 5F 49 4E >                db      "F_INCLUDE"
 223+ 7E6F 43 4C 55 44 >
 223+ 7E73 45          >
 223+ 7E74             >len_NFA         defl    $ - temp_NFA
 223+ 7E74             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ 7E6B             >
 223+ 7E6B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ 7E6C 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 223+ 7E70 43 4C 55 44 >
 223+ 7E74 45          >
 223+ 7E75             >                org     $-1                 // alter last byte of Name just above to set
 223+ 7E74 C5          >                db      {b $} | END_BIT     // msb as name end
 223+ 7E75             >
 223+ 7E75 C8 7D       >                dw      last_NFA            // Link to previous definition Name
 223+ 7E77             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 7E77 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 223+ 7E7A             >
 223+ 7E7A             >
 223+ 7E7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 7E7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 7E7A             >
 223+ 7E7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 7E7A 57 6D FF 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 224+ 7E7E 50 69
 225+ 7E80 61 6D FF 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 225+ 7E84 50 69
 226+ 7E86 20 6E FF 6A                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 226+ 7E8A 50 69
 227+ 7E8C 74 69                        dw      R_OP                    // r
 228+ 7E8E                                                              // if
 229+ 7E8E 1C 64                        dw      ZBRANCH
 230+ 7E90 20 00                        dw      FInclude_Else_1 - $
 231+ 7E92 74 69 B4 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 232+ 7E96 A5 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 232+ 7E9A 19 70
 233+ 7E9C 61 6D FF 6A                  dw          TO_IN, FETCH        //      >in @ 2-
 234+ 7EA0 0B 6A                        dw          TWO_MINUS
 235+ 7EA2 2B 6E FF 6A                  dw          SPAN, FETCH         //      span @ -
 236+ 7EA6 9D 6E                        dw          SUBTRACT
 237+ 7EA8 90 6E C1 69                  dw          S_TO_D, DPLUS       //      s>d d+
 238+ 7EAC                                                              // else
 239+ 7EAC 07 64                        dw      BRANCH
 240+ 7EAE 06 00                        dw      FInclude_Endif_1 - $
 241+ 7EB0              FInclude_Else_1:
 242+ 7EB0 43 6C 43 6C                  dw          ZERO, ZERO          //      0 0
 243+ 7EB4                                                              // endif
 244+ 7EB4              FInclude_Endif_1:
 245+ 7EB4 50 69 50 69                  dw      TO_R, TO_R              // >r >r
 246+ 7EB8 20 6E 0A 6B                  dw      SOURCE_ID, STORE        // source-id !
 247+ 7EBC              FInclude_Begin:                                 // begin
 248+ 7EBC 4C 6C 3D 7D                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 248+ 7EC0 8A 6C
 249+ 7EC2 D3 6A 7E 73                  dw          TWO_DUP, BLANK      //      2dup blank
 250+ 7EC6 73 6A D3 69                  dw          SWAP, ONE_PLUS      //      swap 1+
 251+ 7ECA 73 6A 00 6A                  dw          SWAP, CELL_MINUS    //      swap cell-
 252+ 7ECE 20 6E FF 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 253+ 7ED2 D4 7D                        dw          F_GETLINE           //      f_getline
 254+ 7ED4                                                              // while
 255+ 7ED4 1C 64                        dw      ZBRANCH
 256+ 7ED6 14 00                        dw      FInclude_Repeat - $
 257+ 7ED8 4C 6C 57 6D                  dw          ONE, BLK, STORE     //      1 blk !
 257+ 7EDC 0A 6B
 258+ 7EDE 43 6C 61 6D                  dw          ZERO, TO_IN, STORE  //      0 >in !
 258+ 7EE2 0A 6B
 259+ 7EE4 73 77                        dw          INTERPRET           //      interpret
 260+ 7EE6 07 64                        dw      BRANCH
 261+ 7EE8 D4 FF                        dw      FInclude_Begin - $
 262+ 7EEA              FInclude_Repeat:                                // repeat
 263+ 7EEA 20 6E FF 6A                  dw      SOURCE_ID, FETCH        // source-id @
 264+ 7EEE 43 6C 20 6E                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 264+ 7EF2 0A 6B
 265+ 7EF4 8D 67                        dw      F_CLOSE                 // f_close
 266+ 7EF6 A5 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 266+ 7EFA 19 70
 267+ 7EFC 62 69 62 69                  dw      R_TO, R_TO, R_TO        // r> r> r>
 267+ 7F00 62 69
 268+ 7F02 7E 6A 20 6E                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 268+ 7F06 0A 6B
 269+ 7F08                                                              // if
 270+ 7F08 1C 64                        dw      ZBRANCH
 271+ 7F0A 12 00                        dw      FInclude_Else_2 - $
 272+ 7F0C 20 6E FF 6A                  dw          SOURCE_ID, FETCH    //      source-id @
 273+ 7F10 6C 67                        dw          F_SEEK              //      f_seek
 274+ 7F12 A5 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 274+ 7F16 19 70
 275+ 7F18                                                              // else
 276+ 7F18 07 64                        dw      BRANCH
 277+ 7F1A 04 00                        dw      FInclude_Endif_2 - $
 278+ 7F1C              FInclude_Else_2:
 279+ 7F1C B7 6A                        dw          TWO_DROP            //      2drop
 280+ 7F1E              FInclude_Endif_2:                               // endif
 281+ 7F1E 62 69 61 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 281+ 7F22 0A 6B
 282+ 7F24 62 69 57 6D                  dw      R_TO, BLK, STORE        // r> blk !
 282+ 7F28 0A 6B
 283+ 7F2A 3F 69                        dw      EXIT                    // ;
 284+ 7F2C
 285+ 7F2C              //  ______________________________________________________________________
 286+ 7F2C              //
 287+ 7F2C              // open<         -- fh
 288+ 7F2C              // Open the following filename and return it file-handle
 289+ 7F2C              // Used in the form OPEN CCCC
 290+ 7F2C                              Colon_Def OPEN_FH, "OPEN<", is_normal
 290+ 7F2C             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 290+ 7F2C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 290+ 7F2C             >
 290+ 7F2C             >                // dummy db directives used to calculate length of namec
 290+ 7F2C 4F 50 45 4E >                db      "OPEN<"
 290+ 7F30 3C          >
 290+ 7F31             >len_NFA         defl    $ - temp_NFA
 290+ 7F31             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 290+ 7F2C             >
 290+ 7F2C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 290+ 7F2D 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 290+ 7F31 3C          >
 290+ 7F32             >                org     $-1                 // alter last byte of Name just above to set
 290+ 7F31 BC          >                db      {b $} | END_BIT     // msb as name end
 290+ 7F32             >
 290+ 7F32 6B 7E       >                dw      last_NFA            // Link to previous definition Name
 290+ 7F34             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 290+ 7F34 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 290+ 7F37             >
 290+ 7F37             >
 290+ 7F37             >                endif           ; ok        // for other definitions it "points" the correct handler
 290+ 7F37             >                // Use of "; ok" to suppress "warning[fwdref]"
 290+ 7F37             >
 290+ 7F37             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 291+ 7F37 72 6C                        dw      BL
 292+ 7F39 B9 73 CE 71                  dw      WORD, COUNT, OVER       // bl word count over
 292+ 7F3D 43 6A
 293+ 7F3F B6 69 43 6C                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 293+ 7F43 73 6A 0A 6B
 294+ 7F47 A5 73 4C 6C                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 294+ 7F4B 02 68
 295+ 7F4D A5 63 2B 00                  dw      LIT, 43                 // 43
 296+ 7F51 19 70                        dw      QERROR                  // ?error
 297+ 7F53 3F 69                        dw      EXIT                    // ;
 298+ 7F55
 299+ 7F55              //  ______________________________________________________________________
 300+ 7F55              //
 301+ 7F55              // include      -- cccc
 302+ 7F55              // Include the following filename
 303+ 7F55                              Colon_Def INCLUDE, "INCLUDE", is_normal
 303+ 7F55             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 303+ 7F55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ 7F55             >
 303+ 7F55             >                // dummy db directives used to calculate length of namec
 303+ 7F55 49 4E 43 4C >                db      "INCLUDE"
 303+ 7F59 55 44 45    >
 303+ 7F5C             >len_NFA         defl    $ - temp_NFA
 303+ 7F5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ 7F55             >
 303+ 7F55 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ 7F56 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 303+ 7F5A 55 44 45    >
 303+ 7F5D             >                org     $-1                 // alter last byte of Name just above to set
 303+ 7F5C C5          >                db      {b $} | END_BIT     // msb as name end
 303+ 7F5D             >
 303+ 7F5D 2C 7F       >                dw      last_NFA            // Link to previous definition Name
 303+ 7F5F             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7F5F CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7F62             >
 303+ 7F62             >
 303+ 7F62             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7F62             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7F62             >
 303+ 7F62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7F62 34 7F                        dw      OPEN_FH                 // open
 305+ 7F64 7E 6A 77 7E                  dw      DUP, F_INCLUDE          // dup f_include
 306+ 7F68 8D 67 51 6A                  dw      F_CLOSE, DROP           // f_close drop
 307+ 7F6C 3F 69                        dw      EXIT                    // ;
 308+ 7F6E
 309+ 7F6E              //  ______________________________________________________________________
 310+ 7F6E              //
 311+ 7F6E              // needs
 312+ 7F6E              // check for cccc exists in vocabulary
 313+ 7F6E              // if it doesn't then  INCLUDE  inc/cccc.F
 314+ 7F6E
 315+ 7F6E              // temp filename cccc.f as counted string zero-padded
 316+ 7F6E                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 316+ 7F6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ 7F6E             >
 316+ 7F6E             >                // dummy db directives used to calculate length of namec
 316+ 7F6E 4E 45 45 44 >                db      "NEEDS-W"
 316+ 7F72 53 2D 57    >
 316+ 7F75             >len_NFA         defl    $ - temp_NFA
 316+ 7F75             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ 7F6E             >
 316+ 7F6E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ 7F6F 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 316+ 7F73 53 2D 57    >
 316+ 7F76             >                org     $-1                 // alter last byte of Name just above to set
 316+ 7F75 D7          >                db      {b $} | END_BIT     // msb as name end
 316+ 7F76             >
 316+ 7F76 55 7F       >                dw      last_NFA            // Link to previous definition Name
 316+ 7F78             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7F78 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 316+ 7F7B             >
 316+ 7F7B             >
 316+ 7F7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7F7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7F7B             >
 316+ 7F7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7F7B 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 318+ 7F9E              // temp complete path+filename
 319+ 7F9E                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 319+ 7F9E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 319+ 7F9E             >
 319+ 7F9E             >                // dummy db directives used to calculate length of namec
 319+ 7F9E 4E 45 45 44 >                db      "NEEDS-FN"
 319+ 7FA2 53 2D 46 4E >
 319+ 7FA6             >len_NFA         defl    $ - temp_NFA
 319+ 7FA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 319+ 7F9E             >
 319+ 7F9E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 319+ 7F9F 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 319+ 7FA3 53 2D 46 4E >
 319+ 7FA7             >                org     $-1                 // alter last byte of Name just above to set
 319+ 7FA6 CE          >                db      {b $} | END_BIT     // msb as name end
 319+ 7FA7             >
 319+ 7FA7 6E 7F       >                dw      last_NFA            // Link to previous definition Name
 319+ 7FA9             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 319+ 7FA9 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 319+ 7FAC             >
 319+ 7FAC             >
 319+ 7FAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 319+ 7FAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 319+ 7FAC             >
 319+ 7FAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 320+ 7FAC 00 00 00...                  ds      40
 321+ 7FD4              // constant path
 322+ 7FD4                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 322+ 7FD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 322+ 7FD4             >
 322+ 7FD4             >                // dummy db directives used to calculate length of namec
 322+ 7FD4 4E 45 45 44 >                db      "NEEDS-INC"
 322+ 7FD8 53 2D 49 4E >
 322+ 7FDC 43          >
 322+ 7FDD             >len_NFA         defl    $ - temp_NFA
 322+ 7FDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 322+ 7FD4             >
 322+ 7FD4 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 322+ 7FD5 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 322+ 7FD9 53 2D 49 4E >
 322+ 7FDD 43          >
 322+ 7FDE             >                org     $-1                 // alter last byte of Name just above to set
 322+ 7FDD C3          >                db      {b $} | END_BIT     // msb as name end
 322+ 7FDE             >
 322+ 7FDE 9E 7F       >                dw      last_NFA            // Link to previous definition Name
 322+ 7FE0             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 322+ 7FE0 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 322+ 7FE3             >
 322+ 7FE3             >
 322+ 7FE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 322+ 7FE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 322+ 7FE3             >
 322+ 7FE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 323+ 7FE3 04 69 6E 63                  db      4, "inc/", 0
 323+ 7FE7 2F 00
 324+ 7FE9                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 324+ 7FE9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 324+ 7FE9             >
 324+ 7FE9             >                // dummy db directives used to calculate length of namec
 324+ 7FE9 4E 45 45 44 >                db      "NEEDS-LIB"
 324+ 7FED 53 2D 4C 49 >
 324+ 7FF1 42          >
 324+ 7FF2             >len_NFA         defl    $ - temp_NFA
 324+ 7FF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 324+ 7FE9             >
 324+ 7FE9 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 324+ 7FEA 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 324+ 7FEE 53 2D 4C 49 >
 324+ 7FF2 42          >
 324+ 7FF3             >                org     $-1                 // alter last byte of Name just above to set
 324+ 7FF2 C2          >                db      {b $} | END_BIT     // msb as name end
 324+ 7FF3             >
 324+ 7FF3 D4 7F       >                dw      last_NFA            // Link to previous definition Name
 324+ 7FF5             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 324+ 7FF5 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 324+ 7FF8             >
 324+ 7FF8             >
 324+ 7FF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 324+ 7FF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 324+ 7FF8             >
 324+ 7FF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 325+ 7FF8 04 6C 69 62                  db      4, "lib/", 0
 325+ 7FFC 2F 00
 326+ 7FFE
 327+ 7FFE              // Concatenate path at a and filename and include it
 328+ 7FFE              // No error is issued if filename doesn't exist.
 329+ 7FFE                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 329+ 7FFE             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 329+ 7FFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 329+ 7FFE             >
 329+ 7FFE             >                // dummy db directives used to calculate length of namec
 329+ 7FFE 4E 45 45 44 >                db      "NEEDS/"
 329+ 8002 53 2F       >
 329+ 8004             >len_NFA         defl    $ - temp_NFA
 329+ 8004             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 329+ 7FFE             >
 329+ 7FFE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 329+ 7FFF 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 329+ 8003 53 2F       >
 329+ 8005             >                org     $-1                 // alter last byte of Name just above to set
 329+ 8004 AF          >                db      {b $} | END_BIT     // msb as name end
 329+ 8005             >
 329+ 8005 E9 7F       >                dw      last_NFA            // Link to previous definition Name
 329+ 8007             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 329+ 8007 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 329+ 800A             >
 329+ 800A             >
 329+ 800A             >                endif           ; ok        // for other definitions it "points" the correct handler
 329+ 800A             >                // Use of "; ok" to suppress "warning[fwdref]"
 329+ 800A             >
 329+ 800A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 330+ 800A CE 71 65 6A                  dw      COUNT, TUCK             // n a n
 331+ 800E A9 7F 73 6A                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 331+ 8012 48 68
 332+ 8014 A9 7F B6 69                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 333+ 8018 78 7F D3 69                  dw      NEEDS_W, ONE_PLUS, SWAP
 333+ 801C 73 6A
 334+ 801E A5 63 23 00                  dw      LIT, 35
 335+ 8022 48 68                        dw      CMOVE
 336+ 8024 A9 7F                        dw      NEEDS_FN
 337+ 8026 A5 73 4C 6C                  dw      PAD, ONE, F_OPEN
 337+ 802A 02 68
 338+ 802C 7C 69                        dw      ZEQUAL
 339+ 802E 1C 64                        dw      ZBRANCH
 340+ 8030 08 00                        dw      Needs_1 - $
 341+ 8032 77 7E                        dw          F_INCLUDE
 342+ 8034 07 64                        dw      BRANCH
 343+ 8036 04 00                        dw      Needs_2 - $
 344+ 8038              Needs_1:
 345+ 8038              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 346+ 8038              //              dw          LIT, 43, MESSAGE
 347+ 8038 51 6A                        dw          DROP
 348+ 803A              Needs_2:
 349+ 803A 3F 69                        dw      EXIT                    // ;
 350+ 803C
 351+ 803C
 352+ 803C                              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 352+ 803C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 352+ 803C             >
 352+ 803C             >                // dummy db directives used to calculate length of namec
 352+ 803C 4E 44 4F 4D >                db      "NDOM"
 352+ 8040             >len_NFA         defl    $ - temp_NFA
 352+ 8040             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 352+ 803C             >
 352+ 803C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 352+ 803D 4E 44 4F 4D >                db      "NDOM"               // name string in 7-bit ascii, but
 352+ 8041             >                org     $-1                 // alter last byte of Name just above to set
 352+ 8040 CD          >                db      {b $} | END_BIT     // msb as name end
 352+ 8041             >
 352+ 8041 FE 7F       >                dw      last_NFA            // Link to previous definition Name
 352+ 8043             >NDOM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 352+ 8043 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 352+ 8046             >
 352+ 8046             >
 352+ 8046             >                endif           ; ok        // for other definitions it "points" the correct handler
 352+ 8046             >                // Use of "; ok" to suppress "warning[fwdref]"
 352+ 8046             >
 352+ 8046             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 353+ 8046              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 354+ 8046 3A 3F 2F 2A                  db ':?/*|\<>"'
 354+ 804A 7C 5C 3C 3E
 354+ 804E 22
 355+ 804F 00                           db 0
 356+ 8050
 357+ 8050                              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 357+ 8050             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ 8050             >
 357+ 8050             >                // dummy db directives used to calculate length of namec
 357+ 8050 4E 43 44 4D >                db      "NCDM"
 357+ 8054             >len_NFA         defl    $ - temp_NFA
 357+ 8054             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ 8050             >
 357+ 8050 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ 8051 4E 43 44 4D >                db      "NCDM"               // name string in 7-bit ascii, but
 357+ 8055             >                org     $-1                 // alter last byte of Name just above to set
 357+ 8054 CD          >                db      {b $} | END_BIT     // msb as name end
 357+ 8055             >
 357+ 8055 3C 80       >                dw      last_NFA            // Link to previous definition Name
 357+ 8057             >NCDM:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 8057 CD 82 76    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 357+ 805A             >
 357+ 805A             >
 357+ 805A             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 805A             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 805A             >
 357+ 805A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 805A              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 359+ 805A 5F 5E 25 26                  db '_^%&$_{}~'
 359+ 805E 24 5F 7B 7D
 359+ 8062 7E
 360+ 8063 00                           db 0
 361+ 8064
 362+ 8064              // Replace illegal character in filename using the map here above
 363+ 8064              // at the moment we need only  "
 364+ 8064                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 364+ 8064             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 364+ 8064             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 364+ 8064             >
 364+ 8064             >                // dummy db directives used to calculate length of namec
 364+ 8064 4D 41 50 2D >                db      "MAP-FN"
 364+ 8068 46 4E       >
 364+ 806A             >len_NFA         defl    $ - temp_NFA
 364+ 806A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 364+ 8064             >
 364+ 8064 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 364+ 8065 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 364+ 8069 46 4E       >
 364+ 806B             >                org     $-1                 // alter last byte of Name just above to set
 364+ 806A CE          >                db      {b $} | END_BIT     // msb as name end
 364+ 806B             >
 364+ 806B 50 80       >                dw      last_NFA            // Link to previous definition Name
 364+ 806D             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 364+ 806D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 364+ 8070             >
 364+ 8070             >
 364+ 8070             >                endif           ; ok        // for other definitions it "points" the correct handler
 364+ 8070             >                // Use of "; ok" to suppress "warning[fwdref]"
 364+ 8070             >
 364+ 8070             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 365+ 8070 CE 71 E0 71                  dw      COUNT, BOUNDS
 366+ 8074 70 64                        dw      C_DO
 367+ 8076              Needs_3:
 368+ 8076 57 80 43 80                  dw          NCDM, NDOM, LIT, 10
 368+ 807A A5 63 0A 00
 369+ 807E 78 64 16 6B                  dw          I, CFETCH
 370+ 8082 90 65                        dw          C_MAP
 371+ 8084 78 64 22 6B                  dw          I, CSTORE
 372+ 8088              Needs_4:
 373+ 8088 F8 63                        dw      C_LOOP
 374+ 808A EC FF                        dw      Needs_3 - $
 375+ 808C 3F 69                        dw      EXIT
 376+ 808E
 377+ 808E
 378+ 808E              // include  "path/cccc.f" if cccc is not defined
 379+ 808E              // filename cccc.f is temporary stored at NEEDS-W
 380+ 808E                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 380+ 808E             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 380+ 808E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ 808E             >
 380+ 808E             >                // dummy db directives used to calculate length of namec
 380+ 808E 4E 45 45 44 >                db      "NEEDS-F"
 380+ 8092 53 2D 46    >
 380+ 8095             >len_NFA         defl    $ - temp_NFA
 380+ 8095             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ 808E             >
 380+ 808E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ 808F 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 380+ 8093 53 2D 46    >
 380+ 8096             >                org     $-1                 // alter last byte of Name just above to set
 380+ 8095 C6          >                db      {b $} | END_BIT     // msb as name end
 380+ 8096             >
 380+ 8096 64 80       >                dw      last_NFA            // Link to previous definition Name
 380+ 8098             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 8098 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 809B             >
 380+ 809B             >
 380+ 809B             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 809B             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 809B             >
 380+ 809B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 809B 75 75                        dw      LFIND
 382+ 809D 1C 64                        dw      ZBRANCH
 383+ 809F 0A 00                        dw      Needs_5 - $
 384+ 80A1
 385+ 80A1 51 6A B7 6A                  dw          DROP, TWO_DROP
 386+ 80A5 07 64                        dw      BRANCH
 387+ 80A7 2C 00                        dw      Needs_6 - $
 388+ 80A9              Needs_5:
 389+ 80A9 78 7F                        dw          NEEDS_W
 390+ 80AB A5 63 23 00                  dw          LIT, 35
 391+ 80AF 6D 73                        dw          ERASE                   // a
 392+ 80B1 4D 6E 16 6B                  dw          HERE, CFETCH, ONE_PLUS  // a n
 392+ 80B5 D3 69
 393+ 80B7 4D 6E 43 6A                  dw          HERE, OVER              // a n here n
 394+ 80BB 78 7F 73 6A                  dw          NEEDS_W, SWAP, CMOVE    // a n
 394+ 80BF 48 68
 395+ 80C1 78 7F 6D 80                  dw          NEEDS_W, NEEDS_CHECK
 396+ 80C5 78 7F B6 69                  dw          NEEDS_W, PLUS           // a a1+1
 397+ 80C9 A5 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 398+ 80CD 73 6A 0A 6B                  dw          SWAP, STORE             // a
 399+ 80D1 07 80                        dw          NEEDS_SLASH
 400+ 80D3              Needs_6:
 401+ 80D3 3F 69                        dw      EXIT
 402+ 80D5
 403+ 80D5
 404+ 80D5              // check for cccc exists in vocabulary
 405+ 80D5              // if it doesn't then  INCLUDE  inc/cccc.F
 406+ 80D5              // search in inc subdirectory
 407+ 80D5                              Colon_Def NEEDS, "NEEDS", is_normal
 407+ 80D5             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 407+ 80D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 407+ 80D5             >
 407+ 80D5             >                // dummy db directives used to calculate length of namec
 407+ 80D5 4E 45 45 44 >                db      "NEEDS"
 407+ 80D9 53          >
 407+ 80DA             >len_NFA         defl    $ - temp_NFA
 407+ 80DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 407+ 80D5             >
 407+ 80D5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 407+ 80D6 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 407+ 80DA 53          >
 407+ 80DB             >                org     $-1                 // alter last byte of Name just above to set
 407+ 80DA D3          >                db      {b $} | END_BIT     // msb as name end
 407+ 80DB             >
 407+ 80DB 8E 80       >                dw      last_NFA            // Link to previous definition Name
 407+ 80DD             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 407+ 80DD CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 407+ 80E0             >
 407+ 80E0             >
 407+ 80E0             >                endif           ; ok        // for other definitions it "points" the correct handler
 407+ 80E0             >                // Use of "; ok" to suppress "warning[fwdref]"
 407+ 80E0             >
 407+ 80E0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 408+ 80E0 61 6D FF 6A                  dw      TO_IN, FETCH
 409+ 80E4 7E 6A                        dw      DUP
 410+ 80E6 E0 7F 98 80                  dw      NEEDS_INC, NEEDS_PATH
 411+ 80EA 61 6D 0A 6B                  dw      TO_IN, STORE
 412+ 80EE F5 7F 98 80                  dw      NEEDS_LIB, NEEDS_PATH
 413+ 80F2 61 6D 0A 6B                  dw      TO_IN, STORE
 414+ 80F6 75 75                        dw      LFIND
 415+ 80F8 1C 64                        dw      ZBRANCH
 416+ 80FA 08 00                        dw      Needs_10 - $
 417+ 80FC B7 6A                        dw          TWO_DROP
 418+ 80FE 07 64                        dw      BRANCH
 419+ 8100 10 00                        dw      Needs_11 - $
 420+ 8102              Needs_10:
 421+ 8102 78 7F CE 71                  dw      NEEDS_W, COUNT, TYPE, SPACE
 421+ 8106 31 72 4F 6F
 422+ 810A A5 63 2B 00                  dw      LIT, 43, MESSAGE
 422+ 810E B5 7A
 423+ 8110              Needs_11:
 424+ 8110 3F 69                        dw      EXIT
 425+ 8112
 426+ 8112
 427+ 8112              //  ______________________________________________________________________
 428+ 8112              //
 429+ 8112              // load+        n --
 430+ 8112                              Colon_Def LOAD_P, "LOAD+", is_normal
 430+ 8112             >                New_Def  LOAD_P, "LOAD+", Enter_Ptr, is_normal ; ok
 430+ 8112             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ 8112             >
 430+ 8112             >                // dummy db directives used to calculate length of namec
 430+ 8112 4C 4F 41 44 >                db      "LOAD+"
 430+ 8116 2B          >
 430+ 8117             >len_NFA         defl    $ - temp_NFA
 430+ 8117             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ 8112             >
 430+ 8112 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ 8113 4C 4F 41 44 >                db      "LOAD+"               // name string in 7-bit ascii, but
 430+ 8117 2B          >
 430+ 8118             >                org     $-1                 // alter last byte of Name just above to set
 430+ 8117 AB          >                db      {b $} | END_BIT     // msb as name end
 430+ 8118             >
 430+ 8118 D5 80       >                dw      last_NFA            // Link to previous definition Name
 430+ 811A             >LOAD_P:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 811A CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 811D             >
 430+ 811D             >
 430+ 811D             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 811D             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 811D             >
 430+ 811D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 811D 57 6D FF 6A                  dw      BLK, FETCH, TO_R        // blk @ >r
 431+ 8121 50 69
 432+ 8123 61 6D FF 6A                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 432+ 8127 50 69
 433+ 8129
 434+ 8129 43 6C 61 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 434+ 812D 0A 6B
 435+ 812F 97 6C 14 7A                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 435+ 8133 57 6D 0A 6B
 436+ 8137 73 77                        dw      INTERPRET               // interpret
 437+ 8139
 438+ 8139 62 69 61 6D                  dw      R_TO, TO_IN, STORE      // r> >in !
 438+ 813D 0A 6B
 439+ 813F 62 69 57 6D                  dw      R_TO, BLK, STORE        // r> blk !
 439+ 8143 0A 6B
 440+ 8145 3F 69                        dw      EXIT                    // ;
 441+ 8147
 442+ 8147              //  ______________________________________________________________________
 443+ 8147              //
 444+ 8147              // -->          --
 445+ 8147                              Colon_Def LOAD_NEXT, "-->", is_immediate
 445+ 8147             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 445+ 8147             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 445+ 8147             >
 445+ 8147             >                // dummy db directives used to calculate length of namec
 445+ 8147 2D 2D 3E    >                db      "-->"
 445+ 814A             >len_NFA         defl    $ - temp_NFA
 445+ 814A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 445+ 8147             >
 445+ 8147 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 445+ 8148 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 445+ 814B             >                org     $-1                 // alter last byte of Name just above to set
 445+ 814A BE          >                db      {b $} | END_BIT     // msb as name end
 445+ 814B             >
 445+ 814B 12 81       >                dw      last_NFA            // Link to previous definition Name
 445+ 814D             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 445+ 814D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 445+ 8150             >
 445+ 8150             >
 445+ 8150             >                endif           ; ok        // for other definitions it "points" the correct handler
 445+ 8150             >                // Use of "; ok" to suppress "warning[fwdref]"
 445+ 8150             >
 445+ 8150             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 446+ 8150 97 70                        dw      QLOADING                // ?loading
 447+ 8152 43 6C 61 6D                  dw      ZERO, TO_IN, STORE      // 0 >in !
 447+ 8156 0A 6B
 448+ 8158 97 6C                        dw      BSCR                    // b/scr
 449+ 815A 57 6D FF 6A                  dw      BLK, FETCH              // blk @
 450+ 815E 43 6A                        dw      OVER                    // over
 451+ 8160 44 7A                        dw      MOD                     // mod
 452+ 8162 9D 6E                        dw      SUBTRACT                // -
 453+ 8164 57 6D E0 6A                  dw      BLK, PLUSSTORE          // +!
 454+ 8168 3F 69                        dw      EXIT                    // ;
 455+ 816A
 456+ 816A              //  ______________________________________________________________________
 457+ 816A              //
 458+ 816A              // '            -- xt
 459+ 816A                              Colon_Def TICK, "'", is_normal
 459+ 816A             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 459+ 816A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 459+ 816A             >
 459+ 816A             >                // dummy db directives used to calculate length of namec
 459+ 816A 27          >                db      "'"
 459+ 816B             >len_NFA         defl    $ - temp_NFA
 459+ 816B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 459+ 816A             >
 459+ 816A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 459+ 816B 27          >                db      "'"               // name string in 7-bit ascii, but
 459+ 816C             >                org     $-1                 // alter last byte of Name just above to set
 459+ 816B A7          >                db      {b $} | END_BIT     // msb as name end
 459+ 816C             >
 459+ 816C 47 81       >                dw      last_NFA            // Link to previous definition Name
 459+ 816E             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 459+ 816E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 459+ 8171             >
 459+ 8171             >
 459+ 8171             >                endif           ; ok        // for other definitions it "points" the correct handler
 459+ 8171             >                // Use of "; ok" to suppress "warning[fwdref]"
 459+ 8171             >
 459+ 8171             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 460+ 8171 75 75                        dw      LFIND                   // -find
 461+ 8173 7C 69                        dw      ZEQUAL                  // 0=
 462+ 8175 43 6C 19 70                  dw      ZERO, QERROR            // 0 ?error
 463+ 8179 51 6A                        dw      DROP                    // drop
 464+ 817B 3F 69                        dw      EXIT                    // ;
 465+ 817D
 466+ 817D              //  ______________________________________________________________________
 467+ 817D              //
 468+ 817D              // forget       -- cccc
 469+ 817D                              Colon_Def FORGET, "FORGET", is_normal
 469+ 817D             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 469+ 817D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 469+ 817D             >
 469+ 817D             >                // dummy db directives used to calculate length of namec
 469+ 817D 46 4F 52 47 >                db      "FORGET"
 469+ 8181 45 54       >
 469+ 8183             >len_NFA         defl    $ - temp_NFA
 469+ 8183             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 469+ 817D             >
 469+ 817D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 469+ 817E 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 469+ 8182 45 54       >
 469+ 8184             >                org     $-1                 // alter last byte of Name just above to set
 469+ 8183 D4          >                db      {b $} | END_BIT     // msb as name end
 469+ 8184             >
 469+ 8184 6A 81       >                dw      last_NFA            // Link to previous definition Name
 469+ 8186             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 469+ 8186 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 469+ 8189             >
 469+ 8189             >
 469+ 8189             >                endif           ; ok        // for other definitions it "points" the correct handler
 469+ 8189             >                // Use of "; ok" to suppress "warning[fwdref]"
 469+ 8189             >
 469+ 8189             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 470+ 8189 9E 6D FF 6A                  dw      CURRENT, FETCH          // current @
 471+ 818D 90 6D FF 6A                  dw      CONTEXT, FETCH          // context @
 472+ 8191 9D 6E A5 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 472+ 8195 17 00 19 70
 473+ 8199 6E 81 E4 6F                  dw      TICK, TO_BODY           // ' >body
 474+ 819D 7E 6A 07 6D                  dw      DUP, FENCE, FETCH       // dup fence @
 474+ 81A1 FF 6A
 475+ 81A3 B7 6E A5 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 475+ 81A7 15 00 19 70
 476+ 81AB 7E 6A B8 6F                  dw      DUP, NFA, DP, STORE     // dup nfa dp !
 476+ 81AF 10 6D 0A 6B
 477+ 81B3 98 6F FF 6A                  dw      LFA, FETCH              // lfa @
 478+ 81B7 90 6D FF 6A                  dw      CONTEXT, FETCH, STORE   // context @ !
 478+ 81BB 0A 6B
 479+ 81BD 3F 69                        dw      EXIT                    // ;
 480+ 81BF
 481+ 81BF              //  ______________________________________________________________________
 482+ 81BF              //
 483+ 81BF              // marker       -- cccc
 484+ 81BF                              Colon_Def MARKER, "MARKER", is_immediate
 484+ 81BF             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 484+ 81BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 484+ 81BF             >
 484+ 81BF             >                // dummy db directives used to calculate length of namec
 484+ 81BF 4D 41 52 4B >                db      "MARKER"
 484+ 81C3 45 52       >
 484+ 81C5             >len_NFA         defl    $ - temp_NFA
 484+ 81C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 484+ 81BF             >
 484+ 81BF C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 484+ 81C0 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 484+ 81C4 45 52       >
 484+ 81C6             >                org     $-1                 // alter last byte of Name just above to set
 484+ 81C5 D2          >                db      {b $} | END_BIT     // msb as name end
 484+ 81C6             >
 484+ 81C6 7D 81       >                dw      last_NFA            // Link to previous definition Name
 484+ 81C8             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 484+ 81C8 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 484+ 81CB             >
 484+ 81CB             >
 484+ 81CB             >                endif           ; ok        // for other definitions it "points" the correct handler
 484+ 81CB             >                // Use of "; ok" to suppress "warning[fwdref]"
 484+ 81CB             >
 484+ 81CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 485+ 81CB 96 71                        dw      CBUILDS
 486+ 81CD 1F 6D FF 6A                  dw      VOC_LINK, FETCH, COMMA
 486+ 81D1 6B 6E
 487+ 81D3 9E 6D FF 6A                  dw      CURRENT, FETCH, COMMA
 487+ 81D7 6B 6E
 488+ 81D9 90 6D FF 6A                  dw      CONTEXT, FETCH, COMMA
 488+ 81DD 6B 6E
 489+ 81DF 87 6F 6B 6E                  dw      LATEST, COMMA
 490+ 81E3 87 6F CD 6F                  dw      LATEST, PFA, LFA, FETCH, COMMA
 490+ 81E7 98 6F FF 6A
 490+ 81EB 6B 6E
 491+ 81ED A7 71                        dw      DOES_TO
 492+ 81EF 7E 6A FF 6A                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 492+ 81F3 1F 6D 0A 6B
 492+ 81F7 F5 69
 493+ 81F9 7E 6A FF 6A                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 493+ 81FD 9E 6D 0A 6B
 493+ 8201 F5 69
 494+ 8203 7E 6A FF 6A                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 494+ 8207 90 6D 0A 6B
 494+ 820B F5 69
 495+ 820D 7E 6A FF 6A                  dw      DUP, FETCH, DP, STORE, CELL_PLUS
 495+ 8211 10 6D 0A 6B
 495+ 8215 F5 69
 496+ 8217 FF 6A 9E 6D                  dw           FETCH, CURRENT, FETCH, STORE
 496+ 821B FF 6A 0A 6B
 497+ 821F 3F 69                        dw      EXIT
 498+ 8221
 499+ 8221              //  ______________________________________________________________________
 500+ 8221              //
 501+ 8221              // spaces       n --
 502+ 8221                              Colon_Def SPACES, "SPACES", is_normal
 502+ 8221             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 502+ 8221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 502+ 8221             >
 502+ 8221             >                // dummy db directives used to calculate length of namec
 502+ 8221 53 50 41 43 >                db      "SPACES"
 502+ 8225 45 53       >
 502+ 8227             >len_NFA         defl    $ - temp_NFA
 502+ 8227             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 502+ 8221             >
 502+ 8221 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 502+ 8222 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 502+ 8226 45 53       >
 502+ 8228             >                org     $-1                 // alter last byte of Name just above to set
 502+ 8227 D3          >                db      {b $} | END_BIT     // msb as name end
 502+ 8228             >
 502+ 8228 BF 81       >                dw      last_NFA            // Link to previous definition Name
 502+ 822A             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 502+ 822A CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 502+ 822D             >
 502+ 822D             >
 502+ 822D             >                endif           ; ok        // for other definitions it "points" the correct handler
 502+ 822D             >                // Use of "; ok" to suppress "warning[fwdref]"
 502+ 822D             >
 502+ 822D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 503+ 822D 43 6C 00 6F                  dw      ZERO, MAX
 504+ 8231 43 6C 45 64                  dw      ZERO, C_Q_DO
 505+ 8235 08 00                        dw      Spaces_Leave - $
 506+ 8237              Spaces_Loop:
 507+ 8237 4F 6F                        dw          SPACE
 508+ 8239 F8 63                        dw      C_LOOP
 509+ 823B FC FF                        dw      Spaces_Loop - $
 510+ 823D              Spaces_Leave:
 511+ 823D 3F 69                        dw      EXIT                    // ;
 512+ 823F
 513+ 823F              //  ______________________________________________________________________
 514+ 823F              //
 515+ 823F              // <#           --
 516+ 823F                              Colon_Def BEGIN_DASH, "<#", is_normal
 516+ 823F             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 516+ 823F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ 823F             >
 516+ 823F             >                // dummy db directives used to calculate length of namec
 516+ 823F 3C 23       >                db      "<#"
 516+ 8241             >len_NFA         defl    $ - temp_NFA
 516+ 8241             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ 823F             >
 516+ 823F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ 8240 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 516+ 8242             >                org     $-1                 // alter last byte of Name just above to set
 516+ 8241 A3          >                db      {b $} | END_BIT     // msb as name end
 516+ 8242             >
 516+ 8242 21 82       >                dw      last_NFA            // Link to previous definition Name
 516+ 8244             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 8244 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 8247             >
 516+ 8247             >
 516+ 8247             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 8247             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 8247             >
 516+ 8247             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 8247 A5 73 E6 6D                  dw      PAD, HLD, STORE
 517+ 824B 0A 6B
 518+ 824D 3F 69                        dw      EXIT
 519+ 824F
 520+ 824F              //  ______________________________________________________________________
 521+ 824F              //
 522+ 824F              // #>           --
 523+ 824F                              Colon_Def DASH_END, "#>", is_normal
 523+ 824F             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 523+ 824F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ 824F             >
 523+ 824F             >                // dummy db directives used to calculate length of namec
 523+ 824F 23 3E       >                db      "#>"
 523+ 8251             >len_NFA         defl    $ - temp_NFA
 523+ 8251             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ 824F             >
 523+ 824F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ 8250 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 523+ 8252             >                org     $-1                 // alter last byte of Name just above to set
 523+ 8251 BE          >                db      {b $} | END_BIT     // msb as name end
 523+ 8252             >
 523+ 8252 3F 82       >                dw      last_NFA            // Link to previous definition Name
 523+ 8254             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 8254 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 8257             >
 523+ 8257             >
 523+ 8257             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 8257             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 8257             >
 523+ 8257             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 8257 B7 6A                        dw      TWO_DROP
 525+ 8259 E6 6D FF 6A                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 525+ 825D A5 73 43 6A
 525+ 8261 9D 6E
 526+ 8263 3F 69                        dw      EXIT
 527+ 8265
 528+ 8265              //  ______________________________________________________________________
 529+ 8265              //
 530+ 8265              // sign         n d -- d
 531+ 8265                              Colon_Def SIGN, "SIGN", is_normal
 531+ 8265             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 531+ 8265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 531+ 8265             >
 531+ 8265             >                // dummy db directives used to calculate length of namec
 531+ 8265 53 49 47 4E >                db      "SIGN"
 531+ 8269             >len_NFA         defl    $ - temp_NFA
 531+ 8269             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 531+ 8265             >
 531+ 8265 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 531+ 8266 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 531+ 826A             >                org     $-1                 // alter last byte of Name just above to set
 531+ 8269 CE          >                db      {b $} | END_BIT     // msb as name end
 531+ 826A             >
 531+ 826A 4F 82       >                dw      last_NFA            // Link to previous definition Name
 531+ 826C             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 531+ 826C CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 531+ 826F             >
 531+ 826F             >
 531+ 826F             >                endif           ; ok        // for other definitions it "points" the correct handler
 531+ 826F             >                // Use of "; ok" to suppress "warning[fwdref]"
 531+ 826F             >
 531+ 826F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 532+ 826F 96 69                        dw      ZLESS
 533+ 8271 1C 64                        dw      ZBRANCH
 534+ 8273 08 00                        dw      Sign_Endif - $
 535+ 8275 A5 63 2D 00                  dw          LIT, 45, HOLD
 535+ 8279 8E 73
 536+ 827B              Sign_Endif:
 537+ 827B 3F 69                        dw      EXIT
 538+ 827D
 539+ 827D              //  ______________________________________________________________________
 540+ 827D              //
 541+ 827D              // #           d1 -- d2
 542+ 827D                              Colon_Def DASH, "#", is_normal
 542+ 827D             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 542+ 827D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 542+ 827D             >
 542+ 827D             >                // dummy db directives used to calculate length of namec
 542+ 827D 23          >                db      "#"
 542+ 827E             >len_NFA         defl    $ - temp_NFA
 542+ 827E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 542+ 827D             >
 542+ 827D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 542+ 827E 23          >                db      "#"               // name string in 7-bit ascii, but
 542+ 827F             >                org     $-1                 // alter last byte of Name just above to set
 542+ 827E A3          >                db      {b $} | END_BIT     // msb as name end
 542+ 827F             >
 542+ 827F 65 82       >                dw      last_NFA            // Link to previous definition Name
 542+ 8281             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 542+ 8281 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 542+ 8284             >
 542+ 8284             >
 542+ 8284             >                endif           ; ok        // for other definitions it "points" the correct handler
 542+ 8284             >                // Use of "; ok" to suppress "warning[fwdref]"
 542+ 8284             >
 542+ 8284             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 543+ 8284 B5 6D FF 6A                  dw      BASE, FETCH
 544+ 8288
 545+ 8288 50 69                        dw      TO_R                    // >r           ( ud1 )
 546+ 828A 43 6C 74 69                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 546+ 828E A6 68
 547+ 8290 62 69 73 6A                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 547+ 8294 50 69
 548+ 8296 A6 68                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 549+ 8298 62 69                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 550+ 829A
 551+ 829A 89 6A                        dw      ROT
 552+ 829C A5 63 09 00                  dw      LIT, 9, OVER, LESS
 552+ 82A0 43 6A C5 6E
 553+ 82A4 1C 64                        dw      ZBRANCH
 554+ 82A6 08 00                        dw      Dash_Endif - $
 555+ 82A8 A5 63 07 00                  dw          LIT, 7, PLUS
 555+ 82AC B6 69
 556+ 82AE              Dash_Endif:
 557+ 82AE
 558+ 82AE A5 63 30 00                  dw      LIT, 48, PLUS, HOLD
 558+ 82B2 B6 69 8E 73
 559+ 82B6 3F 69                        dw      EXIT
 560+ 82B8
 561+ 82B8              //  ______________________________________________________________________
 562+ 82B8              //
 563+ 82B8              // #s           d1 -- d2
 564+ 82B8                              Colon_Def DASHES, "#S", is_normal
 564+ 82B8             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 564+ 82B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 564+ 82B8             >
 564+ 82B8             >                // dummy db directives used to calculate length of namec
 564+ 82B8 23 53       >                db      "#S"
 564+ 82BA             >len_NFA         defl    $ - temp_NFA
 564+ 82BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 564+ 82B8             >
 564+ 82B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 564+ 82B9 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 564+ 82BB             >                org     $-1                 // alter last byte of Name just above to set
 564+ 82BA D3          >                db      {b $} | END_BIT     // msb as name end
 564+ 82BB             >
 564+ 82BB 7D 82       >                dw      last_NFA            // Link to previous definition Name
 564+ 82BD             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 564+ 82BD CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 564+ 82C0             >
 564+ 82C0             >
 564+ 82C0             >                endif           ; ok        // for other definitions it "points" the correct handler
 564+ 82C0             >                // Use of "; ok" to suppress "warning[fwdref]"
 564+ 82C0             >
 564+ 82C0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 565+ 82C0              Dashes_Begin:
 566+ 82C0 81 82 D3 6A                  dw      DASH, TWO_DUP
 567+ 82C4 ED 68 7C 69                  dw          OR_OP, ZEQUAL
 568+ 82C8 1C 64                        dw      ZBRANCH
 569+ 82CA F6 FF                        dw      Dashes_Begin - $
 570+ 82CC 3F 69                        dw      EXIT
 571+ 82CE
 572+ 82CE              //  ______________________________________________________________________
 573+ 82CE              //
 574+ 82CE              // d.r          d n --
 575+ 82CE                              Colon_Def D_DOT_R, "D.R", is_normal
 575+ 82CE             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 575+ 82CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 575+ 82CE             >
 575+ 82CE             >                // dummy db directives used to calculate length of namec
 575+ 82CE 44 2E 52    >                db      "D.R"
 575+ 82D1             >len_NFA         defl    $ - temp_NFA
 575+ 82D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 575+ 82CE             >
 575+ 82CE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 575+ 82CF 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 575+ 82D2             >                org     $-1                 // alter last byte of Name just above to set
 575+ 82D1 D2          >                db      {b $} | END_BIT     // msb as name end
 575+ 82D2             >
 575+ 82D2 B8 82       >                dw      last_NFA            // Link to previous definition Name
 575+ 82D4             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 575+ 82D4 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 575+ 82D7             >
 575+ 82D7             >
 575+ 82D7             >                endif           ; ok        // for other definitions it "points" the correct handler
 575+ 82D7             >                // Use of "; ok" to suppress "warning[fwdref]"
 575+ 82D7             >
 575+ 82D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 576+ 82D7 50 69                        dw      TO_R
 577+ 82D9 65 6A 64 79                  dw      TUCK, DABS
 578+ 82DD 44 82 BD 82                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 578+ 82E1 89 6A 6C 82
 578+ 82E5 54 82
 579+ 82E7 62 69                        dw      R_TO
 580+ 82E9 43 6A 9D 6E                  dw      OVER, SUBTRACT, SPACES, TYPE
 580+ 82ED 2A 82 31 72
 581+ 82F1 3F 69                        dw      EXIT
 582+ 82F3
 583+ 82F3              //  ______________________________________________________________________
 584+ 82F3              //
 585+ 82F3              // .r           n1 n2 --
 586+ 82F3                              Colon_Def DOT_R, ".R", is_normal
 586+ 82F3             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 586+ 82F3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 586+ 82F3             >
 586+ 82F3             >                // dummy db directives used to calculate length of namec
 586+ 82F3 2E 52       >                db      ".R"
 586+ 82F5             >len_NFA         defl    $ - temp_NFA
 586+ 82F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 586+ 82F3             >
 586+ 82F3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 586+ 82F4 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 586+ 82F6             >                org     $-1                 // alter last byte of Name just above to set
 586+ 82F5 D2          >                db      {b $} | END_BIT     // msb as name end
 586+ 82F6             >
 586+ 82F6 CE 82       >                dw      last_NFA            // Link to previous definition Name
 586+ 82F8             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 586+ 82F8 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 586+ 82FB             >
 586+ 82FB             >
 586+ 82FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 586+ 82FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 586+ 82FB             >
 586+ 82FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 587+ 82FB 50 69                        dw      TO_R
 588+ 82FD 90 6E 62 69                  dw      S_TO_D, R_TO
 589+ 8301 D4 82                        dw      D_DOT_R
 590+ 8303 3F 69                        dw      EXIT
 591+ 8305
 592+ 8305              //  ______________________________________________________________________
 593+ 8305              //
 594+ 8305              // d.           d --
 595+ 8305                              Colon_Def D_DOT, "D.", is_normal
 595+ 8305             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 595+ 8305             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 595+ 8305             >
 595+ 8305             >                // dummy db directives used to calculate length of namec
 595+ 8305 44 2E       >                db      "D."
 595+ 8307             >len_NFA         defl    $ - temp_NFA
 595+ 8307             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 595+ 8305             >
 595+ 8305 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 595+ 8306 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 595+ 8308             >                org     $-1                 // alter last byte of Name just above to set
 595+ 8307 AE          >                db      {b $} | END_BIT     // msb as name end
 595+ 8308             >
 595+ 8308 F3 82       >                dw      last_NFA            // Link to previous definition Name
 595+ 830A             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 595+ 830A CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 595+ 830D             >
 595+ 830D             >
 595+ 830D             >                endif           ; ok        // for other definitions it "points" the correct handler
 595+ 830D             >                // Use of "; ok" to suppress "warning[fwdref]"
 595+ 830D             >
 595+ 830D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 596+ 830D 43 6C D4 82                  dw      ZERO, D_DOT_R, SPACE
 596+ 8311 4F 6F
 597+ 8313 3F 69                        dw      EXIT
 598+ 8315
 599+ 8315              //  ______________________________________________________________________
 600+ 8315              //
 601+ 8315              // .            n --
 602+ 8315                              Colon_Def DOT, ".", is_normal
 602+ 8315             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 602+ 8315             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 602+ 8315             >
 602+ 8315             >                // dummy db directives used to calculate length of namec
 602+ 8315 2E          >                db      "."
 602+ 8316             >len_NFA         defl    $ - temp_NFA
 602+ 8316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 602+ 8315             >
 602+ 8315 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 602+ 8316 2E          >                db      "."               // name string in 7-bit ascii, but
 602+ 8317             >                org     $-1                 // alter last byte of Name just above to set
 602+ 8316 AE          >                db      {b $} | END_BIT     // msb as name end
 602+ 8317             >
 602+ 8317 05 83       >                dw      last_NFA            // Link to previous definition Name
 602+ 8319             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 602+ 8319 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 602+ 831C             >
 602+ 831C             >
 602+ 831C             >                endif           ; ok        // for other definitions it "points" the correct handler
 602+ 831C             >                // Use of "; ok" to suppress "warning[fwdref]"
 602+ 831C             >
 602+ 831C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 603+ 831C 90 6E 0A 83                  dw      S_TO_D, D_DOT
 604+ 8320 3F 69                        dw      EXIT
 605+ 8322
 606+ 8322              //  ______________________________________________________________________
 607+ 8322              //
 608+ 8322              // ?            n --
 609+ 8322                              Colon_Def QUESTION, "?", is_normal
 609+ 8322             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 609+ 8322             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ 8322             >
 609+ 8322             >                // dummy db directives used to calculate length of namec
 609+ 8322 3F          >                db      "?"
 609+ 8323             >len_NFA         defl    $ - temp_NFA
 609+ 8323             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ 8322             >
 609+ 8322 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ 8323 3F          >                db      "?"               // name string in 7-bit ascii, but
 609+ 8324             >                org     $-1                 // alter last byte of Name just above to set
 609+ 8323 BF          >                db      {b $} | END_BIT     // msb as name end
 609+ 8324             >
 609+ 8324 15 83       >                dw      last_NFA            // Link to previous definition Name
 609+ 8326             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 8326 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 8329             >
 609+ 8329             >
 609+ 8329             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 8329             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 8329             >
 609+ 8329             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 8329 FF 6A 19 83                  dw      FETCH, DOT
 611+ 832D 3F 69                        dw      EXIT
 612+ 832F
 613+ 832F              //  ______________________________________________________________________
 614+ 832F              //
 615+ 832F              // u.           u --
 616+ 832F                              Colon_Def U_DOT, "U.", is_normal
 616+ 832F             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 616+ 832F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 616+ 832F             >
 616+ 832F             >                // dummy db directives used to calculate length of namec
 616+ 832F 55 2E       >                db      "U."
 616+ 8331             >len_NFA         defl    $ - temp_NFA
 616+ 8331             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 616+ 832F             >
 616+ 832F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 616+ 8330 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 616+ 8332             >                org     $-1                 // alter last byte of Name just above to set
 616+ 8331 AE          >                db      {b $} | END_BIT     // msb as name end
 616+ 8332             >
 616+ 8332 22 83       >                dw      last_NFA            // Link to previous definition Name
 616+ 8334             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 616+ 8334 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 616+ 8337             >
 616+ 8337             >
 616+ 8337             >                endif           ; ok        // for other definitions it "points" the correct handler
 616+ 8337             >                // Use of "; ok" to suppress "warning[fwdref]"
 616+ 8337             >
 616+ 8337             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 617+ 8337 43 6C 0A 83                  dw      ZERO, D_DOT
 618+ 833B 3F 69                        dw      EXIT
 619+ 833D
 620+ 833D              //  ______________________________________________________________________
 621+ 833D              //
 622+ 833D              // words        --
 623+ 833D                              Colon_Def WORDS, "WORDS", is_normal
 623+ 833D             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 623+ 833D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 623+ 833D             >
 623+ 833D             >                // dummy db directives used to calculate length of namec
 623+ 833D 57 4F 52 44 >                db      "WORDS"
 623+ 8341 53          >
 623+ 8342             >len_NFA         defl    $ - temp_NFA
 623+ 8342             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 623+ 833D             >
 623+ 833D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 623+ 833E 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 623+ 8342 53          >
 623+ 8343             >                org     $-1                 // alter last byte of Name just above to set
 623+ 8342 D3          >                db      {b $} | END_BIT     // msb as name end
 623+ 8343             >
 623+ 8343 2F 83       >                dw      last_NFA            // Link to previous definition Name
 623+ 8345             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 623+ 8345 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 623+ 8348             >
 623+ 8348             >
 623+ 8348             >                endif           ; ok        // for other definitions it "points" the correct handler
 623+ 8348             >                // Use of "; ok" to suppress "warning[fwdref]"
 623+ 8348             >
 623+ 8348             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 624+ 8348 A5 63 80 00                  dw      LIT, 128, OUT, STORE
 624+ 834C 6B 6D 0A 6B
 625+ 8350 90 6D FF 6A                  dw      CONTEXT, FETCH, FETCH
 625+ 8354 FF 6A
 626+ 8356              Words_Begin:
 627+ 8356 7E 6A 16 6B                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 627+ 835A A5 63 1F 00
 627+ 835E DD 68
 628+ 8360 6B 6D FF 6A                  dw          OUT, FETCH, PLUS
 628+ 8364 B6 69
 629+ 8366 7D 6C C5 6E                  dw          CL, LESS, ZEQUAL
 629+ 836A 7C 69
 630+ 836C 1C 64                        dw          ZBRANCH
 631+ 836E 0A 00                        dw          Words_Endif - $
 632+ 8370 FC 65 43 6C                  dw              CR, ZERO, OUT, STORE
 632+ 8374 6B 6D 0A 6B
 633+ 8378              Words_Endif:
 634+ 8378 7E 6A E9 75                  dw          DUP, ID_DOT
 635+ 837C CD 6F 98 6F                  dw          PFA, LFA, FETCH
 635+ 8380 FF 6A
 636+ 8382 7E 6A 7C 69                  dw          DUP, ZEQUAL
 637+ 8386 0E 67 ED 68                  dw          QTERMINAL, OR_OP
 638+ 838A 1C 64                        dw      ZBRANCH
 639+ 838C CA FF                        dw      Words_Begin - $
 640+ 838E 51 6A                        dw      DROP
 641+ 8390 3F 69                        dw      EXIT
 642+ 8392
 643+ 8392              //  ______________________________________________________________________
 644+ 8392              //
 645+ 8392              // list         n --
 646+ 8392                              Colon_Def LIST, "LIST", is_normal
 646+ 8392             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 646+ 8392             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 646+ 8392             >
 646+ 8392             >                // dummy db directives used to calculate length of namec
 646+ 8392 4C 49 53 54 >                db      "LIST"
 646+ 8396             >len_NFA         defl    $ - temp_NFA
 646+ 8396             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 646+ 8392             >
 646+ 8392 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 646+ 8393 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 646+ 8397             >                org     $-1                 // alter last byte of Name just above to set
 646+ 8396 D4          >                db      {b $} | END_BIT     // msb as name end
 646+ 8397             >
 646+ 8397 3D 83       >                dw      last_NFA            // Link to previous definition Name
 646+ 8399             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 646+ 8399 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 646+ 839C             >
 646+ 839C             >
 646+ 839C             >                endif           ; ok        // for other definitions it "points" the correct handler
 646+ 839C             >                // Use of "; ok" to suppress "warning[fwdref]"
 646+ 839C             >
 646+ 839C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 647+ 839C 45 71 FC 65                  dw      DECIMAL, CR
 648+ 83A0 7E 6A 75 6D                  dw      DUP, SCR, STORE
 648+ 83A4 0A 6B
 649+ 83A6 09 74                        dw      C_DOT_QUOTE
 650+ 83A8 05 53 63 72                  db      5, "Scr# "
 650+ 83AC 23 20
 651+ 83AE 19 83                        dw      DOT
 652+ 83B0 A4 6C 43 6C                  dw      LSCR, ZERO, C_DO
 652+ 83B4 70 64
 653+ 83B6              List_Loop:
 654+ 83B6 FC 65                        dw          CR
 655+ 83B8 78 64 5E 6C                  dw          I, THREE
 656+ 83BC F8 82 4F 6F                  dw          DOT_R, SPACE
 657+ 83C0 78 64 75 6D                  dw          I, SCR, FETCH, DOT_LINE
 657+ 83C4 FF 6A A0 7A
 658+ 83C8 0E 67                        dw          QTERMINAL
 659+ 83CA 1C 64                        dw          ZBRANCH
 660+ 83CC 06 00                        dw          List_Endif - $
 661+ 83CE 2F 64                        dw              C_LEAVE
 662+ 83D0 06 00                        dw              List_Leave - $
 663+ 83D2              List_Endif:
 664+ 83D2 F8 63                        dw      C_LOOP
 665+ 83D4 E2 FF                        dw      List_Loop - $
 666+ 83D6              List_Leave:
 667+ 83D6 FC 65                        dw      CR
 668+ 83D8 3F 69                        dw      EXIT
 669+ 83DA
 670+ 83DA              //  ______________________________________________________________________
 671+ 83DA              //
 672+ 83DA              // index        n1 n2 --
 673+ 83DA                              Colon_Def INDEX, "INDEX", is_normal
 673+ 83DA             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 673+ 83DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 673+ 83DA             >
 673+ 83DA             >                // dummy db directives used to calculate length of namec
 673+ 83DA 49 4E 44 45 >                db      "INDEX"
 673+ 83DE 58          >
 673+ 83DF             >len_NFA         defl    $ - temp_NFA
 673+ 83DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 673+ 83DA             >
 673+ 83DA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 673+ 83DB 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 673+ 83DF 58          >
 673+ 83E0             >                org     $-1                 // alter last byte of Name just above to set
 673+ 83DF D8          >                db      {b $} | END_BIT     // msb as name end
 673+ 83E0             >
 673+ 83E0 92 83       >                dw      last_NFA            // Link to previous definition Name
 673+ 83E2             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 673+ 83E2 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 673+ 83E5             >
 673+ 83E5             >
 673+ 83E5             >                endif           ; ok        // for other definitions it "points" the correct handler
 673+ 83E5             >                // Use of "; ok" to suppress "warning[fwdref]"
 673+ 83E5             >
 673+ 83E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 674+ 83E5 D3 69 73 6A                  dw      ONE_PLUS, SWAP, C_DO
 674+ 83E9 70 64
 675+ 83EB              Index_Loop:
 676+ 83EB FC 65 78 64                  dw          CR, I, THREE
 676+ 83EF 5E 6C
 677+ 83F1 F8 82 4F 6F                  dw          DOT_R, SPACE
 678+ 83F5 43 6C 78 64                  dw          ZERO, I, DOT_LINE
 678+ 83F9 A0 7A
 679+ 83FB 0E 67                        dw          QTERMINAL
 680+ 83FD 1C 64                        dw          ZBRANCH
 681+ 83FF 06 00                        dw          Index_Endif - $
 682+ 8401 2F 64                        dw              C_LEAVE
 683+ 8403 06 00                        dw              Index_Leave - $
 684+ 8405              Index_Endif:
 685+ 8405 F8 63                        dw      C_LOOP
 686+ 8407 E4 FF                        dw      Index_Loop - $
 687+ 8409              Index_Leave:
 688+ 8409 FC 65                        dw      CR
 689+ 840B 3F 69                        dw      EXIT
 690+ 840D
 691+ 840D              //  ______________________________________________________________________
 692+ 840D              //
 693+ 840D              // cls          --
 694+ 840D                              Colon_Def CLS, "CLS", is_normal
 694+ 840D             >                New_Def  CLS, "CLS", Enter_Ptr, is_normal ; ok
 694+ 840D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 694+ 840D             >
 694+ 840D             >                // dummy db directives used to calculate length of namec
 694+ 840D 43 4C 53    >                db      "CLS"
 694+ 8410             >len_NFA         defl    $ - temp_NFA
 694+ 8410             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 694+ 840D             >
 694+ 840D 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 694+ 840E 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 694+ 8411             >                org     $-1                 // alter last byte of Name just above to set
 694+ 8410 D3          >                db      {b $} | END_BIT     // msb as name end
 694+ 8411             >
 694+ 8411 DA 83       >                dw      last_NFA            // Link to previous definition Name
 694+ 8413             >CLS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 694+ 8413 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 694+ 8416             >
 694+ 8416             >
 694+ 8416             >                endif           ; ok        // for other definitions it "points" the correct handler
 694+ 8416             >                // Use of "; ok" to suppress "warning[fwdref]"
 694+ 8416             >
 694+ 8416             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 695+ 8416 A5 63 0E 00                  dw      LIT, $0E, EMITC
 695+ 841A E7 65
 696+ 841C 3F 69                        dw      EXIT
 697+ 841E
 698+ 841E              //  ______________________________________________________________________
 699+ 841E              //
 700+ 841E              // splash       --
 701+ 841E                              Colon_Def SPLASH, "SPLASH", is_normal
 701+ 841E             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 701+ 841E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 701+ 841E             >
 701+ 841E             >                // dummy db directives used to calculate length of namec
 701+ 841E 53 50 4C 41 >                db      "SPLASH"
 701+ 8422 53 48       >
 701+ 8424             >len_NFA         defl    $ - temp_NFA
 701+ 8424             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 701+ 841E             >
 701+ 841E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 701+ 841F 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 701+ 8423 53 48       >
 701+ 8425             >                org     $-1                 // alter last byte of Name just above to set
 701+ 8424 C8          >                db      {b $} | END_BIT     // msb as name end
 701+ 8425             >
 701+ 8425 0D 84       >                dw      last_NFA            // Link to previous definition Name
 701+ 8427             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 701+ 8427 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 701+ 842A             >
 701+ 842A             >
 701+ 842A             >                endif           ; ok        // for other definitions it "points" the correct handler
 701+ 842A             >                // Use of "; ok" to suppress "warning[fwdref]"
 701+ 842A             >
 701+ 842A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 702+ 842A 13 84                        dw      CLS
 703+ 842C 09 74                        dw      C_DOT_QUOTE
 704+ 842E 58                           db      88
 705+ 842F 76 2D 46 6F                  db      "v-Forth 1.52 NextZXOS version", 13    // 29
 705+ 8433 72 74 68 20
 705+ 8437 31 2E 35 32
 705+ 843B 20 4E 65 78
 705+ 843F 74 5A 58 4F
 705+ 8443 53 20 76 65
 705+ 8447 72 73 69 6F
 705+ 844B 6E 0D
 706+ 844D 44 69 72 65                  db      "Direct Threaded - build 20230106", 13  // 31
 706+ 8451 63 74 20 54
 706+ 8455 68 72 65 61
 706+ 8459 64 65 64 20
 706+ 845D 2D 20 62 75
 706+ 8461 69 6C 64 20
 706+ 8465 32 30 32 33
 706+ 8469 30 31 30 36
 706+ 846D 0D
 707+ 846E 31 39 39 30                  db      "1990-2023 Matteo Vitturi", 13        // 25
 707+ 8472 2D 32 30 32
 707+ 8476 33 20 4D 61
 707+ 847A 74 74 65 6F
 707+ 847E 20 56 69 74
 707+ 8482 74 75 72 69
 707+ 8486 0D
 708+ 8487 3F 69                        dw      EXIT
 709+ 8489
 710+ 8489              //  ______________________________________________________________________
 711+ 8489              //
 712+ 8489              // video        --
 713+ 8489                              Colon_Def VIDEO, "VIDEO", is_normal
 713+ 8489             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 713+ 8489             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ 8489             >
 713+ 8489             >                // dummy db directives used to calculate length of namec
 713+ 8489 56 49 44 45 >                db      "VIDEO"
 713+ 848D 4F          >
 713+ 848E             >len_NFA         defl    $ - temp_NFA
 713+ 848E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ 8489             >
 713+ 8489 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ 848A 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 713+ 848E 4F          >
 713+ 848F             >                org     $-1                 // alter last byte of Name just above to set
 713+ 848E CF          >                db      {b $} | END_BIT     // msb as name end
 713+ 848F             >
 713+ 848F 1E 84       >                dw      last_NFA            // Link to previous definition Name
 713+ 8491             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 8491 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 8494             >
 713+ 8494             >
 713+ 8494             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 8494             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 8494             >
 713+ 8494             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 8494 55 6C 7E 6A                  dw      TWO, DUP, DEVICE, STORE
 714+ 8498 EA 7A 0A 6B
 715+ 849C 4B 67                        dw      SELECT
 716+ 849E 3F 69                        dw      EXIT
 717+ 84A0
 718+ 84A0              //  ______________________________________________________________________
 719+ 84A0              //
 720+ 84A0              // accept-      a n1 -- n2
 721+ 84A0                              Colon_Def ACCEPT_N, "ACCEPT-", is_normal
 721+ 84A0             >                New_Def  ACCEPT_N, "ACCEPT-", Enter_Ptr, is_normal ; ok
 721+ 84A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 721+ 84A0             >
 721+ 84A0             >                // dummy db directives used to calculate length of namec
 721+ 84A0 41 43 43 45 >                db      "ACCEPT-"
 721+ 84A4 50 54 2D    >
 721+ 84A7             >len_NFA         defl    $ - temp_NFA
 721+ 84A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 721+ 84A0             >
 721+ 84A0 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 721+ 84A1 41 43 43 45 >                db      "ACCEPT-"               // name string in 7-bit ascii, but
 721+ 84A5 50 54 2D    >
 721+ 84A8             >                org     $-1                 // alter last byte of Name just above to set
 721+ 84A7 AD          >                db      {b $} | END_BIT     // msb as name end
 721+ 84A8             >
 721+ 84A8 89 84       >                dw      last_NFA            // Link to previous definition Name
 721+ 84AA             >ACCEPT_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 721+ 84AA CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 721+ 84AD             >
 721+ 84AD             >
 721+ 84AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 721+ 84AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 721+ 84AD             >
 721+ 84AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 722+ 84AD 50 69                        dw      TO_R
 723+ 84AF 43 6C                        dw      ZERO
 724+ 84B1 73 6A                        dw      SWAP
 725+ 84B3 7E 6A                        dw      DUP
 726+ 84B5 62 69                        dw      R_TO
 727+ 84B7 B6 69                        dw      PLUS
 728+ 84B9 73 6A                        dw      SWAP
 729+ 84BB 70 64                        dw      C_DO
 730+ 84BD              AcceptN_Loop:
 731+ 84BD 21 7B                        dw          MMU7_FETCH
 732+ 84BF 28 67                        dw          INKEY
 733+ 84C1 73 6A 34 7B                  dw          SWAP, MMU7_STORE
 734+ 84C5 7E 6A 7C 69                  dw          DUP, ZEQUAL
 735+ 84C9 1C 64                        dw          ZBRANCH
 736+ 84CB 06 00                        dw          AcceptN_Endif_1 - $
 737+ 84CD              //              dw              VIDEO, QUIT
 738+ 84CD 2F 64                        dw              C_LEAVE
 739+ 84CF 3A 00                        dw              AcceptN_Leave - $
 740+ 84D1
 741+ 84D1              AcceptN_Endif_1:
 742+ 84D1 7E 6A A5 63                  dw          DUP, LIT, 13, EQUALS
 742+ 84D5 0D 00 A9 6E
 743+ 84D9 1C 64                        dw          ZBRANCH
 744+ 84DB 06 00                        dw          AcceptN_Endif_2 - $
 745+ 84DD 51 6A 43 6C                  dw              DROP, ZERO
 746+ 84E1              AcceptN_Endif_2:
 747+ 84E1 7E 6A A5 63                  dw          DUP, LIT, 10, EQUALS
 747+ 84E5 0A 00 A9 6E
 748+ 84E9 1C 64                        dw          ZBRANCH
 749+ 84EB 06 00                        dw          AcceptN_Endif_3 - $
 750+ 84ED 51 6A 43 6C                  dw              DROP, ZERO
 751+ 84F1              AcceptN_Endif_3:
 752+ 84F1 78 64 22 6B                  dw          I, CSTORE, ONE_PLUS
 752+ 84F5 D3 69
 753+ 84F7
 754+ 84F7 78 64 16 6B                  dw          I, CFETCH, ZEQUAL   //      i 0= if
 754+ 84FB 7C 69
 755+ 84FD 1C 64                        dw          ZBRANCH
 756+ 84FF 06 00                        dw              AcceptN_Endif_4 - $
 757+ 8501 2F 64                        dw                  C_LEAVE     //              leave
 758+ 8503 06 00                        dw                  AcceptN_Leave - $
 759+ 8505              AcceptN_Endif_4:                                 //      endif
 760+ 8505
 761+ 8505 F8 63                        dw      C_LOOP
 762+ 8507 B6 FF                        dw      AcceptN_Loop -$
 763+ 8509              AcceptN_Leave:
 764+ 8509 3F 69                        dw      EXIT
 765+ 850B
 766+ 850B              //  ______________________________________________________________________
 767+ 850B              //
 768+ 850B              // load-        n --
 769+ 850B              // Provided that a stream n is OPEN# via the standart BASIC
 770+ 850B              // it accepts text from stream #n to the normal INTERPRET
 771+ 850B              // up to now, text-file must end with QUIT
 772+ 850B                              Colon_Def LOAD_N, "LOAD-", is_normal
 772+ 850B             >                New_Def  LOAD_N, "LOAD-", Enter_Ptr, is_normal ; ok
 772+ 850B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ 850B             >
 772+ 850B             >                // dummy db directives used to calculate length of namec
 772+ 850B 4C 4F 41 44 >                db      "LOAD-"
 772+ 850F 2D          >
 772+ 8510             >len_NFA         defl    $ - temp_NFA
 772+ 8510             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ 850B             >
 772+ 850B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ 850C 4C 4F 41 44 >                db      "LOAD-"               // name string in 7-bit ascii, but
 772+ 8510 2D          >
 772+ 8511             >                org     $-1                 // alter last byte of Name just above to set
 772+ 8510 AD          >                db      {b $} | END_BIT     // msb as name end
 772+ 8511             >
 772+ 8511 A0 84       >                dw      last_NFA            // Link to previous definition Name
 772+ 8513             >LOAD_N:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 8513 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 8516             >
 772+ 8516             >
 772+ 8516             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 8516             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 8516             >
 772+ 8516             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 8516 20 6E 0A 6B                  dw      SOURCE_ID, STORE
 774+ 851A              Load_N_Begin:
 775+ 851A E1 6C FF 6A                  dw          TIB, FETCH
 776+ 851E 7E 6A A5 63                  dw          DUP, LIT, 80
 776+ 8522 50 00
 777+ 8524 D3 6A 7E 73                  dw          TWO_DUP, BLANK
 778+ 8528 20 6E FF 6A                  dw          SOURCE_ID, FETCH
 779+ 852C 54 79 7E 6A                  dw          ABS_OP, DUP, DEVICE, STORE
 779+ 8530 EA 7A 0A 6B
 780+ 8534 4B 67                        dw          SELECT
 781+ 8536 AA 84                        dw          ACCEPT_N
 782+ 8538 91 84                        dw          VIDEO
 783+ 853A B7 6A                        dw          TWO_DROP
 784+ 853C 43 6C 57 6D                  dw          ZERO, BLK, STORE
 784+ 8540 0A 6B
 785+ 8542 43 6C 61 6D                  dw          ZERO, TO_IN, STORE
 785+ 8546 0A 6B
 786+ 8548 73 77                        dw          INTERPRET
 787+ 854A 0E 67                        dw          QTERMINAL
 788+ 854C 1C 64                        dw      ZBRANCH
 789+ 854E CC FF                        dw      Load_N_Begin - $
 790+ 8550 3F 69                        dw      EXIT
 791+ 8552
 792+ 8552              //  ______________________________________________________________________
 793+ 8552              //
 794+ 8552              // load         n --
 795+ 8552              // if n is positive, it loads screen #n (as usual)
 796+ 8552              // if n is negative, it connects stream #n to the normal INTERPRET
 797+ 8552              // this second way is useful if you want to load any kind of file
 798+ 8552              // provied that it is OPEN# the usual BASIC way.
 799+ 8552                              Colon_Def LOAD, "LOAD", is_normal
 799+ 8552             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 799+ 8552             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 799+ 8552             >
 799+ 8552             >                // dummy db directives used to calculate length of namec
 799+ 8552 4C 4F 41 44 >                db      "LOAD"
 799+ 8556             >len_NFA         defl    $ - temp_NFA
 799+ 8556             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 799+ 8552             >
 799+ 8552 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 799+ 8553 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 799+ 8557             >                org     $-1                 // alter last byte of Name just above to set
 799+ 8556 C4          >                db      {b $} | END_BIT     // msb as name end
 799+ 8557             >
 799+ 8557 0B 85       >                dw      last_NFA            // Link to previous definition Name
 799+ 8559             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 799+ 8559 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 799+ 855C             >
 799+ 855C             >
 799+ 855C             >                endif           ; ok        // for other definitions it "points" the correct handler
 799+ 855C             >                // Use of "; ok" to suppress "warning[fwdref]"
 799+ 855C             >
 799+ 855C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 800+ 855C 7E 6A 96 69                  dw      DUP, ZLESS
 801+ 8560 1C 64                        dw      ZBRANCH
 802+ 8562 08 00                        dw      Load_Else - $
 803+ 8564 13 85                        dw          LOAD_N
 804+ 8566 07 64                        dw      BRANCH
 805+ 8568 04 00                        dw      Load_Endif - $
 806+ 856A              Load_Else:
 807+ 856A 1A 81                        dw          LOAD_P
 808+ 856C              Load_Endif:
 809+ 856C 3F 69                        dw      EXIT
 810+ 856E
 811+ 856E
 812+ 856E              //  ______________________________________________________________________
 813+ 856E              //
 814+ 856E              // autoexec     --
 815+ 856E              // this word is called the first time the Forth system boot to
 816+ 856E              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 817+ 856E                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 817+ 856E             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 817+ 856E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 817+ 856E             >
 817+ 856E             >                // dummy db directives used to calculate length of namec
 817+ 856E 41 55 54 4F >                db      "AUTOEXEC"
 817+ 8572 45 58 45 43 >
 817+ 8576             >len_NFA         defl    $ - temp_NFA
 817+ 8576             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 817+ 856E             >
 817+ 856E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 817+ 856F 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 817+ 8573 45 58 45 43 >
 817+ 8577             >                org     $-1                 // alter last byte of Name just above to set
 817+ 8576 C3          >                db      {b $} | END_BIT     // msb as name end
 817+ 8577             >
 817+ 8577 52 85       >                dw      last_NFA            // Link to previous definition Name
 817+ 8579             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 817+ 8579 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 817+ 857C             >
 817+ 857C             >
 817+ 857C             >                endif           ; ok        // for other definitions it "points" the correct handler
 817+ 857C             >                // Use of "; ok" to suppress "warning[fwdref]"
 817+ 857C             >
 817+ 857C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 818+ 857C A5 63 0B 00                  dw      LIT, 11
 819+ 8580 A5 63 F2 6B                  dw      LIT, NOOP
 820+ 8584 A5 63 81 78                  dw      LIT, Autoexec_Ptr
 821+ 8588 0A 6B                        dw      STORE
 822+ 858A 59 85                        dw      LOAD
 823+ 858C 30 78                        dw      QUIT
 824+ 858E 3F 69                        dw      EXIT
 825+ 8590
 826+ 8590
 827+ 8590              //  ______________________________________________________________________
 828+ 8590              //
 829+ 8590              // bye     --
 830+ 8590              //
 831+ 8590                              Colon_Def BYE, "BYE", is_normal
 831+ 8590             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 831+ 8590             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 831+ 8590             >
 831+ 8590             >                // dummy db directives used to calculate length of namec
 831+ 8590 42 59 45    >                db      "BYE"
 831+ 8593             >len_NFA         defl    $ - temp_NFA
 831+ 8593             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 831+ 8590             >
 831+ 8590 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 831+ 8591 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 831+ 8594             >                org     $-1                 // alter last byte of Name just above to set
 831+ 8593 C5          >                db      {b $} | END_BIT     // msb as name end
 831+ 8594             >
 831+ 8594 6E 85       >                dw      last_NFA            // Link to previous definition Name
 831+ 8596             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 831+ 8596 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 831+ 8599             >
 831+ 8599             >
 831+ 8599             >                endif           ; ok        // for other definitions it "points" the correct handler
 831+ 8599             >                // Use of "; ok" to suppress "warning[fwdref]"
 831+ 8599             >
 831+ 8599             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 832+ 8599 A9 7D                        dw      FLUSH
 833+ 859B D8 7C                        dw      EMPTY_BUFFERS
 834+ 859D 72 7B FF 6A                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 834+ 85A1 8D 67 51 6A
 835+ 85A5 43 6C B3 6C                  dw      ZERO, PLUS_ORIGIN
 836+ 85A9 19 79                        dw      BASIC
 837+ 85AB
 838+ 85AB              //  ______________________________________________________________________
 839+ 85AB              //
 840+ 85AB              // invv     --
 841+ 85AB              //
 842+ 85AB              //              Colon_Def INVV, "INVV", is_normal
 843+ 85AB              //              dw      LIT, 20, EMITC, ONE, EMITC
 844+ 85AB              //              dw      EXIT
 845+ 85AB
 846+ 85AB              //  ______________________________________________________________________
 847+ 85AB              //
 848+ 85AB              // truv     --
 849+ 85AB              //
 850+ 85AB              //              Colon_Def TRUV, "TRUV", is_normal
 851+ 85AB              //              dw      LIT, 20, EMITC, ZERO, EMITC
 852+ 85AB              //              dw      EXIT
 853+ 85AB
 854+ 85AB              //  ______________________________________________________________________
 855+ 85AB              //
 856+ 85AB              // mark     --
 857+ 85AB              //
 858+ 85AB              //              Colon_Def MARK, "MARK", is_normal
 859+ 85AB              //              dw      INVV, TYPE, TRUV
 860+ 85AB              //              dw      EXIT
 861+ 85AB
 862+ 85AB              //  ______________________________________________________________________
 863+ 85AB              //
 864+ 85AB              // back     --
 865+ 85AB              //
 866+ 85AB                              Colon_Def BACK, "BACK", is_normal
 866+ 85AB             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 866+ 85AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 866+ 85AB             >
 866+ 85AB             >                // dummy db directives used to calculate length of namec
 866+ 85AB 42 41 43 4B >                db      "BACK"
 866+ 85AF             >len_NFA         defl    $ - temp_NFA
 866+ 85AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 866+ 85AB             >
 866+ 85AB 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 866+ 85AC 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 866+ 85B0             >                org     $-1                 // alter last byte of Name just above to set
 866+ 85AF CB          >                db      {b $} | END_BIT     // msb as name end
 866+ 85B0             >
 866+ 85B0 90 85       >                dw      last_NFA            // Link to previous definition Name
 866+ 85B2             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 866+ 85B2 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 866+ 85B5             >
 866+ 85B5             >
 866+ 85B5             >                endif           ; ok        // for other definitions it "points" the correct handler
 866+ 85B5             >                // Use of "; ok" to suppress "warning[fwdref]"
 866+ 85B5             >
 866+ 85B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 867+ 85B5 4D 6E 9D 6E                  dw      HERE, SUBTRACT, COMMA
 867+ 85B9 6B 6E
 868+ 85BB 3F 69                        dw      EXIT
 869+ 85BD
 870+ 85BD              //  ______________________________________________________________________
 871+ 85BD              //
 872+ 85BD              // if          ( -- a 2 ) \ compile-time
 873+ 85BD              // IF ... THEN
 874+ 85BD              // IF ... ELSE ... ENDIF
 875+ 85BD                              Colon_Def IF, "IF", is_immediate
 875+ 85BD             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 875+ 85BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ 85BD             >
 875+ 85BD             >                // dummy db directives used to calculate length of namec
 875+ 85BD 49 46       >                db      "IF"
 875+ 85BF             >len_NFA         defl    $ - temp_NFA
 875+ 85BF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ 85BD             >
 875+ 85BD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ 85BE 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 875+ 85C0             >                org     $-1                 // alter last byte of Name just above to set
 875+ 85BF C6          >                db      {b $} | END_BIT     // msb as name end
 875+ 85C0             >
 875+ 85C0 AB 85       >                dw      last_NFA            // Link to previous definition Name
 875+ 85C2             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 85C2 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 875+ 85C5             >
 875+ 85C5             >
 875+ 85C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 85C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 85C5             >
 875+ 85C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 85C5 B2 70 1C 64                  dw      COMPILE, ZBRANCH
 877+ 85C9 4D 6E 43 6C                  dw      HERE, ZERO, COMMA
 877+ 85CD 6B 6E
 878+ 85CF 55 6C                        dw      TWO
 879+ 85D1 3F 69                        dw      EXIT
 880+ 85D3
 881+ 85D3              //  ______________________________________________________________________
 882+ 85D3              //
 883+ 85D3              // then        ( a 2 -- ) \ compile-time
 884+ 85D3              //
 885+ 85D3                              Colon_Def THEN, "THEN", is_immediate
 885+ 85D3             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 885+ 85D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 885+ 85D3             >
 885+ 85D3             >                // dummy db directives used to calculate length of namec
 885+ 85D3 54 48 45 4E >                db      "THEN"
 885+ 85D7             >len_NFA         defl    $ - temp_NFA
 885+ 85D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 885+ 85D3             >
 885+ 85D3 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 885+ 85D4 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 885+ 85D8             >                org     $-1                 // alter last byte of Name just above to set
 885+ 85D7 CE          >                db      {b $} | END_BIT     // msb as name end
 885+ 85D8             >
 885+ 85D8 BD 85       >                dw      last_NFA            // Link to previous definition Name
 885+ 85DA             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 885+ 85DA CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 885+ 85DD             >
 885+ 85DD             >
 885+ 85DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 885+ 85DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 885+ 85DD             >
 885+ 85DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 886+ 85DD 34 70                        dw      QCOMP
 887+ 85DF 55 6C 65 70                  dw      TWO, QPAIRS
 888+ 85E3 4D 6E 43 6A                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 888+ 85E7 9D 6E 73 6A
 888+ 85EB 0A 6B
 889+ 85ED 3F 69                        dw      EXIT
 890+ 85EF
 891+ 85EF              //  ______________________________________________________________________
 892+ 85EF              //
 893+ 85EF              // endif       ( a 2 -- ) \ compile-time
 894+ 85EF              //
 895+ 85EF                              Colon_Def ENDIF, "ENDIF", is_immediate
 895+ 85EF             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 895+ 85EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 895+ 85EF             >
 895+ 85EF             >                // dummy db directives used to calculate length of namec
 895+ 85EF 45 4E 44 49 >                db      "ENDIF"
 895+ 85F3 46          >
 895+ 85F4             >len_NFA         defl    $ - temp_NFA
 895+ 85F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 895+ 85EF             >
 895+ 85EF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 895+ 85F0 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 895+ 85F4 46          >
 895+ 85F5             >                org     $-1                 // alter last byte of Name just above to set
 895+ 85F4 C6          >                db      {b $} | END_BIT     // msb as name end
 895+ 85F5             >
 895+ 85F5 D3 85       >                dw      last_NFA            // Link to previous definition Name
 895+ 85F7             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 895+ 85F7 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 895+ 85FA             >
 895+ 85FA             >
 895+ 85FA             >                endif           ; ok        // for other definitions it "points" the correct handler
 895+ 85FA             >                // Use of "; ok" to suppress "warning[fwdref]"
 895+ 85FA             >
 895+ 85FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 896+ 85FA DA 85                        dw      THEN
 897+ 85FC 3F 69                        dw      EXIT
 898+ 85FE
 899+ 85FE              //  ______________________________________________________________________
 900+ 85FE              //
 901+ 85FE              // else        ( a1 2 -- a2 2 ) \ compile-time
 902+ 85FE              //
 903+ 85FE                              Colon_Def ELSE, "ELSE", is_immediate
 903+ 85FE             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 903+ 85FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ 85FE             >
 903+ 85FE             >                // dummy db directives used to calculate length of namec
 903+ 85FE 45 4C 53 45 >                db      "ELSE"
 903+ 8602             >len_NFA         defl    $ - temp_NFA
 903+ 8602             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ 85FE             >
 903+ 85FE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ 85FF 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 903+ 8603             >                org     $-1                 // alter last byte of Name just above to set
 903+ 8602 C5          >                db      {b $} | END_BIT     // msb as name end
 903+ 8603             >
 903+ 8603 EF 85       >                dw      last_NFA            // Link to previous definition Name
 903+ 8605             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 8605 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8608             >
 903+ 8608             >
 903+ 8608             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8608             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8608             >
 903+ 8608             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8608 34 70                        dw      QCOMP
 905+ 860A 55 6C 65 70                  dw      TWO, QPAIRS
 906+ 860E B2 70 07 64                  dw      COMPILE, BRANCH
 907+ 8612 4D 6E 43 6C                  dw      HERE, ZERO, COMMA
 907+ 8616 6B 6E
 908+ 8618 73 6A 55 6C                  dw      SWAP, TWO, THEN
 908+ 861C DA 85
 909+ 861E 55 6C                        dw      TWO
 910+ 8620 3F 69                        dw      EXIT
 911+ 8622
 912+ 8622              //  ______________________________________________________________________
 913+ 8622              //
 914+ 8622              // begin        ( -- a 1 ) \ compile-time
 915+ 8622              // BEGIN ... AGAIN
 916+ 8622              // BEGIN ... f UNTIL
 917+ 8622              // BEGIN ... f WHILE ... REPEAT
 918+ 8622                              Colon_Def BEGIN, "BEGIN", is_immediate
 918+ 8622             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 918+ 8622             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 918+ 8622             >
 918+ 8622             >                // dummy db directives used to calculate length of namec
 918+ 8622 42 45 47 49 >                db      "BEGIN"
 918+ 8626 4E          >
 918+ 8627             >len_NFA         defl    $ - temp_NFA
 918+ 8627             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 918+ 8622             >
 918+ 8622 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 918+ 8623 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 918+ 8627 4E          >
 918+ 8628             >                org     $-1                 // alter last byte of Name just above to set
 918+ 8627 CE          >                db      {b $} | END_BIT     // msb as name end
 918+ 8628             >
 918+ 8628 FE 85       >                dw      last_NFA            // Link to previous definition Name
 918+ 862A             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 918+ 862A CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 918+ 862D             >
 918+ 862D             >
 918+ 862D             >                endif           ; ok        // for other definitions it "points" the correct handler
 918+ 862D             >                // Use of "; ok" to suppress "warning[fwdref]"
 918+ 862D             >
 918+ 862D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 919+ 862D 34 70                        dw      QCOMP
 920+ 862F 4D 6E                        dw      HERE
 921+ 8631 55 6C                        dw      TWO
 922+ 8633 3F 69                        dw      EXIT
 923+ 8635
 924+ 8635              //  ______________________________________________________________________
 925+ 8635              //
 926+ 8635              // again        ( a 1 -- ) \ compile-time
 927+ 8635                              Colon_Def AGAIN, "AGAIN", is_immediate
 927+ 8635             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 927+ 8635             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 927+ 8635             >
 927+ 8635             >                // dummy db directives used to calculate length of namec
 927+ 8635 41 47 41 49 >                db      "AGAIN"
 927+ 8639 4E          >
 927+ 863A             >len_NFA         defl    $ - temp_NFA
 927+ 863A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 927+ 8635             >
 927+ 8635 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 927+ 8636 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 927+ 863A 4E          >
 927+ 863B             >                org     $-1                 // alter last byte of Name just above to set
 927+ 863A CE          >                db      {b $} | END_BIT     // msb as name end
 927+ 863B             >
 927+ 863B 22 86       >                dw      last_NFA            // Link to previous definition Name
 927+ 863D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 927+ 863D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 927+ 8640             >
 927+ 8640             >
 927+ 8640             >                endif           ; ok        // for other definitions it "points" the correct handler
 927+ 8640             >                // Use of "; ok" to suppress "warning[fwdref]"
 927+ 8640             >
 927+ 8640             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 928+ 8640 34 70                        dw      QCOMP
 929+ 8642 55 6C 65 70                  dw      TWO, QPAIRS
 930+ 8646 B2 70 07 64                  dw      COMPILE, BRANCH
 931+ 864A B2 85                        dw      BACK
 932+ 864C 3F 69                        dw      EXIT
 933+ 864E
 934+ 864E              //  ______________________________________________________________________
 935+ 864E              //
 936+ 864E              // until        ( a 1 -- ) \ compile-time
 937+ 864E                              Colon_Def UNTIL, "UNTIL", is_immediate
 937+ 864E             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 937+ 864E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 937+ 864E             >
 937+ 864E             >                // dummy db directives used to calculate length of namec
 937+ 864E 55 4E 54 49 >                db      "UNTIL"
 937+ 8652 4C          >
 937+ 8653             >len_NFA         defl    $ - temp_NFA
 937+ 8653             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 937+ 864E             >
 937+ 864E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 937+ 864F 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 937+ 8653 4C          >
 937+ 8654             >                org     $-1                 // alter last byte of Name just above to set
 937+ 8653 CC          >                db      {b $} | END_BIT     // msb as name end
 937+ 8654             >
 937+ 8654 35 86       >                dw      last_NFA            // Link to previous definition Name
 937+ 8656             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 937+ 8656 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 937+ 8659             >
 937+ 8659             >
 937+ 8659             >                endif           ; ok        // for other definitions it "points" the correct handler
 937+ 8659             >                // Use of "; ok" to suppress "warning[fwdref]"
 937+ 8659             >
 937+ 8659             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 938+ 8659 34 70                        dw      QCOMP
 939+ 865B 55 6C 65 70                  dw      TWO, QPAIRS
 940+ 865F B2 70 1C 64                  dw      COMPILE, ZBRANCH
 941+ 8663 B2 85                        dw      BACK
 942+ 8665 3F 69                        dw      EXIT
 943+ 8667
 944+ 8667              //  ______________________________________________________________________
 945+ 8667              //
 946+ 8667              // end          ( a 1 -- ) \ compile-time
 947+ 8667                              Colon_Def END, "END", is_immediate
 947+ 8667             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 947+ 8667             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 947+ 8667             >
 947+ 8667             >                // dummy db directives used to calculate length of namec
 947+ 8667 45 4E 44    >                db      "END"
 947+ 866A             >len_NFA         defl    $ - temp_NFA
 947+ 866A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 947+ 8667             >
 947+ 8667 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 947+ 8668 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 947+ 866B             >                org     $-1                 // alter last byte of Name just above to set
 947+ 866A C4          >                db      {b $} | END_BIT     // msb as name end
 947+ 866B             >
 947+ 866B 4E 86       >                dw      last_NFA            // Link to previous definition Name
 947+ 866D             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 947+ 866D CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 947+ 8670             >
 947+ 8670             >
 947+ 8670             >                endif           ; ok        // for other definitions it "points" the correct handler
 947+ 8670             >                // Use of "; ok" to suppress "warning[fwdref]"
 947+ 8670             >
 947+ 8670             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 948+ 8670 56 86                        dw      UNTIL
 949+ 8672 3F 69                        dw      EXIT
 950+ 8674
 951+ 8674              //  ______________________________________________________________________
 952+ 8674              //
 953+ 8674              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 954+ 8674                              Colon_Def WHILE, "WHILE", is_immediate
 954+ 8674             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 954+ 8674             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 954+ 8674             >
 954+ 8674             >                // dummy db directives used to calculate length of namec
 954+ 8674 57 48 49 4C >                db      "WHILE"
 954+ 8678 45          >
 954+ 8679             >len_NFA         defl    $ - temp_NFA
 954+ 8679             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 954+ 8674             >
 954+ 8674 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 954+ 8675 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 954+ 8679 45          >
 954+ 867A             >                org     $-1                 // alter last byte of Name just above to set
 954+ 8679 C5          >                db      {b $} | END_BIT     // msb as name end
 954+ 867A             >
 954+ 867A 67 86       >                dw      last_NFA            // Link to previous definition Name
 954+ 867C             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 954+ 867C CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 954+ 867F             >
 954+ 867F             >
 954+ 867F             >                endif           ; ok        // for other definitions it "points" the correct handler
 954+ 867F             >                // Use of "; ok" to suppress "warning[fwdref]"
 954+ 867F             >
 954+ 867F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 955+ 867F C2 85                        dw      IF
 956+ 8681              //              dw      TWO_PLUS // ( that is 4 )
 957+ 8681 C3 6A                        dw      TWO_SWAP
 958+ 8683 3F 69                        dw      EXIT
 959+ 8685
 960+ 8685              //  ______________________________________________________________________
 961+ 8685              //
 962+ 8685              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 963+ 8685                              Colon_Def REPEAT, "REPEAT", is_immediate
 963+ 8685             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 963+ 8685             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 963+ 8685             >
 963+ 8685             >                // dummy db directives used to calculate length of namec
 963+ 8685 52 45 50 45 >                db      "REPEAT"
 963+ 8689 41 54       >
 963+ 868B             >len_NFA         defl    $ - temp_NFA
 963+ 868B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 963+ 8685             >
 963+ 8685 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 963+ 8686 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 963+ 868A 41 54       >
 963+ 868C             >                org     $-1                 // alter last byte of Name just above to set
 963+ 868B D4          >                db      {b $} | END_BIT     // msb as name end
 963+ 868C             >
 963+ 868C 74 86       >                dw      last_NFA            // Link to previous definition Name
 963+ 868E             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 963+ 868E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 963+ 8691             >
 963+ 8691             >
 963+ 8691             >                endif           ; ok        // for other definitions it "points" the correct handler
 963+ 8691             >                // Use of "; ok" to suppress "warning[fwdref]"
 963+ 8691             >
 963+ 8691             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 964+ 8691 3D 86                        dw      AGAIN
 965+ 8693              //              dw      TWO_MINUS
 966+ 8693 DA 85                        dw      THEN
 967+ 8695 3F 69                        dw      EXIT
 968+ 8697
 969+ 8697              //  ______________________________________________________________________
 970+ 8697              //
 971+ 8697              // ?do-
 972+ 8697              // special version of "BACK" used by ?DO and LOOP
 973+ 8697                              Colon_Def C_DO_BACK, "?DO-", is_normal
 973+ 8697             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 973+ 8697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 973+ 8697             >
 973+ 8697             >                // dummy db directives used to calculate length of namec
 973+ 8697 3F 44 4F 2D >                db      "?DO-"
 973+ 869B             >len_NFA         defl    $ - temp_NFA
 973+ 869B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 973+ 8697             >
 973+ 8697 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 973+ 8698 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 973+ 869C             >                org     $-1                 // alter last byte of Name just above to set
 973+ 869B AD          >                db      {b $} | END_BIT     // msb as name end
 973+ 869C             >
 973+ 869C 85 86       >                dw      last_NFA            // Link to previous definition Name
 973+ 869E             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 973+ 869E CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 973+ 86A1             >
 973+ 86A1             >
 973+ 86A1             >                endif           ; ok        // for other definitions it "points" the correct handler
 973+ 86A1             >                // Use of "; ok" to suppress "warning[fwdref]"
 973+ 86A1             >
 973+ 86A1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 974+ 86A1 B2 85                        dw      BACK
 975+ 86A3              CDoBack_Begin:
 976+ 86A3 0F 69 D3 6D                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 976+ 86A7 FF 6A 9D 6E
 977+ 86AB 1C 64                        dw      ZBRANCH
 978+ 86AD 0A 00                        dw      CDoBack_While - $
 979+ 86AF E7 69 DA 85                  dw          TWO_PLUS, THEN
 980+ 86B3 07 64                        dw      BRANCH
 981+ 86B5 EE FF                        dw      CDoBack_Begin - $
 982+ 86B7              CDoBack_While:
 983+ 86B7 79 70 D3 6D                  dw      QCSP, CSP, STORE
 983+ 86BB 0A 6B
 984+ 86BD 3F 69                        dw      EXIT
 985+ 86BF
 986+ 86BF              //  ______________________________________________________________________
 987+ 86BF              //
 988+ 86BF              // do
 989+ 86BF              // DO  ... LOOP
 990+ 86BF              // DO  ... n +LOOP
 991+ 86BF              // ?DO ... LOOP
 992+ 86BF              // ?DO ... n +LOOP
 993+ 86BF                              Colon_Def DO, "DO", is_immediate
 993+ 86BF             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 993+ 86BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 993+ 86BF             >
 993+ 86BF             >                // dummy db directives used to calculate length of namec
 993+ 86BF 44 4F       >                db      "DO"
 993+ 86C1             >len_NFA         defl    $ - temp_NFA
 993+ 86C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 993+ 86BF             >
 993+ 86BF C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 993+ 86C0 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 993+ 86C2             >                org     $-1                 // alter last byte of Name just above to set
 993+ 86C1 CF          >                db      {b $} | END_BIT     // msb as name end
 993+ 86C2             >
 993+ 86C2 97 86       >                dw      last_NFA            // Link to previous definition Name
 993+ 86C4             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 993+ 86C4 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 993+ 86C7             >
 993+ 86C7             >
 993+ 86C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 993+ 86C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 993+ 86C7             >
 993+ 86C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 994+ 86C7 B2 70 70 64                  dw      COMPILE, C_DO
 995+ 86CB D3 6D FF 6A                  dw      CSP, FETCH, STORE_CSP
 995+ 86CF 05 70
 996+ 86D1 4D 6E 5E 6C                  dw      HERE, THREE
 997+ 86D5 3F 69                        dw      EXIT
 998+ 86D7
 999+ 86D7              //  ______________________________________________________________________
1000+ 86D7              //
1001+ 86D7              // loop
1002+ 86D7                              Colon_Def LOOP, "LOOP", is_immediate
1002+ 86D7             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
1002+ 86D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1002+ 86D7             >
1002+ 86D7             >                // dummy db directives used to calculate length of namec
1002+ 86D7 4C 4F 4F 50 >                db      "LOOP"
1002+ 86DB             >len_NFA         defl    $ - temp_NFA
1002+ 86DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1002+ 86D7             >
1002+ 86D7 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1002+ 86D8 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
1002+ 86DC             >                org     $-1                 // alter last byte of Name just above to set
1002+ 86DB D0          >                db      {b $} | END_BIT     // msb as name end
1002+ 86DC             >
1002+ 86DC BF 86       >                dw      last_NFA            // Link to previous definition Name
1002+ 86DE             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1002+ 86DE CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1002+ 86E1             >
1002+ 86E1             >
1002+ 86E1             >                endif           ; ok        // for other definitions it "points" the correct handler
1002+ 86E1             >                // Use of "; ok" to suppress "warning[fwdref]"
1002+ 86E1             >
1002+ 86E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1003+ 86E1 5E 6C 65 70                  dw      THREE, QPAIRS
1004+ 86E5 B2 70 F8 63                  dw      COMPILE, C_LOOP
1005+ 86E9 9E 86                        dw      C_DO_BACK
1006+ 86EB 3F 69                        dw      EXIT
1007+ 86ED
1008+ 86ED              //  ______________________________________________________________________
1009+ 86ED              //
1010+ 86ED              // +loop
1011+ 86ED                              Colon_Def PLOOP, "+LOOP", is_immediate
1011+ 86ED             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
1011+ 86ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1011+ 86ED             >
1011+ 86ED             >                // dummy db directives used to calculate length of namec
1011+ 86ED 2B 4C 4F 4F >                db      "+LOOP"
1011+ 86F1 50          >
1011+ 86F2             >len_NFA         defl    $ - temp_NFA
1011+ 86F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1011+ 86ED             >
1011+ 86ED C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1011+ 86EE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
1011+ 86F2 50          >
1011+ 86F3             >                org     $-1                 // alter last byte of Name just above to set
1011+ 86F2 D0          >                db      {b $} | END_BIT     // msb as name end
1011+ 86F3             >
1011+ 86F3 D7 86       >                dw      last_NFA            // Link to previous definition Name
1011+ 86F5             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1011+ 86F5 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1011+ 86F8             >
1011+ 86F8             >
1011+ 86F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1011+ 86F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1011+ 86F8             >
1011+ 86F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1012+ 86F8 5E 6C 65 70                  dw      THREE, QPAIRS
1013+ 86FC B2 70 C3 63                  dw      COMPILE, C_PLOOP
1014+ 8700 9E 86                        dw      C_DO_BACK
1015+ 8702 3F 69                        dw      EXIT
1016+ 8704
1017+ 8704              //  ______________________________________________________________________
1018+ 8704              //
1019+ 8704              // ?do
1020+ 8704                              Colon_Def QDO, "?DO", is_immediate
1020+ 8704             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1020+ 8704             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1020+ 8704             >
1020+ 8704             >                // dummy db directives used to calculate length of namec
1020+ 8704 3F 44 4F    >                db      "?DO"
1020+ 8707             >len_NFA         defl    $ - temp_NFA
1020+ 8707             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1020+ 8704             >
1020+ 8704 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1020+ 8705 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1020+ 8708             >                org     $-1                 // alter last byte of Name just above to set
1020+ 8707 CF          >                db      {b $} | END_BIT     // msb as name end
1020+ 8708             >
1020+ 8708 ED 86       >                dw      last_NFA            // Link to previous definition Name
1020+ 870A             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1020+ 870A CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1020+ 870D             >
1020+ 870D             >
1020+ 870D             >                endif           ; ok        // for other definitions it "points" the correct handler
1020+ 870D             >                // Use of "; ok" to suppress "warning[fwdref]"
1020+ 870D             >
1020+ 870D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1021+ 870D B2 70 45 64                  dw      COMPILE, C_Q_DO
1022+ 8711 D3 6D FF 6A                  dw      CSP, FETCH, STORE_CSP
1022+ 8715 05 70
1023+ 8717 4D 6E 43 6C                  dw      HERE, ZERO, COMMA, ZERO
1023+ 871B 6B 6E 43 6C
1024+ 871F 4D 6E 5E 6C                  dw      HERE, THREE
1025+ 8723 3F 69                        dw      EXIT
1026+ 8725
1027+ 8725              Latest_Definition:
1028+ 8725              //  ______________________________________________________________________
1029+ 8725              //
1030+ 8725              // \
1031+ 8725                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1031+ 8725             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1031+ 8725             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1031+ 8725             >
1031+ 8725             >                // dummy db directives used to calculate length of namec
1031+ 8725 5C          >                db      "\\"
1031+ 8726             >len_NFA         defl    $ - temp_NFA
1031+ 8726             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1031+ 8725             >
1031+ 8725 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1031+ 8726 5C          >                db      "\\"               // name string in 7-bit ascii, but
1031+ 8727             >                org     $-1                 // alter last byte of Name just above to set
1031+ 8726 DC          >                db      {b $} | END_BIT     // msb as name end
1031+ 8727             >
1031+ 8727 04 87       >                dw      last_NFA            // Link to previous definition Name
1031+ 8729             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1031+ 8729 CD CB 6B    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1031+ 872C             >
1031+ 872C             >
1031+ 872C             >                endif           ; ok        // for other definitions it "points" the correct handler
1031+ 872C             >                // Use of "; ok" to suppress "warning[fwdref]"
1031+ 872C             >
1031+ 872C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1032+ 872C 57 6D FF 6A                  dw      BLK, FETCH
1033+ 8730 1C 64                        dw      ZBRANCH
1034+ 8732 30 00                        dw      Backslash_Else_1 - $
1035+ 8734 57 6D FF 6A                  dw          BLK, FETCH, ONE, GREATER  // BLOCK 1 is used as temp-line in INCLUDE file
1035+ 8738 4C 6C DA 6E
1036+ 873C 1C 64                        dw          ZBRANCH
1037+ 873E 18 00                        dw          Backslash_Else_2 - $
1038+ 8740 61 6D FF 6A                  dw              TO_IN, FETCH, CL, MOD, CL
1038+ 8744 7D 6C 44 7A
1038+ 8748 7D 6C
1039+ 874A 73 6A 9D 6E                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1039+ 874E 61 6D E0 6A
1040+ 8752 07 64                        dw          BRANCH
1041+ 8754 0A 00                        dw          Backslash_Endif_2 - $
1042+ 8756              Backslash_Else_2:
1043+ 8756 8A 6C 00 6A                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1043+ 875A 61 6D 0A 6B
1044+ 875E              Backslash_Endif_2:
1045+ 875E 07 64                        dw      BRANCH
1046+ 8760 0A 00                        dw      Backslash_Endif_1 - $
1047+ 8762              Backslash_Else_1:
1048+ 8762 A5 63 50 00                  dw          LIT, 80, TO_IN, STORE
1048+ 8766 61 6D 0A 6B
1049+ 876A              Backslash_Endif_1:
1050+ 876A 3F 69                        dw      EXIT
1051+ 876C
1052+ 876C              Fence_Word:
1053+ 876C              //  ______________________________________________________________________
1054+ 876C              //
1055+ 876C
1056+ 876C 00           Here_Dictionary db      0
1057+ 876D
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/L3.asm
 115  876D
 116  876D              // now we save the compiled file so we can either run it or debug it
 117  876D                              SAVENEX OPEN "output/main.nex", ORIGIN
 118  876D                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 119  876D                              SAVENEX CFG  0
 120  876D                              SAVENEX BANK 2, 0
 121  876D                              SAVENEX AUTO
 122  876D                              SAVENEX CLOSE
 123  876D
 124  876D              //              PAGE 7 ;set 7 page to current slot
 125  876D              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 126  876D              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 127  876D
 128  876D                              SAVETAP "output/F15f.tap", CODE, "forth15f", ORIGIN, 10000
 129  876D
 130  876D                              SAVEBIN "output/forth15f.bin", ORIGIN, 10000
 131  876D
 132  876D                              END
# file closed: C:\Zx\CSpect\Projects\vForth15_DIRECT/source/main.asm
