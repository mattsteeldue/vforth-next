# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.7 NextZXOS version
   7  0000              //  Basic Loader version
   8  0000              //  build 20240815
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2024 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     0
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $6366   -$80                   // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $0002              // HP before compilation
  89  0000 ~            Heap_offset     defl    0                // given by compilation
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000              ORIGIN          equ     $6366                   // binary and Tape
  96  0000              // ORIGIN          equ     $9A93                // binary and Tape
  97  0000              Heap_Ptr        defl    $0002
  98  0000              Heap_offset     defl     0
  99  0000
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000 ~            ORIGIN          equ     $8080                   // for DeZog
 105  0000 ~            Heap_Ptr        defl    $0002
 106  0000 ~            Heap_offset     defl     0
 107  0000 ~
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  6366
 115  6366                              if ( -1 == DEBUGGING )
 116  6366 ~                            ds 128                            // for binary comparison
 117  6366                              endif
 118  6366
 119  6366              //  ______________________________________________________________________
 120  6366              //
 121  6366              //  Naming convention for Label vs Forth correspondance
 122  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  6366              //    - Leading "0" is converted into "Z_"
 124  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  6366              //    - Equal sign "=" is converted in EQUAL
 131  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  6366              //    - Exclamation mark "!" is converted in STORE
 135  6366              //    - At-Sign "@" is converted in FETCH
 136  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  6366
 138  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366              RAMTOP          equ     $5CB2
  22+ 6366              TSTACK          equ     $5C00                   // TSTACK
  23+ 6366              // FSTACK          ecu     $4000 - 8
  24+ 6366              //  ______________________________________________________________________
  25+ 6366              //
  26+ 6366              // Flag constants
  27+ 6366              TRUE_FLAG       equ     $FFFF
  28+ 6366              FALSE_FLAG      equ     $0000
  29+ 6366
  30+ 6366              //  ______________________________________________________________________
  31+ 6366              //
  32+ 6366              // Ascii char constants
  33+ 6366              NUL_CHAR        equ     $00
  34+ 6366              COMMA_CHAR      equ     $06
  35+ 6366              BACKSPACE_CHAR  equ     $08
  36+ 6366              CR_CHAR         equ     $0D
  37+ 6366              BLANK_CHAR      equ     $20
  38+ 6366              QUOTE_CHAR      equ     "'"
  39+ 6366              DQUOTE_CHAR     equ     '"'
  40+ 6366              UNDERSCORE_CHAR equ     $5F
  41+ 6366              SOLIDBLOCK_CHAR equ     $8F
  42+ 6366              HALFBLOCK_CHAR  equ     $8C
  43+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 6366
  46+ 6366
  47+ 6366              //  ______________________________________________________________________
  48+ 6366              //
  49+ 6366
  50+ 6366                              // emulate something like:  ld hl,rp
  51+ 6366              ldhlrp          macro
  52+ 6366 ~                            ld      hl,(RP_Pointer)
  53+ 6366                              endm
  54+ 6366
  55+ 6366                              // emulate something like:  ld rp,hl
  56+ 6366              ldrphl          macro
  57+ 6366 ~                            ld      (RP_Pointer),hl
  58+ 6366                              endm
  59+ 6366
  60+ 6366              //  ______________________________________________________________________
  61+ 6366              //
  62+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 6366              next            macro
  64+ 6366 ~                            jp      (ix)
  65+ 6366                              endm
  66+ 6366
  67+ 6366              psh1            macro
  68+ 6366 ~                            push    hl
  69+ 6366 ~                            jp      (ix)
  70+ 6366                              endm
  71+ 6366
  72+ 6366              psh2            macro
  73+ 6366 ~                            push    de
  74+ 6366 ~                            push    hl
  75+ 6366 ~                            jp      (ix)
  76+ 6366                              endm
  77+ 6366
  78+ 6366              //  ______________________________________________________________________
  79+ 6366              //
  80+ 6366              // Bit constants in length-byte
  81+ 6366
  82+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  83+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 6366              END_BIT         equ     %10000000               // $80
  85+ 6366
  86+ 6366
  87+ 6366              //  ______________________________________________________________________
  88+ 6366              //
  89+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 6366              //  pointers
  91+ 6366              temp_NFA        defl    0
  92+ 6366              last_NFA        defl    0
  93+ 6366              len_NFA         defl    0
  94+ 6366
  95+ 6366              Dict_Ptr        defl    0
  96+ 6366              // Heap_Ptr        defl    $0002
  97+ 6366              Prev_Ptr        defl    0
  98+ 6366              mirror_Ptr      defl    0
  99+ 6366
 100+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 6366
 104+ 6366
 105+ 6366              Behave          macro   xp
 106+ 6366 ~            temp_PTR        defl    $                   // save this org
 107+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 6366 ~                            dw      xp
 109+ 6366 ~                            org     temp_PTR
 110+ 6366                              endm
 111+ 6366
 112+ 6366              //  ______________________________________________________________________
 113+ 6366              //
 114+ 6366              //  Create a new "low-level" definition
 115+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 6366              //  This macro acts much like the standard Forth definition CREATE
 122+ 6366
 123+ 6366              New_Def         macro   label, namec, runcode, bits
 124+ 6366 ~
 125+ 6366 ~            Dict_Ptr        defl    $
 126+ 6366 ~
 127+ 6366 ~            //              ______________________________________________________________________
 128+ 6366 ~            //              Heap part
 129+ 6366 ~
 130+ 6366 ~
 131+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 6366 ~
 133+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6366 ~            Latest_Definition defl  Heap_Ptr
 135+ 6366 ~
 136+ 6366 ~                            // dummy db directives used to calculate length of namec
 137+ 6366 ~                            db      namec
 138+ 6366 ~            len_NFA         defl    $ - temp_NFA
 139+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 6366 ~
 141+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 6366 ~
 146+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 6366 ~
 149+ 6366 ~            mirror_Ptr      defl    $
 150+ 6366 ~
 151+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 152+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 6366 ~
 154+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 6366 ~
 156+ 6366 ~            //              ______________________________________________________________________
 157+ 6366 ~            //              Dictionary part
 158+ 6366 ~
 159+ 6366 ~                            org     Dict_Ptr
 160+ 6366 ~
 161+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6366 ~
 163+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 6366 ~
 166+ 6366 ~
 167+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6366 ~
 170+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6366                              endm
 172+ 6366
 173+ 6366              //  ______________________________________________________________________
 174+ 6366              //
 175+ 6366              // Create a "constant"
 176+ 6366              // The constant value is compiled in first PFA cell
 177+ 6366              Constant_Def    macro   label, namec, constant_value
 178+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 6366 ~                            dw      constant_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "variable"
 185+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 6366              // this allow creation of "variables" which content is  of any length
 187+ 6366              Variable_Def    macro   label, namec, initial_value
 188+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 6366 ~                            dw      initial_value
 190+ 6366                              endm
 191+ 6366
 192+ 6366              //  ______________________________________________________________________
 193+ 6366              //
 194+ 6366              // Create a "user"
 195+ 6366              // It uses a single byte as offset to calculate the address of the variable
 196+ 6366              User_Def        macro   label, namec, offset_value
 197+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 6366 ~                            db      offset_value
 199+ 6366                              endm
 200+ 6366
 201+ 6366              //  ______________________________________________________________________
 202+ 6366              //
 203+ 6366              // Create a "colon-definition"
 204+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 206+ 6366              Colon_Def       macro   label, namec, bits
 207+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 6366                              endm
 209+ 6366
 210+ 6366              //  ______________________________________________________________________
 211+ 6366              //
 212+ 6366              // Create a "heap-string"
 213+ 6366              Start_Heap      macro
 214+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 215+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 6366 ~
 217+ 6366                              endm
 218+ 6366
 219+ 6366              End_Heap        macro
 220+ 6366 ~            Heap_Ptr        defl    $ - $E000
 221+ 6366 ~                            org     temp_ORG
 222+ 6366 ~
 223+ 6366                              endm
 224+ 6366
 225+ 6366
 226+ 6366              //  ______________________________________________________________________
 227+ 6366              //
 228+ 6366
 229+ 6366
 230+ 6366
 231+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 6366              USER_system:    equ     $D188               // User variables zone.
 235+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/system.asm
 139  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 22 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 22 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E 01 01        SP_Basic:       dw      $0101               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 EF 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 62 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 62 81        DP_origin       dw      Fence_Word
  38+ 6386 35 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C F5 0C        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 71                           db      113
  66+ E003 20 76 2D 46                  db      " v-Forth 1.7 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 37
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2024-08-15 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 34 2D 30 38
  67+ E044 2D 31 35 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2024 Matteo Vitturi ", $0D            // 27
  69+ E05B 30 2D 32 30
  69+ E05F 32 34 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20 0D
  70+ E072 07 00                        db      7,0
  71+ E074                              End_Heap
  71+ E074             >Heap_Ptr        defl    $ - $E000
  71+ E074             >                org     temp_ORG
  71+ 639A             >
  72+ 639A
  73+ 639A              //  ______________________________________________________________________
  74+ 639A
  75+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  76+ 639A              // instead of their equivalent long sequences.
  77+ 639A
  78+ 639A              //  ______________________________________________________________________
  79+ 639A
  80+ 639A              // address for "next" - inner interpreter
  81+ 639A              // This address must always be pointed by IX
  82+ 639A              // "next" macro simply does a  jp(ix)  instruction
  83+ 639A
  84+ 639A              // Psh2_Ptr:       push    de
  85+ 639A              // Psh1_Ptr:       push    hl
  86+ 639A
  87+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  88+ 639A
  89+ 639A                              if ( 1 == DEBUGGING )
  90+ 639A ~                            ld      hl, Next_Breakpoint_1
  91+ 639A ~                            and     a
  92+ 639A ~                            sbc     hl, bc
  93+ 639A ~                            jr      nz, Next_Continue
  94+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  95+ 639A                              endif
  96+ 639A
  97+ 639A              Next_Continue:
  98+ 639A 0A                           ld      a, (bc)
  99+ 639B 03                           inc     bc
 100+ 639C 6F                           ld      l, a
 101+ 639D 0A                           ld      a, (bc)
 102+ 639E 03                           inc     bc
 103+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 104+ 63A0
 105+ 63A0              // Execute xt i.e. CFA held in HL
 106+ 63A0              Exec_Ptr:
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0
 111+ 63A0 E9                           jp      (hl)                // and jump to it
 112+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 113+ 63A1
 114+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 115+ 63A1              // 0x00         n --      ( compile time )
 116+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 117+ 63A1              //              next
 118+ 63A1
 119+ 63A1              //  ______________________________________________________________________
 120+ 63A1              //
 121+ 63A1              // lit          -- x
 122+ 63A1              // puts on top of stack the value of the following word.
 123+ 63A1              // it is compiled in colon definition before a literal number
 124+ 63A1
 125+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 125+ 63A1             >
 125+ 63A1             >Dict_Ptr        defl    $
 125+ 63A1             >
 125+ 63A1             >//              ______________________________________________________________________
 125+ 63A1             >//              Heap part
 125+ 63A1             >
 125+ 63A1             >
 125+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E074             >
 125+ E074             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E074             >Latest_Definition defl  Heap_Ptr
 125+ E074             >
 125+ E074             >                // dummy db directives used to calculate length of namec
 125+ E074 4C 49 54    >                db      "LIT"
 125+ E077             >len_NFA         defl    $ - temp_NFA
 125+ E077             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E074             >
 125+ E074 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E075 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 125+ E078             >                org     $-1                 // alter last byte of Name just above to set
 125+ E077 D4          >                db      {b $} | END_BIT     // msb as name end
 125+ E078             >
 125+ E078 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E07A             >Prev_Ptr        defl    Heap_Ptr
 125+ E07A             >
 125+ E07A             >mirror_Ptr      defl    $
 125+ E07A             >
 125+ E07A A3 63       >                dw      Dict_Ptr + 2        // xt
 125+ E07C             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E07C             >
 125+ E07C             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E07C             >
 125+ E07C             >//              ______________________________________________________________________
 125+ E07C             >//              Dictionary part
 125+ E07C             >
 125+ E07C             >                org     Dict_Ptr
 125+ 63A1             >
 125+ 63A1 7A 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 63A3             >
 125+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 125+ 63A3 ~           >
 125+ 63A3 ~           >
 125+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 63A3             >
 125+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 63A3
 127+ 63A3 0A                           ld      a, (bc)
 128+ 63A4 03                           inc     bc
 129+ 63A5 6F                           ld      l, a
 130+ 63A6 0A                           ld      a, (bc)
 131+ 63A7 03                           inc     bc
 132+ 63A8 67                           ld      h, a
 133+ 63A9 E5                           push    hl
 134+ 63AA                              next
 134+ 63AA DD E9       >                jp      (ix)
 135+ 63AC
 136+ 63AC              //  ______________________________________________________________________
 137+ 63AC              //
 138+ 63AC              // execute      i*x xt -- j*x
 139+ 63AC              // execution token. usually xt is given by CFA
 140+ 63AC
 141+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 141+ 63AC             >
 141+ 63AC             >Dict_Ptr        defl    $
 141+ 63AC             >
 141+ 63AC             >//              ______________________________________________________________________
 141+ 63AC             >//              Heap part
 141+ 63AC             >
 141+ 63AC             >
 141+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 141+ E07C             >
 141+ E07C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 141+ E07C             >Latest_Definition defl  Heap_Ptr
 141+ E07C             >
 141+ E07C             >                // dummy db directives used to calculate length of namec
 141+ E07C 45 58 45 43 >                db      "EXECUTE"
 141+ E080 55 54 45    >
 141+ E083             >len_NFA         defl    $ - temp_NFA
 141+ E083             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 141+ E07C             >
 141+ E07C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 141+ E07D 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 141+ E081 55 54 45    >
 141+ E084             >                org     $-1                 // alter last byte of Name just above to set
 141+ E083 C5          >                db      {b $} | END_BIT     // msb as name end
 141+ E084             >
 141+ E084 74 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 141+ E086             >Prev_Ptr        defl    Heap_Ptr
 141+ E086             >
 141+ E086             >mirror_Ptr      defl    $
 141+ E086             >
 141+ E086 AE 63       >                dw      Dict_Ptr + 2        // xt
 141+ E088             >Heap_Ptr        defl    $ - $E000           // save current HP
 141+ E088             >
 141+ E088             >Current_HP      defl  $ - $E000             // used to set HP once!
 141+ E088             >
 141+ E088             >//              ______________________________________________________________________
 141+ E088             >//              Dictionary part
 141+ E088             >
 141+ E088             >                org     Dict_Ptr
 141+ 63AC             >
 141+ 63AC 86 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 141+ 63AE             >
 141+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 141+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 141+ 63AE ~           >
 141+ 63AE ~           >
 141+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 141+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 141+ 63AE             >
 141+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 142+ 63AE C9                           ret
 143+ 63AF
 144+ 63AF              //  ______________________________________________________________________
 145+ 63AF              //
 146+ 63AF              // brk
 147+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 148+ 63AF              //              next
 149+ 63AF
 150+ 63AF
 151+ 63AF
 152+ 63AF              //  ______________________________________________________________________
 153+ 63AF              //
 154+ 63AF              // (+loop)      n --
 155+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 156+ 63AF              // keep track of index and limit, they are accessed via I and I'
 157+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 158+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 159+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 160+ 63AF              // parameters and continue execution immediately following the loop.
 161+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 161+ 63AF             >
 161+ 63AF             >Dict_Ptr        defl    $
 161+ 63AF             >
 161+ 63AF             >//              ______________________________________________________________________
 161+ 63AF             >//              Heap part
 161+ 63AF             >
 161+ 63AF             >
 161+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E088             >
 161+ E088             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E088             >Latest_Definition defl  Heap_Ptr
 161+ E088             >
 161+ E088             >                // dummy db directives used to calculate length of namec
 161+ E088 28 2B 4C 4F >                db      "(+LOOP)"
 161+ E08C 4F 50 29    >
 161+ E08F             >len_NFA         defl    $ - temp_NFA
 161+ E08F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E088             >
 161+ E088 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E089 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 161+ E08D 4F 50 29    >
 161+ E090             >                org     $-1                 // alter last byte of Name just above to set
 161+ E08F A9          >                db      {b $} | END_BIT     // msb as name end
 161+ E090             >
 161+ E090 7C 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E092             >Prev_Ptr        defl    Heap_Ptr
 161+ E092             >
 161+ E092             >mirror_Ptr      defl    $
 161+ E092             >
 161+ E092 B1 63       >                dw      Dict_Ptr + 2        // xt
 161+ E094             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E094             >
 161+ E094             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E094             >
 161+ E094             >//              ______________________________________________________________________
 161+ E094             >//              Dictionary part
 161+ E094             >
 161+ E094             >                org     Dict_Ptr
 161+ 63AF             >
 161+ 63AF 92 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 63B1             >
 161+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 161+ 63B1 ~           >
 161+ 63B1 ~           >
 161+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 63B1             >
 161+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 63B1
 163+ 63B1              Loop_Ptr:
 164+ 63B1 D5                           push    de
 165+ 63B2 D9                           exx
 166+ 63B3 E1                           pop     hl                  // HL is RP
 167+ 63B4 D1                           pop     de                  // DE get increment
 168+ 63B5 42                           ld      b, d                // bc is increment also
 169+ 63B6 4B                           ld      c, e
 170+ 63B7
 171+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 172+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 173+ 63B9 81                           add     c
 174+ 63BA 77                           ld      (hl), a
 175+ 63BB 23                           inc     hl
 176+ 63BC 56                           ld      d, (hl)
 177+ 63BD 7A                           ld      a, d
 178+ 63BE 88                           adc     b
 179+ 63BF 77                           ld      (hl),a
 180+ 63C0 23                           inc     hl
 181+ 63C1
 182+ 63C1 7B                           ld      a, e
 183+ 63C2 96                           sub     (hl)
 184+ 63C3 5F                           ld      e, a
 185+ 63C4 23                           inc     hl
 186+ 63C5 7A                           ld      a, d
 187+ 63C6 9E                           sbc     (hl)
 188+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 189+ 63C8
 190+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 191+ 63C9 09                           add     hl, bc
 192+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 193+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 194+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 195+ 63CF              Loop_NegativeIncrement:
 196+ 63CF 38 0C                        jr      c, Loop_Endif
 197+ 63D1 D9                               exx                     // restore IP and RP
 198+ 63D2              Branch_Ptr:
 199+ 63D2 0A                               ld      a, (bc)
 200+ 63D3 6F                               ld      l, a
 201+ 63D4 03                               inc     bc
 202+ 63D5 0A                               ld      a, (bc)
 203+ 63D6 67                               ld      h, a
 204+ 63D7 0B                               dec     bc
 205+ 63D8 09                               add     hl, bc
 206+ 63D9 4D                               ld      c, l
 207+ 63DA 44                               ld      b, h
 208+ 63DB                                  next
 208+ 63DB DD E9       >                jp      (ix)
 209+ 63DD              Loop_Endif:
 210+ 63DD 13                           inc     de                  // keep    RP+4 (exit from loop)
 211+ 63DE D5                           push    de
 212+ 63DF D9                           exx
 213+ 63E0 D1                           pop     de
 214+ 63E1              End_Loop_Ptr:
 215+ 63E1 03                           inc     bc                  // skip branch-style offset
 216+ 63E2 03                           inc     bc
 217+ 63E3                              next
 217+ 63E3 DD E9       >                jp      (ix)
 218+ 63E5
 219+ 63E5              //  ______________________________________________________________________
 220+ 63E5              //
 221+ 63E5              // (loop)       n --
 222+ 63E5              // same as (LOOP) but index is incremented by 1
 223+ 63E5              // compiled by LOOP.
 224+ 63E5                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 224+ 63E5             >
 224+ 63E5             >Dict_Ptr        defl    $
 224+ 63E5             >
 224+ 63E5             >//              ______________________________________________________________________
 224+ 63E5             >//              Heap part
 224+ 63E5             >
 224+ 63E5             >
 224+ 63E5             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E094             >
 224+ E094             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E094             >Latest_Definition defl  Heap_Ptr
 224+ E094             >
 224+ E094             >                // dummy db directives used to calculate length of namec
 224+ E094 28 4C 4F 4F >                db      "(LOOP)"
 224+ E098 50 29       >
 224+ E09A             >len_NFA         defl    $ - temp_NFA
 224+ E09A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E094             >
 224+ E094 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E095 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 224+ E099 50 29       >
 224+ E09B             >                org     $-1                 // alter last byte of Name just above to set
 224+ E09A A9          >                db      {b $} | END_BIT     // msb as name end
 224+ E09B             >
 224+ E09B 88 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E09D             >Prev_Ptr        defl    Heap_Ptr
 224+ E09D             >
 224+ E09D             >mirror_Ptr      defl    $
 224+ E09D             >
 224+ E09D E7 63       >                dw      Dict_Ptr + 2        // xt
 224+ E09F             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E09F             >
 224+ E09F             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E09F             >
 224+ E09F             >//              ______________________________________________________________________
 224+ E09F             >//              Dictionary part
 224+ E09F             >
 224+ E09F             >                org     Dict_Ptr
 224+ 63E5             >
 224+ 63E5 9D 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 63E7             >
 224+ 63E7             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 63E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 224+ 63E7 ~           >
 224+ 63E7 ~           >
 224+ 63E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 63E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 63E7             >
 224+ 63E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 63E7 ED 8A 00 01                  push    1
 226+ 63EB 18 C4                        jr      Loop_Ptr
 227+ 63ED
 228+ 63ED              //  ______________________________________________________________________
 229+ 63ED              //
 230+ 63ED              // branch       --
 231+ 63ED              // unconditional branch in colon definition using the following cell as an offset from current IP value
 232+ 63ED              // compiled by ELSE, AGAIN and some other immediate words
 233+ 63ED
 234+ 63ED                              New_Def BRANCH, "BRANCH", is_code, is_normal
 234+ 63ED             >
 234+ 63ED             >Dict_Ptr        defl    $
 234+ 63ED             >
 234+ 63ED             >//              ______________________________________________________________________
 234+ 63ED             >//              Heap part
 234+ 63ED             >
 234+ 63ED             >
 234+ 63ED             >                org     (Heap_Ptr & $1FFF) + $E000
 234+ E09F             >
 234+ E09F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ E09F             >Latest_Definition defl  Heap_Ptr
 234+ E09F             >
 234+ E09F             >                // dummy db directives used to calculate length of namec
 234+ E09F 42 52 41 4E >                db      "BRANCH"
 234+ E0A3 43 48       >
 234+ E0A5             >len_NFA         defl    $ - temp_NFA
 234+ E0A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ E09F             >
 234+ E09F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ E0A0 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 234+ E0A4 43 48       >
 234+ E0A6             >                org     $-1                 // alter last byte of Name just above to set
 234+ E0A5 C8          >                db      {b $} | END_BIT     // msb as name end
 234+ E0A6             >
 234+ E0A6 94 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 234+ E0A8             >Prev_Ptr        defl    Heap_Ptr
 234+ E0A8             >
 234+ E0A8             >mirror_Ptr      defl    $
 234+ E0A8             >
 234+ E0A8 EF 63       >                dw      Dict_Ptr + 2        // xt
 234+ E0AA             >Heap_Ptr        defl    $ - $E000           // save current HP
 234+ E0AA             >
 234+ E0AA             >Current_HP      defl  $ - $E000             // used to set HP once!
 234+ E0AA             >
 234+ E0AA             >//              ______________________________________________________________________
 234+ E0AA             >//              Dictionary part
 234+ E0AA             >
 234+ E0AA             >                org     Dict_Ptr
 234+ 63ED             >
 234+ 63ED A8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 234+ 63EF             >
 234+ 63EF             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 63EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 234+ 63EF ~           >
 234+ 63EF ~           >
 234+ 63EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 63EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 63EF             >
 234+ 63EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 63EF 18 E1                        jr Branch_Ptr
 236+ 63F1
 237+ 63F1
 238+ 63F1              //  ______________________________________________________________________
 239+ 63F1              //
 240+ 63F1              // 0branch      f --
 241+ 63F1              // conditional branch if the top-of-stack is ZERO or FALSE.
 242+ 63F1              // compiled by IF, UNTIL and some other immediate words
 243+ 63F1
 244+ 63F1                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 244+ 63F1             >
 244+ 63F1             >Dict_Ptr        defl    $
 244+ 63F1             >
 244+ 63F1             >//              ______________________________________________________________________
 244+ 63F1             >//              Heap part
 244+ 63F1             >
 244+ 63F1             >
 244+ 63F1             >                org     (Heap_Ptr & $1FFF) + $E000
 244+ E0AA             >
 244+ E0AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 244+ E0AA             >Latest_Definition defl  Heap_Ptr
 244+ E0AA             >
 244+ E0AA             >                // dummy db directives used to calculate length of namec
 244+ E0AA 30 42 52 41 >                db      "0BRANCH"
 244+ E0AE 4E 43 48    >
 244+ E0B1             >len_NFA         defl    $ - temp_NFA
 244+ E0B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 244+ E0AA             >
 244+ E0AA 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 244+ E0AB 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 244+ E0AF 4E 43 48    >
 244+ E0B2             >                org     $-1                 // alter last byte of Name just above to set
 244+ E0B1 C8          >                db      {b $} | END_BIT     // msb as name end
 244+ E0B2             >
 244+ E0B2 9F 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 244+ E0B4             >Prev_Ptr        defl    Heap_Ptr
 244+ E0B4             >
 244+ E0B4             >mirror_Ptr      defl    $
 244+ E0B4             >
 244+ E0B4 F3 63       >                dw      Dict_Ptr + 2        // xt
 244+ E0B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 244+ E0B6             >
 244+ E0B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 244+ E0B6             >
 244+ E0B6             >//              ______________________________________________________________________
 244+ E0B6             >//              Dictionary part
 244+ E0B6             >
 244+ E0B6             >                org     Dict_Ptr
 244+ 63F1             >
 244+ 63F1 B4 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 244+ 63F3             >
 244+ 63F3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 244+ 63F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 244+ 63F3 ~           >
 244+ 63F3 ~           >
 244+ 63F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 244+ 63F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 244+ 63F3             >
 244+ 63F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 245+ 63F3              ZBranch_Ptr:
 246+ 63F3 E1                           pop     hl
 247+ 63F4 7D                           ld      a, l
 248+ 63F5 B4                           or      h
 249+ 63F6 28 DA                        jr      z, Branch_Ptr
 250+ 63F8 18 E7                        jr      End_Loop_Ptr
 251+ 63FA              //              inc     bc                  // skip branch-style offseet
 252+ 63FA              //              inc     bc
 253+ 63FA              //              next
 254+ 63FA
 255+ 63FA              //  ______________________________________________________________________
 256+ 63FA              //
 257+ 63FA              // (leave)        --
 258+ 63FA              // compiled by LEAVE
 259+ 63FA              // this forces to exit from loop and jump past
 260+ 63FA                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 260+ 63FA             >
 260+ 63FA             >Dict_Ptr        defl    $
 260+ 63FA             >
 260+ 63FA             >//              ______________________________________________________________________
 260+ 63FA             >//              Heap part
 260+ 63FA             >
 260+ 63FA             >
 260+ 63FA             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E0B6             >
 260+ E0B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E0B6             >Latest_Definition defl  Heap_Ptr
 260+ E0B6             >
 260+ E0B6             >                // dummy db directives used to calculate length of namec
 260+ E0B6 28 4C 45 41 >                db      "(LEAVE)"
 260+ E0BA 56 45 29    >
 260+ E0BD             >len_NFA         defl    $ - temp_NFA
 260+ E0BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E0B6             >
 260+ E0B6 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E0B7 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 260+ E0BB 56 45 29    >
 260+ E0BE             >                org     $-1                 // alter last byte of Name just above to set
 260+ E0BD A9          >                db      {b $} | END_BIT     // msb as name end
 260+ E0BE             >
 260+ E0BE AA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E0C0             >Prev_Ptr        defl    Heap_Ptr
 260+ E0C0             >
 260+ E0C0             >mirror_Ptr      defl    $
 260+ E0C0             >
 260+ E0C0 FC 63       >                dw      Dict_Ptr + 2        // xt
 260+ E0C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E0C2             >
 260+ E0C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E0C2             >
 260+ E0C2             >//              ______________________________________________________________________
 260+ E0C2             >//              Dictionary part
 260+ E0C2             >
 260+ E0C2             >                org     Dict_Ptr
 260+ 63FA             >
 260+ 63FA C0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 63FC             >
 260+ 63FC             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 63FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 260+ 63FC ~           >
 260+ 63FC ~           >
 260+ 63FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 63FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 63FC             >
 260+ 63FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 63FC                              // ex      de, hl
 262+ 63FC                              // *** ldhlrp
 263+ 63FC 3E 04                        ld      a, 4
 264+ 63FE ED 32                        add     de, a
 265+ 6400                              // *** ldrphl
 266+ 6400                              // ex      de, hl
 267+ 6400 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 268+ 6402                              next
 268+ 6402 DD E9       >                jp      (ix)
 269+ 6404
 270+ 6404              //  ______________________________________________________________________
 271+ 6404              //
 272+ 6404              // (?do)        lim ind --
 273+ 6404              // compiled by ?DO to make a loop checking for lim == ind first
 274+ 6404              // at run-time (?DO) must be followed by a BRANCH offset
 275+ 6404              // used to skip the loop if lim == ind
 276+ 6404                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 276+ 6404             >
 276+ 6404             >Dict_Ptr        defl    $
 276+ 6404             >
 276+ 6404             >//              ______________________________________________________________________
 276+ 6404             >//              Heap part
 276+ 6404             >
 276+ 6404             >
 276+ 6404             >                org     (Heap_Ptr & $1FFF) + $E000
 276+ E0C2             >
 276+ E0C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 276+ E0C2             >Latest_Definition defl  Heap_Ptr
 276+ E0C2             >
 276+ E0C2             >                // dummy db directives used to calculate length of namec
 276+ E0C2 28 3F 44 4F >                db      "(?DO)"
 276+ E0C6 29          >
 276+ E0C7             >len_NFA         defl    $ - temp_NFA
 276+ E0C7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 276+ E0C2             >
 276+ E0C2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 276+ E0C3 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 276+ E0C7 29          >
 276+ E0C8             >                org     $-1                 // alter last byte of Name just above to set
 276+ E0C7 A9          >                db      {b $} | END_BIT     // msb as name end
 276+ E0C8             >
 276+ E0C8 B6 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 276+ E0CA             >Prev_Ptr        defl    Heap_Ptr
 276+ E0CA             >
 276+ E0CA             >mirror_Ptr      defl    $
 276+ E0CA             >
 276+ E0CA 06 64       >                dw      Dict_Ptr + 2        // xt
 276+ E0CC             >Heap_Ptr        defl    $ - $E000           // save current HP
 276+ E0CC             >
 276+ E0CC             >Current_HP      defl  $ - $E000             // used to set HP once!
 276+ E0CC             >
 276+ E0CC             >//              ______________________________________________________________________
 276+ E0CC             >//              Dictionary part
 276+ E0CC             >
 276+ E0CC             >                org     Dict_Ptr
 276+ 6404             >
 276+ 6404 CA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 276+ 6406             >
 276+ 6406             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 276+ 6406 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 276+ 6406 ~           >
 276+ 6406 ~           >
 276+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 276+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 276+ 6406             >
 276+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 277+ 6406 D9                           exx
 278+ 6407 D1                            pop     de                  // de has the index
 279+ 6408 E1                            pop     hl                  // hl has the limit
 280+ 6409 44                            ld      b, h
 281+ 640A 4D                            ld      c, l
 282+ 640B E5                            push    hl                  // put them back to stack for later
 283+ 640C D5                            push    de
 284+ 640D A7                            and     a                   // reset carry flag
 285+ 640E ED 52                         sbc     hl, de              // compute limit - index
 286+ 6410 D9                           exx
 287+ 6411 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 288+ 6413 E1                               pop     hl
 289+ 6414 E1                               pop     hl
 290+ 6415 18 BB                            jr      Branch_Ptr          // perform branch consuming following cell
 291+ 6417              Do_Ptr:
 292+ 6417                              // *** ldhlrp                 // prepare RP
 293+ 6417                              // *** ex      de, hl
 294+ 6417                              // dec     de
 295+ 6417                              // dec     de
 296+ 6417                              // dec     de
 297+ 6417                              // dec     de
 298+ 6417 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 299+ 641B D5                           push    de                  // pass it to h'l'
 300+ 641C                              // *** ex      de, hl
 301+ 641C                              // *** ldrphl
 302+ 641C D9                           exx
 303+ 641D E1                            pop     hl
 304+ 641E
 305+ 641E                               // store index as top RP
 306+ 641E D1                            pop     de
 307+ 641F 73                            ld      (hl), e
 308+ 6420 23                            inc     hl
 309+ 6421 72                            ld      (hl), d
 310+ 6422 23                            inc     hl
 311+ 6423                               // stores lim as second from top RP
 312+ 6423 D1                            pop     de
 313+ 6424 73                            ld      (hl), e
 314+ 6425 23                            inc     hl
 315+ 6426 72                            ld      (hl), d
 316+ 6427 D9                           exx
 317+ 6428                              // skip branch-style offseet
 318+ 6428 03                           inc     bc
 319+ 6429 03                           inc     bc
 320+ 642A                              next
 320+ 642A DD E9       >                jp      (ix)
 321+ 642C
 322+ 642C              //  ______________________________________________________________________
 323+ 642C              //
 324+ 642C              // (do)        lim ind --
 325+ 642C              // compiled by DO to make a loop checking for lim == ind first
 326+ 642C              // this is a simpler version of (?DO)
 327+ 642C                              New_Def C_DO, "(DO)", is_code, is_normal
 327+ 642C             >
 327+ 642C             >Dict_Ptr        defl    $
 327+ 642C             >
 327+ 642C             >//              ______________________________________________________________________
 327+ 642C             >//              Heap part
 327+ 642C             >
 327+ 642C             >
 327+ 642C             >                org     (Heap_Ptr & $1FFF) + $E000
 327+ E0CC             >
 327+ E0CC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 327+ E0CC             >Latest_Definition defl  Heap_Ptr
 327+ E0CC             >
 327+ E0CC             >                // dummy db directives used to calculate length of namec
 327+ E0CC 28 44 4F 29 >                db      "(DO)"
 327+ E0D0             >len_NFA         defl    $ - temp_NFA
 327+ E0D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 327+ E0CC             >
 327+ E0CC 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 327+ E0CD 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 327+ E0D1             >                org     $-1                 // alter last byte of Name just above to set
 327+ E0D0 A9          >                db      {b $} | END_BIT     // msb as name end
 327+ E0D1             >
 327+ E0D1 C2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 327+ E0D3             >Prev_Ptr        defl    Heap_Ptr
 327+ E0D3             >
 327+ E0D3             >mirror_Ptr      defl    $
 327+ E0D3             >
 327+ E0D3 2E 64       >                dw      Dict_Ptr + 2        // xt
 327+ E0D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 327+ E0D5             >
 327+ E0D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 327+ E0D5             >
 327+ E0D5             >//              ______________________________________________________________________
 327+ E0D5             >//              Dictionary part
 327+ E0D5             >
 327+ E0D5             >                org     Dict_Ptr
 327+ 642C             >
 327+ 642C D3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 327+ 642E             >
 327+ 642E             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 327+ 642E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 327+ 642E ~           >
 327+ 642E ~           >
 327+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 327+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 327+ 642E             >
 327+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 328+ 642E 0B                           dec     bc                  // prepare IP beforehand
 329+ 642F 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 330+ 6430 18 E5                        jr      Do_Ptr
 331+ 6432
 332+ 6432              //  ______________________________________________________________________
 333+ 6432              //
 334+ 6432              // i            -- n
 335+ 6432              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 336+ 6432              // the current value of the index-loop
 337+ 6432                              New_Def I, "I", is_code, is_normal
 337+ 6432             >
 337+ 6432             >Dict_Ptr        defl    $
 337+ 6432             >
 337+ 6432             >//              ______________________________________________________________________
 337+ 6432             >//              Heap part
 337+ 6432             >
 337+ 6432             >
 337+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ E0D5             >
 337+ E0D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ E0D5             >Latest_Definition defl  Heap_Ptr
 337+ E0D5             >
 337+ E0D5             >                // dummy db directives used to calculate length of namec
 337+ E0D5 49          >                db      "I"
 337+ E0D6             >len_NFA         defl    $ - temp_NFA
 337+ E0D6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ E0D5             >
 337+ E0D5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ E0D6 49          >                db      "I"               // name string in 7-bit ascii, but
 337+ E0D7             >                org     $-1                 // alter last byte of Name just above to set
 337+ E0D6 C9          >                db      {b $} | END_BIT     // msb as name end
 337+ E0D7             >
 337+ E0D7 CC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ E0D9             >Prev_Ptr        defl    Heap_Ptr
 337+ E0D9             >
 337+ E0D9             >mirror_Ptr      defl    $
 337+ E0D9             >
 337+ E0D9 34 64       >                dw      Dict_Ptr + 2        // xt
 337+ E0DB             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ E0DB             >
 337+ E0DB             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ E0DB             >
 337+ E0DB             >//              ______________________________________________________________________
 337+ E0DB             >//              Dictionary part
 337+ E0DB             >
 337+ E0DB             >                org     Dict_Ptr
 337+ 6432             >
 337+ 6432 D9 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 6434             >
 337+ 6434             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 337+ 6434 ~           >
 337+ 6434 ~           >
 337+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 6434             >
 337+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 6434              I_Ptr:
 339+ 6434 62                           ld      h, d
 340+ 6435 6B                           ld      l, e
 341+ 6436                              // *** ldhlrp
 342+ 6436              I_Ptr_prime:
 343+ 6436 7E                           ld      a, (hl)
 344+ 6437 23                           inc     hl
 345+ 6438 66                           ld      h, (hl)
 346+ 6439 6F                           ld      l, a
 347+ 643A E5                           push    hl
 348+ 643B                              next
 348+ 643B DD E9       >                jp      (ix)
 349+ 643D
 350+ 643D
 351+ 643D              //  ______________________________________________________________________
 352+ 643D              //
 353+ 643D              // i'            -- n
 354+ 643D              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 355+ 643D              // the limit of the index-loop
 356+ 643D
 357+ 643D                              New_Def II, "I'", is_code, is_normal
 357+ 643D             >
 357+ 643D             >Dict_Ptr        defl    $
 357+ 643D             >
 357+ 643D             >//              ______________________________________________________________________
 357+ 643D             >//              Heap part
 357+ 643D             >
 357+ 643D             >
 357+ 643D             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E0DB             >
 357+ E0DB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E0DB             >Latest_Definition defl  Heap_Ptr
 357+ E0DB             >
 357+ E0DB             >                // dummy db directives used to calculate length of namec
 357+ E0DB 49 27       >                db      "I'"
 357+ E0DD             >len_NFA         defl    $ - temp_NFA
 357+ E0DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E0DB             >
 357+ E0DB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E0DC 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 357+ E0DE             >                org     $-1                 // alter last byte of Name just above to set
 357+ E0DD A7          >                db      {b $} | END_BIT     // msb as name end
 357+ E0DE             >
 357+ E0DE D5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E0E0             >Prev_Ptr        defl    Heap_Ptr
 357+ E0E0             >
 357+ E0E0             >mirror_Ptr      defl    $
 357+ E0E0             >
 357+ E0E0 3F 64       >                dw      Dict_Ptr + 2        // xt
 357+ E0E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E0E2             >
 357+ E0E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E0E2             >
 357+ E0E2             >//              ______________________________________________________________________
 357+ E0E2             >//              Dictionary part
 357+ E0E2             >
 357+ E0E2             >                org     Dict_Ptr
 357+ 643D             >
 357+ 643D E0 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 643F             >
 357+ 643F             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 643F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 357+ 643F ~           >
 357+ 643F ~           >
 357+ 643F             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 643F             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 643F             >
 357+ 643F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 643F 62                           ld      h, d
 359+ 6440 6B                           ld      l, e
 360+ 6441                              // *** ldhlrp
 361+ 6441 23                           inc     hl
 362+ 6442 23                           inc     hl
 363+ 6443 18 F1                        jr      I_Ptr_prime
 364+ 6445
 365+ 6445
 366+ 6445              //  ______________________________________________________________________
 367+ 6445              //
 368+ 6445              // digit        c n -- u tf  |  ff
 369+ 6445              // convert a character c using base n
 370+ 6445              // returns a unsigned number and a true flag
 371+ 6445              // or just a false flag if the conversion fails
 372+ 6445                              New_Def DIGIT, "DIGIT", is_code, is_normal
 372+ 6445             >
 372+ 6445             >Dict_Ptr        defl    $
 372+ 6445             >
 372+ 6445             >//              ______________________________________________________________________
 372+ 6445             >//              Heap part
 372+ 6445             >
 372+ 6445             >
 372+ 6445             >                org     (Heap_Ptr & $1FFF) + $E000
 372+ E0E2             >
 372+ E0E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 372+ E0E2             >Latest_Definition defl  Heap_Ptr
 372+ E0E2             >
 372+ E0E2             >                // dummy db directives used to calculate length of namec
 372+ E0E2 44 49 47 49 >                db      "DIGIT"
 372+ E0E6 54          >
 372+ E0E7             >len_NFA         defl    $ - temp_NFA
 372+ E0E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 372+ E0E2             >
 372+ E0E2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 372+ E0E3 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 372+ E0E7 54          >
 372+ E0E8             >                org     $-1                 // alter last byte of Name just above to set
 372+ E0E7 D4          >                db      {b $} | END_BIT     // msb as name end
 372+ E0E8             >
 372+ E0E8 DB 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 372+ E0EA             >Prev_Ptr        defl    Heap_Ptr
 372+ E0EA             >
 372+ E0EA             >mirror_Ptr      defl    $
 372+ E0EA             >
 372+ E0EA 47 64       >                dw      Dict_Ptr + 2        // xt
 372+ E0EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 372+ E0EC             >
 372+ E0EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 372+ E0EC             >
 372+ E0EC             >//              ______________________________________________________________________
 372+ E0EC             >//              Dictionary part
 372+ E0EC             >
 372+ E0EC             >                org     Dict_Ptr
 372+ 6445             >
 372+ 6445 EA 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 372+ 6447             >
 372+ 6447             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 372+ 6447 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 372+ 6447 ~           >
 372+ 6447 ~           >
 372+ 6447             >                endif           ; ok        // for other definitions it "points" the correct handler
 372+ 6447             >                // Use of "; ok" to suppress "warning[fwdref]"
 372+ 6447             >
 372+ 6447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 373+ 6447 D9                           exx
 374+ 6448 E1                           pop     hl                  // l has the base
 375+ 6449 D1                           pop     de                  // e has the digit
 376+ 644A 7B                           ld      a, e
 377+ 644B FE 60                        cp      $60                 // check if lowercase
 378+ 644D 38 02                        jr      c, Digit_Uppercase
 379+ 644F D6 20                            sub     $20                 // quick'n'dirty uppercase
 380+ 6451              Digit_Uppercase:
 381+ 6451 D6 30                        sub     $30
 382+ 6453 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 383+ 6455 FE 0A                            cp      $0A
 384+ 6457 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 385+ 6459 D6 07                                sub     7                   // try hex and subtract 7
 386+ 645B FE 0A                                cp      $0A
 387+ 645D 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 388+ 645F
 389+ 645F              Digit_Decimal:
 390+ 645F                              // compare digit
 391+ 645F BD                           cp      l                   // compare with base
 392+ 6460 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 393+ 6462 5F                               ld      e, a                // digit is returned as second from TOS
 394+ 6463                              //  ld      hl, -1
 395+ 6463 ED 62                            sbc     hl, hl
 396+ 6465 D5                               push    de
 397+ 6466 E5                               push    hl
 398+ 6467 D9                               exx
 399+ 6468                                  next
 399+ 6468 DD E9       >                jp      (ix)
 400+ 646A              Digit_Fail:
 401+ 646A 21 00 00                     ld      hl, 0
 402+ 646D E5                           push    hl
 403+ 646E D9                           exx
 404+ 646F                              next
 404+ 646F DD E9       >                jp      (ix)
 405+ 6471
 406+ 6471              //  ______________________________________________________________________
 407+ 6471              //
 408+ 6471              //  parametric uppercase routine
 409+ 6471              //  depending on the following op-code the routine can be by-passed
 410+ 6471              //  changing the behaviour of some callers.
 411+ 6471              //  If it is "ret" then the system is Case-Sensitive
 412+ 6471              //  If it is "Nop" then the system is Case-Insensitive
 413+ 6471              //  Only A register is touched.
 414+ 6471 00           Case_Sensitive: nop                         // Default is case-insensitive.
 415+ 6472              Case_Upper:
 416+ 6472 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 417+ 6474 D8                           ret     c                   // no change if A < "a"
 418+ 6475 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 419+ 6477 D0                           ret     nc                  // no change if A > "z"
 420+ 6478 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 421+ 647A C9                           ret
 422+ 647B
 423+ 647B              //  ______________________________________________________________________
 424+ 647B              //
 425+ 647B              //  caseon      --
 426+ 647B              // set system case-sensitivity on
 427+ 647B              // it patches a RET/NOP at the beginning of the uppercase-routine
 428+ 647B                              New_Def CASEON, "CASEON", is_code, is_normal
 428+ 647B             >
 428+ 647B             >Dict_Ptr        defl    $
 428+ 647B             >
 428+ 647B             >//              ______________________________________________________________________
 428+ 647B             >//              Heap part
 428+ 647B             >
 428+ 647B             >
 428+ 647B             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E0EC             >
 428+ E0EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E0EC             >Latest_Definition defl  Heap_Ptr
 428+ E0EC             >
 428+ E0EC             >                // dummy db directives used to calculate length of namec
 428+ E0EC 43 41 53 45 >                db      "CASEON"
 428+ E0F0 4F 4E       >
 428+ E0F2             >len_NFA         defl    $ - temp_NFA
 428+ E0F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E0EC             >
 428+ E0EC 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E0ED 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 428+ E0F1 4F 4E       >
 428+ E0F3             >                org     $-1                 // alter last byte of Name just above to set
 428+ E0F2 CE          >                db      {b $} | END_BIT     // msb as name end
 428+ E0F3             >
 428+ E0F3 E2 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E0F5             >Prev_Ptr        defl    Heap_Ptr
 428+ E0F5             >
 428+ E0F5             >mirror_Ptr      defl    $
 428+ E0F5             >
 428+ E0F5 7D 64       >                dw      Dict_Ptr + 2        // xt
 428+ E0F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E0F7             >
 428+ E0F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E0F7             >
 428+ E0F7             >//              ______________________________________________________________________
 428+ E0F7             >//              Dictionary part
 428+ E0F7             >
 428+ E0F7             >                org     Dict_Ptr
 428+ 647B             >
 428+ 647B F5 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 647D             >
 428+ 647D             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 647D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 428+ 647D ~           >
 428+ 647D ~           >
 428+ 647D             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 647D             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 647D             >
 428+ 647D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 647D 3E C9                        ld      a, $C9              // "ret"
 430+ 647F 32 71 64                     ld      (Case_Sensitive), a
 431+ 6482                              next
 431+ 6482 DD E9       >                jp      (ix)
 432+ 6484
 433+ 6484              //  ______________________________________________________________________
 434+ 6484              //
 435+ 6484              //  caseoff     --
 436+ 6484              // set system case-sensitivity on
 437+ 6484              // it patches a RET/NOP at the beginning of the uppercase-routine
 438+ 6484                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 438+ 6484             >
 438+ 6484             >Dict_Ptr        defl    $
 438+ 6484             >
 438+ 6484             >//              ______________________________________________________________________
 438+ 6484             >//              Heap part
 438+ 6484             >
 438+ 6484             >
 438+ 6484             >                org     (Heap_Ptr & $1FFF) + $E000
 438+ E0F7             >
 438+ E0F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 438+ E0F7             >Latest_Definition defl  Heap_Ptr
 438+ E0F7             >
 438+ E0F7             >                // dummy db directives used to calculate length of namec
 438+ E0F7 43 41 53 45 >                db      "CASEOFF"
 438+ E0FB 4F 46 46    >
 438+ E0FE             >len_NFA         defl    $ - temp_NFA
 438+ E0FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 438+ E0F7             >
 438+ E0F7 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 438+ E0F8 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 438+ E0FC 4F 46 46    >
 438+ E0FF             >                org     $-1                 // alter last byte of Name just above to set
 438+ E0FE C6          >                db      {b $} | END_BIT     // msb as name end
 438+ E0FF             >
 438+ E0FF EC 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 438+ E101             >Prev_Ptr        defl    Heap_Ptr
 438+ E101             >
 438+ E101             >mirror_Ptr      defl    $
 438+ E101             >
 438+ E101 86 64       >                dw      Dict_Ptr + 2        // xt
 438+ E103             >Heap_Ptr        defl    $ - $E000           // save current HP
 438+ E103             >
 438+ E103             >Current_HP      defl  $ - $E000             // used to set HP once!
 438+ E103             >
 438+ E103             >//              ______________________________________________________________________
 438+ E103             >//              Dictionary part
 438+ E103             >
 438+ E103             >                org     Dict_Ptr
 438+ 6484             >
 438+ 6484 01 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 438+ 6486             >
 438+ 6486             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 438+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 438+ 6486 ~           >
 438+ 6486 ~           >
 438+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 438+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 438+ 6486             >
 438+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 439+ 6486 3E 00                        ld      a, $00              // "nop"
 440+ 6488 32 71 64                     ld      (Case_Sensitive), a
 441+ 648B                              next
 441+ 648B DD E9       >                jp      (ix)
 442+ 648D
 443+ 648D              //  ______________________________________________________________________
 444+ 648D              //
 445+ 648D              //  upper       c1 -- c1 | c2
 446+ 648D              // character on top of stack is forced to Uppercase.
 447+ 648D                              New_Def UPPER, "UPPER", is_code, is_normal
 447+ 648D             >
 447+ 648D             >Dict_Ptr        defl    $
 447+ 648D             >
 447+ 648D             >//              ______________________________________________________________________
 447+ 648D             >//              Heap part
 447+ 648D             >
 447+ 648D             >
 447+ 648D             >                org     (Heap_Ptr & $1FFF) + $E000
 447+ E103             >
 447+ E103             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 447+ E103             >Latest_Definition defl  Heap_Ptr
 447+ E103             >
 447+ E103             >                // dummy db directives used to calculate length of namec
 447+ E103 55 50 50 45 >                db      "UPPER"
 447+ E107 52          >
 447+ E108             >len_NFA         defl    $ - temp_NFA
 447+ E108             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 447+ E103             >
 447+ E103 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 447+ E104 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 447+ E108 52          >
 447+ E109             >                org     $-1                 // alter last byte of Name just above to set
 447+ E108 D2          >                db      {b $} | END_BIT     // msb as name end
 447+ E109             >
 447+ E109 F7 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 447+ E10B             >Prev_Ptr        defl    Heap_Ptr
 447+ E10B             >
 447+ E10B             >mirror_Ptr      defl    $
 447+ E10B             >
 447+ E10B 8F 64       >                dw      Dict_Ptr + 2        // xt
 447+ E10D             >Heap_Ptr        defl    $ - $E000           // save current HP
 447+ E10D             >
 447+ E10D             >Current_HP      defl  $ - $E000             // used to set HP once!
 447+ E10D             >
 447+ E10D             >//              ______________________________________________________________________
 447+ E10D             >//              Dictionary part
 447+ E10D             >
 447+ E10D             >                org     Dict_Ptr
 447+ 648D             >
 447+ 648D 0B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 447+ 648F             >
 447+ 648F             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 447+ 648F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 447+ 648F ~           >
 447+ 648F ~           >
 447+ 648F             >                endif           ; ok        // for other definitions it "points" the correct handler
 447+ 648F             >                // Use of "; ok" to suppress "warning[fwdref]"
 447+ 648F             >
 447+ 648F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 448+ 648F E1                           pop     hl
 449+ 6490 7D                           ld      a, l
 450+ 6491 CD 72 64                     call    Case_Upper
 451+ 6494 6F                           ld      l, a
 452+ 6495
 453+ 6495                              psh1
 453+ 6495 E5          >                push    hl
 453+ 6496 DD E9       >                jp      (ix)
 454+ 6498
 455+ 6498              //  ______________________________________________________________________
 456+ 6498
 457+ 6498              MMU7_read:
 458+ 6498 3E 57                        ld      a, 87
 459+ 649A 01 3B 24                     ld      bc, $243B
 460+ 649D ED 79                        out     (c), a
 461+ 649F 04                           inc     b
 462+ 64A0 ED 78                        in      a, (c)
 463+ 64A2 C9                           ret
 464+ 64A3
 465+ 64A3              //  ______________________________________________________________________
 466+ 64A3
 467+ 64A3              // given an HP-pointer in input, turn it into page + offset
 468+ 64A3              TO_FAR_rout:
 469+ 64A3 7C                           ld      a, h
 470+ 64A4 08                           ex      af, af
 471+ 64A5 7C                           ld      a, h
 472+ 64A6 F6 E0                        or      $E0
 473+ 64A8 67                           ld      h, a
 474+ 64A9 08                           ex      af, af
 475+ 64AA 07                           rlca
 476+ 64AB 07                           rlca
 477+ 64AC 07                           rlca
 478+ 64AD E6 07                        and     $07
 479+ 64AF C6 20                        add     $20
 480+ 64B1 C9                           ret
 481+ 64B2
 482+ 64B2
 483+ 64B2              //  ______________________________________________________________________
 484+ 64B2              //
 485+ 64B2              // (find)       addr voc -- 0 | cfa b 1
 486+ 64B2              // vocabulary search,
 487+ 64B2              // - voc is starting word's NFA
 488+ 64B2              // - addr is the string to be searched for
 489+ 64B2              // On success, it returns the CFA of found word, the first NFA byte
 490+ 64B2              // (which contains length and some flags) and a true flag.
 491+ 64B2              // On fail, a false flag  (no more: leaves addr unchanged)
 492+ 64B2                              New_Def C_FIND, "(FIND)", is_code, is_normal
 492+ 64B2             >
 492+ 64B2             >Dict_Ptr        defl    $
 492+ 64B2             >
 492+ 64B2             >//              ______________________________________________________________________
 492+ 64B2             >//              Heap part
 492+ 64B2             >
 492+ 64B2             >
 492+ 64B2             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E10D             >
 492+ E10D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E10D             >Latest_Definition defl  Heap_Ptr
 492+ E10D             >
 492+ E10D             >                // dummy db directives used to calculate length of namec
 492+ E10D 28 46 49 4E >                db      "(FIND)"
 492+ E111 44 29       >
 492+ E113             >len_NFA         defl    $ - temp_NFA
 492+ E113             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E10D             >
 492+ E10D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E10E 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 492+ E112 44 29       >
 492+ E114             >                org     $-1                 // alter last byte of Name just above to set
 492+ E113 A9          >                db      {b $} | END_BIT     // msb as name end
 492+ E114             >
 492+ E114 03 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E116             >Prev_Ptr        defl    Heap_Ptr
 492+ E116             >
 492+ E116             >mirror_Ptr      defl    $
 492+ E116             >
 492+ E116 B4 64       >                dw      Dict_Ptr + 2        // xt
 492+ E118             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E118             >
 492+ E118             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E118             >
 492+ E118             >//              ______________________________________________________________________
 492+ E118             >//              Dictionary part
 492+ E118             >
 492+ E118             >                org     Dict_Ptr
 492+ 64B2             >
 492+ 64B2 16 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 64B4             >
 492+ 64B4             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 64B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 492+ 64B4 ~           >
 492+ 64B4 ~           >
 492+ 64B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 64B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 64B4             >
 492+ 64B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 64B4 D9                           exx
 494+ 64B5 CD 98 64                     call    MMU7_read
 495+ 64B8 D9                           exx
 496+ 64B9 6F                           ld      l, a
 497+ 64BA D9                           exx
 498+ 64BB
 499+ 64BB D1                           pop     de                      // de has dictionary pointer
 500+ 64BC              Find_VocabularyLoop:
 501+ 64BC 7A                               ld      a, d
 502+ 64BD D6 60                            sub     $60
 503+ 64BF 30 08                            jr      nc, Find_far_endif
 504+ 64C1 EB                                   ex      de, hl
 505+ 64C2 CD A3 64                             call    TO_FAR_rout
 506+ 64C5 EB                                   ex      de, hl
 507+ 64C6 ED 92 57                             nextreg 87, a
 508+ 64C9              Find_far_endif:
 509+ 64C9 E1                               pop     hl                  // string pointer to search for
 510+ 64CA E5                               push    hl                  // keep it on stack too for the end.
 511+ 64CB 1A                               ld      a, (de)             // save NFA length byte
 512+ 64CC 08                               ex      af,af'              // for later use (!)
 513+ 64CD 1A                               ld      a, (de)             // reload NFA length byte
 514+ 64CE AE                               xor     (hl)                // check if same length
 515+ 64CF E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 516+ 64D1                                  // word and text haven't the same length, skip to next vocabulary entry
 517+ 64D1 20 33                            jr      nz, Find_DifferentLenght
 518+ 64D3
 519+ 64D3              Find_ThisWord:      // begin loop
 520+ 64D3 23                                   inc     hl
 521+ 64D4 13                                   inc     de
 522+ 64D5 1A                                   ld      a, (de)
 523+ 64D6                                      // case insensitive option - begin
 524+ 64D6                                      // push    bc
 525+ 64D6 E6 80                                and     $80                 // split A in msb and the rest
 526+ 64D8 47                                   ld      b, a
 527+ 64D9 1A                                   ld      a, (de)
 528+ 64DA E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 529+ 64DC CD 71 64                             call    Case_Sensitive      // uppercase routine
 530+ 64DF 4F                                   ld      c, a
 531+ 64E0 7E                                   ld      a, (hl)
 532+ 64E1 CD 71 64                             call    Case_Sensitive      // uppercase routine
 533+ 64E4 A9                                   xor     c
 534+ 64E5 A8                                   xor     b
 535+ 64E6                                      // pop     bc
 536+ 64E6                                      // case insensitive option - end
 537+ 64E6 87                                   add     a                   // ignore msb during compare
 538+ 64E7 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 539+ 64E9
 540+ 64E9                                  // loop back until last byte msb is found set
 541+ 64E9                                  // that bit marks the ending char of this word
 542+ 64E9 30 E8                            jr      nc, Find_ThisWord
 543+ 64EB
 544+ 64EB                                  // match found !
 545+ 64EB 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 546+ 64EE 19                               add     hl, de
 547+ 64EF
 548+ 64EF                              //  ld      a, h
 549+ 64EF                              //  and     $E0
 550+ 64EF                              //  xor     h
 551+ 64EF                              //  jr      nz, Non_MMU7
 552+ 64EF                                  //  call    MMU7_read
 553+ 64EF                                  //  dec     a
 554+ 64EF                                  //  jr      z, Non_MMU7
 555+ 64EF 5E                                       ld      e, (hl)
 556+ 64F0 23                                       inc     hl
 557+ 64F1 56                                       ld      d, (hl)
 558+ 64F2 EB                                       ex      de, hl
 559+ 64F3              //Non_MMU7:
 560+ 64F3 E3                               ex      (sp), hl            // CFA on stack and drop addr
 561+ 64F4 08                               ex      af, af'             // retrieve NFA byte (!)
 562+ 64F5 5F                               ld      e, a
 563+ 64F6 16 00                            ld      d, 0
 564+ 64F8 21 FF FF                         ld      hl, -1
 565+ 64FB D5                               push    de
 566+ 64FC E5                               push    hl
 567+ 64FD D9                               exx
 568+ 64FE 7D                               ld      a, l
 569+ 64FF ED 92 57                         nextreg 87, a
 570+ 6502                                  next
 570+ 6502 DD E9       >                jp      (ix)
 571+ 6504
 572+ 6504              Find_DidntMatch: // didn't match (*)
 573+ 6504 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 574+ 6506
 575+ 6506              Find_DifferentLenght:
 576+ 6506                                  // consume chars until the end of the word
 577+ 6506                                  // that is last byte msb is found set
 578+ 6506 13                                   inc     de
 579+ 6507 1A                                   ld      a, (de)
 580+ 6508 87                                   add     a, a
 581+ 6509 30 FB                            jr      nc, Find_DifferentLenght
 582+ 650B
 583+ 650B              Find_WordEnd:   // word-end  found (**)
 584+ 650B                                  // take LFA and use it
 585+ 650B 13                               inc     de
 586+ 650C EB                               ex      de, hl
 587+ 650D 5E                               ld      e, (hl)
 588+ 650E 23                               inc     hl
 589+ 650F 56                               ld      d, (hl)
 590+ 6510 7A                               ld      a, d
 591+ 6511 B3                               or      e
 592+ 6512
 593+ 6512                              // loop until end of vocabulary
 594+ 6512 20 A8                        jr      nz, Find_VocabularyLoop
 595+ 6514
 596+ 6514 E1                           pop     hl              // without this, leaves addr unchanged
 597+ 6515 21 00 00                     ld      hl, 0
 598+ 6518 E5                           push    hl
 599+ 6519 D9                           exx
 600+ 651A 7D                           ld      a, l
 601+ 651B ED 92 57                     nextreg 87, a
 602+ 651E                              next
 602+ 651E DD E9       >                jp      (ix)
 603+ 6520
 604+ 6520              //  ______________________________________________________________________
 605+ 6520              //
 606+ 6520              // enclose      a c -- a  n1 n2 n3
 607+ 6520              // starting from a, using delimiter c, determines the offsets:
 608+ 6520              //   n1   the first character non-delimiter
 609+ 6520              //   n2   the first delimiter after the text
 610+ 6520              //   n3   the first character non enclosed.
 611+ 6520              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 612+ 6520              // an uncoditional delimiter.
 613+ 6520              // Examples:
 614+ 6520              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 615+ 6520              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 616+ 6520              // iii:	c  c  'nul'          -- 2  3  2
 617+ 6520                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 617+ 6520             >
 617+ 6520             >Dict_Ptr        defl    $
 617+ 6520             >
 617+ 6520             >//              ______________________________________________________________________
 617+ 6520             >//              Heap part
 617+ 6520             >
 617+ 6520             >
 617+ 6520             >                org     (Heap_Ptr & $1FFF) + $E000
 617+ E118             >
 617+ E118             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 617+ E118             >Latest_Definition defl  Heap_Ptr
 617+ E118             >
 617+ E118             >                // dummy db directives used to calculate length of namec
 617+ E118 45 4E 43 4C >                db      "ENCLOSE"
 617+ E11C 4F 53 45    >
 617+ E11F             >len_NFA         defl    $ - temp_NFA
 617+ E11F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 617+ E118             >
 617+ E118 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 617+ E119 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 617+ E11D 4F 53 45    >
 617+ E120             >                org     $-1                 // alter last byte of Name just above to set
 617+ E11F C5          >                db      {b $} | END_BIT     // msb as name end
 617+ E120             >
 617+ E120 0D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 617+ E122             >Prev_Ptr        defl    Heap_Ptr
 617+ E122             >
 617+ E122             >mirror_Ptr      defl    $
 617+ E122             >
 617+ E122 22 65       >                dw      Dict_Ptr + 2        // xt
 617+ E124             >Heap_Ptr        defl    $ - $E000           // save current HP
 617+ E124             >
 617+ E124             >Current_HP      defl  $ - $E000             // used to set HP once!
 617+ E124             >
 617+ E124             >//              ______________________________________________________________________
 617+ E124             >//              Dictionary part
 617+ E124             >
 617+ E124             >                org     Dict_Ptr
 617+ 6520             >
 617+ 6520 22 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 617+ 6522             >
 617+ 6522             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 617+ 6522 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 617+ 6522 ~           >
 617+ 6522 ~           >
 617+ 6522             >                endif           ; ok        // for other definitions it "points" the correct handler
 617+ 6522             >                // Use of "; ok" to suppress "warning[fwdref]"
 617+ 6522             >
 617+ 6522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 618+ 6522 D9                           exx
 619+ 6523 D1                           pop     de                  //  e has the character
 620+ 6524 E1                           pop     hl                  // hl has the string address
 621+ 6525 E5                           push    hl
 622+ 6526 7B                           ld      a, e
 623+ 6527 11 FF FF                     ld      de, -1              // let's start from -1
 624+ 652A 2B                           dec     hl
 625+ 652B              Enclose_NonDelimiter:
 626+ 652B                              // find first non delimiter
 627+ 652B 23                               inc     hl
 628+ 652C 13                               inc     de
 629+ 652D BE                               cp      (hl)
 630+ 652E 28 FB                        jr      z, Enclose_NonDelimiter
 631+ 6530 D5                           push    de
 632+ 6531
 633+ 6531                              // push    bc                  // save Instruction Pointer
 634+ 6531
 635+ 6531 4F                           ld      c, a                // save char
 636+ 6532 7E                           ld      a, (hl)
 637+ 6533 A7                           and     a                   // stop if 0x00
 638+ 6534 20 07                        jr      nz, Enclose_NextChar
 639+ 6536                              /// case iii. no more character in string
 640+ 6536                                  // pop     bc                  // restore Instruction Pointer
 641+ 6536 13                               inc     de
 642+ 6537 D5                               push    de
 643+ 6538 1B                               dec     de
 644+ 6539 D5                               push    de
 645+ 653A D9                               exx
 646+ 653B                                  next
 646+ 653B DD E9       >                jp      (ix)
 647+ 653D              Enclose_NextChar:
 648+ 653D 79                               ld      a, c
 649+ 653E 23                               inc     hl
 650+ 653F 13                               inc     de
 651+ 6540 BE                               cp      (hl)
 652+ 6541 20 06                            jr      nz, Enclose_NonSeparator
 653+ 6543                                      // case i. first non enclosed
 654+ 6543                                      // pop     bc                  // restore Instruction Pointer
 655+ 6543 D5                                   push    de
 656+ 6544 13                                   inc     de
 657+ 6545 D5                                   push    de
 658+ 6546 D9                                   exx
 659+ 6547                                      next
 659+ 6547 DD E9       >                jp      (ix)
 660+ 6549              Enclose_NonSeparator:
 661+ 6549 7E                               ld      a, (hl)
 662+ 654A A7                               and     a
 663+ 654B 20 F0                        jr      nz, Enclose_NextChar
 664+ 654D
 665+ 654D                              // case ii. separator & terminator
 666+ 654D                              // pop     bc                  // restore Instruction Pointer
 667+ 654D D5                           push    de
 668+ 654E D5                           push    de
 669+ 654F D9                           exx
 670+ 6550                              next
 670+ 6550 DD E9       >                jp      (ix)
 671+ 6552
 672+ 6552              //  ______________________________________________________________________
 673+ 6552              //
 674+ 6552              // (map)        a2 a1 n c1 -- c2
 675+ 6552              // translate character c1 using mapping string a2 and a2
 676+ 6552              // if c1 is not present within string a1 then
 677+ 6552              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 678+ 6552                              New_Def C_MAP, "(MAP)", is_code, is_normal
 678+ 6552             >
 678+ 6552             >Dict_Ptr        defl    $
 678+ 6552             >
 678+ 6552             >//              ______________________________________________________________________
 678+ 6552             >//              Heap part
 678+ 6552             >
 678+ 6552             >
 678+ 6552             >                org     (Heap_Ptr & $1FFF) + $E000
 678+ E124             >
 678+ E124             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 678+ E124             >Latest_Definition defl  Heap_Ptr
 678+ E124             >
 678+ E124             >                // dummy db directives used to calculate length of namec
 678+ E124 28 4D 41 50 >                db      "(MAP)"
 678+ E128 29          >
 678+ E129             >len_NFA         defl    $ - temp_NFA
 678+ E129             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 678+ E124             >
 678+ E124 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 678+ E125 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 678+ E129 29          >
 678+ E12A             >                org     $-1                 // alter last byte of Name just above to set
 678+ E129 A9          >                db      {b $} | END_BIT     // msb as name end
 678+ E12A             >
 678+ E12A 18 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 678+ E12C             >Prev_Ptr        defl    Heap_Ptr
 678+ E12C             >
 678+ E12C             >mirror_Ptr      defl    $
 678+ E12C             >
 678+ E12C 54 65       >                dw      Dict_Ptr + 2        // xt
 678+ E12E             >Heap_Ptr        defl    $ - $E000           // save current HP
 678+ E12E             >
 678+ E12E             >Current_HP      defl  $ - $E000             // used to set HP once!
 678+ E12E             >
 678+ E12E             >//              ______________________________________________________________________
 678+ E12E             >//              Dictionary part
 678+ E12E             >
 678+ E12E             >                org     Dict_Ptr
 678+ 6552             >
 678+ 6552 2C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 678+ 6554             >
 678+ 6554             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 678+ 6554 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 678+ 6554 ~           >
 678+ 6554 ~           >
 678+ 6554             >                endif           ; ok        // for other definitions it "points" the correct handler
 678+ 6554             >                // Use of "; ok" to suppress "warning[fwdref]"
 678+ 6554             >
 678+ 6554             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 679+ 6554 D9                           exx
 680+ 6555 E1                           pop     hl
 681+ 6556 7D                           ld      a, l
 682+ 6557 C1                           pop     bc
 683+ 6558 E1                           pop     hl
 684+ 6559 50                           ld      d, b
 685+ 655A 59                           ld      e, c
 686+ 655B ED B1                        cpir
 687+ 655D E1                           pop     hl
 688+ 655E 20 05                        jr      nz, C_Map_Then
 688+ 6560
 689+ 6560 19                               add     hl, de
 690+ 6561 2B                               dec     hl
 691+ 6562 ED 42                            sbc     hl, bc
 692+ 6564 7E                               ld      a, (hl)
 693+ 6565              C_Map_Then:
 694+ 6565 6F                           ld      l, a
 695+ 6566 26 00                        ld      h, 0
 696+ 6568 E5                           push    hl
 697+ 6569 D9                           exx
 698+ 656A                              next
 698+ 656A DD E9       >                jp      (ix)
 699+ 656C
 700+ 656C              //  ______________________________________________________________________
 701+ 656C              //
 702+ 656C              // (compare)    a1 a2 n -- b
 703+ 656C              // this word performs a lexicographic compare of n bytes of text at address a1
 704+ 656C              // with n bytes of text at address a2. It returns numeric a value:
 705+ 656C              //  0 : if strings are equal
 706+ 656C              // +1 : if string at a1 greater than string at a2
 707+ 656C              // -1 : if string at a1 less than string at a2
 708+ 656C              // strings can be 256 bytes in length at most.
 709+ 656C                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 709+ 656C             >
 709+ 656C             >Dict_Ptr        defl    $
 709+ 656C             >
 709+ 656C             >//              ______________________________________________________________________
 709+ 656C             >//              Heap part
 709+ 656C             >
 709+ 656C             >
 709+ 656C             >                org     (Heap_Ptr & $1FFF) + $E000
 709+ E12E             >
 709+ E12E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 709+ E12E             >Latest_Definition defl  Heap_Ptr
 709+ E12E             >
 709+ E12E             >                // dummy db directives used to calculate length of namec
 709+ E12E 28 43 4F 4D >                db      "(COMPARE)"
 709+ E132 50 41 52 45 >
 709+ E136 29          >
 709+ E137             >len_NFA         defl    $ - temp_NFA
 709+ E137             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 709+ E12E             >
 709+ E12E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 709+ E12F 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 709+ E133 50 41 52 45 >
 709+ E137 29          >
 709+ E138             >                org     $-1                 // alter last byte of Name just above to set
 709+ E137 A9          >                db      {b $} | END_BIT     // msb as name end
 709+ E138             >
 709+ E138 24 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 709+ E13A             >Prev_Ptr        defl    Heap_Ptr
 709+ E13A             >
 709+ E13A             >mirror_Ptr      defl    $
 709+ E13A             >
 709+ E13A 6E 65       >                dw      Dict_Ptr + 2        // xt
 709+ E13C             >Heap_Ptr        defl    $ - $E000           // save current HP
 709+ E13C             >
 709+ E13C             >Current_HP      defl  $ - $E000             // used to set HP once!
 709+ E13C             >
 709+ E13C             >//              ______________________________________________________________________
 709+ E13C             >//              Dictionary part
 709+ E13C             >
 709+ E13C             >                org     Dict_Ptr
 709+ 656C             >
 709+ 656C 3A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 709+ 656E             >
 709+ 656E             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 709+ 656E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 709+ 656E ~           >
 709+ 656E ~           >
 709+ 656E             >                endif           ; ok        // for other definitions it "points" the correct handler
 709+ 656E             >                // Use of "; ok" to suppress "warning[fwdref]"
 709+ 656E             >
 709+ 656E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 710+ 656E D9                           exx
 711+ 656F E1                           pop     hl                  // Number of bytes
 712+ 6570 7D                           ld      a, l
 713+ 6571 E1                           pop     hl                  // hl points string a2
 714+ 6572 D1                           pop     de                  // hl points string a1
 715+ 6573              //              push    bc                  // Instruction pointer on stack
 716+ 6573 47                           ld      b, a
 717+ 6574              C_Compare_Loop:
 718+ 6574 7E                               ld      a, (hl)
 719+ 6575 CD 71 64                         call    Case_Sensitive
 720+ 6578 4F                               ld      c, a
 721+ 6579 1A                               ld      a, (de)
 722+ 657A CD 71 64                         call    Case_Sensitive
 723+ 657D B9                               cp      c
 724+ 657E 13                               inc     de
 725+ 657F 23                               inc     hl
 726+ 6580 28 0E                            jr      z, C_Compare_Equal
 727+ 6582 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 728+ 6584 21 01 00                                 ld      hl, 1               // a1 gt a2
 729+ 6587 18 03                                jr      C_Compare_Then      // Else
 730+ 6589              C_Compare_NotLessThan:
 731+ 6589 21 FF FF                                 ld      hl, -1              // a1 lt a2
 732+ 658C              C_Compare_Then:                                 // Endif
 733+ 658C              //                      pop     bc              // restore Instruction Pointer
 734+ 658C E5                                   push    hl
 735+ 658D D9                                   exx
 736+ 658E
 737+ 658E                                      next
 737+ 658E DD E9       >                jp      (ix)
 738+ 6590
 739+ 6590              C_Compare_Equal:
 740+ 6590 10 E2                        djnz    C_Compare_Loop
 741+ 6592 21 00 00                     ld      hl, 0               // a1 eq a2
 742+ 6595              //              pop     bc                  // restore Instruction Pointer
 743+ 6595 E5                           push    hl
 744+ 6596 D9                           exx
 745+ 6597
 746+ 6597                              next
 746+ 6597 DD E9       >                jp      (ix)
 747+ 6599
 748+ 6599              //  ______________________________________________________________________
 749+ 6599              //
 750+ 6599              // emitc        c --
 751+ 6599              // low level emit, calls ROM routine at #10 to send a character to
 752+ 6599              // the the current channel (see SELECT to change stream-channel)
 753+ 6599                              New_Def EMITC, "EMITC", is_code, is_normal
 753+ 6599             >
 753+ 6599             >Dict_Ptr        defl    $
 753+ 6599             >
 753+ 6599             >//              ______________________________________________________________________
 753+ 6599             >//              Heap part
 753+ 6599             >
 753+ 6599             >
 753+ 6599             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E13C             >
 753+ E13C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E13C             >Latest_Definition defl  Heap_Ptr
 753+ E13C             >
 753+ E13C             >                // dummy db directives used to calculate length of namec
 753+ E13C 45 4D 49 54 >                db      "EMITC"
 753+ E140 43          >
 753+ E141             >len_NFA         defl    $ - temp_NFA
 753+ E141             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E13C             >
 753+ E13C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E13D 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 753+ E141 43          >
 753+ E142             >                org     $-1                 // alter last byte of Name just above to set
 753+ E141 C3          >                db      {b $} | END_BIT     // msb as name end
 753+ E142             >
 753+ E142 2E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E144             >Prev_Ptr        defl    Heap_Ptr
 753+ E144             >
 753+ E144             >mirror_Ptr      defl    $
 753+ E144             >
 753+ E144 9B 65       >                dw      Dict_Ptr + 2        // xt
 753+ E146             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E146             >
 753+ E146             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E146             >
 753+ E146             >//              ______________________________________________________________________
 753+ E146             >//              Dictionary part
 753+ E146             >
 753+ E146             >                org     Dict_Ptr
 753+ 6599             >
 753+ 6599 44 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 659B             >
 753+ 659B             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 659B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 753+ 659B ~           >
 753+ 659B ~           >
 753+ 659B             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 659B             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 659B             >
 753+ 659B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 659B E1                           pop     hl
 755+ 659C 7D                           ld      a, l
 756+ 659D              Emitc_Ptr:
 757+ 659D C5                           push    bc
 758+ 659E D5                           push    de
 759+ 659F DD E5                        push    ix
 760+ 65A1
 761+ 65A1 D7                           rst     $10
 762+ 65A2
 763+ 65A2 DD E1                        pop     ix
 764+ 65A4 D1                           pop     de
 765+ 65A5 C1                           pop     bc
 766+ 65A6 3E FF                        ld      a, 255            // max possible
 767+ 65A8 32 8C 5C                     ld      (SCR_CT), a
 768+ 65AB                              next
 768+ 65AB DD E9       >                jp      (ix)
 769+ 65AD
 770+ 65AD              //  ______________________________________________________________________
 771+ 65AD              //
 772+ 65AD              // cr           --
 773+ 65AD              // send a CR via EMITC
 774+ 65AD                              New_Def CR, "CR", is_code, is_normal
 774+ 65AD             >
 774+ 65AD             >Dict_Ptr        defl    $
 774+ 65AD             >
 774+ 65AD             >//              ______________________________________________________________________
 774+ 65AD             >//              Heap part
 774+ 65AD             >
 774+ 65AD             >
 774+ 65AD             >                org     (Heap_Ptr & $1FFF) + $E000
 774+ E146             >
 774+ E146             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 774+ E146             >Latest_Definition defl  Heap_Ptr
 774+ E146             >
 774+ E146             >                // dummy db directives used to calculate length of namec
 774+ E146 43 52       >                db      "CR"
 774+ E148             >len_NFA         defl    $ - temp_NFA
 774+ E148             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 774+ E146             >
 774+ E146 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 774+ E147 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 774+ E149             >                org     $-1                 // alter last byte of Name just above to set
 774+ E148 D2          >                db      {b $} | END_BIT     // msb as name end
 774+ E149             >
 774+ E149 3C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 774+ E14B             >Prev_Ptr        defl    Heap_Ptr
 774+ E14B             >
 774+ E14B             >mirror_Ptr      defl    $
 774+ E14B             >
 774+ E14B AF 65       >                dw      Dict_Ptr + 2        // xt
 774+ E14D             >Heap_Ptr        defl    $ - $E000           // save current HP
 774+ E14D             >
 774+ E14D             >Current_HP      defl  $ - $E000             // used to set HP once!
 774+ E14D             >
 774+ E14D             >//              ______________________________________________________________________
 774+ E14D             >//              Dictionary part
 774+ E14D             >
 774+ E14D             >                org     Dict_Ptr
 774+ 65AD             >
 774+ 65AD 4B 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 774+ 65AF             >
 774+ 65AF             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 774+ 65AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 774+ 65AF ~           >
 774+ 65AF ~           >
 774+ 65AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 774+ 65AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 774+ 65AF             >
 774+ 65AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 775+ 65AF
 776+ 65AF 3E 0D                        ld      a, CR_CHAR
 777+ 65B1 18 EA                        jr      Emitc_Ptr
 778+ 65B3
 779+ 65B3              Emitc_Vec:
 780+ 65B3 EC 65                        dw      C_Emit_Printable  // comma
 781+ 65B5 F3 65                        dw      C_Emit_Bel        // bel
 782+ 65B7 EC 65                        dw      C_Emit_Printable  // bs
 783+ 65B9 0B 66                        dw      C_Emit_Tab        // tab
 784+ 65BB EC 65                        dw      C_Emit_Printable  // cr
 785+ 65BD 0F 66                        dw      C_Emit_NL         // lf (unix newline)
 786+ 65BF EC 65                        dw      C_Emit_Printable  // blank
 787+ 65C1 EC 65                        dw      C_Emit_Printable  // blank
 788+ 65C3
 789+ 65C3              Emit_Selector_Start:
 790+ 65C3 06                           db      $06                 // comma
 791+ 65C4 07                           db      $07                 // bel
 792+ 65C5 08                           db      $08                 // bs
 793+ 65C6 09                           db      $09                 // tab
 794+ 65C7 0D                           db      $0D                 // cr
 795+ 65C8 0A                           db      $0A                 // lf (unix newline)
 796+ 65C9 20                           db      $20
 797+ 65CA              Emit_Selector_End:
 798+ 65CA 20                           db      $20
 799+ 65CB
 800+ 65CB              //  ______________________________________________________________________
 801+ 65CB              //
 802+ 65CB              // (?emit)      c1 -- c2 | c1
 803+ 65CB              // decode a character to be sent via EMIT
 804+ 65CB              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 805+ 65CB              // the routine should resolve anything and convert the character anyway.
 806+ 65CB                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 806+ 65CB             >
 806+ 65CB             >Dict_Ptr        defl    $
 806+ 65CB             >
 806+ 65CB             >//              ______________________________________________________________________
 806+ 65CB             >//              Heap part
 806+ 65CB             >
 806+ 65CB             >
 806+ 65CB             >                org     (Heap_Ptr & $1FFF) + $E000
 806+ E14D             >
 806+ E14D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 806+ E14D             >Latest_Definition defl  Heap_Ptr
 806+ E14D             >
 806+ E14D             >                // dummy db directives used to calculate length of namec
 806+ E14D 28 3F 45 4D >                db      "(?EMIT)"
 806+ E151 49 54 29    >
 806+ E154             >len_NFA         defl    $ - temp_NFA
 806+ E154             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 806+ E14D             >
 806+ E14D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 806+ E14E 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 806+ E152 49 54 29    >
 806+ E155             >                org     $-1                 // alter last byte of Name just above to set
 806+ E154 A9          >                db      {b $} | END_BIT     // msb as name end
 806+ E155             >
 806+ E155 46 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 806+ E157             >Prev_Ptr        defl    Heap_Ptr
 806+ E157             >
 806+ E157             >mirror_Ptr      defl    $
 806+ E157             >
 806+ E157 CD 65       >                dw      Dict_Ptr + 2        // xt
 806+ E159             >Heap_Ptr        defl    $ - $E000           // save current HP
 806+ E159             >
 806+ E159             >Current_HP      defl  $ - $E000             // used to set HP once!
 806+ E159             >
 806+ E159             >//              ______________________________________________________________________
 806+ E159             >//              Dictionary part
 806+ E159             >
 806+ E159             >                org     Dict_Ptr
 806+ 65CB             >
 806+ 65CB 57 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 806+ 65CD             >
 806+ 65CD             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 806+ 65CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 806+ 65CD ~           >
 806+ 65CD ~           >
 806+ 65CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 806+ 65CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 806+ 65CD             >
 806+ 65CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 807+ 65CD D9                           exx
 808+ 65CE D1                           pop     de
 809+ 65CF 7B                           ld      a, e                //  de has c1
 810+ 65D0 E6 7F                        and     $7F                 // 7-bit ascii only
 811+ 65D2                              // push    bc                  // save Instruction Pointer
 812+ 65D2 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 813+ 65D5 21 CA 65                     ld      hl, Emit_Selector_End
 814+ 65D8 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 815+ 65DA 20 0A                        jr      nz, C_Emit_Not_Found
 816+ 65DC                                  // Found then decode it
 817+ 65DC 21 B3 65                         ld      hl, Emitc_Vec
 818+ 65DF 09                               add     hl, bc
 819+ 65E0 09                               add     hl, bc
 820+ 65E1 5E                               ld      e, (hl)
 821+ 65E2 23                               inc     hl
 822+ 65E3 56                               ld      d, (hl)
 823+ 65E4 EB                               ex      de, hl
 824+ 65E5                                  // pop     bc                  // restore Instruction Pointer
 825+ 65E5 E9                               jp      (hl)                // one of the following labels
 826+ 65E6              C_Emit_Not_Found:
 827+ 65E6                              // pop     bc                  // restore Instruction Pointer
 828+ 65E6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 829+ 65E8 30 02                        jr      nc, C_Emit_Printable
 830+ 65EA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 831+ 65EC              C_Emit_Printable:
 832+ 65EC 6F                           ld      l, a
 833+ 65ED 26 00                        ld      h, 0
 834+ 65EF E5                           push    hl
 835+ 65F0 D9                           exx
 836+ 65F1                              next
 836+ 65F1 DD E9       >                jp      (ix)
 837+ 65F3
 838+ 65F3              C_Emit_Bel:
 839+ 65F3 D9                            exx
 840+ 65F4 C5                           push    bc                  // save Instruction Pointer
 841+ 65F5 D5                           push    de
 842+ 65F6 11 00 01                     ld      de, $0100
 843+ 65F9 21 00 02                     ld      hl, $0200
 844+ 65FC DD E5                        push    ix                  // save Next Pointer
 845+ 65FE CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 846+ 6601
 847+ 6601
 848+ 6601
 849+ 6601
 850+ 6601 DD E1                        pop     ix                  // restore Next Pointer
 851+ 6603 D1                           pop     de
 852+ 6604 C1                           pop     bc                  // restore Instruction Pointer
 853+ 6605 21 00 00                     ld      hl, NUL_CHAR
 854+ 6608 E5                           push    hl
 855+ 6609                              next
 855+ 6609 DD E9       >                jp      (ix)
 856+ 660B
 857+ 660B 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 858+ 660D 18 DD                        jr      C_Emit_Printable
 859+ 660F                          //  push    hl
 860+ 660F                          //  exx
 861+ 660F                          //  next
 862+ 660F
 863+ 660F 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 864+ 6611 18 D9                        jr      C_Emit_Printable
 865+ 6613                          //  push    hl
 866+ 6613                          //  exx
 867+ 6613                          //  next
 868+ 6613
 869+ 6613              //  ______________________________________________________________________
 870+ 6613
 871+ 6613              Key_Table:
 872+ 6613 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 873+ 6614 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 874+ 6615 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 875+ 6616 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 876+ 6617 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 877+ 6618 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 878+ 6619 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 879+ 661A AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 880+ 661B C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 881+ 661C C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 882+ 661D C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 883+ 661E              Key_MapTo:
 884+ 661E 18                           db      $18                 // 10: ^X
 885+ 661F 03                           db      $03                 //  9: ^C
 886+ 6620 1A                           db      $1A                 //  8: ^Z
 887+ 6621 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 888+ 6622 5D                           db      $5D                 //  6: SYMBOL+U : ]
 889+ 6623 5B                           db      $5B                 //  5: SYMBOL+Y : [
 890+ 6624 7D                           db      $7D                 //  4: SYMBOL+G : }
 891+ 6625 7B                           db      $7B                 //  3: SYMBOL+F : {
 892+ 6626 5C                           db      $5C                 //  2: SYMBOl+D : //
 893+ 6627 7C                           db      $7C                 //  1: SYMBOL+S : |
 894+ 6628 7E                           db      $7E                 //  0: SYMBOL+A : ~
 895+ 6629
 896+ 6629              //  ______________________________________________________________________
 897+ 6629              //
 898+ 6629              // curs         -- c
 899+ 6629              // wait for a keypress
 900+ 6629              // This definition need Standard ROM Interrupt to be served
 901+ 6629
 902+ 6629                              New_Def CUR, "CURS", is_code, is_normal
 902+ 6629             >
 902+ 6629             >Dict_Ptr        defl    $
 902+ 6629             >
 902+ 6629             >//              ______________________________________________________________________
 902+ 6629             >//              Heap part
 902+ 6629             >
 902+ 6629             >
 902+ 6629             >                org     (Heap_Ptr & $1FFF) + $E000
 902+ E159             >
 902+ E159             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 902+ E159             >Latest_Definition defl  Heap_Ptr
 902+ E159             >
 902+ E159             >                // dummy db directives used to calculate length of namec
 902+ E159 43 55 52 53 >                db      "CURS"
 902+ E15D             >len_NFA         defl    $ - temp_NFA
 902+ E15D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 902+ E159             >
 902+ E159 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 902+ E15A 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 902+ E15E             >                org     $-1                 // alter last byte of Name just above to set
 902+ E15D D3          >                db      {b $} | END_BIT     // msb as name end
 902+ E15E             >
 902+ E15E 4D 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 902+ E160             >Prev_Ptr        defl    Heap_Ptr
 902+ E160             >
 902+ E160             >mirror_Ptr      defl    $
 902+ E160             >
 902+ E160 2B 66       >                dw      Dict_Ptr + 2        // xt
 902+ E162             >Heap_Ptr        defl    $ - $E000           // save current HP
 902+ E162             >
 902+ E162             >Current_HP      defl  $ - $E000             // used to set HP once!
 902+ E162             >
 902+ E162             >//              ______________________________________________________________________
 902+ E162             >//              Dictionary part
 902+ E162             >
 902+ E162             >                org     Dict_Ptr
 902+ 6629             >
 902+ 6629 60 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 902+ 662B             >
 902+ 662B             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 902+ 662B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 902+ 662B ~           >
 902+ 662B ~           >
 902+ 662B             >                endif           ; ok        // for other definitions it "points" the correct handler
 902+ 662B             >                // Use of "; ok" to suppress "warning[fwdref]"
 902+ 662B             >
 902+ 662B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 903+ 662B
 904+ 662B C5                           push    bc                  // save Instruction Pointer
 905+ 662C D5                           push    de                  // save Return Stack Pointer
 906+ 662D DD E5                        push    ix
 907+ 662F ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 908+ 6633
 909+ 6633 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 910+ 6636 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 911+ 663A
 912+ 663A              Cur_Wait:
 913+ 663A 76                               halt
 914+ 663B 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 915+ 663D CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 916+ 6640
 917+ 6640
 918+ 6640
 919+ 6640                                  // software-flash: flips face every 320 ms
 920+ 6640 3E 20                            ld      a, $20              // Timing based
 921+ 6642 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 922+ 6645
 923+ 6645 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 924+ 6648 20 0C                            jr      nz, Cur_Cursor
 925+ 664A 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 926+ 664D FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 927+ 6651 28 03                                jr      z, Cur_Cursor
 928+ 6653 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 929+ 6656              Cur_Cursor:
 930+ 6656 D7                               rst     $10
 931+ 6657 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 932+ 6659 D7                               rst     $10
 933+ 665A FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 934+ 665E 28 DA                        jr      z, Cur_Wait
 935+ 6660
 936+ 6660 76                           halt    // this is to sync flashing cursor.
 937+ 6661
 938+ 6661 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 939+ 6663 D7                           rst     $10
 940+ 6664 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 941+ 6666 D7                           rst     $10
 942+ 6667
 943+ 6667 ED 7B 92 63                  ld      sp, (SP_Saved)
 944+ 666B
 945+ 666B DD E1                        pop     ix
 946+ 666D D1                           pop     de                  // Restore Return Stack Pointer
 947+ 666E C1                           pop     bc                  // Restore Instruction Pointer
 948+ 666F                              next
 948+ 666F DD E9       >                jp      (ix)
 949+ 6671
 950+ 6671
 951+ 6671              //  ______________________________________________________________________
 952+ 6671              //
 953+ 6671              // key          -- c
 954+ 6671              // This definition need Standard ROM Interrupt to be served
 955+ 6671
 956+ 6671                              New_Def KEY, "KEY", is_code, is_normal
 956+ 6671             >
 956+ 6671             >Dict_Ptr        defl    $
 956+ 6671             >
 956+ 6671             >//              ______________________________________________________________________
 956+ 6671             >//              Heap part
 956+ 6671             >
 956+ 6671             >
 956+ 6671             >                org     (Heap_Ptr & $1FFF) + $E000
 956+ E162             >
 956+ E162             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 956+ E162             >Latest_Definition defl  Heap_Ptr
 956+ E162             >
 956+ E162             >                // dummy db directives used to calculate length of namec
 956+ E162 4B 45 59    >                db      "KEY"
 956+ E165             >len_NFA         defl    $ - temp_NFA
 956+ E165             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 956+ E162             >
 956+ E162 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 956+ E163 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 956+ E166             >                org     $-1                 // alter last byte of Name just above to set
 956+ E165 D9          >                db      {b $} | END_BIT     // msb as name end
 956+ E166             >
 956+ E166 59 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 956+ E168             >Prev_Ptr        defl    Heap_Ptr
 956+ E168             >
 956+ E168             >mirror_Ptr      defl    $
 956+ E168             >
 956+ E168 73 66       >                dw      Dict_Ptr + 2        // xt
 956+ E16A             >Heap_Ptr        defl    $ - $E000           // save current HP
 956+ E16A             >
 956+ E16A             >Current_HP      defl  $ - $E000             // used to set HP once!
 956+ E16A             >
 956+ E16A             >//              ______________________________________________________________________
 956+ E16A             >//              Dictionary part
 956+ E16A             >
 956+ E16A             >                org     Dict_Ptr
 956+ 6671             >
 956+ 6671 68 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 956+ 6673             >
 956+ 6673             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 956+ 6673 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 956+ 6673 ~           >
 956+ 6673 ~           >
 956+ 6673             >                endif           ; ok        // for other definitions it "points" the correct handler
 956+ 6673             >                // Use of "; ok" to suppress "warning[fwdref]"
 956+ 6673             >
 956+ 6673             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 957+ 6673
 958+ 6673 C5                           push    bc                  // Save Instruction Pointer
 959+ 6674
 960+ 6674              Key_Wait:
 961+ 6674 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 962+ 6678 28 FA                        jr      z, Key_Wait
 963+ 667A
 964+ 667A 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 965+ 667D
 966+ 667D                              // decode character from above table
 967+ 667D 21 13 66                     ld      hl, Key_Table
 968+ 6680 01 0B 00                     ld      bc, $000B
 969+ 6683 ED B1                        cpir
 970+ 6685 20 05                        jr      nz, Key_DontMap
 971+ 6687 21 1E 66                         ld      hl, Key_MapTo
 972+ 668A 09                               add     hl, bc
 973+ 668B 7E                               ld      a, (hl)
 974+ 668C FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 975+ 668E 20 09                        jr      nz, Key_NoCapsLock
 976+ 6690 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 977+ 6693 7E                               ld      a, (hl)
 978+ 6694 EE 08                            xor     $08
 979+ 6696 77                               ld      (hl), a
 980+ 6697 3E 00                            ld      a, NUL_CHAR
 981+ 6699 6F           Key_NoCapsLock: ld      l, a
 982+ 669A 26 00                        ld      h, 0                // Prepare TOS
 983+ 669C
 984+ 669C FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 985+ 66A0
 986+ 66A0 C1                           pop     bc                  // Restore Instruction Pointer
 987+ 66A1
 988+ 66A1                              psh1
 988+ 66A1 E5          >                push    hl
 988+ 66A2 DD E9       >                jp      (ix)
 989+ 66A4
 990+ 66A4
 991+ 66A4              //  ______________________________________________________________________
 992+ 66A4              //
 993+ 66A4              // click        --
 994+ 66A4              // This definition need Standard ROM Interrupt to be served
 995+ 66A4              //
 996+ 66A4              //              New_Def CLICK, "CLICK", is_code, is_normal
 997+ 66A4              //
 998+ 66A4              //                push    bc
 999+ 66A4              //              ld      a, ($5C48)          // BORDCR system variable
1000+ 66A4              //              rra
1001+ 66A4              //              rra
1002+ 66A4              //              rra
1003+ 66A4              //              or      $18                 // quick'n'dirty click
1004+ 66A4              //              out     ($fe), a
1005+ 66A4              //              ld      b, 0
1006+ 66A4              //              djnz    $                   // wait loop
1007+ 66A4              //              xor     $18
1008+ 66A4              //              out     ($fe), a
1009+ 66A4              //                pop     bc
1010+ 66A4
1011+ 66A4              //              next
1012+ 66A4
1013+ 66A4              //  ______________________________________________________________________
1014+ 66A4              //
1015+ 66A4              // key?         -- f
1016+ 66A4              // key available
1017+ 66A4              //
1018+ 66A4              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1019+ 66A4              //
1020+ 66A4              //              ld      hl, 0000
1021+ 66A4              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1022+ 66A4              //              jr      z, Key_Q
1023+ 66A4              //                  dec     hl
1024+ 66A4              // Key_Q:
1025+ 66A4              //                psh1
1026+ 66A4              //              next
1027+ 66A4
1028+ 66A4              //  ______________________________________________________________________
1029+ 66A4              //
1030+ 66A4              // ?terminal    -- FALSE | TRUE
1031+ 66A4              // test for BREAK keypress
1032+ 66A4                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1032+ 66A4             >
1032+ 66A4             >Dict_Ptr        defl    $
1032+ 66A4             >
1032+ 66A4             >//              ______________________________________________________________________
1032+ 66A4             >//              Heap part
1032+ 66A4             >
1032+ 66A4             >
1032+ 66A4             >                org     (Heap_Ptr & $1FFF) + $E000
1032+ E16A             >
1032+ E16A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1032+ E16A             >Latest_Definition defl  Heap_Ptr
1032+ E16A             >
1032+ E16A             >                // dummy db directives used to calculate length of namec
1032+ E16A 3F 54 45 52 >                db      "?TERMINAL"
1032+ E16E 4D 49 4E 41 >
1032+ E172 4C          >
1032+ E173             >len_NFA         defl    $ - temp_NFA
1032+ E173             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1032+ E16A             >
1032+ E16A 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1032+ E16B 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1032+ E16F 4D 49 4E 41 >
1032+ E173 4C          >
1032+ E174             >                org     $-1                 // alter last byte of Name just above to set
1032+ E173 CC          >                db      {b $} | END_BIT     // msb as name end
1032+ E174             >
1032+ E174 62 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1032+ E176             >Prev_Ptr        defl    Heap_Ptr
1032+ E176             >
1032+ E176             >mirror_Ptr      defl    $
1032+ E176             >
1032+ E176 A6 66       >                dw      Dict_Ptr + 2        // xt
1032+ E178             >Heap_Ptr        defl    $ - $E000           // save current HP
1032+ E178             >
1032+ E178             >Current_HP      defl  $ - $E000             // used to set HP once!
1032+ E178             >
1032+ E178             >//              ______________________________________________________________________
1032+ E178             >//              Dictionary part
1032+ E178             >
1032+ E178             >                org     Dict_Ptr
1032+ 66A4             >
1032+ 66A4 76 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1032+ 66A6             >
1032+ 66A6             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1032+ 66A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1032+ 66A6 ~           >
1032+ 66A6 ~           >
1032+ 66A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1032+ 66A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1032+ 66A6             >
1032+ 66A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1033+ 66A6 D9                           exx
1034+ 66A7 01 FE 7F                     ld      bc, $7ffe
1035+ 66AA ED 50                        in      d, (c)
1036+ 66AC 41                           ld      b, c
1037+ 66AD ED 78                        in      a, (c)
1038+ 66AF B2                           or       d
1039+ 66B0 1F                           rra
1040+ 66B1 3F                           ccf
1041+ 66B2 ED 62                        sbc     hl, hl
1042+ 66B4 E5                           push    hl
1043+ 66B5 D9                           exx
1044+ 66B6                              next
1044+ 66B6 DD E9       >                jp      (ix)
1045+ 66B8
1046+ 66B8
1047+ 66B8              //  ______________________________________________________________________
1048+ 66B8              //
1049+ 66B8              // inkey        -- c | 0
1050+ 66B8              // call ROM inkey$ routine, returns c or "zero".
1051+ 66B8              //
1052+ 66B8              //              New_Def INKEY, "INKEY", is_code, is_normal
1053+ 66B8              //              push    bc
1054+ 66B8              //              push    de
1055+ 66B8              //              ld      (SP_Saved), sp
1056+ 66B8              //              ld      sp, Cold_origin - 5
1057+ 66B8              //              push    ix
1058+ 66B8              //              call    $15E6                   // instead of 15E9
1059+ 66B8              //              pop     ix
1060+ 66B8              //              ld      sp, (SP_Saved)
1061+ 66B8              //              ld      l, a
1062+ 66B8              //              ld      h, 0
1063+ 66B8              //              pop     de
1064+ 66B8              //              pop     bc
1065+ 66B8              //              psh1
1066+ 66B8
1067+ 66B8              //  ______________________________________________________________________
1068+ 66B8              //
1069+ 66B8              // select      n --
1070+ 66B8              // selects the given channel number
1071+ 66B8
1072+ 66B8                              New_Def SELECT, "SELECT", is_code, is_normal
1072+ 66B8             >
1072+ 66B8             >Dict_Ptr        defl    $
1072+ 66B8             >
1072+ 66B8             >//              ______________________________________________________________________
1072+ 66B8             >//              Heap part
1072+ 66B8             >
1072+ 66B8             >
1072+ 66B8             >                org     (Heap_Ptr & $1FFF) + $E000
1072+ E178             >
1072+ E178             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ E178             >Latest_Definition defl  Heap_Ptr
1072+ E178             >
1072+ E178             >                // dummy db directives used to calculate length of namec
1072+ E178 53 45 4C 45 >                db      "SELECT"
1072+ E17C 43 54       >
1072+ E17E             >len_NFA         defl    $ - temp_NFA
1072+ E17E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ E178             >
1072+ E178 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ E179 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1072+ E17D 43 54       >
1072+ E17F             >                org     $-1                 // alter last byte of Name just above to set
1072+ E17E D4          >                db      {b $} | END_BIT     // msb as name end
1072+ E17F             >
1072+ E17F 6A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1072+ E181             >Prev_Ptr        defl    Heap_Ptr
1072+ E181             >
1072+ E181             >mirror_Ptr      defl    $
1072+ E181             >
1072+ E181 BA 66       >                dw      Dict_Ptr + 2        // xt
1072+ E183             >Heap_Ptr        defl    $ - $E000           // save current HP
1072+ E183             >
1072+ E183             >Current_HP      defl  $ - $E000             // used to set HP once!
1072+ E183             >
1072+ E183             >//              ______________________________________________________________________
1072+ E183             >//              Dictionary part
1072+ E183             >
1072+ E183             >                org     Dict_Ptr
1072+ 66B8             >
1072+ 66B8 81 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1072+ 66BA             >
1072+ 66BA             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 66BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1072+ 66BA ~           >
1072+ 66BA ~           >
1072+ 66BA             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 66BA             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 66BA             >
1072+ 66BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 66BA E1                           pop     hl
1074+ 66BB C5                           push    bc
1075+ 66BC D5                           push    de
1076+ 66BD 7D                           ld      a, l
1077+ 66BE ED 73 92 63                  ld      (SP_Saved), sp
1078+ 66C2 31 61 63                     ld      sp, Cold_origin - 5
1079+ 66C5
1080+ 66C5 DD E5                        push    ix
1081+ 66C7 CD 01 16                     call    $1601
1082+ 66CA
1083+ 66CA
1084+ 66CA
1085+ 66CA
1086+ 66CA DD E1                        pop     ix
1087+ 66CC ED 7B 92 63                  ld      sp, (SP_Saved)
1088+ 66D0 D1                           pop     de
1089+ 66D1 C1                           pop     bc
1090+ 66D2                              next
1090+ 66D2 DD E9       >                jp      (ix)
1091+ 66D4
1092+ 66D4              //  ______________________________________________________________________
1093+ 66D4              //
1094+ 66D4              // ZX Spectrum Next - Low Level disk primitives.
1095+ 66D4              // this include is "here" for backward compatibility
1096+ 66D4
1097+ 66D4                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
   1++66D4              //  ______________________________________________________________________
   2++66D4              //
   3++66D4              //  next-opt.asm
   4++66D4              //
   5++66D4              //  ZX Spectrum Next - peculiar definitions
   6++66D4              //  ______________________________________________________________________
   7++66D4
   8++66D4              //  ______________________________________________________________________
   9++66D4              //
  10++66D4              // f_seek       d u -- f
  11++66D4              // Seek to position d in file-handle u.
  12++66D4              // Return a false-flag 0 on success, True flag on error
  13++66D4                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66D4             >
  13++66D4             >Dict_Ptr        defl    $
  13++66D4             >
  13++66D4             >//              ______________________________________________________________________
  13++66D4             >//              Heap part
  13++66D4             >
  13++66D4             >
  13++66D4             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E183             >
  13++E183             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E183             >Latest_Definition defl  Heap_Ptr
  13++E183             >
  13++E183             >                // dummy db directives used to calculate length of namec
  13++E183 46 5F 53 45 >                db      "F_SEEK"
  13++E187 45 4B       >
  13++E189             >len_NFA         defl    $ - temp_NFA
  13++E189             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E183             >
  13++E183 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E184 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E188 45 4B       >
  13++E18A             >                org     $-1                 // alter last byte of Name just above to set
  13++E189 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E18A             >
  13++E18A 78 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18C             >Prev_Ptr        defl    Heap_Ptr
  13++E18C             >
  13++E18C             >mirror_Ptr      defl    $
  13++E18C             >
  13++E18C D6 66       >                dw      Dict_Ptr + 2        // xt
  13++E18E             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18E             >
  13++E18E             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18E             >
  13++E18E             >//              ______________________________________________________________________
  13++E18E             >//              Dictionary part
  13++E18E             >
  13++E18E             >                org     Dict_Ptr
  13++66D4             >
  13++66D4 8C 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66D6             >
  13++66D6             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66D6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66D6 ~           >
  13++66D6 ~           >
  13++66D6             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66D6             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66D6             >
  13++66D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66D6 D9                            exx
  15++66D7 E1                            pop     hl                  // file-handle
  16++66D8 7D                            ld      a, l
  17++66D9 C1                            pop     bc                  // bc has high-word of d
  18++66DA D1                            pop     de
  19++66DB D9                           exx
  20++66DC DD E5                        push    ix
  21++66DE D5                           push    de
  22++66DF C5                           push    bc                  // save Instruction Pointer
  23++66E0 D9                            exx
  24++66E1 DD 21 00 00                   ld      ix, 0
  25++66E5 F3                            di
  26++66E6 CF                            rst     $08
  27++66E7 9F                            db      $9F
  28++66E8              F_Seek_Exit:
  29++66E8 FB                           ei
  30++66E9 C1                           pop     bc                  // restore Instruction Pointer
  31++66EA D1                           pop     de
  32++66EB DD E1                        pop     ix
  33++66ED ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66EF                              psh1
  34++66EF E5          >                push    hl
  34++66F0 DD E9       >                jp      (ix)
  35++66F2
  36++66F2              //  ______________________________________________________________________
  37++66F2              //
  38++66F2              // f_close      u -- f
  39++66F2              // Close file-handle u.
  40++66F2              // Return 0 on success, True flag on error
  41++66F2
  42++66F2                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66F2             >
  42++66F2             >Dict_Ptr        defl    $
  42++66F2             >
  42++66F2             >//              ______________________________________________________________________
  42++66F2             >//              Heap part
  42++66F2             >
  42++66F2             >
  42++66F2             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18E             >
  42++E18E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18E             >Latest_Definition defl  Heap_Ptr
  42++E18E             >
  42++E18E             >                // dummy db directives used to calculate length of namec
  42++E18E 46 5F 43 4C >                db      "F_CLOSE"
  42++E192 4F 53 45    >
  42++E195             >len_NFA         defl    $ - temp_NFA
  42++E195             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18E             >
  42++E18E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18F 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E193 4F 53 45    >
  42++E196             >                org     $-1                 // alter last byte of Name just above to set
  42++E195 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E196             >
  42++E196 83 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E198             >Prev_Ptr        defl    Heap_Ptr
  42++E198             >
  42++E198             >mirror_Ptr      defl    $
  42++E198             >
  42++E198 F4 66       >                dw      Dict_Ptr + 2        // xt
  42++E19A             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E19A             >
  42++E19A             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E19A             >
  42++E19A             >//              ______________________________________________________________________
  42++E19A             >//              Dictionary part
  42++E19A             >
  42++E19A             >                org     Dict_Ptr
  42++66F2             >
  42++66F2 98 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66F4             >
  42++66F4             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66F4 ~           >
  42++66F4 ~           >
  42++66F4             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66F4             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66F4             >
  42++66F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66F4
  44++66F4 E1                           pop     hl
  45++66F5 7D                           ld      a, l                // file-handle
  46++66F6 DD E5                        push    ix
  47++66F8 D5                           push    de
  48++66F9 C5                           push    bc                  // Save Instruction pointer
  49++66FA F3                           di
  50++66FB CF                           rst     $08
  51++66FC 9B                           db      $9B
  52++66FD 18 E9                        jr      F_Seek_Exit
  53++66FF              //              ei
  54++66FF              //              pop     de
  55++66FF              //              pop     bc
  56++66FF              //              pop     ix
  57++66FF              //              sbc     hl, hl
  58++66FF              //              psh1
  59++66FF
  60++66FF              //  ______________________________________________________________________
  61++66FF              //
  62++66FF              // f_sync      u -- f
  63++66FF              // Close file-handle u.
  64++66FF              // Return 0 on success, True flag on error
  65++66FF
  66++66FF                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++66FF             >
  66++66FF             >Dict_Ptr        defl    $
  66++66FF             >
  66++66FF             >//              ______________________________________________________________________
  66++66FF             >//              Heap part
  66++66FF             >
  66++66FF             >
  66++66FF             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E19A             >
  66++E19A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E19A             >Latest_Definition defl  Heap_Ptr
  66++E19A             >
  66++E19A             >                // dummy db directives used to calculate length of namec
  66++E19A 46 5F 53 59 >                db      "F_SYNC"
  66++E19E 4E 43       >
  66++E1A0             >len_NFA         defl    $ - temp_NFA
  66++E1A0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E19A             >
  66++E19A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E19B 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19F 4E 43       >
  66++E1A1             >                org     $-1                 // alter last byte of Name just above to set
  66++E1A0 C3          >                db      {b $} | END_BIT     // msb as name end
  66++E1A1             >
  66++E1A1 8E 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A3             >Prev_Ptr        defl    Heap_Ptr
  66++E1A3             >
  66++E1A3             >mirror_Ptr      defl    $
  66++E1A3             >
  66++E1A3 01 67       >                dw      Dict_Ptr + 2        // xt
  66++E1A5             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A5             >
  66++E1A5             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A5             >
  66++E1A5             >//              ______________________________________________________________________
  66++E1A5             >//              Dictionary part
  66++E1A5             >
  66++E1A5             >                org     Dict_Ptr
  66++66FF             >
  66++66FF A3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++6701             >
  66++6701             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++6701 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++6701 ~           >
  66++6701 ~           >
  66++6701             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++6701             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++6701             >
  66++6701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++6701 E1                           pop     hl
  68++6702 7D                           ld      a, l                // file-handle
  69++6703 DD E5                        push    ix
  70++6705 D5                           push    de
  71++6706 C5                           push    bc
  72++6707 F3                           di
  73++6708 CF                           rst     $08
  74++6709 9C                           db      $9C
  75++670A 18 DC                        jr      F_Seek_Exit
  76++670C              //              ei
  77++670C              //              pop     de
  78++670C              //              pop     bc
  79++670C              //              pop     ix
  80++670C              //              sbc     hl, hl
  81++670C              //              psh1
  82++670C
  83++670C              //  ______________________________________________________________________
  84++670C              //
  85++670C              // f_fgetpos    u -- d f
  86++670C              // Seek to position d in file-handle u.
  87++670C              // Return a false-flag 0 on success, True flag on error
  88++670C                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++670C             >
  88++670C             >Dict_Ptr        defl    $
  88++670C             >
  88++670C             >//              ______________________________________________________________________
  88++670C             >//              Heap part
  88++670C             >
  88++670C             >
  88++670C             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A5             >
  88++E1A5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A5             >Latest_Definition defl  Heap_Ptr
  88++E1A5             >
  88++E1A5             >                // dummy db directives used to calculate length of namec
  88++E1A5 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A9 45 54 50 4F >
  88++E1AD 53          >
  88++E1AE             >len_NFA         defl    $ - temp_NFA
  88++E1AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A5             >
  88++E1A5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A6 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1AA 45 54 50 4F >
  88++E1AE 53          >
  88++E1AF             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AE D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AF             >
  88++E1AF 9A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1B1             >Prev_Ptr        defl    Heap_Ptr
  88++E1B1             >
  88++E1B1             >mirror_Ptr      defl    $
  88++E1B1             >
  88++E1B1 0E 67       >                dw      Dict_Ptr + 2        // xt
  88++E1B3             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B3             >
  88++E1B3             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B3             >
  88++E1B3             >//              ______________________________________________________________________
  88++E1B3             >//              Dictionary part
  88++E1B3             >
  88++E1B3             >                org     Dict_Ptr
  88++670C             >
  88++670C B1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++670E             >
  88++670E             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++670E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++670E ~           >
  88++670E ~           >
  88++670E             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++670E             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++670E             >
  88++670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++670E E1                            pop     hl
  90++670F 7D                            ld      a, l                // file-handle
  91++6710 DD E5                         push    ix
  92++6712 D5                            push    de
  93++6713 C5                            push    bc
  94++6714 F3                            di
  95++6715 CF                            rst     $08
  96++6716 A0                            db      $A0
  97++6717 FB                            ei
  98++6718 D9                           exx
  99++6719 C1                           pop     bc                  // IP
 100++671A D1                           pop     de                  // Return Stack Pointer
 101++671B DD E1                        pop     ix
 102++671D D9                            exx
 103++671E D5                            push    de
 104++671F C5                            push    bc
 105++6720 ED 62                         sbc     hl, hl
 106++6722 E5                            push    hl
 107++6723 D9                           exx
 108++6724                              next
 108++6724 DD E9       >                jp      (ix)
 109++6726
 110++6726              //  ______________________________________________________________________
 111++6726              //
 112++6726              // f_read       a n u -- n f
 113++6726              // Read b bytes from file-handle u to address a
 114++6726              // Return the actual number n of bytes read
 115++6726              // Return 0 on success, True flag on error
 116++6726                              New_Def F_READ, "F_READ", is_code, is_normal
 116++6726             >
 116++6726             >Dict_Ptr        defl    $
 116++6726             >
 116++6726             >//              ______________________________________________________________________
 116++6726             >//              Heap part
 116++6726             >
 116++6726             >
 116++6726             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B3             >
 116++E1B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B3             >Latest_Definition defl  Heap_Ptr
 116++E1B3             >
 116++E1B3             >                // dummy db directives used to calculate length of namec
 116++E1B3 46 5F 52 45 >                db      "F_READ"
 116++E1B7 41 44       >
 116++E1B9             >len_NFA         defl    $ - temp_NFA
 116++E1B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B3             >
 116++E1B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B4 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B8 41 44       >
 116++E1BA             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B9 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1BA             >
 116++E1BA A5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BC             >Prev_Ptr        defl    Heap_Ptr
 116++E1BC             >
 116++E1BC             >mirror_Ptr      defl    $
 116++E1BC             >
 116++E1BC 28 67       >                dw      Dict_Ptr + 2        // xt
 116++E1BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BE             >
 116++E1BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BE             >
 116++E1BE             >//              ______________________________________________________________________
 116++E1BE             >//              Dictionary part
 116++E1BE             >
 116++E1BE             >                org     Dict_Ptr
 116++6726             >
 116++6726 BC 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++6728             >
 116++6728             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++6728 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++6728 ~           >
 116++6728 ~           >
 116++6728             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++6728             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++6728             >
 116++6728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++6728 D9                            exx
 118++6729 E1                            pop     hl
 119++672A 7D                            ld      a, l                // file-handle
 120++672B C1                            pop     bc                  // bc has bytes to read
 121++672C DD E3                         ex      (sp), ix            // ix has address
 122++672E D9                           exx
 123++672F D5                           push    de                  // Save Return Stack pointer
 124++6730 C5                           push    bc                  // Save Instruction pointer
 125++6731 D9                            exx
 126++6732 F3                            di
 127++6733 CF                            rst     $08
 128++6734 9D                            db      $9D
 129++6735              F_Read_Exit:
 130++6735 FB                           ei
 131++6736 D9                           exx
 132++6737 C1                           pop     bc                  // Restore Instruction pointer
 133++6738 D1                           pop     de                  // Restore Return Stack pointer
 134++6739 DD E1                        pop     ix                  // Restore ix
 135++673B D9                            exx
 136++673C D5                            push    de                  // bytes involved in i/o operation
 137++673D ED 62                         sbc     hl, hl
 138++673F E5                            push    hl
 139++6740 D9                           exx
 140++6741                              next
 140++6741 DD E9       >                jp      (ix)
 141++6743
 142++6743              //  ______________________________________________________________________
 143++6743              //
 144++6743              // f_write      a n u -- n f
 145++6743              // Write bytes currently stored at address a to file-handle u.
 146++6743              // Return the actual n bytes written and 0 on success, True flag on error.
 147++6743                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++6743             >
 147++6743             >Dict_Ptr        defl    $
 147++6743             >
 147++6743             >//              ______________________________________________________________________
 147++6743             >//              Heap part
 147++6743             >
 147++6743             >
 147++6743             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1BE             >
 147++E1BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1BE             >Latest_Definition defl  Heap_Ptr
 147++E1BE             >
 147++E1BE             >                // dummy db directives used to calculate length of namec
 147++E1BE 46 5F 57 52 >                db      "F_WRITE"
 147++E1C2 49 54 45    >
 147++E1C5             >len_NFA         defl    $ - temp_NFA
 147++E1C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1BE             >
 147++E1BE 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1BF 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C3 49 54 45    >
 147++E1C6             >                org     $-1                 // alter last byte of Name just above to set
 147++E1C5 C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1C6             >
 147++E1C6 B3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1C8             >Prev_Ptr        defl    Heap_Ptr
 147++E1C8             >
 147++E1C8             >mirror_Ptr      defl    $
 147++E1C8             >
 147++E1C8 45 67       >                dw      Dict_Ptr + 2        // xt
 147++E1CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1CA             >
 147++E1CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1CA             >
 147++E1CA             >//              ______________________________________________________________________
 147++E1CA             >//              Dictionary part
 147++E1CA             >
 147++E1CA             >                org     Dict_Ptr
 147++6743             >
 147++6743 C8 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++6745             >
 147++6745             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++6745 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++6745 ~           >
 147++6745 ~           >
 147++6745             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++6745             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++6745             >
 147++6745             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++6745 D9                            exx
 149++6746 E1                            pop     hl
 150++6747 7D                            ld      a, l                // file-handle
 151++6748 C1                            pop     bc                  // bc has bytes to read
 152++6749 DD E3                         ex      (sp), ix            // ix has address
 153++674B D9                           exx
 154++674C D5                           push    de                  // Save Return Stack pointer
 155++674D C5                           push    bc                  // Save Instruction pointer
 156++674E D9                            exx
 157++674F F3                            di
 158++6750 CF                            rst     $08
 159++6751 9E                            db      $9E
 160++6752 18 E1                         jr F_Read_Exit
 161++6754              //                ei
 162++6754              //                exx
 163++6754              //                pop     de                  // Restore Return Stack pointer
 164++6754              //                pop     bc                  // Restore Instruction pointer
 165++6754              //                pop     ix                  // Restore ix
 166++6754              //                 exx
 167++6754              //                 push    de                  // bytes involved in i/o operation
 168++6754              //                 sbc     hl, hl
 169++6754              //                 push    hl
 170++6754              //                exx
 171++6754              //                next
 172++6754
 173++6754              //  ______________________________________________________________________
 174++6754              //
 175++6754              // f_open       a1 a2 b -- u f
 176++6754              // open a file
 177++6754              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++6754              // a2 is address to an 8-byte header data used in some cases.
 179++6754              // b is access mode-byte, that is a combination of:
 180++6754              // any/all of:
 181++6754              //   esx_mode_read          $01 request read access
 182++6754              //   esx_mode_write         $02 request write access
 183++6754              //   esx_mode_use_header    $40 read/write +3DOS header
 184++6754              // plus one of:
 185++6754              //   esx_mode_open_exist    $00 only open existing file
 186++6754              //   esx_mode_open_creat    $08 open existing or create file
 187++6754              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++6754              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++6754              // Return file-handle u and 0 on success, True flag on error
 190++6754                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++6754             >
 190++6754             >Dict_Ptr        defl    $
 190++6754             >
 190++6754             >//              ______________________________________________________________________
 190++6754             >//              Heap part
 190++6754             >
 190++6754             >
 190++6754             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1CA             >
 190++E1CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1CA             >Latest_Definition defl  Heap_Ptr
 190++E1CA             >
 190++E1CA             >                // dummy db directives used to calculate length of namec
 190++E1CA 46 5F 4F 50 >                db      "F_OPEN"
 190++E1CE 45 4E       >
 190++E1D0             >len_NFA         defl    $ - temp_NFA
 190++E1D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1CA             >
 190++E1CA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1CB 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1CF 45 4E       >
 190++E1D1             >                org     $-1                 // alter last byte of Name just above to set
 190++E1D0 CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1D1             >
 190++E1D1 BE 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D3             >Prev_Ptr        defl    Heap_Ptr
 190++E1D3             >
 190++E1D3             >mirror_Ptr      defl    $
 190++E1D3             >
 190++E1D3 56 67       >                dw      Dict_Ptr + 2        // xt
 190++E1D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1D5             >
 190++E1D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1D5             >
 190++E1D5             >//              ______________________________________________________________________
 190++E1D5             >//              Dictionary part
 190++E1D5             >
 190++E1D5             >                org     Dict_Ptr
 190++6754             >
 190++6754 D3 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++6756             >
 190++6756             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6756 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++6756 ~           >
 190++6756 ~           >
 190++6756             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6756             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6756             >
 190++6756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6756 D9                            exx
 192++6757 C1                            pop     bc                  // file-mode
 193++6758 41                            ld      b, c                // file-mode
 194++6759 D1                            pop     de                  // 8-bytes buffer if any
 195++675A DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++675C D9                           exx
 197++675D D5                           push    de                  // Save Return Stack pointer
 198++675E C5                           push    bc                  // Save Instruction pointer
 199++675F D9                            exx
 200++6760 3E 2A                         ld      a, "*"
 201++6762 F3                            di
 202++6763 CF                            rst     $08
 203++6764 9A                            db      $9A
 204++6765              F_Open_Exit:
 205++6765              //               ei                         // removed because is repeated in f_read_exit
 206++6765 5F                            ld      e, a                // return the handle-number
 207++6766 16 00                         ld      d, 0
 208++6768 18 CB                        jr F_Read_Exit
 209++676A
 210++676A              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++676A              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++676A              //   \ DROP
 213++676A              //   \ F_CLOSE
 214++676A
 215++676A
 216++676A              //  ______________________________________________________________________
 217++676A              //
 218++676A              // f_opendir    a1 -- u f
 219++676A              // open a file
 220++676A                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++676A             >
 220++676A             >Dict_Ptr        defl    $
 220++676A             >
 220++676A             >//              ______________________________________________________________________
 220++676A             >//              Heap part
 220++676A             >
 220++676A             >
 220++676A             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1D5             >
 220++E1D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1D5             >Latest_Definition defl  Heap_Ptr
 220++E1D5             >
 220++E1D5             >                // dummy db directives used to calculate length of namec
 220++E1D5 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1D9 45 4E 44 49 >
 220++E1DD 52          >
 220++E1DE             >len_NFA         defl    $ - temp_NFA
 220++E1DE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1D5             >
 220++E1D5 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1D6 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1DA 45 4E 44 49 >
 220++E1DE 52          >
 220++E1DF             >                org     $-1                 // alter last byte of Name just above to set
 220++E1DE D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1DF             >
 220++E1DF CA 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1E1             >Prev_Ptr        defl    Heap_Ptr
 220++E1E1             >
 220++E1E1             >mirror_Ptr      defl    $
 220++E1E1             >
 220++E1E1 6C 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E3             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E3             >
 220++E1E3             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E3             >
 220++E1E3             >//              ______________________________________________________________________
 220++E1E3             >//              Dictionary part
 220++E1E3             >
 220++E1E3             >                org     Dict_Ptr
 220++676A             >
 220++676A E1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++676C             >
 220++676C             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++676C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++676C ~           >
 220++676C ~           >
 220++676C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++676C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++676C             >
 220++676C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++676C DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++676E D5                           push    de                  // Save Return Stack pointer
 223++676F C5                           push    bc                  // Save Instruction pointer
 224++6770 06 10                        ld      b, $10              // file-mode
 225++6772 3E 43                        ld      a, "C"
 226++6774 F3                           di
 227++6775 CF                           rst     $08
 228++6776 A3                           db      $A3
 229++6777 18 EC                        jr      F_Open_Exit
 230++6779
 231++6779
 232++6779              //  ______________________________________________________________________
 233++6779              //
 234++6779              // f_readdir    a1 a2 b -- u f
 235++6779              // open a file
 236++6779                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++6779             >
 236++6779             >Dict_Ptr        defl    $
 236++6779             >
 236++6779             >//              ______________________________________________________________________
 236++6779             >//              Heap part
 236++6779             >
 236++6779             >
 236++6779             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E3             >
 236++E1E3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E3             >Latest_Definition defl  Heap_Ptr
 236++E1E3             >
 236++E1E3             >                // dummy db directives used to calculate length of namec
 236++E1E3 46 5F 52 45 >                db      "F_READDIR"
 236++E1E7 41 44 44 49 >
 236++E1EB 52          >
 236++E1EC             >len_NFA         defl    $ - temp_NFA
 236++E1EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E3             >
 236++E1E3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E4 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1E8 41 44 44 49 >
 236++E1EC 52          >
 236++E1ED             >                org     $-1                 // alter last byte of Name just above to set
 236++E1EC D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1ED             >
 236++E1ED D5 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1EF             >Prev_Ptr        defl    Heap_Ptr
 236++E1EF             >
 236++E1EF             >mirror_Ptr      defl    $
 236++E1EF             >
 236++E1EF 7B 67       >                dw      Dict_Ptr + 2        // xt
 236++E1F1             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1F1             >
 236++E1F1             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1F1             >
 236++E1F1             >//              ______________________________________________________________________
 236++E1F1             >//              Dictionary part
 236++E1F1             >
 236++E1F1             >                org     Dict_Ptr
 236++6779             >
 236++6779 EF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++677B             >
 236++677B             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++677B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++677B ~           >
 236++677B ~           >
 236++677B             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++677B             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++677B             >
 236++677B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++677B D9                            exx
 238++677C E1                            pop     hl
 239++677D 7D                            ld      a, l
 240++677E D1                            pop     de
 241++677F DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++6781 D9                           exx
 243++6782 D5                           push    de                  // Save Return Stack pointer
 244++6783 C5                           push    bc                  // Save Instruction pointer
 245++6784 D9                            exx
 246++6785 F3                            di
 247++6786 CF                            rst     $08
 248++6787 A4                            db      $A4
 249++6788 18 DB                         jr      F_Open_Exit
 250++678A
 251++678A
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt0.asm
1098+ 678A
1099+ 678A
1100+ 678A              //  ______________________________________________________________________
1101+ 678A              //
1102+ 678A              // cmove    a1 a2 u --
1103+ 678A              // If u > 0, moves memory content starting at address a1 for n bytes long
1104+ 678A              // storing then starting at address addr2.
1105+ 678A              // The content of a1 is moved first. See CMOVE> also.
1106+ 678A                              New_Def CMOVE, "CMOVE", is_code, is_normal
1106+ 678A             >
1106+ 678A             >Dict_Ptr        defl    $
1106+ 678A             >
1106+ 678A             >//              ______________________________________________________________________
1106+ 678A             >//              Heap part
1106+ 678A             >
1106+ 678A             >
1106+ 678A             >                org     (Heap_Ptr & $1FFF) + $E000
1106+ E1F1             >
1106+ E1F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1106+ E1F1             >Latest_Definition defl  Heap_Ptr
1106+ E1F1             >
1106+ E1F1             >                // dummy db directives used to calculate length of namec
1106+ E1F1 43 4D 4F 56 >                db      "CMOVE"
1106+ E1F5 45          >
1106+ E1F6             >len_NFA         defl    $ - temp_NFA
1106+ E1F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1106+ E1F1             >
1106+ E1F1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1106+ E1F2 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1106+ E1F6 45          >
1106+ E1F7             >                org     $-1                 // alter last byte of Name just above to set
1106+ E1F6 C5          >                db      {b $} | END_BIT     // msb as name end
1106+ E1F7             >
1106+ E1F7 E3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1106+ E1F9             >Prev_Ptr        defl    Heap_Ptr
1106+ E1F9             >
1106+ E1F9             >mirror_Ptr      defl    $
1106+ E1F9             >
1106+ E1F9 8C 67       >                dw      Dict_Ptr + 2        // xt
1106+ E1FB             >Heap_Ptr        defl    $ - $E000           // save current HP
1106+ E1FB             >
1106+ E1FB             >Current_HP      defl  $ - $E000             // used to set HP once!
1106+ E1FB             >
1106+ E1FB             >//              ______________________________________________________________________
1106+ E1FB             >//              Dictionary part
1106+ E1FB             >
1106+ E1FB             >                org     Dict_Ptr
1106+ 678A             >
1106+ 678A F9 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1106+ 678C             >
1106+ 678C             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1106+ 678C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1106+ 678C ~           >
1106+ 678C ~           >
1106+ 678C             >                endif           ; ok        // for other definitions it "points" the correct handler
1106+ 678C             >                // Use of "; ok" to suppress "warning[fwdref]"
1106+ 678C             >
1106+ 678C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1107+ 678C D9                           exx
1108+ 678D
1109+ 678D C1                           pop     bc                  // bc has counter
1110+ 678E D1                           pop     de                  // de now has dest
1111+ 678F E1                           pop     hl                 // hl has source, save Instruction Pointer
1112+ 6790 78                           ld      a, b
1113+ 6791 B1                           or      c
1114+ 6792 28 02                        jr      z, Cmove_NoMove
1115+ 6794 ED B0                            ldir
1116+ 6796              Cmove_NoMove:
1117+ 6796 D9                           exx
1118+ 6797
1119+ 6797                              next
1119+ 6797 DD E9       >                jp      (ix)
1120+ 6799
1121+ 6799              //  ______________________________________________________________________
1122+ 6799              //
1123+ 6799              // cmove>    a1 a2 u --
1124+ 6799              // If u > 0, moves memory content starting at address a1 for n bytes long
1125+ 6799              // storing then starting at address addr2.
1126+ 6799              // The content of a1 is moved last. See cmove.
1127+ 6799                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1127+ 6799             >
1127+ 6799             >Dict_Ptr        defl    $
1127+ 6799             >
1127+ 6799             >//              ______________________________________________________________________
1127+ 6799             >//              Heap part
1127+ 6799             >
1127+ 6799             >
1127+ 6799             >                org     (Heap_Ptr & $1FFF) + $E000
1127+ E1FB             >
1127+ E1FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1127+ E1FB             >Latest_Definition defl  Heap_Ptr
1127+ E1FB             >
1127+ E1FB             >                // dummy db directives used to calculate length of namec
1127+ E1FB 43 4D 4F 56 >                db      "CMOVE>"
1127+ E1FF 45 3E       >
1127+ E201             >len_NFA         defl    $ - temp_NFA
1127+ E201             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1127+ E1FB             >
1127+ E1FB 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1127+ E1FC 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1127+ E200 45 3E       >
1127+ E202             >                org     $-1                 // alter last byte of Name just above to set
1127+ E201 BE          >                db      {b $} | END_BIT     // msb as name end
1127+ E202             >
1127+ E202 F1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1127+ E204             >Prev_Ptr        defl    Heap_Ptr
1127+ E204             >
1127+ E204             >mirror_Ptr      defl    $
1127+ E204             >
1127+ E204 9B 67       >                dw      Dict_Ptr + 2        // xt
1127+ E206             >Heap_Ptr        defl    $ - $E000           // save current HP
1127+ E206             >
1127+ E206             >Current_HP      defl  $ - $E000             // used to set HP once!
1127+ E206             >
1127+ E206             >//              ______________________________________________________________________
1127+ E206             >//              Dictionary part
1127+ E206             >
1127+ E206             >                org     Dict_Ptr
1127+ 6799             >
1127+ 6799 04 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1127+ 679B             >
1127+ 679B             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1127+ 679B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1127+ 679B ~           >
1127+ 679B ~           >
1127+ 679B             >                endif           ; ok        // for other definitions it "points" the correct handler
1127+ 679B             >                // Use of "; ok" to suppress "warning[fwdref]"
1127+ 679B             >
1127+ 679B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1128+ 679B D9                           exx
1129+ 679C
1130+ 679C C1                           pop     bc                  // bc has counter
1131+ 679D D1                           pop     de                  // de has dest
1132+ 679E E1                           pop     hl                  // hl has source, save Instruction Pointer
1133+ 679F 78                           ld      a, b
1134+ 67A0 B1                           or      c
1135+ 67A1 28 08                        jr      z, CmoveV_NoMove
1136+ 67A3 EB                               ex      de, hl              // compute address to
1137+ 67A4 09                               add     hl, bc              // operate backward
1138+ 67A5 2B                               dec     hl
1139+ 67A6 EB                               ex      de, hl
1140+ 67A7 09                               add     hl, bc
1141+ 67A8 2B                               dec     hl
1142+ 67A9 ED B8                            lddr                        // backward
1143+ 67AB              CmoveV_NoMove:
1144+ 67AB D9                           exx
1145+ 67AC
1146+ 67AC                              next
1146+ 67AC DD E9       >                jp      (ix)
1147+ 67AE
1148+ 67AE              //  ______________________________________________________________________
1149+ 67AE              //
1150+ 67AE              // um*      u1 u2 -- ud
1151+ 67AE              // Unsigned multiplication
1152+ 67AE              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1153+ 67AE              // On the stack a double number is treated as two single numbers
1154+ 67AE              // where DE is on the top of the stack and HL is the second from top,
1155+ 67AE              // Instead, in 2VARIABLE a double number is stored as EDLH.
1156+ 67AE              // this definition could use "MUL" Z80N new op-code.
1157+ 67AE                              New_Def UM_MUL, "UM*", is_code, is_normal
1157+ 67AE             >
1157+ 67AE             >Dict_Ptr        defl    $
1157+ 67AE             >
1157+ 67AE             >//              ______________________________________________________________________
1157+ 67AE             >//              Heap part
1157+ 67AE             >
1157+ 67AE             >
1157+ 67AE             >                org     (Heap_Ptr & $1FFF) + $E000
1157+ E206             >
1157+ E206             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1157+ E206             >Latest_Definition defl  Heap_Ptr
1157+ E206             >
1157+ E206             >                // dummy db directives used to calculate length of namec
1157+ E206 55 4D 2A    >                db      "UM*"
1157+ E209             >len_NFA         defl    $ - temp_NFA
1157+ E209             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1157+ E206             >
1157+ E206 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1157+ E207 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1157+ E20A             >                org     $-1                 // alter last byte of Name just above to set
1157+ E209 AA          >                db      {b $} | END_BIT     // msb as name end
1157+ E20A             >
1157+ E20A FB 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1157+ E20C             >Prev_Ptr        defl    Heap_Ptr
1157+ E20C             >
1157+ E20C             >mirror_Ptr      defl    $
1157+ E20C             >
1157+ E20C B0 67       >                dw      Dict_Ptr + 2        // xt
1157+ E20E             >Heap_Ptr        defl    $ - $E000           // save current HP
1157+ E20E             >
1157+ E20E             >Current_HP      defl  $ - $E000             // used to set HP once!
1157+ E20E             >
1157+ E20E             >//              ______________________________________________________________________
1157+ E20E             >//              Dictionary part
1157+ E20E             >
1157+ E20E             >                org     Dict_Ptr
1157+ 67AE             >
1157+ 67AE 0C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1157+ 67B0             >
1157+ 67B0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1157+ 67B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1157+ 67B0 ~           >
1157+ 67B0 ~           >
1157+ 67B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1157+ 67B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1157+ 67B0             >
1157+ 67B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1158+ 67B0 D9                           exx
1159+ 67B1 D1                           pop     de                    // de has u2 operand
1160+ 67B2 E1                           pop     hl                    // hl has u1 operand
1161+ 67B3 45                           ld      b, l
1162+ 67B4 4B                           ld      c, e
1163+ 67B5 5D                           ld      e, l
1164+ 67B6 6A                           ld      l, d
1165+ 67B7 E5                           push    hl
1166+ 67B8 69                           ld      l, c
1167+ 67B9 ED 30                        mul
1168+ 67BB EB                           ex      de, hl
1169+ 67BC ED 30                        mul
1170+ 67BE AF                           xor     a
1171+ 67BF 19                           add     hl, de
1172+ 67C0 8F                           adc     a
1173+ 67C1 59                           ld      e, c
1174+ 67C2 50                           ld      d, b
1175+ 67C3 ED 30                        mul
1176+ 67C5 47                           ld      b, a
1177+ 67C6 4C                           ld      c, h
1178+ 67C7 7A                           ld      a, d
1179+ 67C8 85                           add     l
1180+ 67C9 67                           ld      h, a
1181+ 67CA 6B                           ld      l, e
1182+ 67CB D1                           pop     de
1183+ 67CC ED 30                        mul
1184+ 67CE EB                           ex      de, hl
1185+ 67CF ED 4A                        adc     hl, bc
1186+ 67D1 D5                           push    de
1187+ 67D2 E5                           push    hl
1188+ 67D3 D9                           exx
1189+ 67D4                              next
1189+ 67D4 DD E9       >                jp      (ix)
1190+ 67D6
1191+ 67D6              //  ______________________________________________________________________
1192+ 67D6              //
1193+ 67D6              // um/mod      ud u1 -- q r
1194+ 67D6              // divides ud into u1 giving quotient q and remainder r
1195+ 67D6              // algorithm takes 16 bit at a time starting from msb
1196+ 67D6              // DE grows from lsb upward with quotient result
1197+ 67D6              // HL keeps the remainder at each stage of division
1198+ 67D6              // each loop 'lowers' the next binary digit to form the current dividend
1199+ 67D6                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1199+ 67D6             >
1199+ 67D6             >Dict_Ptr        defl    $
1199+ 67D6             >
1199+ 67D6             >//              ______________________________________________________________________
1199+ 67D6             >//              Heap part
1199+ 67D6             >
1199+ 67D6             >
1199+ 67D6             >                org     (Heap_Ptr & $1FFF) + $E000
1199+ E20E             >
1199+ E20E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1199+ E20E             >Latest_Definition defl  Heap_Ptr
1199+ E20E             >
1199+ E20E             >                // dummy db directives used to calculate length of namec
1199+ E20E 55 4D 2F 4D >                db      "UM/MOD"
1199+ E212 4F 44       >
1199+ E214             >len_NFA         defl    $ - temp_NFA
1199+ E214             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1199+ E20E             >
1199+ E20E 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1199+ E20F 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1199+ E213 4F 44       >
1199+ E215             >                org     $-1                 // alter last byte of Name just above to set
1199+ E214 C4          >                db      {b $} | END_BIT     // msb as name end
1199+ E215             >
1199+ E215 06 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1199+ E217             >Prev_Ptr        defl    Heap_Ptr
1199+ E217             >
1199+ E217             >mirror_Ptr      defl    $
1199+ E217             >
1199+ E217 D8 67       >                dw      Dict_Ptr + 2        // xt
1199+ E219             >Heap_Ptr        defl    $ - $E000           // save current HP
1199+ E219             >
1199+ E219             >Current_HP      defl  $ - $E000             // used to set HP once!
1199+ E219             >
1199+ E219             >//              ______________________________________________________________________
1199+ E219             >//              Dictionary part
1199+ E219             >
1199+ E219             >                org     Dict_Ptr
1199+ 67D6             >
1199+ 67D6 17 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1199+ 67D8             >
1199+ 67D8             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1199+ 67D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1199+ 67D8 ~           >
1199+ 67D8 ~           >
1199+ 67D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1199+ 67D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1199+ 67D8             >
1199+ 67D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1200+ 67D8 D9                           exx
1201+ 67D9 C1                           pop     bc                      // divisor
1202+ 67DA
1203+ 67DA E1                           pop     hl                      // < high part
1204+ 67DB D1                           pop     de                      // < low part and
1205+ 67DC
1206+ 67DC 7D                           ld      a, l                    // check without changing arguments
1207+ 67DD 91                           sub     c                       // if divisor is greater than high part
1208+ 67DE 7C                           ld      a, h                    // so quotient will be in range
1209+ 67DF 98                           sbc     a, b
1210+ 67E0 30 20                        jr      nc, Um_DivMod_OutOfRange
1211+ 67E2 3E 10                            ld      a, 16
1212+ 67E4              Um_DivMod_Loop:
1213+ 67E4 CB 23                                sla     e
1214+ 67E6 CB 12                                rl      d
1215+ 67E8 ED 6A                                adc     hl, hl
1216+ 67EA 30 05                                jr      nc, Um_DivMod_Carry
1217+ 67EC A7                                       and     a
1218+ 67ED ED 42                                    sbc     hl, bc
1219+ 67EF 18 07                                jr      Um_DivMod_Endif    // else
1220+ 67F1              Um_DivMod_Carry:
1221+ 67F1 A7                                       and     a
1222+ 67F2 ED 42                                    sbc     hl, bc
1223+ 67F4 30 02                                    jr      nc, Um_DivMod_Endif
1224+ 67F6 09                                           add     hl, bc
1225+ 67F7 1B                                           dec     de
1226+ 67F8              Um_DivMod_Endif:                                   // endif
1227+ 67F8 13                                   inc     de
1228+ 67F9 3D                                   dec     a
1229+ 67FA 20 E8                            jr      nz, Um_DivMod_Loop
1230+ 67FC EB                               ex      de, hl
1231+ 67FD              Um_DivMod_Bailout:
1232+ 67FD D5                               push    de                  // de := remanider
1233+ 67FE E5                               push    hl                  // hl := quotient
1234+ 67FF D9                               exx
1235+ 6800                                  next
1235+ 6800 DD E9       >                jp      (ix)
1236+ 6802
1237+ 6802              Um_DivMod_OutOfRange:
1238+ 6802 21 FF FF                     ld      hl, -1
1239+ 6805 54                           ld      d, h
1240+ 6806 5D                           ld      e, l
1241+ 6807 18 F4                        jr      Um_DivMod_Bailout
1242+ 6809
1243+ 6809              //  ______________________________________________________________________
1244+ 6809              //
1245+ 6809              // and          n1 n2 -- n3
1246+ 6809              // bit logical AND. Returns n3 as n1 & n2
1247+ 6809                              New_Def AND_OP, "AND", is_code, is_normal
1247+ 6809             >
1247+ 6809             >Dict_Ptr        defl    $
1247+ 6809             >
1247+ 6809             >//              ______________________________________________________________________
1247+ 6809             >//              Heap part
1247+ 6809             >
1247+ 6809             >
1247+ 6809             >                org     (Heap_Ptr & $1FFF) + $E000
1247+ E219             >
1247+ E219             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1247+ E219             >Latest_Definition defl  Heap_Ptr
1247+ E219             >
1247+ E219             >                // dummy db directives used to calculate length of namec
1247+ E219 41 4E 44    >                db      "AND"
1247+ E21C             >len_NFA         defl    $ - temp_NFA
1247+ E21C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1247+ E219             >
1247+ E219 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1247+ E21A 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1247+ E21D             >                org     $-1                 // alter last byte of Name just above to set
1247+ E21C C4          >                db      {b $} | END_BIT     // msb as name end
1247+ E21D             >
1247+ E21D 0E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1247+ E21F             >Prev_Ptr        defl    Heap_Ptr
1247+ E21F             >
1247+ E21F             >mirror_Ptr      defl    $
1247+ E21F             >
1247+ E21F 0B 68       >                dw      Dict_Ptr + 2        // xt
1247+ E221             >Heap_Ptr        defl    $ - $E000           // save current HP
1247+ E221             >
1247+ E221             >Current_HP      defl  $ - $E000             // used to set HP once!
1247+ E221             >
1247+ E221             >//              ______________________________________________________________________
1247+ E221             >//              Dictionary part
1247+ E221             >
1247+ E221             >                org     Dict_Ptr
1247+ 6809             >
1247+ 6809 1F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1247+ 680B             >
1247+ 680B             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1247+ 680B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1247+ 680B ~           >
1247+ 680B ~           >
1247+ 680B             >                endif           ; ok        // for other definitions it "points" the correct handler
1247+ 680B             >                // Use of "; ok" to suppress "warning[fwdref]"
1247+ 680B             >
1247+ 680B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1248+ 680B D9                           exx
1249+ 680C D1                           pop     de
1250+ 680D E1                           pop     hl
1251+ 680E 7B                           ld      a, e
1252+ 680F A5                           and     l
1253+ 6810 6F                           ld      l, a
1254+ 6811 7A                           ld      a, d
1255+ 6812 A4                           and     h
1256+ 6813              Boolean_exit:
1257+ 6813 67                           ld      h, a
1258+ 6814 E5                           push    hl
1259+ 6815 D9                           exx
1260+ 6816                              next
1260+ 6816 DD E9       >                jp      (ix)
1261+ 6818
1262+ 6818              //  ______________________________________________________________________
1263+ 6818              //
1264+ 6818              // or           n1 n2 -- n3
1265+ 6818              // bit logical OR. Returns n3 as n1 | n2
1266+ 6818                              New_Def OR_OP, "OR", is_code, is_normal
1266+ 6818             >
1266+ 6818             >Dict_Ptr        defl    $
1266+ 6818             >
1266+ 6818             >//              ______________________________________________________________________
1266+ 6818             >//              Heap part
1266+ 6818             >
1266+ 6818             >
1266+ 6818             >                org     (Heap_Ptr & $1FFF) + $E000
1266+ E221             >
1266+ E221             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1266+ E221             >Latest_Definition defl  Heap_Ptr
1266+ E221             >
1266+ E221             >                // dummy db directives used to calculate length of namec
1266+ E221 4F 52       >                db      "OR"
1266+ E223             >len_NFA         defl    $ - temp_NFA
1266+ E223             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1266+ E221             >
1266+ E221 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1266+ E222 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1266+ E224             >                org     $-1                 // alter last byte of Name just above to set
1266+ E223 D2          >                db      {b $} | END_BIT     // msb as name end
1266+ E224             >
1266+ E224 19 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1266+ E226             >Prev_Ptr        defl    Heap_Ptr
1266+ E226             >
1266+ E226             >mirror_Ptr      defl    $
1266+ E226             >
1266+ E226 1A 68       >                dw      Dict_Ptr + 2        // xt
1266+ E228             >Heap_Ptr        defl    $ - $E000           // save current HP
1266+ E228             >
1266+ E228             >Current_HP      defl  $ - $E000             // used to set HP once!
1266+ E228             >
1266+ E228             >//              ______________________________________________________________________
1266+ E228             >//              Dictionary part
1266+ E228             >
1266+ E228             >                org     Dict_Ptr
1266+ 6818             >
1266+ 6818 26 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1266+ 681A             >
1266+ 681A             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1266+ 681A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1266+ 681A ~           >
1266+ 681A ~           >
1266+ 681A             >                endif           ; ok        // for other definitions it "points" the correct handler
1266+ 681A             >                // Use of "; ok" to suppress "warning[fwdref]"
1266+ 681A             >
1266+ 681A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1267+ 681A D9                           exx
1268+ 681B D1                           pop     de
1269+ 681C E1                           pop     hl
1270+ 681D 7B                           ld      a, e
1271+ 681E B5                           or      l
1272+ 681F 6F                           ld      l, a
1273+ 6820 7A                           ld      a, d
1274+ 6821 B4                           or      h
1275+ 6822 18 EF                        jr      Boolean_exit
1276+ 6824                        //    ld      h, a
1277+ 6824                        //    push    hl
1278+ 6824                        //    exx
1279+ 6824                        //    next
1280+ 6824
1281+ 6824              //  ______________________________________________________________________
1282+ 6824              //
1283+ 6824              // xor          n1 n2 -- n3
1284+ 6824              // bit logical OR. Returns n3 as n1 ^ n2
1285+ 6824                              New_Def XOR_OP, "XOR", is_code, is_normal
1285+ 6824             >
1285+ 6824             >Dict_Ptr        defl    $
1285+ 6824             >
1285+ 6824             >//              ______________________________________________________________________
1285+ 6824             >//              Heap part
1285+ 6824             >
1285+ 6824             >
1285+ 6824             >                org     (Heap_Ptr & $1FFF) + $E000
1285+ E228             >
1285+ E228             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1285+ E228             >Latest_Definition defl  Heap_Ptr
1285+ E228             >
1285+ E228             >                // dummy db directives used to calculate length of namec
1285+ E228 58 4F 52    >                db      "XOR"
1285+ E22B             >len_NFA         defl    $ - temp_NFA
1285+ E22B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1285+ E228             >
1285+ E228 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1285+ E229 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1285+ E22C             >                org     $-1                 // alter last byte of Name just above to set
1285+ E22B D2          >                db      {b $} | END_BIT     // msb as name end
1285+ E22C             >
1285+ E22C 21 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1285+ E22E             >Prev_Ptr        defl    Heap_Ptr
1285+ E22E             >
1285+ E22E             >mirror_Ptr      defl    $
1285+ E22E             >
1285+ E22E 26 68       >                dw      Dict_Ptr + 2        // xt
1285+ E230             >Heap_Ptr        defl    $ - $E000           // save current HP
1285+ E230             >
1285+ E230             >Current_HP      defl  $ - $E000             // used to set HP once!
1285+ E230             >
1285+ E230             >//              ______________________________________________________________________
1285+ E230             >//              Dictionary part
1285+ E230             >
1285+ E230             >                org     Dict_Ptr
1285+ 6824             >
1285+ 6824 2E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1285+ 6826             >
1285+ 6826             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1285+ 6826 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1285+ 6826 ~           >
1285+ 6826 ~           >
1285+ 6826             >                endif           ; ok        // for other definitions it "points" the correct handler
1285+ 6826             >                // Use of "; ok" to suppress "warning[fwdref]"
1285+ 6826             >
1285+ 6826             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1286+ 6826 D9                           exx
1287+ 6827 D1                           pop     de
1288+ 6828 E1                           pop     hl
1289+ 6829 7B                           ld      a, e
1290+ 682A AD                           xor     l
1291+ 682B 6F                           ld      l, a
1292+ 682C 7A                           ld      a, d
1293+ 682D AC                           xor     h
1294+ 682E 18 E3                        jr      Boolean_exit
1295+ 6830                        //    ld      h, a
1296+ 6830                        //    push    hl
1297+ 6830                        //    exx
1298+ 6830                        //    next
1299+ 6830
1300+ 6830              //  ______________________________________________________________________
1301+ 6830              //
1302+ 6830              // sp@      -- a
1303+ 6830              // returns on top of stack the value of SP before execution
1304+ 6830                              New_Def SPFETCH, "SP@", is_code, is_normal
1304+ 6830             >
1304+ 6830             >Dict_Ptr        defl    $
1304+ 6830             >
1304+ 6830             >//              ______________________________________________________________________
1304+ 6830             >//              Heap part
1304+ 6830             >
1304+ 6830             >
1304+ 6830             >                org     (Heap_Ptr & $1FFF) + $E000
1304+ E230             >
1304+ E230             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1304+ E230             >Latest_Definition defl  Heap_Ptr
1304+ E230             >
1304+ E230             >                // dummy db directives used to calculate length of namec
1304+ E230 53 50 40    >                db      "SP@"
1304+ E233             >len_NFA         defl    $ - temp_NFA
1304+ E233             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1304+ E230             >
1304+ E230 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1304+ E231 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1304+ E234             >                org     $-1                 // alter last byte of Name just above to set
1304+ E233 C0          >                db      {b $} | END_BIT     // msb as name end
1304+ E234             >
1304+ E234 28 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1304+ E236             >Prev_Ptr        defl    Heap_Ptr
1304+ E236             >
1304+ E236             >mirror_Ptr      defl    $
1304+ E236             >
1304+ E236 32 68       >                dw      Dict_Ptr + 2        // xt
1304+ E238             >Heap_Ptr        defl    $ - $E000           // save current HP
1304+ E238             >
1304+ E238             >Current_HP      defl  $ - $E000             // used to set HP once!
1304+ E238             >
1304+ E238             >//              ______________________________________________________________________
1304+ E238             >//              Dictionary part
1304+ E238             >
1304+ E238             >                org     Dict_Ptr
1304+ 6830             >
1304+ 6830 36 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1304+ 6832             >
1304+ 6832             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1304+ 6832 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1304+ 6832 ~           >
1304+ 6832 ~           >
1304+ 6832             >                endif           ; ok        // for other definitions it "points" the correct handler
1304+ 6832             >                // Use of "; ok" to suppress "warning[fwdref]"
1304+ 6832             >
1304+ 6832             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1305+ 6832
1306+ 6832 21 00 00                     ld      hl, 0
1307+ 6835 39                           add     hl, sp
1308+ 6836
1309+ 6836                              psh1
1309+ 6836 E5          >                push    hl
1309+ 6837 DD E9       >                jp      (ix)
1310+ 6839
1311+ 6839              //  ______________________________________________________________________
1312+ 6839              //
1313+ 6839              // sp!      a --
1314+ 6839              // restore SP to the initial value passed
1315+ 6839              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1316+ 6839                              New_Def SPSTORE, "SP!", is_code, is_normal
1316+ 6839             >
1316+ 6839             >Dict_Ptr        defl    $
1316+ 6839             >
1316+ 6839             >//              ______________________________________________________________________
1316+ 6839             >//              Heap part
1316+ 6839             >
1316+ 6839             >
1316+ 6839             >                org     (Heap_Ptr & $1FFF) + $E000
1316+ E238             >
1316+ E238             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1316+ E238             >Latest_Definition defl  Heap_Ptr
1316+ E238             >
1316+ E238             >                // dummy db directives used to calculate length of namec
1316+ E238 53 50 21    >                db      "SP!"
1316+ E23B             >len_NFA         defl    $ - temp_NFA
1316+ E23B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1316+ E238             >
1316+ E238 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1316+ E239 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1316+ E23C             >                org     $-1                 // alter last byte of Name just above to set
1316+ E23B A1          >                db      {b $} | END_BIT     // msb as name end
1316+ E23C             >
1316+ E23C 30 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1316+ E23E             >Prev_Ptr        defl    Heap_Ptr
1316+ E23E             >
1316+ E23E             >mirror_Ptr      defl    $
1316+ E23E             >
1316+ E23E 3B 68       >                dw      Dict_Ptr + 2        // xt
1316+ E240             >Heap_Ptr        defl    $ - $E000           // save current HP
1316+ E240             >
1316+ E240             >Current_HP      defl  $ - $E000             // used to set HP once!
1316+ E240             >
1316+ E240             >//              ______________________________________________________________________
1316+ E240             >//              Dictionary part
1316+ E240             >
1316+ E240             >                org     Dict_Ptr
1316+ 6839             >
1316+ 6839 3E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1316+ 683B             >
1316+ 683B             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1316+ 683B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1316+ 683B ~           >
1316+ 683B ~           >
1316+ 683B             >                endif           ; ok        // for other definitions it "points" the correct handler
1316+ 683B             >                // Use of "; ok" to suppress "warning[fwdref]"
1316+ 683B             >
1316+ 683B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1317+ 683B E1                           pop     hl
1318+ 683C F9                           ld      sp, hl
1319+ 683D
1320+ 683D                              next
1320+ 683D DD E9       >                jp      (ix)
1321+ 683F
1322+ 683F              //  ______________________________________________________________________
1323+ 683F              //
1324+ 683F              // rp@      -- a
1325+ 683F              // returns on top of stack the value of Return-Pointer
1326+ 683F                              New_Def RPFETCH, "RP@", is_code, is_normal
1326+ 683F             >
1326+ 683F             >Dict_Ptr        defl    $
1326+ 683F             >
1326+ 683F             >//              ______________________________________________________________________
1326+ 683F             >//              Heap part
1326+ 683F             >
1326+ 683F             >
1326+ 683F             >                org     (Heap_Ptr & $1FFF) + $E000
1326+ E240             >
1326+ E240             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1326+ E240             >Latest_Definition defl  Heap_Ptr
1326+ E240             >
1326+ E240             >                // dummy db directives used to calculate length of namec
1326+ E240 52 50 40    >                db      "RP@"
1326+ E243             >len_NFA         defl    $ - temp_NFA
1326+ E243             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1326+ E240             >
1326+ E240 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1326+ E241 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1326+ E244             >                org     $-1                 // alter last byte of Name just above to set
1326+ E243 C0          >                db      {b $} | END_BIT     // msb as name end
1326+ E244             >
1326+ E244 38 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1326+ E246             >Prev_Ptr        defl    Heap_Ptr
1326+ E246             >
1326+ E246             >mirror_Ptr      defl    $
1326+ E246             >
1326+ E246 41 68       >                dw      Dict_Ptr + 2        // xt
1326+ E248             >Heap_Ptr        defl    $ - $E000           // save current HP
1326+ E248             >
1326+ E248             >Current_HP      defl  $ - $E000             // used to set HP once!
1326+ E248             >
1326+ E248             >//              ______________________________________________________________________
1326+ E248             >//              Dictionary part
1326+ E248             >
1326+ E248             >                org     Dict_Ptr
1326+ 683F             >
1326+ 683F 46 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1326+ 6841             >
1326+ 6841             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1326+ 6841 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1326+ 6841 ~           >
1326+ 6841 ~           >
1326+ 6841             >                endif           ; ok        // for other definitions it "points" the correct handler
1326+ 6841             >                // Use of "; ok" to suppress "warning[fwdref]"
1326+ 6841             >
1326+ 6841             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1327+ 6841
1328+ 6841                              // *** ldhlrp
1329+ 6841                              // *** ex      de, hl
1330+ 6841 D5                           push de
1331+ 6842
1332+ 6842                              next
1332+ 6842 DD E9       >                jp      (ix)
1333+ 6844
1334+ 6844              //  ______________________________________________________________________
1335+ 6844              //
1336+ 6844              // rp!      a --
1337+ 6844              // restore RP to the initial value passed
1338+ 6844              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1339+ 6844                              New_Def RPSTORE, "RP!", is_code, is_normal
1339+ 6844             >
1339+ 6844             >Dict_Ptr        defl    $
1339+ 6844             >
1339+ 6844             >//              ______________________________________________________________________
1339+ 6844             >//              Heap part
1339+ 6844             >
1339+ 6844             >
1339+ 6844             >                org     (Heap_Ptr & $1FFF) + $E000
1339+ E248             >
1339+ E248             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1339+ E248             >Latest_Definition defl  Heap_Ptr
1339+ E248             >
1339+ E248             >                // dummy db directives used to calculate length of namec
1339+ E248 52 50 21    >                db      "RP!"
1339+ E24B             >len_NFA         defl    $ - temp_NFA
1339+ E24B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1339+ E248             >
1339+ E248 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1339+ E249 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1339+ E24C             >                org     $-1                 // alter last byte of Name just above to set
1339+ E24B A1          >                db      {b $} | END_BIT     // msb as name end
1339+ E24C             >
1339+ E24C 40 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1339+ E24E             >Prev_Ptr        defl    Heap_Ptr
1339+ E24E             >
1339+ E24E             >mirror_Ptr      defl    $
1339+ E24E             >
1339+ E24E 46 68       >                dw      Dict_Ptr + 2        // xt
1339+ E250             >Heap_Ptr        defl    $ - $E000           // save current HP
1339+ E250             >
1339+ E250             >Current_HP      defl  $ - $E000             // used to set HP once!
1339+ E250             >
1339+ E250             >//              ______________________________________________________________________
1339+ E250             >//              Dictionary part
1339+ E250             >
1339+ E250             >                org     Dict_Ptr
1339+ 6844             >
1339+ 6844 4E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1339+ 6846             >
1339+ 6846             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1339+ 6846 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1339+ 6846 ~           >
1339+ 6846 ~           >
1339+ 6846             >                endif           ; ok        // for other definitions it "points" the correct handler
1339+ 6846             >                // Use of "; ok" to suppress "warning[fwdref]"
1339+ 6846             >
1339+ 6846             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1340+ 6846 D1                           pop     de
1341+ 6847                              // *** ex      de, hl
1342+ 6847                              // *** ldrphl
1343+ 6847
1344+ 6847                              next
1344+ 6847 DD E9       >                jp      (ix)
1345+ 6849
1346+ 6849              //  ______________________________________________________________________
1347+ 6849              //
1348+ 6849              // exit       --
1349+ 6849              // exits back to the caller word
1350+ 6849                              New_Def EXIT, "EXIT", is_code, is_normal
1350+ 6849             >
1350+ 6849             >Dict_Ptr        defl    $
1350+ 6849             >
1350+ 6849             >//              ______________________________________________________________________
1350+ 6849             >//              Heap part
1350+ 6849             >
1350+ 6849             >
1350+ 6849             >                org     (Heap_Ptr & $1FFF) + $E000
1350+ E250             >
1350+ E250             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1350+ E250             >Latest_Definition defl  Heap_Ptr
1350+ E250             >
1350+ E250             >                // dummy db directives used to calculate length of namec
1350+ E250 45 58 49 54 >                db      "EXIT"
1350+ E254             >len_NFA         defl    $ - temp_NFA
1350+ E254             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1350+ E250             >
1350+ E250 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1350+ E251 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1350+ E255             >                org     $-1                 // alter last byte of Name just above to set
1350+ E254 D4          >                db      {b $} | END_BIT     // msb as name end
1350+ E255             >
1350+ E255 48 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1350+ E257             >Prev_Ptr        defl    Heap_Ptr
1350+ E257             >
1350+ E257             >mirror_Ptr      defl    $
1350+ E257             >
1350+ E257 4B 68       >                dw      Dict_Ptr + 2        // xt
1350+ E259             >Heap_Ptr        defl    $ - $E000           // save current HP
1350+ E259             >
1350+ E259             >Current_HP      defl  $ - $E000             // used to set HP once!
1350+ E259             >
1350+ E259             >//              ______________________________________________________________________
1350+ E259             >//              Dictionary part
1350+ E259             >
1350+ E259             >                org     Dict_Ptr
1350+ 6849             >
1350+ 6849 57 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1350+ 684B             >
1350+ 684B             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1350+ 684B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1350+ 684B ~           >
1350+ 684B ~           >
1350+ 684B             >                endif           ; ok        // for other definitions it "points" the correct handler
1350+ 684B             >                // Use of "; ok" to suppress "warning[fwdref]"
1350+ 684B             >
1350+ 684B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1351+ 684B EB                           ex      de, hl
1352+ 684C                              // *** ldhlrp                      // Get Return Stack Pointer
1353+ 684C 4E                           ld      c, (hl)             // pop Instruction Pointer
1354+ 684D 23                           inc     hl                  // from Return Stack
1355+ 684E 46                           ld      b, (hl)
1356+ 684F 23                           inc     hl
1357+ 6850                              // *** ldrphl                      // Set Return Stack Pointer
1358+ 6850 EB                           ex      de, hl
1359+ 6851                              next
1359+ 6851 DD E9       >                jp      (ix)
1360+ 6853
1361+ 6853              //  ______________________________________________________________________
1362+ 6853              //
1363+ 6853              // lastl      --
1364+ 6853              // exits back to the caller word
1365+ 6853              //              New_Def EXIT, "LASTL", is_code, is_normal
1366+ 6853              //              push    de
1367+ 6853              //              ex      de, hl //**
1368+ 6853              //              // *** ldhlrp                      // Get Return Stack Pointer
1369+ 6853              //              ld      e, (hl)             // pop Instruction Pointer
1370+ 6853              //              inc     hl                  // from Return Stack
1371+ 6853              //              ld      d, (hl)
1372+ 6853              //              inc     hl
1373+ 6853              //              ld      (hl), e
1374+ 6853              //              inc     hl
1375+ 6853              //              ld      (hl), d
1376+ 6853              //              add     hl, -3
1377+ 6853              //              pop     de
1378+ 6853              //              next
1379+ 6853
1380+ 6853              //  ______________________________________________________________________
1381+ 6853              //
1382+ 6853              // >r      n --
1383+ 6853              // pop from calculator-stack and push into return-stack
1384+ 6853                              New_Def TO_R, ">R", is_code, is_normal
1384+ 6853             >
1384+ 6853             >Dict_Ptr        defl    $
1384+ 6853             >
1384+ 6853             >//              ______________________________________________________________________
1384+ 6853             >//              Heap part
1384+ 6853             >
1384+ 6853             >
1384+ 6853             >                org     (Heap_Ptr & $1FFF) + $E000
1384+ E259             >
1384+ E259             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1384+ E259             >Latest_Definition defl  Heap_Ptr
1384+ E259             >
1384+ E259             >                // dummy db directives used to calculate length of namec
1384+ E259 3E 52       >                db      ">R"
1384+ E25B             >len_NFA         defl    $ - temp_NFA
1384+ E25B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1384+ E259             >
1384+ E259 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1384+ E25A 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1384+ E25C             >                org     $-1                 // alter last byte of Name just above to set
1384+ E25B D2          >                db      {b $} | END_BIT     // msb as name end
1384+ E25C             >
1384+ E25C 50 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1384+ E25E             >Prev_Ptr        defl    Heap_Ptr
1384+ E25E             >
1384+ E25E             >mirror_Ptr      defl    $
1384+ E25E             >
1384+ E25E 55 68       >                dw      Dict_Ptr + 2        // xt
1384+ E260             >Heap_Ptr        defl    $ - $E000           // save current HP
1384+ E260             >
1384+ E260             >Current_HP      defl  $ - $E000             // used to set HP once!
1384+ E260             >
1384+ E260             >//              ______________________________________________________________________
1384+ E260             >//              Dictionary part
1384+ E260             >
1384+ E260             >                org     Dict_Ptr
1384+ 6853             >
1384+ 6853 5E 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1384+ 6855             >
1384+ 6855             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1384+ 6855 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1384+ 6855 ~           >
1384+ 6855 ~           >
1384+ 6855             >                endif           ; ok        // for other definitions it "points" the correct handler
1384+ 6855             >                // Use of "; ok" to suppress "warning[fwdref]"
1384+ 6855             >
1384+ 6855             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1385+ 6855 E1                           pop     hl
1386+ 6856 EB                           ex      de, hl //**
1387+ 6857                              // *** ldhlrp
1388+ 6857 2B                           dec     hl
1389+ 6858 72                           ld      (hl), d             // store current TOS
1390+ 6859 2B                           dec     hl                  // to Return Stack
1391+ 685A 73                           ld      (hl), e
1392+ 685B                              // *** ldrphl
1393+ 685B EB                           ex      de, hl //**
1394+ 685C                              next
1394+ 685C DD E9       >                jp      (ix)
1395+ 685E
1396+ 685E              //  ______________________________________________________________________
1397+ 685E              //
1398+ 685E              // r>      -- n
1399+ 685E              // pop from return-stack and push into calculator-stack
1400+ 685E                              New_Def R_TO, "R>", is_code, is_normal
1400+ 685E             >
1400+ 685E             >Dict_Ptr        defl    $
1400+ 685E             >
1400+ 685E             >//              ______________________________________________________________________
1400+ 685E             >//              Heap part
1400+ 685E             >
1400+ 685E             >
1400+ 685E             >                org     (Heap_Ptr & $1FFF) + $E000
1400+ E260             >
1400+ E260             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1400+ E260             >Latest_Definition defl  Heap_Ptr
1400+ E260             >
1400+ E260             >                // dummy db directives used to calculate length of namec
1400+ E260 52 3E       >                db      "R>"
1400+ E262             >len_NFA         defl    $ - temp_NFA
1400+ E262             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1400+ E260             >
1400+ E260 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1400+ E261 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1400+ E263             >                org     $-1                 // alter last byte of Name just above to set
1400+ E262 BE          >                db      {b $} | END_BIT     // msb as name end
1400+ E263             >
1400+ E263 59 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1400+ E265             >Prev_Ptr        defl    Heap_Ptr
1400+ E265             >
1400+ E265             >mirror_Ptr      defl    $
1400+ E265             >
1400+ E265 60 68       >                dw      Dict_Ptr + 2        // xt
1400+ E267             >Heap_Ptr        defl    $ - $E000           // save current HP
1400+ E267             >
1400+ E267             >Current_HP      defl  $ - $E000             // used to set HP once!
1400+ E267             >
1400+ E267             >//              ______________________________________________________________________
1400+ E267             >//              Dictionary part
1400+ E267             >
1400+ E267             >                org     Dict_Ptr
1400+ 685E             >
1400+ 685E 65 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1400+ 6860             >
1400+ 6860             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1400+ 6860 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1400+ 6860 ~           >
1400+ 6860 ~           >
1400+ 6860             >                endif           ; ok        // for other definitions it "points" the correct handler
1400+ 6860             >                // Use of "; ok" to suppress "warning[fwdref]"
1400+ 6860             >
1400+ 6860             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1401+ 6860
1402+ 6860 EB                           ex      de, hl //**
1403+ 6861                              // *** ldhlrp
1404+ 6861 5E                           ld      e, (hl)             // retrieve from Return Stack
1405+ 6862 23                           inc     hl
1406+ 6863 56                           ld      d, (hl)
1407+ 6864 23                           inc     hl
1408+ 6865                              // *** ldrphl
1409+ 6865 EB                           ex      de, hl //**
1410+ 6866 E5                           push    hl
1411+ 6867                              next
1411+ 6867 DD E9       >                jp      (ix)
1412+ 6869
1413+ 6869              //  ______________________________________________________________________
1414+ 6869              //
1415+ 6869              // r@           -- n
1416+ 6869              // return on top of stack the value of top of return-stack
1417+ 6869              // Since this is the same as I, we alter R's CFA to jump there
1418+ 6869                              New_Def R_OP, "R@", is_code, is_normal
1418+ 6869             >
1418+ 6869             >Dict_Ptr        defl    $
1418+ 6869             >
1418+ 6869             >//              ______________________________________________________________________
1418+ 6869             >//              Heap part
1418+ 6869             >
1418+ 6869             >
1418+ 6869             >                org     (Heap_Ptr & $1FFF) + $E000
1418+ E267             >
1418+ E267             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1418+ E267             >Latest_Definition defl  Heap_Ptr
1418+ E267             >
1418+ E267             >                // dummy db directives used to calculate length of namec
1418+ E267 52 40       >                db      "R@"
1418+ E269             >len_NFA         defl    $ - temp_NFA
1418+ E269             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1418+ E267             >
1418+ E267 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1418+ E268 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1418+ E26A             >                org     $-1                 // alter last byte of Name just above to set
1418+ E269 C0          >                db      {b $} | END_BIT     // msb as name end
1418+ E26A             >
1418+ E26A 60 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1418+ E26C             >Prev_Ptr        defl    Heap_Ptr
1418+ E26C             >
1418+ E26C             >mirror_Ptr      defl    $
1418+ E26C             >
1418+ E26C 6B 68       >                dw      Dict_Ptr + 2        // xt
1418+ E26E             >Heap_Ptr        defl    $ - $E000           // save current HP
1418+ E26E             >
1418+ E26E             >Current_HP      defl  $ - $E000             // used to set HP once!
1418+ E26E             >
1418+ E26E             >//              ______________________________________________________________________
1418+ E26E             >//              Dictionary part
1418+ E26E             >
1418+ E26E             >                org     Dict_Ptr
1418+ 6869             >
1418+ 6869 6C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1418+ 686B             >
1418+ 686B             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1418+ 686B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1418+ 686B ~           >
1418+ 686B ~           >
1418+ 686B             >                endif           ; ok        // for other definitions it "points" the correct handler
1418+ 686B             >                // Use of "; ok" to suppress "warning[fwdref]"
1418+ 686B             >
1418+ 686B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1419+ 686B                          //  Behave  I_Ptr
1420+ 686B C3 34 64                     jp      I_Ptr
1421+ 686E
1422+ 686E              //  ______________________________________________________________________
1423+ 686E              //
1424+ 686E              // r            -- n
1425+ 686E              // return on top of stack the value of top of return-stack
1426+ 686E              // Since this is the same as I, we alter R's CFA to jump there
1427+ 686E              //              New_Def R_OLD, "R", is_code, is_normal
1428+ 686E              //              jp      I_Ptr
1429+ 686E
1430+ 686E              //  ______________________________________________________________________
1431+ 686E              //
1432+ 686E              // 0=           n -- f
1433+ 686E              // true (non zero) if n is zero, false (0) elsewere
1434+ 686E                              New_Def ZEQUAL, "0=", is_code, is_normal
1434+ 686E             >
1434+ 686E             >Dict_Ptr        defl    $
1434+ 686E             >
1434+ 686E             >//              ______________________________________________________________________
1434+ 686E             >//              Heap part
1434+ 686E             >
1434+ 686E             >
1434+ 686E             >                org     (Heap_Ptr & $1FFF) + $E000
1434+ E26E             >
1434+ E26E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1434+ E26E             >Latest_Definition defl  Heap_Ptr
1434+ E26E             >
1434+ E26E             >                // dummy db directives used to calculate length of namec
1434+ E26E 30 3D       >                db      "0="
1434+ E270             >len_NFA         defl    $ - temp_NFA
1434+ E270             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1434+ E26E             >
1434+ E26E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1434+ E26F 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1434+ E271             >                org     $-1                 // alter last byte of Name just above to set
1434+ E270 BD          >                db      {b $} | END_BIT     // msb as name end
1434+ E271             >
1434+ E271 67 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1434+ E273             >Prev_Ptr        defl    Heap_Ptr
1434+ E273             >
1434+ E273             >mirror_Ptr      defl    $
1434+ E273             >
1434+ E273 70 68       >                dw      Dict_Ptr + 2        // xt
1434+ E275             >Heap_Ptr        defl    $ - $E000           // save current HP
1434+ E275             >
1434+ E275             >Current_HP      defl  $ - $E000             // used to set HP once!
1434+ E275             >
1434+ E275             >//              ______________________________________________________________________
1434+ E275             >//              Dictionary part
1434+ E275             >
1434+ E275             >                org     Dict_Ptr
1434+ 686E             >
1434+ 686E 73 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1434+ 6870             >
1434+ 6870             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1434+ 6870 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1434+ 6870 ~           >
1434+ 6870 ~           >
1434+ 6870             >                endif           ; ok        // for other definitions it "points" the correct handler
1434+ 6870             >                // Use of "; ok" to suppress "warning[fwdref]"
1434+ 6870             >
1434+ 6870             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1435+ 6870              Zero_Equal:
1436+ 6870 E1                           pop     hl
1437+ 6871 7D                           ld      a, l
1438+ 6872 B4                           or      h
1439+ 6873 20 01                        jr      nz, ZEqual_Skip
1440+ 6875 3F                               ccf
1441+ 6876              ZEqual_Skip:
1442+ 6876 ED 62                        sbc     hl, hl
1443+ 6878                              psh1
1443+ 6878 E5          >                push    hl
1443+ 6879 DD E9       >                jp      (ix)
1444+ 687B
1445+ 687B              //  ______________________________________________________________________
1446+ 687B              //
1447+ 687B              // not         a1 -- a2
1448+ 687B              // increment by 2 top of stack
1449+ 687B                              New_Def NOT_OP, "NOT", is_code, is_normal
1449+ 687B             >
1449+ 687B             >Dict_Ptr        defl    $
1449+ 687B             >
1449+ 687B             >//              ______________________________________________________________________
1449+ 687B             >//              Heap part
1449+ 687B             >
1449+ 687B             >
1449+ 687B             >                org     (Heap_Ptr & $1FFF) + $E000
1449+ E275             >
1449+ E275             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1449+ E275             >Latest_Definition defl  Heap_Ptr
1449+ E275             >
1449+ E275             >                // dummy db directives used to calculate length of namec
1449+ E275 4E 4F 54    >                db      "NOT"
1449+ E278             >len_NFA         defl    $ - temp_NFA
1449+ E278             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1449+ E275             >
1449+ E275 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1449+ E276 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1449+ E279             >                org     $-1                 // alter last byte of Name just above to set
1449+ E278 D4          >                db      {b $} | END_BIT     // msb as name end
1449+ E279             >
1449+ E279 6E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1449+ E27B             >Prev_Ptr        defl    Heap_Ptr
1449+ E27B             >
1449+ E27B             >mirror_Ptr      defl    $
1449+ E27B             >
1449+ E27B 7D 68       >                dw      Dict_Ptr + 2        // xt
1449+ E27D             >Heap_Ptr        defl    $ - $E000           // save current HP
1449+ E27D             >
1449+ E27D             >Current_HP      defl  $ - $E000             // used to set HP once!
1449+ E27D             >
1449+ E27D             >//              ______________________________________________________________________
1449+ E27D             >//              Dictionary part
1449+ E27D             >
1449+ E27D             >                org     Dict_Ptr
1449+ 687B             >
1449+ 687B 7B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1449+ 687D             >
1449+ 687D             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1449+ 687D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1449+ 687D ~           >
1449+ 687D ~           >
1449+ 687D             >                endif           ; ok        // for other definitions it "points" the correct handler
1449+ 687D             >                // Use of "; ok" to suppress "warning[fwdref]"
1449+ 687D             >
1449+ 687D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1450+ 687D                          //  Behave  Zero_Equal
1451+ 687D 18 F1                        jr      Zero_Equal
1452+ 687F
1453+ 687F              //  ______________________________________________________________________
1454+ 687F              //
1455+ 687F              // 0<           n -- f
1456+ 687F              // true (non zero) if n is less than zero, false (0) elsewere
1457+ 687F                              New_Def ZLESS, "0<", is_code, is_normal
1457+ 687F             >
1457+ 687F             >Dict_Ptr        defl    $
1457+ 687F             >
1457+ 687F             >//              ______________________________________________________________________
1457+ 687F             >//              Heap part
1457+ 687F             >
1457+ 687F             >
1457+ 687F             >                org     (Heap_Ptr & $1FFF) + $E000
1457+ E27D             >
1457+ E27D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1457+ E27D             >Latest_Definition defl  Heap_Ptr
1457+ E27D             >
1457+ E27D             >                // dummy db directives used to calculate length of namec
1457+ E27D 30 3C       >                db      "0<"
1457+ E27F             >len_NFA         defl    $ - temp_NFA
1457+ E27F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1457+ E27D             >
1457+ E27D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1457+ E27E 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1457+ E280             >                org     $-1                 // alter last byte of Name just above to set
1457+ E27F BC          >                db      {b $} | END_BIT     // msb as name end
1457+ E280             >
1457+ E280 75 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1457+ E282             >Prev_Ptr        defl    Heap_Ptr
1457+ E282             >
1457+ E282             >mirror_Ptr      defl    $
1457+ E282             >
1457+ E282 81 68       >                dw      Dict_Ptr + 2        // xt
1457+ E284             >Heap_Ptr        defl    $ - $E000           // save current HP
1457+ E284             >
1457+ E284             >Current_HP      defl  $ - $E000             // used to set HP once!
1457+ E284             >
1457+ E284             >//              ______________________________________________________________________
1457+ E284             >//              Dictionary part
1457+ E284             >
1457+ E284             >                org     Dict_Ptr
1457+ 687F             >
1457+ 687F 82 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1457+ 6881             >
1457+ 6881             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1457+ 6881 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1457+ 6881 ~           >
1457+ 6881 ~           >
1457+ 6881             >                endif           ; ok        // for other definitions it "points" the correct handler
1457+ 6881             >                // Use of "; ok" to suppress "warning[fwdref]"
1457+ 6881             >
1457+ 6881             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1458+ 6881 E1                           pop     hl
1459+ 6882 29                           add     hl, hl
1460+ 6883 ED 62                        sbc     hl, hl
1461+ 6885                              psh1
1461+ 6885 E5          >                push    hl
1461+ 6886 DD E9       >                jp      (ix)
1462+ 6888
1463+ 6888              //  ______________________________________________________________________
1464+ 6888              //
1465+ 6888              // 0>           n -- f
1466+ 6888              // true (non zero) if n is less than zero, false (0) elsewere
1467+ 6888                              New_Def ZGREATER, "0>", is_code, is_normal
1467+ 6888             >
1467+ 6888             >Dict_Ptr        defl    $
1467+ 6888             >
1467+ 6888             >//              ______________________________________________________________________
1467+ 6888             >//              Heap part
1467+ 6888             >
1467+ 6888             >
1467+ 6888             >                org     (Heap_Ptr & $1FFF) + $E000
1467+ E284             >
1467+ E284             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1467+ E284             >Latest_Definition defl  Heap_Ptr
1467+ E284             >
1467+ E284             >                // dummy db directives used to calculate length of namec
1467+ E284 30 3E       >                db      "0>"
1467+ E286             >len_NFA         defl    $ - temp_NFA
1467+ E286             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1467+ E284             >
1467+ E284 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1467+ E285 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1467+ E287             >                org     $-1                 // alter last byte of Name just above to set
1467+ E286 BE          >                db      {b $} | END_BIT     // msb as name end
1467+ E287             >
1467+ E287 7D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1467+ E289             >Prev_Ptr        defl    Heap_Ptr
1467+ E289             >
1467+ E289             >mirror_Ptr      defl    $
1467+ E289             >
1467+ E289 8A 68       >                dw      Dict_Ptr + 2        // xt
1467+ E28B             >Heap_Ptr        defl    $ - $E000           // save current HP
1467+ E28B             >
1467+ E28B             >Current_HP      defl  $ - $E000             // used to set HP once!
1467+ E28B             >
1467+ E28B             >//              ______________________________________________________________________
1467+ E28B             >//              Dictionary part
1467+ E28B             >
1467+ E28B             >                org     Dict_Ptr
1467+ 6888             >
1467+ 6888 89 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1467+ 688A             >
1467+ 688A             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1467+ 688A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1467+ 688A ~           >
1467+ 688A ~           >
1467+ 688A             >                endif           ; ok        // for other definitions it "points" the correct handler
1467+ 688A             >                // Use of "; ok" to suppress "warning[fwdref]"
1467+ 688A             >
1467+ 688A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1468+ 688A E1                           pop     hl
1469+ 688B 7D                           ld      a, l
1470+ 688C B4                           or      h
1471+ 688D 28 04                        jr      z, ZGreater_Skip
1472+ 688F 29                           add     hl, hl
1473+ 6890 3F                           ccf
1474+ 6891 ED 62                        sbc     hl, hl
1475+ 6893              ZGreater_Skip:
1476+ 6893                              psh1
1476+ 6893 E5          >                push    hl
1476+ 6894 DD E9       >                jp      (ix)
1477+ 6896
1478+ 6896              //  ______________________________________________________________________
1479+ 6896              //
1480+ 6896              // +            n1 n2 -- n3
1481+ 6896              // returns the unsigned sum of two top values
1482+ 6896                              New_Def PLUS, "+", is_code, is_normal
1482+ 6896             >
1482+ 6896             >Dict_Ptr        defl    $
1482+ 6896             >
1482+ 6896             >//              ______________________________________________________________________
1482+ 6896             >//              Heap part
1482+ 6896             >
1482+ 6896             >
1482+ 6896             >                org     (Heap_Ptr & $1FFF) + $E000
1482+ E28B             >
1482+ E28B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1482+ E28B             >Latest_Definition defl  Heap_Ptr
1482+ E28B             >
1482+ E28B             >                // dummy db directives used to calculate length of namec
1482+ E28B 2B          >                db      "+"
1482+ E28C             >len_NFA         defl    $ - temp_NFA
1482+ E28C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1482+ E28B             >
1482+ E28B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1482+ E28C 2B          >                db      "+"               // name string in 7-bit ascii, but
1482+ E28D             >                org     $-1                 // alter last byte of Name just above to set
1482+ E28C AB          >                db      {b $} | END_BIT     // msb as name end
1482+ E28D             >
1482+ E28D 84 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1482+ E28F             >Prev_Ptr        defl    Heap_Ptr
1482+ E28F             >
1482+ E28F             >mirror_Ptr      defl    $
1482+ E28F             >
1482+ E28F 98 68       >                dw      Dict_Ptr + 2        // xt
1482+ E291             >Heap_Ptr        defl    $ - $E000           // save current HP
1482+ E291             >
1482+ E291             >Current_HP      defl  $ - $E000             // used to set HP once!
1482+ E291             >
1482+ E291             >//              ______________________________________________________________________
1482+ E291             >//              Dictionary part
1482+ E291             >
1482+ E291             >                org     Dict_Ptr
1482+ 6896             >
1482+ 6896 8F 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1482+ 6898             >
1482+ 6898             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1482+ 6898 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1482+ 6898 ~           >
1482+ 6898 ~           >
1482+ 6898             >                endif           ; ok        // for other definitions it "points" the correct handler
1482+ 6898             >                // Use of "; ok" to suppress "warning[fwdref]"
1482+ 6898             >
1482+ 6898             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1483+ 6898 D9                           exx
1484+ 6899 E1                           pop     hl
1485+ 689A D1                           pop     de
1486+ 689B 19                           add     hl, de
1487+ 689C E5                           push    hl
1488+ 689D D9                           exx
1489+ 689E                              next
1489+ 689E DD E9       >                jp      (ix)
1490+ 68A0
1491+ 68A0
1492+ 68A0              //  ______________________________________________________________________
1493+ 68A0              //
1494+ 68A0              // d+           d1 d2 -- d3
1495+ 68A0              // returns the unsigned sum of two top double-numbers
1496+ 68A0              //      d2  d1
1497+ 68A0              //      h l h l
1498+ 68A0              // SP   LHEDLHED
1499+ 68A0              // SP  +01234567
1500+ 68A0                              New_Def DPLUS, "D+", is_code, is_normal
1500+ 68A0             >
1500+ 68A0             >Dict_Ptr        defl    $
1500+ 68A0             >
1500+ 68A0             >//              ______________________________________________________________________
1500+ 68A0             >//              Heap part
1500+ 68A0             >
1500+ 68A0             >
1500+ 68A0             >                org     (Heap_Ptr & $1FFF) + $E000
1500+ E291             >
1500+ E291             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1500+ E291             >Latest_Definition defl  Heap_Ptr
1500+ E291             >
1500+ E291             >                // dummy db directives used to calculate length of namec
1500+ E291 44 2B       >                db      "D+"
1500+ E293             >len_NFA         defl    $ - temp_NFA
1500+ E293             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1500+ E291             >
1500+ E291 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1500+ E292 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1500+ E294             >                org     $-1                 // alter last byte of Name just above to set
1500+ E293 AB          >                db      {b $} | END_BIT     // msb as name end
1500+ E294             >
1500+ E294 8B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1500+ E296             >Prev_Ptr        defl    Heap_Ptr
1500+ E296             >
1500+ E296             >mirror_Ptr      defl    $
1500+ E296             >
1500+ E296 A2 68       >                dw      Dict_Ptr + 2        // xt
1500+ E298             >Heap_Ptr        defl    $ - $E000           // save current HP
1500+ E298             >
1500+ E298             >Current_HP      defl  $ - $E000             // used to set HP once!
1500+ E298             >
1500+ E298             >//              ______________________________________________________________________
1500+ E298             >//              Dictionary part
1500+ E298             >
1500+ E298             >                org     Dict_Ptr
1500+ 68A0             >
1500+ 68A0 96 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1500+ 68A2             >
1500+ 68A2             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1500+ 68A2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1500+ 68A2 ~           >
1500+ 68A2 ~           >
1500+ 68A2             >                endif           ; ok        // for other definitions it "points" the correct handler
1500+ 68A2             >                // Use of "; ok" to suppress "warning[fwdref]"
1500+ 68A2             >
1500+ 68A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1501+ 68A2
1502+ 68A2 D9                           exx
1503+ 68A3 C1                           pop     bc                  // bc := d2.H
1504+ 68A4 D1                           pop     de                  // hl := d2.L
1505+ 68A5 E1                           pop     hl                  // d1.H
1506+ 68A6 E3                           ex      (sp), hl            // d1.L
1507+ 68A7 19                           add     hl, de              // hl := d2.L + d1.L
1508+ 68A8 E3                           ex      (sp), hl            // d1.H
1509+ 68A9 ED 4A                        adc     hl, bc              // d1.H + d2.H
1510+ 68AB E5                           push    hl
1511+ 68AC D9                           exx
1512+ 68AD                              next
1512+ 68AD DD E9       >                jp      (ix)
1513+ 68AF
1514+ 68AF              //  ______________________________________________________________________
1515+ 68AF              //
1516+ 68AF              // 1+           n1 -- n2
1517+ 68AF              // increment by 1 top of stack
1518+ 68AF                              New_Def ONE_PLUS, "1+", is_code, is_normal
1518+ 68AF             >
1518+ 68AF             >Dict_Ptr        defl    $
1518+ 68AF             >
1518+ 68AF             >//              ______________________________________________________________________
1518+ 68AF             >//              Heap part
1518+ 68AF             >
1518+ 68AF             >
1518+ 68AF             >                org     (Heap_Ptr & $1FFF) + $E000
1518+ E298             >
1518+ E298             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1518+ E298             >Latest_Definition defl  Heap_Ptr
1518+ E298             >
1518+ E298             >                // dummy db directives used to calculate length of namec
1518+ E298 31 2B       >                db      "1+"
1518+ E29A             >len_NFA         defl    $ - temp_NFA
1518+ E29A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1518+ E298             >
1518+ E298 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1518+ E299 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1518+ E29B             >                org     $-1                 // alter last byte of Name just above to set
1518+ E29A AB          >                db      {b $} | END_BIT     // msb as name end
1518+ E29B             >
1518+ E29B 91 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1518+ E29D             >Prev_Ptr        defl    Heap_Ptr
1518+ E29D             >
1518+ E29D             >mirror_Ptr      defl    $
1518+ E29D             >
1518+ E29D B1 68       >                dw      Dict_Ptr + 2        // xt
1518+ E29F             >Heap_Ptr        defl    $ - $E000           // save current HP
1518+ E29F             >
1518+ E29F             >Current_HP      defl  $ - $E000             // used to set HP once!
1518+ E29F             >
1518+ E29F             >//              ______________________________________________________________________
1518+ E29F             >//              Dictionary part
1518+ E29F             >
1518+ E29F             >                org     Dict_Ptr
1518+ 68AF             >
1518+ 68AF 9D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1518+ 68B1             >
1518+ 68B1             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1518+ 68B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1518+ 68B1 ~           >
1518+ 68B1 ~           >
1518+ 68B1             >                endif           ; ok        // for other definitions it "points" the correct handler
1518+ 68B1             >                // Use of "; ok" to suppress "warning[fwdref]"
1518+ 68B1             >
1518+ 68B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1519+ 68B1 E1                           pop     hl
1520+ 68B2 23                           inc     hl
1521+ 68B3
1522+ 68B3                              psh1
1522+ 68B3 E5          >                push    hl
1522+ 68B4 DD E9       >                jp      (ix)
1523+ 68B6
1524+ 68B6              //  ______________________________________________________________________
1525+ 68B6              //
1526+ 68B6              // 1-           n1 -- n2
1527+ 68B6              // decrement by 1 top of stack
1528+ 68B6                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1528+ 68B6             >
1528+ 68B6             >Dict_Ptr        defl    $
1528+ 68B6             >
1528+ 68B6             >//              ______________________________________________________________________
1528+ 68B6             >//              Heap part
1528+ 68B6             >
1528+ 68B6             >
1528+ 68B6             >                org     (Heap_Ptr & $1FFF) + $E000
1528+ E29F             >
1528+ E29F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1528+ E29F             >Latest_Definition defl  Heap_Ptr
1528+ E29F             >
1528+ E29F             >                // dummy db directives used to calculate length of namec
1528+ E29F 31 2D       >                db      "1-"
1528+ E2A1             >len_NFA         defl    $ - temp_NFA
1528+ E2A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1528+ E29F             >
1528+ E29F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1528+ E2A0 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1528+ E2A2             >                org     $-1                 // alter last byte of Name just above to set
1528+ E2A1 AD          >                db      {b $} | END_BIT     // msb as name end
1528+ E2A2             >
1528+ E2A2 98 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1528+ E2A4             >Prev_Ptr        defl    Heap_Ptr
1528+ E2A4             >
1528+ E2A4             >mirror_Ptr      defl    $
1528+ E2A4             >
1528+ E2A4 B8 68       >                dw      Dict_Ptr + 2        // xt
1528+ E2A6             >Heap_Ptr        defl    $ - $E000           // save current HP
1528+ E2A6             >
1528+ E2A6             >Current_HP      defl  $ - $E000             // used to set HP once!
1528+ E2A6             >
1528+ E2A6             >//              ______________________________________________________________________
1528+ E2A6             >//              Dictionary part
1528+ E2A6             >
1528+ E2A6             >                org     Dict_Ptr
1528+ 68B6             >
1528+ 68B6 A4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1528+ 68B8             >
1528+ 68B8             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1528+ 68B8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1528+ 68B8 ~           >
1528+ 68B8 ~           >
1528+ 68B8             >                endif           ; ok        // for other definitions it "points" the correct handler
1528+ 68B8             >                // Use of "; ok" to suppress "warning[fwdref]"
1528+ 68B8             >
1528+ 68B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1529+ 68B8 E1                           pop     hl
1530+ 68B9 2B                           dec     hl
1531+ 68BA
1532+ 68BA                              psh1
1532+ 68BA E5          >                push    hl
1532+ 68BB DD E9       >                jp      (ix)
1533+ 68BD
1534+ 68BD              //  ______________________________________________________________________
1535+ 68BD              //
1536+ 68BD              // 2+           n1 -- n2
1537+ 68BD              // increment by 2 top of stack
1538+ 68BD                              New_Def TWO_PLUS, "2+", is_code, is_normal
1538+ 68BD             >
1538+ 68BD             >Dict_Ptr        defl    $
1538+ 68BD             >
1538+ 68BD             >//              ______________________________________________________________________
1538+ 68BD             >//              Heap part
1538+ 68BD             >
1538+ 68BD             >
1538+ 68BD             >                org     (Heap_Ptr & $1FFF) + $E000
1538+ E2A6             >
1538+ E2A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1538+ E2A6             >Latest_Definition defl  Heap_Ptr
1538+ E2A6             >
1538+ E2A6             >                // dummy db directives used to calculate length of namec
1538+ E2A6 32 2B       >                db      "2+"
1538+ E2A8             >len_NFA         defl    $ - temp_NFA
1538+ E2A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1538+ E2A6             >
1538+ E2A6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1538+ E2A7 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1538+ E2A9             >                org     $-1                 // alter last byte of Name just above to set
1538+ E2A8 AB          >                db      {b $} | END_BIT     // msb as name end
1538+ E2A9             >
1538+ E2A9 9F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1538+ E2AB             >Prev_Ptr        defl    Heap_Ptr
1538+ E2AB             >
1538+ E2AB             >mirror_Ptr      defl    $
1538+ E2AB             >
1538+ E2AB BF 68       >                dw      Dict_Ptr + 2        // xt
1538+ E2AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1538+ E2AD             >
1538+ E2AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1538+ E2AD             >
1538+ E2AD             >//              ______________________________________________________________________
1538+ E2AD             >//              Dictionary part
1538+ E2AD             >
1538+ E2AD             >                org     Dict_Ptr
1538+ 68BD             >
1538+ 68BD AB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1538+ 68BF             >
1538+ 68BF             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1538+ 68BF ~           >                call    runcode ; ok        // for primitive definitions  actual code
1538+ 68BF ~           >
1538+ 68BF ~           >
1538+ 68BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1538+ 68BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1538+ 68BF             >
1538+ 68BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1539+ 68BF              Two_Plus:
1540+ 68BF E1                           pop     hl
1541+ 68C0 23                           inc     hl
1542+ 68C1 23                           inc     hl
1543+ 68C2
1544+ 68C2                              psh1
1544+ 68C2 E5          >                push    hl
1544+ 68C3 DD E9       >                jp      (ix)
1545+ 68C5
1546+ 68C5              //  ______________________________________________________________________
1547+ 68C5              //
1548+ 68C5              // cell+        a1 -- a2
1549+ 68C5              // increment by 2 top of stack
1550+ 68C5                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1550+ 68C5             >
1550+ 68C5             >Dict_Ptr        defl    $
1550+ 68C5             >
1550+ 68C5             >//              ______________________________________________________________________
1550+ 68C5             >//              Heap part
1550+ 68C5             >
1550+ 68C5             >
1550+ 68C5             >                org     (Heap_Ptr & $1FFF) + $E000
1550+ E2AD             >
1550+ E2AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1550+ E2AD             >Latest_Definition defl  Heap_Ptr
1550+ E2AD             >
1550+ E2AD             >                // dummy db directives used to calculate length of namec
1550+ E2AD 43 45 4C 4C >                db      "CELL+"
1550+ E2B1 2B          >
1550+ E2B2             >len_NFA         defl    $ - temp_NFA
1550+ E2B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1550+ E2AD             >
1550+ E2AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1550+ E2AE 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1550+ E2B2 2B          >
1550+ E2B3             >                org     $-1                 // alter last byte of Name just above to set
1550+ E2B2 AB          >                db      {b $} | END_BIT     // msb as name end
1550+ E2B3             >
1550+ E2B3 A6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1550+ E2B5             >Prev_Ptr        defl    Heap_Ptr
1550+ E2B5             >
1550+ E2B5             >mirror_Ptr      defl    $
1550+ E2B5             >
1550+ E2B5 C7 68       >                dw      Dict_Ptr + 2        // xt
1550+ E2B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1550+ E2B7             >
1550+ E2B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1550+ E2B7             >
1550+ E2B7             >//              ______________________________________________________________________
1550+ E2B7             >//              Dictionary part
1550+ E2B7             >
1550+ E2B7             >                org     Dict_Ptr
1550+ 68C5             >
1550+ 68C5 B5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1550+ 68C7             >
1550+ 68C7             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1550+ 68C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1550+ 68C7 ~           >
1550+ 68C7 ~           >
1550+ 68C7             >                endif           ; ok        // for other definitions it "points" the correct handler
1550+ 68C7             >                // Use of "; ok" to suppress "warning[fwdref]"
1550+ 68C7             >
1550+ 68C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1551+ 68C7 18 F6                        jr      Two_Plus
1552+ 68C9
1553+ 68C9              //  ______________________________________________________________________
1554+ 68C9              //
1555+ 68C9              // align        a1 -- a2
1556+ 68C9              // align memory : not used
1557+ 68C9              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1558+ 68C9              //            next
1559+ 68C9
1560+ 68C9              //  ______________________________________________________________________
1561+ 68C9              //
1562+ 68C9              // cell-        a1 -- a2
1563+ 68C9              // decrement by 2 top of stack
1564+ 68C9                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1564+ 68C9             >
1564+ 68C9             >Dict_Ptr        defl    $
1564+ 68C9             >
1564+ 68C9             >//              ______________________________________________________________________
1564+ 68C9             >//              Heap part
1564+ 68C9             >
1564+ 68C9             >
1564+ 68C9             >                org     (Heap_Ptr & $1FFF) + $E000
1564+ E2B7             >
1564+ E2B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1564+ E2B7             >Latest_Definition defl  Heap_Ptr
1564+ E2B7             >
1564+ E2B7             >                // dummy db directives used to calculate length of namec
1564+ E2B7 43 45 4C 4C >                db      "CELL-"
1564+ E2BB 2D          >
1564+ E2BC             >len_NFA         defl    $ - temp_NFA
1564+ E2BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1564+ E2B7             >
1564+ E2B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1564+ E2B8 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1564+ E2BC 2D          >
1564+ E2BD             >                org     $-1                 // alter last byte of Name just above to set
1564+ E2BC AD          >                db      {b $} | END_BIT     // msb as name end
1564+ E2BD             >
1564+ E2BD AD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1564+ E2BF             >Prev_Ptr        defl    Heap_Ptr
1564+ E2BF             >
1564+ E2BF             >mirror_Ptr      defl    $
1564+ E2BF             >
1564+ E2BF CB 68       >                dw      Dict_Ptr + 2        // xt
1564+ E2C1             >Heap_Ptr        defl    $ - $E000           // save current HP
1564+ E2C1             >
1564+ E2C1             >Current_HP      defl  $ - $E000             // used to set HP once!
1564+ E2C1             >
1564+ E2C1             >//              ______________________________________________________________________
1564+ E2C1             >//              Dictionary part
1564+ E2C1             >
1564+ E2C1             >                org     Dict_Ptr
1564+ 68C9             >
1564+ 68C9 BF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1564+ 68CB             >
1564+ 68CB             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1564+ 68CB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1564+ 68CB ~           >
1564+ 68CB ~           >
1564+ 68CB             >                endif           ; ok        // for other definitions it "points" the correct handler
1564+ 68CB             >                // Use of "; ok" to suppress "warning[fwdref]"
1564+ 68CB             >
1564+ 68CB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1565+ 68CB              CellMinus:
1566+ 68CB E1                           pop     hl
1567+ 68CC 2B                           dec     hl
1568+ 68CD 2B                           dec     hl
1569+ 68CE
1570+ 68CE                              psh1
1570+ 68CE E5          >                push    hl
1570+ 68CF DD E9       >                jp      (ix)
1571+ 68D1
1572+ 68D1              //  ______________________________________________________________________
1573+ 68D1              //
1574+ 68D1              // 2-           a1 -- a2
1575+ 68D1              // decrement by 2 top of stack
1576+ 68D1                              New_Def TWO_MINUS, "2-", is_code, is_normal
1576+ 68D1             >
1576+ 68D1             >Dict_Ptr        defl    $
1576+ 68D1             >
1576+ 68D1             >//              ______________________________________________________________________
1576+ 68D1             >//              Heap part
1576+ 68D1             >
1576+ 68D1             >
1576+ 68D1             >                org     (Heap_Ptr & $1FFF) + $E000
1576+ E2C1             >
1576+ E2C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1576+ E2C1             >Latest_Definition defl  Heap_Ptr
1576+ E2C1             >
1576+ E2C1             >                // dummy db directives used to calculate length of namec
1576+ E2C1 32 2D       >                db      "2-"
1576+ E2C3             >len_NFA         defl    $ - temp_NFA
1576+ E2C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1576+ E2C1             >
1576+ E2C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1576+ E2C2 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1576+ E2C4             >                org     $-1                 // alter last byte of Name just above to set
1576+ E2C3 AD          >                db      {b $} | END_BIT     // msb as name end
1576+ E2C4             >
1576+ E2C4 B7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1576+ E2C6             >Prev_Ptr        defl    Heap_Ptr
1576+ E2C6             >
1576+ E2C6             >mirror_Ptr      defl    $
1576+ E2C6             >
1576+ E2C6 D3 68       >                dw      Dict_Ptr + 2        // xt
1576+ E2C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1576+ E2C8             >
1576+ E2C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1576+ E2C8             >
1576+ E2C8             >//              ______________________________________________________________________
1576+ E2C8             >//              Dictionary part
1576+ E2C8             >
1576+ E2C8             >                org     Dict_Ptr
1576+ 68D1             >
1576+ 68D1 C6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1576+ 68D3             >
1576+ 68D3             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1576+ 68D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1576+ 68D3 ~           >
1576+ 68D3 ~           >
1576+ 68D3             >                endif           ; ok        // for other definitions it "points" the correct handler
1576+ 68D3             >                // Use of "; ok" to suppress "warning[fwdref]"
1576+ 68D3             >
1576+ 68D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1577+ 68D3 C3 CB 68                     jp      CellMinus
1578+ 68D6
1579+ 68D6              //  ______________________________________________________________________
1580+ 68D6              //
1581+ 68D6              // negate       n1 -- n2
1582+ 68D6              // change the sign of number
1583+ 68D6                              New_Def MINUS, "NEGATE", is_code, is_normal
1583+ 68D6             >
1583+ 68D6             >Dict_Ptr        defl    $
1583+ 68D6             >
1583+ 68D6             >//              ______________________________________________________________________
1583+ 68D6             >//              Heap part
1583+ 68D6             >
1583+ 68D6             >
1583+ 68D6             >                org     (Heap_Ptr & $1FFF) + $E000
1583+ E2C8             >
1583+ E2C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1583+ E2C8             >Latest_Definition defl  Heap_Ptr
1583+ E2C8             >
1583+ E2C8             >                // dummy db directives used to calculate length of namec
1583+ E2C8 4E 45 47 41 >                db      "NEGATE"
1583+ E2CC 54 45       >
1583+ E2CE             >len_NFA         defl    $ - temp_NFA
1583+ E2CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1583+ E2C8             >
1583+ E2C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1583+ E2C9 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1583+ E2CD 54 45       >
1583+ E2CF             >                org     $-1                 // alter last byte of Name just above to set
1583+ E2CE C5          >                db      {b $} | END_BIT     // msb as name end
1583+ E2CF             >
1583+ E2CF C1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1583+ E2D1             >Prev_Ptr        defl    Heap_Ptr
1583+ E2D1             >
1583+ E2D1             >mirror_Ptr      defl    $
1583+ E2D1             >
1583+ E2D1 D8 68       >                dw      Dict_Ptr + 2        // xt
1583+ E2D3             >Heap_Ptr        defl    $ - $E000           // save current HP
1583+ E2D3             >
1583+ E2D3             >Current_HP      defl  $ - $E000             // used to set HP once!
1583+ E2D3             >
1583+ E2D3             >//              ______________________________________________________________________
1583+ E2D3             >//              Dictionary part
1583+ E2D3             >
1583+ E2D3             >                org     Dict_Ptr
1583+ 68D6             >
1583+ 68D6 D1 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1583+ 68D8             >
1583+ 68D8             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1583+ 68D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1583+ 68D8 ~           >
1583+ 68D8 ~           >
1583+ 68D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1583+ 68D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1583+ 68D8             >
1583+ 68D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1584+ 68D8 D9                           exx
1585+ 68D9 D1                           pop     de
1586+ 68DA AF                           xor     a
1587+ 68DB              Negate_Ptr:
1588+ 68DB 67                           ld      h, a
1589+ 68DC 6F                           ld      l, a
1590+ 68DD ED 52                        sbc     hl, de
1591+ 68DF E5                           push    hl
1592+ 68E0 D9                           exx
1593+ 68E1                              next
1593+ 68E1 DD E9       >                jp      (ix)
1594+ 68E3
1595+ 68E3              //  ______________________________________________________________________
1596+ 68E3              //
1597+ 68E3              // dnegate      d1 -- d2
1598+ 68E3              // change the sign of a double number
1599+ 68E3                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1599+ 68E3             >
1599+ 68E3             >Dict_Ptr        defl    $
1599+ 68E3             >
1599+ 68E3             >//              ______________________________________________________________________
1599+ 68E3             >//              Heap part
1599+ 68E3             >
1599+ 68E3             >
1599+ 68E3             >                org     (Heap_Ptr & $1FFF) + $E000
1599+ E2D3             >
1599+ E2D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1599+ E2D3             >Latest_Definition defl  Heap_Ptr
1599+ E2D3             >
1599+ E2D3             >                // dummy db directives used to calculate length of namec
1599+ E2D3 44 4E 45 47 >                db      "DNEGATE"
1599+ E2D7 41 54 45    >
1599+ E2DA             >len_NFA         defl    $ - temp_NFA
1599+ E2DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1599+ E2D3             >
1599+ E2D3 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1599+ E2D4 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1599+ E2D8 41 54 45    >
1599+ E2DB             >                org     $-1                 // alter last byte of Name just above to set
1599+ E2DA C5          >                db      {b $} | END_BIT     // msb as name end
1599+ E2DB             >
1599+ E2DB C8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1599+ E2DD             >Prev_Ptr        defl    Heap_Ptr
1599+ E2DD             >
1599+ E2DD             >mirror_Ptr      defl    $
1599+ E2DD             >
1599+ E2DD E5 68       >                dw      Dict_Ptr + 2        // xt
1599+ E2DF             >Heap_Ptr        defl    $ - $E000           // save current HP
1599+ E2DF             >
1599+ E2DF             >Current_HP      defl  $ - $E000             // used to set HP once!
1599+ E2DF             >
1599+ E2DF             >//              ______________________________________________________________________
1599+ E2DF             >//              Dictionary part
1599+ E2DF             >
1599+ E2DF             >                org     Dict_Ptr
1599+ 68E3             >
1599+ 68E3 DD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1599+ 68E5             >
1599+ 68E5             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1599+ 68E5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1599+ 68E5 ~           >
1599+ 68E5 ~           >
1599+ 68E5             >                endif           ; ok        // for other definitions it "points" the correct handler
1599+ 68E5             >                // Use of "; ok" to suppress "warning[fwdref]"
1599+ 68E5             >
1599+ 68E5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1600+ 68E5 D9                           exx
1601+ 68E6 D1                           pop     de                  // d1.H
1602+ 68E7 C1                           pop     bc                  // d1.L
1603+ 68E8 AF                           xor     a
1604+ 68E9 67                           ld      h, a
1605+ 68EA 6F                           ld      l, a
1606+ 68EB ED 42                        sbc     hl, bc              // subtact from zero
1607+ 68ED E5                           push    hl                  // > d2-L
1608+ 68EE
1609+ 68EE 18 EB                        jr      Negate_Ptr
1610+ 68F0              //              ld      h, a
1611+ 68F0              //              ld      l, a
1612+ 68F0              //              sbc     hl, de              // subtract from zero with carry
1613+ 68F0                                                          // > d2-H
1614+ 68F0              //              push    hl
1615+ 68F0              //              exx
1616+ 68F0              //              next
1617+ 68F0
1618+ 68F0              //  ______________________________________________________________________
1619+ 68F0              //
1620+ 68F0              // over         n1 n2 -- n1 n2 n1
1621+ 68F0              // copy the second value of stack and put it on top.
1622+ 68F0                              New_Def OVER, "OVER", is_code, is_normal
1622+ 68F0             >
1622+ 68F0             >Dict_Ptr        defl    $
1622+ 68F0             >
1622+ 68F0             >//              ______________________________________________________________________
1622+ 68F0             >//              Heap part
1622+ 68F0             >
1622+ 68F0             >
1622+ 68F0             >                org     (Heap_Ptr & $1FFF) + $E000
1622+ E2DF             >
1622+ E2DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1622+ E2DF             >Latest_Definition defl  Heap_Ptr
1622+ E2DF             >
1622+ E2DF             >                // dummy db directives used to calculate length of namec
1622+ E2DF 4F 56 45 52 >                db      "OVER"
1622+ E2E3             >len_NFA         defl    $ - temp_NFA
1622+ E2E3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1622+ E2DF             >
1622+ E2DF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1622+ E2E0 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1622+ E2E4             >                org     $-1                 // alter last byte of Name just above to set
1622+ E2E3 D2          >                db      {b $} | END_BIT     // msb as name end
1622+ E2E4             >
1622+ E2E4 D3 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1622+ E2E6             >Prev_Ptr        defl    Heap_Ptr
1622+ E2E6             >
1622+ E2E6             >mirror_Ptr      defl    $
1622+ E2E6             >
1622+ E2E6 F2 68       >                dw      Dict_Ptr + 2        // xt
1622+ E2E8             >Heap_Ptr        defl    $ - $E000           // save current HP
1622+ E2E8             >
1622+ E2E8             >Current_HP      defl  $ - $E000             // used to set HP once!
1622+ E2E8             >
1622+ E2E8             >//              ______________________________________________________________________
1622+ E2E8             >//              Dictionary part
1622+ E2E8             >
1622+ E2E8             >                org     Dict_Ptr
1622+ 68F0             >
1622+ 68F0 E6 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1622+ 68F2             >
1622+ 68F2             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1622+ 68F2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1622+ 68F2 ~           >
1622+ 68F2 ~           >
1622+ 68F2             >                endif           ; ok        // for other definitions it "points" the correct handler
1622+ 68F2             >                // Use of "; ok" to suppress "warning[fwdref]"
1622+ 68F2             >
1622+ 68F2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1623+ 68F2                              // exx     // we can use af instead OPTIMIZATION possible
1624+ 68F2 F1                           pop     af                  //   n2
1625+ 68F3 E1                           pop     hl                  // < n1
1626+ 68F4 E5                           push    hl                  // > n1
1627+ 68F5 F5                           push    af                  // > n2
1628+ 68F6 E5                           push    hl                  // > n1
1629+ 68F7                              // exx
1630+ 68F7                              next
1630+ 68F7 DD E9       >                jp      (ix)
1631+ 68F9
1632+ 68F9              //  ______________________________________________________________________
1633+ 68F9              //
1634+ 68F9              // drop         n1 --
1635+ 68F9              // drops the top of stack
1636+ 68F9                              New_Def DROP, "DROP", is_code, is_normal
1636+ 68F9             >
1636+ 68F9             >Dict_Ptr        defl    $
1636+ 68F9             >
1636+ 68F9             >//              ______________________________________________________________________
1636+ 68F9             >//              Heap part
1636+ 68F9             >
1636+ 68F9             >
1636+ 68F9             >                org     (Heap_Ptr & $1FFF) + $E000
1636+ E2E8             >
1636+ E2E8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1636+ E2E8             >Latest_Definition defl  Heap_Ptr
1636+ E2E8             >
1636+ E2E8             >                // dummy db directives used to calculate length of namec
1636+ E2E8 44 52 4F 50 >                db      "DROP"
1636+ E2EC             >len_NFA         defl    $ - temp_NFA
1636+ E2EC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1636+ E2E8             >
1636+ E2E8 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1636+ E2E9 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1636+ E2ED             >                org     $-1                 // alter last byte of Name just above to set
1636+ E2EC D0          >                db      {b $} | END_BIT     // msb as name end
1636+ E2ED             >
1636+ E2ED DF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1636+ E2EF             >Prev_Ptr        defl    Heap_Ptr
1636+ E2EF             >
1636+ E2EF             >mirror_Ptr      defl    $
1636+ E2EF             >
1636+ E2EF FB 68       >                dw      Dict_Ptr + 2        // xt
1636+ E2F1             >Heap_Ptr        defl    $ - $E000           // save current HP
1636+ E2F1             >
1636+ E2F1             >Current_HP      defl  $ - $E000             // used to set HP once!
1636+ E2F1             >
1636+ E2F1             >//              ______________________________________________________________________
1636+ E2F1             >//              Dictionary part
1636+ E2F1             >
1636+ E2F1             >                org     Dict_Ptr
1636+ 68F9             >
1636+ 68F9 EF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1636+ 68FB             >
1636+ 68FB             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1636+ 68FB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1636+ 68FB ~           >
1636+ 68FB ~           >
1636+ 68FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1636+ 68FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1636+ 68FB             >
1636+ 68FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1637+ 68FB E1                           pop     hl                  // < n1 and discard previous TOS
1638+ 68FC                              next
1638+ 68FC DD E9       >                jp      (ix)
1639+ 68FE
1640+ 68FE              //  ______________________________________________________________________
1641+ 68FE              //
1642+ 68FE              // nip          n1 n2 -- n2
1643+ 68FE              // drops the second elemento on the stack
1644+ 68FE                              New_Def NIP, "NIP", is_code, is_normal
1644+ 68FE             >
1644+ 68FE             >Dict_Ptr        defl    $
1644+ 68FE             >
1644+ 68FE             >//              ______________________________________________________________________
1644+ 68FE             >//              Heap part
1644+ 68FE             >
1644+ 68FE             >
1644+ 68FE             >                org     (Heap_Ptr & $1FFF) + $E000
1644+ E2F1             >
1644+ E2F1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1644+ E2F1             >Latest_Definition defl  Heap_Ptr
1644+ E2F1             >
1644+ E2F1             >                // dummy db directives used to calculate length of namec
1644+ E2F1 4E 49 50    >                db      "NIP"
1644+ E2F4             >len_NFA         defl    $ - temp_NFA
1644+ E2F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1644+ E2F1             >
1644+ E2F1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1644+ E2F2 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1644+ E2F5             >                org     $-1                 // alter last byte of Name just above to set
1644+ E2F4 D0          >                db      {b $} | END_BIT     // msb as name end
1644+ E2F5             >
1644+ E2F5 E8 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1644+ E2F7             >Prev_Ptr        defl    Heap_Ptr
1644+ E2F7             >
1644+ E2F7             >mirror_Ptr      defl    $
1644+ E2F7             >
1644+ E2F7 00 69       >                dw      Dict_Ptr + 2        // xt
1644+ E2F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1644+ E2F9             >
1644+ E2F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1644+ E2F9             >
1644+ E2F9             >//              ______________________________________________________________________
1644+ E2F9             >//              Dictionary part
1644+ E2F9             >
1644+ E2F9             >                org     Dict_Ptr
1644+ 68FE             >
1644+ 68FE F7 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1644+ 6900             >
1644+ 6900             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1644+ 6900 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1644+ 6900 ~           >
1644+ 6900 ~           >
1644+ 6900             >                endif           ; ok        // for other definitions it "points" the correct handler
1644+ 6900             >                // Use of "; ok" to suppress "warning[fwdref]"
1644+ 6900             >
1644+ 6900             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1645+ 6900
1646+ 6900 E1                           pop     hl                  // < n1 discarded
1647+ 6901 E3                           ex      (sp), hl
1648+ 6902                              next
1648+ 6902 DD E9       >                jp      (ix)
1649+ 6904
1650+ 6904              //  ______________________________________________________________________
1651+ 6904              //
1652+ 6904              // tuck         n1 n2 -- n2 n1 n2
1653+ 6904              // copy the top element after the second.
1654+ 6904                              New_Def TUCK, "TUCK", is_code, is_normal
1654+ 6904             >
1654+ 6904             >Dict_Ptr        defl    $
1654+ 6904             >
1654+ 6904             >//              ______________________________________________________________________
1654+ 6904             >//              Heap part
1654+ 6904             >
1654+ 6904             >
1654+ 6904             >                org     (Heap_Ptr & $1FFF) + $E000
1654+ E2F9             >
1654+ E2F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1654+ E2F9             >Latest_Definition defl  Heap_Ptr
1654+ E2F9             >
1654+ E2F9             >                // dummy db directives used to calculate length of namec
1654+ E2F9 54 55 43 4B >                db      "TUCK"
1654+ E2FD             >len_NFA         defl    $ - temp_NFA
1654+ E2FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1654+ E2F9             >
1654+ E2F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1654+ E2FA 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1654+ E2FE             >                org     $-1                 // alter last byte of Name just above to set
1654+ E2FD CB          >                db      {b $} | END_BIT     // msb as name end
1654+ E2FE             >
1654+ E2FE F1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1654+ E300             >Prev_Ptr        defl    Heap_Ptr
1654+ E300             >
1654+ E300             >mirror_Ptr      defl    $
1654+ E300             >
1654+ E300 06 69       >                dw      Dict_Ptr + 2        // xt
1654+ E302             >Heap_Ptr        defl    $ - $E000           // save current HP
1654+ E302             >
1654+ E302             >Current_HP      defl  $ - $E000             // used to set HP once!
1654+ E302             >
1654+ E302             >//              ______________________________________________________________________
1654+ E302             >//              Dictionary part
1654+ E302             >
1654+ E302             >                org     Dict_Ptr
1654+ 6904             >
1654+ 6904 00 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1654+ 6906             >
1654+ 6906             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1654+ 6906 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1654+ 6906 ~           >
1654+ 6906 ~           >
1654+ 6906             >                endif           ; ok        // for other definitions it "points" the correct handler
1654+ 6906             >                // Use of "; ok" to suppress "warning[fwdref]"
1654+ 6906             >
1654+ 6906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1655+ 6906 E1                           pop     hl
1656+ 6907 F1                           pop     af                  // < n1
1657+ 6908 E5                           push    hl                  // > n2  and TOS
1658+ 6909 F5                           push    af                  // > n1
1659+ 690A E5                           push    hl
1660+ 690B                              next
1660+ 690B DD E9       >                jp      (ix)
1661+ 690D
1662+ 690D              //  ______________________________________________________________________
1663+ 690D              //
1664+ 690D              // swap         n1 n2 -- n2 n1
1665+ 690D              // swaps the two values on top of stack
1666+ 690D                              New_Def SWAP, "SWAP", is_code, is_normal
1666+ 690D             >
1666+ 690D             >Dict_Ptr        defl    $
1666+ 690D             >
1666+ 690D             >//              ______________________________________________________________________
1666+ 690D             >//              Heap part
1666+ 690D             >
1666+ 690D             >
1666+ 690D             >                org     (Heap_Ptr & $1FFF) + $E000
1666+ E302             >
1666+ E302             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1666+ E302             >Latest_Definition defl  Heap_Ptr
1666+ E302             >
1666+ E302             >                // dummy db directives used to calculate length of namec
1666+ E302 53 57 41 50 >                db      "SWAP"
1666+ E306             >len_NFA         defl    $ - temp_NFA
1666+ E306             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1666+ E302             >
1666+ E302 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1666+ E303 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1666+ E307             >                org     $-1                 // alter last byte of Name just above to set
1666+ E306 D0          >                db      {b $} | END_BIT     // msb as name end
1666+ E307             >
1666+ E307 F9 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1666+ E309             >Prev_Ptr        defl    Heap_Ptr
1666+ E309             >
1666+ E309             >mirror_Ptr      defl    $
1666+ E309             >
1666+ E309 0F 69       >                dw      Dict_Ptr + 2        // xt
1666+ E30B             >Heap_Ptr        defl    $ - $E000           // save current HP
1666+ E30B             >
1666+ E30B             >Current_HP      defl  $ - $E000             // used to set HP once!
1666+ E30B             >
1666+ E30B             >//              ______________________________________________________________________
1666+ E30B             >//              Dictionary part
1666+ E30B             >
1666+ E30B             >                org     Dict_Ptr
1666+ 690D             >
1666+ 690D 09 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1666+ 690F             >
1666+ 690F             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1666+ 690F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1666+ 690F ~           >
1666+ 690F ~           >
1666+ 690F             >                endif           ; ok        // for other definitions it "points" the correct handler
1666+ 690F             >                // Use of "; ok" to suppress "warning[fwdref]"
1666+ 690F             >
1666+ 690F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1667+ 690F E1                           pop     hl                  // < n1
1668+ 6910 E3                           ex      (sp),hl             // > n2
1669+ 6911 E5                           push    hl                  // copy n1 to TOS
1670+ 6912                              next
1670+ 6912 DD E9       >                jp      (ix)
1671+ 6914
1672+ 6914              //  ______________________________________________________________________
1673+ 6914              //
1674+ 6914              // dup         n -- n n
1675+ 6914              // duplicates the top value of stack
1676+ 6914                              New_Def DUP, "DUP", is_code, is_normal
1676+ 6914             >
1676+ 6914             >Dict_Ptr        defl    $
1676+ 6914             >
1676+ 6914             >//              ______________________________________________________________________
1676+ 6914             >//              Heap part
1676+ 6914             >
1676+ 6914             >
1676+ 6914             >                org     (Heap_Ptr & $1FFF) + $E000
1676+ E30B             >
1676+ E30B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1676+ E30B             >Latest_Definition defl  Heap_Ptr
1676+ E30B             >
1676+ E30B             >                // dummy db directives used to calculate length of namec
1676+ E30B 44 55 50    >                db      "DUP"
1676+ E30E             >len_NFA         defl    $ - temp_NFA
1676+ E30E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1676+ E30B             >
1676+ E30B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1676+ E30C 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1676+ E30F             >                org     $-1                 // alter last byte of Name just above to set
1676+ E30E D0          >                db      {b $} | END_BIT     // msb as name end
1676+ E30F             >
1676+ E30F 02 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1676+ E311             >Prev_Ptr        defl    Heap_Ptr
1676+ E311             >
1676+ E311             >mirror_Ptr      defl    $
1676+ E311             >
1676+ E311 16 69       >                dw      Dict_Ptr + 2        // xt
1676+ E313             >Heap_Ptr        defl    $ - $E000           // save current HP
1676+ E313             >
1676+ E313             >Current_HP      defl  $ - $E000             // used to set HP once!
1676+ E313             >
1676+ E313             >//              ______________________________________________________________________
1676+ E313             >//              Dictionary part
1676+ E313             >
1676+ E313             >                org     Dict_Ptr
1676+ 6914             >
1676+ 6914 11 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1676+ 6916             >
1676+ 6916             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1676+ 6916 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1676+ 6916 ~           >
1676+ 6916 ~           >
1676+ 6916             >                endif           ; ok        // for other definitions it "points" the correct handler
1676+ 6916             >                // Use of "; ok" to suppress "warning[fwdref]"
1676+ 6916             >
1676+ 6916             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1677+ 6916 E1                           pop     hl
1678+ 6917 E5                           push    hl                  // > n duplicate TOS
1679+ 6918 E5                           push    hl
1680+ 6919                              next
1680+ 6919 DD E9       >                jp      (ix)
1681+ 691B
1682+ 691B              //  ______________________________________________________________________
1683+ 691B              //
1684+ 691B              // rot         n1 n2 n3 -- n2 n3 n1
1685+ 691B              // Rotates the 3 top values of stack by picking the 3rd in access-order
1686+ 691B              // and putting it on top. The other two are shifted down one place.
1687+ 691B                              New_Def ROT, "ROT", is_code, is_normal
1687+ 691B             >
1687+ 691B             >Dict_Ptr        defl    $
1687+ 691B             >
1687+ 691B             >//              ______________________________________________________________________
1687+ 691B             >//              Heap part
1687+ 691B             >
1687+ 691B             >
1687+ 691B             >                org     (Heap_Ptr & $1FFF) + $E000
1687+ E313             >
1687+ E313             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1687+ E313             >Latest_Definition defl  Heap_Ptr
1687+ E313             >
1687+ E313             >                // dummy db directives used to calculate length of namec
1687+ E313 52 4F 54    >                db      "ROT"
1687+ E316             >len_NFA         defl    $ - temp_NFA
1687+ E316             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1687+ E313             >
1687+ E313 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1687+ E314 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1687+ E317             >                org     $-1                 // alter last byte of Name just above to set
1687+ E316 D4          >                db      {b $} | END_BIT     // msb as name end
1687+ E317             >
1687+ E317 0B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1687+ E319             >Prev_Ptr        defl    Heap_Ptr
1687+ E319             >
1687+ E319             >mirror_Ptr      defl    $
1687+ E319             >
1687+ E319 1D 69       >                dw      Dict_Ptr + 2        // xt
1687+ E31B             >Heap_Ptr        defl    $ - $E000           // save current HP
1687+ E31B             >
1687+ E31B             >Current_HP      defl  $ - $E000             // used to set HP once!
1687+ E31B             >
1687+ E31B             >//              ______________________________________________________________________
1687+ E31B             >//              Dictionary part
1687+ E31B             >
1687+ E31B             >                org     Dict_Ptr
1687+ 691B             >
1687+ 691B 19 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1687+ 691D             >
1687+ 691D             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1687+ 691D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1687+ 691D ~           >
1687+ 691D ~           >
1687+ 691D             >                endif           ; ok        // for other definitions it "points" the correct handler
1687+ 691D             >                // Use of "; ok" to suppress "warning[fwdref]"
1687+ 691D             >
1687+ 691D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1688+ 691D                          //  exx
1689+ 691D F1                           pop     af                  // < n3
1690+ 691E E1                           pop     hl                  // < n2
1691+ 691F E3                           ex      (sp),hl             // > n2 < n1
1692+ 6920 F5                           push    af                  // > n3
1693+ 6921 E5                           push    hl                  // copy n1 to TOS
1694+ 6922                          //  exx
1695+ 6922                              next
1695+ 6922 DD E9       >                jp      (ix)
1696+ 6924
1697+ 6924              //  ______________________________________________________________________
1698+ 6924              //
1699+ 6924              // -rot         n1 n2 n3 -- n3 n1 n2
1700+ 6924              // Rotates the 3 top values of stack by picking the 1st in access-order
1701+ 6924              // and putting back to 3rd place. The other two are shifted down one place.
1702+ 6924                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1702+ 6924             >
1702+ 6924             >Dict_Ptr        defl    $
1702+ 6924             >
1702+ 6924             >//              ______________________________________________________________________
1702+ 6924             >//              Heap part
1702+ 6924             >
1702+ 6924             >
1702+ 6924             >                org     (Heap_Ptr & $1FFF) + $E000
1702+ E31B             >
1702+ E31B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1702+ E31B             >Latest_Definition defl  Heap_Ptr
1702+ E31B             >
1702+ E31B             >                // dummy db directives used to calculate length of namec
1702+ E31B 2D 52 4F 54 >                db      "-ROT"
1702+ E31F             >len_NFA         defl    $ - temp_NFA
1702+ E31F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1702+ E31B             >
1702+ E31B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1702+ E31C 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1702+ E320             >                org     $-1                 // alter last byte of Name just above to set
1702+ E31F D4          >                db      {b $} | END_BIT     // msb as name end
1702+ E320             >
1702+ E320 13 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1702+ E322             >Prev_Ptr        defl    Heap_Ptr
1702+ E322             >
1702+ E322             >mirror_Ptr      defl    $
1702+ E322             >
1702+ E322 26 69       >                dw      Dict_Ptr + 2        // xt
1702+ E324             >Heap_Ptr        defl    $ - $E000           // save current HP
1702+ E324             >
1702+ E324             >Current_HP      defl  $ - $E000             // used to set HP once!
1702+ E324             >
1702+ E324             >//              ______________________________________________________________________
1702+ E324             >//              Dictionary part
1702+ E324             >
1702+ E324             >                org     Dict_Ptr
1702+ 6924             >
1702+ 6924 22 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1702+ 6926             >
1702+ 6926             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1702+ 6926 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1702+ 6926 ~           >
1702+ 6926 ~           >
1702+ 6926             >                endif           ; ok        // for other definitions it "points" the correct handler
1702+ 6926             >                // Use of "; ok" to suppress "warning[fwdref]"
1702+ 6926             >
1702+ 6926             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1703+ 6926                          //  exx
1704+ 6926 E1                           pop     hl                  // < n3
1705+ 6927 F1                           pop     af                  // < n2
1706+ 6928 E3                           ex      (sp),hl             // > n3 < n1
1707+ 6929 E5                           push    hl                  // > n1
1708+ 692A F5                           push    af                  // copy n3 to TOS
1709+ 692B                          //  exx
1710+ 692B                              next
1710+ 692B DD E9       >                jp      (ix)
1711+ 692D
1712+ 692D              //  ______________________________________________________________________
1713+ 692D              //
1714+ 692D              // pick        n1 -- nx
1715+ 692D              // picks the nth element from TOS
1716+ 692D                              New_Def PICK, "PICK", is_code, is_normal
1716+ 692D             >
1716+ 692D             >Dict_Ptr        defl    $
1716+ 692D             >
1716+ 692D             >//              ______________________________________________________________________
1716+ 692D             >//              Heap part
1716+ 692D             >
1716+ 692D             >
1716+ 692D             >                org     (Heap_Ptr & $1FFF) + $E000
1716+ E324             >
1716+ E324             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1716+ E324             >Latest_Definition defl  Heap_Ptr
1716+ E324             >
1716+ E324             >                // dummy db directives used to calculate length of namec
1716+ E324 50 49 43 4B >                db      "PICK"
1716+ E328             >len_NFA         defl    $ - temp_NFA
1716+ E328             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1716+ E324             >
1716+ E324 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1716+ E325 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1716+ E329             >                org     $-1                 // alter last byte of Name just above to set
1716+ E328 CB          >                db      {b $} | END_BIT     // msb as name end
1716+ E329             >
1716+ E329 1B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1716+ E32B             >Prev_Ptr        defl    Heap_Ptr
1716+ E32B             >
1716+ E32B             >mirror_Ptr      defl    $
1716+ E32B             >
1716+ E32B 2F 69       >                dw      Dict_Ptr + 2        // xt
1716+ E32D             >Heap_Ptr        defl    $ - $E000           // save current HP
1716+ E32D             >
1716+ E32D             >Current_HP      defl  $ - $E000             // used to set HP once!
1716+ E32D             >
1716+ E32D             >//              ______________________________________________________________________
1716+ E32D             >//              Dictionary part
1716+ E32D             >
1716+ E32D             >                org     Dict_Ptr
1716+ 692D             >
1716+ 692D 2B 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1716+ 692F             >
1716+ 692F             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1716+ 692F ~           >                call    runcode ; ok        // for primitive definitions  actual code
1716+ 692F ~           >
1716+ 692F ~           >
1716+ 692F             >                endif           ; ok        // for other definitions it "points" the correct handler
1716+ 692F             >                // Use of "; ok" to suppress "warning[fwdref]"
1716+ 692F             >
1716+ 692F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1717+ 692F E1                           pop     hl                  // take TOS as index
1718+ 6930 29                           add     hl, hl              // as cells
1719+ 6931 39                           add     hl, sp              // from Stack Pointer
1720+ 6932 7E                           ld      a, (hl)             // replace TOS
1721+ 6933 23                           inc     hl
1722+ 6934 66                           ld      h, (hl)
1723+ 6935 6F                           ld      l, a
1724+ 6936 E5                           push    hl
1725+ 6937                              next
1725+ 6937 DD E9       >                jp      (ix)
1726+ 6939
1727+ 6939
1728+ 6939              //  ______________________________________________________________________
1729+ 6939              //
1730+ 6939              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1731+ 6939              // picks the nth element from TOS
1732+ 6939              //              New_Def ROLL, "ROLL", is_code, is_normal
1733+ 6939              //              exx                     // we need all registers free
1734+ 6939              //              pop     hl              // number of cells to roll
1735+ 6939              //              ld      a, h
1736+ 6939              //              or       l
1737+ 6939              //              jr      z, Roll_Zero
1738+ 6939              //                  add     hl, hl              // number of bytes to move
1739+ 6939              //                  ld      b, h
1740+ 6939              //                  ld      c, l
1741+ 6939              //                  add     hl, sp          // address of n1
1742+ 6939              //                  ld      a, (hl)         // take n1 into a and a,
1743+ 6939              //                  inc     hl
1744+ 6939              //                  ex      af, af'
1745+ 6939              //                  ld      a, (hl)         // take n1 into a and a,
1746+ 6939              //                  ld      d, h
1747+ 6939              //                  ld      e, l
1748+ 6939              //                  dec     hl
1749+ 6939              //                  dec     hl
1750+ 6939              //                  lddr
1751+ 6939              //                  ex      de, hl
1752+ 6939              //                  ld      (hl), a
1753+ 6939              //                  dec     hl
1754+ 6939              //                  ex      af, af'
1755+ 6939              //                  ld      (hl), a
1756+ 6939              //Roll_Zero:
1757+ 6939              //              exx
1758+ 6939              //              next
1759+ 6939
1760+ 6939
1761+ 6939              //  ______________________________________________________________________
1762+ 6939              //
1763+ 6939              // 2over        d1 d2 -- d1 d2 d1
1764+ 6939              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1765+ 6939              // copy the second double of stack and put on top.
1766+ 6939                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1766+ 6939             >
1766+ 6939             >Dict_Ptr        defl    $
1766+ 6939             >
1766+ 6939             >//              ______________________________________________________________________
1766+ 6939             >//              Heap part
1766+ 6939             >
1766+ 6939             >
1766+ 6939             >                org     (Heap_Ptr & $1FFF) + $E000
1766+ E32D             >
1766+ E32D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1766+ E32D             >Latest_Definition defl  Heap_Ptr
1766+ E32D             >
1766+ E32D             >                // dummy db directives used to calculate length of namec
1766+ E32D 32 4F 56 45 >                db      "2OVER"
1766+ E331 52          >
1766+ E332             >len_NFA         defl    $ - temp_NFA
1766+ E332             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1766+ E32D             >
1766+ E32D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1766+ E32E 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1766+ E332 52          >
1766+ E333             >                org     $-1                 // alter last byte of Name just above to set
1766+ E332 D2          >                db      {b $} | END_BIT     // msb as name end
1766+ E333             >
1766+ E333 24 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1766+ E335             >Prev_Ptr        defl    Heap_Ptr
1766+ E335             >
1766+ E335             >mirror_Ptr      defl    $
1766+ E335             >
1766+ E335 3B 69       >                dw      Dict_Ptr + 2        // xt
1766+ E337             >Heap_Ptr        defl    $ - $E000           // save current HP
1766+ E337             >
1766+ E337             >Current_HP      defl  $ - $E000             // used to set HP once!
1766+ E337             >
1766+ E337             >//              ______________________________________________________________________
1766+ E337             >//              Dictionary part
1766+ E337             >
1766+ E337             >                org     Dict_Ptr
1766+ 6939             >
1766+ 6939 35 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1766+ 693B             >
1766+ 693B             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1766+ 693B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1766+ 693B ~           >
1766+ 693B ~           >
1766+ 693B             >                endif           ; ok        // for other definitions it "points" the correct handler
1766+ 693B             >                // Use of "; ok" to suppress "warning[fwdref]"
1766+ 693B             >
1766+ 693B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1767+ 693B D9                           exx
1768+ 693C E1                           pop     hl      // 10
1769+ 693D D1                           pop     de      // 10
1770+ 693E C1                           pop     bc      // 10
1771+ 693F F1                           pop     af      // 10
1772+ 6940 F5                           push    af      // 11
1773+ 6941 C5                           push    bc      // 11
1774+ 6942 D5                           push    de      // 11
1775+ 6943 E5                           push    hl      // 11
1776+ 6944 F5                           push    af      // 11
1777+ 6945 C5                           push    bc      // 11
1778+ 6946 D9                           exx
1779+ 6947                              next
1779+ 6947 DD E9       >                jp      (ix)
1780+ 6949
1781+ 6949              //  ______________________________________________________________________
1782+ 6949              //
1783+ 6949              // 2drop        d --
1784+ 6949              //              n1 n2 --
1785+ 6949              // drops the top double from stack
1786+ 6949                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1786+ 6949             >
1786+ 6949             >Dict_Ptr        defl    $
1786+ 6949             >
1786+ 6949             >//              ______________________________________________________________________
1786+ 6949             >//              Heap part
1786+ 6949             >
1786+ 6949             >
1786+ 6949             >                org     (Heap_Ptr & $1FFF) + $E000
1786+ E337             >
1786+ E337             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1786+ E337             >Latest_Definition defl  Heap_Ptr
1786+ E337             >
1786+ E337             >                // dummy db directives used to calculate length of namec
1786+ E337 32 44 52 4F >                db      "2DROP"
1786+ E33B 50          >
1786+ E33C             >len_NFA         defl    $ - temp_NFA
1786+ E33C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1786+ E337             >
1786+ E337 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1786+ E338 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1786+ E33C 50          >
1786+ E33D             >                org     $-1                 // alter last byte of Name just above to set
1786+ E33C D0          >                db      {b $} | END_BIT     // msb as name end
1786+ E33D             >
1786+ E33D 2D 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1786+ E33F             >Prev_Ptr        defl    Heap_Ptr
1786+ E33F             >
1786+ E33F             >mirror_Ptr      defl    $
1786+ E33F             >
1786+ E33F 4B 69       >                dw      Dict_Ptr + 2        // xt
1786+ E341             >Heap_Ptr        defl    $ - $E000           // save current HP
1786+ E341             >
1786+ E341             >Current_HP      defl  $ - $E000             // used to set HP once!
1786+ E341             >
1786+ E341             >//              ______________________________________________________________________
1786+ E341             >//              Dictionary part
1786+ E341             >
1786+ E341             >                org     Dict_Ptr
1786+ 6949             >
1786+ 6949 3F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1786+ 694B             >
1786+ 694B             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1786+ 694B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1786+ 694B ~           >
1786+ 694B ~           >
1786+ 694B             >                endif           ; ok        // for other definitions it "points" the correct handler
1786+ 694B             >                // Use of "; ok" to suppress "warning[fwdref]"
1786+ 694B             >
1786+ 694B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1787+ 694B E1                           pop     hl
1788+ 694C E1                           pop     hl
1789+ 694D                              next
1789+ 694D DD E9       >                jp      (ix)
1790+ 694F
1791+ 694F              //  ______________________________________________________________________
1792+ 694F              //
1793+ 694F              // 2nip         d1 d2 -- d2
1794+ 694F              //              n1 n2 n3 n4 -- n3 n4
1795+ 694F              // drops the second double on the stack
1796+ 694F              //              New_Def TWO_NIP, 4, "2nip"
1797+ 694F              //              ...
1798+ 694F
1799+ 694F              //  ______________________________________________________________________
1800+ 694F              //
1801+ 694F              // 2tuck         d1 d2 -- d2 d1 d2
1802+ 694F              // copy the top element after the second.
1803+ 694F              //              New_Def TWO_TUCK, 5, "2tuck"
1804+ 694F              //              ...
1805+ 694F
1806+ 694F              //  ______________________________________________________________________
1807+ 694F              //
1808+ 694F              // 2swap         d1 d2 -- d2 d1
1809+ 694F              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1810+ 694F              // swaps the two doubles on top of stack
1811+ 694F                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1811+ 694F             >
1811+ 694F             >Dict_Ptr        defl    $
1811+ 694F             >
1811+ 694F             >//              ______________________________________________________________________
1811+ 694F             >//              Heap part
1811+ 694F             >
1811+ 694F             >
1811+ 694F             >                org     (Heap_Ptr & $1FFF) + $E000
1811+ E341             >
1811+ E341             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1811+ E341             >Latest_Definition defl  Heap_Ptr
1811+ E341             >
1811+ E341             >                // dummy db directives used to calculate length of namec
1811+ E341 32 53 57 41 >                db      "2SWAP"
1811+ E345 50          >
1811+ E346             >len_NFA         defl    $ - temp_NFA
1811+ E346             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1811+ E341             >
1811+ E341 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1811+ E342 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1811+ E346 50          >
1811+ E347             >                org     $-1                 // alter last byte of Name just above to set
1811+ E346 D0          >                db      {b $} | END_BIT     // msb as name end
1811+ E347             >
1811+ E347 37 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1811+ E349             >Prev_Ptr        defl    Heap_Ptr
1811+ E349             >
1811+ E349             >mirror_Ptr      defl    $
1811+ E349             >
1811+ E349 51 69       >                dw      Dict_Ptr + 2        // xt
1811+ E34B             >Heap_Ptr        defl    $ - $E000           // save current HP
1811+ E34B             >
1811+ E34B             >Current_HP      defl  $ - $E000             // used to set HP once!
1811+ E34B             >
1811+ E34B             >//              ______________________________________________________________________
1811+ E34B             >//              Dictionary part
1811+ E34B             >
1811+ E34B             >                org     Dict_Ptr
1811+ 694F             >
1811+ 694F 49 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1811+ 6951             >
1811+ 6951             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1811+ 6951 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1811+ 6951 ~           >
1811+ 6951 ~           >
1811+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1811+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1811+ 6951             >
1811+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1812+ 6951 D9                           exx
1813+ 6952 F1                           pop     af                  //   d2-H
1814+ 6953 E1                           pop     hl                  // < d2-L
1815+ 6954 D1                           pop     de                  // < d1-H
1816+ 6955 E3                           ex      (sp), hl            // < d1-L > d2-L
1817+ 6956 F5                           push    af                  // > d2-H
1818+ 6957 E5                           push    hl                  // > d1-L
1819+ 6958 D5                           push    de
1820+ 6959 D9                           exx
1821+ 695A                              next
1821+ 695A DD E9       >                jp      (ix)
1822+ 695C
1823+ 695C              //  ______________________________________________________________________
1824+ 695C              //
1825+ 695C              // 2dup         d -- d d
1826+ 695C              //              n1 n2 -- n1 n2 n1 n2
1827+ 695C              // duplicates the top double of stack
1828+ 695C                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1828+ 695C             >
1828+ 695C             >Dict_Ptr        defl    $
1828+ 695C             >
1828+ 695C             >//              ______________________________________________________________________
1828+ 695C             >//              Heap part
1828+ 695C             >
1828+ 695C             >
1828+ 695C             >                org     (Heap_Ptr & $1FFF) + $E000
1828+ E34B             >
1828+ E34B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1828+ E34B             >Latest_Definition defl  Heap_Ptr
1828+ E34B             >
1828+ E34B             >                // dummy db directives used to calculate length of namec
1828+ E34B 32 44 55 50 >                db      "2DUP"
1828+ E34F             >len_NFA         defl    $ - temp_NFA
1828+ E34F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1828+ E34B             >
1828+ E34B 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1828+ E34C 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1828+ E350             >                org     $-1                 // alter last byte of Name just above to set
1828+ E34F D0          >                db      {b $} | END_BIT     // msb as name end
1828+ E350             >
1828+ E350 41 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1828+ E352             >Prev_Ptr        defl    Heap_Ptr
1828+ E352             >
1828+ E352             >mirror_Ptr      defl    $
1828+ E352             >
1828+ E352 5E 69       >                dw      Dict_Ptr + 2        // xt
1828+ E354             >Heap_Ptr        defl    $ - $E000           // save current HP
1828+ E354             >
1828+ E354             >Current_HP      defl  $ - $E000             // used to set HP once!
1828+ E354             >
1828+ E354             >//              ______________________________________________________________________
1828+ E354             >//              Dictionary part
1828+ E354             >
1828+ E354             >                org     Dict_Ptr
1828+ 695C             >
1828+ 695C 52 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1828+ 695E             >
1828+ 695E             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1828+ 695E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1828+ 695E ~           >
1828+ 695E ~           >
1828+ 695E             >                endif           ; ok        // for other definitions it "points" the correct handler
1828+ 695E             >                // Use of "; ok" to suppress "warning[fwdref]"
1828+ 695E             >
1828+ 695E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1829+ 695E E1                           pop     hl                  // < d-H
1830+ 695F F1                           pop     af                  // < d-L
1831+ 6960 F5                           push    af                  // < d-L
1832+ 6961 E5                           push    hl                  // > d-H
1833+ 6962 F5                           push    af                  // > d-L
1834+ 6963 E5                           push    hl                  // > d-H
1835+ 6964                              next
1835+ 6964 DD E9       >                jp      (ix)
1836+ 6966
1837+ 6966              //  ______________________________________________________________________
1838+ 6966              //
1839+ 6966              // 2rot         d1 d2 d3 -- d2 d3 d1
1840+ 6966              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1841+ 6966              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1842+ 6966              // and putting it on top. The other two are shifted down one place.
1843+ 6966              //              New_Def TWO?ROT, 4, "2rot"
1844+ 6966              //              ...
1845+ 6966              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1846+ 6966              //
1847+ 6966              //      d3  |d2  |d1  |
1848+ 6966              //      h l |h l |h l |
1849+ 6966              // SP   LHED|LHED|LHED|
1850+ 6966              // SP  +0123|4567|89ab|
1851+ 6966              //              ld      hl, $000B
1852+ 6966              //              add     hl, sp
1853+ 6966              //              ld      d, (hl)
1854+ 6966              //              dec     hl
1855+ 6966              //              ld      e, (hl)
1856+ 6966              //              dec     hl
1857+ 6966              //              push    de
1858+ 6966              //              ld      d, (hl)
1859+ 6966              //              dec     hl
1860+ 6966              //              ld      e, (hl)
1861+ 6966              //              dec     hl
1862+ 6966              //              push    de
1863+ 6966
1864+ 6966              //      d1  |d3  |d2  |d1  |
1865+ 6966              //      h l |h l |h l |h l |
1866+ 6966              // SP   LHED|LHED|LHED|LHED|
1867+ 6966              // SP       +0123|4567|89ab|
1868+ 6966
1869+ 6966              //              ld      d, h
1870+ 6966              //              ld      e, l
1871+ 6966              //              inc     de
1872+ 6966              //              inc     de
1873+ 6966              //              inc     de
1874+ 6966              //              inc     de
1875+ 6966              //              push    bc
1876+ 6966              //              ld      bc, $000C
1877+ 6966              //              lddr
1878+ 6966              //              pop     bc
1879+ 6966              //              pop     de
1880+ 6966              //              pop     de
1881+ 6966              //
1882+ 6966              //              next
1883+ 6966
1884+ 6966
1885+ 6966              //  ______________________________________________________________________
1886+ 6966              //
1887+ 6966              // +!           n a --
1888+ 6966              // Sums to the content of address a the number n.
1889+ 6966              // It is the same of  a @ n + a !
1890+ 6966                              New_Def PLUSSTORE, "+!", is_code, is_normal
1890+ 6966             >
1890+ 6966             >Dict_Ptr        defl    $
1890+ 6966             >
1890+ 6966             >//              ______________________________________________________________________
1890+ 6966             >//              Heap part
1890+ 6966             >
1890+ 6966             >
1890+ 6966             >                org     (Heap_Ptr & $1FFF) + $E000
1890+ E354             >
1890+ E354             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1890+ E354             >Latest_Definition defl  Heap_Ptr
1890+ E354             >
1890+ E354             >                // dummy db directives used to calculate length of namec
1890+ E354 2B 21       >                db      "+!"
1890+ E356             >len_NFA         defl    $ - temp_NFA
1890+ E356             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1890+ E354             >
1890+ E354 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1890+ E355 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1890+ E357             >                org     $-1                 // alter last byte of Name just above to set
1890+ E356 A1          >                db      {b $} | END_BIT     // msb as name end
1890+ E357             >
1890+ E357 4B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1890+ E359             >Prev_Ptr        defl    Heap_Ptr
1890+ E359             >
1890+ E359             >mirror_Ptr      defl    $
1890+ E359             >
1890+ E359 68 69       >                dw      Dict_Ptr + 2        // xt
1890+ E35B             >Heap_Ptr        defl    $ - $E000           // save current HP
1890+ E35B             >
1890+ E35B             >Current_HP      defl  $ - $E000             // used to set HP once!
1890+ E35B             >
1890+ E35B             >//              ______________________________________________________________________
1890+ E35B             >//              Dictionary part
1890+ E35B             >
1890+ E35B             >                org     Dict_Ptr
1890+ 6966             >
1890+ 6966 59 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1890+ 6968             >
1890+ 6968             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1890+ 6968 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1890+ 6968 ~           >
1890+ 6968 ~           >
1890+ 6968             >                endif           ; ok        // for other definitions it "points" the correct handler
1890+ 6968             >                // Use of "; ok" to suppress "warning[fwdref]"
1890+ 6968             >
1890+ 6968             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1891+ 6968 D9                           exx
1892+ 6969 E1                           pop     hl                  // hl is the address
1893+ 696A D1                           pop     de                  // de is the number
1894+ 696B 7E                           ld      a, (hl)
1895+ 696C 83                           add     e
1896+ 696D 77                           ld      (hl), a
1897+ 696E 23                           inc     hl
1898+ 696F 7E                           ld      a, (hl)
1899+ 6970 8A                           adc     d
1900+ 6971 77                           ld      (hl), a
1901+ 6972 D9                           exx
1902+ 6973                              next
1902+ 6973 DD E9       >                jp      (ix)
1903+ 6975
1904+ 6975              //  ______________________________________________________________________
1905+ 6975              //
1906+ 6975              // toggle       a n --
1907+ 6975              // Complements (xor) the byte at addrress  a  with the model n.
1908+ 6975                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1908+ 6975             >
1908+ 6975             >Dict_Ptr        defl    $
1908+ 6975             >
1908+ 6975             >//              ______________________________________________________________________
1908+ 6975             >//              Heap part
1908+ 6975             >
1908+ 6975             >
1908+ 6975             >                org     (Heap_Ptr & $1FFF) + $E000
1908+ E35B             >
1908+ E35B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1908+ E35B             >Latest_Definition defl  Heap_Ptr
1908+ E35B             >
1908+ E35B             >                // dummy db directives used to calculate length of namec
1908+ E35B 54 4F 47 47 >                db      "TOGGLE"
1908+ E35F 4C 45       >
1908+ E361             >len_NFA         defl    $ - temp_NFA
1908+ E361             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1908+ E35B             >
1908+ E35B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1908+ E35C 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1908+ E360 4C 45       >
1908+ E362             >                org     $-1                 // alter last byte of Name just above to set
1908+ E361 C5          >                db      {b $} | END_BIT     // msb as name end
1908+ E362             >
1908+ E362 54 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1908+ E364             >Prev_Ptr        defl    Heap_Ptr
1908+ E364             >
1908+ E364             >mirror_Ptr      defl    $
1908+ E364             >
1908+ E364 77 69       >                dw      Dict_Ptr + 2        // xt
1908+ E366             >Heap_Ptr        defl    $ - $E000           // save current HP
1908+ E366             >
1908+ E366             >Current_HP      defl  $ - $E000             // used to set HP once!
1908+ E366             >
1908+ E366             >//              ______________________________________________________________________
1908+ E366             >//              Dictionary part
1908+ E366             >
1908+ E366             >                org     Dict_Ptr
1908+ 6975             >
1908+ 6975 64 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1908+ 6977             >
1908+ 6977             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1908+ 6977 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1908+ 6977 ~           >
1908+ 6977 ~           >
1908+ 6977             >                endif           ; ok        // for other definitions it "points" the correct handler
1908+ 6977             >                // Use of "; ok" to suppress "warning[fwdref]"
1908+ 6977             >
1908+ 6977             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1909+ 6977 E1                           pop     hl
1910+ 6978 7D                           ld      a, l
1911+ 6979 E1                           pop     hl
1912+ 697A AE                           xor     (hl)
1913+ 697B 77                           ld      (hl), a
1914+ 697C
1915+ 697C                              next
1915+ 697C DD E9       >                jp      (ix)
1916+ 697E
1917+ 697E              //  ______________________________________________________________________
1918+ 697E              //
1919+ 697E              // @            a -- n
1920+ 697E              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1921+ 697E                              New_Def FETCH, "@", is_code, is_normal
1921+ 697E             >
1921+ 697E             >Dict_Ptr        defl    $
1921+ 697E             >
1921+ 697E             >//              ______________________________________________________________________
1921+ 697E             >//              Heap part
1921+ 697E             >
1921+ 697E             >
1921+ 697E             >                org     (Heap_Ptr & $1FFF) + $E000
1921+ E366             >
1921+ E366             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1921+ E366             >Latest_Definition defl  Heap_Ptr
1921+ E366             >
1921+ E366             >                // dummy db directives used to calculate length of namec
1921+ E366 40          >                db      "@"
1921+ E367             >len_NFA         defl    $ - temp_NFA
1921+ E367             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1921+ E366             >
1921+ E366 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1921+ E367 40          >                db      "@"               // name string in 7-bit ascii, but
1921+ E368             >                org     $-1                 // alter last byte of Name just above to set
1921+ E367 C0          >                db      {b $} | END_BIT     // msb as name end
1921+ E368             >
1921+ E368 5B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1921+ E36A             >Prev_Ptr        defl    Heap_Ptr
1921+ E36A             >
1921+ E36A             >mirror_Ptr      defl    $
1921+ E36A             >
1921+ E36A 80 69       >                dw      Dict_Ptr + 2        // xt
1921+ E36C             >Heap_Ptr        defl    $ - $E000           // save current HP
1921+ E36C             >
1921+ E36C             >Current_HP      defl  $ - $E000             // used to set HP once!
1921+ E36C             >
1921+ E36C             >//              ______________________________________________________________________
1921+ E36C             >//              Dictionary part
1921+ E36C             >
1921+ E36C             >                org     Dict_Ptr
1921+ 697E             >
1921+ 697E 6A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1921+ 6980             >
1921+ 6980             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1921+ 6980 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1921+ 6980 ~           >
1921+ 6980 ~           >
1921+ 6980             >                endif           ; ok        // for other definitions it "points" the correct handler
1921+ 6980             >                // Use of "; ok" to suppress "warning[fwdref]"
1921+ 6980             >
1921+ 6980             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1922+ 6980 E1                           pop     hl
1923+ 6981 7E                           ld      a, (hl)             // low-byte
1924+ 6982 23                           inc     hl
1925+ 6983 66                           ld      h, (hl)             // high-byte
1926+ 6984 6F                           ld      l, a
1927+ 6985 E5                           push    hl
1928+ 6986                              next
1928+ 6986 DD E9       >                jp      (ix)
1929+ 6988
1930+ 6988              //  ______________________________________________________________________
1931+ 6988              //
1932+ 6988              // !            n a --
1933+ 6988              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1934+ 6988                              New_Def STORE, "!", is_code, is_normal
1934+ 6988             >
1934+ 6988             >Dict_Ptr        defl    $
1934+ 6988             >
1934+ 6988             >//              ______________________________________________________________________
1934+ 6988             >//              Heap part
1934+ 6988             >
1934+ 6988             >
1934+ 6988             >                org     (Heap_Ptr & $1FFF) + $E000
1934+ E36C             >
1934+ E36C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1934+ E36C             >Latest_Definition defl  Heap_Ptr
1934+ E36C             >
1934+ E36C             >                // dummy db directives used to calculate length of namec
1934+ E36C 21          >                db      "!"
1934+ E36D             >len_NFA         defl    $ - temp_NFA
1934+ E36D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1934+ E36C             >
1934+ E36C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1934+ E36D 21          >                db      "!"               // name string in 7-bit ascii, but
1934+ E36E             >                org     $-1                 // alter last byte of Name just above to set
1934+ E36D A1          >                db      {b $} | END_BIT     // msb as name end
1934+ E36E             >
1934+ E36E 66 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1934+ E370             >Prev_Ptr        defl    Heap_Ptr
1934+ E370             >
1934+ E370             >mirror_Ptr      defl    $
1934+ E370             >
1934+ E370 8A 69       >                dw      Dict_Ptr + 2        // xt
1934+ E372             >Heap_Ptr        defl    $ - $E000           // save current HP
1934+ E372             >
1934+ E372             >Current_HP      defl  $ - $E000             // used to set HP once!
1934+ E372             >
1934+ E372             >//              ______________________________________________________________________
1934+ E372             >//              Dictionary part
1934+ E372             >
1934+ E372             >                org     Dict_Ptr
1934+ 6988             >
1934+ 6988 70 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1934+ 698A             >
1934+ 698A             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1934+ 698A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1934+ 698A ~           >
1934+ 698A ~           >
1934+ 698A             >                endif           ; ok        // for other definitions it "points" the correct handler
1934+ 698A             >                // Use of "; ok" to suppress "warning[fwdref]"
1934+ 698A             >
1934+ 698A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1935+ 698A D9                           exx
1936+ 698B E1                           pop     hl                  // address
1937+ 698C D1                           pop     de                  // < n
1938+ 698D 73                           ld      (hl), e             // low-byte
1939+ 698E 23                           inc     hl
1940+ 698F 72                           ld      (hl), d             // high-byte
1941+ 6990 D9                           exx
1942+ 6991                              next
1942+ 6991 DD E9       >                jp      (ix)
1943+ 6993
1944+ 6993              //  ______________________________________________________________________
1945+ 6993              //
1946+ 6993              // c@           a -- c
1947+ 6993              // fetch a character n from address a
1948+ 6993                              New_Def CFETCH, "C@", is_code, is_normal
1948+ 6993             >
1948+ 6993             >Dict_Ptr        defl    $
1948+ 6993             >
1948+ 6993             >//              ______________________________________________________________________
1948+ 6993             >//              Heap part
1948+ 6993             >
1948+ 6993             >
1948+ 6993             >                org     (Heap_Ptr & $1FFF) + $E000
1948+ E372             >
1948+ E372             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1948+ E372             >Latest_Definition defl  Heap_Ptr
1948+ E372             >
1948+ E372             >                // dummy db directives used to calculate length of namec
1948+ E372 43 40       >                db      "C@"
1948+ E374             >len_NFA         defl    $ - temp_NFA
1948+ E374             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1948+ E372             >
1948+ E372 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1948+ E373 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1948+ E375             >                org     $-1                 // alter last byte of Name just above to set
1948+ E374 C0          >                db      {b $} | END_BIT     // msb as name end
1948+ E375             >
1948+ E375 6C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1948+ E377             >Prev_Ptr        defl    Heap_Ptr
1948+ E377             >
1948+ E377             >mirror_Ptr      defl    $
1948+ E377             >
1948+ E377 95 69       >                dw      Dict_Ptr + 2        // xt
1948+ E379             >Heap_Ptr        defl    $ - $E000           // save current HP
1948+ E379             >
1948+ E379             >Current_HP      defl  $ - $E000             // used to set HP once!
1948+ E379             >
1948+ E379             >//              ______________________________________________________________________
1948+ E379             >//              Dictionary part
1948+ E379             >
1948+ E379             >                org     Dict_Ptr
1948+ 6993             >
1948+ 6993 77 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1948+ 6995             >
1948+ 6995             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1948+ 6995 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1948+ 6995 ~           >
1948+ 6995 ~           >
1948+ 6995             >                endif           ; ok        // for other definitions it "points" the correct handler
1948+ 6995             >                // Use of "; ok" to suppress "warning[fwdref]"
1948+ 6995             >
1948+ 6995             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1949+ 6995 E1                           pop     hl
1950+ 6996 6E                           ld      l, (hl)             // low-byte
1951+ 6997 26 00                        ld      h, 0
1952+ 6999
1953+ 6999                              psh1
1953+ 6999 E5          >                push    hl
1953+ 699A DD E9       >                jp      (ix)
1954+ 699C
1955+ 699C              //  ______________________________________________________________________
1956+ 699C              //
1957+ 699C              // c!           c a --
1958+ 699C              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1959+ 699C                              New_Def CSTORE, "C!", is_code, is_normal
1959+ 699C             >
1959+ 699C             >Dict_Ptr        defl    $
1959+ 699C             >
1959+ 699C             >//              ______________________________________________________________________
1959+ 699C             >//              Heap part
1959+ 699C             >
1959+ 699C             >
1959+ 699C             >                org     (Heap_Ptr & $1FFF) + $E000
1959+ E379             >
1959+ E379             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1959+ E379             >Latest_Definition defl  Heap_Ptr
1959+ E379             >
1959+ E379             >                // dummy db directives used to calculate length of namec
1959+ E379 43 21       >                db      "C!"
1959+ E37B             >len_NFA         defl    $ - temp_NFA
1959+ E37B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1959+ E379             >
1959+ E379 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1959+ E37A 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1959+ E37C             >                org     $-1                 // alter last byte of Name just above to set
1959+ E37B A1          >                db      {b $} | END_BIT     // msb as name end
1959+ E37C             >
1959+ E37C 72 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1959+ E37E             >Prev_Ptr        defl    Heap_Ptr
1959+ E37E             >
1959+ E37E             >mirror_Ptr      defl    $
1959+ E37E             >
1959+ E37E 9E 69       >                dw      Dict_Ptr + 2        // xt
1959+ E380             >Heap_Ptr        defl    $ - $E000           // save current HP
1959+ E380             >
1959+ E380             >Current_HP      defl  $ - $E000             // used to set HP once!
1959+ E380             >
1959+ E380             >//              ______________________________________________________________________
1959+ E380             >//              Dictionary part
1959+ E380             >
1959+ E380             >                org     Dict_Ptr
1959+ 699C             >
1959+ 699C 7E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1959+ 699E             >
1959+ 699E             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1959+ 699E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1959+ 699E ~           >
1959+ 699E ~           >
1959+ 699E             >                endif           ; ok        // for other definitions it "points" the correct handler
1959+ 699E             >                // Use of "; ok" to suppress "warning[fwdref]"
1959+ 699E             >
1959+ 699E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1960+ 699E D9                           exx
1961+ 699F E1                           pop     hl                  // < address
1962+ 69A0 D1                           pop     de
1963+ 69A1 73                           ld      (hl), e             // low-byte
1964+ 69A2 D9                           exx
1965+ 69A3                              next
1965+ 69A3 DD E9       >                jp      (ix)
1966+ 69A5
1967+ 69A5              //  ______________________________________________________________________
1968+ 69A5              //
1969+ 69A5              // 2@           a -- d
1970+ 69A5              // fetch a 32 bits number d from address a and leaves it on top of the
1971+ 69A5              // stack as two single numbers, high part as top of the stack.
1972+ 69A5              // A double number is normally kept in CPU registers as HLDE.
1973+ 69A5              // On stack a double number is treated as two single numbers
1974+ 69A5              // where BC is on the top of the stack and HL is the second from top,
1975+ 69A5              // so the sign of the number can be checked on top of stack
1976+ 69A5              // and in the stack memory it appears as LHED.
1977+ 69A5                              New_Def TWO_FETCH, "2@", is_code, is_normal
1977+ 69A5             >
1977+ 69A5             >Dict_Ptr        defl    $
1977+ 69A5             >
1977+ 69A5             >//              ______________________________________________________________________
1977+ 69A5             >//              Heap part
1977+ 69A5             >
1977+ 69A5             >
1977+ 69A5             >                org     (Heap_Ptr & $1FFF) + $E000
1977+ E380             >
1977+ E380             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1977+ E380             >Latest_Definition defl  Heap_Ptr
1977+ E380             >
1977+ E380             >                // dummy db directives used to calculate length of namec
1977+ E380 32 40       >                db      "2@"
1977+ E382             >len_NFA         defl    $ - temp_NFA
1977+ E382             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1977+ E380             >
1977+ E380 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1977+ E381 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1977+ E383             >                org     $-1                 // alter last byte of Name just above to set
1977+ E382 C0          >                db      {b $} | END_BIT     // msb as name end
1977+ E383             >
1977+ E383 79 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1977+ E385             >Prev_Ptr        defl    Heap_Ptr
1977+ E385             >
1977+ E385             >mirror_Ptr      defl    $
1977+ E385             >
1977+ E385 A7 69       >                dw      Dict_Ptr + 2        // xt
1977+ E387             >Heap_Ptr        defl    $ - $E000           // save current HP
1977+ E387             >
1977+ E387             >Current_HP      defl  $ - $E000             // used to set HP once!
1977+ E387             >
1977+ E387             >//              ______________________________________________________________________
1977+ E387             >//              Dictionary part
1977+ E387             >
1977+ E387             >                org     Dict_Ptr
1977+ 69A5             >
1977+ 69A5 85 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1977+ 69A7             >
1977+ 69A7             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1977+ 69A7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1977+ 69A7 ~           >
1977+ 69A7 ~           >
1977+ 69A7             >                endif           ; ok        // for other definitions it "points" the correct handler
1977+ 69A7             >                // Use of "; ok" to suppress "warning[fwdref]"
1977+ 69A7             >
1977+ 69A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1978+ 69A7 D9                           exx
1979+ 69A8 E1                           pop     hl                  // address
1980+ 69A9 5E                           ld      e, (hl)             // low-byte
1981+ 69AA 23                           inc     hl
1982+ 69AB 56                           ld      d, (hl)             // high-byte
1983+ 69AC 23                           inc     hl
1984+ 69AD 4E                           ld      c, (hl)             // low-byte
1985+ 69AE 23                           inc     hl
1986+ 69AF 46                           ld      b, (hl)             // high-byte
1987+ 69B0 C5                           push    bc
1988+ 69B1 D5                           push    de
1989+ 69B2 D9                           exx
1990+ 69B3                              next
1990+ 69B3 DD E9       >                jp      (ix)
1991+ 69B5
1992+ 69B5              //  ______________________________________________________________________
1993+ 69B5              //
1994+ 69B5              // 2!           d a --
1995+ 69B5              // stores a 32 bits number d from address a and leaves it on top of the
1996+ 69B5              // stack as two single numbers, high part as top of the stack.
1997+ 69B5              // A double number is normally kept in CPU registers as HLDE.
1998+ 69B5              // On stack a double number is treated as two single numbers
1999+ 69B5              // where BC is on the top of the stack and HL is the second from top,
2000+ 69B5              // so the sign of the number can be checked on top of stack
2001+ 69B5              // and in the stack memory it appears as LHED.
2002+ 69B5                              New_Def TWO_STORE, "2!", is_code, is_normal
2002+ 69B5             >
2002+ 69B5             >Dict_Ptr        defl    $
2002+ 69B5             >
2002+ 69B5             >//              ______________________________________________________________________
2002+ 69B5             >//              Heap part
2002+ 69B5             >
2002+ 69B5             >
2002+ 69B5             >                org     (Heap_Ptr & $1FFF) + $E000
2002+ E387             >
2002+ E387             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2002+ E387             >Latest_Definition defl  Heap_Ptr
2002+ E387             >
2002+ E387             >                // dummy db directives used to calculate length of namec
2002+ E387 32 21       >                db      "2!"
2002+ E389             >len_NFA         defl    $ - temp_NFA
2002+ E389             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2002+ E387             >
2002+ E387 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2002+ E388 32 21       >                db      "2!"               // name string in 7-bit ascii, but
2002+ E38A             >                org     $-1                 // alter last byte of Name just above to set
2002+ E389 A1          >                db      {b $} | END_BIT     // msb as name end
2002+ E38A             >
2002+ E38A 80 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2002+ E38C             >Prev_Ptr        defl    Heap_Ptr
2002+ E38C             >
2002+ E38C             >mirror_Ptr      defl    $
2002+ E38C             >
2002+ E38C B7 69       >                dw      Dict_Ptr + 2        // xt
2002+ E38E             >Heap_Ptr        defl    $ - $E000           // save current HP
2002+ E38E             >
2002+ E38E             >Current_HP      defl  $ - $E000             // used to set HP once!
2002+ E38E             >
2002+ E38E             >//              ______________________________________________________________________
2002+ E38E             >//              Dictionary part
2002+ E38E             >
2002+ E38E             >                org     Dict_Ptr
2002+ 69B5             >
2002+ 69B5 8C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2002+ 69B7             >
2002+ 69B7             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2002+ 69B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2002+ 69B7 ~           >
2002+ 69B7 ~           >
2002+ 69B7             >                endif           ; ok        // for other definitions it "points" the correct handler
2002+ 69B7             >                // Use of "; ok" to suppress "warning[fwdref]"
2002+ 69B7             >
2002+ 69B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2003+ 69B7 D9                           exx
2004+ 69B8 E1                           pop     hl                  // address
2005+ 69B9 C1                           pop     bc                  // < high-part
2006+ 69BA D1                           pop     de                  // < low-part > Instruction Pointer
2007+ 69BB 71                           ld      (hl), c
2008+ 69BC 23                           inc     hl
2009+ 69BD 70                           ld      (hl), b
2010+ 69BE 23                           inc     hl
2011+ 69BF 73                           ld      (hl), e
2012+ 69C0 23                           inc     hl
2013+ 69C1 72                           ld      (hl), d
2014+ 69C2 D9                           exx
2015+ 69C3                              next
2015+ 69C3 DD E9       >                jp      (ix)
2016+ 69C5
2017+ 69C5              //  ______________________________________________________________________
2018+ 69C5              //
2019+ 69C5              // p@           a -- c
2020+ 69C5              // Read one byte from port a and leave the result on top of stack
2021+ 69C5                              New_Def PFETCH, "P@", is_code, is_normal
2021+ 69C5             >
2021+ 69C5             >Dict_Ptr        defl    $
2021+ 69C5             >
2021+ 69C5             >//              ______________________________________________________________________
2021+ 69C5             >//              Heap part
2021+ 69C5             >
2021+ 69C5             >
2021+ 69C5             >                org     (Heap_Ptr & $1FFF) + $E000
2021+ E38E             >
2021+ E38E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2021+ E38E             >Latest_Definition defl  Heap_Ptr
2021+ E38E             >
2021+ E38E             >                // dummy db directives used to calculate length of namec
2021+ E38E 50 40       >                db      "P@"
2021+ E390             >len_NFA         defl    $ - temp_NFA
2021+ E390             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2021+ E38E             >
2021+ E38E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2021+ E38F 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2021+ E391             >                org     $-1                 // alter last byte of Name just above to set
2021+ E390 C0          >                db      {b $} | END_BIT     // msb as name end
2021+ E391             >
2021+ E391 87 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2021+ E393             >Prev_Ptr        defl    Heap_Ptr
2021+ E393             >
2021+ E393             >mirror_Ptr      defl    $
2021+ E393             >
2021+ E393 C7 69       >                dw      Dict_Ptr + 2        // xt
2021+ E395             >Heap_Ptr        defl    $ - $E000           // save current HP
2021+ E395             >
2021+ E395             >Current_HP      defl  $ - $E000             // used to set HP once!
2021+ E395             >
2021+ E395             >//              ______________________________________________________________________
2021+ E395             >//              Dictionary part
2021+ E395             >
2021+ E395             >                org     Dict_Ptr
2021+ 69C5             >
2021+ 69C5 93 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2021+ 69C7             >
2021+ 69C7             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2021+ 69C7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2021+ 69C7 ~           >
2021+ 69C7 ~           >
2021+ 69C7             >                endif           ; ok        // for other definitions it "points" the correct handler
2021+ 69C7             >                // Use of "; ok" to suppress "warning[fwdref]"
2021+ 69C7             >
2021+ 69C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2022+ 69C7 D9                           exx
2023+ 69C8 C1                           pop     bc
2024+ 69C9 26 00                        ld      h, 0
2025+ 69CB ED 68                        in      l, (c)
2026+ 69CD E5                           push    hl
2027+ 69CE D9                           exx
2028+ 69CF                              next
2028+ 69CF DD E9       >                jp      (ix)
2029+ 69D1
2030+ 69D1              //  ______________________________________________________________________
2031+ 69D1              //
2032+ 69D1              // p!           c a --
2033+ 69D1              // Send one byte (top of stack) to port a
2034+ 69D1                              New_Def PSTORE, "P!", is_code, is_normal
2034+ 69D1             >
2034+ 69D1             >Dict_Ptr        defl    $
2034+ 69D1             >
2034+ 69D1             >//              ______________________________________________________________________
2034+ 69D1             >//              Heap part
2034+ 69D1             >
2034+ 69D1             >
2034+ 69D1             >                org     (Heap_Ptr & $1FFF) + $E000
2034+ E395             >
2034+ E395             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2034+ E395             >Latest_Definition defl  Heap_Ptr
2034+ E395             >
2034+ E395             >                // dummy db directives used to calculate length of namec
2034+ E395 50 21       >                db      "P!"
2034+ E397             >len_NFA         defl    $ - temp_NFA
2034+ E397             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2034+ E395             >
2034+ E395 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2034+ E396 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2034+ E398             >                org     $-1                 // alter last byte of Name just above to set
2034+ E397 A1          >                db      {b $} | END_BIT     // msb as name end
2034+ E398             >
2034+ E398 8E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2034+ E39A             >Prev_Ptr        defl    Heap_Ptr
2034+ E39A             >
2034+ E39A             >mirror_Ptr      defl    $
2034+ E39A             >
2034+ E39A D3 69       >                dw      Dict_Ptr + 2        // xt
2034+ E39C             >Heap_Ptr        defl    $ - $E000           // save current HP
2034+ E39C             >
2034+ E39C             >Current_HP      defl  $ - $E000             // used to set HP once!
2034+ E39C             >
2034+ E39C             >//              ______________________________________________________________________
2034+ E39C             >//              Dictionary part
2034+ E39C             >
2034+ E39C             >                org     Dict_Ptr
2034+ 69D1             >
2034+ 69D1 9A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2034+ 69D3             >
2034+ 69D3             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2034+ 69D3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2034+ 69D3 ~           >
2034+ 69D3 ~           >
2034+ 69D3             >                endif           ; ok        // for other definitions it "points" the correct handler
2034+ 69D3             >                // Use of "; ok" to suppress "warning[fwdref]"
2034+ 69D3             >
2034+ 69D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2035+ 69D3 D9                           exx
2036+ 69D4 C1                           pop     bc
2037+ 69D5 E1                           pop     hl                  // < c
2038+ 69D6 ED 69                        out     (c), l              // low-byte
2039+ 69D8 D9                           exx
2040+ 69D9                              next
2040+ 69D9 DD E9       >                jp      (ix)
2041+ 69DB
2042+ 69DB
2043+ 69DB              //  ______________________________________________________________________
2044+ 69DB              //
2045+ 69DB              // 2*           n1 -- n2
2046+ 69DB              // doubles the number at top of stack
2047+ 69DB                              New_Def TWO_MUL, "2*", is_code, is_normal
2047+ 69DB             >
2047+ 69DB             >Dict_Ptr        defl    $
2047+ 69DB             >
2047+ 69DB             >//              ______________________________________________________________________
2047+ 69DB             >//              Heap part
2047+ 69DB             >
2047+ 69DB             >
2047+ 69DB             >                org     (Heap_Ptr & $1FFF) + $E000
2047+ E39C             >
2047+ E39C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2047+ E39C             >Latest_Definition defl  Heap_Ptr
2047+ E39C             >
2047+ E39C             >                // dummy db directives used to calculate length of namec
2047+ E39C 32 2A       >                db      "2*"
2047+ E39E             >len_NFA         defl    $ - temp_NFA
2047+ E39E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2047+ E39C             >
2047+ E39C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2047+ E39D 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2047+ E39F             >                org     $-1                 // alter last byte of Name just above to set
2047+ E39E AA          >                db      {b $} | END_BIT     // msb as name end
2047+ E39F             >
2047+ E39F 95 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2047+ E3A1             >Prev_Ptr        defl    Heap_Ptr
2047+ E3A1             >
2047+ E3A1             >mirror_Ptr      defl    $
2047+ E3A1             >
2047+ E3A1 DD 69       >                dw      Dict_Ptr + 2        // xt
2047+ E3A3             >Heap_Ptr        defl    $ - $E000           // save current HP
2047+ E3A3             >
2047+ E3A3             >Current_HP      defl  $ - $E000             // used to set HP once!
2047+ E3A3             >
2047+ E3A3             >//              ______________________________________________________________________
2047+ E3A3             >//              Dictionary part
2047+ E3A3             >
2047+ E3A3             >                org     Dict_Ptr
2047+ 69DB             >
2047+ 69DB A1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2047+ 69DD             >
2047+ 69DD             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2047+ 69DD ~           >                call    runcode ; ok        // for primitive definitions  actual code
2047+ 69DD ~           >
2047+ 69DD ~           >
2047+ 69DD             >                endif           ; ok        // for other definitions it "points" the correct handler
2047+ 69DD             >                // Use of "; ok" to suppress "warning[fwdref]"
2047+ 69DD             >
2047+ 69DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2048+ 69DD              Two_Mul_Ptr:
2049+ 69DD E1                           pop     hl
2050+ 69DE 29                           add     hl, hl
2051+ 69DF
2052+ 69DF                              psh1
2052+ 69DF E5          >                push    hl
2052+ 69E0 DD E9       >                jp      (ix)
2053+ 69E2
2054+ 69E2              //  ______________________________________________________________________
2055+ 69E2              //
2056+ 69E2              // 2/           n1 -- n2
2057+ 69E2              // halves the top of stack, sign is unchanged
2058+ 69E2                              New_Def TWO_DIV, "2/", is_code, is_normal
2058+ 69E2             >
2058+ 69E2             >Dict_Ptr        defl    $
2058+ 69E2             >
2058+ 69E2             >//              ______________________________________________________________________
2058+ 69E2             >//              Heap part
2058+ 69E2             >
2058+ 69E2             >
2058+ 69E2             >                org     (Heap_Ptr & $1FFF) + $E000
2058+ E3A3             >
2058+ E3A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2058+ E3A3             >Latest_Definition defl  Heap_Ptr
2058+ E3A3             >
2058+ E3A3             >                // dummy db directives used to calculate length of namec
2058+ E3A3 32 2F       >                db      "2/"
2058+ E3A5             >len_NFA         defl    $ - temp_NFA
2058+ E3A5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2058+ E3A3             >
2058+ E3A3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2058+ E3A4 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2058+ E3A6             >                org     $-1                 // alter last byte of Name just above to set
2058+ E3A5 AF          >                db      {b $} | END_BIT     // msb as name end
2058+ E3A6             >
2058+ E3A6 9C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2058+ E3A8             >Prev_Ptr        defl    Heap_Ptr
2058+ E3A8             >
2058+ E3A8             >mirror_Ptr      defl    $
2058+ E3A8             >
2058+ E3A8 E4 69       >                dw      Dict_Ptr + 2        // xt
2058+ E3AA             >Heap_Ptr        defl    $ - $E000           // save current HP
2058+ E3AA             >
2058+ E3AA             >Current_HP      defl  $ - $E000             // used to set HP once!
2058+ E3AA             >
2058+ E3AA             >//              ______________________________________________________________________
2058+ E3AA             >//              Dictionary part
2058+ E3AA             >
2058+ E3AA             >                org     Dict_Ptr
2058+ 69E2             >
2058+ 69E2 A8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2058+ 69E4             >
2058+ 69E4             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2058+ 69E4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2058+ 69E4 ~           >
2058+ 69E4 ~           >
2058+ 69E4             >                endif           ; ok        // for other definitions it "points" the correct handler
2058+ 69E4             >                // Use of "; ok" to suppress "warning[fwdref]"
2058+ 69E4             >
2058+ 69E4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2059+ 69E4 E1                           pop     hl
2060+ 69E5 CB 2C                        sra     h
2061+ 69E7 CB 1D                        rr      l
2062+ 69E9
2063+ 69E9                              psh1
2063+ 69E9 E5          >                push    hl
2063+ 69EA DD E9       >                jp      (ix)
2064+ 69EC
2065+ 69EC              //  ______________________________________________________________________
2066+ 69EC              //
2067+ 69EC              // lshift       n1 u -- n2
2068+ 69EC              // bit left shift of u bits
2069+ 69EC                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2069+ 69EC             >
2069+ 69EC             >Dict_Ptr        defl    $
2069+ 69EC             >
2069+ 69EC             >//              ______________________________________________________________________
2069+ 69EC             >//              Heap part
2069+ 69EC             >
2069+ 69EC             >
2069+ 69EC             >                org     (Heap_Ptr & $1FFF) + $E000
2069+ E3AA             >
2069+ E3AA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2069+ E3AA             >Latest_Definition defl  Heap_Ptr
2069+ E3AA             >
2069+ E3AA             >                // dummy db directives used to calculate length of namec
2069+ E3AA 4C 53 48 49 >                db      "LSHIFT"
2069+ E3AE 46 54       >
2069+ E3B0             >len_NFA         defl    $ - temp_NFA
2069+ E3B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2069+ E3AA             >
2069+ E3AA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2069+ E3AB 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2069+ E3AF 46 54       >
2069+ E3B1             >                org     $-1                 // alter last byte of Name just above to set
2069+ E3B0 D4          >                db      {b $} | END_BIT     // msb as name end
2069+ E3B1             >
2069+ E3B1 A3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2069+ E3B3             >Prev_Ptr        defl    Heap_Ptr
2069+ E3B3             >
2069+ E3B3             >mirror_Ptr      defl    $
2069+ E3B3             >
2069+ E3B3 EE 69       >                dw      Dict_Ptr + 2        // xt
2069+ E3B5             >Heap_Ptr        defl    $ - $E000           // save current HP
2069+ E3B5             >
2069+ E3B5             >Current_HP      defl  $ - $E000             // used to set HP once!
2069+ E3B5             >
2069+ E3B5             >//              ______________________________________________________________________
2069+ E3B5             >//              Dictionary part
2069+ E3B5             >
2069+ E3B5             >                org     Dict_Ptr
2069+ 69EC             >
2069+ 69EC B3 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2069+ 69EE             >
2069+ 69EE             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2069+ 69EE ~           >                call    runcode ; ok        // for primitive definitions  actual code
2069+ 69EE ~           >
2069+ 69EE ~           >
2069+ 69EE             >                endif           ; ok        // for other definitions it "points" the correct handler
2069+ 69EE             >                // Use of "; ok" to suppress "warning[fwdref]"
2069+ 69EE             >
2069+ 69EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2070+ 69EE D9                           exx
2071+ 69EF C1                           pop     bc
2072+ 69F0 41                           ld      b, c
2073+ 69F1 D1                           pop     de
2074+ 69F2 ED 28                        bsla    de, b
2075+ 69F4 D5                           push    de
2076+ 69F5 D9                           exx
2077+ 69F6                              next
2077+ 69F6 DD E9       >                jp      (ix)
2078+ 69F8
2079+ 69F8              //  ______________________________________________________________________
2080+ 69F8              //
2081+ 69F8              // rshift       n1 u -- n2
2082+ 69F8              // bit right shift of u bits
2083+ 69F8                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2083+ 69F8             >
2083+ 69F8             >Dict_Ptr        defl    $
2083+ 69F8             >
2083+ 69F8             >//              ______________________________________________________________________
2083+ 69F8             >//              Heap part
2083+ 69F8             >
2083+ 69F8             >
2083+ 69F8             >                org     (Heap_Ptr & $1FFF) + $E000
2083+ E3B5             >
2083+ E3B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2083+ E3B5             >Latest_Definition defl  Heap_Ptr
2083+ E3B5             >
2083+ E3B5             >                // dummy db directives used to calculate length of namec
2083+ E3B5 52 53 48 49 >                db      "RSHIFT"
2083+ E3B9 46 54       >
2083+ E3BB             >len_NFA         defl    $ - temp_NFA
2083+ E3BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2083+ E3B5             >
2083+ E3B5 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2083+ E3B6 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2083+ E3BA 46 54       >
2083+ E3BC             >                org     $-1                 // alter last byte of Name just above to set
2083+ E3BB D4          >                db      {b $} | END_BIT     // msb as name end
2083+ E3BC             >
2083+ E3BC AA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2083+ E3BE             >Prev_Ptr        defl    Heap_Ptr
2083+ E3BE             >
2083+ E3BE             >mirror_Ptr      defl    $
2083+ E3BE             >
2083+ E3BE FA 69       >                dw      Dict_Ptr + 2        // xt
2083+ E3C0             >Heap_Ptr        defl    $ - $E000           // save current HP
2083+ E3C0             >
2083+ E3C0             >Current_HP      defl  $ - $E000             // used to set HP once!
2083+ E3C0             >
2083+ E3C0             >//              ______________________________________________________________________
2083+ E3C0             >//              Dictionary part
2083+ E3C0             >
2083+ E3C0             >                org     Dict_Ptr
2083+ 69F8             >
2083+ 69F8 BE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2083+ 69FA             >
2083+ 69FA             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2083+ 69FA ~           >                call    runcode ; ok        // for primitive definitions  actual code
2083+ 69FA ~           >
2083+ 69FA ~           >
2083+ 69FA             >                endif           ; ok        // for other definitions it "points" the correct handler
2083+ 69FA             >                // Use of "; ok" to suppress "warning[fwdref]"
2083+ 69FA             >
2083+ 69FA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2084+ 69FA D9                           exx
2085+ 69FB C1                           pop     bc
2086+ 69FC 41                           ld      b, c
2087+ 69FD D1                           pop     de
2088+ 69FE ED 2A                        bsrl    de, b
2089+ 6A00 D5                           push    de
2090+ 6A01 D9                           exx
2091+ 6A02                              next
2091+ 6A02 DD E9       >                jp      (ix)
2092+ 6A04
2093+ 6A04              //  ______________________________________________________________________
2094+ 6A04              //
2095+ 6A04              // cells        n1 -- n2
2096+ 6A04              // decrement by 2 top of stack
2097+ 6A04                              New_Def CELLS, "CELLS", is_code, is_normal
2097+ 6A04             >
2097+ 6A04             >Dict_Ptr        defl    $
2097+ 6A04             >
2097+ 6A04             >//              ______________________________________________________________________
2097+ 6A04             >//              Heap part
2097+ 6A04             >
2097+ 6A04             >
2097+ 6A04             >                org     (Heap_Ptr & $1FFF) + $E000
2097+ E3C0             >
2097+ E3C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2097+ E3C0             >Latest_Definition defl  Heap_Ptr
2097+ E3C0             >
2097+ E3C0             >                // dummy db directives used to calculate length of namec
2097+ E3C0 43 45 4C 4C >                db      "CELLS"
2097+ E3C4 53          >
2097+ E3C5             >len_NFA         defl    $ - temp_NFA
2097+ E3C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2097+ E3C0             >
2097+ E3C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2097+ E3C1 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2097+ E3C5 53          >
2097+ E3C6             >                org     $-1                 // alter last byte of Name just above to set
2097+ E3C5 D3          >                db      {b $} | END_BIT     // msb as name end
2097+ E3C6             >
2097+ E3C6 B5 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2097+ E3C8             >Prev_Ptr        defl    Heap_Ptr
2097+ E3C8             >
2097+ E3C8             >mirror_Ptr      defl    $
2097+ E3C8             >
2097+ E3C8 06 6A       >                dw      Dict_Ptr + 2        // xt
2097+ E3CA             >Heap_Ptr        defl    $ - $E000           // save current HP
2097+ E3CA             >
2097+ E3CA             >Current_HP      defl  $ - $E000             // used to set HP once!
2097+ E3CA             >
2097+ E3CA             >//              ______________________________________________________________________
2097+ E3CA             >//              Dictionary part
2097+ E3CA             >
2097+ E3CA             >                org     Dict_Ptr
2097+ 6A04             >
2097+ 6A04 C8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2097+ 6A06             >
2097+ 6A06             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2097+ 6A06 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2097+ 6A06 ~           >
2097+ 6A06 ~           >
2097+ 6A06             >                endif           ; ok        // for other definitions it "points" the correct handler
2097+ 6A06             >                // Use of "; ok" to suppress "warning[fwdref]"
2097+ 6A06             >
2097+ 6A06             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2098+ 6A06 18 D5                        jr      Two_Mul_Ptr
2099+ 6A08
2100+ 6A08
2101+ 6A08              //  ______________________________________________________________________
2102+ 6A08
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L0.asm
 140  6A08                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
   1+ 6A08              //  ______________________________________________________________________
   2+ 6A08              //
   3+ 6A08              //  L1.asm
   4+ 6A08              //
   5+ 6A08              //  Level-1 definitions and derivate
   6+ 6A08              //  ______________________________________________________________________
   7+ 6A08
   8+ 6A08              //  ______________________________________________________________________
   9+ 6A08              //
  10+ 6A08              // :            -- cccc     ( compile time )
  11+ 6A08              //              i*x -- j*x  ( run time )
  12+ 6A08              // Colon Definition
  13+ 6A08                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A08             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A08             >
  13+ 6A08             >Dict_Ptr        defl    $
  13+ 6A08             >
  13+ 6A08             >//              ______________________________________________________________________
  13+ 6A08             >//              Heap part
  13+ 6A08             >
  13+ 6A08             >
  13+ 6A08             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3CA             >
  13+ E3CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3CA             >Latest_Definition defl  Heap_Ptr
  13+ E3CA             >
  13+ E3CA             >                // dummy db directives used to calculate length of namec
  13+ E3CA 3A          >                db      ":"
  13+ E3CB             >len_NFA         defl    $ - temp_NFA
  13+ E3CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3CA             >
  13+ E3CA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3CB 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CC             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3CB BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CC             >
  13+ E3CC C0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CE             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CE             >
  13+ E3CE             >mirror_Ptr      defl    $
  13+ E3CE             >
  13+ E3CE 0A 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3D0             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3D0             >
  13+ E3D0             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3D0             >
  13+ E3D0             >//              ______________________________________________________________________
  13+ E3D0             >//              Dictionary part
  13+ E3D0             >
  13+ E3D0             >                org     Dict_Ptr
  13+ 6A08             >
  13+ 6A08 CE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A0A             >
  13+ 6A0A             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A0A CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A0D             >
  13+ 6A0D             >
  13+ 6A0D             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A0D             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A0D             >
  13+ 6A0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A0D
  15+ 6A0D F7 6D                        dw      QEXEC                   // ?exec
  16+ 6A0F C2 6D                        dw      STORE_CSP               // !csp
  17+ 6A11 3B 6B 80 69                  dw      CURRENT, FETCH          // current @
  18+ 6A15 35 6B 8A 69                  dw      CONTEXT, STORE          // context !
  19+ 6A19 E5 73                        dw      CREATE                  // create  ( forward )
  20+ 6A1B 79 6E                        dw      SMUDGE                  // dmudge
  21+ 6A1D 6A 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A1F B5 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A21                                                              // ... immediate
  24+ 6A21              Enter_Ptr:
  25+ 6A21                              // via call coded in CFA
  26+ 6A21 EB                           ex      de, hl //**
  27+ 6A22                              // *** ldhlrp
  28+ 6A22 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A23 70                           ld      (hl), b
  30+ 6A24 2B                           dec     hl
  31+ 6A25 71                           ld      (hl), c
  32+ 6A26                              // *** ldrphl
  33+ 6A26 EB                           ex      de, hl //**
  34+ 6A27
  35+ 6A27
  36+ 6A27 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A28                              next
  37+ 6A28 DD E9       >                jp      (ix)
  38+ 6A2A
  39+ 6A2A              //  ______________________________________________________________________
  40+ 6A2A              //
  41+ 6A2A              // ;            --
  42+ 6A2A              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A2A                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A2A             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A2A             >
  43+ 6A2A             >Dict_Ptr        defl    $
  43+ 6A2A             >
  43+ 6A2A             >//              ______________________________________________________________________
  43+ 6A2A             >//              Heap part
  43+ 6A2A             >
  43+ 6A2A             >
  43+ 6A2A             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3D0             >
  43+ E3D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3D0             >Latest_Definition defl  Heap_Ptr
  43+ E3D0             >
  43+ E3D0             >                // dummy db directives used to calculate length of namec
  43+ E3D0 3B          >                db      ";"
  43+ E3D1             >len_NFA         defl    $ - temp_NFA
  43+ E3D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3D0             >
  43+ E3D0 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3D1 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D2             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3D1 BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D2             >
  43+ E3D2 CA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D4             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D4             >
  43+ E3D4             >mirror_Ptr      defl    $
  43+ E3D4             >
  43+ E3D4 2C 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D6             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D6             >
  43+ E3D6             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D6             >
  43+ E3D6             >//              ______________________________________________________________________
  43+ E3D6             >//              Dictionary part
  43+ E3D6             >
  43+ E3D6             >                org     Dict_Ptr
  43+ 6A2A             >
  43+ 6A2A D4 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A2C             >
  43+ 6A2C             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A2C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A2F             >
  43+ 6A2F             >
  43+ 6A2F             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A2F             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A2F             >
  43+ 6A2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A2F
  45+ 6A2F 17 6E                        dw      QCSP                    // ?csp
  46+ 6A31 3F 6E 4B 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A35 79 6E                        dw      SMUDGE                  // smudge
  48+ 6A37 5D 6E                        dw      SQUARED_OPEN            // [
  49+ 6A39 4B 68                        dw      EXIT                    // ; immediate
  50+ 6A3B
  51+ 6A3B              //  ______________________________________________________________________
  52+ 6A3B              //
  53+ 6A3B              // noop         --
  54+ 6A3B
  55+ 6A3B                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A3B             >
  55+ 6A3B             >Dict_Ptr        defl    $
  55+ 6A3B             >
  55+ 6A3B             >//              ______________________________________________________________________
  55+ 6A3B             >//              Heap part
  55+ 6A3B             >
  55+ 6A3B             >
  55+ 6A3B             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D6             >
  55+ E3D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D6             >Latest_Definition defl  Heap_Ptr
  55+ E3D6             >
  55+ E3D6             >                // dummy db directives used to calculate length of namec
  55+ E3D6 4E 4F 4F 50 >                db      "NOOP"
  55+ E3DA             >len_NFA         defl    $ - temp_NFA
  55+ E3DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D6             >
  55+ E3D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D7 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3DB             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3DA D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3DB             >
  55+ E3DB D0 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DD             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DD             >
  55+ E3DD             >mirror_Ptr      defl    $
  55+ E3DD             >
  55+ E3DD 3D 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DF             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DF             >
  55+ E3DF             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DF             >
  55+ E3DF             >//              ______________________________________________________________________
  55+ E3DF             >//              Dictionary part
  55+ E3DF             >
  55+ E3DF             >                org     Dict_Ptr
  55+ 6A3B             >
  55+ 6A3B DD 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A3D             >
  55+ 6A3D             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A3D ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A3D ~           >
  55+ 6A3D ~           >
  55+ 6A3D             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A3D             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A3D             >
  55+ 6A3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A3D                              next
  56+ 6A3D DD E9       >                jp      (ix)
  57+ 6A3F
  58+ 6A3F              //  ______________________________________________________________________
  59+ 6A3F              //
  60+ 6A3F              // constant     n -- cccc     ( compile time )
  61+ 6A3F              //              -- n          ( run time )
  62+ 6A3F              // Constant definition.
  63+ 6A3F                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A3F             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A3F             >
  63+ 6A3F             >Dict_Ptr        defl    $
  63+ 6A3F             >
  63+ 6A3F             >//              ______________________________________________________________________
  63+ 6A3F             >//              Heap part
  63+ 6A3F             >
  63+ 6A3F             >
  63+ 6A3F             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DF             >
  63+ E3DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DF             >Latest_Definition defl  Heap_Ptr
  63+ E3DF             >
  63+ E3DF             >                // dummy db directives used to calculate length of namec
  63+ E3DF 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E3 54 41 4E 54 >
  63+ E3E7             >len_NFA         defl    $ - temp_NFA
  63+ E3E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DF             >
  63+ E3DF 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3E0 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E4 54 41 4E 54 >
  63+ E3E8             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E7 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E8             >
  63+ E3E8 D6 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3EA             >Prev_Ptr        defl    Heap_Ptr
  63+ E3EA             >
  63+ E3EA             >mirror_Ptr      defl    $
  63+ E3EA             >
  63+ E3EA 41 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EC             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EC             >
  63+ E3EC             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EC             >
  63+ E3EC             >//              ______________________________________________________________________
  63+ E3EC             >//              Dictionary part
  63+ E3EC             >
  63+ E3EC             >                org     Dict_Ptr
  63+ 6A3F             >
  63+ 6A3F EA 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A41             >
  63+ 6A41             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A41 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A44             >
  63+ 6A44             >
  63+ 6A44             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A44             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A44             >
  63+ 6A44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A44 E5 73                        dw      CREATE                  // create
  65+ 6A46 B1 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A48 B5 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A4A              Constant_Ptr:
  68+ 6A4A
  69+ 6A4A
  70+ 6A4A E1                           pop     hl
  71+ 6A4B
  72+ 6A4B 7E                           ld      a, (hl)
  73+ 6A4C 23                           inc     hl
  74+ 6A4D 66                           ld      h, (hl)
  75+ 6A4E 6F                           ld      l, a
  76+ 6A4F E5                           push    hl
  77+ 6A50                              next
  77+ 6A50 DD E9       >                jp      (ix)
  78+ 6A52
  79+ 6A52              //  ______________________________________________________________________
  80+ 6A52              //
  81+ 6A52              // variable     n -- cccc     ( compile time )
  82+ 6A52              //              -- a          ( run time )
  83+ 6A52              // Variable definition, n is the initial value.
  84+ 6A52                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A52             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A52             >
  84+ 6A52             >Dict_Ptr        defl    $
  84+ 6A52             >
  84+ 6A52             >//              ______________________________________________________________________
  84+ 6A52             >//              Heap part
  84+ 6A52             >
  84+ 6A52             >
  84+ 6A52             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EC             >
  84+ E3EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EC             >Latest_Definition defl  Heap_Ptr
  84+ E3EC             >
  84+ E3EC             >                // dummy db directives used to calculate length of namec
  84+ E3EC 56 41 52 49 >                db      "VARIABLE"
  84+ E3F0 41 42 4C 45 >
  84+ E3F4             >len_NFA         defl    $ - temp_NFA
  84+ E3F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EC             >
  84+ E3EC 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3ED 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3F1 41 42 4C 45 >
  84+ E3F5             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F4 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F5             >
  84+ E3F5 DF 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F7             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F7             >
  84+ E3F7             >mirror_Ptr      defl    $
  84+ E3F7             >
  84+ E3F7 54 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F9             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F9             >
  84+ E3F9             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F9             >
  84+ E3F9             >//              ______________________________________________________________________
  84+ E3F9             >//              Dictionary part
  84+ E3F9             >
  84+ E3F9             >                org     Dict_Ptr
  84+ 6A52             >
  84+ 6A52 F7 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A54             >
  84+ 6A54             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A54 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A57             >
  84+ 6A57             >
  84+ 6A57             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A57             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A57             >
  84+ 6A57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A57
  86+ 6A57 76 6A                        dw      ZERO
  87+ 6A59 41 6A                        dw      CONSTANT                // constant
  88+ 6A5B B5 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A5D              Variable_Ptr:
  90+ 6A5D
  91+ 6A5D
  92+ 6A5D
  93+ 6A5D
  94+ 6A5D                              next
  94+ 6A5D DD E9       >                jp      (ix)
  95+ 6A5F
  96+ 6A5F              //  ______________________________________________________________________
  97+ 6A5F              //
  98+ 6A5F              // user         b -- cccc     ( compile time )
  99+ 6A5F              //              -- a          ( run time )
 100+ 6A5F              // User variable definition
 101+ 6A5F                              Colon_Def USER, "USER", is_normal
 101+ 6A5F             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A5F             >
 101+ 6A5F             >Dict_Ptr        defl    $
 101+ 6A5F             >
 101+ 6A5F             >//              ______________________________________________________________________
 101+ 6A5F             >//              Heap part
 101+ 6A5F             >
 101+ 6A5F             >
 101+ 6A5F             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F9             >
 101+ E3F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F9             >Latest_Definition defl  Heap_Ptr
 101+ E3F9             >
 101+ E3F9             >                // dummy db directives used to calculate length of namec
 101+ E3F9 55 53 45 52 >                db      "USER"
 101+ E3FD             >len_NFA         defl    $ - temp_NFA
 101+ E3FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F9             >
 101+ E3F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3FA 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FE             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FD D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FE             >
 101+ E3FE EC 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E400             >Prev_Ptr        defl    Heap_Ptr
 101+ E400             >
 101+ E400             >mirror_Ptr      defl    $
 101+ E400             >
 101+ E400 61 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E402             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E402             >
 101+ E402             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E402             >
 101+ E402             >//              ______________________________________________________________________
 101+ E402             >//              Dictionary part
 101+ E402             >
 101+ E402             >                org     Dict_Ptr
 101+ 6A5F             >
 101+ 6A5F 00 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A61             >
 101+ 6A61             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A61 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A64             >
 101+ 6A64             >
 101+ 6A64             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A64             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A64             >
 101+ 6A64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A64
 103+ 6A64 E5 73                        dw      CREATE                  // create
 104+ 6A66 C0 6B                        dw      CCOMMA                  // c,
 105+ 6A68 B5 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A6A
 107+ 6A6A
 108+ 6A6A              User_Ptr:
 109+ 6A6A                              // via call coded in CFA
 110+ 6A6A E1                           pop     hl
 111+ 6A6B
 112+ 6A6B 7E                           ld      a, (hl)
 113+ 6A6C 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A6F ED 31                        add     hl, a
 115+ 6A71 E5                           push    hl
 116+ 6A72                              next
 116+ 6A72 DD E9       >                jp      (ix)
 117+ 6A74
 118+ 6A74              //  ______________________________________________________________________
 119+ 6A74              //
 120+ 6A74                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A74             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A74             >
 120+ 6A74             >Dict_Ptr        defl    $
 120+ 6A74             >
 120+ 6A74             >//              ______________________________________________________________________
 120+ 6A74             >//              Heap part
 120+ 6A74             >
 120+ 6A74             >
 120+ 6A74             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E402             >
 120+ E402             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E402             >Latest_Definition defl  Heap_Ptr
 120+ E402             >
 120+ E402             >                // dummy db directives used to calculate length of namec
 120+ E402 30          >                db      "0"
 120+ E403             >len_NFA         defl    $ - temp_NFA
 120+ E403             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E402             >
 120+ E402 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E403 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E404             >                org     $-1                 // alter last byte of Name just above to set
 120+ E403 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E404             >
 120+ E404 F9 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E406             >Prev_Ptr        defl    Heap_Ptr
 120+ E406             >
 120+ E406             >mirror_Ptr      defl    $
 120+ E406             >
 120+ E406 76 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E408             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E408             >
 120+ E408             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E408             >
 120+ E408             >//              ______________________________________________________________________
 120+ E408             >//              Dictionary part
 120+ E408             >
 120+ E408             >                org     Dict_Ptr
 120+ 6A74             >
 120+ 6A74 06 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A76             >
 120+ 6A76             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A76 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A79             >
 120+ 6A79             >
 120+ 6A79             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A79             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A79             >
 120+ 6A79             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A79 00 00       >                dw      0
 121+ 6A7B                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A7B             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A7B             >
 121+ 6A7B             >Dict_Ptr        defl    $
 121+ 6A7B             >
 121+ 6A7B             >//              ______________________________________________________________________
 121+ 6A7B             >//              Heap part
 121+ 6A7B             >
 121+ 6A7B             >
 121+ 6A7B             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E408             >
 121+ E408             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E408             >Latest_Definition defl  Heap_Ptr
 121+ E408             >
 121+ E408             >                // dummy db directives used to calculate length of namec
 121+ E408 31          >                db      "1"
 121+ E409             >len_NFA         defl    $ - temp_NFA
 121+ E409             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E408             >
 121+ E408 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E409 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E40A             >                org     $-1                 // alter last byte of Name just above to set
 121+ E409 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E40A             >
 121+ E40A 02 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40C             >Prev_Ptr        defl    Heap_Ptr
 121+ E40C             >
 121+ E40C             >mirror_Ptr      defl    $
 121+ E40C             >
 121+ E40C 7D 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40E             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40E             >
 121+ E40E             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40E             >
 121+ E40E             >//              ______________________________________________________________________
 121+ E40E             >//              Dictionary part
 121+ E40E             >
 121+ E40E             >                org     Dict_Ptr
 121+ 6A7B             >
 121+ 6A7B 0C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A7D             >
 121+ 6A7D             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A7D CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A80             >
 121+ 6A80             >
 121+ 6A80             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A80             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A80             >
 121+ 6A80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A80 01 00       >                dw      1
 122+ 6A82                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A82             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A82             >
 122+ 6A82             >Dict_Ptr        defl    $
 122+ 6A82             >
 122+ 6A82             >//              ______________________________________________________________________
 122+ 6A82             >//              Heap part
 122+ 6A82             >
 122+ 6A82             >
 122+ 6A82             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40E             >
 122+ E40E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40E             >Latest_Definition defl  Heap_Ptr
 122+ E40E             >
 122+ E40E             >                // dummy db directives used to calculate length of namec
 122+ E40E 32          >                db      "2"
 122+ E40F             >len_NFA         defl    $ - temp_NFA
 122+ E40F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40E             >
 122+ E40E 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40F 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E410             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40F B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E410             >
 122+ E410 08 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E412             >Prev_Ptr        defl    Heap_Ptr
 122+ E412             >
 122+ E412             >mirror_Ptr      defl    $
 122+ E412             >
 122+ E412 84 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E414             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E414             >
 122+ E414             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E414             >
 122+ E414             >//              ______________________________________________________________________
 122+ E414             >//              Dictionary part
 122+ E414             >
 122+ E414             >                org     Dict_Ptr
 122+ 6A82             >
 122+ 6A82 12 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A84             >
 122+ 6A84             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A84 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A87             >
 122+ 6A87             >
 122+ 6A87             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A87             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A87             >
 122+ 6A87             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A87 02 00       >                dw      2
 123+ 6A89                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A89             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A89             >
 123+ 6A89             >Dict_Ptr        defl    $
 123+ 6A89             >
 123+ 6A89             >//              ______________________________________________________________________
 123+ 6A89             >//              Heap part
 123+ 6A89             >
 123+ 6A89             >
 123+ 6A89             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E414             >
 123+ E414             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E414             >Latest_Definition defl  Heap_Ptr
 123+ E414             >
 123+ E414             >                // dummy db directives used to calculate length of namec
 123+ E414 33          >                db      "3"
 123+ E415             >len_NFA         defl    $ - temp_NFA
 123+ E415             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E414             >
 123+ E414 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E415 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E416             >                org     $-1                 // alter last byte of Name just above to set
 123+ E415 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E416             >
 123+ E416 0E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E418             >Prev_Ptr        defl    Heap_Ptr
 123+ E418             >
 123+ E418             >mirror_Ptr      defl    $
 123+ E418             >
 123+ E418 8B 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E41A             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E41A             >
 123+ E41A             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E41A             >
 123+ E41A             >//              ______________________________________________________________________
 123+ E41A             >//              Dictionary part
 123+ E41A             >
 123+ E41A             >                org     Dict_Ptr
 123+ 6A89             >
 123+ 6A89 18 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A8B             >
 123+ 6A8B             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A8B CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A8E             >
 123+ 6A8E             >
 123+ 6A8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A8E             >
 123+ 6A8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A8E 03 00       >                dw      3
 124+ 6A90                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A90             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A90             >
 124+ 6A90             >Dict_Ptr        defl    $
 124+ 6A90             >
 124+ 6A90             >//              ______________________________________________________________________
 124+ 6A90             >//              Heap part
 124+ 6A90             >
 124+ 6A90             >
 124+ 6A90             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E41A             >
 124+ E41A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E41A             >Latest_Definition defl  Heap_Ptr
 124+ E41A             >
 124+ E41A             >                // dummy db directives used to calculate length of namec
 124+ E41A 2D 31       >                db      "-1"
 124+ E41C             >len_NFA         defl    $ - temp_NFA
 124+ E41C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E41A             >
 124+ E41A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E41B 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41D             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41C B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41D             >
 124+ E41D 14 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41F             >Prev_Ptr        defl    Heap_Ptr
 124+ E41F             >
 124+ E41F             >mirror_Ptr      defl    $
 124+ E41F             >
 124+ E41F 92 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E421             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E421             >
 124+ E421             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E421             >
 124+ E421             >//              ______________________________________________________________________
 124+ E421             >//              Dictionary part
 124+ E421             >
 124+ E421             >                org     Dict_Ptr
 124+ 6A90             >
 124+ 6A90 1F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6A92             >
 124+ 6A92             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A92 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6A95             >
 124+ 6A95             >
 124+ 6A95             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6A95             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6A95             >
 124+ 6A95             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6A95 FF FF       >                dw      -1
 125+ 6A97                              Constant_Def BL         ,   "BL"    , $20
 125+ 6A97             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6A97             >
 125+ 6A97             >Dict_Ptr        defl    $
 125+ 6A97             >
 125+ 6A97             >//              ______________________________________________________________________
 125+ 6A97             >//              Heap part
 125+ 6A97             >
 125+ 6A97             >
 125+ 6A97             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E421             >
 125+ E421             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E421             >Latest_Definition defl  Heap_Ptr
 125+ E421             >
 125+ E421             >                // dummy db directives used to calculate length of namec
 125+ E421 42 4C       >                db      "BL"
 125+ E423             >len_NFA         defl    $ - temp_NFA
 125+ E423             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E421             >
 125+ E421 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E422 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E424             >                org     $-1                 // alter last byte of Name just above to set
 125+ E423 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E424             >
 125+ E424 1A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E426             >Prev_Ptr        defl    Heap_Ptr
 125+ E426             >
 125+ E426             >mirror_Ptr      defl    $
 125+ E426             >
 125+ E426 99 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E428             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E428             >
 125+ E428             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E428             >
 125+ E428             >//              ______________________________________________________________________
 125+ E428             >//              Dictionary part
 125+ E428             >
 125+ E428             >                org     Dict_Ptr
 125+ 6A97             >
 125+ 6A97 26 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6A99             >
 125+ 6A99             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6A99 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6A9C             >
 125+ 6A9C             >
 125+ 6A9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6A9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6A9C             >
 125+ 6A9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6A9C 20 00       >                dw      $20
 126+ 6A9E                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6A9E             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6A9E             >
 126+ 6A9E             >Dict_Ptr        defl    $
 126+ 6A9E             >
 126+ 6A9E             >//              ______________________________________________________________________
 126+ 6A9E             >//              Heap part
 126+ 6A9E             >
 126+ 6A9E             >
 126+ 6A9E             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E428             >
 126+ E428             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E428             >Latest_Definition defl  Heap_Ptr
 126+ E428             >
 126+ E428             >                // dummy db directives used to calculate length of namec
 126+ E428 43 2F 4C    >                db      "C/L"
 126+ E42B             >len_NFA         defl    $ - temp_NFA
 126+ E42B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E428             >
 126+ E428 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E429 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42C             >                org     $-1                 // alter last byte of Name just above to set
 126+ E42B CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42C             >
 126+ E42C 21 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42E             >Prev_Ptr        defl    Heap_Ptr
 126+ E42E             >
 126+ E42E             >mirror_Ptr      defl    $
 126+ E42E             >
 126+ E42E A0 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E430             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E430             >
 126+ E430             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E430             >
 126+ E430             >//              ______________________________________________________________________
 126+ E430             >//              Dictionary part
 126+ E430             >
 126+ E430             >                org     Dict_Ptr
 126+ 6A9E             >
 126+ 6A9E 2E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AA0             >
 126+ 6AA0             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AA0 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AA3             >
 126+ 6AA3             >
 126+ 6AA3             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AA3             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AA3             >
 126+ 6AA3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AA3 40 00       >                dw      64
 127+ 6AA5                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AA5             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AA5             >
 127+ 6AA5             >Dict_Ptr        defl    $
 127+ 6AA5             >
 127+ 6AA5             >//              ______________________________________________________________________
 127+ 6AA5             >//              Heap part
 127+ 6AA5             >
 127+ 6AA5             >
 127+ 6AA5             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E430             >
 127+ E430             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E430             >Latest_Definition defl  Heap_Ptr
 127+ E430             >
 127+ E430             >                // dummy db directives used to calculate length of namec
 127+ E430 42 2F 42 55 >                db      "B/BUF"
 127+ E434 46          >
 127+ E435             >len_NFA         defl    $ - temp_NFA
 127+ E435             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E430             >
 127+ E430 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E431 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E435 46          >
 127+ E436             >                org     $-1                 // alter last byte of Name just above to set
 127+ E435 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E436             >
 127+ E436 28 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E438             >Prev_Ptr        defl    Heap_Ptr
 127+ E438             >
 127+ E438             >mirror_Ptr      defl    $
 127+ E438             >
 127+ E438 A7 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E43A             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E43A             >
 127+ E43A             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E43A             >
 127+ E43A             >//              ______________________________________________________________________
 127+ E43A             >//              Dictionary part
 127+ E43A             >
 127+ E43A             >                org     Dict_Ptr
 127+ 6AA5             >
 127+ 6AA5 38 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AA7             >
 127+ 6AA7             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AA7 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AAA             >
 127+ 6AAA             >
 127+ 6AAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AAA             >
 127+ 6AAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AAA 00 02       >                dw      512
 128+ 6AAC                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AAC             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AAC             >
 128+ 6AAC             >Dict_Ptr        defl    $
 128+ 6AAC             >
 128+ 6AAC             >//              ______________________________________________________________________
 128+ 6AAC             >//              Heap part
 128+ 6AAC             >
 128+ 6AAC             >
 128+ 6AAC             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E43A             >
 128+ E43A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E43A             >Latest_Definition defl  Heap_Ptr
 128+ E43A             >
 128+ E43A             >                // dummy db directives used to calculate length of namec
 128+ E43A 42 2F 53 43 >                db      "B/SCR"
 128+ E43E 52          >
 128+ E43F             >len_NFA         defl    $ - temp_NFA
 128+ E43F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E43A             >
 128+ E43A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E43B 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43F 52          >
 128+ E440             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43F D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E440             >
 128+ E440 30 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E442             >Prev_Ptr        defl    Heap_Ptr
 128+ E442             >
 128+ E442             >mirror_Ptr      defl    $
 128+ E442             >
 128+ E442 AE 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E444             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E444             >
 128+ E444             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E444             >
 128+ E444             >//              ______________________________________________________________________
 128+ E444             >//              Dictionary part
 128+ E444             >
 128+ E444             >                org     Dict_Ptr
 128+ 6AAC             >
 128+ 6AAC 42 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6AAE             >
 128+ 6AAE             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AAE CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6AB1             >
 128+ 6AB1             >
 128+ 6AB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6AB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6AB1             >
 128+ 6AB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6AB1 02 00       >                dw      2
 129+ 6AB3                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6AB3             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6AB3             >
 129+ 6AB3             >Dict_Ptr        defl    $
 129+ 6AB3             >
 129+ 6AB3             >//              ______________________________________________________________________
 129+ 6AB3             >//              Heap part
 129+ 6AB3             >
 129+ 6AB3             >
 129+ 6AB3             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E444             >
 129+ E444             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E444             >Latest_Definition defl  Heap_Ptr
 129+ E444             >
 129+ E444             >                // dummy db directives used to calculate length of namec
 129+ E444 4C 2F 53 43 >                db      "L/SCR"
 129+ E448 52          >
 129+ E449             >len_NFA         defl    $ - temp_NFA
 129+ E449             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E444             >
 129+ E444 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E445 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E449 52          >
 129+ E44A             >                org     $-1                 // alter last byte of Name just above to set
 129+ E449 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E44A             >
 129+ E44A 3A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44C             >Prev_Ptr        defl    Heap_Ptr
 129+ E44C             >
 129+ E44C             >mirror_Ptr      defl    $
 129+ E44C             >
 129+ E44C B5 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44E             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44E             >
 129+ E44E             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44E             >
 129+ E44E             >//              ______________________________________________________________________
 129+ E44E             >//              Dictionary part
 129+ E44E             >
 129+ E44E             >                org     Dict_Ptr
 129+ 6AB3             >
 129+ 6AB3 4C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AB5             >
 129+ 6AB5             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AB5 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6AB8             >
 129+ 6AB8             >
 129+ 6AB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6AB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6AB8             >
 129+ 6AB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6AB8 10 00       >                dw      16
 130+ 6ABA
 131+ 6ABA              //  ______________________________________________________________________
 132+ 6ABA              //
 133+ 6ABA              // +origin         --
 134+ 6ABA              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6ABA              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6ABA              //              dw      PLUS                    // +
 137+ 6ABA              //              dw      EXIT                    // ;
 138+ 6ABA                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6ABA             >
 138+ 6ABA             >Dict_Ptr        defl    $
 138+ 6ABA             >
 138+ 6ABA             >//              ______________________________________________________________________
 138+ 6ABA             >//              Heap part
 138+ 6ABA             >
 138+ 6ABA             >
 138+ 6ABA             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44E             >
 138+ E44E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44E             >Latest_Definition defl  Heap_Ptr
 138+ E44E             >
 138+ E44E             >                // dummy db directives used to calculate length of namec
 138+ E44E 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E452 47 49 4E    >
 138+ E455             >len_NFA         defl    $ - temp_NFA
 138+ E455             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44E             >
 138+ E44E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44F 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E453 47 49 4E    >
 138+ E456             >                org     $-1                 // alter last byte of Name just above to set
 138+ E455 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E456             >
 138+ E456 44 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E458             >Prev_Ptr        defl    Heap_Ptr
 138+ E458             >
 138+ E458             >mirror_Ptr      defl    $
 138+ E458             >
 138+ E458 BC 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E45A             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E45A             >
 138+ E45A             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E45A             >
 138+ E45A             >//              ______________________________________________________________________
 138+ E45A             >//              Dictionary part
 138+ E45A             >
 138+ E45A             >                org     Dict_Ptr
 138+ 6ABA             >
 138+ 6ABA 58 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6ABC             >
 138+ 6ABC             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6ABC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6ABC ~           >
 138+ 6ABC ~           >
 138+ 6ABC             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6ABC             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6ABC             >
 138+ 6ABC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6ABC D9                           exx
 140+ 6ABD E1                           pop     hl
 141+ 6ABE 11 66 63                     ld      de, Cold_origin
 142+ 6AC1 19                           add     hl, de
 143+ 6AC2 E5                           push    hl
 144+ 6AC3 D9                           exx
 145+ 6AC4                              next
 145+ 6AC4 DD E9       >                jp      (ix)
 146+ 6AC6
 147+ 6AC6
 148+ 6AC6              //  ______________________________________________________________________
 149+ 6AC6              //
 150+ 6AC6                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AC6             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AC6             >
 150+ 6AC6             >Dict_Ptr        defl    $
 150+ 6AC6             >
 150+ 6AC6             >//              ______________________________________________________________________
 150+ 6AC6             >//              Heap part
 150+ 6AC6             >
 150+ 6AC6             >
 150+ 6AC6             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E45A             >
 150+ E45A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E45A             >Latest_Definition defl  Heap_Ptr
 150+ E45A             >
 150+ E45A             >                // dummy db directives used to calculate length of namec
 150+ E45A 28 4E 45 58 >                db      "(NEXT)"
 150+ E45E 54 29       >
 150+ E460             >len_NFA         defl    $ - temp_NFA
 150+ E460             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E45A             >
 150+ E45A 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E45B 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45F 54 29       >
 150+ E461             >                org     $-1                 // alter last byte of Name just above to set
 150+ E460 A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E461             >
 150+ E461 4E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E463             >Prev_Ptr        defl    Heap_Ptr
 150+ E463             >
 150+ E463             >mirror_Ptr      defl    $
 150+ E463             >
 150+ E463 C8 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E465             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E465             >
 150+ E465             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E465             >
 150+ E465             >//              ______________________________________________________________________
 150+ E465             >//              Dictionary part
 150+ E465             >
 150+ E465             >                org     Dict_Ptr
 150+ 6AC6             >
 150+ 6AC6 63 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6AC8             >
 150+ 6AC8             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6AC8 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6ACB             >
 150+ 6ACB             >
 150+ 6ACB             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6ACB             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6ACB             >
 150+ 6ACB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6ACB 9A 63       >                dw      Next_Ptr
 151+ 6ACD
 152+ 6ACD              //  ______________________________________________________________________
 153+ 6ACD              //
 154+ 6ACD
 155+ 6ACD                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6ACD             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6ACD             >
 155+ 6ACD             >Dict_Ptr        defl    $
 155+ 6ACD             >
 155+ 6ACD             >//              ______________________________________________________________________
 155+ 6ACD             >//              Heap part
 155+ 6ACD             >
 155+ 6ACD             >
 155+ 6ACD             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E465             >
 155+ E465             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E465             >Latest_Definition defl  Heap_Ptr
 155+ E465             >
 155+ E465             >                // dummy db directives used to calculate length of namec
 155+ E465 53 30       >                db      "S0"
 155+ E467             >len_NFA         defl    $ - temp_NFA
 155+ E467             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E465             >
 155+ E465 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E466 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E468             >                org     $-1                 // alter last byte of Name just above to set
 155+ E467 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E468             >
 155+ E468 5A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E46A             >Prev_Ptr        defl    Heap_Ptr
 155+ E46A             >
 155+ E46A             >mirror_Ptr      defl    $
 155+ E46A             >
 155+ E46A CF 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46C             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46C             >
 155+ E46C             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46C             >
 155+ E46C             >//              ______________________________________________________________________
 155+ E46C             >//              Dictionary part
 155+ E46C             >
 155+ E46C             >                org     Dict_Ptr
 155+ 6ACD             >
 155+ 6ACD 6A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6ACF             >
 155+ 6ACF             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6ACF CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AD2             >
 155+ 6AD2             >
 155+ 6AD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AD2             >
 155+ 6AD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AD2 06          >                db      06
 156+ 6AD3                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AD3             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AD3             >
 156+ 6AD3             >Dict_Ptr        defl    $
 156+ 6AD3             >
 156+ 6AD3             >//              ______________________________________________________________________
 156+ 6AD3             >//              Heap part
 156+ 6AD3             >
 156+ 6AD3             >
 156+ 6AD3             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46C             >
 156+ E46C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46C             >Latest_Definition defl  Heap_Ptr
 156+ E46C             >
 156+ E46C             >                // dummy db directives used to calculate length of namec
 156+ E46C 52 30       >                db      "R0"
 156+ E46E             >len_NFA         defl    $ - temp_NFA
 156+ E46E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46C             >
 156+ E46C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46D 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46F             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46E B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46F             >
 156+ E46F 65 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E471             >Prev_Ptr        defl    Heap_Ptr
 156+ E471             >
 156+ E471             >mirror_Ptr      defl    $
 156+ E471             >
 156+ E471 D5 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E473             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E473             >
 156+ E473             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E473             >
 156+ E473             >//              ______________________________________________________________________
 156+ E473             >//              Dictionary part
 156+ E473             >
 156+ E473             >                org     Dict_Ptr
 156+ 6AD3             >
 156+ 6AD3 71 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AD5             >
 156+ 6AD5             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AD5 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6AD8             >
 156+ 6AD8             >
 156+ 6AD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6AD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6AD8             >
 156+ 6AD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6AD8 08          >                db      08
 157+ 6AD9                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6AD9             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6AD9             >
 157+ 6AD9             >Dict_Ptr        defl    $
 157+ 6AD9             >
 157+ 6AD9             >//              ______________________________________________________________________
 157+ 6AD9             >//              Heap part
 157+ 6AD9             >
 157+ 6AD9             >
 157+ 6AD9             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E473             >
 157+ E473             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E473             >Latest_Definition defl  Heap_Ptr
 157+ E473             >
 157+ E473             >                // dummy db directives used to calculate length of namec
 157+ E473 54 49 42    >                db      "TIB"
 157+ E476             >len_NFA         defl    $ - temp_NFA
 157+ E476             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E473             >
 157+ E473 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E474 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E477             >                org     $-1                 // alter last byte of Name just above to set
 157+ E476 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E477             >
 157+ E477 6C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E479             >Prev_Ptr        defl    Heap_Ptr
 157+ E479             >
 157+ E479             >mirror_Ptr      defl    $
 157+ E479             >
 157+ E479 DB 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E47B             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E47B             >
 157+ E47B             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E47B             >
 157+ E47B             >//              ______________________________________________________________________
 157+ E47B             >//              Dictionary part
 157+ E47B             >
 157+ E47B             >                org     Dict_Ptr
 157+ 6AD9             >
 157+ 6AD9 79 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6ADB             >
 157+ 6ADB             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6ADB CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6ADE             >
 157+ 6ADE             >
 157+ 6ADE             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6ADE             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6ADE             >
 157+ 6ADE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6ADE 0A          >                db      10
 158+ 6ADF                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6ADF             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6ADF             >
 158+ 6ADF             >Dict_Ptr        defl    $
 158+ 6ADF             >
 158+ 6ADF             >//              ______________________________________________________________________
 158+ 6ADF             >//              Heap part
 158+ 6ADF             >
 158+ 6ADF             >
 158+ 6ADF             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E47B             >
 158+ E47B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E47B             >Latest_Definition defl  Heap_Ptr
 158+ E47B             >
 158+ E47B             >                // dummy db directives used to calculate length of namec
 158+ E47B 57 49 44 54 >                db      "WIDTH"
 158+ E47F 48          >
 158+ E480             >len_NFA         defl    $ - temp_NFA
 158+ E480             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E47B             >
 158+ E47B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47C 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E480 48          >
 158+ E481             >                org     $-1                 // alter last byte of Name just above to set
 158+ E480 C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E481             >
 158+ E481 73 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E483             >Prev_Ptr        defl    Heap_Ptr
 158+ E483             >
 158+ E483             >mirror_Ptr      defl    $
 158+ E483             >
 158+ E483 E1 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E485             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E485             >
 158+ E485             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E485             >
 158+ E485             >//              ______________________________________________________________________
 158+ E485             >//              Dictionary part
 158+ E485             >
 158+ E485             >                org     Dict_Ptr
 158+ 6ADF             >
 158+ 6ADF 83 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AE1             >
 158+ 6AE1             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AE1 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AE4             >
 158+ 6AE4             >
 158+ 6AE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AE4             >
 158+ 6AE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AE4 0C          >                db      12
 159+ 6AE5                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AE5             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AE5             >
 159+ 6AE5             >Dict_Ptr        defl    $
 159+ 6AE5             >
 159+ 6AE5             >//              ______________________________________________________________________
 159+ 6AE5             >//              Heap part
 159+ 6AE5             >
 159+ 6AE5             >
 159+ 6AE5             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E485             >
 159+ E485             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E485             >Latest_Definition defl  Heap_Ptr
 159+ E485             >
 159+ E485             >                // dummy db directives used to calculate length of namec
 159+ E485 57 41 52 4E >                db      "WARNING"
 159+ E489 49 4E 47    >
 159+ E48C             >len_NFA         defl    $ - temp_NFA
 159+ E48C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E485             >
 159+ E485 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E486 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E48A 49 4E 47    >
 159+ E48D             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48C C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48D             >
 159+ E48D 7B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48F             >Prev_Ptr        defl    Heap_Ptr
 159+ E48F             >
 159+ E48F             >mirror_Ptr      defl    $
 159+ E48F             >
 159+ E48F E7 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E491             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E491             >
 159+ E491             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E491             >
 159+ E491             >//              ______________________________________________________________________
 159+ E491             >//              Dictionary part
 159+ E491             >
 159+ E491             >                org     Dict_Ptr
 159+ 6AE5             >
 159+ 6AE5 8F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AE7             >
 159+ 6AE7             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AE7 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AEA             >
 159+ 6AEA             >
 159+ 6AEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AEA             >
 159+ 6AEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AEA 0E          >                db      14
 160+ 6AEB                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AEB             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AEB             >
 160+ 6AEB             >Dict_Ptr        defl    $
 160+ 6AEB             >
 160+ 6AEB             >//              ______________________________________________________________________
 160+ 6AEB             >//              Heap part
 160+ 6AEB             >
 160+ 6AEB             >
 160+ 6AEB             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E491             >
 160+ E491             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E491             >Latest_Definition defl  Heap_Ptr
 160+ E491             >
 160+ E491             >                // dummy db directives used to calculate length of namec
 160+ E491 46 45 4E 43 >                db      "FENCE"
 160+ E495 45          >
 160+ E496             >len_NFA         defl    $ - temp_NFA
 160+ E496             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E491             >
 160+ E491 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E492 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E496 45          >
 160+ E497             >                org     $-1                 // alter last byte of Name just above to set
 160+ E496 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E497             >
 160+ E497 85 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E499             >Prev_Ptr        defl    Heap_Ptr
 160+ E499             >
 160+ E499             >mirror_Ptr      defl    $
 160+ E499             >
 160+ E499 ED 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E49B             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E49B             >
 160+ E49B             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E49B             >
 160+ E49B             >//              ______________________________________________________________________
 160+ E49B             >//              Dictionary part
 160+ E49B             >
 160+ E49B             >                org     Dict_Ptr
 160+ 6AEB             >
 160+ 6AEB 99 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6AED             >
 160+ 6AED             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AED CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AF0             >
 160+ 6AF0             >
 160+ 6AF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AF0             >
 160+ 6AF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AF0 10          >                db      16
 161+ 6AF1                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6AF1             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6AF1             >
 161+ 6AF1             >Dict_Ptr        defl    $
 161+ 6AF1             >
 161+ 6AF1             >//              ______________________________________________________________________
 161+ 6AF1             >//              Heap part
 161+ 6AF1             >
 161+ 6AF1             >
 161+ 6AF1             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E49B             >
 161+ E49B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E49B             >Latest_Definition defl  Heap_Ptr
 161+ E49B             >
 161+ E49B             >                // dummy db directives used to calculate length of namec
 161+ E49B 44 50       >                db      "DP"
 161+ E49D             >len_NFA         defl    $ - temp_NFA
 161+ E49D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E49B             >
 161+ E49B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49C 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49E             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49D D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49E             >
 161+ E49E 91 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E4A0             >Prev_Ptr        defl    Heap_Ptr
 161+ E4A0             >
 161+ E4A0             >mirror_Ptr      defl    $
 161+ E4A0             >
 161+ E4A0 F3 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E4A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A2             >
 161+ E4A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A2             >
 161+ E4A2             >//              ______________________________________________________________________
 161+ E4A2             >//              Dictionary part
 161+ E4A2             >
 161+ E4A2             >                org     Dict_Ptr
 161+ 6AF1             >
 161+ 6AF1 A0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6AF3             >
 161+ 6AF3             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AF3 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6AF6             >
 161+ 6AF6             >
 161+ 6AF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6AF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6AF6             >
 161+ 6AF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6AF6 12          >                db      18
 162+ 6AF7                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6AF7             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6AF7             >
 162+ 6AF7             >Dict_Ptr        defl    $
 162+ 6AF7             >
 162+ 6AF7             >//              ______________________________________________________________________
 162+ 6AF7             >//              Heap part
 162+ 6AF7             >
 162+ 6AF7             >
 162+ 6AF7             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A2             >
 162+ E4A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A2             >Latest_Definition defl  Heap_Ptr
 162+ E4A2             >
 162+ E4A2             >                // dummy db directives used to calculate length of namec
 162+ E4A2 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A6 4C 49 4E 4B >
 162+ E4AA             >len_NFA         defl    $ - temp_NFA
 162+ E4AA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A2             >
 162+ E4A2 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A3 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A7 4C 49 4E 4B >
 162+ E4AB             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4AA CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4AB             >
 162+ E4AB 9B 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AD             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AD             >
 162+ E4AD             >mirror_Ptr      defl    $
 162+ E4AD             >
 162+ E4AD F9 6A       >                dw      Dict_Ptr + 2        // xt
 162+ E4AF             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AF             >
 162+ E4AF             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AF             >
 162+ E4AF             >//              ______________________________________________________________________
 162+ E4AF             >//              Dictionary part
 162+ E4AF             >
 162+ E4AF             >                org     Dict_Ptr
 162+ 6AF7             >
 162+ 6AF7 AD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6AF9             >
 162+ 6AF9             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6AF9 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6AFC             >
 162+ 6AFC             >
 162+ 6AFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6AFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6AFC             >
 162+ 6AFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6AFC 14          >                db      20
 163+ 6AFD                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6AFD             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6AFD             >
 163+ 6AFD             >Dict_Ptr        defl    $
 163+ 6AFD             >
 163+ 6AFD             >//              ______________________________________________________________________
 163+ 6AFD             >//              Heap part
 163+ 6AFD             >
 163+ 6AFD             >
 163+ 6AFD             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AF             >
 163+ E4AF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AF             >Latest_Definition defl  Heap_Ptr
 163+ E4AF             >
 163+ E4AF             >                // dummy db directives used to calculate length of namec
 163+ E4AF 46 49 52 53 >                db      "FIRST"
 163+ E4B3 54          >
 163+ E4B4             >len_NFA         defl    $ - temp_NFA
 163+ E4B4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AF             >
 163+ E4AF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4B0 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B4 54          >
 163+ E4B5             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B4 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B5             >
 163+ E4B5 A2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B7             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B7             >
 163+ E4B7             >mirror_Ptr      defl    $
 163+ E4B7             >
 163+ E4B7 FF 6A       >                dw      Dict_Ptr + 2        // xt
 163+ E4B9             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B9             >
 163+ E4B9             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B9             >
 163+ E4B9             >//              ______________________________________________________________________
 163+ E4B9             >//              Dictionary part
 163+ E4B9             >
 163+ E4B9             >                org     Dict_Ptr
 163+ 6AFD             >
 163+ 6AFD B7 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6AFF             >
 163+ 6AFF             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6AFF CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B02             >
 163+ 6B02             >
 163+ 6B02             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B02             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B02             >
 163+ 6B02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B02 16          >                db      22
 164+ 6B03                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B03             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B03             >
 164+ 6B03             >Dict_Ptr        defl    $
 164+ 6B03             >
 164+ 6B03             >//              ______________________________________________________________________
 164+ 6B03             >//              Heap part
 164+ 6B03             >
 164+ 6B03             >
 164+ 6B03             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B9             >
 164+ E4B9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B9             >Latest_Definition defl  Heap_Ptr
 164+ E4B9             >
 164+ E4B9             >                // dummy db directives used to calculate length of namec
 164+ E4B9 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BD 54          >
 164+ E4BE             >len_NFA         defl    $ - temp_NFA
 164+ E4BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B9             >
 164+ E4B9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4BA 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BE 54          >
 164+ E4BF             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BE D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BF             >
 164+ E4BF AF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4C1             >Prev_Ptr        defl    Heap_Ptr
 164+ E4C1             >
 164+ E4C1             >mirror_Ptr      defl    $
 164+ E4C1             >
 164+ E4C1 05 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C3             >
 164+ E4C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C3             >
 164+ E4C3             >//              ______________________________________________________________________
 164+ E4C3             >//              Dictionary part
 164+ E4C3             >
 164+ E4C3             >                org     Dict_Ptr
 164+ 6B03             >
 164+ 6B03 C1 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B05             >
 164+ 6B05             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B05 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B08             >
 164+ 6B08             >
 164+ 6B08             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B08             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B08             >
 164+ 6B08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B08 18          >                db      24
 165+ 6B09                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B09             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B09             >
 165+ 6B09             >Dict_Ptr        defl    $
 165+ 6B09             >
 165+ 6B09             >//              ______________________________________________________________________
 165+ 6B09             >//              Heap part
 165+ 6B09             >
 165+ 6B09             >
 165+ 6B09             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C3             >
 165+ E4C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C3             >Latest_Definition defl  Heap_Ptr
 165+ E4C3             >
 165+ E4C3             >                // dummy db directives used to calculate length of namec
 165+ E4C3 48 50       >                db      "HP"
 165+ E4C5             >len_NFA         defl    $ - temp_NFA
 165+ E4C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C3             >
 165+ E4C3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C4 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C6             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C5 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C6             >
 165+ E4C6 B9 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C8             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C8             >
 165+ E4C8             >mirror_Ptr      defl    $
 165+ E4C8             >
 165+ E4C8 0B 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4CA             >
 165+ E4CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4CA             >
 165+ E4CA             >//              ______________________________________________________________________
 165+ E4CA             >//              Dictionary part
 165+ E4CA             >
 165+ E4CA             >                org     Dict_Ptr
 165+ 6B09             >
 165+ 6B09 C8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B0B             >
 165+ 6B0B             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B0B CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B0E             >
 165+ 6B0E             >
 165+ 6B0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B0E             >
 165+ 6B0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B0E 1A          >                db      26
 166+ 6B0F                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B0F             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B0F             >
 166+ 6B0F             >Dict_Ptr        defl    $
 166+ 6B0F             >
 166+ 6B0F             >//              ______________________________________________________________________
 166+ 6B0F             >//              Heap part
 166+ 6B0F             >
 166+ 6B0F             >
 166+ 6B0F             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4CA             >
 166+ E4CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4CA             >Latest_Definition defl  Heap_Ptr
 166+ E4CA             >
 166+ E4CA             >                // dummy db directives used to calculate length of namec
 166+ E4CA 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CE 45          >
 166+ E4CF             >len_NFA         defl    $ - temp_NFA
 166+ E4CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4CA             >
 166+ E4CA 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4CB 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CF 45          >
 166+ E4D0             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CF C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4D0             >
 166+ E4D0 C3 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D2             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D2             >
 166+ E4D2             >mirror_Ptr      defl    $
 166+ E4D2             >
 166+ E4D2 11 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D4             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D4             >
 166+ E4D4             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D4             >
 166+ E4D4             >//              ______________________________________________________________________
 166+ E4D4             >//              Dictionary part
 166+ E4D4             >
 166+ E4D4             >                org     Dict_Ptr
 166+ 6B0F             >
 166+ 6B0F D2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B11             >
 166+ 6B11             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B11 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B14             >
 166+ 6B14             >
 166+ 6B14             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B14             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B14             >
 166+ 6B14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B14 1C          >                db      28
 167+ 6B15                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B15             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B15             >
 167+ 6B15             >Dict_Ptr        defl    $
 167+ 6B15             >
 167+ 6B15             >//              ______________________________________________________________________
 167+ 6B15             >//              Heap part
 167+ 6B15             >
 167+ 6B15             >
 167+ 6B15             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D4             >
 167+ E4D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D4             >Latest_Definition defl  Heap_Ptr
 167+ E4D4             >
 167+ E4D4             >                // dummy db directives used to calculate length of namec
 167+ E4D4 42 4C 4B    >                db      "BLK"
 167+ E4D7             >len_NFA         defl    $ - temp_NFA
 167+ E4D7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D4             >
 167+ E4D4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D5 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D8             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D7 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D8             >
 167+ E4D8 CA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4DA             >Prev_Ptr        defl    Heap_Ptr
 167+ E4DA             >
 167+ E4DA             >mirror_Ptr      defl    $
 167+ E4DA             >
 167+ E4DA 17 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DC             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DC             >
 167+ E4DC             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DC             >
 167+ E4DC             >//              ______________________________________________________________________
 167+ E4DC             >//              Dictionary part
 167+ E4DC             >
 167+ E4DC             >                org     Dict_Ptr
 167+ 6B15             >
 167+ 6B15 DA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B17             >
 167+ 6B17             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B17 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B1A             >
 167+ 6B1A             >
 167+ 6B1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B1A             >
 167+ 6B1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B1A 1E          >                db      30
 168+ 6B1B                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B1B             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B1B             >
 168+ 6B1B             >Dict_Ptr        defl    $
 168+ 6B1B             >
 168+ 6B1B             >//              ______________________________________________________________________
 168+ 6B1B             >//              Heap part
 168+ 6B1B             >
 168+ 6B1B             >
 168+ 6B1B             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DC             >
 168+ E4DC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DC             >Latest_Definition defl  Heap_Ptr
 168+ E4DC             >
 168+ E4DC             >                // dummy db directives used to calculate length of namec
 168+ E4DC 3E 49 4E    >                db      ">IN"
 168+ E4DF             >len_NFA         defl    $ - temp_NFA
 168+ E4DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DC             >
 168+ E4DC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DD 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4E0             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DF CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4E0             >
 168+ E4E0 D4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E2             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E2             >
 168+ E4E2             >mirror_Ptr      defl    $
 168+ E4E2             >
 168+ E4E2 1D 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E4             >
 168+ E4E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E4             >
 168+ E4E4             >//              ______________________________________________________________________
 168+ E4E4             >//              Dictionary part
 168+ E4E4             >
 168+ E4E4             >                org     Dict_Ptr
 168+ 6B1B             >
 168+ 6B1B E2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B1D             >
 168+ 6B1D             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B1D CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B20             >
 168+ 6B20             >
 168+ 6B20             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B20             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B20             >
 168+ 6B20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B20 20          >                db      32
 169+ 6B21                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B21             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B21             >
 169+ 6B21             >Dict_Ptr        defl    $
 169+ 6B21             >
 169+ 6B21             >//              ______________________________________________________________________
 169+ 6B21             >//              Heap part
 169+ 6B21             >
 169+ 6B21             >
 169+ 6B21             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E4             >
 169+ E4E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E4             >Latest_Definition defl  Heap_Ptr
 169+ E4E4             >
 169+ E4E4             >                // dummy db directives used to calculate length of namec
 169+ E4E4 4F 55 54    >                db      "OUT"
 169+ E4E7             >len_NFA         defl    $ - temp_NFA
 169+ E4E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E4             >
 169+ E4E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E5 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E8             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E7 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E8             >
 169+ E4E8 DC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4EA             >Prev_Ptr        defl    Heap_Ptr
 169+ E4EA             >
 169+ E4EA             >mirror_Ptr      defl    $
 169+ E4EA             >
 169+ E4EA 23 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EC             >
 169+ E4EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EC             >
 169+ E4EC             >//              ______________________________________________________________________
 169+ E4EC             >//              Dictionary part
 169+ E4EC             >
 169+ E4EC             >                org     Dict_Ptr
 169+ 6B21             >
 169+ 6B21 EA 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B23             >
 169+ 6B23             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B23 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B26             >
 169+ 6B26             >
 169+ 6B26             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B26             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B26             >
 169+ 6B26             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B26 22          >                db      34
 170+ 6B27                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B27             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B27             >
 170+ 6B27             >Dict_Ptr        defl    $
 170+ 6B27             >
 170+ 6B27             >//              ______________________________________________________________________
 170+ 6B27             >//              Heap part
 170+ 6B27             >
 170+ 6B27             >
 170+ 6B27             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EC             >
 170+ E4EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EC             >Latest_Definition defl  Heap_Ptr
 170+ E4EC             >
 170+ E4EC             >                // dummy db directives used to calculate length of namec
 170+ E4EC 53 43 52    >                db      "SCR"
 170+ E4EF             >len_NFA         defl    $ - temp_NFA
 170+ E4EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EC             >
 170+ E4EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4ED 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4F0             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4EF D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4F0             >
 170+ E4F0 E4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F2             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F2             >
 170+ E4F2             >mirror_Ptr      defl    $
 170+ E4F2             >
 170+ E4F2 29 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F4             >
 170+ E4F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F4             >
 170+ E4F4             >//              ______________________________________________________________________
 170+ E4F4             >//              Dictionary part
 170+ E4F4             >
 170+ E4F4             >                org     Dict_Ptr
 170+ 6B27             >
 170+ 6B27 F2 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B29             >
 170+ 6B29             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B29 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B2C             >
 170+ 6B2C             >
 170+ 6B2C             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B2C             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B2C             >
 170+ 6B2C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B2C 24          >                db      36
 171+ 6B2D                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B2D             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B2D             >
 171+ 6B2D             >Dict_Ptr        defl    $
 171+ 6B2D             >
 171+ 6B2D             >//              ______________________________________________________________________
 171+ 6B2D             >//              Heap part
 171+ 6B2D             >
 171+ 6B2D             >
 171+ 6B2D             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F4             >
 171+ E4F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F4             >Latest_Definition defl  Heap_Ptr
 171+ E4F4             >
 171+ E4F4             >                // dummy db directives used to calculate length of namec
 171+ E4F4 4F 46 46 53 >                db      "OFFSET"
 171+ E4F8 45 54       >
 171+ E4FA             >len_NFA         defl    $ - temp_NFA
 171+ E4FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F4             >
 171+ E4F4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F5 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F9 45 54       >
 171+ E4FB             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4FA D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4FB             >
 171+ E4FB EC 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FD             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FD             >
 171+ E4FD             >mirror_Ptr      defl    $
 171+ E4FD             >
 171+ E4FD 2F 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FF             >
 171+ E4FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FF             >
 171+ E4FF             >//              ______________________________________________________________________
 171+ E4FF             >//              Dictionary part
 171+ E4FF             >
 171+ E4FF             >                org     Dict_Ptr
 171+ 6B2D             >
 171+ 6B2D FD 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B2F             >
 171+ 6B2F             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B2F CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B32             >
 171+ 6B32             >
 171+ 6B32             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B32             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B32             >
 171+ 6B32             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B32 26          >                db      38
 172+ 6B33                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B33             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B33             >
 172+ 6B33             >Dict_Ptr        defl    $
 172+ 6B33             >
 172+ 6B33             >//              ______________________________________________________________________
 172+ 6B33             >//              Heap part
 172+ 6B33             >
 172+ 6B33             >
 172+ 6B33             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FF             >
 172+ E4FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FF             >Latest_Definition defl  Heap_Ptr
 172+ E4FF             >
 172+ E4FF             >                // dummy db directives used to calculate length of namec
 172+ E4FF 43 4F 4E 54 >                db      "CONTEXT"
 172+ E503 45 58 54    >
 172+ E506             >len_NFA         defl    $ - temp_NFA
 172+ E506             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FF             >
 172+ E4FF 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E500 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E504 45 58 54    >
 172+ E507             >                org     $-1                 // alter last byte of Name just above to set
 172+ E506 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E507             >
 172+ E507 F4 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E509             >Prev_Ptr        defl    Heap_Ptr
 172+ E509             >
 172+ E509             >mirror_Ptr      defl    $
 172+ E509             >
 172+ E509 35 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E50B             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E50B             >
 172+ E50B             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E50B             >
 172+ E50B             >//              ______________________________________________________________________
 172+ E50B             >//              Dictionary part
 172+ E50B             >
 172+ E50B             >                org     Dict_Ptr
 172+ 6B33             >
 172+ 6B33 09 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B35             >
 172+ 6B35             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B35 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B38             >
 172+ 6B38             >
 172+ 6B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B38             >
 172+ 6B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B38 28          >                db      40
 173+ 6B39                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B39             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B39             >
 173+ 6B39             >Dict_Ptr        defl    $
 173+ 6B39             >
 173+ 6B39             >//              ______________________________________________________________________
 173+ 6B39             >//              Heap part
 173+ 6B39             >
 173+ 6B39             >
 173+ 6B39             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E50B             >
 173+ E50B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E50B             >Latest_Definition defl  Heap_Ptr
 173+ E50B             >
 173+ E50B             >                // dummy db directives used to calculate length of namec
 173+ E50B 43 55 52 52 >                db      "CURRENT"
 173+ E50F 45 4E 54    >
 173+ E512             >len_NFA         defl    $ - temp_NFA
 173+ E512             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E50B             >
 173+ E50B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50C 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E510 45 4E 54    >
 173+ E513             >                org     $-1                 // alter last byte of Name just above to set
 173+ E512 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E513             >
 173+ E513 FF 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E515             >Prev_Ptr        defl    Heap_Ptr
 173+ E515             >
 173+ E515             >mirror_Ptr      defl    $
 173+ E515             >
 173+ E515 3B 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E517             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E517             >
 173+ E517             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E517             >
 173+ E517             >//              ______________________________________________________________________
 173+ E517             >//              Dictionary part
 173+ E517             >
 173+ E517             >                org     Dict_Ptr
 173+ 6B39             >
 173+ 6B39 15 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B3B             >
 173+ 6B3B             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B3B CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B3E             >
 173+ 6B3E             >
 173+ 6B3E             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B3E             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B3E             >
 173+ 6B3E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B3E 2A          >                db      42
 174+ 6B3F                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B3F             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B3F             >
 174+ 6B3F             >Dict_Ptr        defl    $
 174+ 6B3F             >
 174+ 6B3F             >//              ______________________________________________________________________
 174+ 6B3F             >//              Heap part
 174+ 6B3F             >
 174+ 6B3F             >
 174+ 6B3F             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E517             >
 174+ E517             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E517             >Latest_Definition defl  Heap_Ptr
 174+ E517             >
 174+ E517             >                // dummy db directives used to calculate length of namec
 174+ E517 53 54 41 54 >                db      "STATE"
 174+ E51B 45          >
 174+ E51C             >len_NFA         defl    $ - temp_NFA
 174+ E51C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E517             >
 174+ E517 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E518 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51C 45          >
 174+ E51D             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51C C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51D             >
 174+ E51D 0B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51F             >Prev_Ptr        defl    Heap_Ptr
 174+ E51F             >
 174+ E51F             >mirror_Ptr      defl    $
 174+ E51F             >
 174+ E51F 41 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E521             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E521             >
 174+ E521             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E521             >
 174+ E521             >//              ______________________________________________________________________
 174+ E521             >//              Dictionary part
 174+ E521             >
 174+ E521             >                org     Dict_Ptr
 174+ 6B3F             >
 174+ 6B3F 1F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B41             >
 174+ 6B41             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B41 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B44             >
 174+ 6B44             >
 174+ 6B44             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B44             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B44             >
 174+ 6B44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B44 2C          >                db      44
 175+ 6B45                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B45             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B45             >
 175+ 6B45             >Dict_Ptr        defl    $
 175+ 6B45             >
 175+ 6B45             >//              ______________________________________________________________________
 175+ 6B45             >//              Heap part
 175+ 6B45             >
 175+ 6B45             >
 175+ 6B45             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E521             >
 175+ E521             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E521             >Latest_Definition defl  Heap_Ptr
 175+ E521             >
 175+ E521             >                // dummy db directives used to calculate length of namec
 175+ E521 42 41 53 45 >                db      "BASE"
 175+ E525             >len_NFA         defl    $ - temp_NFA
 175+ E525             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E521             >
 175+ E521 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E522 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E526             >                org     $-1                 // alter last byte of Name just above to set
 175+ E525 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E526             >
 175+ E526 17 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E528             >Prev_Ptr        defl    Heap_Ptr
 175+ E528             >
 175+ E528             >mirror_Ptr      defl    $
 175+ E528             >
 175+ E528 47 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E52A             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E52A             >
 175+ E52A             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E52A             >
 175+ E52A             >//              ______________________________________________________________________
 175+ E52A             >//              Dictionary part
 175+ E52A             >
 175+ E52A             >                org     Dict_Ptr
 175+ 6B45             >
 175+ 6B45 28 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B47             >
 175+ 6B47             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B47 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B4A             >
 175+ 6B4A             >
 175+ 6B4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B4A             >
 175+ 6B4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B4A 2E          >                db      46
 176+ 6B4B                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B4B             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B4B             >
 176+ 6B4B             >Dict_Ptr        defl    $
 176+ 6B4B             >
 176+ 6B4B             >//              ______________________________________________________________________
 176+ 6B4B             >//              Heap part
 176+ 6B4B             >
 176+ 6B4B             >
 176+ 6B4B             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E52A             >
 176+ E52A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E52A             >Latest_Definition defl  Heap_Ptr
 176+ E52A             >
 176+ E52A             >                // dummy db directives used to calculate length of namec
 176+ E52A 44 50 4C    >                db      "DPL"
 176+ E52D             >len_NFA         defl    $ - temp_NFA
 176+ E52D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E52A             >
 176+ E52A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E52B 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52E             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52D CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52E             >
 176+ E52E 21 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E530             >Prev_Ptr        defl    Heap_Ptr
 176+ E530             >
 176+ E530             >mirror_Ptr      defl    $
 176+ E530             >
 176+ E530 4D 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E532             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E532             >
 176+ E532             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E532             >
 176+ E532             >//              ______________________________________________________________________
 176+ E532             >//              Dictionary part
 176+ E532             >
 176+ E532             >                org     Dict_Ptr
 176+ 6B4B             >
 176+ 6B4B 30 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B4D             >
 176+ 6B4D             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B4D CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B50             >
 176+ 6B50             >
 176+ 6B50             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B50             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B50             >
 176+ 6B50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B50 30          >                db      48
 177+ 6B51                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B51             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B51             >
 177+ 6B51             >Dict_Ptr        defl    $
 177+ 6B51             >
 177+ 6B51             >//              ______________________________________________________________________
 177+ 6B51             >//              Heap part
 177+ 6B51             >
 177+ 6B51             >
 177+ 6B51             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E532             >
 177+ E532             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E532             >Latest_Definition defl  Heap_Ptr
 177+ E532             >
 177+ E532             >                // dummy db directives used to calculate length of namec
 177+ E532 46 4C 44    >                db      "FLD"
 177+ E535             >len_NFA         defl    $ - temp_NFA
 177+ E535             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E532             >
 177+ E532 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E533 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E536             >                org     $-1                 // alter last byte of Name just above to set
 177+ E535 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E536             >
 177+ E536 2A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E538             >Prev_Ptr        defl    Heap_Ptr
 177+ E538             >
 177+ E538             >mirror_Ptr      defl    $
 177+ E538             >
 177+ E538 53 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E53A             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E53A             >
 177+ E53A             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E53A             >
 177+ E53A             >//              ______________________________________________________________________
 177+ E53A             >//              Dictionary part
 177+ E53A             >
 177+ E53A             >                org     Dict_Ptr
 177+ 6B51             >
 177+ 6B51 38 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B53             >
 177+ 6B53             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B53 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B56             >
 177+ 6B56             >
 177+ 6B56             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B56             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B56             >
 177+ 6B56             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B56 32          >                db      50
 178+ 6B57                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B57             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B57             >
 178+ 6B57             >Dict_Ptr        defl    $
 178+ 6B57             >
 178+ 6B57             >//              ______________________________________________________________________
 178+ 6B57             >//              Heap part
 178+ 6B57             >
 178+ 6B57             >
 178+ 6B57             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E53A             >
 178+ E53A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E53A             >Latest_Definition defl  Heap_Ptr
 178+ E53A             >
 178+ E53A             >                // dummy db directives used to calculate length of namec
 178+ E53A 43 53 50    >                db      "CSP"
 178+ E53D             >len_NFA         defl    $ - temp_NFA
 178+ E53D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E53A             >
 178+ E53A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E53B 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53E             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53D D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53E             >
 178+ E53E 32 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E540             >Prev_Ptr        defl    Heap_Ptr
 178+ E540             >
 178+ E540             >mirror_Ptr      defl    $
 178+ E540             >
 178+ E540 59 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E542             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E542             >
 178+ E542             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E542             >
 178+ E542             >//              ______________________________________________________________________
 178+ E542             >//              Dictionary part
 178+ E542             >
 178+ E542             >                org     Dict_Ptr
 178+ 6B57             >
 178+ 6B57 40 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B59             >
 178+ 6B59             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B59 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B5C             >
 178+ 6B5C             >
 178+ 6B5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B5C             >
 178+ 6B5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B5C 34          >                db      52
 179+ 6B5D                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B5D             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B5D             >
 179+ 6B5D             >Dict_Ptr        defl    $
 179+ 6B5D             >
 179+ 6B5D             >//              ______________________________________________________________________
 179+ 6B5D             >//              Heap part
 179+ 6B5D             >
 179+ 6B5D             >
 179+ 6B5D             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E542             >
 179+ E542             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E542             >Latest_Definition defl  Heap_Ptr
 179+ E542             >
 179+ E542             >                // dummy db directives used to calculate length of namec
 179+ E542 52 23       >                db      "R#"
 179+ E544             >len_NFA         defl    $ - temp_NFA
 179+ E544             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E542             >
 179+ E542 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E543 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E545             >                org     $-1                 // alter last byte of Name just above to set
 179+ E544 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E545             >
 179+ E545 3A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E547             >Prev_Ptr        defl    Heap_Ptr
 179+ E547             >
 179+ E547             >mirror_Ptr      defl    $
 179+ E547             >
 179+ E547 5F 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E549             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E549             >
 179+ E549             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E549             >
 179+ E549             >//              ______________________________________________________________________
 179+ E549             >//              Dictionary part
 179+ E549             >
 179+ E549             >                org     Dict_Ptr
 179+ 6B5D             >
 179+ 6B5D 47 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B5F             >
 179+ 6B5F             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B5F CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B62             >
 179+ 6B62             >
 179+ 6B62             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B62             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B62             >
 179+ 6B62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B62 36          >                db      54
 180+ 6B63                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B63             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B63             >
 180+ 6B63             >Dict_Ptr        defl    $
 180+ 6B63             >
 180+ 6B63             >//              ______________________________________________________________________
 180+ 6B63             >//              Heap part
 180+ 6B63             >
 180+ 6B63             >
 180+ 6B63             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E549             >
 180+ E549             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E549             >Latest_Definition defl  Heap_Ptr
 180+ E549             >
 180+ E549             >                // dummy db directives used to calculate length of namec
 180+ E549 48 4C 44    >                db      "HLD"
 180+ E54C             >len_NFA         defl    $ - temp_NFA
 180+ E54C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E549             >
 180+ E549 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E54A 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54D             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54C C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54D             >
 180+ E54D 42 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54F             >Prev_Ptr        defl    Heap_Ptr
 180+ E54F             >
 180+ E54F             >mirror_Ptr      defl    $
 180+ E54F             >
 180+ E54F 65 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E551             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E551             >
 180+ E551             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E551             >
 180+ E551             >//              ______________________________________________________________________
 180+ E551             >//              Dictionary part
 180+ E551             >
 180+ E551             >                org     Dict_Ptr
 180+ 6B63             >
 180+ 6B63 4F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B65             >
 180+ 6B65             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B65 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B68             >
 180+ 6B68             >
 180+ 6B68             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B68             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B68             >
 180+ 6B68             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B68 38          >                db      56
 181+ 6B69                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B69             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B69             >
 181+ 6B69             >Dict_Ptr        defl    $
 181+ 6B69             >
 181+ 6B69             >//              ______________________________________________________________________
 181+ 6B69             >//              Heap part
 181+ 6B69             >
 181+ 6B69             >
 181+ 6B69             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E551             >
 181+ E551             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E551             >Latest_Definition defl  Heap_Ptr
 181+ E551             >
 181+ E551             >                // dummy db directives used to calculate length of namec
 181+ E551 55 53 45 44 >                db      "USED"
 181+ E555             >len_NFA         defl    $ - temp_NFA
 181+ E555             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E551             >
 181+ E551 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E552 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E556             >                org     $-1                 // alter last byte of Name just above to set
 181+ E555 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E556             >
 181+ E556 49 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E558             >Prev_Ptr        defl    Heap_Ptr
 181+ E558             >
 181+ E558             >mirror_Ptr      defl    $
 181+ E558             >
 181+ E558 6B 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E55A             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E55A             >
 181+ E55A             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E55A             >
 181+ E55A             >//              ______________________________________________________________________
 181+ E55A             >//              Dictionary part
 181+ E55A             >
 181+ E55A             >                org     Dict_Ptr
 181+ 6B69             >
 181+ 6B69 58 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B6B             >
 181+ 6B6B             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B6B CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B6E             >
 181+ 6B6E             >
 181+ 6B6E             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B6E             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B6E             >
 181+ 6B6E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B6E 3A          >                db      58
 182+ 6B6F                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B6F             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B6F             >
 182+ 6B6F             >Dict_Ptr        defl    $
 182+ 6B6F             >
 182+ 6B6F             >//              ______________________________________________________________________
 182+ 6B6F             >//              Heap part
 182+ 6B6F             >
 182+ 6B6F             >
 182+ 6B6F             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E55A             >
 182+ E55A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E55A             >Latest_Definition defl  Heap_Ptr
 182+ E55A             >
 182+ E55A             >                // dummy db directives used to calculate length of namec
 182+ E55A 50 52 45 56 >                db      "PREV"
 182+ E55E             >len_NFA         defl    $ - temp_NFA
 182+ E55E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E55A             >
 182+ E55A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E55B 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55F             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55E D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55F             >
 182+ E55F 51 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E561             >Prev_Ptr        defl    Heap_Ptr
 182+ E561             >
 182+ E561             >mirror_Ptr      defl    $
 182+ E561             >
 182+ E561 71 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E563             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E563             >
 182+ E563             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E563             >
 182+ E563             >//              ______________________________________________________________________
 182+ E563             >//              Dictionary part
 182+ E563             >
 182+ E563             >                org     Dict_Ptr
 182+ 6B6F             >
 182+ 6B6F 61 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B71             >
 182+ 6B71             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B71 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B74             >
 182+ 6B74             >
 182+ 6B74             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B74             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B74             >
 182+ 6B74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B74 3C          >                db      60
 183+ 6B75                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B75             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B75             >
 183+ 6B75             >Dict_Ptr        defl    $
 183+ 6B75             >
 183+ 6B75             >//              ______________________________________________________________________
 183+ 6B75             >//              Heap part
 183+ 6B75             >
 183+ 6B75             >
 183+ 6B75             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E563             >
 183+ E563             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E563             >Latest_Definition defl  Heap_Ptr
 183+ E563             >
 183+ E563             >                // dummy db directives used to calculate length of namec
 183+ E563 4C 50       >                db      "LP"
 183+ E565             >len_NFA         defl    $ - temp_NFA
 183+ E565             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E563             >
 183+ E563 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E564 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E566             >                org     $-1                 // alter last byte of Name just above to set
 183+ E565 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E566             >
 183+ E566 5A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E568             >Prev_Ptr        defl    Heap_Ptr
 183+ E568             >
 183+ E568             >mirror_Ptr      defl    $
 183+ E568             >
 183+ E568 77 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E56A             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E56A             >
 183+ E56A             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E56A             >
 183+ E56A             >//              ______________________________________________________________________
 183+ E56A             >//              Dictionary part
 183+ E56A             >
 183+ E56A             >                org     Dict_Ptr
 183+ 6B75             >
 183+ 6B75 68 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B77             >
 183+ 6B77             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B77 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B7A             >
 183+ 6B7A             >
 183+ 6B7A             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B7A             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B7A             >
 183+ 6B7A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B7A 3E          >                db      62
 184+ 6B7B                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B7B             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B7B             >
 184+ 6B7B             >Dict_Ptr        defl    $
 184+ 6B7B             >
 184+ 6B7B             >//              ______________________________________________________________________
 184+ 6B7B             >//              Heap part
 184+ 6B7B             >
 184+ 6B7B             >
 184+ 6B7B             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E56A             >
 184+ E56A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E56A             >Latest_Definition defl  Heap_Ptr
 184+ E56A             >
 184+ E56A             >                // dummy db directives used to calculate length of namec
 184+ E56A 50 4C 41 43 >                db      "PLACE"
 184+ E56E 45          >
 184+ E56F             >len_NFA         defl    $ - temp_NFA
 184+ E56F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E56A             >
 184+ E56A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E56B 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56F 45          >
 184+ E570             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56F C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E570             >
 184+ E570 63 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E572             >Prev_Ptr        defl    Heap_Ptr
 184+ E572             >
 184+ E572             >mirror_Ptr      defl    $
 184+ E572             >
 184+ E572 7D 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E574             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E574             >
 184+ E574             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E574             >
 184+ E574             >//              ______________________________________________________________________
 184+ E574             >//              Dictionary part
 184+ E574             >
 184+ E574             >                org     Dict_Ptr
 184+ 6B7B             >
 184+ 6B7B 72 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B7D             >
 184+ 6B7D             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B7D CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B80             >
 184+ 6B80             >
 184+ 6B80             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B80             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B80             >
 184+ 6B80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B80 40          >                db      64
 185+ 6B81                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B81             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B81             >
 185+ 6B81             >Dict_Ptr        defl    $
 185+ 6B81             >
 185+ 6B81             >//              ______________________________________________________________________
 185+ 6B81             >//              Heap part
 185+ 6B81             >
 185+ 6B81             >
 185+ 6B81             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E574             >
 185+ E574             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E574             >Latest_Definition defl  Heap_Ptr
 185+ E574             >
 185+ E574             >                // dummy db directives used to calculate length of namec
 185+ E574 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E578 43 45 2D 49 >
 185+ E57C 44          >
 185+ E57D             >len_NFA         defl    $ - temp_NFA
 185+ E57D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E574             >
 185+ E574 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E575 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E579 43 45 2D 49 >
 185+ E57D 44          >
 185+ E57E             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57D C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57E             >
 185+ E57E 6A 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E580             >Prev_Ptr        defl    Heap_Ptr
 185+ E580             >
 185+ E580             >mirror_Ptr      defl    $
 185+ E580             >
 185+ E580 83 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E582             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E582             >
 185+ E582             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E582             >
 185+ E582             >//              ______________________________________________________________________
 185+ E582             >//              Dictionary part
 185+ E582             >
 185+ E582             >                org     Dict_Ptr
 185+ 6B81             >
 185+ 6B81 80 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B83             >
 185+ 6B83             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B83 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B86             >
 185+ 6B86             >
 185+ 6B86             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B86             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B86             >
 185+ 6B86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B86 42          >                db      66
 186+ 6B87                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B87             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B87             >
 186+ 6B87             >Dict_Ptr        defl    $
 186+ 6B87             >
 186+ 6B87             >//              ______________________________________________________________________
 186+ 6B87             >//              Heap part
 186+ 6B87             >
 186+ 6B87             >
 186+ 6B87             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E582             >
 186+ E582             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E582             >Latest_Definition defl  Heap_Ptr
 186+ E582             >
 186+ E582             >                // dummy db directives used to calculate length of namec
 186+ E582 53 50 41 4E >                db      "SPAN"
 186+ E586             >len_NFA         defl    $ - temp_NFA
 186+ E586             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E582             >
 186+ E582 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E583 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E587             >                org     $-1                 // alter last byte of Name just above to set
 186+ E586 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E587             >
 186+ E587 74 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E589             >Prev_Ptr        defl    Heap_Ptr
 186+ E589             >
 186+ E589             >mirror_Ptr      defl    $
 186+ E589             >
 186+ E589 89 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E58B             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E58B             >
 186+ E58B             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E58B             >
 186+ E58B             >//              ______________________________________________________________________
 186+ E58B             >//              Dictionary part
 186+ E58B             >
 186+ E58B             >                org     Dict_Ptr
 186+ 6B87             >
 186+ 6B87 89 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B89             >
 186+ 6B89             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B89 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B8C             >
 186+ 6B8C             >
 186+ 6B8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B8C             >
 186+ 6B8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B8C 44          >                db      68
 187+ 6B8D                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B8D             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B8D             >
 187+ 6B8D             >Dict_Ptr        defl    $
 187+ 6B8D             >
 187+ 6B8D             >//              ______________________________________________________________________
 187+ 6B8D             >//              Heap part
 187+ 6B8D             >
 187+ 6B8D             >
 187+ 6B8D             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E58B             >
 187+ E58B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E58B             >Latest_Definition defl  Heap_Ptr
 187+ E58B             >
 187+ E58B             >                // dummy db directives used to calculate length of namec
 187+ E58B 48 41 4E 44 >                db      "HANDLER"
 187+ E58F 4C 45 52    >
 187+ E592             >len_NFA         defl    $ - temp_NFA
 187+ E592             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E58B             >
 187+ E58B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58C 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E590 4C 45 52    >
 187+ E593             >                org     $-1                 // alter last byte of Name just above to set
 187+ E592 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E593             >
 187+ E593 82 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E595             >Prev_Ptr        defl    Heap_Ptr
 187+ E595             >
 187+ E595             >mirror_Ptr      defl    $
 187+ E595             >
 187+ E595 8F 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E597             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E597             >
 187+ E597             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E597             >
 187+ E597             >//              ______________________________________________________________________
 187+ E597             >//              Dictionary part
 187+ E597             >
 187+ E597             >                org     Dict_Ptr
 187+ 6B8D             >
 187+ 6B8D 95 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B8F             >
 187+ 6B8F             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B8F CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B92             >
 187+ 6B92             >
 187+ 6B92             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B92             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B92             >
 187+ 6B92             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B92 46          >                db      70
 188+ 6B93                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B93             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B93             >
 188+ 6B93             >Dict_Ptr        defl    $
 188+ 6B93             >
 188+ 6B93             >//              ______________________________________________________________________
 188+ 6B93             >//              Heap part
 188+ 6B93             >
 188+ 6B93             >
 188+ 6B93             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E597             >
 188+ E597             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E597             >Latest_Definition defl  Heap_Ptr
 188+ E597             >
 188+ E597             >                // dummy db directives used to calculate length of namec
 188+ E597 45 58 50    >                db      "EXP"
 188+ E59A             >len_NFA         defl    $ - temp_NFA
 188+ E59A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E597             >
 188+ E597 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E598 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E59B             >                org     $-1                 // alter last byte of Name just above to set
 188+ E59A D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E59B             >
 188+ E59B 8B 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59D             >Prev_Ptr        defl    Heap_Ptr
 188+ E59D             >
 188+ E59D             >mirror_Ptr      defl    $
 188+ E59D             >
 188+ E59D 95 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59F             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59F             >
 188+ E59F             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59F             >
 188+ E59F             >//              ______________________________________________________________________
 188+ E59F             >//              Dictionary part
 188+ E59F             >
 188+ E59F             >                org     Dict_Ptr
 188+ 6B93             >
 188+ 6B93 9D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6B95             >
 188+ 6B95             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6B95 CD 6A 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6B98             >
 188+ 6B98             >
 188+ 6B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6B98             >
 188+ 6B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6B98 48          >                db      72
 189+ 6B99
 190+ 6B99              //  ______________________________________________________________________
 191+ 6B99              //
 192+ 6B99              // here         -- a
 193+ 6B99                              Colon_Def HERE, "HERE", is_normal
 193+ 6B99             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6B99             >
 193+ 6B99             >Dict_Ptr        defl    $
 193+ 6B99             >
 193+ 6B99             >//              ______________________________________________________________________
 193+ 6B99             >//              Heap part
 193+ 6B99             >
 193+ 6B99             >
 193+ 6B99             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59F             >
 193+ E59F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59F             >Latest_Definition defl  Heap_Ptr
 193+ E59F             >
 193+ E59F             >                // dummy db directives used to calculate length of namec
 193+ E59F 48 45 52 45 >                db      "HERE"
 193+ E5A3             >len_NFA         defl    $ - temp_NFA
 193+ E5A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59F             >
 193+ E59F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E5A0 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A4             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A3 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A4             >
 193+ E5A4 97 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A6             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A6             >
 193+ E5A6             >mirror_Ptr      defl    $
 193+ E5A6             >
 193+ E5A6 9B 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A8             >
 193+ E5A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A8             >
 193+ E5A8             >//              ______________________________________________________________________
 193+ E5A8             >//              Dictionary part
 193+ E5A8             >
 193+ E5A8             >                org     Dict_Ptr
 193+ 6B99             >
 193+ 6B99 A6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6B9B             >
 193+ 6B9B             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6B9B CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6B9E             >
 193+ 6B9E             >
 193+ 6B9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6B9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6B9E             >
 193+ 6B9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6B9E F3 6A 80 69                  dw      DP, FETCH               // dp @
 195+ 6BA2 4B 68                        dw      EXIT                    // ;
 196+ 6BA4
 197+ 6BA4              //  ______________________________________________________________________
 198+ 6BA4              //
 199+ 6BA4              // allot        n --
 200+ 6BA4                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BA4             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BA4             >
 200+ 6BA4             >Dict_Ptr        defl    $
 200+ 6BA4             >
 200+ 6BA4             >//              ______________________________________________________________________
 200+ 6BA4             >//              Heap part
 200+ 6BA4             >
 200+ 6BA4             >
 200+ 6BA4             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A8             >
 200+ E5A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A8             >Latest_Definition defl  Heap_Ptr
 200+ E5A8             >
 200+ E5A8             >                // dummy db directives used to calculate length of namec
 200+ E5A8 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AC 54          >
 200+ E5AD             >len_NFA         defl    $ - temp_NFA
 200+ E5AD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A8             >
 200+ E5A8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A9 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AD 54          >
 200+ E5AE             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AD D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AE             >
 200+ E5AE 9F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5B0             >Prev_Ptr        defl    Heap_Ptr
 200+ E5B0             >
 200+ E5B0             >mirror_Ptr      defl    $
 200+ E5B0             >
 200+ E5B0 A6 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B2             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B2             >
 200+ E5B2             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B2             >
 200+ E5B2             >//              ______________________________________________________________________
 200+ E5B2             >//              Dictionary part
 200+ E5B2             >
 200+ E5B2             >                org     Dict_Ptr
 200+ 6BA4             >
 200+ 6BA4 B0 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BA6             >
 200+ 6BA6             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BA6 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BA9             >
 200+ 6BA9             >
 200+ 6BA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BA9             >
 200+ 6BA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BA9 F3 6A 68 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BAD 4B 68                        dw      EXIT                    // ;
 203+ 6BAF
 204+ 6BAF              //  ______________________________________________________________________
 205+ 6BAF              //
 206+ 6BAF              // comma        n --
 207+ 6BAF                              Colon_Def COMMA, ",", is_normal
 207+ 6BAF             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BAF             >
 207+ 6BAF             >Dict_Ptr        defl    $
 207+ 6BAF             >
 207+ 6BAF             >//              ______________________________________________________________________
 207+ 6BAF             >//              Heap part
 207+ 6BAF             >
 207+ 6BAF             >
 207+ 6BAF             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B2             >
 207+ E5B2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B2             >Latest_Definition defl  Heap_Ptr
 207+ E5B2             >
 207+ E5B2             >                // dummy db directives used to calculate length of namec
 207+ E5B2 2C          >                db      ","
 207+ E5B3             >len_NFA         defl    $ - temp_NFA
 207+ E5B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B2             >
 207+ E5B2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B3 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B4             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B3 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B4             >
 207+ E5B4 A8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B6             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B6             >
 207+ E5B6             >mirror_Ptr      defl    $
 207+ E5B6             >
 207+ E5B6 B1 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B8             >
 207+ E5B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B8             >
 207+ E5B8             >//              ______________________________________________________________________
 207+ E5B8             >//              Dictionary part
 207+ E5B8             >
 207+ E5B8             >                org     Dict_Ptr
 207+ 6BAF             >
 207+ 6BAF B6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BB1             >
 207+ 6BB1             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BB1 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BB4             >
 207+ 6BB4             >
 207+ 6BB4             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BB4             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BB4             >
 207+ 6BB4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BB4 9B 6B 8A 69                  dw      HERE, STORE             // here !
 209+ 6BB8 84 6A A6 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BBC 4B 68                        dw      EXIT                    // ;
 211+ 6BBE
 212+ 6BBE              //  ______________________________________________________________________
 213+ 6BBE              //
 214+ 6BBE              // ccomma       c --
 215+ 6BBE                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BBE             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BBE             >
 215+ 6BBE             >Dict_Ptr        defl    $
 215+ 6BBE             >
 215+ 6BBE             >//              ______________________________________________________________________
 215+ 6BBE             >//              Heap part
 215+ 6BBE             >
 215+ 6BBE             >
 215+ 6BBE             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B8             >
 215+ E5B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B8             >Latest_Definition defl  Heap_Ptr
 215+ E5B8             >
 215+ E5B8             >                // dummy db directives used to calculate length of namec
 215+ E5B8 43 2C       >                db      "C,"
 215+ E5BA             >len_NFA         defl    $ - temp_NFA
 215+ E5BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B8             >
 215+ E5B8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B9 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5BB             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5BA AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5BB             >
 215+ E5BB B2 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BD             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BD             >
 215+ E5BD             >mirror_Ptr      defl    $
 215+ E5BD             >
 215+ E5BD C0 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BF             >
 215+ E5BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BF             >
 215+ E5BF             >//              ______________________________________________________________________
 215+ E5BF             >//              Dictionary part
 215+ E5BF             >
 215+ E5BF             >                org     Dict_Ptr
 215+ 6BBE             >
 215+ 6BBE BD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BC0             >
 215+ 6BC0             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BC0 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BC3             >
 215+ 6BC3             >
 215+ 6BC3             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BC3             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BC3             >
 215+ 6BC3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BC3 9B 6B 9E 69                  dw      HERE, CSTORE            // here c!
 217+ 6BC7 7D 6A A6 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BCB 4B 68                        dw      EXIT                    // ;
 219+ 6BCD
 220+ 6BCD              //  ______________________________________________________________________
 221+ 6BCD              //
 222+ 6BCD              // hpcomma      n --
 223+ 6BCD              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BCD              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BCD              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BCD              //              dw      EXIT                    // ;
 227+ 6BCD
 228+ 6BCD              //  ______________________________________________________________________
 229+ 6BCD              //
 230+ 6BCD              // s>d          n -- d
 231+ 6BCD              // converts a single precision integer in a double precision
 232+ 6BCD                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BCD             >
 232+ 6BCD             >Dict_Ptr        defl    $
 232+ 6BCD             >
 232+ 6BCD             >//              ______________________________________________________________________
 232+ 6BCD             >//              Heap part
 232+ 6BCD             >
 232+ 6BCD             >
 232+ 6BCD             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BF             >
 232+ E5BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BF             >Latest_Definition defl  Heap_Ptr
 232+ E5BF             >
 232+ E5BF             >                // dummy db directives used to calculate length of namec
 232+ E5BF 53 3E 44    >                db      "S>D"
 232+ E5C2             >len_NFA         defl    $ - temp_NFA
 232+ E5C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BF             >
 232+ E5BF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5C0 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C3             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C2 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C3             >
 232+ E5C3 B8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C5             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C5             >
 232+ E5C5             >mirror_Ptr      defl    $
 232+ E5C5             >
 232+ E5C5 CF 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C7             >
 232+ E5C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C7             >
 232+ E5C7             >//              ______________________________________________________________________
 232+ E5C7             >//              Dictionary part
 232+ E5C7             >
 232+ E5C7             >                org     Dict_Ptr
 232+ 6BCD             >
 232+ 6BCD C5 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BCF             >
 232+ 6BCF             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BCF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BCF ~           >
 232+ 6BCF ~           >
 232+ 6BCF             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BCF             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BCF             >
 232+ 6BCF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BCF E1                           pop     hl
 234+ 6BD0 7C                           ld      a, h
 235+ 6BD1 E5                           push    hl
 236+ 6BD2 17                           rla
 237+ 6BD3 ED 62                        sbc     hl, hl
 238+ 6BD5 E5                           push    hl
 239+ 6BD6                              next
 239+ 6BD6 DD E9       >                jp      (ix)
 240+ 6BD8
 241+ 6BD8              //  ______________________________________________________________________
 242+ 6BD8              //
 243+ 6BD8              // -            n1 n2 -- n3
 244+ 6BD8              // subtraction
 245+ 6BD8                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BD8             >
 245+ 6BD8             >Dict_Ptr        defl    $
 245+ 6BD8             >
 245+ 6BD8             >//              ______________________________________________________________________
 245+ 6BD8             >//              Heap part
 245+ 6BD8             >
 245+ 6BD8             >
 245+ 6BD8             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C7             >
 245+ E5C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C7             >Latest_Definition defl  Heap_Ptr
 245+ E5C7             >
 245+ E5C7             >                // dummy db directives used to calculate length of namec
 245+ E5C7 2D          >                db      "-"
 245+ E5C8             >len_NFA         defl    $ - temp_NFA
 245+ E5C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C7             >
 245+ E5C7 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C8 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C9             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C8 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C9             >
 245+ E5C9 BF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5CB             >Prev_Ptr        defl    Heap_Ptr
 245+ E5CB             >
 245+ E5CB             >mirror_Ptr      defl    $
 245+ E5CB             >
 245+ E5CB DA 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CD             >
 245+ E5CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CD             >
 245+ E5CD             >//              ______________________________________________________________________
 245+ E5CD             >//              Dictionary part
 245+ E5CD             >
 245+ E5CD             >                org     Dict_Ptr
 245+ 6BD8             >
 245+ 6BD8 CB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BDA             >
 245+ 6BDA             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BDA ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BDA ~           >
 245+ 6BDA ~           >
 245+ 6BDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BDA             >
 245+ 6BDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BDA D9                           exx
 247+ 6BDB D1                           pop     de
 248+ 6BDC E1                           pop     hl
 249+ 6BDD A7                           and     a
 250+ 6BDE ED 52                        sbc     hl, de
 251+ 6BE0 E5                           push    hl
 252+ 6BE1 D9                           exx
 253+ 6BE2                              next
 253+ 6BE2 DD E9       >                jp      (ix)
 254+ 6BE4
 255+ 6BE4
 256+ 6BE4              //  ______________________________________________________________________
 257+ 6BE4              //
 258+ 6BE4              // =            n1 n2 -- n3
 259+ 6BE4              // equals
 260+ 6BE4                              Colon_Def EQUALS, "=", is_normal
 260+ 6BE4             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BE4             >
 260+ 6BE4             >Dict_Ptr        defl    $
 260+ 6BE4             >
 260+ 6BE4             >//              ______________________________________________________________________
 260+ 6BE4             >//              Heap part
 260+ 6BE4             >
 260+ 6BE4             >
 260+ 6BE4             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CD             >
 260+ E5CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CD             >Latest_Definition defl  Heap_Ptr
 260+ E5CD             >
 260+ E5CD             >                // dummy db directives used to calculate length of namec
 260+ E5CD 3D          >                db      "="
 260+ E5CE             >len_NFA         defl    $ - temp_NFA
 260+ E5CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CD             >
 260+ E5CD 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CE 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CF             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CE BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CF             >
 260+ E5CF C7 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5D1             >Prev_Ptr        defl    Heap_Ptr
 260+ E5D1             >
 260+ E5D1             >mirror_Ptr      defl    $
 260+ E5D1             >
 260+ E5D1 E6 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D3             >
 260+ E5D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D3             >
 260+ E5D3             >//              ______________________________________________________________________
 260+ E5D3             >//              Dictionary part
 260+ E5D3             >
 260+ E5D3             >                org     Dict_Ptr
 260+ 6BE4             >
 260+ 6BE4 D1 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BE6             >
 260+ 6BE6             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BE6 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6BE9             >
 260+ 6BE9             >
 260+ 6BE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BE9             >
 260+ 6BE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BE9 DA 6B 70 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6BED 4B 68                        dw      EXIT                    // ;
 263+ 6BEF
 264+ 6BEF              //  ______________________________________________________________________
 265+ 6BEF              //
 266+ 6BEF              // u<           u1 u2 -- u3
 267+ 6BEF              // unsigned less-than
 268+ 6BEF                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6BEF             >
 268+ 6BEF             >Dict_Ptr        defl    $
 268+ 6BEF             >
 268+ 6BEF             >//              ______________________________________________________________________
 268+ 6BEF             >//              Heap part
 268+ 6BEF             >
 268+ 6BEF             >
 268+ 6BEF             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D3             >
 268+ E5D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D3             >Latest_Definition defl  Heap_Ptr
 268+ E5D3             >
 268+ E5D3             >                // dummy db directives used to calculate length of namec
 268+ E5D3 55 3C       >                db      "U<"
 268+ E5D5             >len_NFA         defl    $ - temp_NFA
 268+ E5D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D3             >
 268+ E5D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D4 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D6             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D5 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D6             >
 268+ E5D6 CD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D8             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D8             >
 268+ E5D8             >mirror_Ptr      defl    $
 268+ E5D8             >
 268+ E5D8 F1 6B       >                dw      Dict_Ptr + 2        // xt
 268+ E5DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5DA             >
 268+ E5DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5DA             >
 268+ E5DA             >//              ______________________________________________________________________
 268+ E5DA             >//              Dictionary part
 268+ E5DA             >
 268+ E5DA             >                org     Dict_Ptr
 268+ 6BEF             >
 268+ 6BEF D8 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6BF1             >
 268+ 6BF1             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6BF1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6BF1 ~           >
 268+ 6BF1 ~           >
 268+ 6BF1             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6BF1             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6BF1             >
 268+ 6BF1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6BF1 D9                           exx
 270+ 6BF2 D1                           pop     de
 271+ 6BF3 E1                           pop     hl
 272+ 6BF4              Unsigned_Less_Exit:
 273+ 6BF4 A7                           and     a
 274+ 6BF5 ED 52                        sbc     hl, de
 275+ 6BF7 ED 62                        sbc     hl, hl
 276+ 6BF9 E5                           push    hl
 277+ 6BFA D9                           exx
 278+ 6BFB                              next
 278+ 6BFB DD E9       >                jp      (ix)
 279+ 6BFD
 280+ 6BFD              //  ______________________________________________________________________
 281+ 6BFD              //
 282+ 6BFD              // <           n1 n2 -- n3
 283+ 6BFD              // less-than
 284+ 6BFD                              New_Def LESS, "<", is_code, is_normal
 284+ 6BFD             >
 284+ 6BFD             >Dict_Ptr        defl    $
 284+ 6BFD             >
 284+ 6BFD             >//              ______________________________________________________________________
 284+ 6BFD             >//              Heap part
 284+ 6BFD             >
 284+ 6BFD             >
 284+ 6BFD             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5DA             >
 284+ E5DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5DA             >Latest_Definition defl  Heap_Ptr
 284+ E5DA             >
 284+ E5DA             >                // dummy db directives used to calculate length of namec
 284+ E5DA 3C          >                db      "<"
 284+ E5DB             >len_NFA         defl    $ - temp_NFA
 284+ E5DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5DA             >
 284+ E5DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5DB 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5DC             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5DB BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5DC             >
 284+ E5DC D3 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DE             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DE             >
 284+ E5DE             >mirror_Ptr      defl    $
 284+ E5DE             >
 284+ E5DE FF 6B       >                dw      Dict_Ptr + 2        // xt
 284+ E5E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5E0             >
 284+ E5E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5E0             >
 284+ E5E0             >//              ______________________________________________________________________
 284+ E5E0             >//              Dictionary part
 284+ E5E0             >
 284+ E5E0             >                org     Dict_Ptr
 284+ 6BFD             >
 284+ 6BFD DE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 6BFF             >
 284+ 6BFF             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6BFF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 6BFF ~           >
 284+ 6BFF ~           >
 284+ 6BFF             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6BFF             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6BFF             >
 284+ 6BFF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6BFF D9                           exx
 286+ 6C00 E1                           pop     hl
 287+ 6C01 D1                           pop     de
 288+ 6C02 01 00 80                     ld      bc, $8000
 289+ 6C05 09                           add     hl, bc
 290+ 6C06 EB                           ex      de, hl
 291+ 6C07 09                           add     hl, bc
 292+ 6C08 18 EA                        jr      Unsigned_Less_Exit
 293+ 6C0A              //              and     a
 294+ 6C0A              //              sbc     hl, de
 295+ 6C0A              //              sbc     hl, hl
 296+ 6C0A              //              push    hl
 297+ 6C0A              //              exx
 298+ 6C0A              //              next
 299+ 6C0A
 300+ 6C0A              //  ______________________________________________________________________
 301+ 6C0A              //
 302+ 6C0A              // >            n1 n2 -- n3
 303+ 6C0A              // greater than
 304+ 6C0A                              Colon_Def GREATER, ">", is_normal
 304+ 6C0A             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C0A             >
 304+ 6C0A             >Dict_Ptr        defl    $
 304+ 6C0A             >
 304+ 6C0A             >//              ______________________________________________________________________
 304+ 6C0A             >//              Heap part
 304+ 6C0A             >
 304+ 6C0A             >
 304+ 6C0A             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5E0             >
 304+ E5E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5E0             >Latest_Definition defl  Heap_Ptr
 304+ E5E0             >
 304+ E5E0             >                // dummy db directives used to calculate length of namec
 304+ E5E0 3E          >                db      ">"
 304+ E5E1             >len_NFA         defl    $ - temp_NFA
 304+ E5E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5E0             >
 304+ E5E0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5E1 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E2             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5E1 BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E2             >
 304+ E5E2 DA 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E4             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E4             >
 304+ E5E4             >mirror_Ptr      defl    $
 304+ E5E4             >
 304+ E5E4 0C 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5E6             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E6             >
 304+ E5E6             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E6             >
 304+ E5E6             >//              ______________________________________________________________________
 304+ E5E6             >//              Dictionary part
 304+ E5E6             >
 304+ E5E6             >                org     Dict_Ptr
 304+ 6C0A             >
 304+ 6C0A E4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C0C             >
 304+ 6C0C             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C0C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C0F             >
 304+ 6C0F             >
 304+ 6C0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C0F             >
 304+ 6C0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C0F 0F 69 FF 6B                  dw      SWAP, LESS              // swap <
 306+ 6C13 4B 68                        dw      EXIT                    // ;
 307+ 6C15              //  ______________________________________________________________________
 308+ 6C15              //
 309+ 6C15              // min          n1 n2 -- n3
 310+ 6C15              // minimum between n1 and n2
 311+ 6C15                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C15             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C15             >
 311+ 6C15             >Dict_Ptr        defl    $
 311+ 6C15             >
 311+ 6C15             >//              ______________________________________________________________________
 311+ 6C15             >//              Heap part
 311+ 6C15             >
 311+ 6C15             >
 311+ 6C15             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E6             >
 311+ E5E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E6             >Latest_Definition defl  Heap_Ptr
 311+ E5E6             >
 311+ E5E6             >                // dummy db directives used to calculate length of namec
 311+ E5E6 4D 49 4E    >                db      "MIN"
 311+ E5E9             >len_NFA         defl    $ - temp_NFA
 311+ E5E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E6             >
 311+ E5E6 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E7 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5EA             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E9 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5EA             >
 311+ E5EA E0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EC             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EC             >
 311+ E5EC             >mirror_Ptr      defl    $
 311+ E5EC             >
 311+ E5EC 17 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EE             >
 311+ E5EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EE             >
 311+ E5EE             >//              ______________________________________________________________________
 311+ E5EE             >//              Dictionary part
 311+ E5EE             >
 311+ E5EE             >                org     Dict_Ptr
 311+ 6C15             >
 311+ 6C15 EC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C17             >
 311+ 6C17             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C17 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C1A             >
 311+ 6C1A             >
 311+ 6C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C1A             >
 311+ 6C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C1A 5E 69                        dw      TWO_DUP                 // 2dup
 313+ 6C1C 0C 6C                        dw      GREATER                 // >
 314+ 6C1E F3 63                        dw      ZBRANCH
 315+ 6C20 04 00                        dw      Min_Skip - $   // if
 316+ 6C22 0F 69                        dw          SWAP                //      swap
 317+ 6C24              Min_Skip:                                       // endif
 318+ 6C24 FB 68                        dw      DROP                    // drop
 319+ 6C26 4B 68                        dw      EXIT                    // ;
 320+ 6C28
 321+ 6C28              //  ______________________________________________________________________
 322+ 6C28              //
 323+ 6C28              // max          n1 n2 -- n3
 324+ 6C28              // maximum between n1 and n2
 325+ 6C28                              Colon_Def MAX, "MAX", is_normal
 325+ 6C28             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C28             >
 325+ 6C28             >Dict_Ptr        defl    $
 325+ 6C28             >
 325+ 6C28             >//              ______________________________________________________________________
 325+ 6C28             >//              Heap part
 325+ 6C28             >
 325+ 6C28             >
 325+ 6C28             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EE             >
 325+ E5EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EE             >Latest_Definition defl  Heap_Ptr
 325+ E5EE             >
 325+ E5EE             >                // dummy db directives used to calculate length of namec
 325+ E5EE 4D 41 58    >                db      "MAX"
 325+ E5F1             >len_NFA         defl    $ - temp_NFA
 325+ E5F1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EE             >
 325+ E5EE 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5EF 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F2             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5F1 D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F2             >
 325+ E5F2 E6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F4             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F4             >
 325+ E5F4             >mirror_Ptr      defl    $
 325+ E5F4             >
 325+ E5F4 2A 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F6             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F6             >
 325+ E5F6             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F6             >
 325+ E5F6             >//              ______________________________________________________________________
 325+ E5F6             >//              Dictionary part
 325+ E5F6             >
 325+ E5F6             >                org     Dict_Ptr
 325+ 6C28             >
 325+ 6C28 F4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C2A             >
 325+ 6C2A             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C2A CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C2D             >
 325+ 6C2D             >
 325+ 6C2D             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C2D             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C2D             >
 325+ 6C2D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C2D 5E 69                        dw      TWO_DUP                 // 2dup
 327+ 6C2F FF 6B                        dw      LESS                    // <
 328+ 6C31 F3 63                        dw      ZBRANCH
 329+ 6C33 04 00                        dw      Max_Skip - $   // if
 330+ 6C35 0F 69                        dw          SWAP                //      swap
 331+ 6C37              Max_Skip:                                       // endif
 332+ 6C37 FB 68                        dw      DROP                    // drop
 333+ 6C39 4B 68                        dw      EXIT                    // ;
 334+ 6C3B
 335+ 6C3B              //  ______________________________________________________________________
 336+ 6C3B              //
 337+ 6C3B              // ?dup         n -- 0 | n n
 338+ 6C3B              // duplicate if not zero
 339+ 6C3B                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C3B             >
 339+ 6C3B             >Dict_Ptr        defl    $
 339+ 6C3B             >
 339+ 6C3B             >//              ______________________________________________________________________
 339+ 6C3B             >//              Heap part
 339+ 6C3B             >
 339+ 6C3B             >
 339+ 6C3B             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F6             >
 339+ E5F6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F6             >Latest_Definition defl  Heap_Ptr
 339+ E5F6             >
 339+ E5F6             >                // dummy db directives used to calculate length of namec
 339+ E5F6 3F 44 55 50 >                db      "?DUP"
 339+ E5FA             >len_NFA         defl    $ - temp_NFA
 339+ E5FA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F6             >
 339+ E5F6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F7 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5FB             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5FA D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5FB             >
 339+ E5FB EE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FD             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FD             >
 339+ E5FD             >mirror_Ptr      defl    $
 339+ E5FD             >
 339+ E5FD 3D 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FF             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FF             >
 339+ E5FF             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FF             >
 339+ E5FF             >//              ______________________________________________________________________
 339+ E5FF             >//              Dictionary part
 339+ E5FF             >
 339+ E5FF             >                org     Dict_Ptr
 339+ 6C3B             >
 339+ 6C3B FD 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C3D             >
 339+ 6C3D             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C3D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C3D ~           >
 339+ 6C3D ~           >
 339+ 6C3D             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C3D             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C3D             >
 339+ 6C3D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C3D              QDup_Ptr:
 341+ 6C3D E1                           pop     hl
 342+ 6C3E 7C                           ld      a, h
 343+ 6C3F B5                           or      l
 344+ 6C40 28 01                        jr      z, QDup_Skip
 345+ 6C42 E5                               push    hl
 346+ 6C43              QDup_Skip:
 347+ 6C43                              psh1
 347+ 6C43 E5          >                push    hl
 347+ 6C44 DD E9       >                jp      (ix)
 348+ 6C46
 349+ 6C46              //  ______________________________________________________________________
 350+ 6C46              //
 351+ 6C46              // -dup         n -- 0 | n n
 352+ 6C46              // duplicate if not zero
 353+ 6C46                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C46             >
 353+ 6C46             >Dict_Ptr        defl    $
 353+ 6C46             >
 353+ 6C46             >//              ______________________________________________________________________
 353+ 6C46             >//              Heap part
 353+ 6C46             >
 353+ 6C46             >
 353+ 6C46             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FF             >
 353+ E5FF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FF             >Latest_Definition defl  Heap_Ptr
 353+ E5FF             >
 353+ E5FF             >                // dummy db directives used to calculate length of namec
 353+ E5FF 2D 44 55 50 >                db      "-DUP"
 353+ E603             >len_NFA         defl    $ - temp_NFA
 353+ E603             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FF             >
 353+ E5FF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E600 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E604             >                org     $-1                 // alter last byte of Name just above to set
 353+ E603 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E604             >
 353+ E604 F6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E606             >Prev_Ptr        defl    Heap_Ptr
 353+ E606             >
 353+ E606             >mirror_Ptr      defl    $
 353+ E606             >
 353+ E606 48 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E608             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E608             >
 353+ E608             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E608             >
 353+ E608             >//              ______________________________________________________________________
 353+ E608             >//              Dictionary part
 353+ E608             >
 353+ E608             >                org     Dict_Ptr
 353+ 6C46             >
 353+ 6C46 06 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C48             >
 353+ 6C48             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C48 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C48 ~           >
 353+ 6C48 ~           >
 353+ 6C48             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C48             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C48             >
 353+ 6C48             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C48 C3 3D 6C                     jp      QDup_Ptr
 355+ 6C4B
 356+ 6C4B              //  ______________________________________________________________________
 357+ 6C4B              //
 358+ 6C4B              // emit         c --
 359+ 6C4B                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C4B             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C4B             >
 359+ 6C4B             >Dict_Ptr        defl    $
 359+ 6C4B             >
 359+ 6C4B             >//              ______________________________________________________________________
 359+ 6C4B             >//              Heap part
 359+ 6C4B             >
 359+ 6C4B             >
 359+ 6C4B             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E608             >
 359+ E608             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E608             >Latest_Definition defl  Heap_Ptr
 359+ E608             >
 359+ E608             >                // dummy db directives used to calculate length of namec
 359+ E608 45 4D 49 54 >                db      "EMIT"
 359+ E60C             >len_NFA         defl    $ - temp_NFA
 359+ E60C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E608             >
 359+ E608 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E609 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60D             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60C D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60D             >
 359+ E60D FF 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60F             >Prev_Ptr        defl    Heap_Ptr
 359+ E60F             >
 359+ E60F             >mirror_Ptr      defl    $
 359+ E60F             >
 359+ E60F 4D 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E611             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E611             >
 359+ E611             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E611             >
 359+ E611             >//              ______________________________________________________________________
 359+ E611             >//              Dictionary part
 359+ E611             >
 359+ E611             >                org     Dict_Ptr
 359+ 6C4B             >
 359+ 6C4B 0F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C4D             >
 359+ 6C4D             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C4D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C50             >
 359+ 6C50             >
 359+ 6C50             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C50             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C50             >
 359+ 6C50             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C50 CD 65                        dw      C_EMIT                      // (?emit)
 361+ 6C52 3D 6C                        dw      QDUP                        // ?dup
 362+ 6C54                                                                  // if
 363+ 6C54 F3 63                        dw      ZBRANCH
 364+ 6C56 0A 00                        dw      Emit_Skip - $
 365+ 6C58 9B 65                        dw          EMITC                   //      emitc
 366+ 6C5A 7D 6A                        dw          ONE                     //      1
 367+ 6C5C 23 6B 68 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C60              Emit_Skip:                                          // endif
 369+ 6C60 4B 68                        dw      EXIT                        // ;
 370+ 6C62
 371+ 6C62              //  ______________________________________________________________________
 372+ 6C62              //
 373+ 6C62              // space        --
 374+ 6C62                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C62             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C62             >
 374+ 6C62             >Dict_Ptr        defl    $
 374+ 6C62             >
 374+ 6C62             >//              ______________________________________________________________________
 374+ 6C62             >//              Heap part
 374+ 6C62             >
 374+ 6C62             >
 374+ 6C62             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E611             >
 374+ E611             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E611             >Latest_Definition defl  Heap_Ptr
 374+ E611             >
 374+ E611             >                // dummy db directives used to calculate length of namec
 374+ E611 53 50 41 43 >                db      "SPACE"
 374+ E615 45          >
 374+ E616             >len_NFA         defl    $ - temp_NFA
 374+ E616             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E611             >
 374+ E611 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E612 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E616 45          >
 374+ E617             >                org     $-1                 // alter last byte of Name just above to set
 374+ E616 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E617             >
 374+ E617 08 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E619             >Prev_Ptr        defl    Heap_Ptr
 374+ E619             >
 374+ E619             >mirror_Ptr      defl    $
 374+ E619             >
 374+ E619 64 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E61B             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E61B             >
 374+ E61B             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E61B             >
 374+ E61B             >//              ______________________________________________________________________
 374+ E61B             >//              Dictionary part
 374+ E61B             >
 374+ E61B             >                org     Dict_Ptr
 374+ 6C62             >
 374+ 6C62 19 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C64             >
 374+ 6C64             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C64 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C67             >
 374+ 6C67             >
 374+ 6C67             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C67             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C67             >
 374+ 6C67             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C67 99 6A 4D 6C                  dw      BL, EMIT                // bl emit
 376+ 6C6B 4B 68                        dw      EXIT                    // ;
 377+ 6C6D
 378+ 6C6D              //  ______________________________________________________________________
 379+ 6C6D              //
 380+ 6C6D              // traverse     a n -- a
 381+ 6C6D              // A dictionary entry is structured as follows
 382+ 6C6D              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C6D              //      +1   word name, last character is toggled with $80
 384+ 6C6D              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C6D              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C6D              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C6D              //
 388+ 6C6D                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C6D             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C6D             >
 388+ 6C6D             >Dict_Ptr        defl    $
 388+ 6C6D             >
 388+ 6C6D             >//              ______________________________________________________________________
 388+ 6C6D             >//              Heap part
 388+ 6C6D             >
 388+ 6C6D             >
 388+ 6C6D             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E61B             >
 388+ E61B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E61B             >Latest_Definition defl  Heap_Ptr
 388+ E61B             >
 388+ E61B             >                // dummy db directives used to calculate length of namec
 388+ E61B 54 52 41 56 >                db      "TRAVERSE"
 388+ E61F 45 52 53 45 >
 388+ E623             >len_NFA         defl    $ - temp_NFA
 388+ E623             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E61B             >
 388+ E61B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61C 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E620 45 52 53 45 >
 388+ E624             >                org     $-1                 // alter last byte of Name just above to set
 388+ E623 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E624             >
 388+ E624 11 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E626             >Prev_Ptr        defl    Heap_Ptr
 388+ E626             >
 388+ E626             >mirror_Ptr      defl    $
 388+ E626             >
 388+ E626 6F 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E628             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E628             >
 388+ E628             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E628             >
 388+ E628             >//              ______________________________________________________________________
 388+ E628             >//              Dictionary part
 388+ E628             >
 388+ E628             >                org     Dict_Ptr
 388+ 6C6D             >
 388+ 6C6D 26 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C6F             >
 388+ 6C6F             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C6F CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C72             >
 388+ 6C72             >
 388+ 6C72             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C72             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C72             >
 388+ 6C72             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C72 0F 69                        dw      SWAP                    // swap
 390+ 6C74              Traverse_Begin:                                 // begin
 391+ 6C74 F2 68 98 68                  dw          OVER, PLUS          //      over +
 392+ 6C78 A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6C7C F2 68 95 69                  dw          OVER, CFETCH        //      over @
 394+ 6C80 FF 6B                        dw          LESS                //      <
 395+ 6C82                                                              // until
 396+ 6C82 F3 63                        dw      ZBRANCH
 397+ 6C84 F0 FF                        dw      Traverse_Begin - $
 398+ 6C86 00 69                        dw      NIP                     //  nip
 399+ 6C88 4B 68                        dw      EXIT                    //  ;
 400+ 6C8A
 401+ 6C8A              //  ______________________________________________________________________
 402+ 6C8A              //
 403+ 6C8A              // mmu7@        -- n
 404+ 6C8A              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6C8A
 406+ 6C8A                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6C8A             >
 406+ 6C8A             >Dict_Ptr        defl    $
 406+ 6C8A             >
 406+ 6C8A             >//              ______________________________________________________________________
 406+ 6C8A             >//              Heap part
 406+ 6C8A             >
 406+ 6C8A             >
 406+ 6C8A             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E628             >
 406+ E628             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E628             >Latest_Definition defl  Heap_Ptr
 406+ E628             >
 406+ E628             >                // dummy db directives used to calculate length of namec
 406+ E628 4D 4D 55 37 >                db      "MMU7@"
 406+ E62C 40          >
 406+ E62D             >len_NFA         defl    $ - temp_NFA
 406+ E62D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E628             >
 406+ E628 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E629 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62D 40          >
 406+ E62E             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62D C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62E             >
 406+ E62E 1B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E630             >Prev_Ptr        defl    Heap_Ptr
 406+ E630             >
 406+ E630             >mirror_Ptr      defl    $
 406+ E630             >
 406+ E630 8C 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E632             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E632             >
 406+ E632             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E632             >
 406+ E632             >//              ______________________________________________________________________
 406+ E632             >//              Dictionary part
 406+ E632             >
 406+ E632             >                org     Dict_Ptr
 406+ 6C8A             >
 406+ 6C8A 30 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6C8C             >
 406+ 6C8C             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6C8C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6C8C ~           >
 406+ 6C8C ~           >
 406+ 6C8C             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6C8C             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6C8C             >
 406+ 6C8C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6C8C D9                           exx
 408+ 6C8D CD 98 64                     call    MMU7_read
 409+ 6C90 D9                           exx
 410+ 6C91 6F                           ld      l, a
 411+ 6C92 26 00                        ld      h, 0
 412+ 6C94 E5                           push    hl
 413+ 6C95                              next
 413+ 6C95 DD E9       >                jp      (ix)
 414+ 6C97
 415+ 6C97              //  ______________________________________________________________________
 416+ 6C97              //
 417+ 6C97              // mmu7!        n --
 418+ 6C97              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6C97              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6C97
 421+ 6C97                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6C97             >
 421+ 6C97             >Dict_Ptr        defl    $
 421+ 6C97             >
 421+ 6C97             >//              ______________________________________________________________________
 421+ 6C97             >//              Heap part
 421+ 6C97             >
 421+ 6C97             >
 421+ 6C97             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E632             >
 421+ E632             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E632             >Latest_Definition defl  Heap_Ptr
 421+ E632             >
 421+ E632             >                // dummy db directives used to calculate length of namec
 421+ E632 4D 4D 55 37 >                db      "MMU7!"
 421+ E636 21          >
 421+ E637             >len_NFA         defl    $ - temp_NFA
 421+ E637             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E632             >
 421+ E632 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E633 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E637 21          >
 421+ E638             >                org     $-1                 // alter last byte of Name just above to set
 421+ E637 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E638             >
 421+ E638 28 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E63A             >Prev_Ptr        defl    Heap_Ptr
 421+ E63A             >
 421+ E63A             >mirror_Ptr      defl    $
 421+ E63A             >
 421+ E63A 99 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63C             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63C             >
 421+ E63C             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63C             >
 421+ E63C             >//              ______________________________________________________________________
 421+ E63C             >//              Dictionary part
 421+ E63C             >
 421+ E63C             >                org     Dict_Ptr
 421+ 6C97             >
 421+ 6C97 3A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6C99             >
 421+ 6C99             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6C99 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6C99 ~           >
 421+ 6C99 ~           >
 421+ 6C99             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6C99             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6C99             >
 421+ 6C99             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6C99 E1                           pop     hl
 423+ 6C9A 7D                           ld      a, l
 424+ 6C9B ED 92 57                     nextreg 87, a
 425+ 6C9E
 426+ 6C9E                              next
 426+ 6C9E DD E9       >                jp      (ix)
 427+ 6CA0
 428+ 6CA0              //  ______________________________________________________________________
 429+ 6CA0              //
 430+ 6CA0              // >far         ha -- a n
 431+ 6CA0              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CA0              // take lower bits of H and L as an offset from E000h
 433+ 6CA0              // then return address  a  between E000h-FFFFh
 434+ 6CA0              // and page number n  between 64-71 (40h-47h)
 435+ 6CA0              // For example, in hex:
 436+ 6CA0              //   0000 >FAR  gives  40.E000
 437+ 6CA0              //   1FFF >FAR  gives  40.FFFF
 438+ 6CA0              //   2000 >FAR  gives  41.E000
 439+ 6CA0              //   3FFF >FAR  gives  41.FFFF
 440+ 6CA0              //   EFFF >FAR  gives  47.EFFF
 441+ 6CA0              //   FFFF >FAR  gives  47.FFFF
 442+ 6CA0                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CA0             >
 442+ 6CA0             >Dict_Ptr        defl    $
 442+ 6CA0             >
 442+ 6CA0             >//              ______________________________________________________________________
 442+ 6CA0             >//              Heap part
 442+ 6CA0             >
 442+ 6CA0             >
 442+ 6CA0             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63C             >
 442+ E63C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63C             >Latest_Definition defl  Heap_Ptr
 442+ E63C             >
 442+ E63C             >                // dummy db directives used to calculate length of namec
 442+ E63C 3E 46 41 52 >                db      ">FAR"
 442+ E640             >len_NFA         defl    $ - temp_NFA
 442+ E640             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63C             >
 442+ E63C 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63D 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E641             >                org     $-1                 // alter last byte of Name just above to set
 442+ E640 D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E641             >
 442+ E641 32 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E643             >Prev_Ptr        defl    Heap_Ptr
 442+ E643             >
 442+ E643             >mirror_Ptr      defl    $
 442+ E643             >
 442+ E643 A2 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E645             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E645             >
 442+ E645             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E645             >
 442+ E645             >//              ______________________________________________________________________
 442+ E645             >//              Dictionary part
 442+ E645             >
 442+ E645             >                org     Dict_Ptr
 442+ 6CA0             >
 442+ 6CA0 43 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CA2             >
 442+ 6CA2             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CA2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CA2 ~           >
 442+ 6CA2 ~           >
 442+ 6CA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CA2             >
 442+ 6CA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CA2 E1                           pop     hl
 444+ 6CA3 CD A3 64                     call    TO_FAR_rout
 445+ 6CA6 E5                           push    hl
 446+ 6CA7 6F                           ld      l, a
 447+ 6CA8 26 00                        ld      h, 0
 448+ 6CAA E5                           push    hl
 449+ 6CAB                              next
 449+ 6CAB DD E9       >                jp      (ix)
 450+ 6CAD
 451+ 6CAD              //  ______________________________________________________________________
 452+ 6CAD              //
 453+ 6CAD              // <far         a n  -- ha
 454+ 6CAD              // given an address E000-FFFF and a page number n (64-71 or 40h-47h)
 455+ 6CAD              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CAD              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CAD                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CAD             >
 457+ 6CAD             >Dict_Ptr        defl    $
 457+ 6CAD             >
 457+ 6CAD             >//              ______________________________________________________________________
 457+ 6CAD             >//              Heap part
 457+ 6CAD             >
 457+ 6CAD             >
 457+ 6CAD             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E645             >
 457+ E645             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E645             >Latest_Definition defl  Heap_Ptr
 457+ E645             >
 457+ E645             >                // dummy db directives used to calculate length of namec
 457+ E645 3C 46 41 52 >                db      "<FAR"
 457+ E649             >len_NFA         defl    $ - temp_NFA
 457+ E649             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E645             >
 457+ E645 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E646 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E64A             >                org     $-1                 // alter last byte of Name just above to set
 457+ E649 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E64A             >
 457+ E64A 3C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64C             >Prev_Ptr        defl    Heap_Ptr
 457+ E64C             >
 457+ E64C             >mirror_Ptr      defl    $
 457+ E64C             >
 457+ E64C AF 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64E             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64E             >
 457+ E64E             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64E             >
 457+ E64E             >//              ______________________________________________________________________
 457+ E64E             >//              Dictionary part
 457+ E64E             >
 457+ E64E             >                org     Dict_Ptr
 457+ 6CAD             >
 457+ 6CAD 4C 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CAF             >
 457+ 6CAF             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CAF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CAF ~           >
 457+ 6CAF ~           >
 457+ 6CAF             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CAF             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CAF             >
 457+ 6CAF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CAF E1                           pop     hl                  // page number in l
 459+ 6CB0 7D                           ld      a, l
 460+ 6CB1 E6 07                        and     07
 461+ 6CB3 0F                           rrca
 462+ 6CB4 0F                           rrca
 463+ 6CB5 0F                           rrca
 464+ 6CB6 08                           ex      af, af
 465+ 6CB7 E1                           pop     hl                  // address in hl
 466+ 6CB8 7C                           ld      a, h
 467+ 6CB9 E6 1F                        and     $1F
 468+ 6CBB 67                           ld      h, a
 469+ 6CBC 08                           ex      af, af
 470+ 6CBD B4                           or      h
 471+ 6CBE 67                           ld      h, a
 472+ 6CBF                              psh1
 472+ 6CBF E5          >                push    hl
 472+ 6CC0 DD E9       >                jp      (ix)
 473+ 6CC2
 474+ 6CC2              //  ______________________________________________________________________
 475+ 6CC2              //
 476+ 6CC2              // ?IN_MMU7        a -- f
 477+ 6CC2              // check if address lies on MMU7
 478+ 6CC2              // tf is passed address is on MMU7
 479+ 6CC2                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 6CC2             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 6CC2             >
 479+ 6CC2             >Dict_Ptr        defl    $
 479+ 6CC2             >
 479+ 6CC2             >//              ______________________________________________________________________
 479+ 6CC2             >//              Heap part
 479+ 6CC2             >
 479+ 6CC2             >
 479+ 6CC2             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E64E             >
 479+ E64E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E64E             >Latest_Definition defl  Heap_Ptr
 479+ E64E             >
 479+ E64E             >                // dummy db directives used to calculate length of namec
 479+ E64E 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E652 4D 4D 55 37 >
 479+ E656             >len_NFA         defl    $ - temp_NFA
 479+ E656             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E64E             >
 479+ E64E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E64F 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E653 4D 4D 55 37 >
 479+ E657             >                org     $-1                 // alter last byte of Name just above to set
 479+ E656 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E657             >
 479+ E657 45 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E659             >Prev_Ptr        defl    Heap_Ptr
 479+ E659             >
 479+ E659             >mirror_Ptr      defl    $
 479+ E659             >
 479+ E659 C4 6C       >                dw      Dict_Ptr + 2        // xt
 479+ E65B             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E65B             >
 479+ E65B             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E65B             >
 479+ E65B             >//              ______________________________________________________________________
 479+ E65B             >//              Dictionary part
 479+ E65B             >
 479+ E65B             >                org     Dict_Ptr
 479+ 6CC2             >
 479+ 6CC2 59 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 6CC4             >
 479+ 6CC4             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 6CC4 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 6CC7             >
 479+ 6CC7             >
 479+ 6CC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 6CC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 6CC7             >
 479+ 6CC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 6CC7 16 69                        dw      DUP
 481+ 6CC9 A3 63 00 E0                  dw      LIT, $E000
 482+ 6CCD F1 6B                        dw      ULESS
 483+ 6CCF 7D 68                        dw      NOT_OP
 484+ 6CD1 4B 68                        dw      EXIT
 485+ 6CD3
 486+ 6CD3              //  ______________________________________________________________________
 487+ 6CD3              //
 488+ 6CD3              // far          hp -- ha
 489+ 6CD3              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 6CD3              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 6CD3              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 6CD3                              Colon_Def FAR, "FAR", is_normal
 492+ 6CD3             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 6CD3             >
 492+ 6CD3             >Dict_Ptr        defl    $
 492+ 6CD3             >
 492+ 6CD3             >//              ______________________________________________________________________
 492+ 6CD3             >//              Heap part
 492+ 6CD3             >
 492+ 6CD3             >
 492+ 6CD3             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E65B             >
 492+ E65B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E65B             >Latest_Definition defl  Heap_Ptr
 492+ E65B             >
 492+ E65B             >                // dummy db directives used to calculate length of namec
 492+ E65B 46 41 52    >                db      "FAR"
 492+ E65E             >len_NFA         defl    $ - temp_NFA
 492+ E65E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E65B             >
 492+ E65B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E65C 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E65F             >                org     $-1                 // alter last byte of Name just above to set
 492+ E65E D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E65F             >
 492+ E65F 4E 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E661             >Prev_Ptr        defl    Heap_Ptr
 492+ E661             >
 492+ E661             >mirror_Ptr      defl    $
 492+ E661             >
 492+ E661 D5 6C       >                dw      Dict_Ptr + 2        // xt
 492+ E663             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E663             >
 492+ E663             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E663             >
 492+ E663             >//              ______________________________________________________________________
 492+ E663             >//              Dictionary part
 492+ E663             >
 492+ E663             >                org     Dict_Ptr
 492+ 6CD3             >
 492+ 6CD3 61 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 6CD5             >
 492+ 6CD5             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 6CD5 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 6CD8             >
 492+ 6CD8             >
 492+ 6CD8             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 6CD8             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 6CD8             >
 492+ 6CD8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 6CD8 A2 6C                        dw      TO_FAR
 494+ 6CDA 99 6C                        dw      MMU7_STORE
 495+ 6CDC 4B 68                        dw      EXIT
 496+ 6CDE
 497+ 6CDE              //  ______________________________________________________________________
 498+ 6CDE              //
 499+ 6CDE              // ?HEAP_PTR       n -- n f
 500+ 6CDE              // check if it's a non-zero heap-pointer or less than $6300
 501+ 6CDE              // tf if passed argument is an hp
 502+ 6CDE              // ff if passed argument isn't hp
 503+ 6CDE                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 6CDE             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 6CDE             >
 503+ 6CDE             >Dict_Ptr        defl    $
 503+ 6CDE             >
 503+ 6CDE             >//              ______________________________________________________________________
 503+ 6CDE             >//              Heap part
 503+ 6CDE             >
 503+ 6CDE             >
 503+ 6CDE             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E663             >
 503+ E663             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E663             >Latest_Definition defl  Heap_Ptr
 503+ E663             >
 503+ E663             >                // dummy db directives used to calculate length of namec
 503+ E663 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E667 50 5F 50 54 >
 503+ E66B 52          >
 503+ E66C             >len_NFA         defl    $ - temp_NFA
 503+ E66C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E663             >
 503+ E663 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E664 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E668 50 5F 50 54 >
 503+ E66C 52          >
 503+ E66D             >                org     $-1                 // alter last byte of Name just above to set
 503+ E66C D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E66D             >
 503+ E66D 5B 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E66F             >Prev_Ptr        defl    Heap_Ptr
 503+ E66F             >
 503+ E66F             >mirror_Ptr      defl    $
 503+ E66F             >
 503+ E66F E0 6C       >                dw      Dict_Ptr + 2        // xt
 503+ E671             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E671             >
 503+ E671             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E671             >
 503+ E671             >//              ______________________________________________________________________
 503+ E671             >//              Dictionary part
 503+ E671             >
 503+ E671             >                org     Dict_Ptr
 503+ 6CDE             >
 503+ 6CDE 6F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 6CE0             >
 503+ 6CE0             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 6CE0 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 6CE3             >
 503+ 6CE3             >
 503+ 6CE3             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 6CE3             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 6CE3             >
 503+ 6CE3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 6CE3 16 69                        dw      DUP
 505+ 6CE5 F3 63                        dw      ZBRANCH
 506+ 6CE7 08 00                        dw      QHeap_Skip - $
 507+ 6CE9 A3 63 00 63                  dw          LIT, $6300
 508+ 6CED F1 6B                        dw          ULESS
 509+ 6CEF              QHeap_Skip:                                          // endif
 510+ 6CEF 4B 68                        dw      EXIT                        // ;
 511+ 6CF1
 512+ 6CF1              //  ______________________________________________________________________
 513+ 6CF1              //
 514+ 6CF1              // ?>heap       n1 -- n2
 515+ 6CF1              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 6CF1              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 6CF1              // and converted to heap address updating MMU7 via FAR
 518+ 6CF1                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 6CF1             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 6CF1             >
 518+ 6CF1             >Dict_Ptr        defl    $
 518+ 6CF1             >
 518+ 6CF1             >//              ______________________________________________________________________
 518+ 6CF1             >//              Heap part
 518+ 6CF1             >
 518+ 6CF1             >
 518+ 6CF1             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E671             >
 518+ E671             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E671             >Latest_Definition defl  Heap_Ptr
 518+ E671             >
 518+ E671             >                // dummy db directives used to calculate length of namec
 518+ E671 3F 3E 48 45 >                db      "?>HEAP"
 518+ E675 41 50       >
 518+ E677             >len_NFA         defl    $ - temp_NFA
 518+ E677             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E671             >
 518+ E671 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E672 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E676 41 50       >
 518+ E678             >                org     $-1                 // alter last byte of Name just above to set
 518+ E677 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E678             >
 518+ E678 63 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E67A             >Prev_Ptr        defl    Heap_Ptr
 518+ E67A             >
 518+ E67A             >mirror_Ptr      defl    $
 518+ E67A             >
 518+ E67A F3 6C       >                dw      Dict_Ptr + 2        // xt
 518+ E67C             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E67C             >
 518+ E67C             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E67C             >
 518+ E67C             >//              ______________________________________________________________________
 518+ E67C             >//              Dictionary part
 518+ E67C             >
 518+ E67C             >                org     Dict_Ptr
 518+ 6CF1             >
 518+ 6CF1 7A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 6CF3             >
 518+ 6CF3             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 6CF3 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 6CF6             >
 518+ 6CF6             >
 518+ 6CF6             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 6CF6             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 6CF6             >
 518+ 6CF6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 6CF6 16 69                        dw      DUP
 520+ 6CF8 E0 6C                        dw      QHEAPP
 521+ 6CFA F3 63                        dw      ZBRANCH
 522+ 6CFC 04 00                        dw      Q2Heap_Skip - $
 523+ 6CFE D5 6C                        dw          FAR
 524+ 6D00              Q2Heap_Skip:                                          // endif
 525+ 6D00 4B 68                        dw      EXIT                        // ;
 526+ 6D02
 527+ 6D02              //  ______________________________________________________________________
 528+ 6D02              //
 529+ 6D02              // hp_fetch     -- a
 530+ 6D02                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 6D02             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 6D02             >
 530+ 6D02             >Dict_Ptr        defl    $
 530+ 6D02             >
 530+ 6D02             >//              ______________________________________________________________________
 530+ 6D02             >//              Heap part
 530+ 6D02             >
 530+ 6D02             >
 530+ 6D02             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E67C             >
 530+ E67C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E67C             >Latest_Definition defl  Heap_Ptr
 530+ E67C             >
 530+ E67C             >                // dummy db directives used to calculate length of namec
 530+ E67C 48 50 40    >                db      "HP@"
 530+ E67F             >len_NFA         defl    $ - temp_NFA
 530+ E67F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E67C             >
 530+ E67C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E67D 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E680             >                org     $-1                 // alter last byte of Name just above to set
 530+ E67F C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E680             >
 530+ E680 71 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E682             >Prev_Ptr        defl    Heap_Ptr
 530+ E682             >
 530+ E682             >mirror_Ptr      defl    $
 530+ E682             >
 530+ E682 04 6D       >                dw      Dict_Ptr + 2        // xt
 530+ E684             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E684             >
 530+ E684             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E684             >
 530+ E684             >//              ______________________________________________________________________
 530+ E684             >//              Dictionary part
 530+ E684             >
 530+ E684             >                org     Dict_Ptr
 530+ 6D02             >
 530+ 6D02 82 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 6D04             >
 530+ 6D04             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 6D04 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 6D07             >
 530+ 6D07             >
 530+ 6D07             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 6D07             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 6D07             >
 530+ 6D07             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D07 0B 6B 80 69                  dw      HP, FETCH               // hp @
 532+ 6D0B 4B 68                        dw      EXIT                    // ;
 533+ 6D0D
 534+ 6D0D              //  ______________________________________________________________________
 535+ 6D0D              //
 536+ 6D0D              // page-watermark   -- n
 537+ 6D0D              // how much a 8K page can be filled..
 538+ 6D0D                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 6D0D             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 6D0D             >
 538+ 6D0D             >Dict_Ptr        defl    $
 538+ 6D0D             >
 538+ 6D0D             >//              ______________________________________________________________________
 538+ 6D0D             >//              Heap part
 538+ 6D0D             >
 538+ 6D0D             >
 538+ 6D0D             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E684             >
 538+ E684             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E684             >Latest_Definition defl  Heap_Ptr
 538+ E684             >
 538+ E684             >                // dummy db directives used to calculate length of namec
 538+ E684 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E688 2D 57 41 54 >
 538+ E68C 45 52 4D 41 >
 538+ E690 52 4B       >
 538+ E692             >len_NFA         defl    $ - temp_NFA
 538+ E692             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E684             >
 538+ E684 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E685 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E689 2D 57 41 54 >
 538+ E68D 45 52 4D 41 >
 538+ E691 52 4B       >
 538+ E693             >                org     $-1                 // alter last byte of Name just above to set
 538+ E692 CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E693             >
 538+ E693 7C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E695             >Prev_Ptr        defl    Heap_Ptr
 538+ E695             >
 538+ E695             >mirror_Ptr      defl    $
 538+ E695             >
 538+ E695 0F 6D       >                dw      Dict_Ptr + 2        // xt
 538+ E697             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E697             >
 538+ E697             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E697             >
 538+ E697             >//              ______________________________________________________________________
 538+ E697             >//              Dictionary part
 538+ E697             >
 538+ E697             >                org     Dict_Ptr
 538+ 6D0D             >
 538+ 6D0D 95 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 6D0F             >
 538+ 6D0F             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 6D0F CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 6D12             >
 538+ 6D12             >
 538+ 6D12             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 6D12             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 6D12             >
 538+ 6D12             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 6D12 80 1F       >                dw      $1F80
 539+ 6D14
 540+ 6D14              //  ______________________________________________________________________
 541+ 6D14              //
 542+ 6D14              // skip-hp-page ha -- a
 543+ 6D14                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 6D14             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 6D14             >
 543+ 6D14             >Dict_Ptr        defl    $
 543+ 6D14             >
 543+ 6D14             >//              ______________________________________________________________________
 543+ 6D14             >//              Heap part
 543+ 6D14             >
 543+ 6D14             >
 543+ 6D14             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E697             >
 543+ E697             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E697             >Latest_Definition defl  Heap_Ptr
 543+ E697             >
 543+ E697             >                // dummy db directives used to calculate length of namec
 543+ E697 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E69B 2D 48 50 2D >
 543+ E69F 50 41 47 45 >
 543+ E6A3             >len_NFA         defl    $ - temp_NFA
 543+ E6A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E697             >
 543+ E697 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E698 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E69C 2D 48 50 2D >
 543+ E6A0 50 41 47 45 >
 543+ E6A4             >                org     $-1                 // alter last byte of Name just above to set
 543+ E6A3 C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E6A4             >
 543+ E6A4 84 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A6             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A6             >
 543+ E6A6             >mirror_Ptr      defl    $
 543+ E6A6             >
 543+ E6A6 16 6D       >                dw      Dict_Ptr + 2        // xt
 543+ E6A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A8             >
 543+ E6A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A8             >
 543+ E6A8             >//              ______________________________________________________________________
 543+ E6A8             >//              Dictionary part
 543+ E6A8             >
 543+ E6A8             >                org     Dict_Ptr
 543+ 6D14             >
 543+ 6D14 A6 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 6D16             >
 543+ 6D16             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 6D16 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 6D19             >
 543+ 6D19             >
 543+ 6D19             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 6D19             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 6D19             >
 543+ 6D19             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 6D19 04 6D                        dw      HP_FETCH                // hp@
 545+ 6D1B A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 6D1F 0B 68
 546+ 6D21 98 68                        dw      PLUS
 547+ 6D23 0F 6D                        dw      PAGE_WATERMARK
 548+ 6D25 0C 6C                        dw      GREATER
 549+ 6D27 F3 63                        dw      ZBRANCH
 550+ 6D29 12 00                        dw      Skip_Skip - $   // if
 551+ 6D2B 04 6D                        dw      HP_FETCH
 552+ 6D2D A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 6D31 1A 68
 553+ 6D33 B1 68 BF 68                  dw      ONE_PLUS, TWO_PLUS
 554+ 6D37 0B 6B 8A 69                  dw      HP, STORE
 555+ 6D3B              Skip_Skip:
 556+ 6D3B 4B 68                        dw      EXIT                    // ;
 557+ 6D3D              //  ______________________________________________________________________
 558+ 6D3D              //
 559+ 6D3D              // latest       -- nfa
 560+ 6D3D                              Colon_Def LATEST, "LATEST", is_normal
 560+ 6D3D             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 6D3D             >
 560+ 6D3D             >Dict_Ptr        defl    $
 560+ 6D3D             >
 560+ 6D3D             >//              ______________________________________________________________________
 560+ 6D3D             >//              Heap part
 560+ 6D3D             >
 560+ 6D3D             >
 560+ 6D3D             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A8             >
 560+ E6A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A8             >Latest_Definition defl  Heap_Ptr
 560+ E6A8             >
 560+ E6A8             >                // dummy db directives used to calculate length of namec
 560+ E6A8 4C 41 54 45 >                db      "LATEST"
 560+ E6AC 53 54       >
 560+ E6AE             >len_NFA         defl    $ - temp_NFA
 560+ E6AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A8             >
 560+ E6A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A9 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6AD 53 54       >
 560+ E6AF             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6AE D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6AF             >
 560+ E6AF 97 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6B1             >Prev_Ptr        defl    Heap_Ptr
 560+ E6B1             >
 560+ E6B1             >mirror_Ptr      defl    $
 560+ E6B1             >
 560+ E6B1 3F 6D       >                dw      Dict_Ptr + 2        // xt
 560+ E6B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6B3             >
 560+ E6B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6B3             >
 560+ E6B3             >//              ______________________________________________________________________
 560+ E6B3             >//              Dictionary part
 560+ E6B3             >
 560+ E6B3             >                org     Dict_Ptr
 560+ 6D3D             >
 560+ 6D3D B1 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 6D3F             >
 560+ 6D3F             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 6D3F CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 6D42             >
 560+ 6D42             >
 560+ 6D42             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 6D42             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 6D42             >
 560+ 6D42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 6D42 3B 6B                        dw      CURRENT                 // current
 562+ 6D44 80 69 80 69                  dw      FETCH, FETCH            // @ @
 563+ 6D48 D5 6C                        dw      FAR // Q TO HEAP
 564+ 6D4A 4B 68                        dw      EXIT                    // ;
 565+ 6D4C
 566+ 6D4C              //  ______________________________________________________________________
 567+ 6D4C              //
 568+ 6D4C              // >body        cfa -- pfa
 569+ 6D4C                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 6D4C             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 6D4C             >
 569+ 6D4C             >Dict_Ptr        defl    $
 569+ 6D4C             >
 569+ 6D4C             >//              ______________________________________________________________________
 569+ 6D4C             >//              Heap part
 569+ 6D4C             >
 569+ 6D4C             >
 569+ 6D4C             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6B3             >
 569+ E6B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6B3             >Latest_Definition defl  Heap_Ptr
 569+ E6B3             >
 569+ E6B3             >                // dummy db directives used to calculate length of namec
 569+ E6B3 3E 42 4F 44 >                db      ">BODY"
 569+ E6B7 59          >
 569+ E6B8             >len_NFA         defl    $ - temp_NFA
 569+ E6B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6B3             >
 569+ E6B3 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6B4 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B8 59          >
 569+ E6B9             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B8 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B9             >
 569+ E6B9 A8 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6BB             >Prev_Ptr        defl    Heap_Ptr
 569+ E6BB             >
 569+ E6BB             >mirror_Ptr      defl    $
 569+ E6BB             >
 569+ E6BB 4E 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6BD             >
 569+ E6BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6BD             >
 569+ E6BD             >//              ______________________________________________________________________
 569+ E6BD             >//              Dictionary part
 569+ E6BD             >
 569+ E6BD             >                org     Dict_Ptr
 569+ 6D4C             >
 569+ 6D4C BB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D4E             >
 569+ 6D4E             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D4E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D51             >
 569+ 6D51             >
 569+ 6D51             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D51             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D51             >
 569+ 6D51             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D51 8B 6A 98 68                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 6D55 4B 68                        dw      EXIT                    // ;
 572+ 6D57
 573+ 6D57              //  ______________________________________________________________________
 574+ 6D57              //
 575+ 6D57              // <name        cfa -- nfa
 576+ 6D57                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 6D57             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 6D57             >
 576+ 6D57             >Dict_Ptr        defl    $
 576+ 6D57             >
 576+ 6D57             >//              ______________________________________________________________________
 576+ 6D57             >//              Heap part
 576+ 6D57             >
 576+ 6D57             >
 576+ 6D57             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6BD             >
 576+ E6BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6BD             >Latest_Definition defl  Heap_Ptr
 576+ E6BD             >
 576+ E6BD             >                // dummy db directives used to calculate length of namec
 576+ E6BD 3C 4E 41 4D >                db      "<NAME"
 576+ E6C1 45          >
 576+ E6C2             >len_NFA         defl    $ - temp_NFA
 576+ E6C2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6BD             >
 576+ E6BD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6BE 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6C2 45          >
 576+ E6C3             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6C2 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6C3             >
 576+ E6C3 B3 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6C5             >Prev_Ptr        defl    Heap_Ptr
 576+ E6C5             >
 576+ E6C5             >mirror_Ptr      defl    $
 576+ E6C5             >
 576+ E6C5 59 6D       >                dw      Dict_Ptr + 2        // xt
 576+ E6C7             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C7             >
 576+ E6C7             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C7             >
 576+ E6C7             >//              ______________________________________________________________________
 576+ E6C7             >//              Dictionary part
 576+ E6C7             >
 576+ E6C7             >                org     Dict_Ptr
 576+ 6D57             >
 576+ 6D57 C5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 6D59             >
 576+ 6D59             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 6D59 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 6D5C             >
 576+ 6D5C             >
 576+ 6D5C             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 6D5C             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 6D5C             >
 576+ 6D5C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 6D5C CB 68                        dw      CELL_MINUS              // cell-
 578+ 6D5E 16 69 80 69                  dw      DUP, FETCH
 579+ 6D62 E0 6C                        dw      QHEAPP
 580+ 6D64 F3 63                        dw      ZBRANCH
 581+ 6D66 08 00                        dw      ToName_Skip - $
 582+ 6D68 80 69 D5 6C                  dw          FETCH, FAR
 583+ 6D6C CB 68                        dw          CELL_MINUS
 584+ 6D6E              ToName_Skip:                                    // endif
 585+ 6D6E
 586+ 6D6E B8 68                        dw      ONE_SUBTRACT            // 1-
 587+ 6D70 92 6A                        dw      NEG_ONE                 // -1
 588+ 6D72 6F 6C                        dw      TRAVERSE                // traverse
 589+ 6D74 4B 68                        dw      EXIT                    // ;
 590+ 6D76
 591+ 6D76              //  ______________________________________________________________________
 592+ 6D76              //
 593+ 6D76              // cfa          pfa -- cfa
 594+ 6D76                              Colon_Def CFA, "CFA", is_normal
 594+ 6D76             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 6D76             >
 594+ 6D76             >Dict_Ptr        defl    $
 594+ 6D76             >
 594+ 6D76             >//              ______________________________________________________________________
 594+ 6D76             >//              Heap part
 594+ 6D76             >
 594+ 6D76             >
 594+ 6D76             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C7             >
 594+ E6C7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C7             >Latest_Definition defl  Heap_Ptr
 594+ E6C7             >
 594+ E6C7             >                // dummy db directives used to calculate length of namec
 594+ E6C7 43 46 41    >                db      "CFA"
 594+ E6CA             >len_NFA         defl    $ - temp_NFA
 594+ E6CA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C7             >
 594+ E6C7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C8 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6CB             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6CA C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6CB             >
 594+ E6CB BD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6CD             >Prev_Ptr        defl    Heap_Ptr
 594+ E6CD             >
 594+ E6CD             >mirror_Ptr      defl    $
 594+ E6CD             >
 594+ E6CD 78 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6CF             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6CF             >
 594+ E6CF             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6CF             >
 594+ E6CF             >//              ______________________________________________________________________
 594+ E6CF             >//              Dictionary part
 594+ E6CF             >
 594+ E6CF             >                org     Dict_Ptr
 594+ 6D76             >
 594+ 6D76 CD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6D78             >
 594+ 6D78             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6D78 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6D7B             >
 594+ 6D7B             >
 594+ 6D7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6D7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6D7B             >
 594+ 6D7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6D7B 8B 6A DA 6B                  dw      THREE, SUBTRACT         // 3 -
 596+ 6D7F 4B 68                        dw      EXIT                    // ;
 597+ 6D81
 598+ 6D81              //  ______________________________________________________________________
 599+ 6D81              //
 600+ 6D81              // nfa          pfa -- nfa
 601+ 6D81                              Colon_Def NFA, "NFA", is_normal
 601+ 6D81             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 6D81             >
 601+ 6D81             >Dict_Ptr        defl    $
 601+ 6D81             >
 601+ 6D81             >//              ______________________________________________________________________
 601+ 6D81             >//              Heap part
 601+ 6D81             >
 601+ 6D81             >
 601+ 6D81             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6CF             >
 601+ E6CF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6CF             >Latest_Definition defl  Heap_Ptr
 601+ E6CF             >
 601+ E6CF             >                // dummy db directives used to calculate length of namec
 601+ E6CF 4E 46 41    >                db      "NFA"
 601+ E6D2             >len_NFA         defl    $ - temp_NFA
 601+ E6D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6CF             >
 601+ E6CF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6D0 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6D3             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6D2 C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6D3             >
 601+ E6D3 C7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6D5             >Prev_Ptr        defl    Heap_Ptr
 601+ E6D5             >
 601+ E6D5             >mirror_Ptr      defl    $
 601+ E6D5             >
 601+ E6D5 83 6D       >                dw      Dict_Ptr + 2        // xt
 601+ E6D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D7             >
 601+ E6D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D7             >
 601+ E6D7             >//              ______________________________________________________________________
 601+ E6D7             >//              Dictionary part
 601+ E6D7             >
 601+ E6D7             >                org     Dict_Ptr
 601+ 6D81             >
 601+ 6D81 D5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 6D83             >
 601+ 6D83             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 6D83 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 6D86             >
 601+ 6D86             >
 601+ 6D86             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 6D86             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 6D86             >
 601+ 6D86             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 6D86 78 6D                        dw      CFA                     // cfa
 603+ 6D88 59 6D                        dw      TO_NAME                 // traverse
 604+ 6D8A 4B 68                        dw      EXIT                    // ;
 605+ 6D8C
 606+ 6D8C              //  ______________________________________________________________________
 607+ 6D8C              //
 608+ 6D8C              // lfa          pfa -- lfa
 609+ 6D8C                              Colon_Def LFA, "LFA", is_normal
 609+ 6D8C             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 6D8C             >
 609+ 6D8C             >Dict_Ptr        defl    $
 609+ 6D8C             >
 609+ 6D8C             >//              ______________________________________________________________________
 609+ 6D8C             >//              Heap part
 609+ 6D8C             >
 609+ 6D8C             >
 609+ 6D8C             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D7             >
 609+ E6D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D7             >Latest_Definition defl  Heap_Ptr
 609+ E6D7             >
 609+ E6D7             >                // dummy db directives used to calculate length of namec
 609+ E6D7 4C 46 41    >                db      "LFA"
 609+ E6DA             >len_NFA         defl    $ - temp_NFA
 609+ E6DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D7             >
 609+ E6D7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D8 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6DB             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6DA C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6DB             >
 609+ E6DB CF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DD             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DD             >
 609+ E6DD             >mirror_Ptr      defl    $
 609+ E6DD             >
 609+ E6DD 8E 6D       >                dw      Dict_Ptr + 2        // xt
 609+ E6DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6DF             >
 609+ E6DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6DF             >
 609+ E6DF             >//              ______________________________________________________________________
 609+ E6DF             >//              Dictionary part
 609+ E6DF             >
 609+ E6DF             >                org     Dict_Ptr
 609+ 6D8C             >
 609+ 6D8C DD 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 6D8E             >
 609+ 6D8E             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 6D8E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 6D91             >
 609+ 6D91             >
 609+ 6D91             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 6D91             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 6D91             >
 609+ 6D91             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 6D91 83 6D                        dw      NFA                     // nfa
 611+ 6D93 7D 6A                        dw      ONE                     // 1
 612+ 6D95 6F 6C                        dw      TRAVERSE                // traverse
 613+ 6D97 B1 68                        dw      ONE_PLUS                // 1+
 614+ 6D99 4B 68                        dw      EXIT                    // ;
 615+ 6D9B
 616+ 6D9B              //  ______________________________________________________________________
 617+ 6D9B              //
 618+ 6D9B              // pfa          nfa -- pfa
 619+ 6D9B                              Colon_Def PFA, "PFA", is_normal
 619+ 6D9B             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 6D9B             >
 619+ 6D9B             >Dict_Ptr        defl    $
 619+ 6D9B             >
 619+ 6D9B             >//              ______________________________________________________________________
 619+ 6D9B             >//              Heap part
 619+ 6D9B             >
 619+ 6D9B             >
 619+ 6D9B             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6DF             >
 619+ E6DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6DF             >Latest_Definition defl  Heap_Ptr
 619+ E6DF             >
 619+ E6DF             >                // dummy db directives used to calculate length of namec
 619+ E6DF 50 46 41    >                db      "PFA"
 619+ E6E2             >len_NFA         defl    $ - temp_NFA
 619+ E6E2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6DF             >
 619+ E6DF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6E0 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6E3             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6E2 C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6E3             >
 619+ E6E3 D7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6E5             >Prev_Ptr        defl    Heap_Ptr
 619+ E6E5             >
 619+ E6E5             >mirror_Ptr      defl    $
 619+ E6E5             >
 619+ E6E5 9D 6D       >                dw      Dict_Ptr + 2        // xt
 619+ E6E7             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E7             >
 619+ E6E7             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E7             >
 619+ E6E7             >//              ______________________________________________________________________
 619+ E6E7             >//              Dictionary part
 619+ E6E7             >
 619+ E6E7             >                org     Dict_Ptr
 619+ 6D9B             >
 619+ 6D9B E5 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 6D9D             >
 619+ 6D9D             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 6D9D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 6DA0             >
 619+ 6DA0             >
 619+ 6DA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 6DA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 6DA0             >
 619+ 6DA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 6DA0 F3 6C                        dw      QTOHEAP
 621+ 6DA2 7D 6A                        dw      ONE                     // 1
 622+ 6DA4 6F 6C                        dw      TRAVERSE                // traverse
 623+ 6DA6 B1 68                        dw      ONE_PLUS                // 1+
 624+ 6DA8 C7 68                        dw      CELL_PLUS               // cell+
 625+ 6DAA C4 6C                        dw      QMMU7
 626+ 6DAC F3 63                        dw      ZBRANCH
 627+ 6DAE 0E 00                        dw      PFA_Skip - $
 628+ 6DB0 8C 6C                        dw          MMU7_FETCH
 629+ 6DB2 7D 6A DA 6B                  dw          ONE, SUBTRACT
 630+ 6DB6 F3 63                        dw          ZBRANCH
 631+ 6DB8 04 00                        dw          PFA_Skip - $
 632+ 6DBA 80 69                        dw              FETCH
 633+ 6DBC              PFA_Skip:                                    // endif
 634+ 6DBC 4E 6D                        dw      TO_BODY                 // >body
 635+ 6DBE 4B 68                        dw      EXIT                    // ;
 636+ 6DC0
 637+ 6DC0              //  ______________________________________________________________________
 638+ 6DC0              //
 639+ 6DC0              // !csp         --
 640+ 6DC0              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 6DC0                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 6DC0             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 6DC0             >
 641+ 6DC0             >Dict_Ptr        defl    $
 641+ 6DC0             >
 641+ 6DC0             >//              ______________________________________________________________________
 641+ 6DC0             >//              Heap part
 641+ 6DC0             >
 641+ 6DC0             >
 641+ 6DC0             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E7             >
 641+ E6E7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E7             >Latest_Definition defl  Heap_Ptr
 641+ E6E7             >
 641+ E6E7             >                // dummy db directives used to calculate length of namec
 641+ E6E7 21 43 53 50 >                db      "!CSP"
 641+ E6EB             >len_NFA         defl    $ - temp_NFA
 641+ E6EB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E7             >
 641+ E6E7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E8 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6EC             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6EB D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6EC             >
 641+ E6EC DF 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6EE             >Prev_Ptr        defl    Heap_Ptr
 641+ E6EE             >
 641+ E6EE             >mirror_Ptr      defl    $
 641+ E6EE             >
 641+ E6EE C2 6D       >                dw      Dict_Ptr + 2        // xt
 641+ E6F0             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6F0             >
 641+ E6F0             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6F0             >
 641+ E6F0             >//              ______________________________________________________________________
 641+ E6F0             >//              Dictionary part
 641+ E6F0             >
 641+ E6F0             >                org     Dict_Ptr
 641+ 6DC0             >
 641+ 6DC0 EE 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 6DC2             >
 641+ 6DC2             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 6DC2 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 6DC5             >
 641+ 6DC5             >
 641+ 6DC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 6DC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 6DC5             >
 641+ 6DC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 6DC5 32 68                        dw      SPFETCH                 // sp@
 643+ 6DC7 59 6B 8A 69                  dw      CSP, STORE              // csp !
 644+ 6DCB 4B 68                        dw      EXIT                    // ;
 645+ 6DCD
 646+ 6DCD              //  ______________________________________________________________________
 647+ 6DCD              //
 648+ 6DCD              // ?error       f n --
 649+ 6DCD              // raise error n if flag f it true
 650+ 6DCD                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 6DCD             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 6DCD             >
 650+ 6DCD             >Dict_Ptr        defl    $
 650+ 6DCD             >
 650+ 6DCD             >//              ______________________________________________________________________
 650+ 6DCD             >//              Heap part
 650+ 6DCD             >
 650+ 6DCD             >
 650+ 6DCD             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6F0             >
 650+ E6F0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6F0             >Latest_Definition defl  Heap_Ptr
 650+ E6F0             >
 650+ E6F0             >                // dummy db directives used to calculate length of namec
 650+ E6F0 3F 45 52 52 >                db      "?ERROR"
 650+ E6F4 4F 52       >
 650+ E6F6             >len_NFA         defl    $ - temp_NFA
 650+ E6F6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6F0             >
 650+ E6F0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6F1 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6F5 4F 52       >
 650+ E6F7             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F6 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F7             >
 650+ E6F7 E7 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F9             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F9             >
 650+ E6F9             >mirror_Ptr      defl    $
 650+ E6F9             >
 650+ E6F9 CF 6D       >                dw      Dict_Ptr + 2        // xt
 650+ E6FB             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6FB             >
 650+ E6FB             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6FB             >
 650+ E6FB             >//              ______________________________________________________________________
 650+ E6FB             >//              Dictionary part
 650+ E6FB             >
 650+ E6FB             >                org     Dict_Ptr
 650+ 6DCD             >
 650+ 6DCD F9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 6DCF             >
 650+ 6DCF             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 6DCF CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 6DD2             >
 650+ 6DD2             >
 650+ 6DD2             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 6DD2             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 6DD2             >
 650+ 6DD2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 6DD2 0F 69                        dw      SWAP                    // swap
 652+ 6DD4                                                              // if
 653+ 6DD4 F3 63                        dw      ZBRANCH
 654+ 6DD6 08 00                        dw      QError_Else - $
 655+ 6DD8 09 73                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 6DDA                                                              // else
 657+ 6DDA EF 63                        dw      BRANCH
 658+ 6DDC 04 00                        dw      QError_Endif - $
 659+ 6DDE              QError_Else:
 660+ 6DDE FB 68                        dw          DROP                //      drop
 661+ 6DE0              QError_Endif:                                   // endif
 662+ 6DE0 4B 68                        dw      EXIT                    // ;
 663+ 6DE2
 664+ 6DE2              //  ______________________________________________________________________
 665+ 6DE2              //
 666+ 6DE2              // ?comp       --
 667+ 6DE2              // raise msg #17 if not compiling
 668+ 6DE2                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 6DE2             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 6DE2             >
 668+ 6DE2             >Dict_Ptr        defl    $
 668+ 6DE2             >
 668+ 6DE2             >//              ______________________________________________________________________
 668+ 6DE2             >//              Heap part
 668+ 6DE2             >
 668+ 6DE2             >
 668+ 6DE2             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6FB             >
 668+ E6FB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6FB             >Latest_Definition defl  Heap_Ptr
 668+ E6FB             >
 668+ E6FB             >                // dummy db directives used to calculate length of namec
 668+ E6FB 3F 43 4F 4D >                db      "?COMP"
 668+ E6FF 50          >
 668+ E700             >len_NFA         defl    $ - temp_NFA
 668+ E700             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6FB             >
 668+ E6FB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6FC 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E700 50          >
 668+ E701             >                org     $-1                 // alter last byte of Name just above to set
 668+ E700 D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E701             >
 668+ E701 F0 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E703             >Prev_Ptr        defl    Heap_Ptr
 668+ E703             >
 668+ E703             >mirror_Ptr      defl    $
 668+ E703             >
 668+ E703 E4 6D       >                dw      Dict_Ptr + 2        // xt
 668+ E705             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E705             >
 668+ E705             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E705             >
 668+ E705             >//              ______________________________________________________________________
 668+ E705             >//              Dictionary part
 668+ E705             >
 668+ E705             >                org     Dict_Ptr
 668+ 6DE2             >
 668+ 6DE2 03 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 6DE4             >
 668+ 6DE4             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 6DE4 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 6DE7             >
 668+ 6DE7             >
 668+ 6DE7             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 6DE7             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 6DE7             >
 668+ 6DE7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 6DE7 41 6B 80 69                  dw      STATE, FETCH            // state @
 670+ 6DEB 70 68                        dw      ZEQUAL                  // 0=
 671+ 6DED A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 6DF1 CF 6D                        dw      QERROR                  // ?error
 673+ 6DF3 4B 68                        dw      EXIT                    // ;
 674+ 6DF5
 675+ 6DF5              //  ______________________________________________________________________
 676+ 6DF5              //
 677+ 6DF5              // ?exec       --
 678+ 6DF5              // raise msg #18 if compiling
 679+ 6DF5                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 6DF5             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 6DF5             >
 679+ 6DF5             >Dict_Ptr        defl    $
 679+ 6DF5             >
 679+ 6DF5             >//              ______________________________________________________________________
 679+ 6DF5             >//              Heap part
 679+ 6DF5             >
 679+ 6DF5             >
 679+ 6DF5             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E705             >
 679+ E705             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E705             >Latest_Definition defl  Heap_Ptr
 679+ E705             >
 679+ E705             >                // dummy db directives used to calculate length of namec
 679+ E705 3F 45 58 45 >                db      "?EXEC"
 679+ E709 43          >
 679+ E70A             >len_NFA         defl    $ - temp_NFA
 679+ E70A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E705             >
 679+ E705 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E706 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E70A 43          >
 679+ E70B             >                org     $-1                 // alter last byte of Name just above to set
 679+ E70A C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E70B             >
 679+ E70B FB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E70D             >Prev_Ptr        defl    Heap_Ptr
 679+ E70D             >
 679+ E70D             >mirror_Ptr      defl    $
 679+ E70D             >
 679+ E70D F7 6D       >                dw      Dict_Ptr + 2        // xt
 679+ E70F             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E70F             >
 679+ E70F             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E70F             >
 679+ E70F             >//              ______________________________________________________________________
 679+ E70F             >//              Dictionary part
 679+ E70F             >
 679+ E70F             >                org     Dict_Ptr
 679+ 6DF5             >
 679+ 6DF5 0D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 6DF7             >
 679+ 6DF7             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 6DF7 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 6DFA             >
 679+ 6DFA             >
 679+ 6DFA             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 6DFA             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 6DFA             >
 679+ 6DFA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 6DFA 41 6B 80 69                  dw      STATE, FETCH            // state @
 681+ 6DFE A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 6E02 CF 6D                        dw      QERROR                  // ?error
 683+ 6E04 4B 68                        dw      EXIT                    // ;
 684+ 6E06
 685+ 6E06              //  ______________________________________________________________________
 686+ 6E06              //
 687+ 6E06              // ?pairs       n1 n2 --
 688+ 6E06              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 6E06                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 6E06             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 6E06             >
 689+ 6E06             >Dict_Ptr        defl    $
 689+ 6E06             >
 689+ 6E06             >//              ______________________________________________________________________
 689+ 6E06             >//              Heap part
 689+ 6E06             >
 689+ 6E06             >
 689+ 6E06             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E70F             >
 689+ E70F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E70F             >Latest_Definition defl  Heap_Ptr
 689+ E70F             >
 689+ E70F             >                // dummy db directives used to calculate length of namec
 689+ E70F 3F 50 41 49 >                db      "?PAIRS"
 689+ E713 52 53       >
 689+ E715             >len_NFA         defl    $ - temp_NFA
 689+ E715             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E70F             >
 689+ E70F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E710 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E714 52 53       >
 689+ E716             >                org     $-1                 // alter last byte of Name just above to set
 689+ E715 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E716             >
 689+ E716 05 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E718             >Prev_Ptr        defl    Heap_Ptr
 689+ E718             >
 689+ E718             >mirror_Ptr      defl    $
 689+ E718             >
 689+ E718 08 6E       >                dw      Dict_Ptr + 2        // xt
 689+ E71A             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E71A             >
 689+ E71A             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E71A             >
 689+ E71A             >//              ______________________________________________________________________
 689+ E71A             >//              Dictionary part
 689+ E71A             >
 689+ E71A             >                org     Dict_Ptr
 689+ 6E06             >
 689+ 6E06 18 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 6E08             >
 689+ 6E08             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 6E08 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 6E0B             >
 689+ 6E0B             >
 689+ 6E0B             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 6E0B             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 6E0B             >
 689+ 6E0B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 6E0B DA 6B                        dw      SUBTRACT                // -
 691+ 6E0D A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 6E11 CF 6D                        dw      QERROR                  // ?error
 693+ 6E13 4B 68                        dw      EXIT                    // ;
 694+ 6E15
 695+ 6E15              //  ______________________________________________________________________
 696+ 6E15              //
 697+ 6E15              // ?csp       --
 698+ 6E15              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 6E15              // Compiler relies on that for  syntax checking of structures
 700+ 6E15                              Colon_Def QCSP, "?CSP", is_normal
 700+ 6E15             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 6E15             >
 700+ 6E15             >Dict_Ptr        defl    $
 700+ 6E15             >
 700+ 6E15             >//              ______________________________________________________________________
 700+ 6E15             >//              Heap part
 700+ 6E15             >
 700+ 6E15             >
 700+ 6E15             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E71A             >
 700+ E71A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E71A             >Latest_Definition defl  Heap_Ptr
 700+ E71A             >
 700+ E71A             >                // dummy db directives used to calculate length of namec
 700+ E71A 3F 43 53 50 >                db      "?CSP"
 700+ E71E             >len_NFA         defl    $ - temp_NFA
 700+ E71E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E71A             >
 700+ E71A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E71B 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E71F             >                org     $-1                 // alter last byte of Name just above to set
 700+ E71E D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E71F             >
 700+ E71F 0F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E721             >Prev_Ptr        defl    Heap_Ptr
 700+ E721             >
 700+ E721             >mirror_Ptr      defl    $
 700+ E721             >
 700+ E721 17 6E       >                dw      Dict_Ptr + 2        // xt
 700+ E723             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E723             >
 700+ E723             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E723             >
 700+ E723             >//              ______________________________________________________________________
 700+ E723             >//              Dictionary part
 700+ E723             >
 700+ E723             >                org     Dict_Ptr
 700+ 6E15             >
 700+ 6E15 21 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 6E17             >
 700+ 6E17             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 6E17 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 6E1A             >
 700+ 6E1A             >
 700+ 6E1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 6E1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 6E1A             >
 700+ 6E1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 6E1A 32 68                        dw      SPFETCH                 // sp@
 702+ 6E1C 59 6B 80 69                  dw      CSP, FETCH              // csp @
 703+ 6E20 DA 6B                        dw      SUBTRACT                // -
 704+ 6E22 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 6E26 CF 6D                        dw      QERROR                  // ?error
 706+ 6E28 4B 68                        dw      EXIT                    // ;
 707+ 6E2A
 708+ 6E2A              //  ______________________________________________________________________
 709+ 6E2A              //
 710+ 6E2A              // ?loading      --
 711+ 6E2A              // raise msg #22 if not loading
 712+ 6E2A                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 6E2A             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 6E2A             >
 712+ 6E2A             >Dict_Ptr        defl    $
 712+ 6E2A             >
 712+ 6E2A             >//              ______________________________________________________________________
 712+ 6E2A             >//              Heap part
 712+ 6E2A             >
 712+ 6E2A             >
 712+ 6E2A             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E723             >
 712+ E723             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E723             >Latest_Definition defl  Heap_Ptr
 712+ E723             >
 712+ E723             >                // dummy db directives used to calculate length of namec
 712+ E723 3F 4C 4F 41 >                db      "?LOADING"
 712+ E727 44 49 4E 47 >
 712+ E72B             >len_NFA         defl    $ - temp_NFA
 712+ E72B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E723             >
 712+ E723 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E724 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E728 44 49 4E 47 >
 712+ E72C             >                org     $-1                 // alter last byte of Name just above to set
 712+ E72B C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E72C             >
 712+ E72C 1A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E72E             >Prev_Ptr        defl    Heap_Ptr
 712+ E72E             >
 712+ E72E             >mirror_Ptr      defl    $
 712+ E72E             >
 712+ E72E 2C 6E       >                dw      Dict_Ptr + 2        // xt
 712+ E730             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E730             >
 712+ E730             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E730             >
 712+ E730             >//              ______________________________________________________________________
 712+ E730             >//              Dictionary part
 712+ E730             >
 712+ E730             >                org     Dict_Ptr
 712+ 6E2A             >
 712+ 6E2A 2E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 6E2C             >
 712+ 6E2C             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 6E2C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 6E2F             >
 712+ 6E2F             >
 712+ 6E2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 6E2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 6E2F             >
 712+ 6E2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 6E2F 17 6B 80 69                  dw      BLK, FETCH              // blk @
 714+ 6E33 70 68                        dw      ZEQUAL                  // 0=
 715+ 6E35 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 6E39 CF 6D                        dw      QERROR                  // ?error
 717+ 6E3B 4B 68                        dw      EXIT                    // ;
 718+ 6E3D
 719+ 6E3D              //  ______________________________________________________________________
 720+ 6E3D              //
 721+ 6E3D              // compile      --
 722+ 6E3D              // compiles the following word
 723+ 6E3D                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 6E3D             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 6E3D             >
 723+ 6E3D             >Dict_Ptr        defl    $
 723+ 6E3D             >
 723+ 6E3D             >//              ______________________________________________________________________
 723+ 6E3D             >//              Heap part
 723+ 6E3D             >
 723+ 6E3D             >
 723+ 6E3D             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E730             >
 723+ E730             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E730             >Latest_Definition defl  Heap_Ptr
 723+ E730             >
 723+ E730             >                // dummy db directives used to calculate length of namec
 723+ E730 43 4F 4D 50 >                db      "COMPILE"
 723+ E734 49 4C 45    >
 723+ E737             >len_NFA         defl    $ - temp_NFA
 723+ E737             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E730             >
 723+ E730 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E731 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E735 49 4C 45    >
 723+ E738             >                org     $-1                 // alter last byte of Name just above to set
 723+ E737 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E738             >
 723+ E738 23 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E73A             >Prev_Ptr        defl    Heap_Ptr
 723+ E73A             >
 723+ E73A             >mirror_Ptr      defl    $
 723+ E73A             >
 723+ E73A 3F 6E       >                dw      Dict_Ptr + 2        // xt
 723+ E73C             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E73C             >
 723+ E73C             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E73C             >
 723+ E73C             >//              ______________________________________________________________________
 723+ E73C             >//              Dictionary part
 723+ E73C             >
 723+ E73C             >                org     Dict_Ptr
 723+ 6E3D             >
 723+ 6E3D 3A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 6E3F             >
 723+ 6E3F             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 6E3F CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 6E42             >
 723+ 6E42             >
 723+ 6E42             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 6E42             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 6E42             >
 723+ 6E42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 6E42 E4 6D                        dw      QCOMP                   // ?comp
 725+ 6E44 60 68                        dw      R_TO                    // r>
 726+ 6E46 16 69 C7 68                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 6E4A 55 68                        dw      TO_R                    // >r
 728+ 6E4C 80 69 B1 6B                  dw      FETCH, COMMA            // @ ,
 729+ 6E50 4B 68                        dw      EXIT                    // ;
 730+ 6E52
 731+ 6E52              //  ______________________________________________________________________
 732+ 6E52              //
 733+ 6E52              // compile,     --
 734+ 6E52              // compiles the following word
 735+ 6E52                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 6E52             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 6E52             >
 735+ 6E52             >Dict_Ptr        defl    $
 735+ 6E52             >
 735+ 6E52             >//              ______________________________________________________________________
 735+ 6E52             >//              Heap part
 735+ 6E52             >
 735+ 6E52             >
 735+ 6E52             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E73C             >
 735+ E73C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E73C             >Latest_Definition defl  Heap_Ptr
 735+ E73C             >
 735+ E73C             >                // dummy db directives used to calculate length of namec
 735+ E73C 43 4F 4D 50 >                db      "COMPILE,"
 735+ E740 49 4C 45 2C >
 735+ E744             >len_NFA         defl    $ - temp_NFA
 735+ E744             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E73C             >
 735+ E73C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E73D 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E741 49 4C 45 2C >
 735+ E745             >                org     $-1                 // alter last byte of Name just above to set
 735+ E744 AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E745             >
 735+ E745 30 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E747             >Prev_Ptr        defl    Heap_Ptr
 735+ E747             >
 735+ E747             >mirror_Ptr      defl    $
 735+ E747             >
 735+ E747 54 6E       >                dw      Dict_Ptr + 2        // xt
 735+ E749             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E749             >
 735+ E749             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E749             >
 735+ E749             >//              ______________________________________________________________________
 735+ E749             >//              Dictionary part
 735+ E749             >
 735+ E749             >                org     Dict_Ptr
 735+ 6E52             >
 735+ 6E52 47 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 6E54             >
 735+ 6E54             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 6E54 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 6E57             >
 735+ 6E57             >
 735+ 6E57             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 6E57             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 6E57             >
 735+ 6E57             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 6E57              //              dw      QCOMP                   // ?comp
 737+ 6E57 B1 6B                        dw      COMMA                   // ,
 738+ 6E59 4B 68                        dw      EXIT                    // ;
 739+ 6E5B
 740+ 6E5B              //  ______________________________________________________________________
 741+ 6E5B              //
 742+ 6E5B              // [            --
 743+ 6E5B              // stop compilation
 744+ 6E5B                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 6E5B             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 6E5B             >
 744+ 6E5B             >Dict_Ptr        defl    $
 744+ 6E5B             >
 744+ 6E5B             >//              ______________________________________________________________________
 744+ 6E5B             >//              Heap part
 744+ 6E5B             >
 744+ 6E5B             >
 744+ 6E5B             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E749             >
 744+ E749             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E749             >Latest_Definition defl  Heap_Ptr
 744+ E749             >
 744+ E749             >                // dummy db directives used to calculate length of namec
 744+ E749 5B          >                db      "["
 744+ E74A             >len_NFA         defl    $ - temp_NFA
 744+ E74A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E749             >
 744+ E749 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E74A 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E74B             >                org     $-1                 // alter last byte of Name just above to set
 744+ E74A DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E74B             >
 744+ E74B 3C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E74D             >Prev_Ptr        defl    Heap_Ptr
 744+ E74D             >
 744+ E74D             >mirror_Ptr      defl    $
 744+ E74D             >
 744+ E74D 5D 6E       >                dw      Dict_Ptr + 2        // xt
 744+ E74F             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E74F             >
 744+ E74F             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E74F             >
 744+ E74F             >//              ______________________________________________________________________
 744+ E74F             >//              Dictionary part
 744+ E74F             >
 744+ E74F             >                org     Dict_Ptr
 744+ 6E5B             >
 744+ 6E5B 4D 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 6E5D             >
 744+ 6E5D             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 6E5D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 6E60             >
 744+ 6E60             >
 744+ 6E60             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 6E60             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 6E60             >
 744+ 6E60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 6E60 76 6A                        dw      ZERO                    // 0
 746+ 6E62 41 6B 8A 69                  dw      STATE, STORE            // state !
 747+ 6E66 4B 68                        dw      EXIT                    // ; immediate
 748+ 6E68
 749+ 6E68              //  ______________________________________________________________________
 750+ 6E68              //
 751+ 6E68              // ]            --
 752+ 6E68              // start compilation
 753+ 6E68                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 6E68             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 6E68             >
 753+ 6E68             >Dict_Ptr        defl    $
 753+ 6E68             >
 753+ 6E68             >//              ______________________________________________________________________
 753+ 6E68             >//              Heap part
 753+ 6E68             >
 753+ 6E68             >
 753+ 6E68             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E74F             >
 753+ E74F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E74F             >Latest_Definition defl  Heap_Ptr
 753+ E74F             >
 753+ E74F             >                // dummy db directives used to calculate length of namec
 753+ E74F 5D          >                db      "]"
 753+ E750             >len_NFA         defl    $ - temp_NFA
 753+ E750             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E74F             >
 753+ E74F 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E750 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E751             >                org     $-1                 // alter last byte of Name just above to set
 753+ E750 DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E751             >
 753+ E751 49 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E753             >Prev_Ptr        defl    Heap_Ptr
 753+ E753             >
 753+ E753             >mirror_Ptr      defl    $
 753+ E753             >
 753+ E753 6A 6E       >                dw      Dict_Ptr + 2        // xt
 753+ E755             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E755             >
 753+ E755             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E755             >
 753+ E755             >//              ______________________________________________________________________
 753+ E755             >//              Dictionary part
 753+ E755             >
 753+ E755             >                org     Dict_Ptr
 753+ 6E68             >
 753+ 6E68 53 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 6E6A             >
 753+ 6E6A             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 6E6A CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 6E6D             >
 753+ 6E6D             >
 753+ 6E6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 6E6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 6E6D             >
 753+ 6E6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 6E6D A3 63 C0 00                  dw      LIT, $C0                // 192
 755+ 6E71 41 6B 8A 69                  dw      STATE, STORE            // state !
 756+ 6E75 4B 68                        dw      EXIT                    // ;
 757+ 6E77
 758+ 6E77              //  ______________________________________________________________________
 759+ 6E77              //
 760+ 6E77              // smudge       --
 761+ 6E77              // toggle smudge bit of latest definition
 762+ 6E77                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 6E77             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 6E77             >
 762+ 6E77             >Dict_Ptr        defl    $
 762+ 6E77             >
 762+ 6E77             >//              ______________________________________________________________________
 762+ 6E77             >//              Heap part
 762+ 6E77             >
 762+ 6E77             >
 762+ 6E77             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E755             >
 762+ E755             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E755             >Latest_Definition defl  Heap_Ptr
 762+ E755             >
 762+ E755             >                // dummy db directives used to calculate length of namec
 762+ E755 53 4D 55 44 >                db      "SMUDGE"
 762+ E759 47 45       >
 762+ E75B             >len_NFA         defl    $ - temp_NFA
 762+ E75B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E755             >
 762+ E755 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E756 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E75A 47 45       >
 762+ E75C             >                org     $-1                 // alter last byte of Name just above to set
 762+ E75B C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E75C             >
 762+ E75C 4F 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E75E             >Prev_Ptr        defl    Heap_Ptr
 762+ E75E             >
 762+ E75E             >mirror_Ptr      defl    $
 762+ E75E             >
 762+ E75E 79 6E       >                dw      Dict_Ptr + 2        // xt
 762+ E760             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E760             >
 762+ E760             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E760             >
 762+ E760             >//              ______________________________________________________________________
 762+ E760             >//              Dictionary part
 762+ E760             >
 762+ E760             >                org     Dict_Ptr
 762+ 6E77             >
 762+ 6E77 5E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 6E79             >
 762+ 6E79             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 6E79 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 6E7C             >
 762+ 6E7C             >
 762+ 6E7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 6E7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 6E7C             >
 762+ 6E7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 6E7C 3F 6D                        dw      LATEST                  // latest
 764+ 6E7E A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 6E82 77 69                        dw      TOGGLE                  // toggle
 766+ 6E84 4B 68                        dw      EXIT                    // ;
 767+ 6E86
 768+ 6E86              //  ______________________________________________________________________
 769+ 6E86              //
 770+ 6E86              // immediate    --
 771+ 6E86              // make immediate the latest definition
 772+ 6E86                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 6E86             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 6E86             >
 772+ 6E86             >Dict_Ptr        defl    $
 772+ 6E86             >
 772+ 6E86             >//              ______________________________________________________________________
 772+ 6E86             >//              Heap part
 772+ 6E86             >
 772+ 6E86             >
 772+ 6E86             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E760             >
 772+ E760             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E760             >Latest_Definition defl  Heap_Ptr
 772+ E760             >
 772+ E760             >                // dummy db directives used to calculate length of namec
 772+ E760 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E764 44 49 41 54 >
 772+ E768 45          >
 772+ E769             >len_NFA         defl    $ - temp_NFA
 772+ E769             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E760             >
 772+ E760 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E761 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E765 44 49 41 54 >
 772+ E769 45          >
 772+ E76A             >                org     $-1                 // alter last byte of Name just above to set
 772+ E769 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E76A             >
 772+ E76A 55 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E76C             >Prev_Ptr        defl    Heap_Ptr
 772+ E76C             >
 772+ E76C             >mirror_Ptr      defl    $
 772+ E76C             >
 772+ E76C 88 6E       >                dw      Dict_Ptr + 2        // xt
 772+ E76E             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E76E             >
 772+ E76E             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E76E             >
 772+ E76E             >//              ______________________________________________________________________
 772+ E76E             >//              Dictionary part
 772+ E76E             >
 772+ E76E             >                org     Dict_Ptr
 772+ 6E86             >
 772+ 6E86 6C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 6E88             >
 772+ 6E88             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 6E88 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 6E8B             >
 772+ 6E8B             >
 772+ 6E8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 6E8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 6E8B             >
 772+ 6E8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 6E8B 3F 6D                        dw      LATEST                  // latest
 774+ 6E8D A3 63 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 775+ 6E91 77 69                        dw      TOGGLE                  // toggle
 776+ 6E93 4B 68                        dw      EXIT                    // ;
 777+ 6E95
 778+ 6E95              //  ______________________________________________________________________
 779+ 6E95              //
 780+ 6E95              // hex          --
 781+ 6E95              // change numeration base
 782+ 6E95                              Colon_Def HEX, "HEX", is_normal
 782+ 6E95             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 6E95             >
 782+ 6E95             >Dict_Ptr        defl    $
 782+ 6E95             >
 782+ 6E95             >//              ______________________________________________________________________
 782+ 6E95             >//              Heap part
 782+ 6E95             >
 782+ 6E95             >
 782+ 6E95             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E76E             >
 782+ E76E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E76E             >Latest_Definition defl  Heap_Ptr
 782+ E76E             >
 782+ E76E             >                // dummy db directives used to calculate length of namec
 782+ E76E 48 45 58    >                db      "HEX"
 782+ E771             >len_NFA         defl    $ - temp_NFA
 782+ E771             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E76E             >
 782+ E76E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E76F 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E772             >                org     $-1                 // alter last byte of Name just above to set
 782+ E771 D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E772             >
 782+ E772 60 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E774             >Prev_Ptr        defl    Heap_Ptr
 782+ E774             >
 782+ E774             >mirror_Ptr      defl    $
 782+ E774             >
 782+ E774 97 6E       >                dw      Dict_Ptr + 2        // xt
 782+ E776             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E776             >
 782+ E776             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E776             >
 782+ E776             >//              ______________________________________________________________________
 782+ E776             >//              Dictionary part
 782+ E776             >
 782+ E776             >                org     Dict_Ptr
 782+ 6E95             >
 782+ 6E95 74 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 6E97             >
 782+ 6E97             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 6E97 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 6E9A             >
 782+ 6E9A             >
 782+ 6E9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 6E9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 6E9A             >
 782+ 6E9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 6E9A A3 63 10 00                  dw      LIT, 16                 // 16
 784+ 6E9E 47 6B 8A 69                  dw      BASE, STORE             // base !
 785+ 6EA2 4B 68                        dw      EXIT                    // ;
 786+ 6EA4
 787+ 6EA4              //  ______________________________________________________________________
 788+ 6EA4              //
 789+ 6EA4              // decimal      --
 790+ 6EA4              // change numeration base
 791+ 6EA4                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 6EA4             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 6EA4             >
 791+ 6EA4             >Dict_Ptr        defl    $
 791+ 6EA4             >
 791+ 6EA4             >//              ______________________________________________________________________
 791+ 6EA4             >//              Heap part
 791+ 6EA4             >
 791+ 6EA4             >
 791+ 6EA4             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E776             >
 791+ E776             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E776             >Latest_Definition defl  Heap_Ptr
 791+ E776             >
 791+ E776             >                // dummy db directives used to calculate length of namec
 791+ E776 44 45 43 49 >                db      "DECIMAL"
 791+ E77A 4D 41 4C    >
 791+ E77D             >len_NFA         defl    $ - temp_NFA
 791+ E77D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E776             >
 791+ E776 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E777 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E77B 4D 41 4C    >
 791+ E77E             >                org     $-1                 // alter last byte of Name just above to set
 791+ E77D CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E77E             >
 791+ E77E 6E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E780             >Prev_Ptr        defl    Heap_Ptr
 791+ E780             >
 791+ E780             >mirror_Ptr      defl    $
 791+ E780             >
 791+ E780 A6 6E       >                dw      Dict_Ptr + 2        // xt
 791+ E782             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E782             >
 791+ E782             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E782             >
 791+ E782             >//              ______________________________________________________________________
 791+ E782             >//              Dictionary part
 791+ E782             >
 791+ E782             >                org     Dict_Ptr
 791+ 6EA4             >
 791+ 6EA4 80 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 6EA6             >
 791+ 6EA6             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 6EA6 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 6EA9             >
 791+ 6EA9             >
 791+ 6EA9             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 6EA9             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 6EA9             >
 791+ 6EA9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 6EA9 A3 63 0A 00                  dw      LIT, 10                 // 10
 793+ 6EAD 47 6B 8A 69                  dw      BASE, STORE             // base !
 794+ 6EB1 4B 68                        dw      EXIT                    // ;
 795+ 6EB3
 796+ 6EB3              //  ______________________________________________________________________
 797+ 6EB3              //
 798+ 6EB3              // (;code)       --
 799+ 6EB3              // patch to CFA to call/jump to the "following code"
 800+ 6EB3                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 6EB3             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 6EB3             >
 800+ 6EB3             >Dict_Ptr        defl    $
 800+ 6EB3             >
 800+ 6EB3             >//              ______________________________________________________________________
 800+ 6EB3             >//              Heap part
 800+ 6EB3             >
 800+ 6EB3             >
 800+ 6EB3             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E782             >
 800+ E782             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E782             >Latest_Definition defl  Heap_Ptr
 800+ E782             >
 800+ E782             >                // dummy db directives used to calculate length of namec
 800+ E782 28 3B 43 4F >                db      "(;CODE)"
 800+ E786 44 45 29    >
 800+ E789             >len_NFA         defl    $ - temp_NFA
 800+ E789             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E782             >
 800+ E782 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E783 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E787 44 45 29    >
 800+ E78A             >                org     $-1                 // alter last byte of Name just above to set
 800+ E789 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E78A             >
 800+ E78A 76 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E78C             >Prev_Ptr        defl    Heap_Ptr
 800+ E78C             >
 800+ E78C             >mirror_Ptr      defl    $
 800+ E78C             >
 800+ E78C B5 6E       >                dw      Dict_Ptr + 2        // xt
 800+ E78E             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78E             >
 800+ E78E             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78E             >
 800+ E78E             >//              ______________________________________________________________________
 800+ E78E             >//              Dictionary part
 800+ E78E             >
 800+ E78E             >                org     Dict_Ptr
 800+ 6EB3             >
 800+ 6EB3 8C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 6EB5             >
 800+ 6EB5             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 6EB5 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 6EB8             >
 800+ 6EB8             >
 800+ 6EB8             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 6EB8             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 6EB8             >
 800+ 6EB8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 6EB8 60 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 6EBA 3F 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 6EBC 9D 6D 78 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 6EC0
 805+ 6EC0 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 6EC4 F2 68 9E 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 6EC8 B1 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 6ECA
 809+ 6ECA 8A 69                        dw      STORE                   // !
 810+ 6ECC 4B 68                        dw      EXIT                    // ;
 811+ 6ECE
 812+ 6ECE              //  ______________________________________________________________________
 813+ 6ECE              //
 814+ 6ECE              // ;code        --
 815+ 6ECE                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 6ECE             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 6ECE             >
 815+ 6ECE             >Dict_Ptr        defl    $
 815+ 6ECE             >
 815+ 6ECE             >//              ______________________________________________________________________
 815+ 6ECE             >//              Heap part
 815+ 6ECE             >
 815+ 6ECE             >
 815+ 6ECE             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E78E             >
 815+ E78E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E78E             >Latest_Definition defl  Heap_Ptr
 815+ E78E             >
 815+ E78E             >                // dummy db directives used to calculate length of namec
 815+ E78E 3B 43 4F 44 >                db      ";CODE"
 815+ E792 45          >
 815+ E793             >len_NFA         defl    $ - temp_NFA
 815+ E793             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E78E             >
 815+ E78E C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E78F 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E793 45          >
 815+ E794             >                org     $-1                 // alter last byte of Name just above to set
 815+ E793 C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E794             >
 815+ E794 82 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E796             >Prev_Ptr        defl    Heap_Ptr
 815+ E796             >
 815+ E796             >mirror_Ptr      defl    $
 815+ E796             >
 815+ E796 D0 6E       >                dw      Dict_Ptr + 2        // xt
 815+ E798             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E798             >
 815+ E798             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E798             >
 815+ E798             >//              ______________________________________________________________________
 815+ E798             >//              Dictionary part
 815+ E798             >
 815+ E798             >                org     Dict_Ptr
 815+ 6ECE             >
 815+ 6ECE 96 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 6ED0             >
 815+ 6ED0             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 6ED0 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 6ED3             >
 815+ 6ED3             >
 815+ 6ED3             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 6ED3             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 6ED3             >
 815+ 6ED3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 6ED3 17 6E                        dw      QCSP                    // ?csp
 817+ 6ED5 3F 6E                        dw      COMPILE                 // compile
 818+ 6ED7 B5 6E                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 6ED9 5D 6E                        dw      SQUARED_OPEN            // [
 820+ 6EDB 3D 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 6EDD 4B 68                        dw      EXIT                    // ; immediate
 822+ 6EDF
 823+ 6EDF              //  ______________________________________________________________________
 824+ 6EDF              //
 825+ 6EDF              // <builds      --
 826+ 6EDF                              Colon_Def CBUILDS, "<BUILDS", is_normal
 826+ 6EDF             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 826+ 6EDF             >
 826+ 6EDF             >Dict_Ptr        defl    $
 826+ 6EDF             >
 826+ 6EDF             >//              ______________________________________________________________________
 826+ 6EDF             >//              Heap part
 826+ 6EDF             >
 826+ 6EDF             >
 826+ 6EDF             >                org     (Heap_Ptr & $1FFF) + $E000
 826+ E798             >
 826+ E798             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 826+ E798             >Latest_Definition defl  Heap_Ptr
 826+ E798             >
 826+ E798             >                // dummy db directives used to calculate length of namec
 826+ E798 3C 42 55 49 >                db      "<BUILDS"
 826+ E79C 4C 44 53    >
 826+ E79F             >len_NFA         defl    $ - temp_NFA
 826+ E79F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 826+ E798             >
 826+ E798 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 826+ E799 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 826+ E79D 4C 44 53    >
 826+ E7A0             >                org     $-1                 // alter last byte of Name just above to set
 826+ E79F D3          >                db      {b $} | END_BIT     // msb as name end
 826+ E7A0             >
 826+ E7A0 8E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 826+ E7A2             >Prev_Ptr        defl    Heap_Ptr
 826+ E7A2             >
 826+ E7A2             >mirror_Ptr      defl    $
 826+ E7A2             >
 826+ E7A2 E1 6E       >                dw      Dict_Ptr + 2        // xt
 826+ E7A4             >Heap_Ptr        defl    $ - $E000           // save current HP
 826+ E7A4             >
 826+ E7A4             >Current_HP      defl  $ - $E000             // used to set HP once!
 826+ E7A4             >
 826+ E7A4             >//              ______________________________________________________________________
 826+ E7A4             >//              Dictionary part
 826+ E7A4             >
 826+ E7A4             >                org     Dict_Ptr
 826+ 6EDF             >
 826+ 6EDF A2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 826+ 6EE1             >
 826+ 6EE1             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 826+ 6EE1 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 826+ 6EE4             >
 826+ 6EE4             >
 826+ 6EE4             >                endif           ; ok        // for other definitions it "points" the correct handler
 826+ 6EE4             >                // Use of "; ok" to suppress "warning[fwdref]"
 826+ 6EE4             >
 826+ 6EE4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 827+ 6EE4 76 6A                        dw      ZERO                    // 0
 828+ 6EE6 41 6A                        dw      CONSTANT                // constant
 829+ 6EE8 4B 68                        dw      EXIT                    // ;
 830+ 6EEA
 831+ 6EEA              //  ______________________________________________________________________
 832+ 6EEA              //
 833+ 6EEA              // recurse      --
 834+ 6EEA              //              Colon_Def RECURSE, "RECURSE", is_immediate
 835+ 6EEA              //              dw      QCOMP                   // ?comp
 836+ 6EEA              //              dw      LATEST                  // latest
 837+ 6EEA              //              dw      PFA, CFA                // pfa cfa
 838+ 6EEA              //              dw      COMMA                   // ,
 839+ 6EEA              //              dw      EXIT                    // ; immediate
 840+ 6EEA
 841+ 6EEA              //  ______________________________________________________________________
 842+ 6EEA              //
 843+ 6EEA              // does>     --
 844+ 6EEA                              Colon_Def DOES_TO, "DOES>", is_normal
 844+ 6EEA             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_normal ; ok
 844+ 6EEA             >
 844+ 6EEA             >Dict_Ptr        defl    $
 844+ 6EEA             >
 844+ 6EEA             >//              ______________________________________________________________________
 844+ 6EEA             >//              Heap part
 844+ 6EEA             >
 844+ 6EEA             >
 844+ 6EEA             >                org     (Heap_Ptr & $1FFF) + $E000
 844+ E7A4             >
 844+ E7A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 844+ E7A4             >Latest_Definition defl  Heap_Ptr
 844+ E7A4             >
 844+ E7A4             >                // dummy db directives used to calculate length of namec
 844+ E7A4 44 4F 45 53 >                db      "DOES>"
 844+ E7A8 3E          >
 844+ E7A9             >len_NFA         defl    $ - temp_NFA
 844+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 844+ E7A4             >
 844+ E7A4 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 844+ E7A5 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 844+ E7A9 3E          >
 844+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 844+ E7A9 BE          >                db      {b $} | END_BIT     // msb as name end
 844+ E7AA             >
 844+ E7AA 98 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 844+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 844+ E7AC             >
 844+ E7AC             >mirror_Ptr      defl    $
 844+ E7AC             >
 844+ E7AC EC 6E       >                dw      Dict_Ptr + 2        // xt
 844+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 844+ E7AE             >
 844+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 844+ E7AE             >
 844+ E7AE             >//              ______________________________________________________________________
 844+ E7AE             >//              Dictionary part
 844+ E7AE             >
 844+ E7AE             >                org     Dict_Ptr
 844+ 6EEA             >
 844+ 6EEA AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 844+ 6EEC             >
 844+ 6EEC             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 844+ 6EEC CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 844+ 6EEF             >
 844+ 6EEF             >
 844+ 6EEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 844+ 6EEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 844+ 6EEF             >
 844+ 6EEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 845+ 6EEF 60 68                        dw      R_TO                    // r>
 846+ 6EF1 3F 6D                        dw      LATEST                  // latest
 847+ 6EF3 9D 6D                        dw      PFA                     // pfa
 848+ 6EF5 8A 69                        dw      STORE                   // !        \ old use of <BUILDS
 849+ 6EF7              //              dw      COMMA                   // ,        \ new use of CREATE
 850+ 6EF7 B5 6E                        dw      C_SEMICOLON_CODE        // ;code
 851+ 6EF9              Does_Ptr:
 852+ 6EF9                              // via call coded in CFA
 853+ 6EF9 EB                           ex      de, hl //**
 854+ 6EFA                              // *** ldhlrp
 855+ 6EFA 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
 856+ 6EFB 70                           ld      (hl), b
 857+ 6EFC 2B                           dec     hl
 858+ 6EFD 71                           ld      (hl), c
 859+ 6EFE                              // *** ldrphl
 860+ 6EFE EB                           ex      de, hl //**
 861+ 6EFF E1                           pop     hl                  // CFA has a call to this, so PFA -> IP
 862+ 6F00
 863+ 6F00 4E                           ld      c, (hl)
 864+ 6F01 23                           inc     hl
 865+ 6F02 46                           ld      b, (hl)
 866+ 6F03 23                           inc     hl
 867+ 6F04
 868+ 6F04                              psh1
 868+ 6F04 E5          >                push    hl
 868+ 6F05 DD E9       >                jp      (ix)
 869+ 6F07                              // SMUDGE !
 870+ 6F07
 871+ 6F07              //  ______________________________________________________________________
 872+ 6F07              //
 873+ 6F07              // count        a -- a2 n
 874+ 6F07              // expects a counted string at address a, returns string address and counter
 875+ 6F07                              New_Def COUNT, "COUNT", is_code, is_normal
 875+ 6F07             >
 875+ 6F07             >Dict_Ptr        defl    $
 875+ 6F07             >
 875+ 6F07             >//              ______________________________________________________________________
 875+ 6F07             >//              Heap part
 875+ 6F07             >
 875+ 6F07             >
 875+ 6F07             >                org     (Heap_Ptr & $1FFF) + $E000
 875+ E7AE             >
 875+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 875+ E7AE             >Latest_Definition defl  Heap_Ptr
 875+ E7AE             >
 875+ E7AE             >                // dummy db directives used to calculate length of namec
 875+ E7AE 43 4F 55 4E >                db      "COUNT"
 875+ E7B2 54          >
 875+ E7B3             >len_NFA         defl    $ - temp_NFA
 875+ E7B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 875+ E7AE             >
 875+ E7AE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 875+ E7AF 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 875+ E7B3 54          >
 875+ E7B4             >                org     $-1                 // alter last byte of Name just above to set
 875+ E7B3 D4          >                db      {b $} | END_BIT     // msb as name end
 875+ E7B4             >
 875+ E7B4 A4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 875+ E7B6             >Prev_Ptr        defl    Heap_Ptr
 875+ E7B6             >
 875+ E7B6             >mirror_Ptr      defl    $
 875+ E7B6             >
 875+ E7B6 09 6F       >                dw      Dict_Ptr + 2        // xt
 875+ E7B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 875+ E7B8             >
 875+ E7B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 875+ E7B8             >
 875+ E7B8             >//              ______________________________________________________________________
 875+ E7B8             >//              Dictionary part
 875+ E7B8             >
 875+ E7B8             >                org     Dict_Ptr
 875+ 6F07             >
 875+ 6F07 B6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 875+ 6F09             >
 875+ 6F09             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 875+ 6F09 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 875+ 6F09 ~           >
 875+ 6F09 ~           >
 875+ 6F09             >                endif           ; ok        // for other definitions it "points" the correct handler
 875+ 6F09             >                // Use of "; ok" to suppress "warning[fwdref]"
 875+ 6F09             >
 875+ 6F09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 876+ 6F09 D9                           exx
 877+ 6F0A E1                           pop     hl
 878+ 6F0B 5E                           ld      e, (hl)
 879+ 6F0C 16 00                        ld      d, 0
 880+ 6F0E 23                           inc     hl
 881+ 6F0F              Count_Here:
 882+ 6F0F E5                           push    hl
 883+ 6F10 D5                           push    de
 884+ 6F11 D9                           exx
 885+ 6F12                              next
 885+ 6F12 DD E9       >                jp      (ix)
 886+ 6F14              //                pop     hl
 887+ 6F14              //                ld      a, (hl)
 888+ 6F14              //                inc     hl
 889+ 6F14              //                push    hl
 890+ 6F14              //                ld      h, 0
 891+ 6F14              //                ld      l, a
 892+ 6F14              //                push    hl
 893+ 6F14              //                next
 894+ 6F14
 895+ 6F14              //  ______________________________________________________________________
 896+ 6F14              //
 897+ 6F14              // bounds       a n -- a+n n
 898+ 6F14              // given an address and a length ( a n ) calculate the bound addresses
 899+ 6F14              // suitable for DO-LOOP
 900+ 6F14                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 900+ 6F14             >
 900+ 6F14             >Dict_Ptr        defl    $
 900+ 6F14             >
 900+ 6F14             >//              ______________________________________________________________________
 900+ 6F14             >//              Heap part
 900+ 6F14             >
 900+ 6F14             >
 900+ 6F14             >                org     (Heap_Ptr & $1FFF) + $E000
 900+ E7B8             >
 900+ E7B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 900+ E7B8             >Latest_Definition defl  Heap_Ptr
 900+ E7B8             >
 900+ E7B8             >                // dummy db directives used to calculate length of namec
 900+ E7B8 42 4F 55 4E >                db      "BOUNDS"
 900+ E7BC 44 53       >
 900+ E7BE             >len_NFA         defl    $ - temp_NFA
 900+ E7BE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 900+ E7B8             >
 900+ E7B8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 900+ E7B9 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 900+ E7BD 44 53       >
 900+ E7BF             >                org     $-1                 // alter last byte of Name just above to set
 900+ E7BE D3          >                db      {b $} | END_BIT     // msb as name end
 900+ E7BF             >
 900+ E7BF AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 900+ E7C1             >Prev_Ptr        defl    Heap_Ptr
 900+ E7C1             >
 900+ E7C1             >mirror_Ptr      defl    $
 900+ E7C1             >
 900+ E7C1 16 6F       >                dw      Dict_Ptr + 2        // xt
 900+ E7C3             >Heap_Ptr        defl    $ - $E000           // save current HP
 900+ E7C3             >
 900+ E7C3             >Current_HP      defl  $ - $E000             // used to set HP once!
 900+ E7C3             >
 900+ E7C3             >//              ______________________________________________________________________
 900+ E7C3             >//              Dictionary part
 900+ E7C3             >
 900+ E7C3             >                org     Dict_Ptr
 900+ 6F14             >
 900+ 6F14 C1 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 900+ 6F16             >
 900+ 6F16             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 900+ 6F16 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 900+ 6F16 ~           >
 900+ 6F16 ~           >
 900+ 6F16             >                endif           ; ok        // for other definitions it "points" the correct handler
 900+ 6F16             >                // Use of "; ok" to suppress "warning[fwdref]"
 900+ 6F16             >
 900+ 6F16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 901+ 6F16 D9                           exx
 902+ 6F17 E1                           pop     hl
 903+ 6F18 D1                           pop     de
 904+ 6F19 19                           add     hl, de
 905+ 6F1A 18 F3                        jr      Count_Here
 906+ 6F1C                              // push    hl
 907+ 6F1C                              // push    de
 908+ 6F1C                              // exx
 909+ 6F1C                              // next
 910+ 6F1C
 911+ 6F1C              //  ______________________________________________________________________
 912+ 6F1C              //
 913+ 6F1C              // leave        --
 914+ 6F1C              // Compile (leave) to leave current LOOP and jump just after it
 915+ 6F1C                              Colon_Def LEAVE, "LEAVE", is_immediate
 915+ 6F1C             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 915+ 6F1C             >
 915+ 6F1C             >Dict_Ptr        defl    $
 915+ 6F1C             >
 915+ 6F1C             >//              ______________________________________________________________________
 915+ 6F1C             >//              Heap part
 915+ 6F1C             >
 915+ 6F1C             >
 915+ 6F1C             >                org     (Heap_Ptr & $1FFF) + $E000
 915+ E7C3             >
 915+ E7C3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 915+ E7C3             >Latest_Definition defl  Heap_Ptr
 915+ E7C3             >
 915+ E7C3             >                // dummy db directives used to calculate length of namec
 915+ E7C3 4C 45 41 56 >                db      "LEAVE"
 915+ E7C7 45          >
 915+ E7C8             >len_NFA         defl    $ - temp_NFA
 915+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 915+ E7C3             >
 915+ E7C3 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 915+ E7C4 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 915+ E7C8 45          >
 915+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 915+ E7C8 C5          >                db      {b $} | END_BIT     // msb as name end
 915+ E7C9             >
 915+ E7C9 B8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 915+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 915+ E7CB             >
 915+ E7CB             >mirror_Ptr      defl    $
 915+ E7CB             >
 915+ E7CB 1E 6F       >                dw      Dict_Ptr + 2        // xt
 915+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 915+ E7CD             >
 915+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 915+ E7CD             >
 915+ E7CD             >//              ______________________________________________________________________
 915+ E7CD             >//              Dictionary part
 915+ E7CD             >
 915+ E7CD             >                org     Dict_Ptr
 915+ 6F1C             >
 915+ 6F1C CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 915+ 6F1E             >
 915+ 6F1E             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 915+ 6F1E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 915+ 6F21             >
 915+ 6F21             >
 915+ 6F21             >                endif           ; ok        // for other definitions it "points" the correct handler
 915+ 6F21             >                // Use of "; ok" to suppress "warning[fwdref]"
 915+ 6F21             >
 915+ 6F21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 916+ 6F21 3F 6E FC 63                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 917+ 6F25 9B 6B 55 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 917+ 6F29 76 6A B1 6B
 918+ 6F2D 76 6A 76 6A                  dw      ZERO, ZERO
 919+ 6F31 32 68 16 69                  dw      SPFETCH, DUP
 920+ 6F35 C7 68 C7 68                  dw      CELL_PLUS, CELL_PLUS
 921+ 6F39 06 69                        dw      TUCK
 922+ 6F3B 59 6B 80 69                  dw      CSP, FETCH
 923+ 6F3F 0F 69 DA 6B                  dw      SWAP, SUBTRACT
 924+ 6F43 8C 67                        dw      CMOVE
 925+ 6F45 59 6B 80 69                  dw      CSP, FETCH, CELL_MINUS
 925+ 6F49 CB 68
 926+ 6F4B 60 68 F2 68                  dw      R_TO, OVER, STORE
 926+ 6F4F 8A 69
 927+ 6F51 CB 68 76 6A                  dw      CELL_MINUS, ZERO
 928+ 6F55 0F 69 8A 69                  dw      SWAP, STORE
 929+ 6F59 4B 68                        dw      EXIT                    // ;
 930+ 6F5B
 931+ 6F5B              //  ______________________________________________________________________
 932+ 6F5B              //
 933+ 6F5B              // type         a n --
 934+ 6F5B              // Sends to current output channel n characters starting at address a.
 935+ 6F5B                              Colon_Def TYPE, "TYPE", is_normal
 935+ 6F5B             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 935+ 6F5B             >
 935+ 6F5B             >Dict_Ptr        defl    $
 935+ 6F5B             >
 935+ 6F5B             >//              ______________________________________________________________________
 935+ 6F5B             >//              Heap part
 935+ 6F5B             >
 935+ 6F5B             >
 935+ 6F5B             >                org     (Heap_Ptr & $1FFF) + $E000
 935+ E7CD             >
 935+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 935+ E7CD             >Latest_Definition defl  Heap_Ptr
 935+ E7CD             >
 935+ E7CD             >                // dummy db directives used to calculate length of namec
 935+ E7CD 54 59 50 45 >                db      "TYPE"
 935+ E7D1             >len_NFA         defl    $ - temp_NFA
 935+ E7D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 935+ E7CD             >
 935+ E7CD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 935+ E7CE 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 935+ E7D2             >                org     $-1                 // alter last byte of Name just above to set
 935+ E7D1 C5          >                db      {b $} | END_BIT     // msb as name end
 935+ E7D2             >
 935+ E7D2 C3 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 935+ E7D4             >Prev_Ptr        defl    Heap_Ptr
 935+ E7D4             >
 935+ E7D4             >mirror_Ptr      defl    $
 935+ E7D4             >
 935+ E7D4 5D 6F       >                dw      Dict_Ptr + 2        // xt
 935+ E7D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 935+ E7D6             >
 935+ E7D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 935+ E7D6             >
 935+ E7D6             >//              ______________________________________________________________________
 935+ E7D6             >//              Dictionary part
 935+ E7D6             >
 935+ E7D6             >                org     Dict_Ptr
 935+ 6F5B             >
 935+ 6F5B D4 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 935+ 6F5D             >
 935+ 6F5D             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 935+ 6F5D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 935+ 6F60             >
 935+ 6F60             >
 935+ 6F60             >                endif           ; ok        // for other definitions it "points" the correct handler
 935+ 6F60             >                // Use of "; ok" to suppress "warning[fwdref]"
 935+ 6F60             >
 935+ 6F60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 936+ 6F60 16 6F                        dw      BOUNDS                  // bounds
 937+ 6F62 06 64                        dw      C_Q_DO                  // ?do
 938+ 6F64 0C 00                        dw      Type_Skip - $
 939+ 6F66              Type_Loop:
 940+ 6F66 34 64 95 69                  dw          I, CFETCH           //      i c@
 941+ 6F6A 4D 6C                        dw          EMIT                //      emit
 942+ 6F6C E7 63                        dw      C_LOOP                  // loop
 943+ 6F6E F8 FF                        dw      Type_Loop - $
 944+ 6F70              Type_Skip:
 945+ 6F70 4B 68                        dw      EXIT                    // ;
 946+ 6F72
 947+ 6F72              //  ______________________________________________________________________
 948+ 6F72              //
 949+ 6F72              // -trailing    a n1 -- a n2
 950+ 6F72              // Assumes that an n1 bytes-long string is stored at address a
 951+ 6F72              // and the string contains a space delimited word,
 952+ 6F72              // Finds n2 as the position of the first character after the word.
 953+ 6F72                              Colon_Def LTRAILING, "-TRAILING", is_normal
 953+ 6F72             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 953+ 6F72             >
 953+ 6F72             >Dict_Ptr        defl    $
 953+ 6F72             >
 953+ 6F72             >//              ______________________________________________________________________
 953+ 6F72             >//              Heap part
 953+ 6F72             >
 953+ 6F72             >
 953+ 6F72             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ E7D6             >
 953+ E7D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ E7D6             >Latest_Definition defl  Heap_Ptr
 953+ E7D6             >
 953+ E7D6             >                // dummy db directives used to calculate length of namec
 953+ E7D6 2D 54 52 41 >                db      "-TRAILING"
 953+ E7DA 49 4C 49 4E >
 953+ E7DE 47          >
 953+ E7DF             >len_NFA         defl    $ - temp_NFA
 953+ E7DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ E7D6             >
 953+ E7D6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ E7D7 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 953+ E7DB 49 4C 49 4E >
 953+ E7DF 47          >
 953+ E7E0             >                org     $-1                 // alter last byte of Name just above to set
 953+ E7DF C7          >                db      {b $} | END_BIT     // msb as name end
 953+ E7E0             >
 953+ E7E0 CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ E7E2             >Prev_Ptr        defl    Heap_Ptr
 953+ E7E2             >
 953+ E7E2             >mirror_Ptr      defl    $
 953+ E7E2             >
 953+ E7E2 74 6F       >                dw      Dict_Ptr + 2        // xt
 953+ E7E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ E7E4             >
 953+ E7E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ E7E4             >
 953+ E7E4             >//              ______________________________________________________________________
 953+ E7E4             >//              Dictionary part
 953+ E7E4             >
 953+ E7E4             >                org     Dict_Ptr
 953+ 6F72             >
 953+ 6F72 E2 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 6F74             >
 953+ 6F74             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 6F74 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 953+ 6F77             >
 953+ 6F77             >
 953+ 6F77             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 6F77             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 6F77             >
 953+ 6F77             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 6F77 16 69 76 6A                  dw      DUP, ZERO               // dup 0
 955+ 6F7B                                                              // do
 956+ 6F7B 06 64                        dw      C_Q_DO
 957+ 6F7D 20 00                        dw      LTrailing_Leave - $
 958+ 6F7F              LTrailing_Loop:
 959+ 6F7F 5E 69 98 68                  dw          TWO_DUP, PLUS       //      2dup +
 960+ 6F83 B8 68                        dw          ONE_SUBTRACT        //      1-
 961+ 6F85 95 69                        dw          CFETCH              //      c@
 962+ 6F87 99 6A DA 6B                  dw          BL, SUBTRACT        //      bl -
 963+ 6F8B                                                              //      if
 964+ 6F8B F3 63                        dw          ZBRANCH
 965+ 6F8D 0A 00                        dw          LTrailing_Else - $
 966+ 6F8F FC 63                        dw              C_LEAVE         //          leave
 967+ 6F91 0C 00                        dw              LTrailing_Leave - $
 968+ 6F93 EF 63                        dw          BRANCH              //      else
 969+ 6F95 04 00                        dw          LTrailing_Endif - $
 970+ 6F97              LTrailing_Else:
 971+ 6F97 B8 68                        dw              ONE_SUBTRACT    //          1-
 972+ 6F99              LTrailing_Endif:                                //      endif
 973+ 6F99                                                              // loop
 974+ 6F99 E7 63                        dw      C_LOOP
 975+ 6F9B E4 FF                        dw      LTrailing_Loop - $
 976+ 6F9D              LTrailing_Leave:
 977+ 6F9D 4B 68                        dw      EXIT                    // ;
 978+ 6F9F
 979+ 6F9F              //  ______________________________________________________________________
 980+ 6F9F              //
 981+ 6F9F              // accept       a n1 -- n2
 982+ 6F9F              // Accepts at most n1 characters from terminal and stores them at address a
 983+ 6F9F              // CR stops input. A 'nul' is added as trailer.
 984+ 6F9F              // n2 is the string length. n2 is kept in span user variable also.
 985+ 6F9F                              Colon_Def ACCEPT, "ACCEPT", is_normal
 985+ 6F9F             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 985+ 6F9F             >
 985+ 6F9F             >Dict_Ptr        defl    $
 985+ 6F9F             >
 985+ 6F9F             >//              ______________________________________________________________________
 985+ 6F9F             >//              Heap part
 985+ 6F9F             >
 985+ 6F9F             >
 985+ 6F9F             >                org     (Heap_Ptr & $1FFF) + $E000
 985+ E7E4             >
 985+ E7E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 985+ E7E4             >Latest_Definition defl  Heap_Ptr
 985+ E7E4             >
 985+ E7E4             >                // dummy db directives used to calculate length of namec
 985+ E7E4 41 43 43 45 >                db      "ACCEPT"
 985+ E7E8 50 54       >
 985+ E7EA             >len_NFA         defl    $ - temp_NFA
 985+ E7EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 985+ E7E4             >
 985+ E7E4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 985+ E7E5 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 985+ E7E9 50 54       >
 985+ E7EB             >                org     $-1                 // alter last byte of Name just above to set
 985+ E7EA D4          >                db      {b $} | END_BIT     // msb as name end
 985+ E7EB             >
 985+ E7EB D6 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 985+ E7ED             >Prev_Ptr        defl    Heap_Ptr
 985+ E7ED             >
 985+ E7ED             >mirror_Ptr      defl    $
 985+ E7ED             >
 985+ E7ED A1 6F       >                dw      Dict_Ptr + 2        // xt
 985+ E7EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 985+ E7EF             >
 985+ E7EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 985+ E7EF             >
 985+ E7EF             >//              ______________________________________________________________________
 985+ E7EF             >//              Dictionary part
 985+ E7EF             >
 985+ E7EF             >                org     Dict_Ptr
 985+ 6F9F             >
 985+ 6F9F ED 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 985+ 6FA1             >
 985+ 6FA1             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 985+ 6FA1 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 985+ 6FA4             >
 985+ 6FA4             >
 985+ 6FA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 985+ 6FA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 985+ 6FA4             >
 985+ 6FA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 986+ 6FA4 F2 68 98 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 986+ 6FA8 F2 68
 987+ 6FAA 76 6A 26 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 988+ 6FAE                                                              // do
 989+ 6FAE 06 64                        dw      C_Q_DO
 990+ 6FB0 8C 00                        dw      Accept_Leave - $
 991+ 6FB2              Accept_Loop:
 992+ 6FB2 2B 66                        dw          CUR                 //      cur             ( a  0 )
 993+ 6FB4 FB 68 73 66                  dw          DROP, KEY           //      drop key        ( a  c )
 994+ 6FB8 16 69                        dw          DUP                 //      dup             ( a  c  c )
 995+ 6FBA A3 63 0E 00                  dw          LIT, $0E            //      0E
 996+ 6FBE BC 6A                        dw          PLUS_ORIGIN         //      +origin
 997+ 6FC0 80 69                        dw          FETCH               //      @               ( a  c  c  del )
 998+ 6FC2 E6 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 999+ 6FC4                                                              //      if
1000+ 6FC4 F3 63                        dw          ZBRANCH
1001+ 6FC6 2C 00                        dw          Accept_Else_0 - $
1002+ 6FC8 FB 68                        dw              DROP            //          drop        ( a  )
1003+ 6FCA 16 69 34 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
1003+ 6FCE E6 6B
1004+ 6FD0 7D 6A 0B 68                  dw              ONE, AND_OP     //          1 and
1005+ 6FD4 16 69                        dw              DUP             //          dup         ( a  a==i  a==i )
1006+ 6FD6 60 68                        dw              R_TO            //          r> 2 - + r>
1007+ 6FD8 D3 68 98 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
1008+ 6FDC 55 68                        dw              TO_R            //
1009+ 6FDE                                                              //          if
1010+ 6FDE F3 63                        dw              ZBRANCH
1011+ 6FE0 0A 00                        dw              Accept_Else_1 - $
1012+ 6FE2 A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1013+ 6FE6                                                              //          else
1014+ 6FE6 EF 63                        dw              BRANCH
1015+ 6FE8 06 00                        dw              Accept_Endif_1 - $
1016+ 6FEA              Accept_Else_1:
1017+ 6FEA A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1018+ 6FEE              Accept_Endif_1:                                 //          endif
1019+ 6FEE EF 63                        dw          BRANCH
1020+ 6FF0 2E 00                        dw          Accept_Endif_0 - $
1021+ 6FF2              Accept_Else_0:                                  //      else
1022+ 6FF2 16 69                        dw              DUP             //          dup         ( a  c  c )
1023+ 6FF4 A3 63 0D 00                  dw              LIT, 13         //          13
1024+ 6FF8 E6 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1025+ 6FFA                                                              //          if
1026+ 6FFA F3 63                        dw              ZBRANCH
1027+ 6FFC 0C 00                        dw              Accept_Else_2 - $
1028+ 6FFE FB 68 99 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1029+ 7002 76 6A                        dw                  ZERO        //              0       ( a  c  0 )
1030+ 7004                                                              //          else
1031+ 7004 EF 63                        dw              BRANCH
1032+ 7006 04 00                        dw              Accept_Endif_2 - $
1033+ 7008              Accept_Else_2:
1034+ 7008 16 69                        dw                  DUP         //              dup     ( a  c  c )
1035+ 700A                                                              //          endif
1036+ 700A              Accept_Endif_2:
1037+ 700A 34 64 9E 69                  dw              I, CSTORE       //          i           ( a  c )
1038+ 700E 16 69 99 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1038+ 7012 FF 6B
1039+ 7014                                                              //          if
1040+ 7014 F3 63                        dw              ZBRANCH
1041+ 7016 08 00                        dw              Accept_Endif_3 - $
1042+ 7018 60 68                        dw                  R_TO        //              r>
1043+ 701A B8 68                        dw                  ONE_SUBTRACT//              1-
1044+ 701C 55 68                        dw                  TO_R        //              >r
1045+ 701E                                                              //          endif
1046+ 701E              Accept_Endif_3:
1047+ 701E              Accept_Endif_0:                                 //      endif
1048+ 701E 4D 6C                        dw          EMIT                //      emit            ( a )
1049+ 7020
1050+ 7020 76 6A 34 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1050+ 7024 B1 68
1051+ 7026 8A 69                        dw          STORE               //          ( zero pad )
1052+ 7028 34 64                        dw          I                   //      i
1053+ 702A 34 64 95 69                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1053+ 702E 70 68
1054+ 7030 F3 63                        dw          ZBRANCH             //
1055+ 7032 06 00                        dw              Accept_Endif_4 - $
1056+ 7034 FC 63                        dw                  C_LEAVE     //              leave
1057+ 7036 06 00                        dw                  Accept_Leave - $
1058+ 7038              Accept_Endif_4:                                 //      endif
1059+ 7038                                                              // loop
1060+ 7038 E7 63                        dw      C_LOOP
1061+ 703A 78 FF                        dw      Accept_Loop - $
1062+ 703C              Accept_Leave:
1063+ 703C 0F 69 DA 6B                  dw      SWAP, SUBTRACT          // swap -
1064+ 7040 B1 68                        dw      ONE_PLUS                // 1+
1065+ 7042 16 69 89 6B                  dw      DUP, SPAN, STORE        // dup span !
1065+ 7046 8A 69
1066+ 7048 4B 68                        dw      EXIT                    // ;
1067+ 704A
1068+ 704A              //  ______________________________________________________________________
1069+ 704A              //
1070+ 704A              // expect      a n --
1071+ 704A              // Accepts at most n1 characters from terminal and stores them at address a
1072+ 704A              // CR stops input. A 'nul' is added as trailer.
1073+ 704A              // n2 is the string length. n2 is kept in span user variable also.
1074+ 704A              //              Colon_Def EXPECT, "EXPECT", is_normal
1075+ 704A              //              dw      ACCEPT, DROP            // accept drop
1076+ 704A              //              dw      EXIT                    // ;
1077+ 704A
1078+ 704A              //  ______________________________________________________________________
1079+ 704A              //
1080+ 704A              // query        --
1081+ 704A              // Accept at most 80 character from console. CR stops.
1082+ 704A              // Text is stored in TIB. Variable IN is zeroed.
1083+ 704A                              Colon_Def QUERY, "QUERY", is_normal
1083+ 704A             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1083+ 704A             >
1083+ 704A             >Dict_Ptr        defl    $
1083+ 704A             >
1083+ 704A             >//              ______________________________________________________________________
1083+ 704A             >//              Heap part
1083+ 704A             >
1083+ 704A             >
1083+ 704A             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E7EF             >
1083+ E7EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E7EF             >Latest_Definition defl  Heap_Ptr
1083+ E7EF             >
1083+ E7EF             >                // dummy db directives used to calculate length of namec
1083+ E7EF 51 55 45 52 >                db      "QUERY"
1083+ E7F3 59          >
1083+ E7F4             >len_NFA         defl    $ - temp_NFA
1083+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E7EF             >
1083+ E7EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E7F0 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1083+ E7F4 59          >
1083+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
1083+ E7F4 D9          >                db      {b $} | END_BIT     // msb as name end
1083+ E7F5             >
1083+ E7F5 E4 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E7F7             >Prev_Ptr        defl    Heap_Ptr
1083+ E7F7             >
1083+ E7F7             >mirror_Ptr      defl    $
1083+ E7F7             >
1083+ E7F7 4C 70       >                dw      Dict_Ptr + 2        // xt
1083+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E7F9             >
1083+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E7F9             >
1083+ E7F9             >//              ______________________________________________________________________
1083+ E7F9             >//              Dictionary part
1083+ E7F9             >
1083+ E7F9             >                org     Dict_Ptr
1083+ 704A             >
1083+ 704A F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 704C             >
1083+ 704C             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 704C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1083+ 704F             >
1083+ 704F             >
1083+ 704F             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 704F             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 704F             >
1083+ 704F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 704F DB 6A 80 69                  dw      TIB, FETCH              // tib @
1085+ 7053 A3 63 50 00                  dw      LIT, 80                 // 80
1086+ 7057 A1 6F FB 68                  dw      ACCEPT, DROP            // accept drop
1087+ 705B 76 6A 1D 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1087+ 705F 8A 69
1088+ 7061 4B 68                        dw      EXIT                    // ;
1089+ 7063
1090+ 7063              //  ______________________________________________________________________
1091+ 7063              //
1092+ 7063              // fill        a n c --
1093+ 7063              // If n > 0, fills n locations starting from address a with the value c.
1094+ 7063                              New_Def FILL, "FILL", is_code, is_normal
1094+ 7063             >
1094+ 7063             >Dict_Ptr        defl    $
1094+ 7063             >
1094+ 7063             >//              ______________________________________________________________________
1094+ 7063             >//              Heap part
1094+ 7063             >
1094+ 7063             >
1094+ 7063             >                org     (Heap_Ptr & $1FFF) + $E000
1094+ E7F9             >
1094+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1094+ E7F9             >Latest_Definition defl  Heap_Ptr
1094+ E7F9             >
1094+ E7F9             >                // dummy db directives used to calculate length of namec
1094+ E7F9 46 49 4C 4C >                db      "FILL"
1094+ E7FD             >len_NFA         defl    $ - temp_NFA
1094+ E7FD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1094+ E7F9             >
1094+ E7F9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1094+ E7FA 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1094+ E7FE             >                org     $-1                 // alter last byte of Name just above to set
1094+ E7FD CC          >                db      {b $} | END_BIT     // msb as name end
1094+ E7FE             >
1094+ E7FE EF 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1094+ E800             >Prev_Ptr        defl    Heap_Ptr
1094+ E800             >
1094+ E800             >mirror_Ptr      defl    $
1094+ E800             >
1094+ E800 65 70       >                dw      Dict_Ptr + 2        // xt
1094+ E802             >Heap_Ptr        defl    $ - $E000           // save current HP
1094+ E802             >
1094+ E802             >Current_HP      defl  $ - $E000             // used to set HP once!
1094+ E802             >
1094+ E802             >//              ______________________________________________________________________
1094+ E802             >//              Dictionary part
1094+ E802             >
1094+ E802             >                org     Dict_Ptr
1094+ 7063             >
1094+ 7063 00 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1094+ 7065             >
1094+ 7065             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1094+ 7065 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1094+ 7065 ~           >
1094+ 7065 ~           >
1094+ 7065             >                endif           ; ok        // for other definitions it "points" the correct handler
1094+ 7065             >                // Use of "; ok" to suppress "warning[fwdref]"
1094+ 7065             >
1094+ 7065             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1095+ 7065 D9                           exx
1096+ 7066 D1                           pop     de                  // de has character
1097+ 7067 C1                           pop     bc                  // bc has counter
1098+ 7068 E1                           pop     hl                  // hl has address, save Instruction Pointer
1099+ 7069              Fill_Loop:
1100+ 7069 78                               ld      a, b
1101+ 706A B1                               or      c
1102+ 706B 28 05                        jr      z, Fill_While_End
1103+ 706D 73                               ld      (hl), e
1104+ 706E 0B                               dec     bc
1105+ 706F 23                               inc     hl
1106+ 7070 18 F7                        jr      Fill_Loop
1107+ 7072              Fill_While_End:
1108+ 7072 D9                           exx
1109+ 7073                              next
1109+ 7073 DD E9       >                jp      (ix)
1110+ 7075
1111+ 7075              //  ______________________________________________________________________
1112+ 7075              //
1113+ 7075              // erase        a n --
1114+ 7075              // If n > 0, fills n locations starting from address a with 'nul' characters.
1115+ 7075                              Colon_Def ERASE, "ERASE", is_normal
1115+ 7075             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1115+ 7075             >
1115+ 7075             >Dict_Ptr        defl    $
1115+ 7075             >
1115+ 7075             >//              ______________________________________________________________________
1115+ 7075             >//              Heap part
1115+ 7075             >
1115+ 7075             >
1115+ 7075             >                org     (Heap_Ptr & $1FFF) + $E000
1115+ E802             >
1115+ E802             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1115+ E802             >Latest_Definition defl  Heap_Ptr
1115+ E802             >
1115+ E802             >                // dummy db directives used to calculate length of namec
1115+ E802 45 52 41 53 >                db      "ERASE"
1115+ E806 45          >
1115+ E807             >len_NFA         defl    $ - temp_NFA
1115+ E807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1115+ E802             >
1115+ E802 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1115+ E803 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1115+ E807 45          >
1115+ E808             >                org     $-1                 // alter last byte of Name just above to set
1115+ E807 C5          >                db      {b $} | END_BIT     // msb as name end
1115+ E808             >
1115+ E808 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1115+ E80A             >Prev_Ptr        defl    Heap_Ptr
1115+ E80A             >
1115+ E80A             >mirror_Ptr      defl    $
1115+ E80A             >
1115+ E80A 77 70       >                dw      Dict_Ptr + 2        // xt
1115+ E80C             >Heap_Ptr        defl    $ - $E000           // save current HP
1115+ E80C             >
1115+ E80C             >Current_HP      defl  $ - $E000             // used to set HP once!
1115+ E80C             >
1115+ E80C             >//              ______________________________________________________________________
1115+ E80C             >//              Dictionary part
1115+ E80C             >
1115+ E80C             >                org     Dict_Ptr
1115+ 7075             >
1115+ 7075 0A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1115+ 7077             >
1115+ 7077             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1115+ 7077 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1115+ 707A             >
1115+ 707A             >
1115+ 707A             >                endif           ; ok        // for other definitions it "points" the correct handler
1115+ 707A             >                // Use of "; ok" to suppress "warning[fwdref]"
1115+ 707A             >
1115+ 707A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1116+ 707A 76 6A 65 70                  dw      ZERO, FILL              // 0 fill
1117+ 707E 4B 68                        dw      EXIT                    // ;
1118+ 7080
1119+ 7080              //  ______________________________________________________________________
1120+ 7080              //
1121+ 7080              // blank        a n --
1122+ 7080              // If n > 0, fills n locations starting from address a with 'nul' characters.
1123+ 7080                              Colon_Def BLANK, "BLANK", is_normal
1123+ 7080             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1123+ 7080             >
1123+ 7080             >Dict_Ptr        defl    $
1123+ 7080             >
1123+ 7080             >//              ______________________________________________________________________
1123+ 7080             >//              Heap part
1123+ 7080             >
1123+ 7080             >
1123+ 7080             >                org     (Heap_Ptr & $1FFF) + $E000
1123+ E80C             >
1123+ E80C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1123+ E80C             >Latest_Definition defl  Heap_Ptr
1123+ E80C             >
1123+ E80C             >                // dummy db directives used to calculate length of namec
1123+ E80C 42 4C 41 4E >                db      "BLANK"
1123+ E810 4B          >
1123+ E811             >len_NFA         defl    $ - temp_NFA
1123+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1123+ E80C             >
1123+ E80C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1123+ E80D 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1123+ E811 4B          >
1123+ E812             >                org     $-1                 // alter last byte of Name just above to set
1123+ E811 CB          >                db      {b $} | END_BIT     // msb as name end
1123+ E812             >
1123+ E812 02 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1123+ E814             >Prev_Ptr        defl    Heap_Ptr
1123+ E814             >
1123+ E814             >mirror_Ptr      defl    $
1123+ E814             >
1123+ E814 82 70       >                dw      Dict_Ptr + 2        // xt
1123+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1123+ E816             >
1123+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1123+ E816             >
1123+ E816             >//              ______________________________________________________________________
1123+ E816             >//              Dictionary part
1123+ E816             >
1123+ E816             >                org     Dict_Ptr
1123+ 7080             >
1123+ 7080 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1123+ 7082             >
1123+ 7082             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1123+ 7082 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1123+ 7085             >
1123+ 7085             >
1123+ 7085             >                endif           ; ok        // for other definitions it "points" the correct handler
1123+ 7085             >                // Use of "; ok" to suppress "warning[fwdref]"
1123+ 7085             >
1123+ 7085             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1124+ 7085 99 6A 65 70                  dw      BL, FILL                // bl fill
1125+ 7089 4B 68                        dw      EXIT                    // ;
1126+ 708B
1127+ 708B              //  ______________________________________________________________________
1128+ 708B              //
1129+ 708B              // hold         c --
1130+ 708B              // Used between <# and #> to insert a character c in numeric formatting.
1131+ 708B                              Colon_Def HOLD, "HOLD", is_normal
1131+ 708B             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1131+ 708B             >
1131+ 708B             >Dict_Ptr        defl    $
1131+ 708B             >
1131+ 708B             >//              ______________________________________________________________________
1131+ 708B             >//              Heap part
1131+ 708B             >
1131+ 708B             >
1131+ 708B             >                org     (Heap_Ptr & $1FFF) + $E000
1131+ E816             >
1131+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1131+ E816             >Latest_Definition defl  Heap_Ptr
1131+ E816             >
1131+ E816             >                // dummy db directives used to calculate length of namec
1131+ E816 48 4F 4C 44 >                db      "HOLD"
1131+ E81A             >len_NFA         defl    $ - temp_NFA
1131+ E81A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1131+ E816             >
1131+ E816 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1131+ E817 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1131+ E81B             >                org     $-1                 // alter last byte of Name just above to set
1131+ E81A C4          >                db      {b $} | END_BIT     // msb as name end
1131+ E81B             >
1131+ E81B 0C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1131+ E81D             >Prev_Ptr        defl    Heap_Ptr
1131+ E81D             >
1131+ E81D             >mirror_Ptr      defl    $
1131+ E81D             >
1131+ E81D 8D 70       >                dw      Dict_Ptr + 2        // xt
1131+ E81F             >Heap_Ptr        defl    $ - $E000           // save current HP
1131+ E81F             >
1131+ E81F             >Current_HP      defl  $ - $E000             // used to set HP once!
1131+ E81F             >
1131+ E81F             >//              ______________________________________________________________________
1131+ E81F             >//              Dictionary part
1131+ E81F             >
1131+ E81F             >                org     Dict_Ptr
1131+ 708B             >
1131+ 708B 1D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1131+ 708D             >
1131+ 708D             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1131+ 708D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1131+ 7090             >
1131+ 7090             >
1131+ 7090             >                endif           ; ok        // for other definitions it "points" the correct handler
1131+ 7090             >                // Use of "; ok" to suppress "warning[fwdref]"
1131+ 7090             >
1131+ 7090             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1132+ 7090 92 6A                        dw      NEG_ONE                 // -1
1133+ 7092 65 6B 68 69                  dw      HLD, PLUSSTORE          // hld +!
1134+ 7096 65 6B 80 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1134+ 709A 9E 69
1135+ 709C 4B 68                        dw      EXIT                    // ;
1136+ 709E
1137+ 709E              //  ______________________________________________________________________
1138+ 709E              //
1139+ 709E              // pad         -- a
1140+ 709E              // leaves the buffer text address. This is at a fixed distance over HERE.
1141+ 709E                              Colon_Def PAD, "PAD", is_normal
1141+ 709E             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1141+ 709E             >
1141+ 709E             >Dict_Ptr        defl    $
1141+ 709E             >
1141+ 709E             >//              ______________________________________________________________________
1141+ 709E             >//              Heap part
1141+ 709E             >
1141+ 709E             >
1141+ 709E             >                org     (Heap_Ptr & $1FFF) + $E000
1141+ E81F             >
1141+ E81F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1141+ E81F             >Latest_Definition defl  Heap_Ptr
1141+ E81F             >
1141+ E81F             >                // dummy db directives used to calculate length of namec
1141+ E81F 50 41 44    >                db      "PAD"
1141+ E822             >len_NFA         defl    $ - temp_NFA
1141+ E822             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1141+ E81F             >
1141+ E81F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1141+ E820 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1141+ E823             >                org     $-1                 // alter last byte of Name just above to set
1141+ E822 C4          >                db      {b $} | END_BIT     // msb as name end
1141+ E823             >
1141+ E823 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1141+ E825             >Prev_Ptr        defl    Heap_Ptr
1141+ E825             >
1141+ E825             >mirror_Ptr      defl    $
1141+ E825             >
1141+ E825 A0 70       >                dw      Dict_Ptr + 2        // xt
1141+ E827             >Heap_Ptr        defl    $ - $E000           // save current HP
1141+ E827             >
1141+ E827             >Current_HP      defl  $ - $E000             // used to set HP once!
1141+ E827             >
1141+ E827             >//              ______________________________________________________________________
1141+ E827             >//              Dictionary part
1141+ E827             >
1141+ E827             >                org     Dict_Ptr
1141+ 709E             >
1141+ 709E 25 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1141+ 70A0             >
1141+ 70A0             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1141+ 70A0 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1141+ 70A3             >
1141+ 70A3             >
1141+ 70A3             >                endif           ; ok        // for other definitions it "points" the correct handler
1141+ 70A3             >                // Use of "; ok" to suppress "warning[fwdref]"
1141+ 70A3             >
1141+ 70A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1142+ 70A3 9B 6B                        dw      HERE                    // here
1143+ 70A5 A3 63 44 00                  dw      LIT, 68                 // 68
1144+ 70A9 98 68                        dw      PLUS                    // +
1145+ 70AB 4B 68                        dw      EXIT                    // ;
1146+ 70AD
1147+ 70AD              //  ______________________________________________________________________
1148+ 70AD              //
1149+ 70AD              // word         c -- a
1150+ 70AD              // reads characters from input streams until it encouners a c delimiter.
1151+ 70AD              // Stores that packet so it starts from HERE
1152+ 70AD              // WORD leaves a counter as first byte and ends the packet with two spaces.
1153+ 70AD              // Other occurrences of c are ignored.
1154+ 70AD              // If BLK is zero, text is taken from terminal buffer TIB.
1155+ 70AD              // Otherwise text is taken from the disk-block given by BLK.
1156+ 70AD              // "in" variable is incremented of the number of character read.
1157+ 70AD              // The number of characters read is given by ENCLOSE.
1158+ 70AD                              Colon_Def WORD, "WORD", is_normal
1158+ 70AD             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1158+ 70AD             >
1158+ 70AD             >Dict_Ptr        defl    $
1158+ 70AD             >
1158+ 70AD             >//              ______________________________________________________________________
1158+ 70AD             >//              Heap part
1158+ 70AD             >
1158+ 70AD             >
1158+ 70AD             >                org     (Heap_Ptr & $1FFF) + $E000
1158+ E827             >
1158+ E827             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1158+ E827             >Latest_Definition defl  Heap_Ptr
1158+ E827             >
1158+ E827             >                // dummy db directives used to calculate length of namec
1158+ E827 57 4F 52 44 >                db      "WORD"
1158+ E82B             >len_NFA         defl    $ - temp_NFA
1158+ E82B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1158+ E827             >
1158+ E827 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1158+ E828 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1158+ E82C             >                org     $-1                 // alter last byte of Name just above to set
1158+ E82B C4          >                db      {b $} | END_BIT     // msb as name end
1158+ E82C             >
1158+ E82C 1F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1158+ E82E             >Prev_Ptr        defl    Heap_Ptr
1158+ E82E             >
1158+ E82E             >mirror_Ptr      defl    $
1158+ E82E             >
1158+ E82E AF 70       >                dw      Dict_Ptr + 2        // xt
1158+ E830             >Heap_Ptr        defl    $ - $E000           // save current HP
1158+ E830             >
1158+ E830             >Current_HP      defl  $ - $E000             // used to set HP once!
1158+ E830             >
1158+ E830             >//              ______________________________________________________________________
1158+ E830             >//              Dictionary part
1158+ E830             >
1158+ E830             >                org     Dict_Ptr
1158+ 70AD             >
1158+ 70AD 2E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1158+ 70AF             >
1158+ 70AF             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1158+ 70AF CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1158+ 70B2             >
1158+ 70B2             >
1158+ 70B2             >                endif           ; ok        // for other definitions it "points" the correct handler
1158+ 70B2             >                // Use of "; ok" to suppress "warning[fwdref]"
1158+ 70B2             >
1158+ 70B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1159+ 70B2 17 6B 80 69                  dw      BLK, FETCH              // blk @
1160+ 70B6                                                              // if
1161+ 70B6 F3 63                        dw      ZBRANCH
1162+ 70B8 0C 00                        dw      Word_Else - $
1163+ 70BA 17 6B 80 69                  dw          BLK, FETCH          //      blk @
1164+ 70BE 6C 79                        dw          BLOCK               //      block ( forward )
1165+ 70C0                                                              // else
1166+ 70C0 EF 63                        dw      BRANCH
1167+ 70C2 06 00                        dw      Word_Endif - $
1168+ 70C4              Word_Else:
1169+ 70C4 DB 6A 80 69                  dw         TIB, FETCH           //      tib @
1170+ 70C8              Word_Endif:                                     // endif
1171+ 70C8 1D 6B 80 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1171+ 70CC 98 68
1172+ 70CE 0F 69 22 65                  dw      SWAP, ENCLOSE           // swap enclose
1173+ 70D2 9B 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1173+ 70D6 22 00 82 70
1174+ 70DA 1D 6B 68 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1175+ 70DE F2 68 DA 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1175+ 70E2 55 68
1176+ 70E4 6B 68 9B 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1176+ 70E8 9E 69
1177+ 70EA 98 68                        dw      PLUS                    // +
1178+ 70EC 9B 6B B1 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1178+ 70F0 60 68
1179+ 70F2 8C 67                        dw      CMOVE                   // cmove
1180+ 70F4 9B 6B                        dw      HERE                    // here
1181+ 70F6 4B 68                        dw      EXIT                    // ;
1182+ 70F8
1183+ 70F8              //  ______________________________________________________________________
1184+ 70F8              //
1185+ 70F8              // (.")         --
1186+ 70F8              // Direct procedure compiled by ." and  .(  It executes TYPE.
1187+ 70F8                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1187+ 70F8             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1187+ 70F8             >
1187+ 70F8             >Dict_Ptr        defl    $
1187+ 70F8             >
1187+ 70F8             >//              ______________________________________________________________________
1187+ 70F8             >//              Heap part
1187+ 70F8             >
1187+ 70F8             >
1187+ 70F8             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E830             >
1187+ E830             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E830             >Latest_Definition defl  Heap_Ptr
1187+ E830             >
1187+ E830             >                // dummy db directives used to calculate length of namec
1187+ E830 28 2E 22 29 >                db      '(.")'
1187+ E834             >len_NFA         defl    $ - temp_NFA
1187+ E834             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E830             >
1187+ E830 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E831 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1187+ E835             >                org     $-1                 // alter last byte of Name just above to set
1187+ E834 A9          >                db      {b $} | END_BIT     // msb as name end
1187+ E835             >
1187+ E835 27 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E837             >Prev_Ptr        defl    Heap_Ptr
1187+ E837             >
1187+ E837             >mirror_Ptr      defl    $
1187+ E837             >
1187+ E837 FA 70       >                dw      Dict_Ptr + 2        // xt
1187+ E839             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E839             >
1187+ E839             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E839             >
1187+ E839             >//              ______________________________________________________________________
1187+ E839             >//              Dictionary part
1187+ E839             >
1187+ E839             >                org     Dict_Ptr
1187+ 70F8             >
1187+ 70F8 37 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 70FA             >
1187+ 70FA             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 70FA CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 70FD             >
1187+ 70FD             >
1187+ 70FD             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 70FD             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 70FD             >
1187+ 70FD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 70FD 6B 68 09 6F                  dw      R_OP, COUNT             // r count
1189+ 7101 16 69 B1 68                  dw      DUP, ONE_PLUS           // dup 1+
1190+ 7105 60 68 98 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1190+ 7109 55 68
1191+ 710B 5D 6F                        dw      TYPE                    // type
1192+ 710D 4B 68                        dw      EXIT                    // ;
1193+ 710F
1194+ 710F              //  ______________________________________________________________________
1195+ 710F              //
1196+ 710F              // char         -- c
1197+ 710F              // get first character from next input word
1198+ 710F                              Colon_Def CHAR,  "CHAR", is_normal
1198+ 710F             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1198+ 710F             >
1198+ 710F             >Dict_Ptr        defl    $
1198+ 710F             >
1198+ 710F             >//              ______________________________________________________________________
1198+ 710F             >//              Heap part
1198+ 710F             >
1198+ 710F             >
1198+ 710F             >                org     (Heap_Ptr & $1FFF) + $E000
1198+ E839             >
1198+ E839             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1198+ E839             >Latest_Definition defl  Heap_Ptr
1198+ E839             >
1198+ E839             >                // dummy db directives used to calculate length of namec
1198+ E839 43 48 41 52 >                db      "CHAR"
1198+ E83D             >len_NFA         defl    $ - temp_NFA
1198+ E83D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1198+ E839             >
1198+ E839 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1198+ E83A 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1198+ E83E             >                org     $-1                 // alter last byte of Name just above to set
1198+ E83D D2          >                db      {b $} | END_BIT     // msb as name end
1198+ E83E             >
1198+ E83E 30 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1198+ E840             >Prev_Ptr        defl    Heap_Ptr
1198+ E840             >
1198+ E840             >mirror_Ptr      defl    $
1198+ E840             >
1198+ E840 11 71       >                dw      Dict_Ptr + 2        // xt
1198+ E842             >Heap_Ptr        defl    $ - $E000           // save current HP
1198+ E842             >
1198+ E842             >Current_HP      defl  $ - $E000             // used to set HP once!
1198+ E842             >
1198+ E842             >//              ______________________________________________________________________
1198+ E842             >//              Dictionary part
1198+ E842             >
1198+ E842             >                org     Dict_Ptr
1198+ 710F             >
1198+ 710F 40 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1198+ 7111             >
1198+ 7111             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1198+ 7111 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1198+ 7114             >
1198+ 7114             >
1198+ 7114             >                endif           ; ok        // for other definitions it "points" the correct handler
1198+ 7114             >                // Use of "; ok" to suppress "warning[fwdref]"
1198+ 7114             >
1198+ 7114             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1199+ 7114 99 6A AF 70                  dw      BL, WORD                // bl word
1200+ 7118 B1 68 95 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1201+ 711C 4B 68                        dw      EXIT                    // ;
1202+ 711E
1203+ 711E              //  ______________________________________________________________________
1204+ 711E              //
1205+ 711E              // ,"           --
1206+ 711E              // compiles a string terminated by " as a counted string from next input stream
1207+ 711E                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1207+ 711E             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1207+ 711E             >
1207+ 711E             >Dict_Ptr        defl    $
1207+ 711E             >
1207+ 711E             >//              ______________________________________________________________________
1207+ 711E             >//              Heap part
1207+ 711E             >
1207+ 711E             >
1207+ 711E             >                org     (Heap_Ptr & $1FFF) + $E000
1207+ E842             >
1207+ E842             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1207+ E842             >Latest_Definition defl  Heap_Ptr
1207+ E842             >
1207+ E842             >                // dummy db directives used to calculate length of namec
1207+ E842 2C 22       >                db      ',"'
1207+ E844             >len_NFA         defl    $ - temp_NFA
1207+ E844             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1207+ E842             >
1207+ E842 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1207+ E843 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1207+ E845             >                org     $-1                 // alter last byte of Name just above to set
1207+ E844 A2          >                db      {b $} | END_BIT     // msb as name end
1207+ E845             >
1207+ E845 39 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1207+ E847             >Prev_Ptr        defl    Heap_Ptr
1207+ E847             >
1207+ E847             >mirror_Ptr      defl    $
1207+ E847             >
1207+ E847 20 71       >                dw      Dict_Ptr + 2        // xt
1207+ E849             >Heap_Ptr        defl    $ - $E000           // save current HP
1207+ E849             >
1207+ E849             >Current_HP      defl  $ - $E000             // used to set HP once!
1207+ E849             >
1207+ E849             >//              ______________________________________________________________________
1207+ E849             >//              Dictionary part
1207+ E849             >
1207+ E849             >                org     Dict_Ptr
1207+ 711E             >
1207+ 711E 47 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1207+ 7120             >
1207+ 7120             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1207+ 7120 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1207+ 7123             >
1207+ 7123             >
1207+ 7123             >                endif           ; ok        // for other definitions it "points" the correct handler
1207+ 7123             >                // Use of "; ok" to suppress "warning[fwdref]"
1207+ 7123             >
1207+ 7123             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1208+ 7123 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1209+ 7127 AF 70                        dw      WORD                    // word
1210+ 7129 95 69 B1 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1211+ 712D A6 6B                        dw      ALLOT                   // allot
1212+ 712F 76 6A C0 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1213+ 7133 4B 68                        dw      EXIT
1214+ 7135
1215+ 7135              //  ______________________________________________________________________
1216+ 7135              //
1217+ 7135              // .c           c --
1218+ 7135              // intermediate general purpose string builder, used by ." and .(
1219+ 7135                              Colon_Def DOT_C,  ".C", is_immediate
1219+ 7135             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1219+ 7135             >
1219+ 7135             >Dict_Ptr        defl    $
1219+ 7135             >
1219+ 7135             >//              ______________________________________________________________________
1219+ 7135             >//              Heap part
1219+ 7135             >
1219+ 7135             >
1219+ 7135             >                org     (Heap_Ptr & $1FFF) + $E000
1219+ E849             >
1219+ E849             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1219+ E849             >Latest_Definition defl  Heap_Ptr
1219+ E849             >
1219+ E849             >                // dummy db directives used to calculate length of namec
1219+ E849 2E 43       >                db      ".C"
1219+ E84B             >len_NFA         defl    $ - temp_NFA
1219+ E84B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1219+ E849             >
1219+ E849 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1219+ E84A 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1219+ E84C             >                org     $-1                 // alter last byte of Name just above to set
1219+ E84B C3          >                db      {b $} | END_BIT     // msb as name end
1219+ E84C             >
1219+ E84C 42 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1219+ E84E             >Prev_Ptr        defl    Heap_Ptr
1219+ E84E             >
1219+ E84E             >mirror_Ptr      defl    $
1219+ E84E             >
1219+ E84E 37 71       >                dw      Dict_Ptr + 2        // xt
1219+ E850             >Heap_Ptr        defl    $ - $E000           // save current HP
1219+ E850             >
1219+ E850             >Current_HP      defl  $ - $E000             // used to set HP once!
1219+ E850             >
1219+ E850             >//              ______________________________________________________________________
1219+ E850             >//              Dictionary part
1219+ E850             >
1219+ E850             >                org     Dict_Ptr
1219+ 7135             >
1219+ 7135 4E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1219+ 7137             >
1219+ 7137             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1219+ 7137 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1219+ 713A             >
1219+ 713A             >
1219+ 713A             >                endif           ; ok        // for other definitions it "points" the correct handler
1219+ 713A             >                // Use of "; ok" to suppress "warning[fwdref]"
1219+ 713A             >
1219+ 713A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1220+ 713A 41 6B 80 69                  dw      STATE, FETCH            // state @
1221+ 713E                                                              // if
1222+ 713E F3 63                        dw      ZBRANCH
1223+ 7140 12 00                        dw      Dot_C_Else - $
1224+ 7142 3F 6E FA 70                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1225+ 7146 AF 70 95 69                  dw          WORD, CFETCH        //      word c@
1226+ 714A B1 68 A6 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1227+ 714E                                                              // else
1228+ 714E EF 63                        dw      BRANCH
1229+ 7150 08 00                        dw      Dot_C_Endif - $
1230+ 7152              Dot_C_Else:
1231+ 7152 AF 70 09 6F                  dw          WORD, COUNT, TYPE   //      word count type
1231+ 7156 5D 6F
1232+ 7158              Dot_C_Endif:                                    // endif
1233+ 7158 4B 68                        dw      EXIT                    ;
1234+ 715A
1235+ 715A              //  ______________________________________________________________________
1236+ 715A              //
1237+ 715A              // ."           c --
1238+ 715A                              Colon_Def DOT_QUOTE,  '."', is_immediate
1238+ 715A             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1238+ 715A             >
1238+ 715A             >Dict_Ptr        defl    $
1238+ 715A             >
1238+ 715A             >//              ______________________________________________________________________
1238+ 715A             >//              Heap part
1238+ 715A             >
1238+ 715A             >
1238+ 715A             >                org     (Heap_Ptr & $1FFF) + $E000
1238+ E850             >
1238+ E850             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1238+ E850             >Latest_Definition defl  Heap_Ptr
1238+ E850             >
1238+ E850             >                // dummy db directives used to calculate length of namec
1238+ E850 2E 22       >                db      '."'
1238+ E852             >len_NFA         defl    $ - temp_NFA
1238+ E852             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1238+ E850             >
1238+ E850 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1238+ E851 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1238+ E853             >                org     $-1                 // alter last byte of Name just above to set
1238+ E852 A2          >                db      {b $} | END_BIT     // msb as name end
1238+ E853             >
1238+ E853 49 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1238+ E855             >Prev_Ptr        defl    Heap_Ptr
1238+ E855             >
1238+ E855             >mirror_Ptr      defl    $
1238+ E855             >
1238+ E855 5C 71       >                dw      Dict_Ptr + 2        // xt
1238+ E857             >Heap_Ptr        defl    $ - $E000           // save current HP
1238+ E857             >
1238+ E857             >Current_HP      defl  $ - $E000             // used to set HP once!
1238+ E857             >
1238+ E857             >//              ______________________________________________________________________
1238+ E857             >//              Dictionary part
1238+ E857             >
1238+ E857             >                org     Dict_Ptr
1238+ 715A             >
1238+ 715A 55 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1238+ 715C             >
1238+ 715C             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1238+ 715C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1238+ 715F             >
1238+ 715F             >
1238+ 715F             >                endif           ; ok        // for other definitions it "points" the correct handler
1238+ 715F             >                // Use of "; ok" to suppress "warning[fwdref]"
1238+ 715F             >
1238+ 715F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1239+ 715F A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1240+ 7163 37 71                        dw      DOT_C                   // [compile] .c
1241+ 7165 4B 68                        dw      EXIT                    // ; immediate
1242+ 7167
1243+ 7167              //  ______________________________________________________________________
1244+ 7167              //
1245+ 7167              // .(           c --
1246+ 7167                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1246+ 7167             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1246+ 7167             >
1246+ 7167             >Dict_Ptr        defl    $
1246+ 7167             >
1246+ 7167             >//              ______________________________________________________________________
1246+ 7167             >//              Heap part
1246+ 7167             >
1246+ 7167             >
1246+ 7167             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E857             >
1246+ E857             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E857             >Latest_Definition defl  Heap_Ptr
1246+ E857             >
1246+ E857             >                // dummy db directives used to calculate length of namec
1246+ E857 2E 28       >                db      ".("
1246+ E859             >len_NFA         defl    $ - temp_NFA
1246+ E859             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E857             >
1246+ E857 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E858 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1246+ E85A             >                org     $-1                 // alter last byte of Name just above to set
1246+ E859 A8          >                db      {b $} | END_BIT     // msb as name end
1246+ E85A             >
1246+ E85A 50 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E85C             >Prev_Ptr        defl    Heap_Ptr
1246+ E85C             >
1246+ E85C             >mirror_Ptr      defl    $
1246+ E85C             >
1246+ E85C 69 71       >                dw      Dict_Ptr + 2        // xt
1246+ E85E             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E85E             >
1246+ E85E             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E85E             >
1246+ E85E             >//              ______________________________________________________________________
1246+ E85E             >//              Dictionary part
1246+ E85E             >
1246+ E85E             >                org     Dict_Ptr
1246+ 7167             >
1246+ 7167 5C 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 7169             >
1246+ 7169             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 7169 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 716C             >
1246+ 716C             >
1246+ 716C             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 716C             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 716C             >
1246+ 716C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 716C A3 63 29 00                  dw      LIT, ")"                // [char] )
1248+ 7170 37 71                        dw      DOT_C                   // [compile] .c
1249+ 7172 4B 68                        dw      EXIT                    // ; immediate
1250+ 7174
1251+ 7174              //  ______________________________________________________________________
1252+ 7174              //
1253+ 7174              // (sgn)        a -- a f
1254+ 7174              // determines if char in addr a is a sign (+ or -), and in that case increments
1255+ 7174              // a flag. Returns f as the sign, true for negative, false for positive.
1256+ 7174              // called by NUMBER and (EXP)
1257+ 7174                              Colon_Def CSGN,  "(SGN)", is_normal
1257+ 7174             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1257+ 7174             >
1257+ 7174             >Dict_Ptr        defl    $
1257+ 7174             >
1257+ 7174             >//              ______________________________________________________________________
1257+ 7174             >//              Heap part
1257+ 7174             >
1257+ 7174             >
1257+ 7174             >                org     (Heap_Ptr & $1FFF) + $E000
1257+ E85E             >
1257+ E85E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1257+ E85E             >Latest_Definition defl  Heap_Ptr
1257+ E85E             >
1257+ E85E             >                // dummy db directives used to calculate length of namec
1257+ E85E 28 53 47 4E >                db      "(SGN)"
1257+ E862 29          >
1257+ E863             >len_NFA         defl    $ - temp_NFA
1257+ E863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1257+ E85E             >
1257+ E85E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1257+ E85F 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1257+ E863 29          >
1257+ E864             >                org     $-1                 // alter last byte of Name just above to set
1257+ E863 A9          >                db      {b $} | END_BIT     // msb as name end
1257+ E864             >
1257+ E864 57 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1257+ E866             >Prev_Ptr        defl    Heap_Ptr
1257+ E866             >
1257+ E866             >mirror_Ptr      defl    $
1257+ E866             >
1257+ E866 76 71       >                dw      Dict_Ptr + 2        // xt
1257+ E868             >Heap_Ptr        defl    $ - $E000           // save current HP
1257+ E868             >
1257+ E868             >Current_HP      defl  $ - $E000             // used to set HP once!
1257+ E868             >
1257+ E868             >//              ______________________________________________________________________
1257+ E868             >//              Dictionary part
1257+ E868             >
1257+ E868             >                org     Dict_Ptr
1257+ 7174             >
1257+ 7174 66 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1257+ 7176             >
1257+ 7176             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1257+ 7176 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1257+ 7179             >
1257+ 7179             >
1257+ 7179             >                endif           ; ok        // for other definitions it "points" the correct handler
1257+ 7179             >                // Use of "; ok" to suppress "warning[fwdref]"
1257+ 7179             >
1257+ 7179             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1258+ 7179 16 69 B1 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1258+ 717D 95 69
1259+ 717F 16 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1259+ 7183 2D 00 E6 6B
1260+ 7187                                                              // if
1261+ 7187 F3 63                        dw      ZBRANCH
1262+ 7189 12 00                        dw      CSgn_Else_0 - $
1263+ 718B FB 68                        dw          DROP                //      drop
1264+ 718D B1 68                        dw          ONE_PLUS            //      1+
1265+ 718F 7D 6A 4D 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1265+ 7193 68 69
1266+ 7195 7D 6A                        dw          ONE                 //      1
1267+ 7197                                                              // else
1268+ 7197 EF 63                        dw      BRANCH
1269+ 7199 16 00                        dw      CSgn_Endif_0 - $
1270+ 719B              CSgn_Else_0:
1271+ 719B A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1271+ 719F E6 6B
1272+ 71A1                                                              //      if
1273+ 71A1 F3 63                        dw          ZBRANCH
1274+ 71A3 0A 00                        dw          CSgn_Endif_1 - $
1275+ 71A5 B1 68                        dw              ONE_PLUS        //          1+
1276+ 71A7 7D 6A 4D 6B                  dw              ONE, DPL        //          1 dpl
1277+ 71AB 68 69                        dw              PLUSSTORE       //          +!
1278+ 71AD              CSgn_Endif_1                                    //      endif
1279+ 71AD 76 6A                        dw          ZERO                //      0
1280+ 71AF              CSgn_Endif_0:                                   // endif
1281+ 71AF 4B 68                        dw      EXIT
1282+ 71B1
1283+ 71B1              //  ______________________________________________________________________
1284+ 71B1              //
1285+ 71B1              // (number)     d a -- d1 a1
1286+ 71B1              // using the current BASE parse characters stored in address a
1287+ 71B1              // accumulating a double precision integer d
1288+ 71B1              // the process stops at the first not-convertible character
1289+ 71B1              // A double-number is kept in CPU registers as HLDE.
1290+ 71B1              // On the stack a double number is treated as two single numbers
1291+ 71B1              // where HL is on the top of the stack and DE is the second from top,
1292+ 71B1              // so in the stack memory it appears as LHED.
1293+ 71B1              // Instead, in 2VARIABLE a double number is stored as EDLH.
1294+ 71B1                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1294+ 71B1             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1294+ 71B1             >
1294+ 71B1             >Dict_Ptr        defl    $
1294+ 71B1             >
1294+ 71B1             >//              ______________________________________________________________________
1294+ 71B1             >//              Heap part
1294+ 71B1             >
1294+ 71B1             >
1294+ 71B1             >                org     (Heap_Ptr & $1FFF) + $E000
1294+ E868             >
1294+ E868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1294+ E868             >Latest_Definition defl  Heap_Ptr
1294+ E868             >
1294+ E868             >                // dummy db directives used to calculate length of namec
1294+ E868 28 4E 55 4D >                db      "(NUMBER)"
1294+ E86C 42 45 52 29 >
1294+ E870             >len_NFA         defl    $ - temp_NFA
1294+ E870             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1294+ E868             >
1294+ E868 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1294+ E869 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1294+ E86D 42 45 52 29 >
1294+ E871             >                org     $-1                 // alter last byte of Name just above to set
1294+ E870 A9          >                db      {b $} | END_BIT     // msb as name end
1294+ E871             >
1294+ E871 5E 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1294+ E873             >Prev_Ptr        defl    Heap_Ptr
1294+ E873             >
1294+ E873             >mirror_Ptr      defl    $
1294+ E873             >
1294+ E873 B3 71       >                dw      Dict_Ptr + 2        // xt
1294+ E875             >Heap_Ptr        defl    $ - $E000           // save current HP
1294+ E875             >
1294+ E875             >Current_HP      defl  $ - $E000             // used to set HP once!
1294+ E875             >
1294+ E875             >//              ______________________________________________________________________
1294+ E875             >//              Dictionary part
1294+ E875             >
1294+ E875             >                org     Dict_Ptr
1294+ 71B1             >
1294+ 71B1 73 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1294+ 71B3             >
1294+ 71B3             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1294+ 71B3 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1294+ 71B6             >
1294+ 71B6             >
1294+ 71B6             >                endif           ; ok        // for other definitions it "points" the correct handler
1294+ 71B6             >                // Use of "; ok" to suppress "warning[fwdref]"
1294+ 71B6             >
1294+ 71B6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1295+ 71B6                                                              // begin
1296+ 71B6              CNumber_Begin:
1297+ 71B6 B1 68                        dw          ONE_PLUS            //      1+
1298+ 71B8 16 69 55 68                  dw          DUP, TO_R           //      dup >r
1299+ 71BC 95 69                        dw          CFETCH              //      @
1300+ 71BE 47 6B 80 69                  dw          BASE, FETCH         //      base @
1301+ 71C2 47 64                        dw          DIGIT               //      digit
1302+ 71C4                                                              // while
1303+ 71C4 F3 63                        dw      ZBRANCH
1304+ 71C6 2C 00                        dw      CNumber_While_end - $
1305+ 71C8 0F 69                        dw          SWAP                //      swap
1306+ 71CA 47 6B 80 69                  dw          BASE, FETCH         //      base @
1307+ 71CE B0 67                        dw          UM_MUL              //      um*
1308+ 71D0 FB 68 1D 69                  dw          DROP, ROT           //      drop rot
1309+ 71D4 47 6B 80 69                  dw          BASE, FETCH         //      base @
1310+ 71D8 B0 67                        dw          UM_MUL              //      um*
1311+ 71DA A2 68                        dw          DPLUS               //      d+
1312+ 71DC 4D 6B 80 69                  dw          DPL, FETCH          //      dpl @
1313+ 71E0 B1 68                        dw          ONE_PLUS            //      1+
1314+ 71E2                                                              //      if
1315+ 71E2 F3 63                        dw          ZBRANCH
1316+ 71E4 08 00                        dw          CNumber_Endif - $
1317+ 71E6 7D 6A 4D 6B                  dw              ONE, DPL        //          1 dpl
1318+ 71EA 68 69                        dw              PLUSSTORE       //          +!
1319+ 71EC              CNumber_Endif:                                  //      endif
1320+ 71EC 60 68                        dw             R_TO             //      r>  ( balance rp )
1321+ 71EE EF 63                        dw      BRANCH
1322+ 71F0 C6 FF                        dw      CNumber_Begin - $
1323+ 71F2              CNumber_While_end:                              // repeat
1324+ 71F2 60 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1325+ 71F4 4B 68                        dw      EXIT                    // ;
1326+ 71F6
1327+ 71F6              //  ______________________________________________________________________
1328+ 71F6              //
1329+ 71F6              // (prefix)
1330+ 71F6                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1330+ 71F6             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1330+ 71F6             >
1330+ 71F6             >Dict_Ptr        defl    $
1330+ 71F6             >
1330+ 71F6             >//              ______________________________________________________________________
1330+ 71F6             >//              Heap part
1330+ 71F6             >
1330+ 71F6             >
1330+ 71F6             >                org     (Heap_Ptr & $1FFF) + $E000
1330+ E875             >
1330+ E875             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1330+ E875             >Latest_Definition defl  Heap_Ptr
1330+ E875             >
1330+ E875             >                // dummy db directives used to calculate length of namec
1330+ E875 28 50 52 45 >                db      "(PREFIX)"
1330+ E879 46 49 58 29 >
1330+ E87D             >len_NFA         defl    $ - temp_NFA
1330+ E87D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1330+ E875             >
1330+ E875 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1330+ E876 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1330+ E87A 46 49 58 29 >
1330+ E87E             >                org     $-1                 // alter last byte of Name just above to set
1330+ E87D A9          >                db      {b $} | END_BIT     // msb as name end
1330+ E87E             >
1330+ E87E 68 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1330+ E880             >Prev_Ptr        defl    Heap_Ptr
1330+ E880             >
1330+ E880             >mirror_Ptr      defl    $
1330+ E880             >
1330+ E880 F8 71       >                dw      Dict_Ptr + 2        // xt
1330+ E882             >Heap_Ptr        defl    $ - $E000           // save current HP
1330+ E882             >
1330+ E882             >Current_HP      defl  $ - $E000             // used to set HP once!
1330+ E882             >
1330+ E882             >//              ______________________________________________________________________
1330+ E882             >//              Dictionary part
1330+ E882             >
1330+ E882             >                org     Dict_Ptr
1330+ 71F6             >
1330+ 71F6 80 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1330+ 71F8             >
1330+ 71F8             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1330+ 71F8 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1330+ 71FB             >
1330+ 71FB             >
1330+ 71FB             >                endif           ; ok        // for other definitions it "points" the correct handler
1330+ 71FB             >                // Use of "; ok" to suppress "warning[fwdref]"
1330+ 71FB             >
1330+ 71FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1331+ 71FB 16 69 B1 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1331+ 71FF 95 69
1332+ 7201 16 69 55 68                  dw      DUP, TO_R               // dup >r
1333+ 7205 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1333+ 7209 E6 6B
1334+ 720B                                                              // if
1335+ 720B F3 63                        dw      ZBRANCH
1336+ 720D 06 00                        dw      CPrefix_Endif_0 - $
1337+ 720F B1 68                        dw          ONE_PLUS            //      1+
1338+ 7211 97 6E                        dw          HEX
1339+ 7213              CPrefix_Endif_0:                                // endif
1340+ 7213 6B 68                        dw      R_OP                    // r@
1341+ 7215 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1341+ 7219 E6 6B
1342+ 721B                                                              // if
1343+ 721B F3 63                        dw      ZBRANCH
1344+ 721D 0A 00                        dw      CPrefix_Endif_1 - $
1345+ 721F B1 68                        dw          ONE_PLUS            //      1+
1346+ 7221 84 6A                        dw          TWO
1347+ 7223 47 6B 8A 69                  dw          BASE, STORE         //      2 base !
1348+ 7227              CPrefix_Endif_1:                                // endif
1349+ 7227 60 68                        dw      R_TO                    // r>
1350+ 7229 A3 63 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1350+ 722D E6 6B
1351+ 722F                                                              // if
1352+ 722F F3 63                        dw      ZBRANCH
1353+ 7231 06 00                        dw      CPrefix_Endif_2 - $
1354+ 7233 B1 68                        dw          ONE_PLUS            //      1+
1355+ 7235 A6 6E                        dw          DECIMAL
1356+ 7237              CPrefix_Endif_2:                                // endif
1357+ 7237 4B 68                        dw      EXIT
1358+ 7239
1359+ 7239              //  ______________________________________________________________________
1360+ 7239
1361+ 7239              PDOM_PTR:
1362+ 7239              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1363+ 7239 2C 2F 2D 3A                  db ',/-:'
1364+ 723D              PCDM_PTR:
1365+ 723D              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1366+ 723D 2E 2E 2E 2E                  db '....'
1367+ 7241
1368+ 7241              //  ______________________________________________________________________
1369+ 7241              //
1370+ 7241              // number       a -- d
1371+ 7241                              Colon_Def NUMBER,  "NUMBER", is_normal
1371+ 7241             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1371+ 7241             >
1371+ 7241             >Dict_Ptr        defl    $
1371+ 7241             >
1371+ 7241             >//              ______________________________________________________________________
1371+ 7241             >//              Heap part
1371+ 7241             >
1371+ 7241             >
1371+ 7241             >                org     (Heap_Ptr & $1FFF) + $E000
1371+ E882             >
1371+ E882             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1371+ E882             >Latest_Definition defl  Heap_Ptr
1371+ E882             >
1371+ E882             >                // dummy db directives used to calculate length of namec
1371+ E882 4E 55 4D 42 >                db      "NUMBER"
1371+ E886 45 52       >
1371+ E888             >len_NFA         defl    $ - temp_NFA
1371+ E888             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1371+ E882             >
1371+ E882 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1371+ E883 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1371+ E887 45 52       >
1371+ E889             >                org     $-1                 // alter last byte of Name just above to set
1371+ E888 D2          >                db      {b $} | END_BIT     // msb as name end
1371+ E889             >
1371+ E889 75 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1371+ E88B             >Prev_Ptr        defl    Heap_Ptr
1371+ E88B             >
1371+ E88B             >mirror_Ptr      defl    $
1371+ E88B             >
1371+ E88B 43 72       >                dw      Dict_Ptr + 2        // xt
1371+ E88D             >Heap_Ptr        defl    $ - $E000           // save current HP
1371+ E88D             >
1371+ E88D             >Current_HP      defl  $ - $E000             // used to set HP once!
1371+ E88D             >
1371+ E88D             >//              ______________________________________________________________________
1371+ E88D             >//              Dictionary part
1371+ E88D             >
1371+ E88D             >                org     Dict_Ptr
1371+ 7241             >
1371+ 7241 8B 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1371+ 7243             >
1371+ 7243             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1371+ 7243 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1371+ 7246             >
1371+ 7246             >
1371+ 7246             >                endif           ; ok        // for other definitions it "points" the correct handler
1371+ 7246             >                // Use of "; ok" to suppress "warning[fwdref]"
1371+ 7246             >
1371+ 7246             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1372+ 7246 76 6A 76 6A                  dw      ZERO, ZERO              // 0 0
1373+ 724A 1D 69                        dw      ROT                     // rot
1374+ 724C
1375+ 724C 47 6B 80 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1375+ 7250 55 68
1376+ 7252 F8 71                        dw      CPREFIX                 // (prefix)   // ***
1377+ 7254
1378+ 7254 76 71 55 68                  dw      CSGN, TO_R              // (sgn) >r
1379+ 7258
1380+ 7258 92 6A 4D 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1380+ 725C 8A 69
1381+ 725E B3 71                        dw      CNUMBER                 // (number)
1382+ 7260              Number_Begin:                                   // begin
1383+ 7260 16 69 95 69                  dw        DUP, CFETCH             // dup c@
1384+ 7264 55 68                        dw        TO_R                    // >r
1385+ 7266                          //  dw        PCDM, PDOM              //  pcdm pdom
1386+ 7266 A3 63 3D 72                  dw        LIT, PCDM_PTR           //
1387+ 726A A3 63 39 72                  dw        LIT, PDOM_PTR           //
1388+ 726E A3 63 04 00                  dw        LIT, 4                  //  4
1389+ 7272 60 68                        dw        R_TO                    // r>
1390+ 7274 54 65                        dw        C_MAP                   // (map)
1391+ 7276 76 6A 0F 69                  dw        ZERO, SWAP              // 0 swap
1392+ 727A A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1392+ 727E E6 6B
1393+ 7280
1394+ 7280 F3 63                        dw        ZBRANCH                 // if
1395+ 7282 0A 00                        dw        Number_Endif_1 - $
1396+ 7284 76 6A 4D 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1396+ 7288 8A 69
1397+ 728A B1 68                        dw          ONE_PLUS                //      1+
1398+ 728C              Number_Endif_1:                                   // endif
1399+ 728C
1400+ 728C F3 63                        dw      ZBRANCH                // while
1401+ 728E 08 00                        dw      Number_While_end - $
1402+ 7290 B3 71                        dw        CNUMBER                 // (number)
1403+ 7292 EF 63                        dw      BRANCH
1404+ 7294 CC FF                        dw      Number_Begin - $
1405+ 7296              Number_While_end:                               // repeat
1406+ 7296
1407+ 7296 95 69 99 6A                  dw      CFETCH, BL              // c@ bl
1408+ 729A DA 6B 76 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1408+ 729E CF 6D
1409+ 72A0 60 68                        dw      R_TO                    // r>
1410+ 72A2                                                              // if
1411+ 72A2 F3 63                        dw      ZBRANCH
1412+ 72A4 04 00                        dw      Number_Endif_2 - $
1413+ 72A6 E5 68                        dw          DMINUS              //      dminus
1414+ 72A8              Number_Endif_2:                                 // endif
1415+ 72A8 60 68 47 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1415+ 72AC 8A 69
1416+ 72AE 4B 68                        dw      EXIT                    // ;
1417+ 72B0
1418+ 72B0              //  ______________________________________________________________________
1419+ 72B0              //
1420+ 72B0              // twofind      a -- d
1421+ 72B0                              Colon_Def TWOFIND,  "2FIND", is_normal
1421+ 72B0             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1421+ 72B0             >
1421+ 72B0             >Dict_Ptr        defl    $
1421+ 72B0             >
1421+ 72B0             >//              ______________________________________________________________________
1421+ 72B0             >//              Heap part
1421+ 72B0             >
1421+ 72B0             >
1421+ 72B0             >                org     (Heap_Ptr & $1FFF) + $E000
1421+ E88D             >
1421+ E88D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1421+ E88D             >Latest_Definition defl  Heap_Ptr
1421+ E88D             >
1421+ E88D             >                // dummy db directives used to calculate length of namec
1421+ E88D 32 46 49 4E >                db      "2FIND"
1421+ E891 44          >
1421+ E892             >len_NFA         defl    $ - temp_NFA
1421+ E892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1421+ E88D             >
1421+ E88D 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1421+ E88E 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1421+ E892 44          >
1421+ E893             >                org     $-1                 // alter last byte of Name just above to set
1421+ E892 C4          >                db      {b $} | END_BIT     // msb as name end
1421+ E893             >
1421+ E893 82 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1421+ E895             >Prev_Ptr        defl    Heap_Ptr
1421+ E895             >
1421+ E895             >mirror_Ptr      defl    $
1421+ E895             >
1421+ E895 B2 72       >                dw      Dict_Ptr + 2        // xt
1421+ E897             >Heap_Ptr        defl    $ - $E000           // save current HP
1421+ E897             >
1421+ E897             >Current_HP      defl  $ - $E000             // used to set HP once!
1421+ E897             >
1421+ E897             >//              ______________________________________________________________________
1421+ E897             >//              Dictionary part
1421+ E897             >
1421+ E897             >                org     Dict_Ptr
1421+ 72B0             >
1421+ 72B0 95 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1421+ 72B2             >
1421+ 72B2             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1421+ 72B2 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1421+ 72B5             >
1421+ 72B5             >
1421+ 72B5             >                endif           ; ok        // for other definitions it "points" the correct handler
1421+ 72B5             >                // Use of "; ok" to suppress "warning[fwdref]"
1421+ 72B5             >
1421+ 72B5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1422+ 72B5 55 68 6B 68                  dw      TO_R, R_OP              // >r r@
1423+ 72B9 35 6B 80 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1423+ 72BD 80 69
1424+ 72BF B4 64                        dw      C_FIND                  // (find)
1425+ 72C1 3D 6C                        dw      QDUP                    // ?dup
1426+ 72C3 70 68                        dw      ZEQUAL                  // 0=
1427+ 72C5                                                              // if
1428+ 72C5 F3 63                        dw      ZBRANCH
1429+ 72C7 24 00                        dw      LFind_Endif - $
1430+ 72C9 6B 68                        dw          R_OP                //      r@
1431+ 72CB                              // dw          LATEST               //      latest
1432+ 72CB 3B 6B 80 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1432+ 72CF 80 69
1433+ 72D1 B4 64                        dw          C_FIND              //      (find)
1434+ 72D3
1435+ 72D3 3D 6C                            dw      QDUP                    // ?dup
1436+ 72D5 70 68                            dw      ZEQUAL                  // 0=
1437+ 72D7                                                                  // if
1438+ 72D7 F3 63                            dw      ZBRANCH
1439+ 72D9 12 00                            dw      LFind_Endif2 - $
1440+ 72DB 6B 68                            dw          R_OP                //      r@
1441+ 72DD A3 63 2C 75                      dw          LIT, FORTH, TO_BODY
1441+ 72E1 4E 6D
1442+ 72E3 C7 68 C7 68                      dw          CELL_PLUS, CELL_PLUS
1443+ 72E7 80 69                            dw          FETCH
1444+ 72E9 B4 64                            dw          C_FIND              //      (find)
1445+ 72EB              LFind_Endif2:                                    // endif
1446+ 72EB
1447+ 72EB
1448+ 72EB              LFind_Endif:                                    // endif
1449+ 72EB 60 68 FB 68                  dw      R_TO, DROP              // r> drop
1450+ 72EF 4B 68                        dw      EXIT                    // ;
1451+ 72F1
1452+ 72F1              //  ______________________________________________________________________
1453+ 72F1              //
1454+ 72F1              // -find        a -- d
1455+ 72F1                              Colon_Def LFIND,  "-FIND", is_normal
1455+ 72F1             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1455+ 72F1             >
1455+ 72F1             >Dict_Ptr        defl    $
1455+ 72F1             >
1455+ 72F1             >//              ______________________________________________________________________
1455+ 72F1             >//              Heap part
1455+ 72F1             >
1455+ 72F1             >
1455+ 72F1             >                org     (Heap_Ptr & $1FFF) + $E000
1455+ E897             >
1455+ E897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1455+ E897             >Latest_Definition defl  Heap_Ptr
1455+ E897             >
1455+ E897             >                // dummy db directives used to calculate length of namec
1455+ E897 2D 46 49 4E >                db      "-FIND"
1455+ E89B 44          >
1455+ E89C             >len_NFA         defl    $ - temp_NFA
1455+ E89C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1455+ E897             >
1455+ E897 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1455+ E898 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1455+ E89C 44          >
1455+ E89D             >                org     $-1                 // alter last byte of Name just above to set
1455+ E89C C4          >                db      {b $} | END_BIT     // msb as name end
1455+ E89D             >
1455+ E89D 8D 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1455+ E89F             >Prev_Ptr        defl    Heap_Ptr
1455+ E89F             >
1455+ E89F             >mirror_Ptr      defl    $
1455+ E89F             >
1455+ E89F F3 72       >                dw      Dict_Ptr + 2        // xt
1455+ E8A1             >Heap_Ptr        defl    $ - $E000           // save current HP
1455+ E8A1             >
1455+ E8A1             >Current_HP      defl  $ - $E000             // used to set HP once!
1455+ E8A1             >
1455+ E8A1             >//              ______________________________________________________________________
1455+ E8A1             >//              Dictionary part
1455+ E8A1             >
1455+ E8A1             >                org     Dict_Ptr
1455+ 72F1             >
1455+ 72F1 9F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1455+ 72F3             >
1455+ 72F3             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1455+ 72F3 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1455+ 72F6             >
1455+ 72F6             >
1455+ 72F6             >                endif           ; ok        // for other definitions it "points" the correct handler
1455+ 72F6             >                // Use of "; ok" to suppress "warning[fwdref]"
1455+ 72F6             >
1455+ 72F6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1456+ 72F6 99 6A AF 70                  dw      BL, WORD                // bl word
1457+ 72FA B2 72                        dw      TWOFIND                 // 2find
1458+ 72FC 4B 68                        dw      EXIT                    // ;
1459+ 72FE
1460+ 72FE              //  ______________________________________________________________________
1461+ 72FE              //
1462+ 72FE              // (abort)      --
1463+ 72FE                              Colon_Def CABORT,  "(ABORT)", is_normal
1463+ 72FE             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1463+ 72FE             >
1463+ 72FE             >Dict_Ptr        defl    $
1463+ 72FE             >
1463+ 72FE             >//              ______________________________________________________________________
1463+ 72FE             >//              Heap part
1463+ 72FE             >
1463+ 72FE             >
1463+ 72FE             >                org     (Heap_Ptr & $1FFF) + $E000
1463+ E8A1             >
1463+ E8A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1463+ E8A1             >Latest_Definition defl  Heap_Ptr
1463+ E8A1             >
1463+ E8A1             >                // dummy db directives used to calculate length of namec
1463+ E8A1 28 41 42 4F >                db      "(ABORT)"
1463+ E8A5 52 54 29    >
1463+ E8A8             >len_NFA         defl    $ - temp_NFA
1463+ E8A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1463+ E8A1             >
1463+ E8A1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1463+ E8A2 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1463+ E8A6 52 54 29    >
1463+ E8A9             >                org     $-1                 // alter last byte of Name just above to set
1463+ E8A8 A9          >                db      {b $} | END_BIT     // msb as name end
1463+ E8A9             >
1463+ E8A9 97 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1463+ E8AB             >Prev_Ptr        defl    Heap_Ptr
1463+ E8AB             >
1463+ E8AB             >mirror_Ptr      defl    $
1463+ E8AB             >
1463+ E8AB 00 73       >                dw      Dict_Ptr + 2        // xt
1463+ E8AD             >Heap_Ptr        defl    $ - $E000           // save current HP
1463+ E8AD             >
1463+ E8AD             >Current_HP      defl  $ - $E000             // used to set HP once!
1463+ E8AD             >
1463+ E8AD             >//              ______________________________________________________________________
1463+ E8AD             >//              Dictionary part
1463+ E8AD             >
1463+ E8AD             >                org     Dict_Ptr
1463+ 72FE             >
1463+ 72FE AB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1463+ 7300             >
1463+ 7300             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1463+ 7300 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1463+ 7303             >
1463+ 7303             >
1463+ 7303             >                endif           ; ok        // for other definitions it "points" the correct handler
1463+ 7303             >                // Use of "; ok" to suppress "warning[fwdref]"
1463+ 7303             >
1463+ 7303             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1464+ 7303 93 75                        dw      ABORT                   // abort
1465+ 7305 4B 68                        dw      EXIT                    // ;
1466+ 7307
1467+ 7307              //  ______________________________________________________________________
1468+ 7307              //
1469+ 7307              // error        n --
1470+ 7307              // raise an error
1471+ 7307              // if WARNING is 0, prints "MSG#n".
1472+ 7307              // if WARNING is 1, prints line n of screen 4.
1473+ 7307              // if WARNING is -1 does (ABORT) that normally does ABORT
1474+ 7307              // value can be negative or beyond block 4.
1475+ 7307                              Colon_Def ERROR,  "ERROR", is_normal
1475+ 7307             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1475+ 7307             >
1475+ 7307             >Dict_Ptr        defl    $
1475+ 7307             >
1475+ 7307             >//              ______________________________________________________________________
1475+ 7307             >//              Heap part
1475+ 7307             >
1475+ 7307             >
1475+ 7307             >                org     (Heap_Ptr & $1FFF) + $E000
1475+ E8AD             >
1475+ E8AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1475+ E8AD             >Latest_Definition defl  Heap_Ptr
1475+ E8AD             >
1475+ E8AD             >                // dummy db directives used to calculate length of namec
1475+ E8AD 45 52 52 4F >                db      "ERROR"
1475+ E8B1 52          >
1475+ E8B2             >len_NFA         defl    $ - temp_NFA
1475+ E8B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1475+ E8AD             >
1475+ E8AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1475+ E8AE 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1475+ E8B2 52          >
1475+ E8B3             >                org     $-1                 // alter last byte of Name just above to set
1475+ E8B2 D2          >                db      {b $} | END_BIT     // msb as name end
1475+ E8B3             >
1475+ E8B3 A1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1475+ E8B5             >Prev_Ptr        defl    Heap_Ptr
1475+ E8B5             >
1475+ E8B5             >mirror_Ptr      defl    $
1475+ E8B5             >
1475+ E8B5 09 73       >                dw      Dict_Ptr + 2        // xt
1475+ E8B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1475+ E8B7             >
1475+ E8B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1475+ E8B7             >
1475+ E8B7             >//              ______________________________________________________________________
1475+ E8B7             >//              Dictionary part
1475+ E8B7             >
1475+ E8B7             >                org     Dict_Ptr
1475+ 7307             >
1475+ 7307 B5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1475+ 7309             >
1475+ 7309             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1475+ 7309 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1475+ 730C             >
1475+ 730C             >
1475+ 730C             >                endif           ; ok        // for other definitions it "points" the correct handler
1475+ 730C             >                // Use of "; ok" to suppress "warning[fwdref]"
1475+ 730C             >
1475+ 730C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1476+ 730C E7 6A 80 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1476+ 7310 81 68
1477+ 7312                                                              // if
1478+ 7312 F3 63                        dw      ZBRANCH
1479+ 7314 04 00                        dw      Error_Endif_1 - $
1480+ 7316 00 73                        dw          CABORT              //      (abort)
1481+ 7318              Error_Endif_1:                                  // endif
1482+ 7318 9B 6B 09 6F                  dw      HERE, COUNT, TYPE       // here count type
1482+ 731C 5D 6F
1483+ 731E FA 70                        dw      C_DOT_QUOTE             // .( ? )
1484+ 7320 02 3F 20                     db      2, "? "
1485+ 7323 83 77                        dw      MESSAGE                 // message  ( forward )
1486+ 7325 CF 6A 80 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1486+ 7329 3B 68
1487+ 732B 17 6B 80 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1487+ 732F 3D 6C
1488+ 7331                                                              // if
1489+ 7331 F3 63                        dw      ZBRANCH
1490+ 7333 08 00                        dw      Error_Endif_2 - $
1491+ 7335 1D 6B 80 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1491+ 7339 0F 69
1492+ 733B              Error_Endif_2:                                  // endif
1493+ 733B 57 75                        dw      QUIT                    // quit ( forward )
1494+ 733D 4B 68                        dw      EXIT                    // ;
1495+ 733F              //  ______________________________________________________________________
1496+ 733F              //
1497+ 733F              // id.          nfa --
1498+ 733F                              Colon_Def ID_DOT,  "ID.", is_normal
1498+ 733F             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1498+ 733F             >
1498+ 733F             >Dict_Ptr        defl    $
1498+ 733F             >
1498+ 733F             >//              ______________________________________________________________________
1498+ 733F             >//              Heap part
1498+ 733F             >
1498+ 733F             >
1498+ 733F             >                org     (Heap_Ptr & $1FFF) + $E000
1498+ E8B7             >
1498+ E8B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1498+ E8B7             >Latest_Definition defl  Heap_Ptr
1498+ E8B7             >
1498+ E8B7             >                // dummy db directives used to calculate length of namec
1498+ E8B7 49 44 2E    >                db      "ID."
1498+ E8BA             >len_NFA         defl    $ - temp_NFA
1498+ E8BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1498+ E8B7             >
1498+ E8B7 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1498+ E8B8 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1498+ E8BB             >                org     $-1                 // alter last byte of Name just above to set
1498+ E8BA AE          >                db      {b $} | END_BIT     // msb as name end
1498+ E8BB             >
1498+ E8BB AD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1498+ E8BD             >Prev_Ptr        defl    Heap_Ptr
1498+ E8BD             >
1498+ E8BD             >mirror_Ptr      defl    $
1498+ E8BD             >
1498+ E8BD 41 73       >                dw      Dict_Ptr + 2        // xt
1498+ E8BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1498+ E8BF             >
1498+ E8BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1498+ E8BF             >
1498+ E8BF             >//              ______________________________________________________________________
1498+ E8BF             >//              Dictionary part
1498+ E8BF             >
1498+ E8BF             >                org     Dict_Ptr
1498+ 733F             >
1498+ 733F BD 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1498+ 7341             >
1498+ 7341             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1498+ 7341 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1498+ 7344             >
1498+ 7344             >
1498+ 7344             >                endif           ; ok        // for other definitions it "points" the correct handler
1498+ 7344             >                // Use of "; ok" to suppress "warning[fwdref]"
1498+ 7344             >
1498+ 7344             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1499+ 7344 F3 6C                        dw      QTOHEAP
1500+ 7346 16 69 7D 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1500+ 734A 6F 6C
1501+ 734C B1 68                        dw      ONE_PLUS                // 1+
1502+ 734E F2 68 DA 6B                  dw      OVER, SUBTRACT          // over -
1503+ 7352 16 69 55 68                  dw      DUP, TO_R               // >r
1504+ 7356 A0 70 0F 69                  dw      PAD, SWAP               // pad swap
1505+ 735A 8C 67                        dw      CMOVE                   // cmove
1506+ 735C A0 70 B1 68                  dw      PAD, ONE_PLUS           // pad 1+
1507+ 7360 60 68 B8 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1508+ 7364 5D 6F 64 6C                  dw      TYPE, SPACE             // type
1509+ 7368 4B 68                        dw      EXIT                    // ;
1510+ 736A
1511+ 736A              //  ______________________________________________________________________
1512+ 736A              //
1513+ 736A              // code         -- cccc
1514+ 736A                              Colon_Def CODE,  "CODE", is_normal
1514+ 736A             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1514+ 736A             >
1514+ 736A             >Dict_Ptr        defl    $
1514+ 736A             >
1514+ 736A             >//              ______________________________________________________________________
1514+ 736A             >//              Heap part
1514+ 736A             >
1514+ 736A             >
1514+ 736A             >                org     (Heap_Ptr & $1FFF) + $E000
1514+ E8BF             >
1514+ E8BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1514+ E8BF             >Latest_Definition defl  Heap_Ptr
1514+ E8BF             >
1514+ E8BF             >                // dummy db directives used to calculate length of namec
1514+ E8BF 43 4F 44 45 >                db      "CODE"
1514+ E8C3             >len_NFA         defl    $ - temp_NFA
1514+ E8C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1514+ E8BF             >
1514+ E8BF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1514+ E8C0 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1514+ E8C4             >                org     $-1                 // alter last byte of Name just above to set
1514+ E8C3 C5          >                db      {b $} | END_BIT     // msb as name end
1514+ E8C4             >
1514+ E8C4 B7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1514+ E8C6             >Prev_Ptr        defl    Heap_Ptr
1514+ E8C6             >
1514+ E8C6             >mirror_Ptr      defl    $
1514+ E8C6             >
1514+ E8C6 6C 73       >                dw      Dict_Ptr + 2        // xt
1514+ E8C8             >Heap_Ptr        defl    $ - $E000           // save current HP
1514+ E8C8             >
1514+ E8C8             >Current_HP      defl  $ - $E000             // used to set HP once!
1514+ E8C8             >
1514+ E8C8             >//              ______________________________________________________________________
1514+ E8C8             >//              Dictionary part
1514+ E8C8             >
1514+ E8C8             >                org     Dict_Ptr
1514+ 736A             >
1514+ 736A C6 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1514+ 736C             >
1514+ 736C             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1514+ 736C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1514+ 736F             >
1514+ 736F             >
1514+ 736F             >                endif           ; ok        // for other definitions it "points" the correct handler
1514+ 736F             >                // Use of "; ok" to suppress "warning[fwdref]"
1514+ 736F             >
1514+ 736F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1515+ 736F F3 72                        dw      LFIND                   // -find
1516+ 7371                                                              // if
1517+ 7371 F3 63                        dw      ZBRANCH
1518+ 7373 10 00                        dw      Code_Endif - $
1519+ 7375 FB 68                        dw          DROP                //      drop
1520+ 7377 59 6D 41 73                  dw          TO_NAME, ID_DOT     //      >name id.
1521+ 737B A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1521+ 737F 83 77
1522+ 7381 64 6C                        dw          SPACE               //      space
1523+ 7383              Code_Endif:                                     // endif
1524+ 7383 9B 6B                        dw      HERE                    // here
1525+ 7385                                                              // ( ---- here begins NFA ---- )
1526+ 7385 16 69 95 69                  dw      DUP, CFETCH             // dup c@
1527+ 7389 E1 6A 80 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1527+ 738D 17 6C
1528+ 738F B1 68                        dw      ONE_PLUS                // 1+
1529+ 7391 16 69 A6 6B                  dw      DUP, ALLOT              // dup allot
1530+ 7395 C7 68 C7 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1531+ 7399 55 68                        dw      TO_R                    // >r
1532+ 739B 16 69                        dw      DUP                     // dup
1533+ 739D A3 63                        dw      LIT
1534+ 739F A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1535+ 73A1 77 69                        dw      TOGGLE                  // toggle
1536+ 73A3 9B 6B B8 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1537+ 73A7 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1537+ 73AB 77 69
1538+ 73AD                                                              // ( ---- here is LFA ---- )
1539+ 73AD 3B 6B 80 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1539+ 73B1 80 69
1540+ 73B3 B1 6B                        dw      COMMA
1541+ 73B5 16 69 C7 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1541+ 73B9 B1 6B
1542+ 73BB 04 6D                        dw      HP_FETCH                // hp@
1543+ 73BD 3B 6B 80 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1543+ 73C1 8A 69
1544+ 73C3 04 6D D5 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1545+ 73C7 6B 68 8C 67                  dw      R_OP, CMOVE
1546+ 73CB 6B 68 D8 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1546+ 73CF A6 6B
1547+ 73D1 60 68 0B 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1547+ 73D5 68 69
1548+ 73D7 04 6D CB 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1549+ 73DB B1 6B                        dw      COMMA
1550+ 73DD 76 6A 16 6D                  dw      ZERO, SKIP_HP_PAGE
1551+ 73E1                                                              // ( ---- here is LFA ---- )
1552+ 73E1 4B 68                        dw      EXIT                    // ;
1553+ 73E3
1554+ 73E3              //  ______________________________________________________________________
1555+ 73E3              //
1556+ 73E3              // create       -- cccc     ( compile time )
1557+ 73E3              //              -- a        ( run time )
1558+ 73E3                              Colon_Def CREATE,  "CREATE", is_normal
1558+ 73E3             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1558+ 73E3             >
1558+ 73E3             >Dict_Ptr        defl    $
1558+ 73E3             >
1558+ 73E3             >//              ______________________________________________________________________
1558+ 73E3             >//              Heap part
1558+ 73E3             >
1558+ 73E3             >
1558+ 73E3             >                org     (Heap_Ptr & $1FFF) + $E000
1558+ E8C8             >
1558+ E8C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1558+ E8C8             >Latest_Definition defl  Heap_Ptr
1558+ E8C8             >
1558+ E8C8             >                // dummy db directives used to calculate length of namec
1558+ E8C8 43 52 45 41 >                db      "CREATE"
1558+ E8CC 54 45       >
1558+ E8CE             >len_NFA         defl    $ - temp_NFA
1558+ E8CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1558+ E8C8             >
1558+ E8C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1558+ E8C9 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1558+ E8CD 54 45       >
1558+ E8CF             >                org     $-1                 // alter last byte of Name just above to set
1558+ E8CE C5          >                db      {b $} | END_BIT     // msb as name end
1558+ E8CF             >
1558+ E8CF BF 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1558+ E8D1             >Prev_Ptr        defl    Heap_Ptr
1558+ E8D1             >
1558+ E8D1             >mirror_Ptr      defl    $
1558+ E8D1             >
1558+ E8D1 E5 73       >                dw      Dict_Ptr + 2        // xt
1558+ E8D3             >Heap_Ptr        defl    $ - $E000           // save current HP
1558+ E8D3             >
1558+ E8D3             >Current_HP      defl  $ - $E000             // used to set HP once!
1558+ E8D3             >
1558+ E8D3             >//              ______________________________________________________________________
1558+ E8D3             >//              Dictionary part
1558+ E8D3             >
1558+ E8D3             >                org     Dict_Ptr
1558+ 73E3             >
1558+ 73E3 D1 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1558+ 73E5             >
1558+ 73E5             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1558+ 73E5 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1558+ 73E8             >
1558+ 73E8             >
1558+ 73E8             >                endif           ; ok        // for other definitions it "points" the correct handler
1558+ 73E8             >                // Use of "; ok" to suppress "warning[fwdref]"
1558+ 73E8             >
1558+ 73E8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1559+ 73E8 6C 73 79 6E                  dw      CODE, SMUDGE            // code smudge
1560+ 73EC A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1560+ 73F0 C0 6B
1561+ 73F2 A3 63 5D 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1561+ 73F6 B1 6B
1562+ 73F8 B5 6E                        dw      C_SEMICOLON_CODE
1563+ 73FA                              // this routine is called from the call coded in CFA
1564+ 73FA              Create_Ptr:
1565+ 73FA
1566+ 73FA
1567+ 73FA
1568+ 73FA                              next
1568+ 73FA DD E9       >                jp      (ix)
1569+ 73FC
1570+ 73FC              //  ______________________________________________________________________
1571+ 73FC              //
1572+ 73FC              // [compile]    -- cccc     ( compile time )
1573+ 73FC                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1573+ 73FC             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1573+ 73FC             >
1573+ 73FC             >Dict_Ptr        defl    $
1573+ 73FC             >
1573+ 73FC             >//              ______________________________________________________________________
1573+ 73FC             >//              Heap part
1573+ 73FC             >
1573+ 73FC             >
1573+ 73FC             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8D3             >
1573+ E8D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8D3             >Latest_Definition defl  Heap_Ptr
1573+ E8D3             >
1573+ E8D3             >                // dummy db directives used to calculate length of namec
1573+ E8D3 5B 43 4F 4D >                db      "[COMPILE]"
1573+ E8D7 50 49 4C 45 >
1573+ E8DB 5D          >
1573+ E8DC             >len_NFA         defl    $ - temp_NFA
1573+ E8DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8D3             >
1573+ E8D3 C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8D4 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1573+ E8D8 50 49 4C 45 >
1573+ E8DC 5D          >
1573+ E8DD             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8DC DD          >                db      {b $} | END_BIT     // msb as name end
1573+ E8DD             >
1573+ E8DD C8 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8DF             >Prev_Ptr        defl    Heap_Ptr
1573+ E8DF             >
1573+ E8DF             >mirror_Ptr      defl    $
1573+ E8DF             >
1573+ E8DF FE 73       >                dw      Dict_Ptr + 2        // xt
1573+ E8E1             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8E1             >
1573+ E8E1             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8E1             >
1573+ E8E1             >//              ______________________________________________________________________
1573+ E8E1             >//              Dictionary part
1573+ E8E1             >
1573+ E8E1             >                org     Dict_Ptr
1573+ 73FC             >
1573+ 73FC DF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 73FE             >
1573+ 73FE             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 73FE CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 7401             >
1573+ 7401             >
1573+ 7401             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 7401             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 7401             >
1573+ 7401             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 7401 F3 72                        dw      LFIND                   // -find      (  cfa  b  f  )
1575+ 7403 70 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1576+ 7405 76 6A CF 6D                  dw      ZERO, QERROR            // 0 ?error
1577+ 7409 FB 68                        dw      DROP                    // drop       (  cfa  )
1578+ 740B B1 6B                        dw      COMMA                   // ,
1579+ 740D 4B 68                        dw      EXIT                    // ; immediate
1580+ 740F
1581+ 740F              //  ______________________________________________________________________
1582+ 740F              //
1583+ 740F              // literal      n --      ( compile time )
1584+ 740F                              Colon_Def LITERAL,  "LITERAL", is_immediate
1584+ 740F             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1584+ 740F             >
1584+ 740F             >Dict_Ptr        defl    $
1584+ 740F             >
1584+ 740F             >//              ______________________________________________________________________
1584+ 740F             >//              Heap part
1584+ 740F             >
1584+ 740F             >
1584+ 740F             >                org     (Heap_Ptr & $1FFF) + $E000
1584+ E8E1             >
1584+ E8E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1584+ E8E1             >Latest_Definition defl  Heap_Ptr
1584+ E8E1             >
1584+ E8E1             >                // dummy db directives used to calculate length of namec
1584+ E8E1 4C 49 54 45 >                db      "LITERAL"
1584+ E8E5 52 41 4C    >
1584+ E8E8             >len_NFA         defl    $ - temp_NFA
1584+ E8E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1584+ E8E1             >
1584+ E8E1 C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1584+ E8E2 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1584+ E8E6 52 41 4C    >
1584+ E8E9             >                org     $-1                 // alter last byte of Name just above to set
1584+ E8E8 CC          >                db      {b $} | END_BIT     // msb as name end
1584+ E8E9             >
1584+ E8E9 D3 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1584+ E8EB             >Prev_Ptr        defl    Heap_Ptr
1584+ E8EB             >
1584+ E8EB             >mirror_Ptr      defl    $
1584+ E8EB             >
1584+ E8EB 11 74       >                dw      Dict_Ptr + 2        // xt
1584+ E8ED             >Heap_Ptr        defl    $ - $E000           // save current HP
1584+ E8ED             >
1584+ E8ED             >Current_HP      defl  $ - $E000             // used to set HP once!
1584+ E8ED             >
1584+ E8ED             >//              ______________________________________________________________________
1584+ E8ED             >//              Dictionary part
1584+ E8ED             >
1584+ E8ED             >                org     Dict_Ptr
1584+ 740F             >
1584+ 740F EB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1584+ 7411             >
1584+ 7411             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1584+ 7411 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1584+ 7414             >
1584+ 7414             >
1584+ 7414             >                endif           ; ok        // for other definitions it "points" the correct handler
1584+ 7414             >                // Use of "; ok" to suppress "warning[fwdref]"
1584+ 7414             >
1584+ 7414             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1585+ 7414 41 6B 80 69                  dw      STATE, FETCH            // state @
1586+ 7418                                                              // if
1587+ 7418 F3 63                        dw      ZBRANCH
1588+ 741A 08 00                        dw      Literal_Endif - $
1589+ 741C 3F 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1590+ 7420 B1 6B                        dw          COMMA               //      ,
1591+ 7422              Literal_Endif:                                  // endif
1592+ 7422 4B 68                        dw      EXIT                    // ; immediate
1593+ 7424
1594+ 7424              //  ______________________________________________________________________
1595+ 7424              //
1596+ 7424              // dliteral     n --      ( compile time )
1597+ 7424                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1597+ 7424             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1597+ 7424             >
1597+ 7424             >Dict_Ptr        defl    $
1597+ 7424             >
1597+ 7424             >//              ______________________________________________________________________
1597+ 7424             >//              Heap part
1597+ 7424             >
1597+ 7424             >
1597+ 7424             >                org     (Heap_Ptr & $1FFF) + $E000
1597+ E8ED             >
1597+ E8ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1597+ E8ED             >Latest_Definition defl  Heap_Ptr
1597+ E8ED             >
1597+ E8ED             >                // dummy db directives used to calculate length of namec
1597+ E8ED 44 4C 49 54 >                db      "DLITERAL"
1597+ E8F1 45 52 41 4C >
1597+ E8F5             >len_NFA         defl    $ - temp_NFA
1597+ E8F5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1597+ E8ED             >
1597+ E8ED C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1597+ E8EE 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1597+ E8F2 45 52 41 4C >
1597+ E8F6             >                org     $-1                 // alter last byte of Name just above to set
1597+ E8F5 CC          >                db      {b $} | END_BIT     // msb as name end
1597+ E8F6             >
1597+ E8F6 E1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1597+ E8F8             >Prev_Ptr        defl    Heap_Ptr
1597+ E8F8             >
1597+ E8F8             >mirror_Ptr      defl    $
1597+ E8F8             >
1597+ E8F8 26 74       >                dw      Dict_Ptr + 2        // xt
1597+ E8FA             >Heap_Ptr        defl    $ - $E000           // save current HP
1597+ E8FA             >
1597+ E8FA             >Current_HP      defl  $ - $E000             // used to set HP once!
1597+ E8FA             >
1597+ E8FA             >//              ______________________________________________________________________
1597+ E8FA             >//              Dictionary part
1597+ E8FA             >
1597+ E8FA             >                org     Dict_Ptr
1597+ 7424             >
1597+ 7424 F8 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1597+ 7426             >
1597+ 7426             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1597+ 7426 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1597+ 7429             >
1597+ 7429             >
1597+ 7429             >                endif           ; ok        // for other definitions it "points" the correct handler
1597+ 7429             >                // Use of "; ok" to suppress "warning[fwdref]"
1597+ 7429             >
1597+ 7429             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1598+ 7429 41 6B 80 69                  dw      STATE, FETCH            // state @
1599+ 742D                                                              // if
1600+ 742D F3 63                        dw      ZBRANCH
1601+ 742F 08 00                        dw      DLiteral_Endif - $
1602+ 7431 0F 69                        dw          SWAP                //      swap
1603+ 7433 11 74 11 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1604+ 7437              DLiteral_Endif:                                 // endif
1605+ 7437 4B 68                        dw      EXIT                    // ; immediate
1606+ 7439
1607+ 7439              //  ______________________________________________________________________
1608+ 7439              //
1609+ 7439              // [char]       n --      ( compile time )
1610+ 7439              // inside colon definition, gets first character from next input word
1611+ 7439              // and compiles it as literal.
1612+ 7439                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1612+ 7439             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1612+ 7439             >
1612+ 7439             >Dict_Ptr        defl    $
1612+ 7439             >
1612+ 7439             >//              ______________________________________________________________________
1612+ 7439             >//              Heap part
1612+ 7439             >
1612+ 7439             >
1612+ 7439             >                org     (Heap_Ptr & $1FFF) + $E000
1612+ E8FA             >
1612+ E8FA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1612+ E8FA             >Latest_Definition defl  Heap_Ptr
1612+ E8FA             >
1612+ E8FA             >                // dummy db directives used to calculate length of namec
1612+ E8FA 5B 43 48 41 >                db      "[CHAR]"
1612+ E8FE 52 5D       >
1612+ E900             >len_NFA         defl    $ - temp_NFA
1612+ E900             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1612+ E8FA             >
1612+ E8FA C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1612+ E8FB 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1612+ E8FF 52 5D       >
1612+ E901             >                org     $-1                 // alter last byte of Name just above to set
1612+ E900 DD          >                db      {b $} | END_BIT     // msb as name end
1612+ E901             >
1612+ E901 ED 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1612+ E903             >Prev_Ptr        defl    Heap_Ptr
1612+ E903             >
1612+ E903             >mirror_Ptr      defl    $
1612+ E903             >
1612+ E903 3B 74       >                dw      Dict_Ptr + 2        // xt
1612+ E905             >Heap_Ptr        defl    $ - $E000           // save current HP
1612+ E905             >
1612+ E905             >Current_HP      defl  $ - $E000             // used to set HP once!
1612+ E905             >
1612+ E905             >//              ______________________________________________________________________
1612+ E905             >//              Dictionary part
1612+ E905             >
1612+ E905             >                org     Dict_Ptr
1612+ 7439             >
1612+ 7439 03 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1612+ 743B             >
1612+ 743B             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1612+ 743B CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1612+ 743E             >
1612+ 743E             >
1612+ 743E             >                endif           ; ok        // for other definitions it "points" the correct handler
1612+ 743E             >                // Use of "; ok" to suppress "warning[fwdref]"
1612+ 743E             >
1612+ 743E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1613+ 743E 11 71 11 74                  dw      CHAR, LITERAL           // char [compile] literal
1614+ 7442 4B 68                        dw      EXIT                    // ; immediate
1615+ 7444
1616+ 7444              //  ______________________________________________________________________
1617+ 7444              //
1618+ 7444              // 0x00         n --      ( compile time )
1619+ 7444                              Colon_Def NUL_WORD,  $00, is_immediate
1619+ 7444             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1619+ 7444             >
1619+ 7444             >Dict_Ptr        defl    $
1619+ 7444             >
1619+ 7444             >//              ______________________________________________________________________
1619+ 7444             >//              Heap part
1619+ 7444             >
1619+ 7444             >
1619+ 7444             >                org     (Heap_Ptr & $1FFF) + $E000
1619+ E905             >
1619+ E905             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1619+ E905             >Latest_Definition defl  Heap_Ptr
1619+ E905             >
1619+ E905             >                // dummy db directives used to calculate length of namec
1619+ E905 00          >                db      $00
1619+ E906             >len_NFA         defl    $ - temp_NFA
1619+ E906             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1619+ E905             >
1619+ E905 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1619+ E906 00          >                db      $00               // name string in 7-bit ascii, but
1619+ E907             >                org     $-1                 // alter last byte of Name just above to set
1619+ E906 80          >                db      {b $} | END_BIT     // msb as name end
1619+ E907             >
1619+ E907 FA 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1619+ E909             >Prev_Ptr        defl    Heap_Ptr
1619+ E909             >
1619+ E909             >mirror_Ptr      defl    $
1619+ E909             >
1619+ E909 46 74       >                dw      Dict_Ptr + 2        // xt
1619+ E90B             >Heap_Ptr        defl    $ - $E000           // save current HP
1619+ E90B             >
1619+ E90B             >Current_HP      defl  $ - $E000             // used to set HP once!
1619+ E90B             >
1619+ E90B             >//              ______________________________________________________________________
1619+ E90B             >//              Dictionary part
1619+ E90B             >
1619+ E90B             >                org     Dict_Ptr
1619+ 7444             >
1619+ 7444 09 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1619+ 7446             >
1619+ 7446             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1619+ 7446 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1619+ 7449             >
1619+ 7449             >
1619+ 7449             >                endif           ; ok        // for other definitions it "points" the correct handler
1619+ 7449             >                // Use of "; ok" to suppress "warning[fwdref]"
1619+ 7449             >
1619+ 7449             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1620+ 7449 17 6B 80 69                  dw      BLK, FETCH, ONE         // blk @ 1
1620+ 744D 7D 6A
1621+ 744F 0C 6C                        dw      GREATER                 // > if
1622+ 7451                                                              // if
1623+ 7451 F3 63                        dw      ZBRANCH
1624+ 7453 28 00                        dw      Nul_Else_1 - $
1625+ 7455 7D 6A 17 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1625+ 7459 68 69
1626+ 745B 76 6A 1D 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1626+ 745F 8A 69
1627+ 7461 17 6B 80 69                  dw          BLK, FETCH          //      blk @
1628+ 7465 AE 6A                        dw          BSCR                //      b/scr
1629+ 7467 B8 68                        dw          ONE_SUBTRACT        //      1 -
1630+ 7469 0B 68                        dw          AND_OP              //      and  ( this is tricky )
1631+ 746B 70 68                        dw          ZEQUAL              //      0=
1632+ 746D                                                              //      if
1633+ 746D F3 63                        dw          ZBRANCH
1634+ 746F 08 00                        dw          Nul_Endif_2 - $
1635+ 7471 F7 6D                        dw              QEXEC           //          ?exec
1636+ 7473 60 68 FB 68                  dw              R_TO, DROP      //          r> drop
1637+ 7477              Nul_Endif_2:                                    //      endif
1638+ 7477 EF 63                        dw      BRANCH
1639+ 7479 06 00                        dw      Nul_Endif_1 - $
1640+ 747B              Nul_Else_1:                                     // else
1641+ 747B 60 68 FB 68                  dw          R_TO, DROP          //      r> drop
1642+ 747F              Nul_Endif_1:                                    // endif
1643+ 747F 4B 68                        dw      EXIT                    // ;
1644+ 7481
1645+ 7481              //  ______________________________________________________________________
1646+ 7481              //
1647+ 7481              // ?stack       --
1648+ 7481              // Raise error #1 if stack is empty and you pop it
1649+ 7481              // Raise error #7 if stack is full.
1650+ 7481              // This means SP must always stay between HERE and FFFF
1651+ 7481              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1652+ 7481              // for Next 8K MMU paging this is $DOE8
1653+ 7481                              Colon_Def QSTACK, "?STACK", is_normal
1653+ 7481             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1653+ 7481             >
1653+ 7481             >Dict_Ptr        defl    $
1653+ 7481             >
1653+ 7481             >//              ______________________________________________________________________
1653+ 7481             >//              Heap part
1653+ 7481             >
1653+ 7481             >
1653+ 7481             >                org     (Heap_Ptr & $1FFF) + $E000
1653+ E90B             >
1653+ E90B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1653+ E90B             >Latest_Definition defl  Heap_Ptr
1653+ E90B             >
1653+ E90B             >                // dummy db directives used to calculate length of namec
1653+ E90B 3F 53 54 41 >                db      "?STACK"
1653+ E90F 43 4B       >
1653+ E911             >len_NFA         defl    $ - temp_NFA
1653+ E911             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1653+ E90B             >
1653+ E90B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1653+ E90C 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1653+ E910 43 4B       >
1653+ E912             >                org     $-1                 // alter last byte of Name just above to set
1653+ E911 CB          >                db      {b $} | END_BIT     // msb as name end
1653+ E912             >
1653+ E912 05 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1653+ E914             >Prev_Ptr        defl    Heap_Ptr
1653+ E914             >
1653+ E914             >mirror_Ptr      defl    $
1653+ E914             >
1653+ E914 83 74       >                dw      Dict_Ptr + 2        // xt
1653+ E916             >Heap_Ptr        defl    $ - $E000           // save current HP
1653+ E916             >
1653+ E916             >Current_HP      defl  $ - $E000             // used to set HP once!
1653+ E916             >
1653+ E916             >//              ______________________________________________________________________
1653+ E916             >//              Dictionary part
1653+ E916             >
1653+ E916             >                org     Dict_Ptr
1653+ 7481             >
1653+ 7481 14 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1653+ 7483             >
1653+ 7483             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1653+ 7483 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1653+ 7486             >
1653+ 7486             >
1653+ 7486             >                endif           ; ok        // for other definitions it "points" the correct handler
1653+ 7486             >                // Use of "; ok" to suppress "warning[fwdref]"
1653+ 7486             >
1653+ 7486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1654+ 7486 32 68                        dw      SPFETCH                 // sp@
1655+ 7488 CF 6A 80 69                  dw      S0, FETCH               // s0 @
1656+ 748C 0F 69 F1 6B                  dw      SWAP, ULESS             // swap u<
1657+ 7490 7D 6A CF 6D                  dw      ONE, QERROR             // 1 ?error
1658+ 7494 9B 6B                        dw      HERE                    // here
1659+ 7496 CF 6A 80 69                  dw      S0, FETCH, LESS         // s0 @ <
1659+ 749A FF 6B
1660+ 749C                                                              // if
1661+ 749C F3 63                        dw      ZBRANCH
1662+ 749E 14 00                        dw      QStack_Endif - $
1663+ 74A0 32 68                        dw          SPFETCH             //      sp@
1664+ 74A2 9B 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1664+ 74A6 80 00
1665+ 74A8 98 68 F1 6B                  dw          PLUS, ULESS         //      plus u<
1666+ 74AC A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1666+ 74B0 CF 6D
1667+ 74B2              QStack_Endif:                                   // endif
1668+ 74B2 4B 68                        dw      EXIT                    // ;
1669+ 74B4
1670+ 74B4
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L1.asm
 141  74B4                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
   1+ 74B4              //  ______________________________________________________________________
   2+ 74B4              //
   3+ 74B4              //  L2.asm
   4+ 74B4              //
   5+ 74B4              //  Level-2 3dos
   6+ 74B4              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74B4              //  ______________________________________________________________________
   8+ 74B4
   9+ 74B4
  10+ 74B4              //  ______________________________________________________________________
  11+ 74B4              //
  12+ 74B4              // interpret    --
  13+ 74B4              // This is the text interpreter.
  14+ 74B4              // It executes or compiles, depending on STATE, the text coming from
  15+ 74B4              // current input stream.
  16+ 74B4              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74B4              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74B4              // leaving on top of stack a single or double precision number, depending
  19+ 74B4              // on the presence of a decimal point.
  20+ 74B4              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74B4              // by the offending word.
  22+ 74B4                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74B4             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74B4             >
  22+ 74B4             >Dict_Ptr        defl    $
  22+ 74B4             >
  22+ 74B4             >//              ______________________________________________________________________
  22+ 74B4             >//              Heap part
  22+ 74B4             >
  22+ 74B4             >
  22+ 74B4             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E916             >
  22+ E916             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E916             >Latest_Definition defl  Heap_Ptr
  22+ E916             >
  22+ E916             >                // dummy db directives used to calculate length of namec
  22+ E916 49 4E 54 45 >                db      "INTERPRET"
  22+ E91A 52 50 52 45 >
  22+ E91E 54          >
  22+ E91F             >len_NFA         defl    $ - temp_NFA
  22+ E91F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E916             >
  22+ E916 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E917 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E91B 52 50 52 45 >
  22+ E91F 54          >
  22+ E920             >                org     $-1                 // alter last byte of Name just above to set
  22+ E91F D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E920             >
  22+ E920 0B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E922             >Prev_Ptr        defl    Heap_Ptr
  22+ E922             >
  22+ E922             >mirror_Ptr      defl    $
  22+ E922             >
  22+ E922 B6 74       >                dw      Dict_Ptr + 2        // xt
  22+ E924             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E924             >
  22+ E924             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E924             >
  22+ E924             >//              ______________________________________________________________________
  22+ E924             >//              Dictionary part
  22+ E924             >
  22+ E924             >                org     Dict_Ptr
  22+ 74B4             >
  22+ 74B4 22 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74B6             >
  22+ 74B6             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74B6 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74B9             >
  22+ 74B9             >
  22+ 74B9             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74B9             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74B9             >
  22+ 74B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74B9
  24+ 74B9              Interpret_Begin:                                        // begin
  25+ 74B9 F3 72                        dw          LFIND                       //      -find
  26+ 74BB                                                                      //      if
  27+ 74BB F3 63                        dw          ZBRANCH
  28+ 74BD 1A 00                        dw          Interpret_Else_1 - $
  29+ 74BF 41 6B 80 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74C3 FF 6B
  30+ 74C5                                                                      //          if
  31+ 74C5 F3 63                        dw              ZBRANCH
  32+ 74C7 08 00                        dw              Interpret_Else_2 - $
  33+ 74C9 54 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74CB                                                                      //          else
  35+ 74CB EF 63                        dw              BRANCH
  36+ 74CD 06 00                        dw              Interpret_Endif_2 - $
  37+ 74CF              Interpret_Else_2:
  38+ 74CF AE 63 3D 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74D3              Interpret_Endif_2:                                      //          endif
  40+ 74D3                                                                      //      else
  41+ 74D3 EF 63                        dw          BRANCH
  42+ 74D5 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74D7              Interpret_Else_1:
  44+ 74D7 9B 6B 43 72                  dw              HERE, NUMBER            //          here number
  45+ 74DB 4D 6B 80 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74DF B1 68
  46+ 74E1                                                                      //          if
  47+ 74E1 F3 63                        dw              ZBRANCH
  48+ 74E3 08 00                        dw              Interpret_Else_3 - $
  49+ 74E5              //              dw                  NMODE, FETCH        //              nmode @
  50+ 74E5              //                                                      //              if
  51+ 74E5              //              dw                  ZBRANCH
  52+ 74E5              //              dw                  Interpret_Endif_4 - $
  53+ 74E5              //              dw                      ONE, ZERO       //                  1 0
  54+ 74E5              //              dw                      TWO_DROP        //                  2drop
  55+ 74E5              //Interpret_Endif_4:                                      //              endif
  56+ 74E5 26 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 74E7                                                                      //          else
  58+ 74E7 EF 63                        dw              BRANCH
  59+ 74E9 06 00                        dw              Interpret_Endif_3 - $
  60+ 74EB              Interpret_Else_3:
  61+ 74EB FB 68                        dw                  DROP                //              drop
  62+ 74ED 11 74                        dw                  LITERAL             //              [compile]  literal
  63+ 74EF              Interpret_Endif_3:                                      //          endif
  64+ 74EF              Interpret_Endif_1:                                      //      endif
  65+ 74EF 83 74                        dw          QSTACK                      //      ?stack
  66+ 74F1 A6 66                        dw          QTERMINAL                   //      ?terminal
  67+ 74F3                                                                      //      if
  68+ 74F3 F3 63                        dw          ZBRANCH
  69+ 74F5 04 00                        dw          Interpret_Endif_5 - $
  70+ 74F7 57 75                        dw              QUIT                    //          quit
  71+ 74F9              Interpret_Endif_5:                                      //      endif
  72+ 74F9 EF 63                        dw      BRANCH
  73+ 74FB BE FF                        dw      Interpret_Begin - $
  74+ 74FD 4B 68                        dw      EXIT                            // ;
  75+ 74FF
  76+ 74FF              //  ______________________________________________________________________
  77+ 74FF              //
  78+ 74FF              // vocabulary   -- cccc     ( compile time )
  79+ 74FF              // Defining word used in the form   VOCABULARY cccc
  80+ 74FF              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 74FF              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 74FF              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 74FF              // so new definitions can be inserted in that vocabulary.
  84+ 74FF                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 74FF             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 74FF             >
  84+ 74FF             >Dict_Ptr        defl    $
  84+ 74FF             >
  84+ 74FF             >//              ______________________________________________________________________
  84+ 74FF             >//              Heap part
  84+ 74FF             >
  84+ 74FF             >
  84+ 74FF             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E924             >
  84+ E924             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E924             >Latest_Definition defl  Heap_Ptr
  84+ E924             >
  84+ E924             >                // dummy db directives used to calculate length of namec
  84+ E924 56 4F 43 41 >                db      "VOCABULARY"
  84+ E928 42 55 4C 41 >
  84+ E92C 52 59       >
  84+ E92E             >len_NFA         defl    $ - temp_NFA
  84+ E92E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E924             >
  84+ E924 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E925 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E929 42 55 4C 41 >
  84+ E92D 52 59       >
  84+ E92F             >                org     $-1                 // alter last byte of Name just above to set
  84+ E92E D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E92F             >
  84+ E92F 16 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E931             >Prev_Ptr        defl    Heap_Ptr
  84+ E931             >
  84+ E931             >mirror_Ptr      defl    $
  84+ E931             >
  84+ E931 01 75       >                dw      Dict_Ptr + 2        // xt
  84+ E933             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E933             >
  84+ E933             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E933             >
  84+ E933             >//              ______________________________________________________________________
  84+ E933             >//              Dictionary part
  84+ E933             >
  84+ E933             >                org     Dict_Ptr
  84+ 74FF             >
  84+ 74FF 31 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 7501             >
  84+ 7501             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 7501 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 7504             >
  84+ 7504             >
  84+ 7504             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 7504             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 7504             >
  84+ 7504             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 7504
  86+ 7504 E1 6E                        dw      CBUILDS
  87+ 7506
  88+ 7506                              // dummy word + link part
  89+ 7506 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 750A B1 6B
  90+ 750C 3B 6B 80 69                  dw      CURRENT, FETCH          // current @
  91+ 7510 80 69                        dw      FETCH                   // @
  92+ 7512                          //  dw      CELL_MINUS              // cell-
  93+ 7512 B1 6B                        dw      COMMA                   // ,
  94+ 7514
  95+ 7514                              // voc-link part
  96+ 7514 9B 6B                        dw      HERE                    // here
  97+ 7516 F9 6A 80 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 751A B1 6B                        dw      COMMA                   // ,
  99+ 751C F9 6A 8A 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 7520                              // DOES part
 101+ 7520 EC 6E                        dw      DOES_TO                 // does>
 102+ 7522              Vocabulary_Does:
 103+ 7522 C7 68                        dw      CELL_PLUS               // cell+
 104+ 7524 35 6B 8A 69                  dw      CONTEXT, STORE          // context !
 105+ 7528 4B 68                        dw      EXIT                    // ;
 106+ 752A
 107+ 752A              //  ______________________________________________________________________
 108+ 752A              //
 109+ 752A              // forth        --
 110+ 752A              // Name of the first vocabulary.
 111+ 752A              // It makes FORTH the CONTEXT vocabulary.
 112+ 752A              // Until new user vocabulary are defined, new colon-definitions becomes
 113+ 752A              // part of FORTH. It is immediate, so it will executed during the creation
 114+ 752A              // of a colon definition to be able to select the vocabulary.
 115+ 752A
 116+ 752A                              New_Def FORTH, "FORTH", Does_Ptr, is_immediate
 116+ 752A             >
 116+ 752A             >Dict_Ptr        defl    $
 116+ 752A             >
 116+ 752A             >//              ______________________________________________________________________
 116+ 752A             >//              Heap part
 116+ 752A             >
 116+ 752A             >
 116+ 752A             >                org     (Heap_Ptr & $1FFF) + $E000
 116+ E933             >
 116+ E933             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116+ E933             >Latest_Definition defl  Heap_Ptr
 116+ E933             >
 116+ E933             >                // dummy db directives used to calculate length of namec
 116+ E933 46 4F 52 54 >                db      "FORTH"
 116+ E937 48          >
 116+ E938             >len_NFA         defl    $ - temp_NFA
 116+ E938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116+ E933             >
 116+ E933 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 116+ E934 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 116+ E938 48          >
 116+ E939             >                org     $-1                 // alter last byte of Name just above to set
 116+ E938 C8          >                db      {b $} | END_BIT     // msb as name end
 116+ E939             >
 116+ E939 24 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116+ E93B             >Prev_Ptr        defl    Heap_Ptr
 116+ E93B             >
 116+ E93B             >mirror_Ptr      defl    $
 116+ E93B             >
 116+ E93B 2C 75       >                dw      Dict_Ptr + 2        // xt
 116+ E93D             >Heap_Ptr        defl    $ - $E000           // save current HP
 116+ E93D             >
 116+ E93D             >Current_HP      defl  $ - $E000             // used to set HP once!
 116+ E93D             >
 116+ E93D             >//              ______________________________________________________________________
 116+ E93D             >//              Dictionary part
 116+ E93D             >
 116+ E93D             >                org     Dict_Ptr
 116+ 752A             >
 116+ 752A 3B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 116+ 752C             >
 116+ 752C             >FORTH:          if Does_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 116+ 752C CD F9 6E    >                call    Does_Ptr ; ok        // for primitive definitions  actual code
 116+ 752F             >
 116+ 752F             >
 116+ 752F             >                endif           ; ok        // for other definitions it "points" the correct handler
 116+ 752F             >                // Use of "; ok" to suppress "warning[fwdref]"
 116+ 752F             >
 116+ 752F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117+ 752F 22 75                        dw      Vocabulary_Does
 118+ 7531
 119+ 7531 81 A0                        db      $81, $A0
 120+ 7533              Forth_Latest_Ptr:
 121+ 7533 33 09                        dw      Latest_Definition
 122+ 7535              Voclink_Ptr:
 123+ 7535 00 00                        dw      0
 124+ 7537
 125+ 7537              // ____
 126+ 7537              // temp_VOC        defl    $                   // save this address
 127+ 7537              //              org     (Heap_Ptr & $1FFF) + $E000
 128+ 7537              //              db      $81, $A0
 129+ 7537              // Forth_Latest_Ptr_HEAP:
 130+ 7537              //                 dw      Latest_Definition
 131+ 7537              // Voclink_Ptr_HEAP:
 132+ 7537              //                 dw      0
 133+ 7537              // Heap_Ptr        defl    $ - $E000           // save current HP
 134+ 7537              //                 org     temp_VOC
 135+ 7537              // ____
 136+ 7537
 137+ 7537              // Any new vocabulary is structured as follow:
 138+ 7537              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 139+ 7537              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 140+ 7537              // PFA+4 always contains the LATEST word of this VOCABULARY.
 141+ 7537              //       at creations it points to the null-word of its parent vocabulary
 142+ 7537              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 143+ 7537              // PFA+6 is the pointer that builds up the vocabulary linked list.
 144+ 7537              //       FORTH has 0 here to signal the end of the list and user's variable
 145+ 7537              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 146+ 7537              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 147+ 7537              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 148+ 7537
 149+ 7537              //  ______________________________________________________________________
 150+ 7537              //
 151+ 7537              // definitions  --
 152+ 7537              // Used in the form  cccc DEFINITIONS
 153+ 7537              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 154+ 7537              // vocabulary cccc.
 155+ 7537                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 155+ 7537             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 155+ 7537             >
 155+ 7537             >Dict_Ptr        defl    $
 155+ 7537             >
 155+ 7537             >//              ______________________________________________________________________
 155+ 7537             >//              Heap part
 155+ 7537             >
 155+ 7537             >
 155+ 7537             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E93D             >
 155+ E93D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E93D             >Latest_Definition defl  Heap_Ptr
 155+ E93D             >
 155+ E93D             >                // dummy db directives used to calculate length of namec
 155+ E93D 44 45 46 49 >                db      "DEFINITIONS"
 155+ E941 4E 49 54 49 >
 155+ E945 4F 4E 53    >
 155+ E948             >len_NFA         defl    $ - temp_NFA
 155+ E948             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E93D             >
 155+ E93D 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E93E 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 155+ E942 4E 49 54 49 >
 155+ E946 4F 4E 53    >
 155+ E949             >                org     $-1                 // alter last byte of Name just above to set
 155+ E948 D3          >                db      {b $} | END_BIT     // msb as name end
 155+ E949             >
 155+ E949 33 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E94B             >Prev_Ptr        defl    Heap_Ptr
 155+ E94B             >
 155+ E94B             >mirror_Ptr      defl    $
 155+ E94B             >
 155+ E94B 39 75       >                dw      Dict_Ptr + 2        // xt
 155+ E94D             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E94D             >
 155+ E94D             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E94D             >
 155+ E94D             >//              ______________________________________________________________________
 155+ E94D             >//              Dictionary part
 155+ E94D             >
 155+ E94D             >                org     Dict_Ptr
 155+ 7537             >
 155+ 7537 4B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 7539             >
 155+ 7539             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 7539 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 155+ 753C             >
 155+ 753C             >
 155+ 753C             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 753C             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 753C             >
 155+ 753C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 753C 35 6B 80 69                  dw      CONTEXT, FETCH          // context @
 157+ 7540 3B 6B 8A 69                  dw      CURRENT, STORE          // current !
 158+ 7544 4B 68                        dw      EXIT                    // ;
 159+ 7546
 160+ 7546              //  ______________________________________________________________________
 161+ 7546              //
 162+ 7546              // (            -- cccc )
 163+ 7546              // the following text is interpreted as a comment until a closing )
 164+ 7546                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 164+ 7546             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 164+ 7546             >
 164+ 7546             >Dict_Ptr        defl    $
 164+ 7546             >
 164+ 7546             >//              ______________________________________________________________________
 164+ 7546             >//              Heap part
 164+ 7546             >
 164+ 7546             >
 164+ 7546             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E94D             >
 164+ E94D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E94D             >Latest_Definition defl  Heap_Ptr
 164+ E94D             >
 164+ E94D             >                // dummy db directives used to calculate length of namec
 164+ E94D 28          >                db      "("
 164+ E94E             >len_NFA         defl    $ - temp_NFA
 164+ E94E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E94D             >
 164+ E94D C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E94E 28          >                db      "("               // name string in 7-bit ascii, but
 164+ E94F             >                org     $-1                 // alter last byte of Name just above to set
 164+ E94E A8          >                db      {b $} | END_BIT     // msb as name end
 164+ E94F             >
 164+ E94F 3D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E951             >Prev_Ptr        defl    Heap_Ptr
 164+ E951             >
 164+ E951             >mirror_Ptr      defl    $
 164+ E951             >
 164+ E951 48 75       >                dw      Dict_Ptr + 2        // xt
 164+ E953             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E953             >
 164+ E953             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E953             >
 164+ E953             >//              ______________________________________________________________________
 164+ E953             >//              Dictionary part
 164+ E953             >
 164+ E953             >                org     Dict_Ptr
 164+ 7546             >
 164+ 7546 51 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 7548             >
 164+ 7548             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 7548 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 164+ 754B             >
 164+ 754B             >
 164+ 754B             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 754B             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 754B             >
 164+ 754B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 754B A3 63 29 00                  dw      LIT, ")"                // [char] )
 166+ 754F AF 70 FB 68                  dw      WORD, DROP              // word drop
 167+ 7553 4B 68                        dw      EXIT                    // ;
 168+ 7555
 169+ 7555              //  ______________________________________________________________________
 170+ 7555              //
 171+ 7555              // quit         --
 172+ 7555              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 173+ 7555                              Colon_Def QUIT, "QUIT", is_normal
 173+ 7555             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 173+ 7555             >
 173+ 7555             >Dict_Ptr        defl    $
 173+ 7555             >
 173+ 7555             >//              ______________________________________________________________________
 173+ 7555             >//              Heap part
 173+ 7555             >
 173+ 7555             >
 173+ 7555             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E953             >
 173+ E953             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E953             >Latest_Definition defl  Heap_Ptr
 173+ E953             >
 173+ E953             >                // dummy db directives used to calculate length of namec
 173+ E953 51 55 49 54 >                db      "QUIT"
 173+ E957             >len_NFA         defl    $ - temp_NFA
 173+ E957             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E953             >
 173+ E953 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E954 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 173+ E958             >                org     $-1                 // alter last byte of Name just above to set
 173+ E957 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E958             >
 173+ E958 4D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E95A             >Prev_Ptr        defl    Heap_Ptr
 173+ E95A             >
 173+ E95A             >mirror_Ptr      defl    $
 173+ E95A             >
 173+ E95A 57 75       >                dw      Dict_Ptr + 2        // xt
 173+ E95C             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E95C             >
 173+ E95C             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E95C             >
 173+ E95C             >//              ______________________________________________________________________
 173+ E95C             >//              Dictionary part
 173+ E95C             >
 173+ E95C             >                org     Dict_Ptr
 173+ 7555             >
 173+ 7555 5A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 7557             >
 173+ 7557             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 7557 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 173+ 755A             >
 173+ 755A             >
 173+ 755A             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 755A             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 755A             >
 173+ 755A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 755A
 175+ 755A 83 6B 80 69                  dw      SOURCE_ID, FETCH        // source-id @
 176+ 755E F4 66 FB 68                  dw      F_CLOSE, DROP           // f_close drop
 177+ 7562 76 6A 83 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 177+ 7566 8A 69
 178+ 7568 76 6A 17 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 178+ 756C 8A 69
 179+ 756E 5D 6E                        dw      SQUARED_OPEN            // [compile] [
 180+ 7570                                                              // begin
 181+ 7570              Quit_Begin:
 182+ 7570 D5 6A 80 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 182+ 7574 46 68
 183+ 7576 AF 65                        dw      CR                      //      cr
 184+ 7578 4C 70                        dw      QUERY                   //      query
 185+ 757A              Next_Breakpoint_1:
 186+ 757A B6 74                        dw      INTERPRET               //      interpret
 187+ 757C 41 6B 80 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 187+ 7580 70 68
 188+ 7582                                                              //      if
 189+ 7582 F3 63                        dw      ZBRANCH
 190+ 7584 07 00                        dw      Quit_Endif - $
 191+ 7586 FA 70                        dw          C_DOT_QUOTE
 192+ 7588 02 6F 6B                     db          2, "ok"             //          .( ok)
 193+ 758B              Quit_Endif:                                     //      else
 194+ 758B                                                              // again
 195+ 758B EF 63                        dw      BRANCH
 196+ 758D E3 FF                        dw      Quit_Begin - $
 197+ 758F 4B 68                        dw      EXIT                    // ;
 198+ 7591
 199+ 7591              //  ______________________________________________________________________
 200+ 7591              //
 201+ 7591              // abort        --
 202+ 7591                              Colon_Def ABORT, "ABORT", is_normal
 202+ 7591             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 202+ 7591             >
 202+ 7591             >Dict_Ptr        defl    $
 202+ 7591             >
 202+ 7591             >//              ______________________________________________________________________
 202+ 7591             >//              Heap part
 202+ 7591             >
 202+ 7591             >
 202+ 7591             >                org     (Heap_Ptr & $1FFF) + $E000
 202+ E95C             >
 202+ E95C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 202+ E95C             >Latest_Definition defl  Heap_Ptr
 202+ E95C             >
 202+ E95C             >                // dummy db directives used to calculate length of namec
 202+ E95C 41 42 4F 52 >                db      "ABORT"
 202+ E960 54          >
 202+ E961             >len_NFA         defl    $ - temp_NFA
 202+ E961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 202+ E95C             >
 202+ E95C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 202+ E95D 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 202+ E961 54          >
 202+ E962             >                org     $-1                 // alter last byte of Name just above to set
 202+ E961 D4          >                db      {b $} | END_BIT     // msb as name end
 202+ E962             >
 202+ E962 53 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 202+ E964             >Prev_Ptr        defl    Heap_Ptr
 202+ E964             >
 202+ E964             >mirror_Ptr      defl    $
 202+ E964             >
 202+ E964 93 75       >                dw      Dict_Ptr + 2        // xt
 202+ E966             >Heap_Ptr        defl    $ - $E000           // save current HP
 202+ E966             >
 202+ E966             >Current_HP      defl  $ - $E000             // used to set HP once!
 202+ E966             >
 202+ E966             >//              ______________________________________________________________________
 202+ E966             >//              Dictionary part
 202+ E966             >
 202+ E966             >                org     Dict_Ptr
 202+ 7591             >
 202+ 7591 64 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 202+ 7593             >
 202+ 7593             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 202+ 7593 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 202+ 7596             >
 202+ 7596             >
 202+ 7596             >                endif           ; ok        // for other definitions it "points" the correct handler
 202+ 7596             >                // Use of "; ok" to suppress "warning[fwdref]"
 202+ 7596             >
 202+ 7596             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 203+ 7596 CF 6A 80 69                  dw      S0, FETCH               // s0 @
 204+ 759A 99 6A                        dw      BL                      // bl
 205+ 759C F2 68 8A 69                  dw      OVER, STORE             // over !
 206+ 75A0 3B 68                        dw      SPSTORE                 // sp!
 207+ 75A2 A6 6E                        dw      DECIMAL                 // decimal
 208+ 75A4 2C 75                        dw      FORTH                   // [compile] forth
 209+ 75A6 39 75                        dw      DEFINITIONS             // definitions
 210+ 75A8
 211+ 75A8 5D 6E                        dw      SQUARED_OPEN            // [compile] [
 212+ 75AA D5 6A 80 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 212+ 75AE 46 68
 213+ 75B0
 214+ 75B0              Autoexec_Ptr:
 215+ 75B0 C1 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 216+ 75B2 57 75                        dw      QUIT                    // quit
 217+ 75B4              //              dw      EXIT                    // ;
 218+ 75B4
 219+ 75B4              //  ______________________________________________________________________
 220+ 75B4              //
 221+ 75B4              // warm         --
 222+ 75B4                              Colon_Def WARM, "WARM", is_normal
 222+ 75B4             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 222+ 75B4             >
 222+ 75B4             >Dict_Ptr        defl    $
 222+ 75B4             >
 222+ 75B4             >//              ______________________________________________________________________
 222+ 75B4             >//              Heap part
 222+ 75B4             >
 222+ 75B4             >
 222+ 75B4             >                org     (Heap_Ptr & $1FFF) + $E000
 222+ E966             >
 222+ E966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 222+ E966             >Latest_Definition defl  Heap_Ptr
 222+ E966             >
 222+ E966             >                // dummy db directives used to calculate length of namec
 222+ E966 57 41 52 4D >                db      "WARM"
 222+ E96A             >len_NFA         defl    $ - temp_NFA
 222+ E96A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 222+ E966             >
 222+ E966 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 222+ E967 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 222+ E96B             >                org     $-1                 // alter last byte of Name just above to set
 222+ E96A CD          >                db      {b $} | END_BIT     // msb as name end
 222+ E96B             >
 222+ E96B 5C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 222+ E96D             >Prev_Ptr        defl    Heap_Ptr
 222+ E96D             >
 222+ E96D             >mirror_Ptr      defl    $
 222+ E96D             >
 222+ E96D B6 75       >                dw      Dict_Ptr + 2        // xt
 222+ E96F             >Heap_Ptr        defl    $ - $E000           // save current HP
 222+ E96F             >
 222+ E96F             >Current_HP      defl  $ - $E000             // used to set HP once!
 222+ E96F             >
 222+ E96F             >//              ______________________________________________________________________
 222+ E96F             >//              Dictionary part
 222+ E96F             >
 222+ E96F             >                org     Dict_Ptr
 222+ 75B4             >
 222+ 75B4 6D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 222+ 75B6             >
 222+ 75B6             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 222+ 75B6 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 222+ 75B9             >
 222+ 75B9             >
 222+ 75B9             >                endif           ; ok        // for other definitions it "points" the correct handler
 222+ 75B9             >                // Use of "; ok" to suppress "warning[fwdref]"
 222+ 75B9             >
 222+ 75B9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 223+ 75B9 7D 78                        dw      BLK_INIT                // blk-init
 224+ 75BB 9D 7F                        dw      SPLASH                  // splash
 225+ 75BD                          //  dw      LIT, 7, EMIT            // 7 emit
 226+ 75BD 93 75                        dw      ABORT                   // abort
 227+ 75BF                          //  dw      EXIT                    // exit
 228+ 75BF
 229+ 75BF              //  ______________________________________________________________________
 230+ 75BF              //
 231+ 75BF              // cold         --
 232+ 75BF                              Colon_Def COLD, "COLD", is_normal
 232+ 75BF             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 232+ 75BF             >
 232+ 75BF             >Dict_Ptr        defl    $
 232+ 75BF             >
 232+ 75BF             >//              ______________________________________________________________________
 232+ 75BF             >//              Heap part
 232+ 75BF             >
 232+ 75BF             >
 232+ 75BF             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E96F             >
 232+ E96F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E96F             >Latest_Definition defl  Heap_Ptr
 232+ E96F             >
 232+ E96F             >                // dummy db directives used to calculate length of namec
 232+ E96F 43 4F 4C 44 >                db      "COLD"
 232+ E973             >len_NFA         defl    $ - temp_NFA
 232+ E973             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E96F             >
 232+ E96F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E970 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 232+ E974             >                org     $-1                 // alter last byte of Name just above to set
 232+ E973 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E974             >
 232+ E974 66 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E976             >Prev_Ptr        defl    Heap_Ptr
 232+ E976             >
 232+ E976             >mirror_Ptr      defl    $
 232+ E976             >
 232+ E976 C1 75       >                dw      Dict_Ptr + 2        // xt
 232+ E978             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E978             >
 232+ E978             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E978             >
 232+ E978             >//              ______________________________________________________________________
 232+ E978             >//              Dictionary part
 232+ E978             >
 232+ E978             >                org     Dict_Ptr
 232+ 75BF             >
 232+ 75BF 76 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 75C1             >
 232+ 75C1             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 75C1 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 232+ 75C4             >
 232+ 75C4             >
 232+ 75C4             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 75C4             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 75C4             >
 232+ 75C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 75C4 3D 6A 3D 6A                  dw      NOOP, NOOP
 234+ 75C8 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 235+ 75CC A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 236+ 75D0 80 69                        dw      FETCH                   // @
 237+ 75D2 A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 237+ 75D6 98 68
 238+ 75D8 A3 63 16 00                  dw      LIT, 22                 // 22
 239+ 75DC 8C 67                        dw      CMOVE
 240+ 75DE A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 241+ 75E2 80 69                        dw      FETCH                   // @
 242+ 75E4 A3 63 33 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 243+ 75E8 8A 69                        dw      STORE                   // !
 244+ 75EA 76 6A 11 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 244+ 75EE 8A 69
 245+ 75F0 FF 6A 80 69                  dw      FIRST, FETCH, DUP       // first @ dup
 245+ 75F4 16 69
 246+ 75F6 6B 6B 8A 69                  dw      USED, STORE             // used !
 247+ 75FA 71 6B 8A 69                  dw      PREV, STORE             // prev !
 248+ 75FE A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 248+ 7602 7D 6B 8A 69
 249+ 7606              //              dw      LIT, 8
 250+ 7606              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 251+ 7606 14 79                        dw      EMPTY_BUFFERS
 252+ 7608 76 6A 17 6B                  dw      ZERO, BLK, STORE
 252+ 760C 8A 69
 253+ 760E 76 6A 83 6B                  dw      ZERO, SOURCE_ID, STORE
 253+ 7612 8A 69
 254+ 7614
 255+ 7614 A3 63 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 255+ 7618 9B 65
 256+ 761A 76 6A 9B 65                  dw      ZERO, EMITC
 257+ 761E
 258+ 761E B6 75        Warm_Start:     dw      WARM
 259+ 7620 C1 75        Cold_Start:     dw      COLD
 260+ 7622              //              dw      EXIT
 261+ 7622
 262+ 7622              //  ______________________________________________________________________
 263+ 7622              WarmRoutine:
 264+ 7622              ColdRoutine:
 265+ 7622                              // First, save Basic's status: H'L' and SP
 266+ 7622 D9                           exx
 267+ 7623 E5                           push    hl                      // save Basic's return address
 268+ 7624 D9                           exx
 269+ 7625 ED 73 6E 63                  ld      (SP_Basic), sp
 270+ 7629
 271+ 7629                              // pre-set the four main 16-bit registers
 272+ 7629 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 273+ 762D 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 274+ 7630 EB                           ex      de, hl
 275+ 7631 DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 276+ 7635 01 1E 76                     ld      bc, Warm_Start          // Instruction Pointer
 277+ 7638
 278+ 7638 38 02                        jr      c, Warm_Skip
 279+ 763A 03                           inc     bc
 280+ 763B 03                           inc     bc
 281+ 763C              Warm_Skip:
 282+ 763C                              next
 282+ 763C DD E9       >                jp      (ix)
 283+ 763E
 284+ 763E              //  ______________________________________________________________________
 285+ 763E              //
 286+ 763E              // basic        --
 287+ 763E                              New_Def BASIC, "BASIC", is_code, is_normal
 287+ 763E             >
 287+ 763E             >Dict_Ptr        defl    $
 287+ 763E             >
 287+ 763E             >//              ______________________________________________________________________
 287+ 763E             >//              Heap part
 287+ 763E             >
 287+ 763E             >
 287+ 763E             >                org     (Heap_Ptr & $1FFF) + $E000
 287+ E978             >
 287+ E978             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 287+ E978             >Latest_Definition defl  Heap_Ptr
 287+ E978             >
 287+ E978             >                // dummy db directives used to calculate length of namec
 287+ E978 42 41 53 49 >                db      "BASIC"
 287+ E97C 43          >
 287+ E97D             >len_NFA         defl    $ - temp_NFA
 287+ E97D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 287+ E978             >
 287+ E978 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 287+ E979 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 287+ E97D 43          >
 287+ E97E             >                org     $-1                 // alter last byte of Name just above to set
 287+ E97D C3          >                db      {b $} | END_BIT     // msb as name end
 287+ E97E             >
 287+ E97E 6F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 287+ E980             >Prev_Ptr        defl    Heap_Ptr
 287+ E980             >
 287+ E980             >mirror_Ptr      defl    $
 287+ E980             >
 287+ E980 40 76       >                dw      Dict_Ptr + 2        // xt
 287+ E982             >Heap_Ptr        defl    $ - $E000           // save current HP
 287+ E982             >
 287+ E982             >Current_HP      defl  $ - $E000             // used to set HP once!
 287+ E982             >
 287+ E982             >//              ______________________________________________________________________
 287+ E982             >//              Dictionary part
 287+ E982             >
 287+ E982             >                org     Dict_Ptr
 287+ 763E             >
 287+ 763E 80 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 287+ 7640             >
 287+ 7640             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 287+ 7640 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 287+ 7640 ~           >
 287+ 7640 ~           >
 287+ 7640             >                endif           ; ok        // for other definitions it "points" the correct handler
 287+ 7640             >                // Use of "; ok" to suppress "warning[fwdref]"
 287+ 7640             >
 287+ 7640             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 288+ 7640 C1                           pop     bc                      // return  TOS  value to Basic
 289+ 7641 21 00 00                     ld      hl, 0
 290+ 7644 39                           add     hl, sp
 291+ 7645 ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 292+ 7649              //              nop
 293+ 7649 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 294+ 764C D9                           exx
 295+ 764D E1                           pop     hl                      // restore h'l'
 296+ 764E D9                           exx
 297+ 764F C9                           ret                             // to where USR Basic was left
 298+ 7650
 299+ 7650              //  ______________________________________________________________________
 300+ 7650              //
 301+ 7650              // +-           n1 n2 -- n3
 302+ 7650              // leaves n1 with the sign of n2 as n3.
 303+ 7650                              Colon_Def PLUS_MINUS, "+-", is_normal
 303+ 7650             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 303+ 7650             >
 303+ 7650             >Dict_Ptr        defl    $
 303+ 7650             >
 303+ 7650             >//              ______________________________________________________________________
 303+ 7650             >//              Heap part
 303+ 7650             >
 303+ 7650             >
 303+ 7650             >                org     (Heap_Ptr & $1FFF) + $E000
 303+ E982             >
 303+ E982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 303+ E982             >Latest_Definition defl  Heap_Ptr
 303+ E982             >
 303+ E982             >                // dummy db directives used to calculate length of namec
 303+ E982 2B 2D       >                db      "+-"
 303+ E984             >len_NFA         defl    $ - temp_NFA
 303+ E984             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 303+ E982             >
 303+ E982 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 303+ E983 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 303+ E985             >                org     $-1                 // alter last byte of Name just above to set
 303+ E984 AD          >                db      {b $} | END_BIT     // msb as name end
 303+ E985             >
 303+ E985 78 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 303+ E987             >Prev_Ptr        defl    Heap_Ptr
 303+ E987             >
 303+ E987             >mirror_Ptr      defl    $
 303+ E987             >
 303+ E987 52 76       >                dw      Dict_Ptr + 2        // xt
 303+ E989             >Heap_Ptr        defl    $ - $E000           // save current HP
 303+ E989             >
 303+ E989             >Current_HP      defl  $ - $E000             // used to set HP once!
 303+ E989             >
 303+ E989             >//              ______________________________________________________________________
 303+ E989             >//              Dictionary part
 303+ E989             >
 303+ E989             >                org     Dict_Ptr
 303+ 7650             >
 303+ 7650 87 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 303+ 7652             >
 303+ 7652             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 303+ 7652 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 303+ 7655             >
 303+ 7655             >
 303+ 7655             >                endif           ; ok        // for other definitions it "points" the correct handler
 303+ 7655             >                // Use of "; ok" to suppress "warning[fwdref]"
 303+ 7655             >
 303+ 7655             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 304+ 7655 81 68                        dw      ZLESS                   // 0<
 305+ 7657                                                              // if
 306+ 7657 F3 63                        dw      ZBRANCH
 307+ 7659 04 00                        dw      Plus_Minus_Endif - $
 308+ 765B D8 68                        dw          MINUS               //      minus
 309+ 765D              Plus_Minus_Endif:                               // endif
 310+ 765D 4B 68                        dw      EXIT                    // ;
 311+ 765F
 312+ 765F              //  ______________________________________________________________________
 313+ 765F              //
 314+ 765F              // d+-          d1 n -- d2
 315+ 765F              // leaves d1 with the sign of n as d2.
 316+ 765F                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 316+ 765F             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 316+ 765F             >
 316+ 765F             >Dict_Ptr        defl    $
 316+ 765F             >
 316+ 765F             >//              ______________________________________________________________________
 316+ 765F             >//              Heap part
 316+ 765F             >
 316+ 765F             >
 316+ 765F             >                org     (Heap_Ptr & $1FFF) + $E000
 316+ E989             >
 316+ E989             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 316+ E989             >Latest_Definition defl  Heap_Ptr
 316+ E989             >
 316+ E989             >                // dummy db directives used to calculate length of namec
 316+ E989 44 2B 2D    >                db      "D+-"
 316+ E98C             >len_NFA         defl    $ - temp_NFA
 316+ E98C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 316+ E989             >
 316+ E989 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 316+ E98A 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 316+ E98D             >                org     $-1                 // alter last byte of Name just above to set
 316+ E98C AD          >                db      {b $} | END_BIT     // msb as name end
 316+ E98D             >
 316+ E98D 82 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 316+ E98F             >Prev_Ptr        defl    Heap_Ptr
 316+ E98F             >
 316+ E98F             >mirror_Ptr      defl    $
 316+ E98F             >
 316+ E98F 61 76       >                dw      Dict_Ptr + 2        // xt
 316+ E991             >Heap_Ptr        defl    $ - $E000           // save current HP
 316+ E991             >
 316+ E991             >Current_HP      defl  $ - $E000             // used to set HP once!
 316+ E991             >
 316+ E991             >//              ______________________________________________________________________
 316+ E991             >//              Dictionary part
 316+ E991             >
 316+ E991             >                org     Dict_Ptr
 316+ 765F             >
 316+ 765F 8F 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 316+ 7661             >
 316+ 7661             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 316+ 7661 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 316+ 7664             >
 316+ 7664             >
 316+ 7664             >                endif           ; ok        // for other definitions it "points" the correct handler
 316+ 7664             >                // Use of "; ok" to suppress "warning[fwdref]"
 316+ 7664             >
 316+ 7664             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 317+ 7664 81 68                        dw      ZLESS                   // 0<
 318+ 7666                                                              // if
 319+ 7666 F3 63                        dw      ZBRANCH
 320+ 7668 04 00                        dw      DPlus_Minus_Endif - $
 321+ 766A E5 68                        dw          DMINUS              //      dminus
 322+ 766C              DPlus_Minus_Endif:                              // endif
 323+ 766C 4B 68                        dw      EXIT                    // ;
 324+ 766E
 325+ 766E              //  ______________________________________________________________________
 326+ 766E              //
 327+ 766E              // abs          n1 -- n2
 328+ 766E                              Colon_Def ABS_OP, "ABS", is_normal
 328+ 766E             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 328+ 766E             >
 328+ 766E             >Dict_Ptr        defl    $
 328+ 766E             >
 328+ 766E             >//              ______________________________________________________________________
 328+ 766E             >//              Heap part
 328+ 766E             >
 328+ 766E             >
 328+ 766E             >                org     (Heap_Ptr & $1FFF) + $E000
 328+ E991             >
 328+ E991             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 328+ E991             >Latest_Definition defl  Heap_Ptr
 328+ E991             >
 328+ E991             >                // dummy db directives used to calculate length of namec
 328+ E991 41 42 53    >                db      "ABS"
 328+ E994             >len_NFA         defl    $ - temp_NFA
 328+ E994             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 328+ E991             >
 328+ E991 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 328+ E992 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 328+ E995             >                org     $-1                 // alter last byte of Name just above to set
 328+ E994 D3          >                db      {b $} | END_BIT     // msb as name end
 328+ E995             >
 328+ E995 89 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 328+ E997             >Prev_Ptr        defl    Heap_Ptr
 328+ E997             >
 328+ E997             >mirror_Ptr      defl    $
 328+ E997             >
 328+ E997 70 76       >                dw      Dict_Ptr + 2        // xt
 328+ E999             >Heap_Ptr        defl    $ - $E000           // save current HP
 328+ E999             >
 328+ E999             >Current_HP      defl  $ - $E000             // used to set HP once!
 328+ E999             >
 328+ E999             >//              ______________________________________________________________________
 328+ E999             >//              Dictionary part
 328+ E999             >
 328+ E999             >                org     Dict_Ptr
 328+ 766E             >
 328+ 766E 97 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 328+ 7670             >
 328+ 7670             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 328+ 7670 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 328+ 7673             >
 328+ 7673             >
 328+ 7673             >                endif           ; ok        // for other definitions it "points" the correct handler
 328+ 7673             >                // Use of "; ok" to suppress "warning[fwdref]"
 328+ 7673             >
 328+ 7673             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 329+ 7673 16 69                        dw      DUP                     // dup
 330+ 7675 52 76                        dw      PLUS_MINUS              // +-
 331+ 7677 4B 68                        dw      EXIT                    // ;
 332+ 7679
 333+ 7679              //  ______________________________________________________________________
 334+ 7679              //
 335+ 7679              // dabs         d1 -- d2
 336+ 7679                              Colon_Def DABS, "DABS", is_normal
 336+ 7679             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 336+ 7679             >
 336+ 7679             >Dict_Ptr        defl    $
 336+ 7679             >
 336+ 7679             >//              ______________________________________________________________________
 336+ 7679             >//              Heap part
 336+ 7679             >
 336+ 7679             >
 336+ 7679             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ E999             >
 336+ E999             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ E999             >Latest_Definition defl  Heap_Ptr
 336+ E999             >
 336+ E999             >                // dummy db directives used to calculate length of namec
 336+ E999 44 41 42 53 >                db      "DABS"
 336+ E99D             >len_NFA         defl    $ - temp_NFA
 336+ E99D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ E999             >
 336+ E999 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ E99A 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 336+ E99E             >                org     $-1                 // alter last byte of Name just above to set
 336+ E99D D3          >                db      {b $} | END_BIT     // msb as name end
 336+ E99E             >
 336+ E99E 91 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ E9A0             >Prev_Ptr        defl    Heap_Ptr
 336+ E9A0             >
 336+ E9A0             >mirror_Ptr      defl    $
 336+ E9A0             >
 336+ E9A0 7B 76       >                dw      Dict_Ptr + 2        // xt
 336+ E9A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ E9A2             >
 336+ E9A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ E9A2             >
 336+ E9A2             >//              ______________________________________________________________________
 336+ E9A2             >//              Dictionary part
 336+ E9A2             >
 336+ E9A2             >                org     Dict_Ptr
 336+ 7679             >
 336+ 7679 A0 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 767B             >
 336+ 767B             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 767B CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 336+ 767E             >
 336+ 767E             >
 336+ 767E             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 767E             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 767E             >
 336+ 767E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 767E 16 69                        dw      DUP                     // dup
 338+ 7680 61 76                        dw      DPLUS_MINUS             // d+-
 339+ 7682 4B 68                        dw      EXIT                    // ;
 340+ 7684
 341+ 7684              //  ______________________________________________________________________
 342+ 7684              //
 343+ 7684              // m*           n1 n2 -- d
 344+ 7684              // multiply two integer giving a double
 345+ 7684                              Colon_Def MMUL, "M*", is_normal
 345+ 7684             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 345+ 7684             >
 345+ 7684             >Dict_Ptr        defl    $
 345+ 7684             >
 345+ 7684             >//              ______________________________________________________________________
 345+ 7684             >//              Heap part
 345+ 7684             >
 345+ 7684             >
 345+ 7684             >                org     (Heap_Ptr & $1FFF) + $E000
 345+ E9A2             >
 345+ E9A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 345+ E9A2             >Latest_Definition defl  Heap_Ptr
 345+ E9A2             >
 345+ E9A2             >                // dummy db directives used to calculate length of namec
 345+ E9A2 4D 2A       >                db      "M*"
 345+ E9A4             >len_NFA         defl    $ - temp_NFA
 345+ E9A4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 345+ E9A2             >
 345+ E9A2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 345+ E9A3 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 345+ E9A5             >                org     $-1                 // alter last byte of Name just above to set
 345+ E9A4 AA          >                db      {b $} | END_BIT     // msb as name end
 345+ E9A5             >
 345+ E9A5 99 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 345+ E9A7             >Prev_Ptr        defl    Heap_Ptr
 345+ E9A7             >
 345+ E9A7             >mirror_Ptr      defl    $
 345+ E9A7             >
 345+ E9A7 86 76       >                dw      Dict_Ptr + 2        // xt
 345+ E9A9             >Heap_Ptr        defl    $ - $E000           // save current HP
 345+ E9A9             >
 345+ E9A9             >Current_HP      defl  $ - $E000             // used to set HP once!
 345+ E9A9             >
 345+ E9A9             >//              ______________________________________________________________________
 345+ E9A9             >//              Dictionary part
 345+ E9A9             >
 345+ E9A9             >                org     Dict_Ptr
 345+ 7684             >
 345+ 7684 A7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 345+ 7686             >
 345+ 7686             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 345+ 7686 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 345+ 7689             >
 345+ 7689             >
 345+ 7689             >                endif           ; ok        // for other definitions it "points" the correct handler
 345+ 7689             >                // Use of "; ok" to suppress "warning[fwdref]"
 345+ 7689             >
 345+ 7689             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 346+ 7689 5E 69 26 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 346+ 768D 55 68
 347+ 768F 70 76 0F 69                  dw      ABS_OP, SWAP            // abs swap
 348+ 7693 70 76 B0 67                  dw      ABS_OP, UM_MUL          // abs um*
 349+ 7697 60 68 61 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 350+ 769B 4B 68                        dw      EXIT                    // ;
 351+ 769D
 352+ 769D              //  ______________________________________________________________________
 353+ 769D              //
 354+ 769D              // sm/rem       d n -- q r
 355+ 769D              // Symmetric division: divides a double into n giving quotient q and remainder r
 356+ 769D              // the remainder has the sign of d.
 357+ 769D                              Colon_Def SMDIVM, "SM/REM", is_normal
 357+ 769D             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 357+ 769D             >
 357+ 769D             >Dict_Ptr        defl    $
 357+ 769D             >
 357+ 769D             >//              ______________________________________________________________________
 357+ 769D             >//              Heap part
 357+ 769D             >
 357+ 769D             >
 357+ 769D             >                org     (Heap_Ptr & $1FFF) + $E000
 357+ E9A9             >
 357+ E9A9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 357+ E9A9             >Latest_Definition defl  Heap_Ptr
 357+ E9A9             >
 357+ E9A9             >                // dummy db directives used to calculate length of namec
 357+ E9A9 53 4D 2F 52 >                db      "SM/REM"
 357+ E9AD 45 4D       >
 357+ E9AF             >len_NFA         defl    $ - temp_NFA
 357+ E9AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 357+ E9A9             >
 357+ E9A9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 357+ E9AA 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 357+ E9AE 45 4D       >
 357+ E9B0             >                org     $-1                 // alter last byte of Name just above to set
 357+ E9AF CD          >                db      {b $} | END_BIT     // msb as name end
 357+ E9B0             >
 357+ E9B0 A2 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 357+ E9B2             >Prev_Ptr        defl    Heap_Ptr
 357+ E9B2             >
 357+ E9B2             >mirror_Ptr      defl    $
 357+ E9B2             >
 357+ E9B2 9F 76       >                dw      Dict_Ptr + 2        // xt
 357+ E9B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 357+ E9B4             >
 357+ E9B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 357+ E9B4             >
 357+ E9B4             >//              ______________________________________________________________________
 357+ E9B4             >//              Dictionary part
 357+ E9B4             >
 357+ E9B4             >                org     Dict_Ptr
 357+ 769D             >
 357+ 769D B2 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 357+ 769F             >
 357+ 769F             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 357+ 769F CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 357+ 76A2             >
 357+ 76A2             >
 357+ 76A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 357+ 76A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 357+ 76A2             >
 357+ 76A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 358+ 76A2 F2 68 55 68                  dw      OVER, TO_R, TO_R        // over >r >r
 358+ 76A6 55 68
 359+ 76A8 7B 76 6B 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 359+ 76AC 70 76
 360+ 76AE D8 67                        dw      UMDIVMOD                // um/mod
 361+ 76B0 60 68                        dw      R_TO                    // r>
 362+ 76B2 6B 68 26 68                  dw      R_OP, XOR_OP            // r xor
 363+ 76B6 52 76 0F 69                  dw      PLUS_MINUS, SWAP        // +- swap
 364+ 76BA 60 68                        dw      R_TO                    // r>
 365+ 76BC 52 76 0F 69                  dw      PLUS_MINUS, SWAP        // +- swap
 366+ 76C0 4B 68                        dw      EXIT                    // ;
 367+ 76C2
 368+ 76C2              //  ______________________________________________________________________
 369+ 76C2              //
 370+ 76C2              // fm/mod       d n -- q r
 371+ 76C2              // Floored division: divides a double into n giving quotient q and remainder r
 372+ 76C2              // the remainder has the sign of d.
 373+ 76C2                              Colon_Def FMDIVM, "FM/MOD", is_normal
 373+ 76C2             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 373+ 76C2             >
 373+ 76C2             >Dict_Ptr        defl    $
 373+ 76C2             >
 373+ 76C2             >//              ______________________________________________________________________
 373+ 76C2             >//              Heap part
 373+ 76C2             >
 373+ 76C2             >
 373+ 76C2             >                org     (Heap_Ptr & $1FFF) + $E000
 373+ E9B4             >
 373+ E9B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 373+ E9B4             >Latest_Definition defl  Heap_Ptr
 373+ E9B4             >
 373+ E9B4             >                // dummy db directives used to calculate length of namec
 373+ E9B4 46 4D 2F 4D >                db      "FM/MOD"
 373+ E9B8 4F 44       >
 373+ E9BA             >len_NFA         defl    $ - temp_NFA
 373+ E9BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 373+ E9B4             >
 373+ E9B4 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 373+ E9B5 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 373+ E9B9 4F 44       >
 373+ E9BB             >                org     $-1                 // alter last byte of Name just above to set
 373+ E9BA C4          >                db      {b $} | END_BIT     // msb as name end
 373+ E9BB             >
 373+ E9BB A9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 373+ E9BD             >Prev_Ptr        defl    Heap_Ptr
 373+ E9BD             >
 373+ E9BD             >mirror_Ptr      defl    $
 373+ E9BD             >
 373+ E9BD C4 76       >                dw      Dict_Ptr + 2        // xt
 373+ E9BF             >Heap_Ptr        defl    $ - $E000           // save current HP
 373+ E9BF             >
 373+ E9BF             >Current_HP      defl  $ - $E000             // used to set HP once!
 373+ E9BF             >
 373+ E9BF             >//              ______________________________________________________________________
 373+ E9BF             >//              Dictionary part
 373+ E9BF             >
 373+ E9BF             >                org     Dict_Ptr
 373+ 76C2             >
 373+ 76C2 BD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 373+ 76C4             >
 373+ 76C4             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 373+ 76C4 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 373+ 76C7             >
 373+ 76C7             >
 373+ 76C7             >                endif           ; ok        // for other definitions it "points" the correct handler
 373+ 76C7             >                // Use of "; ok" to suppress "warning[fwdref]"
 373+ 76C7             >
 373+ 76C7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 374+ 76C7 16 69 55 68                  dw      DUP, TO_R               // dup >r
 375+ 76CB 9F 76                        dw      SMDIVM
 376+ 76CD F2 68 16 69                  dw      OVER, DUP
 377+ 76D1 70 68 70 68                  dw      ZEQUAL, ZEQUAL
 378+ 76D5 0F 69 81 68                  dw      SWAP, ZLESS
 379+ 76D9 6B 68 81 68                  dw      R_OP, ZLESS
 380+ 76DD 26 68 0B 68                  dw      XOR_OP, AND_OP
 381+ 76E1 F3 63                        dw      ZBRANCH
 382+ 76E3 10 00                        dw      Fm_Mod_Else - $
 383+ 76E5 B8 68                        dw          ONE_SUBTRACT
 384+ 76E7 0F 69 60 68                  dw          SWAP, R_TO
 385+ 76EB 98 68 0F 69                  dw          PLUS, SWAP
 386+ 76EF EF 63                        dw      BRANCH
 387+ 76F1 06 00                        dw      Fm_Mod_Endif - $
 388+ 76F3              Fm_Mod_Else:
 389+ 76F3 60 68 FB 68                  dw          R_TO, DROP
 390+ 76F7              Fm_Mod_Endif:
 391+ 76F7 4B 68                        dw      EXIT
 392+ 76F9              //              dw      TWO_DUP                 // 2dup
 393+ 76F9              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 394+ 76F9              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 395+ 76F9              //              dw      UMDIVMOD                // um/mod
 396+ 76F9              //              dw      SWAP                    // swap
 397+ 76F9              //              dw      II, ZLESS               // i'
 398+ 76F9              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 399+ 76F9              //              dw      R_TO                    // r>
 400+ 76F9              //              dw      PLUS_MINUS, SWAP        // +- swap
 401+ 76F9              //              dw      R_OP                    // r@
 402+ 76F9              //              dw      ZLESS                   // i'
 403+ 76F9              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 404+ 76F9              //              dw      R_TO                    // r>
 405+ 76F9              //              dw      PLUS_MINUS              // +- swap
 406+ 76F9              //              dw      EXIT                    // ;
 407+ 76F9
 408+ 76F9              //  ______________________________________________________________________
 409+ 76F9              //
 410+ 76F9              // m/mod        d n -- q r
 411+ 76F9              // multiply two integer giving a double
 412+ 76F9                              Colon_Def MDIVM, "M/MOD", is_normal
 412+ 76F9             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 412+ 76F9             >
 412+ 76F9             >Dict_Ptr        defl    $
 412+ 76F9             >
 412+ 76F9             >//              ______________________________________________________________________
 412+ 76F9             >//              Heap part
 412+ 76F9             >
 412+ 76F9             >
 412+ 76F9             >                org     (Heap_Ptr & $1FFF) + $E000
 412+ E9BF             >
 412+ E9BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 412+ E9BF             >Latest_Definition defl  Heap_Ptr
 412+ E9BF             >
 412+ E9BF             >                // dummy db directives used to calculate length of namec
 412+ E9BF 4D 2F 4D 4F >                db      "M/MOD"
 412+ E9C3 44          >
 412+ E9C4             >len_NFA         defl    $ - temp_NFA
 412+ E9C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 412+ E9BF             >
 412+ E9BF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 412+ E9C0 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 412+ E9C4 44          >
 412+ E9C5             >                org     $-1                 // alter last byte of Name just above to set
 412+ E9C4 C4          >                db      {b $} | END_BIT     // msb as name end
 412+ E9C5             >
 412+ E9C5 B4 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 412+ E9C7             >Prev_Ptr        defl    Heap_Ptr
 412+ E9C7             >
 412+ E9C7             >mirror_Ptr      defl    $
 412+ E9C7             >
 412+ E9C7 FB 76       >                dw      Dict_Ptr + 2        // xt
 412+ E9C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 412+ E9C9             >
 412+ E9C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 412+ E9C9             >
 412+ E9C9             >//              ______________________________________________________________________
 412+ E9C9             >//              Dictionary part
 412+ E9C9             >
 412+ E9C9             >                org     Dict_Ptr
 412+ 76F9             >
 412+ 76F9 C7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 412+ 76FB             >
 412+ 76FB             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 412+ 76FB CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 412+ 76FE             >
 412+ 76FE             >
 412+ 76FE             >                endif           ; ok        // for other definitions it "points" the correct handler
 412+ 76FE             >                // Use of "; ok" to suppress "warning[fwdref]"
 412+ 76FE             >
 412+ 76FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 413+ 76FE 9F 76                        dw      SMDIVM
 414+ 7700 4B 68                        dw      EXIT                    // ;
 415+ 7702
 416+ 7702              //  ______________________________________________________________________
 417+ 7702              //
 418+ 7702              // m/           d n -- q
 419+ 7702              // multiply two integer giving a double
 420+ 7702                              Colon_Def MDIV, "M/", is_normal
 420+ 7702             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 420+ 7702             >
 420+ 7702             >Dict_Ptr        defl    $
 420+ 7702             >
 420+ 7702             >//              ______________________________________________________________________
 420+ 7702             >//              Heap part
 420+ 7702             >
 420+ 7702             >
 420+ 7702             >                org     (Heap_Ptr & $1FFF) + $E000
 420+ E9C9             >
 420+ E9C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 420+ E9C9             >Latest_Definition defl  Heap_Ptr
 420+ E9C9             >
 420+ E9C9             >                // dummy db directives used to calculate length of namec
 420+ E9C9 4D 2F       >                db      "M/"
 420+ E9CB             >len_NFA         defl    $ - temp_NFA
 420+ E9CB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 420+ E9C9             >
 420+ E9C9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 420+ E9CA 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 420+ E9CC             >                org     $-1                 // alter last byte of Name just above to set
 420+ E9CB AF          >                db      {b $} | END_BIT     // msb as name end
 420+ E9CC             >
 420+ E9CC BF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 420+ E9CE             >Prev_Ptr        defl    Heap_Ptr
 420+ E9CE             >
 420+ E9CE             >mirror_Ptr      defl    $
 420+ E9CE             >
 420+ E9CE 04 77       >                dw      Dict_Ptr + 2        // xt
 420+ E9D0             >Heap_Ptr        defl    $ - $E000           // save current HP
 420+ E9D0             >
 420+ E9D0             >Current_HP      defl  $ - $E000             // used to set HP once!
 420+ E9D0             >
 420+ E9D0             >//              ______________________________________________________________________
 420+ E9D0             >//              Dictionary part
 420+ E9D0             >
 420+ E9D0             >                org     Dict_Ptr
 420+ 7702             >
 420+ 7702 CE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 420+ 7704             >
 420+ 7704             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 420+ 7704 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 420+ 7707             >
 420+ 7707             >
 420+ 7707             >                endif           ; ok        // for other definitions it "points" the correct handler
 420+ 7707             >                // Use of "; ok" to suppress "warning[fwdref]"
 420+ 7707             >
 420+ 7707             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 421+ 7707 FB 76 00 69                  dw      MDIVM, NIP
 422+ 770B 4B 68                        dw      EXIT                    // ;
 423+ 770D
 424+ 770D              //  ______________________________________________________________________
 425+ 770D              //
 426+ 770D              // *            n1 n2 -- n3
 427+ 770D              // multiply two integer
 428+ 770D                              Colon_Def MUL, "*", is_normal
 428+ 770D             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 428+ 770D             >
 428+ 770D             >Dict_Ptr        defl    $
 428+ 770D             >
 428+ 770D             >//              ______________________________________________________________________
 428+ 770D             >//              Heap part
 428+ 770D             >
 428+ 770D             >
 428+ 770D             >                org     (Heap_Ptr & $1FFF) + $E000
 428+ E9D0             >
 428+ E9D0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 428+ E9D0             >Latest_Definition defl  Heap_Ptr
 428+ E9D0             >
 428+ E9D0             >                // dummy db directives used to calculate length of namec
 428+ E9D0 2A          >                db      "*"
 428+ E9D1             >len_NFA         defl    $ - temp_NFA
 428+ E9D1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 428+ E9D0             >
 428+ E9D0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 428+ E9D1 2A          >                db      "*"               // name string in 7-bit ascii, but
 428+ E9D2             >                org     $-1                 // alter last byte of Name just above to set
 428+ E9D1 AA          >                db      {b $} | END_BIT     // msb as name end
 428+ E9D2             >
 428+ E9D2 C9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 428+ E9D4             >Prev_Ptr        defl    Heap_Ptr
 428+ E9D4             >
 428+ E9D4             >mirror_Ptr      defl    $
 428+ E9D4             >
 428+ E9D4 0F 77       >                dw      Dict_Ptr + 2        // xt
 428+ E9D6             >Heap_Ptr        defl    $ - $E000           // save current HP
 428+ E9D6             >
 428+ E9D6             >Current_HP      defl  $ - $E000             // used to set HP once!
 428+ E9D6             >
 428+ E9D6             >//              ______________________________________________________________________
 428+ E9D6             >//              Dictionary part
 428+ E9D6             >
 428+ E9D6             >                org     Dict_Ptr
 428+ 770D             >
 428+ 770D D4 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 428+ 770F             >
 428+ 770F             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 428+ 770F CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 428+ 7712             >
 428+ 7712             >
 428+ 7712             >                endif           ; ok        // for other definitions it "points" the correct handler
 428+ 7712             >                // Use of "; ok" to suppress "warning[fwdref]"
 428+ 7712             >
 428+ 7712             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 429+ 7712 86 76 FB 68                  dw      MMUL, DROP              // m* drop
 430+ 7716 4B 68                        dw      EXIT                    // ;
 431+ 7718
 432+ 7718              //  ______________________________________________________________________
 433+ 7718              //
 434+ 7718              // /mod         n1 n2 -- n3 n4
 435+ 7718              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 436+ 7718              // The remainder has the sign of n1
 437+ 7718                              Colon_Def DIVMOD, "/MOD", is_normal
 437+ 7718             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 437+ 7718             >
 437+ 7718             >Dict_Ptr        defl    $
 437+ 7718             >
 437+ 7718             >//              ______________________________________________________________________
 437+ 7718             >//              Heap part
 437+ 7718             >
 437+ 7718             >
 437+ 7718             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E9D6             >
 437+ E9D6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E9D6             >Latest_Definition defl  Heap_Ptr
 437+ E9D6             >
 437+ E9D6             >                // dummy db directives used to calculate length of namec
 437+ E9D6 2F 4D 4F 44 >                db      "/MOD"
 437+ E9DA             >len_NFA         defl    $ - temp_NFA
 437+ E9DA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E9D6             >
 437+ E9D6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E9D7 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 437+ E9DB             >                org     $-1                 // alter last byte of Name just above to set
 437+ E9DA C4          >                db      {b $} | END_BIT     // msb as name end
 437+ E9DB             >
 437+ E9DB D0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E9DD             >Prev_Ptr        defl    Heap_Ptr
 437+ E9DD             >
 437+ E9DD             >mirror_Ptr      defl    $
 437+ E9DD             >
 437+ E9DD 1A 77       >                dw      Dict_Ptr + 2        // xt
 437+ E9DF             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E9DF             >
 437+ E9DF             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E9DF             >
 437+ E9DF             >//              ______________________________________________________________________
 437+ E9DF             >//              Dictionary part
 437+ E9DF             >
 437+ E9DF             >                org     Dict_Ptr
 437+ 7718             >
 437+ 7718 DD 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 771A             >
 437+ 771A             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 771A CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 437+ 771D             >
 437+ 771D             >
 437+ 771D             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 771D             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 771D             >
 437+ 771D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 771D 55 68 CF 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 438+ 7721 60 68
 439+ 7723 FB 76                        dw      MDIVM                   // m/mod
 440+ 7725 4B 68                        dw      EXIT                    // ;
 441+ 7727
 442+ 7727              //  ______________________________________________________________________
 443+ 7727              //
 444+ 7727              // /            n1 n2 -- n3
 445+ 7727              // division
 446+ 7727                              Colon_Def DIV, "/", is_normal
 446+ 7727             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 446+ 7727             >
 446+ 7727             >Dict_Ptr        defl    $
 446+ 7727             >
 446+ 7727             >//              ______________________________________________________________________
 446+ 7727             >//              Heap part
 446+ 7727             >
 446+ 7727             >
 446+ 7727             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E9DF             >
 446+ E9DF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E9DF             >Latest_Definition defl  Heap_Ptr
 446+ E9DF             >
 446+ E9DF             >                // dummy db directives used to calculate length of namec
 446+ E9DF 2F          >                db      "/"
 446+ E9E0             >len_NFA         defl    $ - temp_NFA
 446+ E9E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E9DF             >
 446+ E9DF 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E9E0 2F          >                db      "/"               // name string in 7-bit ascii, but
 446+ E9E1             >                org     $-1                 // alter last byte of Name just above to set
 446+ E9E0 AF          >                db      {b $} | END_BIT     // msb as name end
 446+ E9E1             >
 446+ E9E1 D6 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E9E3             >Prev_Ptr        defl    Heap_Ptr
 446+ E9E3             >
 446+ E9E3             >mirror_Ptr      defl    $
 446+ E9E3             >
 446+ E9E3 29 77       >                dw      Dict_Ptr + 2        // xt
 446+ E9E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E9E5             >
 446+ E9E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E9E5             >
 446+ E9E5             >//              ______________________________________________________________________
 446+ E9E5             >//              Dictionary part
 446+ E9E5             >
 446+ E9E5             >                org     Dict_Ptr
 446+ 7727             >
 446+ 7727 E3 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 7729             >
 446+ 7729             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 7729 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 446+ 772C             >
 446+ 772C             >
 446+ 772C             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 772C             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 772C             >
 446+ 772C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 772C 1A 77 00 69                  dw      DIVMOD, NIP             // /mod nip
 448+ 7730 4B 68                        dw      EXIT                    // ;
 449+ 7732
 450+ 7732              //  ______________________________________________________________________
 451+ 7732              //
 452+ 7732              // mod          n1 n2 -- n3
 453+ 7732                              Colon_Def MOD, "MOD", is_normal
 453+ 7732             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 453+ 7732             >
 453+ 7732             >Dict_Ptr        defl    $
 453+ 7732             >
 453+ 7732             >//              ______________________________________________________________________
 453+ 7732             >//              Heap part
 453+ 7732             >
 453+ 7732             >
 453+ 7732             >                org     (Heap_Ptr & $1FFF) + $E000
 453+ E9E5             >
 453+ E9E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 453+ E9E5             >Latest_Definition defl  Heap_Ptr
 453+ E9E5             >
 453+ E9E5             >                // dummy db directives used to calculate length of namec
 453+ E9E5 4D 4F 44    >                db      "MOD"
 453+ E9E8             >len_NFA         defl    $ - temp_NFA
 453+ E9E8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 453+ E9E5             >
 453+ E9E5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 453+ E9E6 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 453+ E9E9             >                org     $-1                 // alter last byte of Name just above to set
 453+ E9E8 C4          >                db      {b $} | END_BIT     // msb as name end
 453+ E9E9             >
 453+ E9E9 DF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 453+ E9EB             >Prev_Ptr        defl    Heap_Ptr
 453+ E9EB             >
 453+ E9EB             >mirror_Ptr      defl    $
 453+ E9EB             >
 453+ E9EB 34 77       >                dw      Dict_Ptr + 2        // xt
 453+ E9ED             >Heap_Ptr        defl    $ - $E000           // save current HP
 453+ E9ED             >
 453+ E9ED             >Current_HP      defl  $ - $E000             // used to set HP once!
 453+ E9ED             >
 453+ E9ED             >//              ______________________________________________________________________
 453+ E9ED             >//              Dictionary part
 453+ E9ED             >
 453+ E9ED             >                org     Dict_Ptr
 453+ 7732             >
 453+ 7732 EB 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 453+ 7734             >
 453+ 7734             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 453+ 7734 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 453+ 7737             >
 453+ 7737             >
 453+ 7737             >                endif           ; ok        // for other definitions it "points" the correct handler
 453+ 7737             >                // Use of "; ok" to suppress "warning[fwdref]"
 453+ 7737             >
 453+ 7737             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 454+ 7737 1A 77 FB 68                  dw      DIVMOD, DROP            // /mod drop
 455+ 773B 4B 68                        dw      EXIT                    // ;
 456+ 773D
 457+ 773D              //  ______________________________________________________________________
 458+ 773D              //
 459+ 773D              // */mod        n1 n2 n3 -- n4 n5
 460+ 773D              // leaves the quotient n5 and the remainder n4 of the operation
 461+ 773D              // (n1 * n2) / n3. The intermediate passage through a double number
 462+ 773D              // avoids loss of precision
 463+ 773D                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 463+ 773D             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 463+ 773D             >
 463+ 773D             >Dict_Ptr        defl    $
 463+ 773D             >
 463+ 773D             >//              ______________________________________________________________________
 463+ 773D             >//              Heap part
 463+ 773D             >
 463+ 773D             >
 463+ 773D             >                org     (Heap_Ptr & $1FFF) + $E000
 463+ E9ED             >
 463+ E9ED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 463+ E9ED             >Latest_Definition defl  Heap_Ptr
 463+ E9ED             >
 463+ E9ED             >                // dummy db directives used to calculate length of namec
 463+ E9ED 2A 2F 4D 4F >                db      "*/MOD"
 463+ E9F1 44          >
 463+ E9F2             >len_NFA         defl    $ - temp_NFA
 463+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 463+ E9ED             >
 463+ E9ED 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 463+ E9EE 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 463+ E9F2 44          >
 463+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 463+ E9F2 C4          >                db      {b $} | END_BIT     // msb as name end
 463+ E9F3             >
 463+ E9F3 E5 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 463+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 463+ E9F5             >
 463+ E9F5             >mirror_Ptr      defl    $
 463+ E9F5             >
 463+ E9F5 3F 77       >                dw      Dict_Ptr + 2        // xt
 463+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 463+ E9F7             >
 463+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 463+ E9F7             >
 463+ E9F7             >//              ______________________________________________________________________
 463+ E9F7             >//              Dictionary part
 463+ E9F7             >
 463+ E9F7             >                org     Dict_Ptr
 463+ 773D             >
 463+ 773D F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 463+ 773F             >
 463+ 773F             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 463+ 773F CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 463+ 7742             >
 463+ 7742             >
 463+ 7742             >                endif           ; ok        // for other definitions it "points" the correct handler
 463+ 7742             >                // Use of "; ok" to suppress "warning[fwdref]"
 463+ 7742             >
 463+ 7742             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 464+ 7742 55 68 86 76                  dw      TO_R, MMUL              // >r  m*
 465+ 7746 60 68 FB 76                  dw      R_TO, MDIVM             // r>  m/mod
 466+ 774A 4B 68                        dw      EXIT                    // ;
 467+ 774C
 468+ 774C              //  ______________________________________________________________________
 469+ 774C              //
 470+ 774C              // */          n1 n2 n3 -- n4
 471+ 774C              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 472+ 774C                              Colon_Def MUL_DIV, "*/", is_normal
 472+ 774C             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 472+ 774C             >
 472+ 774C             >Dict_Ptr        defl    $
 472+ 774C             >
 472+ 774C             >//              ______________________________________________________________________
 472+ 774C             >//              Heap part
 472+ 774C             >
 472+ 774C             >
 472+ 774C             >                org     (Heap_Ptr & $1FFF) + $E000
 472+ E9F7             >
 472+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 472+ E9F7             >Latest_Definition defl  Heap_Ptr
 472+ E9F7             >
 472+ E9F7             >                // dummy db directives used to calculate length of namec
 472+ E9F7 2A 2F       >                db      "*/"
 472+ E9F9             >len_NFA         defl    $ - temp_NFA
 472+ E9F9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 472+ E9F7             >
 472+ E9F7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 472+ E9F8 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 472+ E9FA             >                org     $-1                 // alter last byte of Name just above to set
 472+ E9F9 AF          >                db      {b $} | END_BIT     // msb as name end
 472+ E9FA             >
 472+ E9FA ED 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 472+ E9FC             >Prev_Ptr        defl    Heap_Ptr
 472+ E9FC             >
 472+ E9FC             >mirror_Ptr      defl    $
 472+ E9FC             >
 472+ E9FC 4E 77       >                dw      Dict_Ptr + 2        // xt
 472+ E9FE             >Heap_Ptr        defl    $ - $E000           // save current HP
 472+ E9FE             >
 472+ E9FE             >Current_HP      defl  $ - $E000             // used to set HP once!
 472+ E9FE             >
 472+ E9FE             >//              ______________________________________________________________________
 472+ E9FE             >//              Dictionary part
 472+ E9FE             >
 472+ E9FE             >                org     Dict_Ptr
 472+ 774C             >
 472+ 774C FC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 472+ 774E             >
 472+ 774E             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 472+ 774E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 472+ 7751             >
 472+ 7751             >
 472+ 7751             >                endif           ; ok        // for other definitions it "points" the correct handler
 472+ 7751             >                // Use of "; ok" to suppress "warning[fwdref]"
 472+ 7751             >
 472+ 7751             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 473+ 7751 3F 77                        dw     MUL_DIV_MOD              // */mod
 474+ 7753 00 69                        dw     NIP                      // nip
 475+ 7755 4B 68                        dw     EXIT                     // ;
 476+ 7757
 477+ 7757
 478+ 7757              //  ______________________________________________________________________
 479+ 7757              //
 480+ 7757              // m/mod        ud1 u2 -- u3 ud4
 481+ 7757              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 482+ 7757              // All terms are unsigned.
 483+ 7757              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 484+ 7757              //              dw      TO_R                    // >r           ( ud1 )
 485+ 7757              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 486+ 7757              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 487+ 7757              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 488+ 7757              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 489+ 7757              //              dw      EXIT                    // ;
 490+ 7757
 491+ 7757              //  ______________________________________________________________________
 492+ 7757              //
 493+ 7757              // (line)       n1 n2 -- a b
 494+ 7757              // sends the line n1 of block n2 to the disk buffer.
 495+ 7757              // it returns the address a and ca counter b = C/L meaning a whole line.
 496+ 7757                              Colon_Def CLINE, "(LINE)", is_normal
 496+ 7757             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 496+ 7757             >
 496+ 7757             >Dict_Ptr        defl    $
 496+ 7757             >
 496+ 7757             >//              ______________________________________________________________________
 496+ 7757             >//              Heap part
 496+ 7757             >
 496+ 7757             >
 496+ 7757             >                org     (Heap_Ptr & $1FFF) + $E000
 496+ E9FE             >
 496+ E9FE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ E9FE             >Latest_Definition defl  Heap_Ptr
 496+ E9FE             >
 496+ E9FE             >                // dummy db directives used to calculate length of namec
 496+ E9FE 28 4C 49 4E >                db      "(LINE)"
 496+ EA02 45 29       >
 496+ EA04             >len_NFA         defl    $ - temp_NFA
 496+ EA04             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ E9FE             >
 496+ E9FE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ E9FF 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 496+ EA03 45 29       >
 496+ EA05             >                org     $-1                 // alter last byte of Name just above to set
 496+ EA04 A9          >                db      {b $} | END_BIT     // msb as name end
 496+ EA05             >
 496+ EA05 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 496+ EA07             >Prev_Ptr        defl    Heap_Ptr
 496+ EA07             >
 496+ EA07             >mirror_Ptr      defl    $
 496+ EA07             >
 496+ EA07 59 77       >                dw      Dict_Ptr + 2        // xt
 496+ EA09             >Heap_Ptr        defl    $ - $E000           // save current HP
 496+ EA09             >
 496+ EA09             >Current_HP      defl  $ - $E000             // used to set HP once!
 496+ EA09             >
 496+ EA09             >//              ______________________________________________________________________
 496+ EA09             >//              Dictionary part
 496+ EA09             >
 496+ EA09             >                org     Dict_Ptr
 496+ 7757             >
 496+ 7757 07 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 496+ 7759             >
 496+ 7759             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 7759 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 496+ 775C             >
 496+ 775C             >
 496+ 775C             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 775C             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 775C             >
 496+ 775C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 775C 55 68                        dw      TO_R                    // >r
 498+ 775E A0 6A                        dw      CL                      // c/l
 499+ 7760 A7 6A 3F 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 500+ 7764 60 68                        dw      R_TO                    // r>
 501+ 7766 AE 6A 0F 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 501+ 776A 98 68
 502+ 776C 6C 79                        dw      BLOCK                   // block   ( forward )
 503+ 776E 98 68                        dw      PLUS                    // +
 504+ 7770 A0 6A                        dw      CL                      // c/l
 505+ 7772 4B 68                        dw      EXIT                    // ;
 506+ 7774
 507+ 7774              //  ______________________________________________________________________
 508+ 7774              //
 509+ 7774              // .line        n1 n2 --
 510+ 7774              // Sends to output line  n1  of screen n2.
 511+ 7774                              Colon_Def DOT_LINE, ".LINE", is_normal
 511+ 7774             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 511+ 7774             >
 511+ 7774             >Dict_Ptr        defl    $
 511+ 7774             >
 511+ 7774             >//              ______________________________________________________________________
 511+ 7774             >//              Heap part
 511+ 7774             >
 511+ 7774             >
 511+ 7774             >                org     (Heap_Ptr & $1FFF) + $E000
 511+ EA09             >
 511+ EA09             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 511+ EA09             >Latest_Definition defl  Heap_Ptr
 511+ EA09             >
 511+ EA09             >                // dummy db directives used to calculate length of namec
 511+ EA09 2E 4C 49 4E >                db      ".LINE"
 511+ EA0D 45          >
 511+ EA0E             >len_NFA         defl    $ - temp_NFA
 511+ EA0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 511+ EA09             >
 511+ EA09 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 511+ EA0A 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 511+ EA0E 45          >
 511+ EA0F             >                org     $-1                 // alter last byte of Name just above to set
 511+ EA0E C5          >                db      {b $} | END_BIT     // msb as name end
 511+ EA0F             >
 511+ EA0F FE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 511+ EA11             >Prev_Ptr        defl    Heap_Ptr
 511+ EA11             >
 511+ EA11             >mirror_Ptr      defl    $
 511+ EA11             >
 511+ EA11 76 77       >                dw      Dict_Ptr + 2        // xt
 511+ EA13             >Heap_Ptr        defl    $ - $E000           // save current HP
 511+ EA13             >
 511+ EA13             >Current_HP      defl  $ - $E000             // used to set HP once!
 511+ EA13             >
 511+ EA13             >//              ______________________________________________________________________
 511+ EA13             >//              Dictionary part
 511+ EA13             >
 511+ EA13             >                org     Dict_Ptr
 511+ 7774             >
 511+ 7774 11 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 511+ 7776             >
 511+ 7776             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 511+ 7776 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 511+ 7779             >
 511+ 7779             >
 511+ 7779             >                endif           ; ok        // for other definitions it "points" the correct handler
 511+ 7779             >                // Use of "; ok" to suppress "warning[fwdref]"
 511+ 7779             >
 511+ 7779             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 512+ 7779 59 77 74 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 512+ 777D 5D 6F
 513+ 777F 4B 68                        dw      EXIT                    // ;
 514+ 7781
 515+ 7781              //  ______________________________________________________________________
 516+ 7781              //
 517+ 7781              // message       n1 n2 --
 518+ 7781              // prints error message to current channel.
 519+ 7781              // if WARNING is 0, prints "MSG#n".
 520+ 7781              // if WARNING is 1, prints line n of screen 4.
 521+ 7781              // if WARNING is -1, see ERROR
 522+ 7781              // value can be negative or beyond block 4.
 523+ 7781                              Colon_Def MESSAGE, "MESSAGE", is_normal
 523+ 7781             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 523+ 7781             >
 523+ 7781             >Dict_Ptr        defl    $
 523+ 7781             >
 523+ 7781             >//              ______________________________________________________________________
 523+ 7781             >//              Heap part
 523+ 7781             >
 523+ 7781             >
 523+ 7781             >                org     (Heap_Ptr & $1FFF) + $E000
 523+ EA13             >
 523+ EA13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 523+ EA13             >Latest_Definition defl  Heap_Ptr
 523+ EA13             >
 523+ EA13             >                // dummy db directives used to calculate length of namec
 523+ EA13 4D 45 53 53 >                db      "MESSAGE"
 523+ EA17 41 47 45    >
 523+ EA1A             >len_NFA         defl    $ - temp_NFA
 523+ EA1A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 523+ EA13             >
 523+ EA13 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 523+ EA14 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 523+ EA18 41 47 45    >
 523+ EA1B             >                org     $-1                 // alter last byte of Name just above to set
 523+ EA1A C5          >                db      {b $} | END_BIT     // msb as name end
 523+ EA1B             >
 523+ EA1B 09 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 523+ EA1D             >Prev_Ptr        defl    Heap_Ptr
 523+ EA1D             >
 523+ EA1D             >mirror_Ptr      defl    $
 523+ EA1D             >
 523+ EA1D 83 77       >                dw      Dict_Ptr + 2        // xt
 523+ EA1F             >Heap_Ptr        defl    $ - $E000           // save current HP
 523+ EA1F             >
 523+ EA1F             >Current_HP      defl  $ - $E000             // used to set HP once!
 523+ EA1F             >
 523+ EA1F             >//              ______________________________________________________________________
 523+ EA1F             >//              Dictionary part
 523+ EA1F             >
 523+ EA1F             >                org     Dict_Ptr
 523+ 7781             >
 523+ 7781 1D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 523+ 7783             >
 523+ 7783             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 523+ 7783 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 523+ 7786             >
 523+ 7786             >
 523+ 7786             >                endif           ; ok        // for other definitions it "points" the correct handler
 523+ 7786             >                // Use of "; ok" to suppress "warning[fwdref]"
 523+ 7786             >
 523+ 7786             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 524+ 7786 E7 6A 80 69                  dw      WARNING, FETCH          // warning @
 525+ 778A                                                              // if
 526+ 778A F3 63                        dw      ZBRANCH
 527+ 778C 12 00                        dw      Message_Else - $
 528+ 778E A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 528+ 7792 98 68
 529+ 7794 84 6A                        dw          TWO                 //      2
 530+ 7796 76 77                        dw          DOT_LINE            //      .line
 531+ 7798 64 6C                        dw          SPACE               //      space
 532+ 779A                                                              // else
 533+ 779A
 534+ 779A EF 63                        dw      BRANCH
 535+ 779C 0B 00                        dw      Message_ENdif - $
 536+ 779E              Message_Else:
 537+ 779E FA 70                        dw          C_DOT_QUOTE         //      .( msg#)
 538+ 77A0 04 6D 73 67                  db          4, "msg#"
 538+ 77A4 23
 539+ 77A5 9A 7E                        dw          DOT                 //      .  ( forward )
 540+ 77A7              Message_ENdif:                                  // endif
 541+ 77A7 4B 68                        dw      EXIT                    // ;
 542+ 77A9
 543+ 77A9
 544+ 77A9              //  ______________________________________________________________________
 545+ 77A9              //
 546+ 77A9              // device
 547+ 77A9                              Variable_Def DEVICE,   "DEVICE",   2
 547+ 77A9             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 547+ 77A9             >
 547+ 77A9             >Dict_Ptr        defl    $
 547+ 77A9             >
 547+ 77A9             >//              ______________________________________________________________________
 547+ 77A9             >//              Heap part
 547+ 77A9             >
 547+ 77A9             >
 547+ 77A9             >                org     (Heap_Ptr & $1FFF) + $E000
 547+ EA1F             >
 547+ EA1F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ EA1F             >Latest_Definition defl  Heap_Ptr
 547+ EA1F             >
 547+ EA1F             >                // dummy db directives used to calculate length of namec
 547+ EA1F 44 45 56 49 >                db      "DEVICE"
 547+ EA23 43 45       >
 547+ EA25             >len_NFA         defl    $ - temp_NFA
 547+ EA25             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ EA1F             >
 547+ EA1F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ EA20 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 547+ EA24 43 45       >
 547+ EA26             >                org     $-1                 // alter last byte of Name just above to set
 547+ EA25 C5          >                db      {b $} | END_BIT     // msb as name end
 547+ EA26             >
 547+ EA26 13 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 547+ EA28             >Prev_Ptr        defl    Heap_Ptr
 547+ EA28             >
 547+ EA28             >mirror_Ptr      defl    $
 547+ EA28             >
 547+ EA28 AB 77       >                dw      Dict_Ptr + 2        // xt
 547+ EA2A             >Heap_Ptr        defl    $ - $E000           // save current HP
 547+ EA2A             >
 547+ EA2A             >Current_HP      defl  $ - $E000             // used to set HP once!
 547+ EA2A             >
 547+ EA2A             >//              ______________________________________________________________________
 547+ EA2A             >//              Dictionary part
 547+ EA2A             >
 547+ EA2A             >                org     Dict_Ptr
 547+ 77A9             >
 547+ 77A9 28 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 547+ 77AB             >
 547+ 77AB             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 77AB CD 5D 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 547+ 77AE             >
 547+ 77AE             >
 547+ 77AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 77AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 77AE             >
 547+ 77AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 547+ 77AE 02 00       >                dw      2
 548+ 77B0
 549+ 77B0              //  ______________________________________________________________________
 550+ 77B0
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L2.asm
 142  77B0                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
   1+ 77B0              //  ______________________________________________________________________
   2+ 77B0              //
   3+ 77B0              //  next-opt.asm
   4+ 77B0              //
   5+ 77B0              //  ZX Spectrum Next - peculiar definitions
   6+ 77B0              //  ______________________________________________________________________
   7+ 77B0
   8+ 77B0              //  ______________________________________________________________________
   9+ 77B0              //
  10+ 77B0              // reg@         n -- b
  11+ 77B0              // read Next REGister n giving byte b
  12+ 77B0              //
  13+ 77B0              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77B0              //              dw      LIT, $243B
  15+ 77B0              //              dw      PSTORE
  16+ 77B0              //              dw      LIT, $253B
  17+ 77B0              //              dw      PFETCH
  18+ 77B0              //              dw      EXIT
  19+ 77B0                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77B0             >
  19+ 77B0             >Dict_Ptr        defl    $
  19+ 77B0             >
  19+ 77B0             >//              ______________________________________________________________________
  19+ 77B0             >//              Heap part
  19+ 77B0             >
  19+ 77B0             >
  19+ 77B0             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA2A             >
  19+ EA2A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA2A             >Latest_Definition defl  Heap_Ptr
  19+ EA2A             >
  19+ EA2A             >                // dummy db directives used to calculate length of namec
  19+ EA2A 52 45 47 40 >                db      "REG@"
  19+ EA2E             >len_NFA         defl    $ - temp_NFA
  19+ EA2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA2A             >
  19+ EA2A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA2B 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA2F             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA2E C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA2F             >
  19+ EA2F 1F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA31             >Prev_Ptr        defl    Heap_Ptr
  19+ EA31             >
  19+ EA31             >mirror_Ptr      defl    $
  19+ EA31             >
  19+ EA31 B2 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA33             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA33             >
  19+ EA33             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA33             >
  19+ EA33             >//              ______________________________________________________________________
  19+ EA33             >//              Dictionary part
  19+ EA33             >
  19+ EA33             >                org     Dict_Ptr
  19+ 77B0             >
  19+ 77B0 31 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77B2             >
  19+ 77B2             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77B2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77B2 ~           >
  19+ 77B2 ~           >
  19+ 77B2             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77B2             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77B2             >
  19+ 77B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77B2 D9                           exx
  21+ 77B3 01 3B 24                     ld      bc, $243B
  22+ 77B6 E1                           pop     hl
  23+ 77B7 ED 69                        out     (c), l
  24+ 77B9 04                           inc     b
  25+ 77BA ED 68                        in      l, (c)
  26+ 77BC E5                           push    hl
  27+ 77BD D9                           exx
  28+ 77BE                              next
  28+ 77BE DD E9       >                jp      (ix)
  29+ 77C0
  30+ 77C0
  31+ 77C0              //  ______________________________________________________________________
  32+ 77C0              //
  33+ 77C0              // reg!         b n --
  34+ 77C0              // write value b to Next REGister n
  35+ 77C0              //
  36+ 77C0              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77C0              //              dw      LIT, $243B
  38+ 77C0              //              dw      PSTORE
  39+ 77C0              //              dw      LIT, $253B
  40+ 77C0              //              dw      PSTORE
  41+ 77C0              //              dw      EXIT
  42+ 77C0                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77C0             >
  42+ 77C0             >Dict_Ptr        defl    $
  42+ 77C0             >
  42+ 77C0             >//              ______________________________________________________________________
  42+ 77C0             >//              Heap part
  42+ 77C0             >
  42+ 77C0             >
  42+ 77C0             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA33             >
  42+ EA33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA33             >Latest_Definition defl  Heap_Ptr
  42+ EA33             >
  42+ EA33             >                // dummy db directives used to calculate length of namec
  42+ EA33 52 45 47 21 >                db      "REG!"
  42+ EA37             >len_NFA         defl    $ - temp_NFA
  42+ EA37             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA33             >
  42+ EA33 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA34 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA38             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA37 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA38             >
  42+ EA38 2A 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA3A             >Prev_Ptr        defl    Heap_Ptr
  42+ EA3A             >
  42+ EA3A             >mirror_Ptr      defl    $
  42+ EA3A             >
  42+ EA3A C2 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA3C             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA3C             >
  42+ EA3C             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA3C             >
  42+ EA3C             >//              ______________________________________________________________________
  42+ EA3C             >//              Dictionary part
  42+ EA3C             >
  42+ EA3C             >                org     Dict_Ptr
  42+ 77C0             >
  42+ 77C0 3A 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77C2             >
  42+ 77C2             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77C2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77C2 ~           >
  42+ 77C2 ~           >
  42+ 77C2             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77C2             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77C2             >
  42+ 77C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77C2 D9                           exx
  44+ 77C3 01 3B 24                     ld      bc, $243B
  45+ 77C6 E1                           pop     hl
  46+ 77C7 ED 69                        out     (c), l
  47+ 77C9 04                           inc     b
  48+ 77CA E1                           pop     hl
  49+ 77CB ED 69                        out     (c), l
  50+ 77CD D9                           exx
  51+ 77CE                              next
  51+ 77CE DD E9       >                jp      (ix)
  52+ 77D0
  53+ 77D0
  54+ 77D0              //  ______________________________________________________________________
  55+ 77D0              //
  56+ 77D0              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77D0              // NextZXOS call wrapper.
  58+ 77D0              //  n1 = hl register parameter value
  59+ 77D0              //  n2 = de register parameter value
  60+ 77D0              //  n3 = bc register parameter value
  61+ 77D0              //  n4 =  a register parameter value
  62+ 77D0              //   a = routine address in ROM 3
  63+ 77D0              // ----
  64+ 77D0              //  n5 = hl returned value
  65+ 77D0              //  n6 = de returned value
  66+ 77D0              //  n7 = bc returned value
  67+ 77D0              //  n8 =  a returned value
  68+ 77D0              //   f
  69+ 77D0                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77D0             >
  69+ 77D0             >Dict_Ptr        defl    $
  69+ 77D0             >
  69+ 77D0             >//              ______________________________________________________________________
  69+ 77D0             >//              Heap part
  69+ 77D0             >
  69+ 77D0             >
  69+ 77D0             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA3C             >
  69+ EA3C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA3C             >Latest_Definition defl  Heap_Ptr
  69+ EA3C             >
  69+ EA3C             >                // dummy db directives used to calculate length of namec
  69+ EA3C 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA40 44 4F 53    >
  69+ EA43             >len_NFA         defl    $ - temp_NFA
  69+ EA43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA3C             >
  69+ EA3C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA3D 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA41 44 4F 53    >
  69+ EA44             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA43 D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA44             >
  69+ EA44 33 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA46             >Prev_Ptr        defl    Heap_Ptr
  69+ EA46             >
  69+ EA46             >mirror_Ptr      defl    $
  69+ EA46             >
  69+ EA46 D2 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA48             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA48             >
  69+ EA48             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA48             >
  69+ EA48             >//              ______________________________________________________________________
  69+ EA48             >//              Dictionary part
  69+ EA48             >
  69+ EA48             >                org     Dict_Ptr
  69+ 77D0             >
  69+ 77D0 46 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77D2             >
  69+ 77D2             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77D2 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77D2 ~           >
  69+ 77D2 ~           >
  69+ 77D2             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77D2             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77D2             >
  69+ 77D2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77D2 D9                            exx
  71+ 77D3 E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77D4 D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77D5 7B                            ld      a, e
  74+ 77D6 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77D7 D1                            pop     de                  // de' argument              //  n1
  76+ 77D8 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77D9 D9                           exx
  78+ 77DA E1                           pop     hl                  // entry address a
  79+ 77DB DD E5                        push    ix
  80+ 77DD D5                           push    de
  81+ 77DE C5                           push    bc
  82+ 77DF EB                           ex      de, hl              // de is entry address
  83+ 77E0              //              ld      (SP_Saved), sp
  84+ 77E0              //              ld      sp, Cold_origin - 5
  85+ 77E0
  86+ 77E0 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 77E2 F3                           di
  88+ 77E3 CF                           rst     08
  89+ 77E4 94                           db      $94
  90+ 77E5 FB                           ei
  91+ 77E6
  92+ 77E6
  93+ 77E6
  94+ 77E6              //              ld      sp, (SP_Saved)
  95+ 77E6              //              push    ix
  96+ 77E6              //              pop     hl
  97+ 77E6              //              ld      (IX_Echo), hl
  98+ 77E6 DD 22 98 63                  ld      (IX_Echo), ix
  99+ 77EA
 100+ 77EA D9                           exx
 101+ 77EB C1                           pop     bc
 102+ 77EC D1                           pop     de
 103+ 77ED DD E1                        pop     ix
 104+ 77EF D9                            exx
 105+ 77F0 E5                            push    hl
 106+ 77F1 D5                            push    de
 107+ 77F2 C5                            push    bc
 108+ 77F3 26 00                         ld      h, 0
 109+ 77F5 6F                            ld      l, a
 110+ 77F6 E5                            push    hl
 111+ 77F7 D9                           exx
 112+ 77F8 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 77FA 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 77FB E5                           push    hl
 115+ 77FC                              next
 115+ 77FC DD E9       >                jp      (ix)
 116+ 77FE
 117+ 77FE              //  ______________________________________________________________________
 118+ 77FE              //
 119+ 77FE              // blk-fh
 120+ 77FE
 121+ 77FE                              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 77FE             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 121+ 77FE             >
 121+ 77FE             >Dict_Ptr        defl    $
 121+ 77FE             >
 121+ 77FE             >//              ______________________________________________________________________
 121+ 77FE             >//              Heap part
 121+ 77FE             >
 121+ 77FE             >
 121+ 77FE             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ EA48             >
 121+ EA48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ EA48             >Latest_Definition defl  Heap_Ptr
 121+ EA48             >
 121+ EA48             >                // dummy db directives used to calculate length of namec
 121+ EA48 42 4C 4B 2D >                db      "BLK-FH"
 121+ EA4C 46 48       >
 121+ EA4E             >len_NFA         defl    $ - temp_NFA
 121+ EA4E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ EA48             >
 121+ EA48 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ EA49 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 121+ EA4D 46 48       >
 121+ EA4F             >                org     $-1                 // alter last byte of Name just above to set
 121+ EA4E C8          >                db      {b $} | END_BIT     // msb as name end
 121+ EA4F             >
 121+ EA4F 3C 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ EA51             >Prev_Ptr        defl    Heap_Ptr
 121+ EA51             >
 121+ EA51             >mirror_Ptr      defl    $
 121+ EA51             >
 121+ EA51 00 78       >                dw      Dict_Ptr + 2        // xt
 121+ EA53             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ EA53             >
 121+ EA53             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ EA53             >
 121+ EA53             >//              ______________________________________________________________________
 121+ EA53             >//              Dictionary part
 121+ EA53             >
 121+ EA53             >                org     Dict_Ptr
 121+ 77FE             >
 121+ 77FE 51 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 7800             >
 121+ 7800             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 7800 CD 5D 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 121+ 7803             >
 121+ 7803             >
 121+ 7803             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 7803             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 7803             >
 121+ 7803             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 7803 01 00       >                dw      1
 122+ 7805
 123+ 7805                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 7805             >
 123+ 7805             >Dict_Ptr        defl    $
 123+ 7805             >
 123+ 7805             >//              ______________________________________________________________________
 123+ 7805             >//              Heap part
 123+ 7805             >
 123+ 7805             >
 123+ 7805             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ EA53             >
 123+ EA53             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ EA53             >Latest_Definition defl  Heap_Ptr
 123+ EA53             >
 123+ EA53             >                // dummy db directives used to calculate length of namec
 123+ EA53 42 4C 4B 2D >                db      "BLK-FNAME"
 123+ EA57 46 4E 41 4D >
 123+ EA5B 45          >
 123+ EA5C             >len_NFA         defl    $ - temp_NFA
 123+ EA5C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ EA53             >
 123+ EA53 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ EA54 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 123+ EA58 46 4E 41 4D >
 123+ EA5C 45          >
 123+ EA5D             >                org     $-1                 // alter last byte of Name just above to set
 123+ EA5C C5          >                db      {b $} | END_BIT     // msb as name end
 123+ EA5D             >
 123+ EA5D 48 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ EA5F             >Prev_Ptr        defl    Heap_Ptr
 123+ EA5F             >
 123+ EA5F             >mirror_Ptr      defl    $
 123+ EA5F             >
 123+ EA5F 07 78       >                dw      Dict_Ptr + 2        // xt
 123+ EA61             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ EA61             >
 123+ EA61             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ EA61             >
 123+ EA61             >//              ______________________________________________________________________
 123+ EA61             >//              Dictionary part
 123+ EA61             >
 123+ EA61             >                org     Dict_Ptr
 123+ 7805             >
 123+ 7805 5F 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 7807             >
 123+ 7807             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 7807 CD FA 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 123+ 780A             >
 123+ 780A             >
 123+ 780A             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 780A             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 780A             >
 123+ 780A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 780A
 125+ 780A 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 125+ 780E 6F 63 6B 73
 125+ 7812 2D 36 34 2E
 125+ 7816 62 69 6E 00
 126+ 781A 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 127+ 7832
 128+ 7832              //  ______________________________________________________________________
 129+ 7832              //
 130+ 7832              // blk-seek     n --
 131+ 7832              // seek block n  within blocks!.bin  file
 132+ 7832                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 7832             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 7832             >
 132+ 7832             >Dict_Ptr        defl    $
 132+ 7832             >
 132+ 7832             >//              ______________________________________________________________________
 132+ 7832             >//              Heap part
 132+ 7832             >
 132+ 7832             >
 132+ 7832             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA61             >
 132+ EA61             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA61             >Latest_Definition defl  Heap_Ptr
 132+ EA61             >
 132+ EA61             >                // dummy db directives used to calculate length of namec
 132+ EA61 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA65 53 45 45 4B >
 132+ EA69             >len_NFA         defl    $ - temp_NFA
 132+ EA69             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA61             >
 132+ EA61 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA62 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA66 53 45 45 4B >
 132+ EA6A             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA69 CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA6A             >
 132+ EA6A 53 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA6C             >Prev_Ptr        defl    Heap_Ptr
 132+ EA6C             >
 132+ EA6C             >mirror_Ptr      defl    $
 132+ EA6C             >
 132+ EA6C 34 78       >                dw      Dict_Ptr + 2        // xt
 132+ EA6E             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA6E             >
 132+ EA6E             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA6E             >
 132+ EA6E             >//              ______________________________________________________________________
 132+ EA6E             >//              Dictionary part
 132+ EA6E             >
 132+ EA6E             >                org     Dict_Ptr
 132+ 7832             >
 132+ 7832 6C 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 7834             >
 132+ 7834             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 7834 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 7837             >
 132+ 7837             >
 132+ 7837             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7837             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7837             >
 132+ 7837             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7837 A7 6A 86 76                  dw  BBUF, MMUL
 134+ 783B 00 78 80 69                  dw  BLK_FH, FETCH
 135+ 783F D6 66                        dw  F_SEEK
 136+ 7841 A3 63 2D 00                  dw  LIT, $2D, QERROR
 136+ 7845 CF 6D
 137+ 7847 4B 68                        dw  EXIT
 138+ 7849
 139+ 7849              //  ______________________________________________________________________
 140+ 7849              //
 141+ 7849              // blk-read     n --
 142+ 7849              // seek block n  within blocks!.bin  file
 143+ 7849                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 7849             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 7849             >
 143+ 7849             >Dict_Ptr        defl    $
 143+ 7849             >
 143+ 7849             >//              ______________________________________________________________________
 143+ 7849             >//              Heap part
 143+ 7849             >
 143+ 7849             >
 143+ 7849             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA6E             >
 143+ EA6E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA6E             >Latest_Definition defl  Heap_Ptr
 143+ EA6E             >
 143+ EA6E             >                // dummy db directives used to calculate length of namec
 143+ EA6E 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA72 52 45 41 44 >
 143+ EA76             >len_NFA         defl    $ - temp_NFA
 143+ EA76             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA6E             >
 143+ EA6E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA6F 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA73 52 45 41 44 >
 143+ EA77             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA76 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA77             >
 143+ EA77 61 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA79             >Prev_Ptr        defl    Heap_Ptr
 143+ EA79             >
 143+ EA79             >mirror_Ptr      defl    $
 143+ EA79             >
 143+ EA79 4B 78       >                dw      Dict_Ptr + 2        // xt
 143+ EA7B             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA7B             >
 143+ EA7B             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA7B             >
 143+ EA7B             >//              ______________________________________________________________________
 143+ EA7B             >//              Dictionary part
 143+ EA7B             >
 143+ EA7B             >                org     Dict_Ptr
 143+ 7849             >
 143+ 7849 79 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 784B             >
 143+ 784B             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 784B CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 784E             >
 143+ 784E             >
 143+ 784E             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 784E             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 784E             >
 143+ 784E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 784E 34 78                        dw  BLK_SEEK
 145+ 7850 A7 6A                        dw  BBUF
 146+ 7852 00 78 80 69                  dw  BLK_FH, FETCH
 147+ 7856 28 67                        dw  F_READ
 148+ 7858 A3 63 2E 00                  dw  LIT, $2E, QERROR
 148+ 785C CF 6D
 149+ 785E FB 68                        dw  DROP
 150+ 7860 4B 68                        dw  EXIT
 151+ 7862
 152+ 7862              //  ______________________________________________________________________
 153+ 7862              //
 154+ 7862              // blk-write     n --
 155+ 7862              // seek block n  within blocks!.bin  file
 156+ 7862                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 7862             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 7862             >
 156+ 7862             >Dict_Ptr        defl    $
 156+ 7862             >
 156+ 7862             >//              ______________________________________________________________________
 156+ 7862             >//              Heap part
 156+ 7862             >
 156+ 7862             >
 156+ 7862             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA7B             >
 156+ EA7B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA7B             >Latest_Definition defl  Heap_Ptr
 156+ EA7B             >
 156+ EA7B             >                // dummy db directives used to calculate length of namec
 156+ EA7B 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA7F 57 52 49 54 >
 156+ EA83 45          >
 156+ EA84             >len_NFA         defl    $ - temp_NFA
 156+ EA84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA7B             >
 156+ EA7B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA7C 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA80 57 52 49 54 >
 156+ EA84 45          >
 156+ EA85             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA84 C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA85             >
 156+ EA85 6E 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA87             >Prev_Ptr        defl    Heap_Ptr
 156+ EA87             >
 156+ EA87             >mirror_Ptr      defl    $
 156+ EA87             >
 156+ EA87 64 78       >                dw      Dict_Ptr + 2        // xt
 156+ EA89             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA89             >
 156+ EA89             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA89             >
 156+ EA89             >//              ______________________________________________________________________
 156+ EA89             >//              Dictionary part
 156+ EA89             >
 156+ EA89             >                org     Dict_Ptr
 156+ 7862             >
 156+ 7862 87 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 7864             >
 156+ 7864             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 7864 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7867             >
 156+ 7867             >
 156+ 7867             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7867             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7867             >
 156+ 7867             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7867 34 78                        dw  BLK_SEEK
 158+ 7869 A7 6A                        dw  BBUF
 159+ 786B 00 78 80 69                  dw  BLK_FH, FETCH
 160+ 786F 45 67                        dw  F_WRITE
 161+ 7871 A3 63 2F 00                  dw  LIT, $2F, QERROR
 161+ 7875 CF 6D
 162+ 7877 FB 68                        dw  DROP
 163+ 7879 4B 68                        dw  EXIT
 164+ 787B
 165+ 787B              //  ______________________________________________________________________
 166+ 787B              //
 167+ 787B              // blk-init     n --
 168+ 787B              // seek block n  within blocks!.bin  file
 169+ 787B                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 787B             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 787B             >
 169+ 787B             >Dict_Ptr        defl    $
 169+ 787B             >
 169+ 787B             >//              ______________________________________________________________________
 169+ 787B             >//              Heap part
 169+ 787B             >
 169+ 787B             >
 169+ 787B             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA89             >
 169+ EA89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA89             >Latest_Definition defl  Heap_Ptr
 169+ EA89             >
 169+ EA89             >                // dummy db directives used to calculate length of namec
 169+ EA89 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA8D 49 4E 49 54 >
 169+ EA91             >len_NFA         defl    $ - temp_NFA
 169+ EA91             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA89             >
 169+ EA89 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA8A 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA8E 49 4E 49 54 >
 169+ EA92             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA91 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA92             >
 169+ EA92 7B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA94             >Prev_Ptr        defl    Heap_Ptr
 169+ EA94             >
 169+ EA94             >mirror_Ptr      defl    $
 169+ EA94             >
 169+ EA94 7D 78       >                dw      Dict_Ptr + 2        // xt
 169+ EA96             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EA96             >
 169+ EA96             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EA96             >
 169+ EA96             >//              ______________________________________________________________________
 169+ EA96             >//              Dictionary part
 169+ EA96             >
 169+ EA96             >                org     Dict_Ptr
 169+ 787B             >
 169+ 787B 94 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 787D             >
 169+ 787D             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 787D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 7880             >
 169+ 7880             >
 169+ 7880             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 7880             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 7880             >
 169+ 7880             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 7880 00 78 80 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 7884 F4 66 FB 68
 171+ 7888 07 78 B1 68                  dw  BLK_FNAME, ONE_PLUS
 172+ 788C 9B 6B 8B 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 7890 56 67
 173+ 7892 A3 63 2C 00                  dw  LIT, $2C, QERROR
 173+ 7896 CF 6D
 174+ 7898 00 78 8A 69                  dw  BLK_FH, STORE
 175+ 789C 4B 68                        dw  EXIT
 176+ 789E
 177+ 789E              //  ______________________________________________________________________
 178+ 789E              //
 179+ 789E              // #sec
 180+ 789E              // number of 512-Byte "sectors" available on thie sysstem.
 181+ 789E              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 182+ 789E
 183+ 789E                              Constant_Def NSEC , "#SEC", 32767
 183+ 789E             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 183+ 789E             >
 183+ 789E             >Dict_Ptr        defl    $
 183+ 789E             >
 183+ 789E             >//              ______________________________________________________________________
 183+ 789E             >//              Heap part
 183+ 789E             >
 183+ 789E             >
 183+ 789E             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ EA96             >
 183+ EA96             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ EA96             >Latest_Definition defl  Heap_Ptr
 183+ EA96             >
 183+ EA96             >                // dummy db directives used to calculate length of namec
 183+ EA96 23 53 45 43 >                db      "#SEC"
 183+ EA9A             >len_NFA         defl    $ - temp_NFA
 183+ EA9A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ EA96             >
 183+ EA96 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ EA97 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 183+ EA9B             >                org     $-1                 // alter last byte of Name just above to set
 183+ EA9A C3          >                db      {b $} | END_BIT     // msb as name end
 183+ EA9B             >
 183+ EA9B 89 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ EA9D             >Prev_Ptr        defl    Heap_Ptr
 183+ EA9D             >
 183+ EA9D             >mirror_Ptr      defl    $
 183+ EA9D             >
 183+ EA9D A0 78       >                dw      Dict_Ptr + 2        // xt
 183+ EA9F             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ EA9F             >
 183+ EA9F             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ EA9F             >
 183+ EA9F             >//              ______________________________________________________________________
 183+ EA9F             >//              Dictionary part
 183+ EA9F             >
 183+ EA9F             >                org     Dict_Ptr
 183+ 789E             >
 183+ 789E 9D 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 78A0             >
 183+ 78A0             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 78A0 CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 183+ 78A3             >
 183+ 78A3             >
 183+ 78A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 78A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 78A3             >
 183+ 78A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78A3 FF 7F       >                dw      32767
 184+ 78A5
 185+ 78A5              //  ______________________________________________________________________
 186+ 78A5
 187+ 78A5
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/next-opt1.asm
 143  78A5                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
   1+ 78A5              //  ______________________________________________________________________
   2+ 78A5              //
   3+ 78A5              //  L3.asm
   4+ 78A5              //
   5+ 78A5              //  Continuation of L2.asm
   6+ 78A5              //  I/O Block definitions
   7+ 78A5              //  ______________________________________________________________________
   8+ 78A5
   9+ 78A5
  10+ 78A5              //  ______________________________________________________________________
  11+ 78A5              //
  12+ 78A5              // r/w          a n f --
  13+ 78A5              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78A5                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78A5             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78A5             >
  14+ 78A5             >Dict_Ptr        defl    $
  14+ 78A5             >
  14+ 78A5             >//              ______________________________________________________________________
  14+ 78A5             >//              Heap part
  14+ 78A5             >
  14+ 78A5             >
  14+ 78A5             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EA9F             >
  14+ EA9F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EA9F             >Latest_Definition defl  Heap_Ptr
  14+ EA9F             >
  14+ EA9F             >                // dummy db directives used to calculate length of namec
  14+ EA9F 52 2F 57    >                db      "R/W"
  14+ EAA2             >len_NFA         defl    $ - temp_NFA
  14+ EAA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EA9F             >
  14+ EA9F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAA0 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAA3             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAA2 D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAA3             >
  14+ EAA3 96 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAA5             >Prev_Ptr        defl    Heap_Ptr
  14+ EAA5             >
  14+ EAA5             >mirror_Ptr      defl    $
  14+ EAA5             >
  14+ EAA5 A7 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAA7             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAA7             >
  14+ EAA7             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAA7             >
  14+ EAA7             >//              ______________________________________________________________________
  14+ EAA7             >//              Dictionary part
  14+ EAA7             >
  14+ EAA7             >                org     Dict_Ptr
  14+ 78A5             >
  14+ 78A5 A5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78A7             >
  14+ 78A7             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78A7 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78AA             >
  14+ 78AA             >
  14+ 78AA             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78AA             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78AA             >
  14+ 78AA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78AA 55 68                        dw      TO_R                    // >r
  16+ 78AC B8 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78AE 16 69 81 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78B2 F2 68 A0 78                  dw      OVER, NSEC              // over #sec
  19+ 78B6 B8 68 0C 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78BA 1A 68                        dw      OR_OP                   // or
  21+ 78BC A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78C0 CF 6D
  22+ 78C2 60 68                        dw      R_TO                    // r>
  23+ 78C4                                                              // if
  24+ 78C4 F3 63                        dw      ZBRANCH
  25+ 78C6 08 00                        dw      Read_Write_Else - $
  26+ 78C8 4B 78                        dw          BLK_READ            //      blk-read
  27+ 78CA EF 63                        dw      BRANCH
  28+ 78CC 04 00                        dw      Read_Write_Endif - $
  29+ 78CE              Read_Write_Else:                                // else
  30+ 78CE 64 78                        dw          BLK_WRITE           //      blk-write
  31+ 78D0              Read_Write_Endif:                               // endif
  32+ 78D0 4B 68                        dw      EXIT                    // ;
  33+ 78D2
  34+ 78D2
  35+ 78D2              //  ______________________________________________________________________
  36+ 78D2              //
  37+ 78D2              // +buf        a1 -- a2 f
  38+ 78D2              // advences to next buffer, cyclically rotating along them
  39+ 78D2                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78D2             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78D2             >
  39+ 78D2             >Dict_Ptr        defl    $
  39+ 78D2             >
  39+ 78D2             >//              ______________________________________________________________________
  39+ 78D2             >//              Heap part
  39+ 78D2             >
  39+ 78D2             >
  39+ 78D2             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAA7             >
  39+ EAA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAA7             >Latest_Definition defl  Heap_Ptr
  39+ EAA7             >
  39+ EAA7             >                // dummy db directives used to calculate length of namec
  39+ EAA7 2B 42 55 46 >                db      "+BUF"
  39+ EAAB             >len_NFA         defl    $ - temp_NFA
  39+ EAAB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAA7             >
  39+ EAA7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAA8 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAAC             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAAB C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAAC             >
  39+ EAAC 9F 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAAE             >Prev_Ptr        defl    Heap_Ptr
  39+ EAAE             >
  39+ EAAE             >mirror_Ptr      defl    $
  39+ EAAE             >
  39+ EAAE D4 78       >                dw      Dict_Ptr + 2        // xt
  39+ EAB0             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EAB0             >
  39+ EAB0             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EAB0             >
  39+ EAB0             >//              ______________________________________________________________________
  39+ EAB0             >//              Dictionary part
  39+ EAB0             >
  39+ EAB0             >                org     Dict_Ptr
  39+ 78D2             >
  39+ 78D2 AE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78D4             >
  39+ 78D4             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78D4 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78D7             >
  39+ 78D7             >
  39+ 78D7             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78D7             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78D7             >
  39+ 78D7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78D7 A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78DB 98 68
  41+ 78DD 16 69 05 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78E1 80 69
  42+ 78E3 E6 6B                        dw      EQUALS                  // =
  43+ 78E5                                                              // if
  44+ 78E5 F3 63                        dw      ZBRANCH
  45+ 78E7 08 00                        dw      PBuf_Endif - $
  46+ 78E9 FB 68                        dw          DROP                //      drop
  47+ 78EB FF 6A 80 69                  dw          FIRST, FETCH        //      first @
  48+ 78EF              PBuf_Endif:                                     // endif
  49+ 78EF 16 69 71 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78F3 80 69
  50+ 78F5 DA 6B                        dw      SUBTRACT                // -
  51+ 78F7 4B 68                        dw      EXIT                    // ;
  52+ 78F9
  53+ 78F9              //  ______________________________________________________________________
  54+ 78F9              //
  55+ 78F9              // update       --
  56+ 78F9              // mark the last used block to be written to disk
  57+ 78F9                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 78F9             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 78F9             >
  57+ 78F9             >Dict_Ptr        defl    $
  57+ 78F9             >
  57+ 78F9             >//              ______________________________________________________________________
  57+ 78F9             >//              Heap part
  57+ 78F9             >
  57+ 78F9             >
  57+ 78F9             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EAB0             >
  57+ EAB0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EAB0             >Latest_Definition defl  Heap_Ptr
  57+ EAB0             >
  57+ EAB0             >                // dummy db directives used to calculate length of namec
  57+ EAB0 55 50 44 41 >                db      "UPDATE"
  57+ EAB4 54 45       >
  57+ EAB6             >len_NFA         defl    $ - temp_NFA
  57+ EAB6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EAB0             >
  57+ EAB0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EAB1 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EAB5 54 45       >
  57+ EAB7             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAB6 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAB7             >
  57+ EAB7 A7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAB9             >Prev_Ptr        defl    Heap_Ptr
  57+ EAB9             >
  57+ EAB9             >mirror_Ptr      defl    $
  57+ EAB9             >
  57+ EAB9 FB 78       >                dw      Dict_Ptr + 2        // xt
  57+ EABB             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EABB             >
  57+ EABB             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EABB             >
  57+ EABB             >//              ______________________________________________________________________
  57+ EABB             >//              Dictionary part
  57+ EABB             >
  57+ EABB             >                org     Dict_Ptr
  57+ 78F9             >
  57+ 78F9 B9 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 78FB             >
  57+ 78FB             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 78FB CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 78FE             >
  57+ 78FE             >
  57+ 78FE             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 78FE             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 78FE             >
  57+ 78FE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 78FE 71 6B 80 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 7902 80 69
  59+ 7904 A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7908 1A 68
  60+ 790A 71 6B 80 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 790E 8A 69
  61+ 7910 4B 68                        dw      EXIT                    // ;
  62+ 7912
  63+ 7912
  64+ 7912              //  ______________________________________________________________________
  65+ 7912              //
  66+ 7912              // empty-buffers --
  67+ 7912                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 7912             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 7912             >
  67+ 7912             >Dict_Ptr        defl    $
  67+ 7912             >
  67+ 7912             >//              ______________________________________________________________________
  67+ 7912             >//              Heap part
  67+ 7912             >
  67+ 7912             >
  67+ 7912             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EABB             >
  67+ EABB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EABB             >Latest_Definition defl  Heap_Ptr
  67+ EABB             >
  67+ EABB             >                // dummy db directives used to calculate length of namec
  67+ EABB 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EABF 59 2D 42 55 >
  67+ EAC3 46 46 45 52 >
  67+ EAC7 53          >
  67+ EAC8             >len_NFA         defl    $ - temp_NFA
  67+ EAC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EABB             >
  67+ EABB 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EABC 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EAC0 59 2D 42 55 >
  67+ EAC4 46 46 45 52 >
  67+ EAC8 53          >
  67+ EAC9             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAC8 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAC9             >
  67+ EAC9 B0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EACB             >Prev_Ptr        defl    Heap_Ptr
  67+ EACB             >
  67+ EACB             >mirror_Ptr      defl    $
  67+ EACB             >
  67+ EACB 14 79       >                dw      Dict_Ptr + 2        // xt
  67+ EACD             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EACD             >
  67+ EACD             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EACD             >
  67+ EACD             >//              ______________________________________________________________________
  67+ EACD             >//              Dictionary part
  67+ EACD             >
  67+ EACD             >                org     Dict_Ptr
  67+ 7912             >
  67+ 7912 CB 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 7914             >
  67+ 7914             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 7914 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7917             >
  67+ 7917             >
  67+ 7917             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7917             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7917             >
  67+ 7917             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7917 FF 6A 80 69                  dw      FIRST, FETCH            // first @
  69+ 791B 05 6B 80 69                  dw      LIMIT, FETCH            // limit @
  70+ 791F F2 68 DA 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 7923 77 70
  71+ 7925 4B 68                        dw      EXIT                    // ;
  72+ 7927
  73+ 7927              //  ______________________________________________________________________
  74+ 7927              //
  75+ 7927              // buffer       n -- a
  76+ 7927              // read block n and gives the address to a buffer
  77+ 7927              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7927              // disk before reading the block n.
  79+ 7927
  80+ 7927                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7927             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7927             >
  80+ 7927             >Dict_Ptr        defl    $
  80+ 7927             >
  80+ 7927             >//              ______________________________________________________________________
  80+ 7927             >//              Heap part
  80+ 7927             >
  80+ 7927             >
  80+ 7927             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EACD             >
  80+ EACD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EACD             >Latest_Definition defl  Heap_Ptr
  80+ EACD             >
  80+ EACD             >                // dummy db directives used to calculate length of namec
  80+ EACD 42 55 46 46 >                db      "BUFFER"
  80+ EAD1 45 52       >
  80+ EAD3             >len_NFA         defl    $ - temp_NFA
  80+ EAD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EACD             >
  80+ EACD 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EACE 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EAD2 45 52       >
  80+ EAD4             >                org     $-1                 // alter last byte of Name just above to set
  80+ EAD3 D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EAD4             >
  80+ EAD4 BB 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAD6             >Prev_Ptr        defl    Heap_Ptr
  80+ EAD6             >
  80+ EAD6             >mirror_Ptr      defl    $
  80+ EAD6             >
  80+ EAD6 29 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAD8             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAD8             >
  80+ EAD8             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAD8             >
  80+ EAD8             >//              ______________________________________________________________________
  80+ EAD8             >//              Dictionary part
  80+ EAD8             >
  80+ EAD8             >                org     Dict_Ptr
  80+ 7927             >
  80+ 7927 D6 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 7929             >
  80+ 7929             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7929 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 792C             >
  80+ 792C             >
  80+ 792C             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 792C             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 792C             >
  80+ 792C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 792C 6B 6B 80 69                  dw      USED, FETCH             // used @
  82+ 7930 16 69 55 68                  dw      DUP, TO_R               // dup >r
  83+ 7934                                                              // begin
  84+ 7934              Buffer_Begin:
  85+ 7934 D4 78                        dw          PBUF                //      +buf
  86+ 7936                                                              // until
  87+ 7936 F3 63                        dw      ZBRANCH
  88+ 7938 FC FF                        dw      Buffer_Begin - $
  89+ 793A 6B 6B 8A 69                  dw      USED, STORE             // used !
  90+ 793E 6B 68 80 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 7942 81 68
  91+ 7944                                                              // if
  92+ 7944 F3 63                        dw      ZBRANCH
  93+ 7946 14 00                        dw      Buffer_Endif - $
  94+ 7948 6B 68 C7 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 794C 6B 68 80 69                  dw          R_OP, FETCH         //      r fetch
  96+ 7950 A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 7954 0B 68                        dw          AND_OP              //      and
  98+ 7956 76 6A A7 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 795A              Buffer_Endif:                                   // endif
 100+ 795A 6B 68 8A 69                  dw      R_OP, STORE             // r !
 101+ 795E 6B 68 71 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 7962 8A 69
 102+ 7964 60 68 C7 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7968 4B 68                        dw      EXIT                    // ;
 104+ 796A
 105+ 796A              //  ______________________________________________________________________
 106+ 796A              //
 107+ 796A              // block        n -- a
 108+ 796A              // Leaves the buffer address that contains the block n.
 109+ 796A              // If the block is not already present, it will be loaded from disk
 110+ 796A              // The block previously inside the buffer, if modified, is rewritten to
 111+ 796A              // disk before reading the block n.
 112+ 796A              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 796A
 114+ 796A                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 796A             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 796A             >
 114+ 796A             >Dict_Ptr        defl    $
 114+ 796A             >
 114+ 796A             >//              ______________________________________________________________________
 114+ 796A             >//              Heap part
 114+ 796A             >
 114+ 796A             >
 114+ 796A             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAD8             >
 114+ EAD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAD8             >Latest_Definition defl  Heap_Ptr
 114+ EAD8             >
 114+ EAD8             >                // dummy db directives used to calculate length of namec
 114+ EAD8 42 4C 4F 43 >                db      "BLOCK"
 114+ EADC 4B          >
 114+ EADD             >len_NFA         defl    $ - temp_NFA
 114+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAD8             >
 114+ EAD8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAD9 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EADD 4B          >
 114+ EADE             >                org     $-1                 // alter last byte of Name just above to set
 114+ EADD CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EADE             >
 114+ EADE CD 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAE0             >Prev_Ptr        defl    Heap_Ptr
 114+ EAE0             >
 114+ EAE0             >mirror_Ptr      defl    $
 114+ EAE0             >
 114+ EAE0 6C 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAE2             >
 114+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAE2             >
 114+ EAE2             >//              ______________________________________________________________________
 114+ EAE2             >//              Dictionary part
 114+ EAE2             >
 114+ EAE2             >                org     Dict_Ptr
 114+ 796A             >
 114+ 796A E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 796C             >
 114+ 796C             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 796C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 796F             >
 114+ 796F             >
 114+ 796F             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 796F             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 796F             >
 114+ 796F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 796F                          //  dw      OFFSET, FETCH           // offset @
 116+ 796F                          //  dw      PLUS
 117+ 796F 55 68                        dw      TO_R                    // + >r
 118+ 7971 71 6B 80 69                  dw      PREV, FETCH             // prev @
 119+ 7975 16 69 80 69                  dw      DUP, FETCH              // dup @
 120+ 7979 6B 68 DA 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 797D 16 69 98 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 7981                                                              // if
 123+ 7981 F3 63                        dw        ZBRANCH
 124+ 7983 32 00                        dw        Block_Endif_1 - $
 125+ 7985              Block_Begin:                                    //      begin
 126+ 7985 D4 78 70 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 7989                                                              //          if
 128+ 7989 F3 63                        dw          ZBRANCH
 129+ 798B 12 00                        dw          Block_Endif_2 - $
 130+ 798D FB 68                        dw              DROP            //              drop
 131+ 798F 6B 68 29 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 7993 16 69                        dw              DUP             //              dup
 133+ 7995 6B 68 7D 6A                  dw              R_OP, ONE       //              r 1
 134+ 7999 A7 78                        dw              READ_WRITE      //              r/w
 135+ 799B D3 68                        dw              TWO_MINUS       //              2-
 136+ 799D              Block_Endif_2:                                  //          endif
 137+ 799D 16 69 80 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79A1 6B 68
 138+ 79A3 DA 6B 16 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79A7 98 68 70 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79AB                                                              //      until
 141+ 79AB F3 63                        dw        ZBRANCH
 142+ 79AD D8 FF                        dw        Block_Begin - $
 143+ 79AF 16 69 71 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79B3 8A 69
 144+ 79B5              Block_Endif_1:                                  // endif
 145+ 79B5 60 68 FB 68                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79B9 C7 68
 146+ 79BB 4B 68                        dw      EXIT                    // ;
 147+ 79BD
 148+ 79BD              //  ______________________________________________________________________
 149+ 79BD              //
 150+ 79BD              // #buff        -- n
 151+ 79BD              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79BD                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79BD             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79BD             >
 152+ 79BD             >Dict_Ptr        defl    $
 152+ 79BD             >
 152+ 79BD             >//              ______________________________________________________________________
 152+ 79BD             >//              Heap part
 152+ 79BD             >
 152+ 79BD             >
 152+ 79BD             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAE2             >
 152+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAE2             >Latest_Definition defl  Heap_Ptr
 152+ EAE2             >
 152+ EAE2             >                // dummy db directives used to calculate length of namec
 152+ EAE2 23 42 55 46 >                db      "#BUFF"
 152+ EAE6 46          >
 152+ EAE7             >len_NFA         defl    $ - temp_NFA
 152+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAE2             >
 152+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAE3 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAE7 46          >
 152+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAE7 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAE8             >
 152+ EAE8 D8 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 152+ EAEA             >
 152+ EAEA             >mirror_Ptr      defl    $
 152+ EAEA             >
 152+ EAEA BF 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAEC             >
 152+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAEC             >
 152+ EAEC             >//              ______________________________________________________________________
 152+ EAEC             >//              Dictionary part
 152+ EAEC             >
 152+ EAEC             >                org     Dict_Ptr
 152+ 79BD             >
 152+ 79BD EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79BF             >
 152+ 79BF             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79BF CD 4A 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79C2             >
 152+ 79C2             >
 152+ 79C2             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79C2             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79C2             >
 152+ 79C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79C2 07 00       >                dw      7
 153+ 79C4
 154+ 79C4              //  ______________________________________________________________________
 155+ 79C4              //
 156+ 79C4              // flush        --
 157+ 79C4                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79C4             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79C4             >
 157+ 79C4             >Dict_Ptr        defl    $
 157+ 79C4             >
 157+ 79C4             >//              ______________________________________________________________________
 157+ 79C4             >//              Heap part
 157+ 79C4             >
 157+ 79C4             >
 157+ 79C4             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAEC             >
 157+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAEC             >Latest_Definition defl  Heap_Ptr
 157+ EAEC             >
 157+ EAEC             >                // dummy db directives used to calculate length of namec
 157+ EAEC 46 4C 55 53 >                db      "FLUSH"
 157+ EAF0 48          >
 157+ EAF1             >len_NFA         defl    $ - temp_NFA
 157+ EAF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAEC             >
 157+ EAEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAED 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAF1 48          >
 157+ EAF2             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAF1 C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAF2             >
 157+ EAF2 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAF4             >Prev_Ptr        defl    Heap_Ptr
 157+ EAF4             >
 157+ EAF4             >mirror_Ptr      defl    $
 157+ EAF4             >
 157+ EAF4 C6 79       >                dw      Dict_Ptr + 2        // xt
 157+ EAF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EAF6             >
 157+ EAF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EAF6             >
 157+ EAF6             >//              ______________________________________________________________________
 157+ EAF6             >//              Dictionary part
 157+ EAF6             >
 157+ EAF6             >                org     Dict_Ptr
 157+ 79C4             >
 157+ 79C4 F4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79C6             >
 157+ 79C6             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79C6 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79C9             >
 157+ 79C9             >
 157+ 79C9             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79C9             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79C9             >
 157+ 79C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79C9 BF 79 B1 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79CD 76 6A
 159+ 79CF              Flush_Do:                                       // do
 160+ 79CF 2E 64                        dw      C_DO
 161+ 79D1 76 6A 29 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79D5 FB 68
 162+ 79D7                                                              // loop
 163+ 79D7 E7 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79DB 00 78 80 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79DF 01 67 FB 68                  dw      F_SYNC, DROP            // f_sync drop
 166+ 79E3 4B 68                        dw      EXIT                    // exit
 167+ 79E5
 168+ 79E5              //  ______________________________________________________________________
 169+ 79E5              //
 170+ 79E5              // f_getline    a m fh -- n
 171+ 79E5              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 79E5              // Address a is left for subsequent processing
 173+ 79E5              // and n as the actual number of byte read, that is the length of line
 174+ 79E5                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 79E5             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 79E5             >
 174+ 79E5             >Dict_Ptr        defl    $
 174+ 79E5             >
 174+ 79E5             >//              ______________________________________________________________________
 174+ 79E5             >//              Heap part
 174+ 79E5             >
 174+ 79E5             >
 174+ 79E5             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EAF6             >
 174+ EAF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EAF6             >Latest_Definition defl  Heap_Ptr
 174+ EAF6             >
 174+ EAF6             >                // dummy db directives used to calculate length of namec
 174+ EAF6 46 5F 47 45 >                db      "F_GETLINE"
 174+ EAFA 54 4C 49 4E >
 174+ EAFE 45          >
 174+ EAFF             >len_NFA         defl    $ - temp_NFA
 174+ EAFF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EAF6             >
 174+ EAF6 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EAF7 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EAFB 54 4C 49 4E >
 174+ EAFF 45          >
 174+ EB00             >                org     $-1                 // alter last byte of Name just above to set
 174+ EAFF C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB00             >
 174+ EB00 EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB02             >Prev_Ptr        defl    Heap_Ptr
 174+ EB02             >
 174+ EB02             >mirror_Ptr      defl    $
 174+ EB02             >
 174+ EB02 E7 79       >                dw      Dict_Ptr + 2        // xt
 174+ EB04             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB04             >
 174+ EB04             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB04             >
 174+ EB04             >//              ______________________________________________________________________
 174+ EB04             >//              Dictionary part
 174+ EB04             >
 174+ EB04             >                org     Dict_Ptr
 174+ 79E5             >
 174+ 79E5 02 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 79E7             >
 174+ 79E7             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 79E7 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 79EA             >
 174+ 79EA             >
 174+ 79EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 79EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 79EA             >
 174+ 79EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 79EA 55 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 79EC 06 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 79EE 6B 68 0E 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 79F2 A3 63 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 79F6 CF 6D
 179+ 79F8
 180+ 79F8 51 69 F2 68                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 79FC B1 68 0F 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A00
 183+ 7A00 6B 68 28 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A04 A3 63 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 7A08 CF 6D
 185+ 7A0A                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A0A F3 63                        dw      ZBRANCH
 187+ 7A0C 3C 00                        dw      FGetline_Else - $
 188+ 7A0E A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A12 22 65
 189+ 7A14 FB 68 00 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A18 0F 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A1A A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A1E 22 65
 192+ 7A20 FB 68 00 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A24 1D 69 17 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A28 16 69 89 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A2C 8A 69
 195+ 7A2E 16 69 55 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A32 51 69 60 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A36 76 6A A2 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A3A 60 68 D6 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A3E A3 63 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 7A42 CF 6D
 200+ 7A44                                                              // else
 201+ 7A44 EF 63                        dw      BRANCH
 202+ 7A46 0C 00                        dw      FGetline_Endif - $
 203+ 7A48              FGetline_Else:
 204+ 7A48 60 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A4A 51 69 4B 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A4E FB 68 76 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A52              FGetline_Endif:                                 // endif
 208+ 7A52 55 68 16 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A56 16 69
 209+ 7A58 B1 68 0F 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A5C 6B 68 8C 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A60 5E 69 98 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A64 76 6A 0F 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A68 CB 68 8A 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A6C 6B 68 98 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A70 B8 68
 215+ 7A72 0F 69 6B 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A76 DA 6B
 216+ 7A78 82 70                        dw      BLANK                   // blank
 217+ 7A7A 60 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A7C 4B 68                        dw      EXIT                    // ;
 219+ 7A7E
 220+ 7A7E              //  ______________________________________________________________________
 221+ 7A7E              //
 222+ 7A7E              // f_include    fh --
 223+ 7A7E              // Given a filehandle includes the source from file
 224+ 7A7E                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A7E             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A7E             >
 224+ 7A7E             >Dict_Ptr        defl    $
 224+ 7A7E             >
 224+ 7A7E             >//              ______________________________________________________________________
 224+ 7A7E             >//              Heap part
 224+ 7A7E             >
 224+ 7A7E             >
 224+ 7A7E             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB04             >
 224+ EB04             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB04             >Latest_Definition defl  Heap_Ptr
 224+ EB04             >
 224+ EB04             >                // dummy db directives used to calculate length of namec
 224+ EB04 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB08 43 4C 55 44 >
 224+ EB0C 45          >
 224+ EB0D             >len_NFA         defl    $ - temp_NFA
 224+ EB0D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB04             >
 224+ EB04 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB05 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB09 43 4C 55 44 >
 224+ EB0D 45          >
 224+ EB0E             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB0D C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB0E             >
 224+ EB0E F6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB10             >Prev_Ptr        defl    Heap_Ptr
 224+ EB10             >
 224+ EB10             >mirror_Ptr      defl    $
 224+ EB10             >
 224+ EB10 80 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB12             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB12             >
 224+ EB12             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB12             >
 224+ EB12             >//              ______________________________________________________________________
 224+ EB12             >//              Dictionary part
 224+ EB12             >
 224+ EB12             >                org     Dict_Ptr
 224+ 7A7E             >
 224+ 7A7E 10 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A80             >
 224+ 7A80             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A80 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7A83             >
 224+ 7A83             >
 224+ 7A83             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7A83             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7A83             >
 224+ 7A83             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7A83 17 6B 80 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7A87 55 68
 226+ 7A89 1D 6B 80 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7A8D 55 68
 227+ 7A8F 83 6B 80 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7A93 55 68
 228+ 7A95 6B 68                        dw      R_OP                    // r
 229+ 7A97 8A 68                        dw      ZGREATER                // 0>  (filehandle)
 230+ 7A99                                                              // if
 231+ 7A99 F3 63                        dw      ZBRANCH
 232+ 7A9B 20 00                        dw      FInclude_Else_1 - $
 233+ 7A9D 6B 68 0E 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 7AA1 A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 7AA5 CF 6D
 235+ 7AA7 1D 6B 80 69                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 7AAB D3 68                        dw          TWO_MINUS
 237+ 7AAD 89 6B 80 69                  dw          SPAN, FETCH         //      span @ -
 238+ 7AB1 DA 6B                        dw          SUBTRACT
 239+ 7AB3 CF 6B A2 68                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 7AB7                                                              // else
 241+ 7AB7 EF 63                        dw      BRANCH
 242+ 7AB9 06 00                        dw      FInclude_Endif_1 - $
 243+ 7ABB              FInclude_Else_1:
 244+ 7ABB 76 6A 76 6A                  dw          ZERO, ZERO          //      0 0
 245+ 7ABF                                                              // endif
 246+ 7ABF              FInclude_Endif_1:
 247+ 7ABF 55 68 55 68                  dw      TO_R, TO_R              // >r >r
 248+ 7AC3 83 6B 8A 69                  dw      SOURCE_ID, STORE        // source-id !
 249+ 7AC7              FInclude_Begin:                                 // begin
 250+ 7AC7 7D 6A 6C 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 7ACB A7 6A
 251+ 7ACD 5E 69 82 70                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 7AD1 0F 69 B1 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 7AD5 0F 69 CB 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 7AD9 83 6B 80 69                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 7ADD E7 79                        dw          F_GETLINE           //      f_getline
 256+ 7ADF                                                              // while
 257+ 7ADF F3 63                        dw      ZBRANCH
 258+ 7AE1 14 00                        dw      FInclude_Repeat - $
 259+ 7AE3 7D 6A 17 6B                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 7AE7 8A 69
 260+ 7AE9 76 6A 1D 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 7AED 8A 69
 261+ 7AEF B6 74                        dw          INTERPRET           //      interpret
 262+ 7AF1 EF 63                        dw      BRANCH
 263+ 7AF3 D4 FF                        dw      FInclude_Begin - $
 264+ 7AF5              FInclude_Repeat:                                // repeat
 265+ 7AF5                              //  close current file
 266+ 7AF5 83 6B 80 69                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 7AF9 F4 66                        dw      F_CLOSE                 // f_close
 268+ 7AFB A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 7AFF CF 6D
 269+ 7B01
 270+ 7B01 60 68 60 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 7B05 60 68
 271+ 7B07 16 69 83 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 7B0B 8A 69
 272+ 7B0D 8A 68                        dw      ZGREATER                // 0>
 273+ 7B0F                                                              // if
 274+ 7B0F F3 63                        dw      ZBRANCH
 275+ 7B11 12 00                        dw      FInclude_Else_2 - $
 276+ 7B13 83 6B 80 69                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 7B17 D6 66                        dw          F_SEEK              //      f_seek
 278+ 7B19 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 7B1D CF 6D
 279+ 7B1F                                                              // else
 280+ 7B1F EF 63                        dw      BRANCH
 281+ 7B21 04 00                        dw      FInclude_Endif_2 - $
 282+ 7B23              FInclude_Else_2:
 283+ 7B23 4B 69                        dw          TWO_DROP            //      2drop
 284+ 7B25              FInclude_Endif_2:                               // endif
 285+ 7B25 60 68 1D 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 7B29 8A 69
 286+ 7B2B 60 68 17 6B                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 7B2F 8A 69
 287+ 7B31 4B 68                        dw      EXIT                    // ;
 288+ 7B33
 289+ 7B33              //  ______________________________________________________________________
 290+ 7B33              //
 291+ 7B33              // open<         -- fh
 292+ 7B33              // Open the following filename and return it file-handle
 293+ 7B33              // Used in the form OPEN CCCC
 294+ 7B33                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 7B33             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 7B33             >
 294+ 7B33             >Dict_Ptr        defl    $
 294+ 7B33             >
 294+ 7B33             >//              ______________________________________________________________________
 294+ 7B33             >//              Heap part
 294+ 7B33             >
 294+ 7B33             >
 294+ 7B33             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB12             >
 294+ EB12             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB12             >Latest_Definition defl  Heap_Ptr
 294+ EB12             >
 294+ EB12             >                // dummy db directives used to calculate length of namec
 294+ EB12 4F 50 45 4E >                db      "OPEN<"
 294+ EB16 3C          >
 294+ EB17             >len_NFA         defl    $ - temp_NFA
 294+ EB17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB12             >
 294+ EB12 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB13 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB17 3C          >
 294+ EB18             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB17 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB18             >
 294+ EB18 04 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB1A             >Prev_Ptr        defl    Heap_Ptr
 294+ EB1A             >
 294+ EB1A             >mirror_Ptr      defl    $
 294+ EB1A             >
 294+ EB1A 35 7B       >                dw      Dict_Ptr + 2        // xt
 294+ EB1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB1C             >
 294+ EB1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB1C             >
 294+ EB1C             >//              ______________________________________________________________________
 294+ EB1C             >//              Dictionary part
 294+ EB1C             >
 294+ EB1C             >                org     Dict_Ptr
 294+ 7B33             >
 294+ 7B33 1A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 7B35             >
 294+ 7B35             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 7B35 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 7B38             >
 294+ 7B38             >
 294+ 7B38             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 7B38             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 7B38             >
 294+ 7B38             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 7B38 99 6A                        dw      BL
 296+ 7B3A AF 70 09 6F                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 7B3E F2 68
 297+ 7B40 98 68 76 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 7B44 0F 69 8A 69
 298+ 7B48 A0 70 7D 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 7B4C 56 67
 299+ 7B4E A3 63 2B 00                  dw      LIT, 43                 // 43
 300+ 7B52 CF 6D                        dw      QERROR                  // ?error
 301+ 7B54 4B 68                        dw      EXIT                    // ;
 302+ 7B56
 303+ 7B56              //  ______________________________________________________________________
 304+ 7B56              //
 305+ 7B56              // use          -- cccc
 306+ 7B56              // Include the following filename
 307+ 7B56              //              Colon_Def USE, "USE", is_normal
 308+ 7B56              //              dw      OPEN_FH                 // open<
 309+ 7B56              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 7B56              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 7B56              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 7B56              //              dw      EXIT                    // ;
 313+ 7B56
 314+ 7B56              //  ______________________________________________________________________
 315+ 7B56              //
 316+ 7B56              // include      -- cccc
 317+ 7B56              // Include the following filename
 318+ 7B56                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 7B56             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 7B56             >
 318+ 7B56             >Dict_Ptr        defl    $
 318+ 7B56             >
 318+ 7B56             >//              ______________________________________________________________________
 318+ 7B56             >//              Heap part
 318+ 7B56             >
 318+ 7B56             >
 318+ 7B56             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB1C             >
 318+ EB1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB1C             >Latest_Definition defl  Heap_Ptr
 318+ EB1C             >
 318+ EB1C             >                // dummy db directives used to calculate length of namec
 318+ EB1C 49 4E 43 4C >                db      "INCLUDE"
 318+ EB20 55 44 45    >
 318+ EB23             >len_NFA         defl    $ - temp_NFA
 318+ EB23             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB1C             >
 318+ EB1C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB1D 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB21 55 44 45    >
 318+ EB24             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB23 C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB24             >
 318+ EB24 12 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB26             >Prev_Ptr        defl    Heap_Ptr
 318+ EB26             >
 318+ EB26             >mirror_Ptr      defl    $
 318+ EB26             >
 318+ EB26 58 7B       >                dw      Dict_Ptr + 2        // xt
 318+ EB28             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB28             >
 318+ EB28             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB28             >
 318+ EB28             >//              ______________________________________________________________________
 318+ EB28             >//              Dictionary part
 318+ EB28             >
 318+ EB28             >                org     Dict_Ptr
 318+ 7B56             >
 318+ 7B56 26 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 7B58             >
 318+ 7B58             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7B58 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 7B5B             >
 318+ 7B5B             >
 318+ 7B5B             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7B5B             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7B5B             >
 318+ 7B5B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7B5B 35 7B                        dw      OPEN_FH                 // open<
 320+ 7B5D 80 7A                        dw      F_INCLUDE               //  f_include
 321+ 7B5F 4B 68                        dw      EXIT                    // ;
 322+ 7B61
 323+ 7B61              //  ______________________________________________________________________
 324+ 7B61              //
 325+ 7B61              // needs
 326+ 7B61              // check for cccc exists in vocabulary
 327+ 7B61              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 7B61
 329+ 7B61              // temp filename cccc.f as counted string zero-padded
 330+ 7B61                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 7B61             >
 330+ 7B61             >Dict_Ptr        defl    $
 330+ 7B61             >
 330+ 7B61             >//              ______________________________________________________________________
 330+ 7B61             >//              Heap part
 330+ 7B61             >
 330+ 7B61             >
 330+ 7B61             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB28             >
 330+ EB28             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB28             >Latest_Definition defl  Heap_Ptr
 330+ EB28             >
 330+ EB28             >                // dummy db directives used to calculate length of namec
 330+ EB28 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB2C 53 2D 57    >
 330+ EB2F             >len_NFA         defl    $ - temp_NFA
 330+ EB2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB28             >
 330+ EB28 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB29 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB2D 53 2D 57    >
 330+ EB30             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB2F D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB30             >
 330+ EB30 1C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB32             >Prev_Ptr        defl    Heap_Ptr
 330+ EB32             >
 330+ EB32             >mirror_Ptr      defl    $
 330+ EB32             >
 330+ EB32 63 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB34             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB34             >
 330+ EB34             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB34             >
 330+ EB34             >//              ______________________________________________________________________
 330+ EB34             >//              Dictionary part
 330+ EB34             >
 330+ EB34             >                org     Dict_Ptr
 330+ 7B61             >
 330+ 7B61 32 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7B63             >
 330+ 7B63             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7B63 CD FA 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 7B66             >
 330+ 7B66             >
 330+ 7B66             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7B66             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7B66             >
 330+ 7B66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7B66 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 7B89              // temp complete path+filename
 333+ 7B89                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 7B89             >
 333+ 7B89             >Dict_Ptr        defl    $
 333+ 7B89             >
 333+ 7B89             >//              ______________________________________________________________________
 333+ 7B89             >//              Heap part
 333+ 7B89             >
 333+ 7B89             >
 333+ 7B89             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB34             >
 333+ EB34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB34             >Latest_Definition defl  Heap_Ptr
 333+ EB34             >
 333+ EB34             >                // dummy db directives used to calculate length of namec
 333+ EB34 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB38 53 2D 46 4E >
 333+ EB3C             >len_NFA         defl    $ - temp_NFA
 333+ EB3C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB34             >
 333+ EB34 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB35 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB39 53 2D 46 4E >
 333+ EB3D             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB3C CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB3D             >
 333+ EB3D 28 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB3F             >Prev_Ptr        defl    Heap_Ptr
 333+ EB3F             >
 333+ EB3F             >mirror_Ptr      defl    $
 333+ EB3F             >
 333+ EB3F 8B 7B       >                dw      Dict_Ptr + 2        // xt
 333+ EB41             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB41             >
 333+ EB41             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB41             >
 333+ EB41             >//              ______________________________________________________________________
 333+ EB41             >//              Dictionary part
 333+ EB41             >
 333+ EB41             >                org     Dict_Ptr
 333+ 7B89             >
 333+ 7B89 3F 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 7B8B             >
 333+ 7B8B             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 7B8B CD FA 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 7B8E             >
 333+ 7B8E             >
 333+ 7B8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 7B8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 7B8E             >
 333+ 7B8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 7B8E
 335+ 7B8E 00 00 00...                  ds      40
 336+ 7BB6              // constant path
 337+ 7BB6                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 7BB6             >
 337+ 7BB6             >Dict_Ptr        defl    $
 337+ 7BB6             >
 337+ 7BB6             >//              ______________________________________________________________________
 337+ 7BB6             >//              Heap part
 337+ 7BB6             >
 337+ 7BB6             >
 337+ 7BB6             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB41             >
 337+ EB41             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB41             >Latest_Definition defl  Heap_Ptr
 337+ EB41             >
 337+ EB41             >                // dummy db directives used to calculate length of namec
 337+ EB41 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB45 53 2D 49 4E >
 337+ EB49 43          >
 337+ EB4A             >len_NFA         defl    $ - temp_NFA
 337+ EB4A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB41             >
 337+ EB41 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB42 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB46 53 2D 49 4E >
 337+ EB4A 43          >
 337+ EB4B             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB4A C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB4B             >
 337+ EB4B 34 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB4D             >Prev_Ptr        defl    Heap_Ptr
 337+ EB4D             >
 337+ EB4D             >mirror_Ptr      defl    $
 337+ EB4D             >
 337+ EB4D B8 7B       >                dw      Dict_Ptr + 2        // xt
 337+ EB4F             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB4F             >
 337+ EB4F             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB4F             >
 337+ EB4F             >//              ______________________________________________________________________
 337+ EB4F             >//              Dictionary part
 337+ EB4F             >
 337+ EB4F             >                org     Dict_Ptr
 337+ 7BB6             >
 337+ 7BB6 4D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 7BB8             >
 337+ 7BB8             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 7BB8 CD FA 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 7BBB             >
 337+ 7BBB             >
 337+ 7BBB             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 7BBB             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 7BBB             >
 337+ 7BBB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 7BBB 04 69 6E 63                  db      4, "inc/", 0
 338+ 7BBF 2F 00
 339+ 7BC1                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 7BC1             >
 339+ 7BC1             >Dict_Ptr        defl    $
 339+ 7BC1             >
 339+ 7BC1             >//              ______________________________________________________________________
 339+ 7BC1             >//              Heap part
 339+ 7BC1             >
 339+ 7BC1             >
 339+ 7BC1             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB4F             >
 339+ EB4F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB4F             >Latest_Definition defl  Heap_Ptr
 339+ EB4F             >
 339+ EB4F             >                // dummy db directives used to calculate length of namec
 339+ EB4F 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB53 53 2D 4C 49 >
 339+ EB57 42          >
 339+ EB58             >len_NFA         defl    $ - temp_NFA
 339+ EB58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB4F             >
 339+ EB4F 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB50 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB54 53 2D 4C 49 >
 339+ EB58 42          >
 339+ EB59             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB58 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB59             >
 339+ EB59 41 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB5B             >Prev_Ptr        defl    Heap_Ptr
 339+ EB5B             >
 339+ EB5B             >mirror_Ptr      defl    $
 339+ EB5B             >
 339+ EB5B C3 7B       >                dw      Dict_Ptr + 2        // xt
 339+ EB5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB5D             >
 339+ EB5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB5D             >
 339+ EB5D             >//              ______________________________________________________________________
 339+ EB5D             >//              Dictionary part
 339+ EB5D             >
 339+ EB5D             >                org     Dict_Ptr
 339+ 7BC1             >
 339+ 7BC1 5B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 7BC3             >
 339+ 7BC3             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 7BC3 CD FA 73    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 7BC6             >
 339+ 7BC6             >
 339+ 7BC6             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 7BC6             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 7BC6             >
 339+ 7BC6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 7BC6 04 6C 69 62                  db      4, "lib/", 0
 340+ 7BCA 2F 00
 341+ 7BCC
 342+ 7BCC              // Concatenate path at a and filename and include it
 343+ 7BCC              // No error is issued if filename doesn't exist.
 344+ 7BCC                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 7BCC             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 7BCC             >
 344+ 7BCC             >Dict_Ptr        defl    $
 344+ 7BCC             >
 344+ 7BCC             >//              ______________________________________________________________________
 344+ 7BCC             >//              Heap part
 344+ 7BCC             >
 344+ 7BCC             >
 344+ 7BCC             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB5D             >
 344+ EB5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB5D             >Latest_Definition defl  Heap_Ptr
 344+ EB5D             >
 344+ EB5D             >                // dummy db directives used to calculate length of namec
 344+ EB5D 4E 45 45 44 >                db      "NEEDS/"
 344+ EB61 53 2F       >
 344+ EB63             >len_NFA         defl    $ - temp_NFA
 344+ EB63             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB5D             >
 344+ EB5D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB5E 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB62 53 2F       >
 344+ EB64             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB63 AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB64             >
 344+ EB64 4F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB66             >Prev_Ptr        defl    Heap_Ptr
 344+ EB66             >
 344+ EB66             >mirror_Ptr      defl    $
 344+ EB66             >
 344+ EB66 CE 7B       >                dw      Dict_Ptr + 2        // xt
 344+ EB68             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB68             >
 344+ EB68             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB68             >
 344+ EB68             >//              ______________________________________________________________________
 344+ EB68             >//              Dictionary part
 344+ EB68             >
 344+ EB68             >                org     Dict_Ptr
 344+ 7BCC             >
 344+ 7BCC 66 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 7BCE             >
 344+ 7BCE             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 7BCE CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 7BD1             >
 344+ 7BD1             >
 344+ 7BD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 7BD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 7BD1             >
 344+ 7BD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 7BD1 09 6F 06 69                  dw      COUNT, TUCK             // n a n
 346+ 7BD5 8B 7B 0F 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 7BD9 8C 67
 347+ 7BDB 8B 7B 98 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 7BDF 63 7B B1 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 7BE3 0F 69
 349+ 7BE5 A3 63 23 00                  dw      LIT, 35
 350+ 7BE9 8C 67                        dw      CMOVE
 351+ 7BEB 8B 7B                        dw      NEEDS_FN
 352+ 7BED A0 70 7D 6A                  dw      PAD, ONE, F_OPEN
 352+ 7BF1 56 67
 353+ 7BF3 70 68                        dw      ZEQUAL
 354+ 7BF5 F3 63                        dw      ZBRANCH
 355+ 7BF7 08 00                        dw      Needs_1 - $
 356+ 7BF9 80 7A                        dw          F_INCLUDE
 357+ 7BFB EF 63                        dw      BRANCH
 358+ 7BFD 04 00                        dw      Needs_2 - $
 359+ 7BFF              Needs_1:
 360+ 7BFF              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 7BFF              //              dw          LIT, 43, MESSAGE
 362+ 7BFF FB 68                        dw          DROP
 363+ 7C01              Needs_2:
 364+ 7C01 4B 68                        dw      EXIT                    // ;
 365+ 7C03
 366+ 7C03              NDOM_PTR:
 367+ 7C03              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 368+ 7C03              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 7C03 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 7C07 7C 5C 3C 3E
 369+ 7C0B 22
 370+ 7C0C              //              db 0
 371+ 7C0C
 372+ 7C0C              NCDM_PTR:
 373+ 7C0C              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 374+ 7C0C              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 375+ 7C0C 5F 5E 25 26                  db '_^%&$_{}~'
 375+ 7C10 24 5F 7B 7D
 375+ 7C14 7E
 376+ 7C15              //              db 0
 377+ 7C15
 378+ 7C15              // Replace illegal character in filename using the map here above
 379+ 7C15              // at the moment we need only  "
 380+ 7C15                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 380+ 7C15             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 380+ 7C15             >
 380+ 7C15             >Dict_Ptr        defl    $
 380+ 7C15             >
 380+ 7C15             >//              ______________________________________________________________________
 380+ 7C15             >//              Heap part
 380+ 7C15             >
 380+ 7C15             >
 380+ 7C15             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ EB68             >
 380+ EB68             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ EB68             >Latest_Definition defl  Heap_Ptr
 380+ EB68             >
 380+ EB68             >                // dummy db directives used to calculate length of namec
 380+ EB68 4D 41 50 2D >                db      "MAP-FN"
 380+ EB6C 46 4E       >
 380+ EB6E             >len_NFA         defl    $ - temp_NFA
 380+ EB6E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ EB68             >
 380+ EB68 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ EB69 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 380+ EB6D 46 4E       >
 380+ EB6F             >                org     $-1                 // alter last byte of Name just above to set
 380+ EB6E CE          >                db      {b $} | END_BIT     // msb as name end
 380+ EB6F             >
 380+ EB6F 5D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ EB71             >Prev_Ptr        defl    Heap_Ptr
 380+ EB71             >
 380+ EB71             >mirror_Ptr      defl    $
 380+ EB71             >
 380+ EB71 17 7C       >                dw      Dict_Ptr + 2        // xt
 380+ EB73             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ EB73             >
 380+ EB73             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ EB73             >
 380+ EB73             >//              ______________________________________________________________________
 380+ EB73             >//              Dictionary part
 380+ EB73             >
 380+ EB73             >                org     Dict_Ptr
 380+ 7C15             >
 380+ 7C15 71 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 7C17             >
 380+ 7C17             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7C17 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7C1A             >
 380+ 7C1A             >
 380+ 7C1A             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7C1A             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7C1A             >
 380+ 7C1A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7C1A 09 6F 16 6F                  dw      COUNT, BOUNDS
 382+ 7C1E 2E 64                        dw      C_DO
 383+ 7C20              Needs_3:
 384+ 7C20              //              dw          NCDM, NDOM, LIT, 10
 385+ 7C20 A3 63 0C 7C                  dw          LIT, NCDM_PTR           //
 386+ 7C24 A3 63 03 7C                  dw          LIT, NDOM_PTR           //
 387+ 7C28 A3 63 09 00                  dw          LIT, 9
 388+ 7C2C 34 64 95 69                  dw          I, CFETCH
 389+ 7C30 54 65                        dw          C_MAP
 390+ 7C32 34 64 9E 69                  dw          I, CSTORE
 391+ 7C36              Needs_4:
 392+ 7C36 E7 63                        dw      C_LOOP
 393+ 7C38 E8 FF                        dw      Needs_3 - $
 394+ 7C3A 4B 68                        dw      EXIT
 395+ 7C3C
 396+ 7C3C
 397+ 7C3C              // include  "path/cccc.f" if cccc is not defined
 398+ 7C3C              // filename cccc.f is temporary stored at NEEDS-W
 399+ 7C3C                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 399+ 7C3C             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 399+ 7C3C             >
 399+ 7C3C             >Dict_Ptr        defl    $
 399+ 7C3C             >
 399+ 7C3C             >//              ______________________________________________________________________
 399+ 7C3C             >//              Heap part
 399+ 7C3C             >
 399+ 7C3C             >
 399+ 7C3C             >                org     (Heap_Ptr & $1FFF) + $E000
 399+ EB73             >
 399+ EB73             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ EB73             >Latest_Definition defl  Heap_Ptr
 399+ EB73             >
 399+ EB73             >                // dummy db directives used to calculate length of namec
 399+ EB73 4E 45 45 44 >                db      "NEEDS-F"
 399+ EB77 53 2D 46    >
 399+ EB7A             >len_NFA         defl    $ - temp_NFA
 399+ EB7A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ EB73             >
 399+ EB73 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ EB74 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 399+ EB78 53 2D 46    >
 399+ EB7B             >                org     $-1                 // alter last byte of Name just above to set
 399+ EB7A C6          >                db      {b $} | END_BIT     // msb as name end
 399+ EB7B             >
 399+ EB7B 68 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 399+ EB7D             >Prev_Ptr        defl    Heap_Ptr
 399+ EB7D             >
 399+ EB7D             >mirror_Ptr      defl    $
 399+ EB7D             >
 399+ EB7D 3E 7C       >                dw      Dict_Ptr + 2        // xt
 399+ EB7F             >Heap_Ptr        defl    $ - $E000           // save current HP
 399+ EB7F             >
 399+ EB7F             >Current_HP      defl  $ - $E000             // used to set HP once!
 399+ EB7F             >
 399+ EB7F             >//              ______________________________________________________________________
 399+ EB7F             >//              Dictionary part
 399+ EB7F             >
 399+ EB7F             >                org     Dict_Ptr
 399+ 7C3C             >
 399+ 7C3C 7D 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 399+ 7C3E             >
 399+ 7C3E             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 7C3E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 7C41             >
 399+ 7C41             >
 399+ 7C41             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 7C41             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 7C41             >
 399+ 7C41             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 7C41 F3 72                        dw      LFIND
 401+ 7C43 F3 63                        dw      ZBRANCH
 402+ 7C45 0A 00                        dw      Needs_5 - $
 403+ 7C47
 404+ 7C47 FB 68 4B 69                  dw          DROP, TWO_DROP
 405+ 7C4B EF 63                        dw      BRANCH
 406+ 7C4D 2C 00                        dw      Needs_6 - $
 407+ 7C4F              Needs_5:
 408+ 7C4F 63 7B                        dw          NEEDS_W
 409+ 7C51 A3 63 23 00                  dw          LIT, 35
 410+ 7C55 77 70                        dw          ERASE                   // a
 411+ 7C57 9B 6B 95 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 411+ 7C5B B1 68
 412+ 7C5D 9B 6B F2 68                  dw          HERE, OVER              // a n here n
 413+ 7C61 63 7B 0F 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 413+ 7C65 8C 67
 414+ 7C67 63 7B 17 7C                  dw          NEEDS_W, NEEDS_CHECK
 415+ 7C6B 63 7B 98 68                  dw          NEEDS_W, PLUS           // a a1+1
 416+ 7C6F A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 417+ 7C73 0F 69 8A 69                  dw          SWAP, STORE             // a
 418+ 7C77 CE 7B                        dw          NEEDS_SLASH
 419+ 7C79              Needs_6:
 420+ 7C79 4B 68                        dw      EXIT
 421+ 7C7B
 422+ 7C7B
 423+ 7C7B              // check for cccc exists in vocabulary
 424+ 7C7B              // if it doesn't then  INCLUDE  inc/cccc.F
 425+ 7C7B              // search in inc subdirectory
 426+ 7C7B                              Colon_Def NEEDS, "NEEDS", is_normal
 426+ 7C7B             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 426+ 7C7B             >
 426+ 7C7B             >Dict_Ptr        defl    $
 426+ 7C7B             >
 426+ 7C7B             >//              ______________________________________________________________________
 426+ 7C7B             >//              Heap part
 426+ 7C7B             >
 426+ 7C7B             >
 426+ 7C7B             >                org     (Heap_Ptr & $1FFF) + $E000
 426+ EB7F             >
 426+ EB7F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ EB7F             >Latest_Definition defl  Heap_Ptr
 426+ EB7F             >
 426+ EB7F             >                // dummy db directives used to calculate length of namec
 426+ EB7F 4E 45 45 44 >                db      "NEEDS"
 426+ EB83 53          >
 426+ EB84             >len_NFA         defl    $ - temp_NFA
 426+ EB84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ EB7F             >
 426+ EB7F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ EB80 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 426+ EB84 53          >
 426+ EB85             >                org     $-1                 // alter last byte of Name just above to set
 426+ EB84 D3          >                db      {b $} | END_BIT     // msb as name end
 426+ EB85             >
 426+ EB85 73 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 426+ EB87             >Prev_Ptr        defl    Heap_Ptr
 426+ EB87             >
 426+ EB87             >mirror_Ptr      defl    $
 426+ EB87             >
 426+ EB87 7D 7C       >                dw      Dict_Ptr + 2        // xt
 426+ EB89             >Heap_Ptr        defl    $ - $E000           // save current HP
 426+ EB89             >
 426+ EB89             >Current_HP      defl  $ - $E000             // used to set HP once!
 426+ EB89             >
 426+ EB89             >//              ______________________________________________________________________
 426+ EB89             >//              Dictionary part
 426+ EB89             >
 426+ EB89             >                org     Dict_Ptr
 426+ 7C7B             >
 426+ 7C7B 87 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 426+ 7C7D             >
 426+ 7C7D             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7C7D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7C80             >
 426+ 7C80             >
 426+ 7C80             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7C80             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7C80             >
 426+ 7C80             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7C80 1D 6B 80 69                  dw      TO_IN, FETCH
 428+ 7C84 16 69                        dw      DUP
 429+ 7C86 B8 7B 3E 7C                  dw      NEEDS_INC, NEEDS_PATH
 430+ 7C8A 1D 6B 8A 69                  dw      TO_IN, STORE
 431+ 7C8E C3 7B 3E 7C                  dw      NEEDS_LIB, NEEDS_PATH
 432+ 7C92 1D 6B 8A 69                  dw      TO_IN, STORE
 433+ 7C96 F3 72                        dw      LFIND
 434+ 7C98 F3 63                        dw      ZBRANCH
 435+ 7C9A 08 00                        dw      Needs_10 - $
 436+ 7C9C 4B 69                        dw          TWO_DROP
 437+ 7C9E EF 63                        dw      BRANCH
 438+ 7CA0 10 00                        dw      Needs_11 - $
 439+ 7CA2              Needs_10:
 440+ 7CA2 63 7B 09 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 440+ 7CA6 5D 6F 64 6C
 441+ 7CAA A3 63 2B 00                  dw      LIT, 43, MESSAGE
 441+ 7CAE 83 77
 442+ 7CB0              Needs_11:
 443+ 7CB0 4B 68                        dw      EXIT
 444+ 7CB2
 445+ 7CB2
 446+ 7CB2              //  ______________________________________________________________________
 447+ 7CB2              //
 448+ 7CB2              // load         n --
 449+ 7CB2                              Colon_Def LOAD, "LOAD", is_normal
 449+ 7CB2             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 449+ 7CB2             >
 449+ 7CB2             >Dict_Ptr        defl    $
 449+ 7CB2             >
 449+ 7CB2             >//              ______________________________________________________________________
 449+ 7CB2             >//              Heap part
 449+ 7CB2             >
 449+ 7CB2             >
 449+ 7CB2             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ EB89             >
 449+ EB89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ EB89             >Latest_Definition defl  Heap_Ptr
 449+ EB89             >
 449+ EB89             >                // dummy db directives used to calculate length of namec
 449+ EB89 4C 4F 41 44 >                db      "LOAD"
 449+ EB8D             >len_NFA         defl    $ - temp_NFA
 449+ EB8D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ EB89             >
 449+ EB89 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ EB8A 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 449+ EB8E             >                org     $-1                 // alter last byte of Name just above to set
 449+ EB8D C4          >                db      {b $} | END_BIT     // msb as name end
 449+ EB8E             >
 449+ EB8E 7F 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 449+ EB90             >Prev_Ptr        defl    Heap_Ptr
 449+ EB90             >
 449+ EB90             >mirror_Ptr      defl    $
 449+ EB90             >
 449+ EB90 B4 7C       >                dw      Dict_Ptr + 2        // xt
 449+ EB92             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ EB92             >
 449+ EB92             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ EB92             >
 449+ EB92             >//              ______________________________________________________________________
 449+ EB92             >//              Dictionary part
 449+ EB92             >
 449+ EB92             >                org     Dict_Ptr
 449+ 7CB2             >
 449+ 7CB2 90 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 449+ 7CB4             >
 449+ 7CB4             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 7CB4 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 7CB7             >
 449+ 7CB7             >
 449+ 7CB7             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 7CB7             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 7CB7             >
 449+ 7CB7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 7CB7 17 6B 80 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 450+ 7CBB 55 68
 451+ 7CBD 1D 6B 80 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 451+ 7CC1 55 68
 452+ 7CC3
 453+ 7CC3 76 6A 1D 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 453+ 7CC7 8A 69
 454+ 7CC9 AE 6A 0F 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 454+ 7CCD 17 6B 8A 69
 455+ 7CD1 B6 74                        dw      INTERPRET               // interpret
 456+ 7CD3
 457+ 7CD3 60 68 1D 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 457+ 7CD7 8A 69
 458+ 7CD9 60 68 17 6B                  dw      R_TO, BLK, STORE        // r> blk !
 458+ 7CDD 8A 69
 459+ 7CDF 4B 68                        dw      EXIT                    // ;
 460+ 7CE1
 461+ 7CE1              //  ______________________________________________________________________
 462+ 7CE1              //
 463+ 7CE1              // -->          --
 464+ 7CE1                              Colon_Def LOAD_NEXT, "-->", is_immediate
 464+ 7CE1             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 464+ 7CE1             >
 464+ 7CE1             >Dict_Ptr        defl    $
 464+ 7CE1             >
 464+ 7CE1             >//              ______________________________________________________________________
 464+ 7CE1             >//              Heap part
 464+ 7CE1             >
 464+ 7CE1             >
 464+ 7CE1             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ EB92             >
 464+ EB92             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ EB92             >Latest_Definition defl  Heap_Ptr
 464+ EB92             >
 464+ EB92             >                // dummy db directives used to calculate length of namec
 464+ EB92 2D 2D 3E    >                db      "-->"
 464+ EB95             >len_NFA         defl    $ - temp_NFA
 464+ EB95             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ EB92             >
 464+ EB92 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ EB93 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 464+ EB96             >                org     $-1                 // alter last byte of Name just above to set
 464+ EB95 BE          >                db      {b $} | END_BIT     // msb as name end
 464+ EB96             >
 464+ EB96 89 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ EB98             >Prev_Ptr        defl    Heap_Ptr
 464+ EB98             >
 464+ EB98             >mirror_Ptr      defl    $
 464+ EB98             >
 464+ EB98 E3 7C       >                dw      Dict_Ptr + 2        // xt
 464+ EB9A             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EB9A             >
 464+ EB9A             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EB9A             >
 464+ EB9A             >//              ______________________________________________________________________
 464+ EB9A             >//              Dictionary part
 464+ EB9A             >
 464+ EB9A             >                org     Dict_Ptr
 464+ 7CE1             >
 464+ 7CE1 98 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 7CE3             >
 464+ 7CE3             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7CE3 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7CE6             >
 464+ 7CE6             >
 464+ 7CE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7CE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7CE6             >
 464+ 7CE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7CE6 2C 6E                        dw      QLOADING                // ?loading
 466+ 7CE8 76 6A 1D 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 466+ 7CEC 8A 69
 467+ 7CEE AE 6A                        dw      BSCR                    // b/scr
 468+ 7CF0 17 6B 80 69                  dw      BLK, FETCH              // blk @
 469+ 7CF4 F2 68                        dw      OVER                    // over
 470+ 7CF6 34 77                        dw      MOD                     // mod
 471+ 7CF8 DA 6B                        dw      SUBTRACT                // -
 472+ 7CFA 17 6B 68 69                  dw      BLK, PLUSSTORE          // +!
 473+ 7CFE 4B 68                        dw      EXIT                    // ;
 474+ 7D00
 475+ 7D00              //  ______________________________________________________________________
 476+ 7D00              //
 477+ 7D00              // '            -- xt
 478+ 7D00                              Colon_Def TICK, "'", is_normal
 478+ 7D00             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 478+ 7D00             >
 478+ 7D00             >Dict_Ptr        defl    $
 478+ 7D00             >
 478+ 7D00             >//              ______________________________________________________________________
 478+ 7D00             >//              Heap part
 478+ 7D00             >
 478+ 7D00             >
 478+ 7D00             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ EB9A             >
 478+ EB9A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ EB9A             >Latest_Definition defl  Heap_Ptr
 478+ EB9A             >
 478+ EB9A             >                // dummy db directives used to calculate length of namec
 478+ EB9A 27          >                db      "'"
 478+ EB9B             >len_NFA         defl    $ - temp_NFA
 478+ EB9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ EB9A             >
 478+ EB9A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ EB9B 27          >                db      "'"               // name string in 7-bit ascii, but
 478+ EB9C             >                org     $-1                 // alter last byte of Name just above to set
 478+ EB9B A7          >                db      {b $} | END_BIT     // msb as name end
 478+ EB9C             >
 478+ EB9C 92 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ EB9E             >Prev_Ptr        defl    Heap_Ptr
 478+ EB9E             >
 478+ EB9E             >mirror_Ptr      defl    $
 478+ EB9E             >
 478+ EB9E 02 7D       >                dw      Dict_Ptr + 2        // xt
 478+ EBA0             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ EBA0             >
 478+ EBA0             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ EBA0             >
 478+ EBA0             >//              ______________________________________________________________________
 478+ EBA0             >//              Dictionary part
 478+ EBA0             >
 478+ EBA0             >                org     Dict_Ptr
 478+ 7D00             >
 478+ 7D00 9E 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 7D02             >
 478+ 7D02             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7D02 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7D05             >
 478+ 7D05             >
 478+ 7D05             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7D05             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7D05             >
 478+ 7D05             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7D05 F3 72                        dw      LFIND                   // -find
 480+ 7D07 70 68                        dw      ZEQUAL                  // 0=
 481+ 7D09 76 6A CF 6D                  dw      ZERO, QERROR            // 0 ?error
 482+ 7D0D FB 68                        dw      DROP                    // drop
 483+ 7D0F 4B 68                        dw      EXIT                    // ;
 484+ 7D11
 485+ 7D11              //  ______________________________________________________________________
 486+ 7D11              //
 487+ 7D11              // forget       -- cccc
 488+ 7D11                              Colon_Def FORGET, "FORGET", is_normal
 488+ 7D11             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 488+ 7D11             >
 488+ 7D11             >Dict_Ptr        defl    $
 488+ 7D11             >
 488+ 7D11             >//              ______________________________________________________________________
 488+ 7D11             >//              Heap part
 488+ 7D11             >
 488+ 7D11             >
 488+ 7D11             >                org     (Heap_Ptr & $1FFF) + $E000
 488+ EBA0             >
 488+ EBA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ EBA0             >Latest_Definition defl  Heap_Ptr
 488+ EBA0             >
 488+ EBA0             >                // dummy db directives used to calculate length of namec
 488+ EBA0 46 4F 52 47 >                db      "FORGET"
 488+ EBA4 45 54       >
 488+ EBA6             >len_NFA         defl    $ - temp_NFA
 488+ EBA6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ EBA0             >
 488+ EBA0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ EBA1 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 488+ EBA5 45 54       >
 488+ EBA7             >                org     $-1                 // alter last byte of Name just above to set
 488+ EBA6 D4          >                db      {b $} | END_BIT     // msb as name end
 488+ EBA7             >
 488+ EBA7 9A 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 488+ EBA9             >Prev_Ptr        defl    Heap_Ptr
 488+ EBA9             >
 488+ EBA9             >mirror_Ptr      defl    $
 488+ EBA9             >
 488+ EBA9 13 7D       >                dw      Dict_Ptr + 2        // xt
 488+ EBAB             >Heap_Ptr        defl    $ - $E000           // save current HP
 488+ EBAB             >
 488+ EBAB             >Current_HP      defl  $ - $E000             // used to set HP once!
 488+ EBAB             >
 488+ EBAB             >//              ______________________________________________________________________
 488+ EBAB             >//              Dictionary part
 488+ EBAB             >
 488+ EBAB             >                org     Dict_Ptr
 488+ 7D11             >
 488+ 7D11 A9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 488+ 7D13             >
 488+ 7D13             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 7D13 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 7D16             >
 488+ 7D16             >
 488+ 7D16             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 7D16             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 7D16             >
 488+ 7D16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 7D16 3B 6B 80 69                  dw      CURRENT, FETCH          // current @
 490+ 7D1A 35 6B 80 69                  dw      CONTEXT, FETCH          // context @
 491+ 7D1E DA 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 491+ 7D22 17 00 CF 6D
 492+ 7D26 02 7D 4E 6D                  dw      TICK, TO_BODY           // ' >body
 493+ 7D2A 16 69 ED 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 493+ 7D2E 80 69
 494+ 7D30 F1 6B A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 494+ 7D34 15 00 CF 6D
 495+ 7D38 16 69 83 6D                  dw      DUP, NFA                // dup nfa
 496+ 7D3C
 497+ 7D3C                          //  dw      DUP
 498+ 7D3C                          //  dw      LIT, $E000, LESS
 499+ 7D3C                          //  dw      MMU7_FETCH, ONE, EQUALS
 500+ 7D3C                          //  dw      OR_OP, NOT_OP
 501+ 7D3C                          //  dw      ZBRANCH
 502+ 7D3C                          //  dw      Forget_then - $
 503+ 7D3C
 504+ 7D3C 8C 6C AF 6C                  dw      MMU7_FETCH, FROM_FAR
 505+ 7D40 0B 6B 8A 69                  dw      HP, STORE
 506+ 7D44 16 69 78 6D                  dw      DUP, CFA, CELL_MINUS
 506+ 7D48 CB 68
 507+ 7D4A              // Forget_then:
 508+ 7D4A F3 6A 8A 69                  dw      DP, STORE               // dp !
 509+ 7D4E 8E 6D 80 69                  dw      LFA, FETCH              // lfa @
 510+ 7D52 35 6B 80 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 510+ 7D56 8A 69
 511+ 7D58 4B 68                        dw      EXIT                    // ;
 512+ 7D5A
 513+ 7D5A              //  ______________________________________________________________________
 514+ 7D5A              //
 515+ 7D5A              // marker       -- cccc
 516+ 7D5A                              Colon_Def MARKER, "MARKER", is_immediate
 516+ 7D5A             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 516+ 7D5A             >
 516+ 7D5A             >Dict_Ptr        defl    $
 516+ 7D5A             >
 516+ 7D5A             >//              ______________________________________________________________________
 516+ 7D5A             >//              Heap part
 516+ 7D5A             >
 516+ 7D5A             >
 516+ 7D5A             >                org     (Heap_Ptr & $1FFF) + $E000
 516+ EBAB             >
 516+ EBAB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ EBAB             >Latest_Definition defl  Heap_Ptr
 516+ EBAB             >
 516+ EBAB             >                // dummy db directives used to calculate length of namec
 516+ EBAB 4D 41 52 4B >                db      "MARKER"
 516+ EBAF 45 52       >
 516+ EBB1             >len_NFA         defl    $ - temp_NFA
 516+ EBB1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ EBAB             >
 516+ EBAB C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ EBAC 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 516+ EBB0 45 52       >
 516+ EBB2             >                org     $-1                 // alter last byte of Name just above to set
 516+ EBB1 D2          >                db      {b $} | END_BIT     // msb as name end
 516+ EBB2             >
 516+ EBB2 A0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 516+ EBB4             >Prev_Ptr        defl    Heap_Ptr
 516+ EBB4             >
 516+ EBB4             >mirror_Ptr      defl    $
 516+ EBB4             >
 516+ EBB4 5C 7D       >                dw      Dict_Ptr + 2        // xt
 516+ EBB6             >Heap_Ptr        defl    $ - $E000           // save current HP
 516+ EBB6             >
 516+ EBB6             >Current_HP      defl  $ - $E000             // used to set HP once!
 516+ EBB6             >
 516+ EBB6             >//              ______________________________________________________________________
 516+ EBB6             >//              Dictionary part
 516+ EBB6             >
 516+ EBB6             >                org     Dict_Ptr
 516+ 7D5A             >
 516+ 7D5A B4 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 516+ 7D5C             >
 516+ 7D5C             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7D5C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 7D5F             >
 516+ 7D5F             >
 516+ 7D5F             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 7D5F             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 7D5F             >
 516+ 7D5F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 7D5F E1 6E                        dw      CBUILDS
 518+ 7D61 F9 6A 80 69                  dw      VOC_LINK, FETCH, COMMA
 518+ 7D65 B1 6B
 519+ 7D67 3B 6B 80 69                  dw      CURRENT, FETCH, COMMA
 519+ 7D6B B1 6B
 520+ 7D6D 35 6B 80 69                  dw      CONTEXT, FETCH, COMMA
 520+ 7D71 B1 6B
 521+ 7D73 3B 6B 80 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 521+ 7D77 80 69 B1 6B
 522+ 7D7B 3F 6D 9D 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 522+ 7D7F 8E 6D 80 69
 522+ 7D83 B1 6B
 523+ 7D85 EC 6E                        dw      DOES_TO
 524+ 7D87 16 69 80 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 524+ 7D8B F9 6A 8A 69
 524+ 7D8F C7 68
 525+ 7D91 16 69 80 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 525+ 7D95 3B 6B 8A 69
 525+ 7D99 C7 68
 526+ 7D9B 16 69 80 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 526+ 7D9F 35 6B 8A 69
 526+ 7DA3 C7 68
 527+ 7DA5 16 69 80 69                  dw      DUP, FETCH
 528+ 7DA9                          //  dw      DUP, QHEAPP
 529+ 7DA9                          //  dw      ZBRANCH
 530+ 7DA9                          //  dw      Marker_then - $
 531+ 7DA9 16 69 0B 6B                  dw          DUP, HP, STORE
 531+ 7DAD 8A 69
 532+ 7DAF 9D 6D 78 6D                  dw          PFA, CFA, CELL_MINUS
 532+ 7DB3 CB 68
 533+ 7DB5              // Marker_then:
 534+ 7DB5 F3 6A 8A 69                  dw      DP, STORE, CELL_PLUS
 534+ 7DB9 C7 68
 535+ 7DBB 80 69 3B 6B                  dw      FETCH, CURRENT, FETCH, STORE
 535+ 7DBF 80 69 8A 69
 536+ 7DC3 4B 68                        dw      EXIT
 537+ 7DC5
 538+ 7DC5              //  ______________________________________________________________________
 539+ 7DC5              //
 540+ 7DC5              // spaces       n --
 541+ 7DC5                              Colon_Def SPACES, "SPACES", is_normal
 541+ 7DC5             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 541+ 7DC5             >
 541+ 7DC5             >Dict_Ptr        defl    $
 541+ 7DC5             >
 541+ 7DC5             >//              ______________________________________________________________________
 541+ 7DC5             >//              Heap part
 541+ 7DC5             >
 541+ 7DC5             >
 541+ 7DC5             >                org     (Heap_Ptr & $1FFF) + $E000
 541+ EBB6             >
 541+ EBB6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 541+ EBB6             >Latest_Definition defl  Heap_Ptr
 541+ EBB6             >
 541+ EBB6             >                // dummy db directives used to calculate length of namec
 541+ EBB6 53 50 41 43 >                db      "SPACES"
 541+ EBBA 45 53       >
 541+ EBBC             >len_NFA         defl    $ - temp_NFA
 541+ EBBC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 541+ EBB6             >
 541+ EBB6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 541+ EBB7 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 541+ EBBB 45 53       >
 541+ EBBD             >                org     $-1                 // alter last byte of Name just above to set
 541+ EBBC D3          >                db      {b $} | END_BIT     // msb as name end
 541+ EBBD             >
 541+ EBBD AB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 541+ EBBF             >Prev_Ptr        defl    Heap_Ptr
 541+ EBBF             >
 541+ EBBF             >mirror_Ptr      defl    $
 541+ EBBF             >
 541+ EBBF C7 7D       >                dw      Dict_Ptr + 2        // xt
 541+ EBC1             >Heap_Ptr        defl    $ - $E000           // save current HP
 541+ EBC1             >
 541+ EBC1             >Current_HP      defl  $ - $E000             // used to set HP once!
 541+ EBC1             >
 541+ EBC1             >//              ______________________________________________________________________
 541+ EBC1             >//              Dictionary part
 541+ EBC1             >
 541+ EBC1             >                org     Dict_Ptr
 541+ 7DC5             >
 541+ 7DC5 BF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 541+ 7DC7             >
 541+ 7DC7             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 541+ 7DC7 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 541+ 7DCA             >
 541+ 7DCA             >
 541+ 7DCA             >                endif           ; ok        // for other definitions it "points" the correct handler
 541+ 7DCA             >                // Use of "; ok" to suppress "warning[fwdref]"
 541+ 7DCA             >
 541+ 7DCA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 542+ 7DCA 76 6A 2A 6C                  dw      ZERO, MAX
 543+ 7DCE 76 6A 06 64                  dw      ZERO, C_Q_DO
 544+ 7DD2 08 00                        dw      Spaces_Leave - $
 545+ 7DD4              Spaces_Loop:
 546+ 7DD4 64 6C                        dw          SPACE
 547+ 7DD6 E7 63                        dw      C_LOOP
 548+ 7DD8 FC FF                        dw      Spaces_Loop - $
 549+ 7DDA              Spaces_Leave:
 550+ 7DDA 4B 68                        dw      EXIT                    // ;
 551+ 7DDC
 552+ 7DDC              //  ______________________________________________________________________
 553+ 7DDC              //
 554+ 7DDC              // <#           --
 555+ 7DDC                              Colon_Def BEGIN_DASH, "<#", is_normal
 555+ 7DDC             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 555+ 7DDC             >
 555+ 7DDC             >Dict_Ptr        defl    $
 555+ 7DDC             >
 555+ 7DDC             >//              ______________________________________________________________________
 555+ 7DDC             >//              Heap part
 555+ 7DDC             >
 555+ 7DDC             >
 555+ 7DDC             >                org     (Heap_Ptr & $1FFF) + $E000
 555+ EBC1             >
 555+ EBC1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 555+ EBC1             >Latest_Definition defl  Heap_Ptr
 555+ EBC1             >
 555+ EBC1             >                // dummy db directives used to calculate length of namec
 555+ EBC1 3C 23       >                db      "<#"
 555+ EBC3             >len_NFA         defl    $ - temp_NFA
 555+ EBC3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 555+ EBC1             >
 555+ EBC1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 555+ EBC2 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 555+ EBC4             >                org     $-1                 // alter last byte of Name just above to set
 555+ EBC3 A3          >                db      {b $} | END_BIT     // msb as name end
 555+ EBC4             >
 555+ EBC4 B6 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 555+ EBC6             >Prev_Ptr        defl    Heap_Ptr
 555+ EBC6             >
 555+ EBC6             >mirror_Ptr      defl    $
 555+ EBC6             >
 555+ EBC6 DE 7D       >                dw      Dict_Ptr + 2        // xt
 555+ EBC8             >Heap_Ptr        defl    $ - $E000           // save current HP
 555+ EBC8             >
 555+ EBC8             >Current_HP      defl  $ - $E000             // used to set HP once!
 555+ EBC8             >
 555+ EBC8             >//              ______________________________________________________________________
 555+ EBC8             >//              Dictionary part
 555+ EBC8             >
 555+ EBC8             >                org     Dict_Ptr
 555+ 7DDC             >
 555+ 7DDC C6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 555+ 7DDE             >
 555+ 7DDE             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 555+ 7DDE CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 555+ 7DE1             >
 555+ 7DE1             >
 555+ 7DE1             >                endif           ; ok        // for other definitions it "points" the correct handler
 555+ 7DE1             >                // Use of "; ok" to suppress "warning[fwdref]"
 555+ 7DE1             >
 555+ 7DE1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 556+ 7DE1 A0 70 65 6B                  dw      PAD, HLD, STORE
 556+ 7DE5 8A 69
 557+ 7DE7 4B 68                        dw      EXIT
 558+ 7DE9
 559+ 7DE9              //  ______________________________________________________________________
 560+ 7DE9              //
 561+ 7DE9              // #>           --
 562+ 7DE9                              Colon_Def DASH_END, "#>", is_normal
 562+ 7DE9             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 562+ 7DE9             >
 562+ 7DE9             >Dict_Ptr        defl    $
 562+ 7DE9             >
 562+ 7DE9             >//              ______________________________________________________________________
 562+ 7DE9             >//              Heap part
 562+ 7DE9             >
 562+ 7DE9             >
 562+ 7DE9             >                org     (Heap_Ptr & $1FFF) + $E000
 562+ EBC8             >
 562+ EBC8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 562+ EBC8             >Latest_Definition defl  Heap_Ptr
 562+ EBC8             >
 562+ EBC8             >                // dummy db directives used to calculate length of namec
 562+ EBC8 23 3E       >                db      "#>"
 562+ EBCA             >len_NFA         defl    $ - temp_NFA
 562+ EBCA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 562+ EBC8             >
 562+ EBC8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 562+ EBC9 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 562+ EBCB             >                org     $-1                 // alter last byte of Name just above to set
 562+ EBCA BE          >                db      {b $} | END_BIT     // msb as name end
 562+ EBCB             >
 562+ EBCB C1 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 562+ EBCD             >Prev_Ptr        defl    Heap_Ptr
 562+ EBCD             >
 562+ EBCD             >mirror_Ptr      defl    $
 562+ EBCD             >
 562+ EBCD EB 7D       >                dw      Dict_Ptr + 2        // xt
 562+ EBCF             >Heap_Ptr        defl    $ - $E000           // save current HP
 562+ EBCF             >
 562+ EBCF             >Current_HP      defl  $ - $E000             // used to set HP once!
 562+ EBCF             >
 562+ EBCF             >//              ______________________________________________________________________
 562+ EBCF             >//              Dictionary part
 562+ EBCF             >
 562+ EBCF             >                org     Dict_Ptr
 562+ 7DE9             >
 562+ 7DE9 CD 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 562+ 7DEB             >
 562+ 7DEB             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 562+ 7DEB CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 562+ 7DEE             >
 562+ 7DEE             >
 562+ 7DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 562+ 7DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 562+ 7DEE             >
 562+ 7DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 563+ 7DEE 4B 69                        dw      TWO_DROP
 564+ 7DF0 65 6B 80 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 564+ 7DF4 A0 70 F2 68
 564+ 7DF8 DA 6B
 565+ 7DFA 4B 68                        dw      EXIT
 566+ 7DFC
 567+ 7DFC              //  ______________________________________________________________________
 568+ 7DFC              //
 569+ 7DFC              // sign         n d -- d
 570+ 7DFC                              Colon_Def SIGN, "SIGN", is_normal
 570+ 7DFC             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 570+ 7DFC             >
 570+ 7DFC             >Dict_Ptr        defl    $
 570+ 7DFC             >
 570+ 7DFC             >//              ______________________________________________________________________
 570+ 7DFC             >//              Heap part
 570+ 7DFC             >
 570+ 7DFC             >
 570+ 7DFC             >                org     (Heap_Ptr & $1FFF) + $E000
 570+ EBCF             >
 570+ EBCF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 570+ EBCF             >Latest_Definition defl  Heap_Ptr
 570+ EBCF             >
 570+ EBCF             >                // dummy db directives used to calculate length of namec
 570+ EBCF 53 49 47 4E >                db      "SIGN"
 570+ EBD3             >len_NFA         defl    $ - temp_NFA
 570+ EBD3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 570+ EBCF             >
 570+ EBCF 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 570+ EBD0 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 570+ EBD4             >                org     $-1                 // alter last byte of Name just above to set
 570+ EBD3 CE          >                db      {b $} | END_BIT     // msb as name end
 570+ EBD4             >
 570+ EBD4 C8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 570+ EBD6             >Prev_Ptr        defl    Heap_Ptr
 570+ EBD6             >
 570+ EBD6             >mirror_Ptr      defl    $
 570+ EBD6             >
 570+ EBD6 FE 7D       >                dw      Dict_Ptr + 2        // xt
 570+ EBD8             >Heap_Ptr        defl    $ - $E000           // save current HP
 570+ EBD8             >
 570+ EBD8             >Current_HP      defl  $ - $E000             // used to set HP once!
 570+ EBD8             >
 570+ EBD8             >//              ______________________________________________________________________
 570+ EBD8             >//              Dictionary part
 570+ EBD8             >
 570+ EBD8             >                org     Dict_Ptr
 570+ 7DFC             >
 570+ 7DFC D6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 570+ 7DFE             >
 570+ 7DFE             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 570+ 7DFE CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 570+ 7E01             >
 570+ 7E01             >
 570+ 7E01             >                endif           ; ok        // for other definitions it "points" the correct handler
 570+ 7E01             >                // Use of "; ok" to suppress "warning[fwdref]"
 570+ 7E01             >
 570+ 7E01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 571+ 7E01 81 68                        dw      ZLESS
 572+ 7E03 F3 63                        dw      ZBRANCH
 573+ 7E05 08 00                        dw      Sign_Endif - $
 574+ 7E07 A3 63 2D 00                  dw          LIT, 45, HOLD
 574+ 7E0B 8D 70
 575+ 7E0D              Sign_Endif:
 576+ 7E0D 4B 68                        dw      EXIT
 577+ 7E0F
 578+ 7E0F              //  ______________________________________________________________________
 579+ 7E0F              //
 580+ 7E0F              // #           d1 -- d2
 581+ 7E0F                              Colon_Def DASH, "#", is_normal
 581+ 7E0F             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 581+ 7E0F             >
 581+ 7E0F             >Dict_Ptr        defl    $
 581+ 7E0F             >
 581+ 7E0F             >//              ______________________________________________________________________
 581+ 7E0F             >//              Heap part
 581+ 7E0F             >
 581+ 7E0F             >
 581+ 7E0F             >                org     (Heap_Ptr & $1FFF) + $E000
 581+ EBD8             >
 581+ EBD8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 581+ EBD8             >Latest_Definition defl  Heap_Ptr
 581+ EBD8             >
 581+ EBD8             >                // dummy db directives used to calculate length of namec
 581+ EBD8 23          >                db      "#"
 581+ EBD9             >len_NFA         defl    $ - temp_NFA
 581+ EBD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 581+ EBD8             >
 581+ EBD8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 581+ EBD9 23          >                db      "#"               // name string in 7-bit ascii, but
 581+ EBDA             >                org     $-1                 // alter last byte of Name just above to set
 581+ EBD9 A3          >                db      {b $} | END_BIT     // msb as name end
 581+ EBDA             >
 581+ EBDA CF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 581+ EBDC             >Prev_Ptr        defl    Heap_Ptr
 581+ EBDC             >
 581+ EBDC             >mirror_Ptr      defl    $
 581+ EBDC             >
 581+ EBDC 11 7E       >                dw      Dict_Ptr + 2        // xt
 581+ EBDE             >Heap_Ptr        defl    $ - $E000           // save current HP
 581+ EBDE             >
 581+ EBDE             >Current_HP      defl  $ - $E000             // used to set HP once!
 581+ EBDE             >
 581+ EBDE             >//              ______________________________________________________________________
 581+ EBDE             >//              Dictionary part
 581+ EBDE             >
 581+ EBDE             >                org     Dict_Ptr
 581+ 7E0F             >
 581+ 7E0F DC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 581+ 7E11             >
 581+ 7E11             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 581+ 7E11 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 581+ 7E14             >
 581+ 7E14             >
 581+ 7E14             >                endif           ; ok        // for other definitions it "points" the correct handler
 581+ 7E14             >                // Use of "; ok" to suppress "warning[fwdref]"
 581+ 7E14             >
 581+ 7E14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 582+ 7E14 47 6B 80 69                  dw      BASE, FETCH
 583+ 7E18
 584+ 7E18 55 68                        dw      TO_R                    // >r           ( ud1 )
 585+ 7E1A 76 6A 6B 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 585+ 7E1E D8 67
 586+ 7E20 60 68 0F 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 586+ 7E24 55 68
 587+ 7E26 D8 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 588+ 7E28 60 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 589+ 7E2A
 590+ 7E2A 1D 69                        dw      ROT
 591+ 7E2C A3 63 09 00                  dw      LIT, 9, OVER, LESS
 591+ 7E30 F2 68 FF 6B
 592+ 7E34 F3 63                        dw      ZBRANCH
 593+ 7E36 08 00                        dw      Dash_Endif - $
 594+ 7E38 A3 63 07 00                  dw          LIT, 7, PLUS
 594+ 7E3C 98 68
 595+ 7E3E              Dash_Endif:
 596+ 7E3E
 597+ 7E3E A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 597+ 7E42 98 68 8D 70
 598+ 7E46 4B 68                        dw      EXIT
 599+ 7E48
 600+ 7E48              //  ______________________________________________________________________
 601+ 7E48              //
 602+ 7E48              // #s           d1 -- d2
 603+ 7E48                              Colon_Def DASHES, "#S", is_normal
 603+ 7E48             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 603+ 7E48             >
 603+ 7E48             >Dict_Ptr        defl    $
 603+ 7E48             >
 603+ 7E48             >//              ______________________________________________________________________
 603+ 7E48             >//              Heap part
 603+ 7E48             >
 603+ 7E48             >
 603+ 7E48             >                org     (Heap_Ptr & $1FFF) + $E000
 603+ EBDE             >
 603+ EBDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 603+ EBDE             >Latest_Definition defl  Heap_Ptr
 603+ EBDE             >
 603+ EBDE             >                // dummy db directives used to calculate length of namec
 603+ EBDE 23 53       >                db      "#S"
 603+ EBE0             >len_NFA         defl    $ - temp_NFA
 603+ EBE0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 603+ EBDE             >
 603+ EBDE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 603+ EBDF 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 603+ EBE1             >                org     $-1                 // alter last byte of Name just above to set
 603+ EBE0 D3          >                db      {b $} | END_BIT     // msb as name end
 603+ EBE1             >
 603+ EBE1 D8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 603+ EBE3             >Prev_Ptr        defl    Heap_Ptr
 603+ EBE3             >
 603+ EBE3             >mirror_Ptr      defl    $
 603+ EBE3             >
 603+ EBE3 4A 7E       >                dw      Dict_Ptr + 2        // xt
 603+ EBE5             >Heap_Ptr        defl    $ - $E000           // save current HP
 603+ EBE5             >
 603+ EBE5             >Current_HP      defl  $ - $E000             // used to set HP once!
 603+ EBE5             >
 603+ EBE5             >//              ______________________________________________________________________
 603+ EBE5             >//              Dictionary part
 603+ EBE5             >
 603+ EBE5             >                org     Dict_Ptr
 603+ 7E48             >
 603+ 7E48 E3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 603+ 7E4A             >
 603+ 7E4A             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 603+ 7E4A CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 603+ 7E4D             >
 603+ 7E4D             >
 603+ 7E4D             >                endif           ; ok        // for other definitions it "points" the correct handler
 603+ 7E4D             >                // Use of "; ok" to suppress "warning[fwdref]"
 603+ 7E4D             >
 603+ 7E4D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 604+ 7E4D              Dashes_Begin:
 605+ 7E4D 11 7E 5E 69                  dw      DASH, TWO_DUP
 606+ 7E51 1A 68 70 68                  dw          OR_OP, ZEQUAL
 607+ 7E55 F3 63                        dw      ZBRANCH
 608+ 7E57 F6 FF                        dw      Dashes_Begin - $
 609+ 7E59 4B 68                        dw      EXIT
 610+ 7E5B
 611+ 7E5B              //  ______________________________________________________________________
 612+ 7E5B              //
 613+ 7E5B              // d.r          d n --
 614+ 7E5B                              Colon_Def D_DOT_R, "D.R", is_normal
 614+ 7E5B             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 614+ 7E5B             >
 614+ 7E5B             >Dict_Ptr        defl    $
 614+ 7E5B             >
 614+ 7E5B             >//              ______________________________________________________________________
 614+ 7E5B             >//              Heap part
 614+ 7E5B             >
 614+ 7E5B             >
 614+ 7E5B             >                org     (Heap_Ptr & $1FFF) + $E000
 614+ EBE5             >
 614+ EBE5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ EBE5             >Latest_Definition defl  Heap_Ptr
 614+ EBE5             >
 614+ EBE5             >                // dummy db directives used to calculate length of namec
 614+ EBE5 44 2E 52    >                db      "D.R"
 614+ EBE8             >len_NFA         defl    $ - temp_NFA
 614+ EBE8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ EBE5             >
 614+ EBE5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ EBE6 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 614+ EBE9             >                org     $-1                 // alter last byte of Name just above to set
 614+ EBE8 D2          >                db      {b $} | END_BIT     // msb as name end
 614+ EBE9             >
 614+ EBE9 DE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 614+ EBEB             >Prev_Ptr        defl    Heap_Ptr
 614+ EBEB             >
 614+ EBEB             >mirror_Ptr      defl    $
 614+ EBEB             >
 614+ EBEB 5D 7E       >                dw      Dict_Ptr + 2        // xt
 614+ EBED             >Heap_Ptr        defl    $ - $E000           // save current HP
 614+ EBED             >
 614+ EBED             >Current_HP      defl  $ - $E000             // used to set HP once!
 614+ EBED             >
 614+ EBED             >//              ______________________________________________________________________
 614+ EBED             >//              Dictionary part
 614+ EBED             >
 614+ EBED             >                org     Dict_Ptr
 614+ 7E5B             >
 614+ 7E5B EB 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 614+ 7E5D             >
 614+ 7E5D             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 7E5D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 614+ 7E60             >
 614+ 7E60             >
 614+ 7E60             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 7E60             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 7E60             >
 614+ 7E60             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 7E60 55 68                        dw      TO_R
 616+ 7E62 06 69 7B 76                  dw      TUCK, DABS
 617+ 7E66 DE 7D 4A 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 617+ 7E6A 1D 69 FE 7D
 617+ 7E6E EB 7D
 618+ 7E70 60 68                        dw      R_TO
 619+ 7E72 F2 68 DA 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 619+ 7E76 C7 7D 5D 6F
 620+ 7E7A 4B 68                        dw      EXIT
 621+ 7E7C
 622+ 7E7C              //  ______________________________________________________________________
 623+ 7E7C              //
 624+ 7E7C              // .r           n1 n2 --
 625+ 7E7C                              Colon_Def DOT_R, ".R", is_normal
 625+ 7E7C             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 625+ 7E7C             >
 625+ 7E7C             >Dict_Ptr        defl    $
 625+ 7E7C             >
 625+ 7E7C             >//              ______________________________________________________________________
 625+ 7E7C             >//              Heap part
 625+ 7E7C             >
 625+ 7E7C             >
 625+ 7E7C             >                org     (Heap_Ptr & $1FFF) + $E000
 625+ EBED             >
 625+ EBED             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 625+ EBED             >Latest_Definition defl  Heap_Ptr
 625+ EBED             >
 625+ EBED             >                // dummy db directives used to calculate length of namec
 625+ EBED 2E 52       >                db      ".R"
 625+ EBEF             >len_NFA         defl    $ - temp_NFA
 625+ EBEF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 625+ EBED             >
 625+ EBED 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 625+ EBEE 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 625+ EBF0             >                org     $-1                 // alter last byte of Name just above to set
 625+ EBEF D2          >                db      {b $} | END_BIT     // msb as name end
 625+ EBF0             >
 625+ EBF0 E5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 625+ EBF2             >Prev_Ptr        defl    Heap_Ptr
 625+ EBF2             >
 625+ EBF2             >mirror_Ptr      defl    $
 625+ EBF2             >
 625+ EBF2 7E 7E       >                dw      Dict_Ptr + 2        // xt
 625+ EBF4             >Heap_Ptr        defl    $ - $E000           // save current HP
 625+ EBF4             >
 625+ EBF4             >Current_HP      defl  $ - $E000             // used to set HP once!
 625+ EBF4             >
 625+ EBF4             >//              ______________________________________________________________________
 625+ EBF4             >//              Dictionary part
 625+ EBF4             >
 625+ EBF4             >                org     Dict_Ptr
 625+ 7E7C             >
 625+ 7E7C F2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 625+ 7E7E             >
 625+ 7E7E             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 625+ 7E7E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 625+ 7E81             >
 625+ 7E81             >
 625+ 7E81             >                endif           ; ok        // for other definitions it "points" the correct handler
 625+ 7E81             >                // Use of "; ok" to suppress "warning[fwdref]"
 625+ 7E81             >
 625+ 7E81             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 626+ 7E81 55 68                        dw      TO_R
 627+ 7E83 CF 6B 60 68                  dw      S_TO_D, R_TO
 628+ 7E87 5D 7E                        dw      D_DOT_R
 629+ 7E89 4B 68                        dw      EXIT
 630+ 7E8B
 631+ 7E8B              //  ______________________________________________________________________
 632+ 7E8B              //
 633+ 7E8B              // d.           d --
 634+ 7E8B                              Colon_Def D_DOT, "D.", is_normal
 634+ 7E8B             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 634+ 7E8B             >
 634+ 7E8B             >Dict_Ptr        defl    $
 634+ 7E8B             >
 634+ 7E8B             >//              ______________________________________________________________________
 634+ 7E8B             >//              Heap part
 634+ 7E8B             >
 634+ 7E8B             >
 634+ 7E8B             >                org     (Heap_Ptr & $1FFF) + $E000
 634+ EBF4             >
 634+ EBF4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 634+ EBF4             >Latest_Definition defl  Heap_Ptr
 634+ EBF4             >
 634+ EBF4             >                // dummy db directives used to calculate length of namec
 634+ EBF4 44 2E       >                db      "D."
 634+ EBF6             >len_NFA         defl    $ - temp_NFA
 634+ EBF6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 634+ EBF4             >
 634+ EBF4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 634+ EBF5 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 634+ EBF7             >                org     $-1                 // alter last byte of Name just above to set
 634+ EBF6 AE          >                db      {b $} | END_BIT     // msb as name end
 634+ EBF7             >
 634+ EBF7 ED 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 634+ EBF9             >Prev_Ptr        defl    Heap_Ptr
 634+ EBF9             >
 634+ EBF9             >mirror_Ptr      defl    $
 634+ EBF9             >
 634+ EBF9 8D 7E       >                dw      Dict_Ptr + 2        // xt
 634+ EBFB             >Heap_Ptr        defl    $ - $E000           // save current HP
 634+ EBFB             >
 634+ EBFB             >Current_HP      defl  $ - $E000             // used to set HP once!
 634+ EBFB             >
 634+ EBFB             >//              ______________________________________________________________________
 634+ EBFB             >//              Dictionary part
 634+ EBFB             >
 634+ EBFB             >                org     Dict_Ptr
 634+ 7E8B             >
 634+ 7E8B F9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 634+ 7E8D             >
 634+ 7E8D             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 634+ 7E8D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 634+ 7E90             >
 634+ 7E90             >
 634+ 7E90             >                endif           ; ok        // for other definitions it "points" the correct handler
 634+ 7E90             >                // Use of "; ok" to suppress "warning[fwdref]"
 634+ 7E90             >
 634+ 7E90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 635+ 7E90 76 6A 5D 7E                  dw      ZERO, D_DOT_R, SPACE
 635+ 7E94 64 6C
 636+ 7E96 4B 68                        dw      EXIT
 637+ 7E98
 638+ 7E98              //  ______________________________________________________________________
 639+ 7E98              //
 640+ 7E98              // .            n --
 641+ 7E98                              Colon_Def DOT, ".", is_normal
 641+ 7E98             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 641+ 7E98             >
 641+ 7E98             >Dict_Ptr        defl    $
 641+ 7E98             >
 641+ 7E98             >//              ______________________________________________________________________
 641+ 7E98             >//              Heap part
 641+ 7E98             >
 641+ 7E98             >
 641+ 7E98             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ EBFB             >
 641+ EBFB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ EBFB             >Latest_Definition defl  Heap_Ptr
 641+ EBFB             >
 641+ EBFB             >                // dummy db directives used to calculate length of namec
 641+ EBFB 2E          >                db      "."
 641+ EBFC             >len_NFA         defl    $ - temp_NFA
 641+ EBFC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ EBFB             >
 641+ EBFB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ EBFC 2E          >                db      "."               // name string in 7-bit ascii, but
 641+ EBFD             >                org     $-1                 // alter last byte of Name just above to set
 641+ EBFC AE          >                db      {b $} | END_BIT     // msb as name end
 641+ EBFD             >
 641+ EBFD F4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ EBFF             >Prev_Ptr        defl    Heap_Ptr
 641+ EBFF             >
 641+ EBFF             >mirror_Ptr      defl    $
 641+ EBFF             >
 641+ EBFF 9A 7E       >                dw      Dict_Ptr + 2        // xt
 641+ EC01             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ EC01             >
 641+ EC01             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ EC01             >
 641+ EC01             >//              ______________________________________________________________________
 641+ EC01             >//              Dictionary part
 641+ EC01             >
 641+ EC01             >                org     Dict_Ptr
 641+ 7E98             >
 641+ 7E98 FF 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 7E9A             >
 641+ 7E9A             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 7E9A CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 7E9D             >
 641+ 7E9D             >
 641+ 7E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 7E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 7E9D             >
 641+ 7E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 7E9D CF 6B 8D 7E                  dw      S_TO_D, D_DOT
 643+ 7EA1 4B 68                        dw      EXIT
 644+ 7EA3
 645+ 7EA3              //  ______________________________________________________________________
 646+ 7EA3              //
 647+ 7EA3              // ?            n --
 648+ 7EA3                              Colon_Def QUESTION, "?", is_normal
 648+ 7EA3             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 648+ 7EA3             >
 648+ 7EA3             >Dict_Ptr        defl    $
 648+ 7EA3             >
 648+ 7EA3             >//              ______________________________________________________________________
 648+ 7EA3             >//              Heap part
 648+ 7EA3             >
 648+ 7EA3             >
 648+ 7EA3             >                org     (Heap_Ptr & $1FFF) + $E000
 648+ EC01             >
 648+ EC01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 648+ EC01             >Latest_Definition defl  Heap_Ptr
 648+ EC01             >
 648+ EC01             >                // dummy db directives used to calculate length of namec
 648+ EC01 3F          >                db      "?"
 648+ EC02             >len_NFA         defl    $ - temp_NFA
 648+ EC02             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 648+ EC01             >
 648+ EC01 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 648+ EC02 3F          >                db      "?"               // name string in 7-bit ascii, but
 648+ EC03             >                org     $-1                 // alter last byte of Name just above to set
 648+ EC02 BF          >                db      {b $} | END_BIT     // msb as name end
 648+ EC03             >
 648+ EC03 FB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 648+ EC05             >Prev_Ptr        defl    Heap_Ptr
 648+ EC05             >
 648+ EC05             >mirror_Ptr      defl    $
 648+ EC05             >
 648+ EC05 A5 7E       >                dw      Dict_Ptr + 2        // xt
 648+ EC07             >Heap_Ptr        defl    $ - $E000           // save current HP
 648+ EC07             >
 648+ EC07             >Current_HP      defl  $ - $E000             // used to set HP once!
 648+ EC07             >
 648+ EC07             >//              ______________________________________________________________________
 648+ EC07             >//              Dictionary part
 648+ EC07             >
 648+ EC07             >                org     Dict_Ptr
 648+ 7EA3             >
 648+ 7EA3 05 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 648+ 7EA5             >
 648+ 7EA5             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 648+ 7EA5 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 648+ 7EA8             >
 648+ 7EA8             >
 648+ 7EA8             >                endif           ; ok        // for other definitions it "points" the correct handler
 648+ 7EA8             >                // Use of "; ok" to suppress "warning[fwdref]"
 648+ 7EA8             >
 648+ 7EA8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 649+ 7EA8 80 69 9A 7E                  dw      FETCH, DOT
 650+ 7EAC 4B 68                        dw      EXIT
 651+ 7EAE
 652+ 7EAE              //  ______________________________________________________________________
 653+ 7EAE              //
 654+ 7EAE              // u.           u --
 655+ 7EAE                              Colon_Def U_DOT, "U.", is_normal
 655+ 7EAE             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 655+ 7EAE             >
 655+ 7EAE             >Dict_Ptr        defl    $
 655+ 7EAE             >
 655+ 7EAE             >//              ______________________________________________________________________
 655+ 7EAE             >//              Heap part
 655+ 7EAE             >
 655+ 7EAE             >
 655+ 7EAE             >                org     (Heap_Ptr & $1FFF) + $E000
 655+ EC07             >
 655+ EC07             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 655+ EC07             >Latest_Definition defl  Heap_Ptr
 655+ EC07             >
 655+ EC07             >                // dummy db directives used to calculate length of namec
 655+ EC07 55 2E       >                db      "U."
 655+ EC09             >len_NFA         defl    $ - temp_NFA
 655+ EC09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 655+ EC07             >
 655+ EC07 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 655+ EC08 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 655+ EC0A             >                org     $-1                 // alter last byte of Name just above to set
 655+ EC09 AE          >                db      {b $} | END_BIT     // msb as name end
 655+ EC0A             >
 655+ EC0A 01 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 655+ EC0C             >Prev_Ptr        defl    Heap_Ptr
 655+ EC0C             >
 655+ EC0C             >mirror_Ptr      defl    $
 655+ EC0C             >
 655+ EC0C B0 7E       >                dw      Dict_Ptr + 2        // xt
 655+ EC0E             >Heap_Ptr        defl    $ - $E000           // save current HP
 655+ EC0E             >
 655+ EC0E             >Current_HP      defl  $ - $E000             // used to set HP once!
 655+ EC0E             >
 655+ EC0E             >//              ______________________________________________________________________
 655+ EC0E             >//              Dictionary part
 655+ EC0E             >
 655+ EC0E             >                org     Dict_Ptr
 655+ 7EAE             >
 655+ 7EAE 0C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 655+ 7EB0             >
 655+ 7EB0             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 655+ 7EB0 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 655+ 7EB3             >
 655+ 7EB3             >
 655+ 7EB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 655+ 7EB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 655+ 7EB3             >
 655+ 7EB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 656+ 7EB3 76 6A 8D 7E                  dw      ZERO, D_DOT
 657+ 7EB7 4B 68                        dw      EXIT
 658+ 7EB9
 659+ 7EB9              //  ______________________________________________________________________
 660+ 7EB9              //
 661+ 7EB9              // words        --
 662+ 7EB9                              Colon_Def WORDS, "WORDS", is_normal
 662+ 7EB9             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 662+ 7EB9             >
 662+ 7EB9             >Dict_Ptr        defl    $
 662+ 7EB9             >
 662+ 7EB9             >//              ______________________________________________________________________
 662+ 7EB9             >//              Heap part
 662+ 7EB9             >
 662+ 7EB9             >
 662+ 7EB9             >                org     (Heap_Ptr & $1FFF) + $E000
 662+ EC0E             >
 662+ EC0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 662+ EC0E             >Latest_Definition defl  Heap_Ptr
 662+ EC0E             >
 662+ EC0E             >                // dummy db directives used to calculate length of namec
 662+ EC0E 57 4F 52 44 >                db      "WORDS"
 662+ EC12 53          >
 662+ EC13             >len_NFA         defl    $ - temp_NFA
 662+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 662+ EC0E             >
 662+ EC0E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 662+ EC0F 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 662+ EC13 53          >
 662+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 662+ EC13 D3          >                db      {b $} | END_BIT     // msb as name end
 662+ EC14             >
 662+ EC14 07 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 662+ EC16             >Prev_Ptr        defl    Heap_Ptr
 662+ EC16             >
 662+ EC16             >mirror_Ptr      defl    $
 662+ EC16             >
 662+ EC16 BB 7E       >                dw      Dict_Ptr + 2        // xt
 662+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 662+ EC18             >
 662+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 662+ EC18             >
 662+ EC18             >//              ______________________________________________________________________
 662+ EC18             >//              Dictionary part
 662+ EC18             >
 662+ EC18             >                org     Dict_Ptr
 662+ 7EB9             >
 662+ 7EB9 16 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 662+ 7EBB             >
 662+ 7EBB             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 662+ 7EBB CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 662+ 7EBE             >
 662+ 7EBE             >
 662+ 7EBE             >                endif           ; ok        // for other definitions it "points" the correct handler
 662+ 7EBE             >                // Use of "; ok" to suppress "warning[fwdref]"
 662+ 7EBE             >
 662+ 7EBE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 663+ 7EBE A3 63 80 00                  dw      LIT, 128, OUT, STORE
 663+ 7EC2 23 6B 8A 69
 664+ 7EC6 35 6B 80 69                  dw      CONTEXT, FETCH, FETCH
 664+ 7ECA 80 69
 665+ 7ECC              Words_Begin:
 666+ 7ECC D5 6C                        dw          FAR // Q TO HEAP
 667+ 7ECE 16 69 95 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 667+ 7ED2 A3 63 1F 00
 667+ 7ED6 0B 68
 668+ 7ED8 23 6B 80 69                  dw          OUT, FETCH, PLUS
 668+ 7EDC 98 68
 669+ 7EDE A0 6A FF 6B                  dw          CL, LESS, ZEQUAL
 669+ 7EE2 70 68
 670+ 7EE4 F3 63                        dw          ZBRANCH
 671+ 7EE6 0A 00                        dw          Words_Endif - $
 672+ 7EE8 AF 65 76 6A                  dw              CR, ZERO, OUT, STORE
 672+ 7EEC 23 6B 8A 69
 673+ 7EF0              Words_Endif:
 674+ 7EF0 16 69 41 73                  dw          DUP, ID_DOT
 675+ 7EF4 7D 6A 6F 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 675+ 7EF8 B1 68 80 69
 676+ 7EFC 16 69 70 68                  dw          DUP, ZEQUAL
 677+ 7F00 A6 66 1A 68                  dw          QTERMINAL, OR_OP
 678+ 7F04 F3 63                        dw      ZBRANCH
 679+ 7F06 C6 FF                        dw      Words_Begin - $
 680+ 7F08 FB 68                        dw      DROP
 681+ 7F0A 4B 68                        dw      EXIT
 682+ 7F0C
 683+ 7F0C              //  ______________________________________________________________________
 684+ 7F0C              //
 685+ 7F0C              // list         n --
 686+ 7F0C                              Colon_Def LIST, "LIST", is_normal
 686+ 7F0C             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 686+ 7F0C             >
 686+ 7F0C             >Dict_Ptr        defl    $
 686+ 7F0C             >
 686+ 7F0C             >//              ______________________________________________________________________
 686+ 7F0C             >//              Heap part
 686+ 7F0C             >
 686+ 7F0C             >
 686+ 7F0C             >                org     (Heap_Ptr & $1FFF) + $E000
 686+ EC18             >
 686+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 686+ EC18             >Latest_Definition defl  Heap_Ptr
 686+ EC18             >
 686+ EC18             >                // dummy db directives used to calculate length of namec
 686+ EC18 4C 49 53 54 >                db      "LIST"
 686+ EC1C             >len_NFA         defl    $ - temp_NFA
 686+ EC1C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 686+ EC18             >
 686+ EC18 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 686+ EC19 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 686+ EC1D             >                org     $-1                 // alter last byte of Name just above to set
 686+ EC1C D4          >                db      {b $} | END_BIT     // msb as name end
 686+ EC1D             >
 686+ EC1D 0E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 686+ EC1F             >Prev_Ptr        defl    Heap_Ptr
 686+ EC1F             >
 686+ EC1F             >mirror_Ptr      defl    $
 686+ EC1F             >
 686+ EC1F 0E 7F       >                dw      Dict_Ptr + 2        // xt
 686+ EC21             >Heap_Ptr        defl    $ - $E000           // save current HP
 686+ EC21             >
 686+ EC21             >Current_HP      defl  $ - $E000             // used to set HP once!
 686+ EC21             >
 686+ EC21             >//              ______________________________________________________________________
 686+ EC21             >//              Dictionary part
 686+ EC21             >
 686+ EC21             >                org     Dict_Ptr
 686+ 7F0C             >
 686+ 7F0C 1F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 686+ 7F0E             >
 686+ 7F0E             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 686+ 7F0E CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 686+ 7F11             >
 686+ 7F11             >
 686+ 7F11             >                endif           ; ok        // for other definitions it "points" the correct handler
 686+ 7F11             >                // Use of "; ok" to suppress "warning[fwdref]"
 686+ 7F11             >
 686+ 7F11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 687+ 7F11 A6 6E AF 65                  dw      DECIMAL, CR
 688+ 7F15 16 69 29 6B                  dw      DUP, SCR, STORE
 688+ 7F19 8A 69
 689+ 7F1B FA 70                        dw      C_DOT_QUOTE
 690+ 7F1D 05 53 63 72                  db      5, "Scr# "
 690+ 7F21 23 20
 691+ 7F23 9A 7E                        dw      DOT
 692+ 7F25 B5 6A 76 6A                  dw      LSCR, ZERO, C_DO
 692+ 7F29 2E 64
 693+ 7F2B              List_Loop:
 694+ 7F2B AF 65                        dw          CR
 695+ 7F2D 34 64 8B 6A                  dw          I, THREE
 696+ 7F31 7E 7E 64 6C                  dw          DOT_R, SPACE
 697+ 7F35 34 64 29 6B                  dw          I, SCR, FETCH, DOT_LINE
 697+ 7F39 80 69 76 77
 698+ 7F3D A6 66                        dw          QTERMINAL
 699+ 7F3F F3 63                        dw          ZBRANCH
 700+ 7F41 06 00                        dw          List_Endif - $
 701+ 7F43 FC 63                        dw              C_LEAVE
 702+ 7F45 06 00                        dw              List_Leave - $
 703+ 7F47              List_Endif:
 704+ 7F47 E7 63                        dw      C_LOOP
 705+ 7F49 E2 FF                        dw      List_Loop - $
 706+ 7F4B              List_Leave:
 707+ 7F4B AF 65                        dw      CR
 708+ 7F4D 4B 68                        dw      EXIT
 709+ 7F4F
 710+ 7F4F              //  ______________________________________________________________________
 711+ 7F4F              //
 712+ 7F4F              // index        n1 n2 --
 713+ 7F4F                              Colon_Def INDEX, "INDEX", is_normal
 713+ 7F4F             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 713+ 7F4F             >
 713+ 7F4F             >Dict_Ptr        defl    $
 713+ 7F4F             >
 713+ 7F4F             >//              ______________________________________________________________________
 713+ 7F4F             >//              Heap part
 713+ 7F4F             >
 713+ 7F4F             >
 713+ 7F4F             >                org     (Heap_Ptr & $1FFF) + $E000
 713+ EC21             >
 713+ EC21             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 713+ EC21             >Latest_Definition defl  Heap_Ptr
 713+ EC21             >
 713+ EC21             >                // dummy db directives used to calculate length of namec
 713+ EC21 49 4E 44 45 >                db      "INDEX"
 713+ EC25 58          >
 713+ EC26             >len_NFA         defl    $ - temp_NFA
 713+ EC26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 713+ EC21             >
 713+ EC21 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 713+ EC22 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 713+ EC26 58          >
 713+ EC27             >                org     $-1                 // alter last byte of Name just above to set
 713+ EC26 D8          >                db      {b $} | END_BIT     // msb as name end
 713+ EC27             >
 713+ EC27 18 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 713+ EC29             >Prev_Ptr        defl    Heap_Ptr
 713+ EC29             >
 713+ EC29             >mirror_Ptr      defl    $
 713+ EC29             >
 713+ EC29 51 7F       >                dw      Dict_Ptr + 2        // xt
 713+ EC2B             >Heap_Ptr        defl    $ - $E000           // save current HP
 713+ EC2B             >
 713+ EC2B             >Current_HP      defl  $ - $E000             // used to set HP once!
 713+ EC2B             >
 713+ EC2B             >//              ______________________________________________________________________
 713+ EC2B             >//              Dictionary part
 713+ EC2B             >
 713+ EC2B             >                org     Dict_Ptr
 713+ 7F4F             >
 713+ 7F4F 29 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 713+ 7F51             >
 713+ 7F51             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 713+ 7F51 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 713+ 7F54             >
 713+ 7F54             >
 713+ 7F54             >                endif           ; ok        // for other definitions it "points" the correct handler
 713+ 7F54             >                // Use of "; ok" to suppress "warning[fwdref]"
 713+ 7F54             >
 713+ 7F54             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 714+ 7F54 B1 68 0F 69                  dw      ONE_PLUS, SWAP, C_DO
 714+ 7F58 2E 64
 715+ 7F5A              Index_Loop:
 716+ 7F5A AF 65 34 64                  dw          CR, I, THREE
 716+ 7F5E 8B 6A
 717+ 7F60 7E 7E 64 6C                  dw          DOT_R, SPACE
 718+ 7F64 76 6A 34 64                  dw          ZERO, I, DOT_LINE
 718+ 7F68 76 77
 719+ 7F6A A6 66                        dw          QTERMINAL
 720+ 7F6C F3 63                        dw          ZBRANCH
 721+ 7F6E 06 00                        dw          Index_Endif - $
 722+ 7F70 FC 63                        dw              C_LEAVE
 723+ 7F72 06 00                        dw              Index_Leave - $
 724+ 7F74              Index_Endif:
 725+ 7F74 E7 63                        dw      C_LOOP
 726+ 7F76 E4 FF                        dw      Index_Loop - $
 727+ 7F78              Index_Leave:
 728+ 7F78 AF 65                        dw      CR
 729+ 7F7A 4B 68                        dw      EXIT
 730+ 7F7C
 731+ 7F7C              //  ______________________________________________________________________
 732+ 7F7C              //
 733+ 7F7C              // cls          --
 734+ 7F7C
 735+ 7F7C              //              Colon_Def CLS, "CLS", is_normal
 736+ 7F7C              //              dw      LIT, $0E, EMITC
 737+ 7F7C              //              dw      EXIT
 738+ 7F7C
 739+ 7F7C                              New_Def CLS, "CLS", is_code, is_normal
 739+ 7F7C             >
 739+ 7F7C             >Dict_Ptr        defl    $
 739+ 7F7C             >
 739+ 7F7C             >//              ______________________________________________________________________
 739+ 7F7C             >//              Heap part
 739+ 7F7C             >
 739+ 7F7C             >
 739+ 7F7C             >                org     (Heap_Ptr & $1FFF) + $E000
 739+ EC2B             >
 739+ EC2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 739+ EC2B             >Latest_Definition defl  Heap_Ptr
 739+ EC2B             >
 739+ EC2B             >                // dummy db directives used to calculate length of namec
 739+ EC2B 43 4C 53    >                db      "CLS"
 739+ EC2E             >len_NFA         defl    $ - temp_NFA
 739+ EC2E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 739+ EC2B             >
 739+ EC2B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 739+ EC2C 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 739+ EC2F             >                org     $-1                 // alter last byte of Name just above to set
 739+ EC2E D3          >                db      {b $} | END_BIT     // msb as name end
 739+ EC2F             >
 739+ EC2F 21 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 739+ EC31             >Prev_Ptr        defl    Heap_Ptr
 739+ EC31             >
 739+ EC31             >mirror_Ptr      defl    $
 739+ EC31             >
 739+ EC31 7E 7F       >                dw      Dict_Ptr + 2        // xt
 739+ EC33             >Heap_Ptr        defl    $ - $E000           // save current HP
 739+ EC33             >
 739+ EC33             >Current_HP      defl  $ - $E000             // used to set HP once!
 739+ EC33             >
 739+ EC33             >//              ______________________________________________________________________
 739+ EC33             >//              Dictionary part
 739+ EC33             >
 739+ EC33             >                org     Dict_Ptr
 739+ 7F7C             >
 739+ 7F7C 31 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 739+ 7F7E             >
 739+ 7F7E             >CLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 739+ 7F7E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 739+ 7F7E ~           >
 739+ 7F7E ~           >
 739+ 7F7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 739+ 7F7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 739+ 7F7E             >
 739+ 7F7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 740+ 7F7E C5                           push    bc
 741+ 7F7F D5                           push    de
 742+ 7F80 DD E5                        push    ix
 743+ 7F82 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 744+ 7F85 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 745+ 7F87 AF                           xor     a           // query current status
 746+ 7F88 CF                           rst     8
 747+ 7F89 94                           db      $94         // carry flag set on success
 748+ 7F8A A7                           and     a
 749+ 7F8B 20 05                        jr      nz, CLS_No_Layer_0
 750+ 7F8D CD AF 0D                       call    $0DAF
 751+ 7F90 18 03                        jr      CLS_Layer_0
 752+ 7F92              CLS_No_Layer_0:
 753+ 7F92 3E 0E                          ld      a, $0E
 754+ 7F94 D7                             rst     $10
 755+ 7F95              CLS_Layer_0:
 756+ 7F95 DD E1                        pop     ix
 757+ 7F97 D1                           pop     de
 758+ 7F98 C1                           pop     bc
 759+ 7F99                              next
 759+ 7F99 DD E9       >                jp      (ix)
 760+ 7F9B
 761+ 7F9B              //  ______________________________________________________________________
 762+ 7F9B              //
 763+ 7F9B              // splash       --
 764+ 7F9B              //              Colon_Def SPLASH, "SPLASH", is_normal
 765+ 7F9B              //              dw      CLS
 766+ 7F9B              //              dw      C_DOT_QUOTE
 767+ 7F9B              //              db      87
 768+ 7F9B              //              db      "v-Forth 1.7 NextZXOS version", 13    // 29
 769+ 7F9B              //              db      "Heap Vocabulary - build 20240815", 13  // 33
 770+ 7F9B              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 771+ 7F9B              //              dw      EXIT
 772+ 7F9B
 773+ 7F9B              //  ______________________________________________________________________
 774+ 7F9B              //
 775+ 7F9B              // splash       --
 776+ 7F9B                              Colon_Def SPLASH, "SPLASH", is_normal
 776+ 7F9B             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 776+ 7F9B             >
 776+ 7F9B             >Dict_Ptr        defl    $
 776+ 7F9B             >
 776+ 7F9B             >//              ______________________________________________________________________
 776+ 7F9B             >//              Heap part
 776+ 7F9B             >
 776+ 7F9B             >
 776+ 7F9B             >                org     (Heap_Ptr & $1FFF) + $E000
 776+ EC33             >
 776+ EC33             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 776+ EC33             >Latest_Definition defl  Heap_Ptr
 776+ EC33             >
 776+ EC33             >                // dummy db directives used to calculate length of namec
 776+ EC33 53 50 4C 41 >                db      "SPLASH"
 776+ EC37 53 48       >
 776+ EC39             >len_NFA         defl    $ - temp_NFA
 776+ EC39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 776+ EC33             >
 776+ EC33 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 776+ EC34 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 776+ EC38 53 48       >
 776+ EC3A             >                org     $-1                 // alter last byte of Name just above to set
 776+ EC39 C8          >                db      {b $} | END_BIT     // msb as name end
 776+ EC3A             >
 776+ EC3A 2B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 776+ EC3C             >Prev_Ptr        defl    Heap_Ptr
 776+ EC3C             >
 776+ EC3C             >mirror_Ptr      defl    $
 776+ EC3C             >
 776+ EC3C 9D 7F       >                dw      Dict_Ptr + 2        // xt
 776+ EC3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 776+ EC3E             >
 776+ EC3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 776+ EC3E             >
 776+ EC3E             >//              ______________________________________________________________________
 776+ EC3E             >//              Dictionary part
 776+ EC3E             >
 776+ EC3E             >                org     Dict_Ptr
 776+ 7F9B             >
 776+ 7F9B 3C 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 776+ 7F9D             >
 776+ 7F9D             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 776+ 7F9D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 776+ 7FA0             >
 776+ 7FA0             >
 776+ 7FA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 776+ 7FA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 776+ 7FA0             >
 776+ 7FA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 777+ 7FA0 7E 7F                        dw      CLS
 778+ 7FA2 A3 63 02 00                  dw      LIT, Splash_Ptr
 779+ 7FA6 D5 6C                        dw      FAR
 780+ 7FA8 09 6F 5D 6F                  dw      COUNT, TYPE
 781+ 7FAC 4B 68                        dw      EXIT
 782+ 7FAE
 783+ 7FAE              //  ______________________________________________________________________
 784+ 7FAE              //
 785+ 7FAE              // video        --
 786+ 7FAE                              Colon_Def VIDEO, "VIDEO", is_normal
 786+ 7FAE             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 786+ 7FAE             >
 786+ 7FAE             >Dict_Ptr        defl    $
 786+ 7FAE             >
 786+ 7FAE             >//              ______________________________________________________________________
 786+ 7FAE             >//              Heap part
 786+ 7FAE             >
 786+ 7FAE             >
 786+ 7FAE             >                org     (Heap_Ptr & $1FFF) + $E000
 786+ EC3E             >
 786+ EC3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 786+ EC3E             >Latest_Definition defl  Heap_Ptr
 786+ EC3E             >
 786+ EC3E             >                // dummy db directives used to calculate length of namec
 786+ EC3E 56 49 44 45 >                db      "VIDEO"
 786+ EC42 4F          >
 786+ EC43             >len_NFA         defl    $ - temp_NFA
 786+ EC43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 786+ EC3E             >
 786+ EC3E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 786+ EC3F 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 786+ EC43 4F          >
 786+ EC44             >                org     $-1                 // alter last byte of Name just above to set
 786+ EC43 CF          >                db      {b $} | END_BIT     // msb as name end
 786+ EC44             >
 786+ EC44 33 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 786+ EC46             >Prev_Ptr        defl    Heap_Ptr
 786+ EC46             >
 786+ EC46             >mirror_Ptr      defl    $
 786+ EC46             >
 786+ EC46 B0 7F       >                dw      Dict_Ptr + 2        // xt
 786+ EC48             >Heap_Ptr        defl    $ - $E000           // save current HP
 786+ EC48             >
 786+ EC48             >Current_HP      defl  $ - $E000             // used to set HP once!
 786+ EC48             >
 786+ EC48             >//              ______________________________________________________________________
 786+ EC48             >//              Dictionary part
 786+ EC48             >
 786+ EC48             >                org     Dict_Ptr
 786+ 7FAE             >
 786+ 7FAE 46 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 786+ 7FB0             >
 786+ 7FB0             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 786+ 7FB0 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 786+ 7FB3             >
 786+ 7FB3             >
 786+ 7FB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 786+ 7FB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 786+ 7FB3             >
 786+ 7FB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 787+ 7FB3 84 6A 16 69                  dw      TWO, DUP, DEVICE, STORE
 787+ 7FB7 AB 77 8A 69
 788+ 7FBB BA 66                        dw      SELECT
 789+ 7FBD 4B 68                        dw      EXIT
 790+ 7FBF
 791+ 7FBF              //  ______________________________________________________________________
 792+ 7FBF              //
 793+ 7FBF              // autoexec     --
 794+ 7FBF              // this word is called the first time the Forth system boot to
 795+ 7FBF              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 796+ 7FBF                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 796+ 7FBF             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 796+ 7FBF             >
 796+ 7FBF             >Dict_Ptr        defl    $
 796+ 7FBF             >
 796+ 7FBF             >//              ______________________________________________________________________
 796+ 7FBF             >//              Heap part
 796+ 7FBF             >
 796+ 7FBF             >
 796+ 7FBF             >                org     (Heap_Ptr & $1FFF) + $E000
 796+ EC48             >
 796+ EC48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 796+ EC48             >Latest_Definition defl  Heap_Ptr
 796+ EC48             >
 796+ EC48             >                // dummy db directives used to calculate length of namec
 796+ EC48 41 55 54 4F >                db      "AUTOEXEC"
 796+ EC4C 45 58 45 43 >
 796+ EC50             >len_NFA         defl    $ - temp_NFA
 796+ EC50             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 796+ EC48             >
 796+ EC48 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 796+ EC49 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 796+ EC4D 45 58 45 43 >
 796+ EC51             >                org     $-1                 // alter last byte of Name just above to set
 796+ EC50 C3          >                db      {b $} | END_BIT     // msb as name end
 796+ EC51             >
 796+ EC51 3E 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 796+ EC53             >Prev_Ptr        defl    Heap_Ptr
 796+ EC53             >
 796+ EC53             >mirror_Ptr      defl    $
 796+ EC53             >
 796+ EC53 C1 7F       >                dw      Dict_Ptr + 2        // xt
 796+ EC55             >Heap_Ptr        defl    $ - $E000           // save current HP
 796+ EC55             >
 796+ EC55             >Current_HP      defl  $ - $E000             // used to set HP once!
 796+ EC55             >
 796+ EC55             >//              ______________________________________________________________________
 796+ EC55             >//              Dictionary part
 796+ EC55             >
 796+ EC55             >                org     Dict_Ptr
 796+ 7FBF             >
 796+ 7FBF 53 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 796+ 7FC1             >
 796+ 7FC1             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 796+ 7FC1 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 796+ 7FC4             >
 796+ 7FC4             >
 796+ 7FC4             >                endif           ; ok        // for other definitions it "points" the correct handler
 796+ 7FC4             >                // Use of "; ok" to suppress "warning[fwdref]"
 796+ 7FC4             >
 796+ 7FC4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 797+ 7FC4 A3 63 0B 00                  dw      LIT, 11
 798+ 7FC8 A3 63 3D 6A                  dw      LIT, NOOP
 799+ 7FCC A3 63 B0 75                  dw      LIT, Autoexec_Ptr
 800+ 7FD0 8A 69                        dw      STORE
 801+ 7FD2 B4 7C                        dw      LOAD
 802+ 7FD4 57 75                        dw      QUIT
 803+ 7FD6 4B 68                        dw      EXIT
 804+ 7FD8
 805+ 7FD8
 806+ 7FD8              //  ______________________________________________________________________
 807+ 7FD8              //
 808+ 7FD8              // bye     --
 809+ 7FD8              //
 810+ 7FD8                              Colon_Def BYE, "BYE", is_normal
 810+ 7FD8             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 810+ 7FD8             >
 810+ 7FD8             >Dict_Ptr        defl    $
 810+ 7FD8             >
 810+ 7FD8             >//              ______________________________________________________________________
 810+ 7FD8             >//              Heap part
 810+ 7FD8             >
 810+ 7FD8             >
 810+ 7FD8             >                org     (Heap_Ptr & $1FFF) + $E000
 810+ EC55             >
 810+ EC55             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 810+ EC55             >Latest_Definition defl  Heap_Ptr
 810+ EC55             >
 810+ EC55             >                // dummy db directives used to calculate length of namec
 810+ EC55 42 59 45    >                db      "BYE"
 810+ EC58             >len_NFA         defl    $ - temp_NFA
 810+ EC58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 810+ EC55             >
 810+ EC55 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 810+ EC56 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 810+ EC59             >                org     $-1                 // alter last byte of Name just above to set
 810+ EC58 C5          >                db      {b $} | END_BIT     // msb as name end
 810+ EC59             >
 810+ EC59 48 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 810+ EC5B             >Prev_Ptr        defl    Heap_Ptr
 810+ EC5B             >
 810+ EC5B             >mirror_Ptr      defl    $
 810+ EC5B             >
 810+ EC5B DA 7F       >                dw      Dict_Ptr + 2        // xt
 810+ EC5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 810+ EC5D             >
 810+ EC5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 810+ EC5D             >
 810+ EC5D             >//              ______________________________________________________________________
 810+ EC5D             >//              Dictionary part
 810+ EC5D             >
 810+ EC5D             >                org     Dict_Ptr
 810+ 7FD8             >
 810+ 7FD8 5B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 810+ 7FDA             >
 810+ 7FDA             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 810+ 7FDA CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 810+ 7FDD             >
 810+ 7FDD             >
 810+ 7FDD             >                endif           ; ok        // for other definitions it "points" the correct handler
 810+ 7FDD             >                // Use of "; ok" to suppress "warning[fwdref]"
 810+ 7FDD             >
 810+ 7FDD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 811+ 7FDD C6 79                        dw      FLUSH
 812+ 7FDF 14 79                        dw      EMPTY_BUFFERS
 813+ 7FE1 00 78 80 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 813+ 7FE5 F4 66 FB 68
 814+ 7FE9 76 6A BC 6A                  dw      ZERO, PLUS_ORIGIN
 815+ 7FED 40 76                        dw      BASIC
 816+ 7FEF
 817+ 7FEF              //  ______________________________________________________________________
 818+ 7FEF              //
 819+ 7FEF              // invv     --
 820+ 7FEF              //
 821+ 7FEF              //              Colon_Def INVV, "INVV", is_normal
 822+ 7FEF              //              dw      LIT, 20, EMITC, ONE, EMITC
 823+ 7FEF              //              dw      EXIT
 824+ 7FEF
 825+ 7FEF              //  ______________________________________________________________________
 826+ 7FEF              //
 827+ 7FEF              // truv     --
 828+ 7FEF              //
 829+ 7FEF              //              Colon_Def TRUV, "TRUV", is_normal
 830+ 7FEF              //              dw      LIT, 20, EMITC, ZERO, EMITC
 831+ 7FEF              //              dw      EXIT
 832+ 7FEF
 833+ 7FEF              //  ______________________________________________________________________
 834+ 7FEF              //
 835+ 7FEF              // mark     --
 836+ 7FEF              //
 837+ 7FEF              //              Colon_Def MARK, "MARK", is_normal
 838+ 7FEF              //              dw      INVV, TYPE, TRUV
 839+ 7FEF              //              dw      EXIT
 840+ 7FEF
 841+ 7FEF              //  ______________________________________________________________________
 842+ 7FEF              //
 843+ 7FEF              // back     --
 844+ 7FEF              //
 845+ 7FEF                              Colon_Def BACK, "BACK", is_normal
 845+ 7FEF             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 845+ 7FEF             >
 845+ 7FEF             >Dict_Ptr        defl    $
 845+ 7FEF             >
 845+ 7FEF             >//              ______________________________________________________________________
 845+ 7FEF             >//              Heap part
 845+ 7FEF             >
 845+ 7FEF             >
 845+ 7FEF             >                org     (Heap_Ptr & $1FFF) + $E000
 845+ EC5D             >
 845+ EC5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 845+ EC5D             >Latest_Definition defl  Heap_Ptr
 845+ EC5D             >
 845+ EC5D             >                // dummy db directives used to calculate length of namec
 845+ EC5D 42 41 43 4B >                db      "BACK"
 845+ EC61             >len_NFA         defl    $ - temp_NFA
 845+ EC61             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 845+ EC5D             >
 845+ EC5D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 845+ EC5E 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 845+ EC62             >                org     $-1                 // alter last byte of Name just above to set
 845+ EC61 CB          >                db      {b $} | END_BIT     // msb as name end
 845+ EC62             >
 845+ EC62 55 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 845+ EC64             >Prev_Ptr        defl    Heap_Ptr
 845+ EC64             >
 845+ EC64             >mirror_Ptr      defl    $
 845+ EC64             >
 845+ EC64 F1 7F       >                dw      Dict_Ptr + 2        // xt
 845+ EC66             >Heap_Ptr        defl    $ - $E000           // save current HP
 845+ EC66             >
 845+ EC66             >Current_HP      defl  $ - $E000             // used to set HP once!
 845+ EC66             >
 845+ EC66             >//              ______________________________________________________________________
 845+ EC66             >//              Dictionary part
 845+ EC66             >
 845+ EC66             >                org     Dict_Ptr
 845+ 7FEF             >
 845+ 7FEF 64 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 845+ 7FF1             >
 845+ 7FF1             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 845+ 7FF1 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 845+ 7FF4             >
 845+ 7FF4             >
 845+ 7FF4             >                endif           ; ok        // for other definitions it "points" the correct handler
 845+ 7FF4             >                // Use of "; ok" to suppress "warning[fwdref]"
 845+ 7FF4             >
 845+ 7FF4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 846+ 7FF4 9B 6B DA 6B                  dw      HERE, SUBTRACT, COMMA
 846+ 7FF8 B1 6B
 847+ 7FFA 4B 68                        dw      EXIT
 848+ 7FFC
 849+ 7FFC              //  ______________________________________________________________________
 850+ 7FFC              //
 851+ 7FFC              // if          ( -- a 2 ) \ compile-time
 852+ 7FFC              // IF ... THEN
 853+ 7FFC              // IF ... ELSE ... ENDIF
 854+ 7FFC                              Colon_Def IF, "IF", is_immediate
 854+ 7FFC             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 854+ 7FFC             >
 854+ 7FFC             >Dict_Ptr        defl    $
 854+ 7FFC             >
 854+ 7FFC             >//              ______________________________________________________________________
 854+ 7FFC             >//              Heap part
 854+ 7FFC             >
 854+ 7FFC             >
 854+ 7FFC             >                org     (Heap_Ptr & $1FFF) + $E000
 854+ EC66             >
 854+ EC66             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ EC66             >Latest_Definition defl  Heap_Ptr
 854+ EC66             >
 854+ EC66             >                // dummy db directives used to calculate length of namec
 854+ EC66 49 46       >                db      "IF"
 854+ EC68             >len_NFA         defl    $ - temp_NFA
 854+ EC68             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ EC66             >
 854+ EC66 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ EC67 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 854+ EC69             >                org     $-1                 // alter last byte of Name just above to set
 854+ EC68 C6          >                db      {b $} | END_BIT     // msb as name end
 854+ EC69             >
 854+ EC69 5D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 854+ EC6B             >Prev_Ptr        defl    Heap_Ptr
 854+ EC6B             >
 854+ EC6B             >mirror_Ptr      defl    $
 854+ EC6B             >
 854+ EC6B FE 7F       >                dw      Dict_Ptr + 2        // xt
 854+ EC6D             >Heap_Ptr        defl    $ - $E000           // save current HP
 854+ EC6D             >
 854+ EC6D             >Current_HP      defl  $ - $E000             // used to set HP once!
 854+ EC6D             >
 854+ EC6D             >//              ______________________________________________________________________
 854+ EC6D             >//              Dictionary part
 854+ EC6D             >
 854+ EC6D             >                org     Dict_Ptr
 854+ 7FFC             >
 854+ 7FFC 6B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 854+ 7FFE             >
 854+ 7FFE             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 7FFE CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 8001             >
 854+ 8001             >
 854+ 8001             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 8001             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 8001             >
 854+ 8001             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 8001 3F 6E F3 63                  dw      COMPILE, ZBRANCH
 856+ 8005 9B 6B 76 6A                  dw      HERE, ZERO, COMMA
 856+ 8009 B1 6B
 857+ 800B 84 6A                        dw      TWO
 858+ 800D 4B 68                        dw      EXIT
 859+ 800F
 860+ 800F              //  ______________________________________________________________________
 861+ 800F              //
 862+ 800F              // then        ( a 2 -- ) \ compile-time
 863+ 800F              //
 864+ 800F                              Colon_Def THEN, "THEN", is_immediate
 864+ 800F             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 864+ 800F             >
 864+ 800F             >Dict_Ptr        defl    $
 864+ 800F             >
 864+ 800F             >//              ______________________________________________________________________
 864+ 800F             >//              Heap part
 864+ 800F             >
 864+ 800F             >
 864+ 800F             >                org     (Heap_Ptr & $1FFF) + $E000
 864+ EC6D             >
 864+ EC6D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ EC6D             >Latest_Definition defl  Heap_Ptr
 864+ EC6D             >
 864+ EC6D             >                // dummy db directives used to calculate length of namec
 864+ EC6D 54 48 45 4E >                db      "THEN"
 864+ EC71             >len_NFA         defl    $ - temp_NFA
 864+ EC71             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ EC6D             >
 864+ EC6D C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ EC6E 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 864+ EC72             >                org     $-1                 // alter last byte of Name just above to set
 864+ EC71 CE          >                db      {b $} | END_BIT     // msb as name end
 864+ EC72             >
 864+ EC72 66 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 864+ EC74             >Prev_Ptr        defl    Heap_Ptr
 864+ EC74             >
 864+ EC74             >mirror_Ptr      defl    $
 864+ EC74             >
 864+ EC74 11 80       >                dw      Dict_Ptr + 2        // xt
 864+ EC76             >Heap_Ptr        defl    $ - $E000           // save current HP
 864+ EC76             >
 864+ EC76             >Current_HP      defl  $ - $E000             // used to set HP once!
 864+ EC76             >
 864+ EC76             >//              ______________________________________________________________________
 864+ EC76             >//              Dictionary part
 864+ EC76             >
 864+ EC76             >                org     Dict_Ptr
 864+ 800F             >
 864+ 800F 74 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 864+ 8011             >
 864+ 8011             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 8011 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 864+ 8014             >
 864+ 8014             >
 864+ 8014             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 8014             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 8014             >
 864+ 8014             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 8014 E4 6D                        dw      QCOMP
 866+ 8016 84 6A 08 6E                  dw      TWO, QPAIRS
 867+ 801A 9B 6B F2 68                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 867+ 801E DA 6B 0F 69
 867+ 8022 8A 69
 868+ 8024 4B 68                        dw      EXIT
 869+ 8026
 870+ 8026              //  ______________________________________________________________________
 871+ 8026              //
 872+ 8026              // endif       ( a 2 -- ) \ compile-time
 873+ 8026              //
 874+ 8026                              Colon_Def ENDIF, "ENDIF", is_immediate
 874+ 8026             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 874+ 8026             >
 874+ 8026             >Dict_Ptr        defl    $
 874+ 8026             >
 874+ 8026             >//              ______________________________________________________________________
 874+ 8026             >//              Heap part
 874+ 8026             >
 874+ 8026             >
 874+ 8026             >                org     (Heap_Ptr & $1FFF) + $E000
 874+ EC76             >
 874+ EC76             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 874+ EC76             >Latest_Definition defl  Heap_Ptr
 874+ EC76             >
 874+ EC76             >                // dummy db directives used to calculate length of namec
 874+ EC76 45 4E 44 49 >                db      "ENDIF"
 874+ EC7A 46          >
 874+ EC7B             >len_NFA         defl    $ - temp_NFA
 874+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 874+ EC76             >
 874+ EC76 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 874+ EC77 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 874+ EC7B 46          >
 874+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 874+ EC7B C6          >                db      {b $} | END_BIT     // msb as name end
 874+ EC7C             >
 874+ EC7C 6D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 874+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 874+ EC7E             >
 874+ EC7E             >mirror_Ptr      defl    $
 874+ EC7E             >
 874+ EC7E 28 80       >                dw      Dict_Ptr + 2        // xt
 874+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 874+ EC80             >
 874+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 874+ EC80             >
 874+ EC80             >//              ______________________________________________________________________
 874+ EC80             >//              Dictionary part
 874+ EC80             >
 874+ EC80             >                org     Dict_Ptr
 874+ 8026             >
 874+ 8026 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 874+ 8028             >
 874+ 8028             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 874+ 8028 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 874+ 802B             >
 874+ 802B             >
 874+ 802B             >                endif           ; ok        // for other definitions it "points" the correct handler
 874+ 802B             >                // Use of "; ok" to suppress "warning[fwdref]"
 874+ 802B             >
 874+ 802B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 875+ 802B 11 80                        dw      THEN
 876+ 802D 4B 68                        dw      EXIT
 877+ 802F
 878+ 802F              //  ______________________________________________________________________
 879+ 802F              //
 880+ 802F              // else        ( a1 2 -- a2 2 ) \ compile-time
 881+ 802F              //
 882+ 802F                              Colon_Def ELSE, "ELSE", is_immediate
 882+ 802F             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 882+ 802F             >
 882+ 802F             >Dict_Ptr        defl    $
 882+ 802F             >
 882+ 802F             >//              ______________________________________________________________________
 882+ 802F             >//              Heap part
 882+ 802F             >
 882+ 802F             >
 882+ 802F             >                org     (Heap_Ptr & $1FFF) + $E000
 882+ EC80             >
 882+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 882+ EC80             >Latest_Definition defl  Heap_Ptr
 882+ EC80             >
 882+ EC80             >                // dummy db directives used to calculate length of namec
 882+ EC80 45 4C 53 45 >                db      "ELSE"
 882+ EC84             >len_NFA         defl    $ - temp_NFA
 882+ EC84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 882+ EC80             >
 882+ EC80 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 882+ EC81 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 882+ EC85             >                org     $-1                 // alter last byte of Name just above to set
 882+ EC84 C5          >                db      {b $} | END_BIT     // msb as name end
 882+ EC85             >
 882+ EC85 76 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 882+ EC87             >Prev_Ptr        defl    Heap_Ptr
 882+ EC87             >
 882+ EC87             >mirror_Ptr      defl    $
 882+ EC87             >
 882+ EC87 31 80       >                dw      Dict_Ptr + 2        // xt
 882+ EC89             >Heap_Ptr        defl    $ - $E000           // save current HP
 882+ EC89             >
 882+ EC89             >Current_HP      defl  $ - $E000             // used to set HP once!
 882+ EC89             >
 882+ EC89             >//              ______________________________________________________________________
 882+ EC89             >//              Dictionary part
 882+ EC89             >
 882+ EC89             >                org     Dict_Ptr
 882+ 802F             >
 882+ 802F 87 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 882+ 8031             >
 882+ 8031             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 882+ 8031 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 882+ 8034             >
 882+ 8034             >
 882+ 8034             >                endif           ; ok        // for other definitions it "points" the correct handler
 882+ 8034             >                // Use of "; ok" to suppress "warning[fwdref]"
 882+ 8034             >
 882+ 8034             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 883+ 8034 E4 6D                        dw      QCOMP
 884+ 8036 84 6A 08 6E                  dw      TWO, QPAIRS
 885+ 803A 3F 6E EF 63                  dw      COMPILE, BRANCH
 886+ 803E 9B 6B 76 6A                  dw      HERE, ZERO, COMMA
 886+ 8042 B1 6B
 887+ 8044 0F 69 84 6A                  dw      SWAP, TWO, THEN
 887+ 8048 11 80
 888+ 804A 84 6A                        dw      TWO
 889+ 804C 4B 68                        dw      EXIT
 890+ 804E
 891+ 804E              //  ______________________________________________________________________
 892+ 804E              //
 893+ 804E              // begin        ( -- a 1 ) \ compile-time
 894+ 804E              // BEGIN ... AGAIN
 895+ 804E              // BEGIN ... f UNTIL
 896+ 804E              // BEGIN ... f WHILE ... REPEAT
 897+ 804E                              Colon_Def BEGIN, "BEGIN", is_immediate
 897+ 804E             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 897+ 804E             >
 897+ 804E             >Dict_Ptr        defl    $
 897+ 804E             >
 897+ 804E             >//              ______________________________________________________________________
 897+ 804E             >//              Heap part
 897+ 804E             >
 897+ 804E             >
 897+ 804E             >                org     (Heap_Ptr & $1FFF) + $E000
 897+ EC89             >
 897+ EC89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 897+ EC89             >Latest_Definition defl  Heap_Ptr
 897+ EC89             >
 897+ EC89             >                // dummy db directives used to calculate length of namec
 897+ EC89 42 45 47 49 >                db      "BEGIN"
 897+ EC8D 4E          >
 897+ EC8E             >len_NFA         defl    $ - temp_NFA
 897+ EC8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 897+ EC89             >
 897+ EC89 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 897+ EC8A 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 897+ EC8E 4E          >
 897+ EC8F             >                org     $-1                 // alter last byte of Name just above to set
 897+ EC8E CE          >                db      {b $} | END_BIT     // msb as name end
 897+ EC8F             >
 897+ EC8F 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 897+ EC91             >Prev_Ptr        defl    Heap_Ptr
 897+ EC91             >
 897+ EC91             >mirror_Ptr      defl    $
 897+ EC91             >
 897+ EC91 50 80       >                dw      Dict_Ptr + 2        // xt
 897+ EC93             >Heap_Ptr        defl    $ - $E000           // save current HP
 897+ EC93             >
 897+ EC93             >Current_HP      defl  $ - $E000             // used to set HP once!
 897+ EC93             >
 897+ EC93             >//              ______________________________________________________________________
 897+ EC93             >//              Dictionary part
 897+ EC93             >
 897+ EC93             >                org     Dict_Ptr
 897+ 804E             >
 897+ 804E 91 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 897+ 8050             >
 897+ 8050             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 897+ 8050 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 897+ 8053             >
 897+ 8053             >
 897+ 8053             >                endif           ; ok        // for other definitions it "points" the correct handler
 897+ 8053             >                // Use of "; ok" to suppress "warning[fwdref]"
 897+ 8053             >
 897+ 8053             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 898+ 8053 E4 6D                        dw      QCOMP
 899+ 8055 9B 6B                        dw      HERE
 900+ 8057 84 6A                        dw      TWO
 901+ 8059 4B 68                        dw      EXIT
 902+ 805B
 903+ 805B              //  ______________________________________________________________________
 904+ 805B              //
 905+ 805B              // again        ( a 1 -- ) \ compile-time
 906+ 805B                              Colon_Def AGAIN, "AGAIN", is_immediate
 906+ 805B             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 906+ 805B             >
 906+ 805B             >Dict_Ptr        defl    $
 906+ 805B             >
 906+ 805B             >//              ______________________________________________________________________
 906+ 805B             >//              Heap part
 906+ 805B             >
 906+ 805B             >
 906+ 805B             >                org     (Heap_Ptr & $1FFF) + $E000
 906+ EC93             >
 906+ EC93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 906+ EC93             >Latest_Definition defl  Heap_Ptr
 906+ EC93             >
 906+ EC93             >                // dummy db directives used to calculate length of namec
 906+ EC93 41 47 41 49 >                db      "AGAIN"
 906+ EC97 4E          >
 906+ EC98             >len_NFA         defl    $ - temp_NFA
 906+ EC98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 906+ EC93             >
 906+ EC93 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 906+ EC94 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 906+ EC98 4E          >
 906+ EC99             >                org     $-1                 // alter last byte of Name just above to set
 906+ EC98 CE          >                db      {b $} | END_BIT     // msb as name end
 906+ EC99             >
 906+ EC99 89 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 906+ EC9B             >Prev_Ptr        defl    Heap_Ptr
 906+ EC9B             >
 906+ EC9B             >mirror_Ptr      defl    $
 906+ EC9B             >
 906+ EC9B 5D 80       >                dw      Dict_Ptr + 2        // xt
 906+ EC9D             >Heap_Ptr        defl    $ - $E000           // save current HP
 906+ EC9D             >
 906+ EC9D             >Current_HP      defl  $ - $E000             // used to set HP once!
 906+ EC9D             >
 906+ EC9D             >//              ______________________________________________________________________
 906+ EC9D             >//              Dictionary part
 906+ EC9D             >
 906+ EC9D             >                org     Dict_Ptr
 906+ 805B             >
 906+ 805B 9B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 906+ 805D             >
 906+ 805D             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 906+ 805D CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 906+ 8060             >
 906+ 8060             >
 906+ 8060             >                endif           ; ok        // for other definitions it "points" the correct handler
 906+ 8060             >                // Use of "; ok" to suppress "warning[fwdref]"
 906+ 8060             >
 906+ 8060             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 907+ 8060 E4 6D                        dw      QCOMP
 908+ 8062 84 6A 08 6E                  dw      TWO, QPAIRS
 909+ 8066 3F 6E EF 63                  dw      COMPILE, BRANCH
 910+ 806A F1 7F                        dw      BACK
 911+ 806C 4B 68                        dw      EXIT
 912+ 806E
 913+ 806E              //  ______________________________________________________________________
 914+ 806E              //
 915+ 806E              // until        ( a 1 -- ) \ compile-time
 916+ 806E                              Colon_Def UNTIL, "UNTIL", is_immediate
 916+ 806E             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 916+ 806E             >
 916+ 806E             >Dict_Ptr        defl    $
 916+ 806E             >
 916+ 806E             >//              ______________________________________________________________________
 916+ 806E             >//              Heap part
 916+ 806E             >
 916+ 806E             >
 916+ 806E             >                org     (Heap_Ptr & $1FFF) + $E000
 916+ EC9D             >
 916+ EC9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 916+ EC9D             >Latest_Definition defl  Heap_Ptr
 916+ EC9D             >
 916+ EC9D             >                // dummy db directives used to calculate length of namec
 916+ EC9D 55 4E 54 49 >                db      "UNTIL"
 916+ ECA1 4C          >
 916+ ECA2             >len_NFA         defl    $ - temp_NFA
 916+ ECA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 916+ EC9D             >
 916+ EC9D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 916+ EC9E 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 916+ ECA2 4C          >
 916+ ECA3             >                org     $-1                 // alter last byte of Name just above to set
 916+ ECA2 CC          >                db      {b $} | END_BIT     // msb as name end
 916+ ECA3             >
 916+ ECA3 93 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 916+ ECA5             >Prev_Ptr        defl    Heap_Ptr
 916+ ECA5             >
 916+ ECA5             >mirror_Ptr      defl    $
 916+ ECA5             >
 916+ ECA5 70 80       >                dw      Dict_Ptr + 2        // xt
 916+ ECA7             >Heap_Ptr        defl    $ - $E000           // save current HP
 916+ ECA7             >
 916+ ECA7             >Current_HP      defl  $ - $E000             // used to set HP once!
 916+ ECA7             >
 916+ ECA7             >//              ______________________________________________________________________
 916+ ECA7             >//              Dictionary part
 916+ ECA7             >
 916+ ECA7             >                org     Dict_Ptr
 916+ 806E             >
 916+ 806E A5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 916+ 8070             >
 916+ 8070             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 916+ 8070 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 916+ 8073             >
 916+ 8073             >
 916+ 8073             >                endif           ; ok        // for other definitions it "points" the correct handler
 916+ 8073             >                // Use of "; ok" to suppress "warning[fwdref]"
 916+ 8073             >
 916+ 8073             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 917+ 8073 E4 6D                        dw      QCOMP
 918+ 8075 84 6A 08 6E                  dw      TWO, QPAIRS
 919+ 8079 3F 6E F3 63                  dw      COMPILE, ZBRANCH
 920+ 807D F1 7F                        dw      BACK
 921+ 807F 4B 68                        dw      EXIT
 922+ 8081
 923+ 8081              //  ______________________________________________________________________
 924+ 8081              //
 925+ 8081              // end          ( a 1 -- ) \ compile-time
 926+ 8081                              Colon_Def END, "END", is_immediate
 926+ 8081             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 926+ 8081             >
 926+ 8081             >Dict_Ptr        defl    $
 926+ 8081             >
 926+ 8081             >//              ______________________________________________________________________
 926+ 8081             >//              Heap part
 926+ 8081             >
 926+ 8081             >
 926+ 8081             >                org     (Heap_Ptr & $1FFF) + $E000
 926+ ECA7             >
 926+ ECA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 926+ ECA7             >Latest_Definition defl  Heap_Ptr
 926+ ECA7             >
 926+ ECA7             >                // dummy db directives used to calculate length of namec
 926+ ECA7 45 4E 44    >                db      "END"
 926+ ECAA             >len_NFA         defl    $ - temp_NFA
 926+ ECAA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 926+ ECA7             >
 926+ ECA7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 926+ ECA8 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 926+ ECAB             >                org     $-1                 // alter last byte of Name just above to set
 926+ ECAA C4          >                db      {b $} | END_BIT     // msb as name end
 926+ ECAB             >
 926+ ECAB 9D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 926+ ECAD             >Prev_Ptr        defl    Heap_Ptr
 926+ ECAD             >
 926+ ECAD             >mirror_Ptr      defl    $
 926+ ECAD             >
 926+ ECAD 83 80       >                dw      Dict_Ptr + 2        // xt
 926+ ECAF             >Heap_Ptr        defl    $ - $E000           // save current HP
 926+ ECAF             >
 926+ ECAF             >Current_HP      defl  $ - $E000             // used to set HP once!
 926+ ECAF             >
 926+ ECAF             >//              ______________________________________________________________________
 926+ ECAF             >//              Dictionary part
 926+ ECAF             >
 926+ ECAF             >                org     Dict_Ptr
 926+ 8081             >
 926+ 8081 AD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 926+ 8083             >
 926+ 8083             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 926+ 8083 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 926+ 8086             >
 926+ 8086             >
 926+ 8086             >                endif           ; ok        // for other definitions it "points" the correct handler
 926+ 8086             >                // Use of "; ok" to suppress "warning[fwdref]"
 926+ 8086             >
 926+ 8086             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 927+ 8086 70 80                        dw      UNTIL
 928+ 8088 4B 68                        dw      EXIT
 929+ 808A
 930+ 808A              //  ______________________________________________________________________
 931+ 808A              //
 932+ 808A              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 933+ 808A                              Colon_Def WHILE, "WHILE", is_immediate
 933+ 808A             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 933+ 808A             >
 933+ 808A             >Dict_Ptr        defl    $
 933+ 808A             >
 933+ 808A             >//              ______________________________________________________________________
 933+ 808A             >//              Heap part
 933+ 808A             >
 933+ 808A             >
 933+ 808A             >                org     (Heap_Ptr & $1FFF) + $E000
 933+ ECAF             >
 933+ ECAF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 933+ ECAF             >Latest_Definition defl  Heap_Ptr
 933+ ECAF             >
 933+ ECAF             >                // dummy db directives used to calculate length of namec
 933+ ECAF 57 48 49 4C >                db      "WHILE"
 933+ ECB3 45          >
 933+ ECB4             >len_NFA         defl    $ - temp_NFA
 933+ ECB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 933+ ECAF             >
 933+ ECAF C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 933+ ECB0 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 933+ ECB4 45          >
 933+ ECB5             >                org     $-1                 // alter last byte of Name just above to set
 933+ ECB4 C5          >                db      {b $} | END_BIT     // msb as name end
 933+ ECB5             >
 933+ ECB5 A7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 933+ ECB7             >Prev_Ptr        defl    Heap_Ptr
 933+ ECB7             >
 933+ ECB7             >mirror_Ptr      defl    $
 933+ ECB7             >
 933+ ECB7 8C 80       >                dw      Dict_Ptr + 2        // xt
 933+ ECB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 933+ ECB9             >
 933+ ECB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 933+ ECB9             >
 933+ ECB9             >//              ______________________________________________________________________
 933+ ECB9             >//              Dictionary part
 933+ ECB9             >
 933+ ECB9             >                org     Dict_Ptr
 933+ 808A             >
 933+ 808A B7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 933+ 808C             >
 933+ 808C             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 933+ 808C CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 933+ 808F             >
 933+ 808F             >
 933+ 808F             >                endif           ; ok        // for other definitions it "points" the correct handler
 933+ 808F             >                // Use of "; ok" to suppress "warning[fwdref]"
 933+ 808F             >
 933+ 808F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 934+ 808F FE 7F                        dw      IF
 935+ 8091              //              dw      TWO_PLUS // ( that is 4 )
 936+ 8091 51 69                        dw      TWO_SWAP
 937+ 8093 4B 68                        dw      EXIT
 938+ 8095
 939+ 8095              //  ______________________________________________________________________
 940+ 8095              //
 941+ 8095              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 942+ 8095                              Colon_Def REPEAT, "REPEAT", is_immediate
 942+ 8095             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 942+ 8095             >
 942+ 8095             >Dict_Ptr        defl    $
 942+ 8095             >
 942+ 8095             >//              ______________________________________________________________________
 942+ 8095             >//              Heap part
 942+ 8095             >
 942+ 8095             >
 942+ 8095             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ ECB9             >
 942+ ECB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ ECB9             >Latest_Definition defl  Heap_Ptr
 942+ ECB9             >
 942+ ECB9             >                // dummy db directives used to calculate length of namec
 942+ ECB9 52 45 50 45 >                db      "REPEAT"
 942+ ECBD 41 54       >
 942+ ECBF             >len_NFA         defl    $ - temp_NFA
 942+ ECBF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ ECB9             >
 942+ ECB9 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ ECBA 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 942+ ECBE 41 54       >
 942+ ECC0             >                org     $-1                 // alter last byte of Name just above to set
 942+ ECBF D4          >                db      {b $} | END_BIT     // msb as name end
 942+ ECC0             >
 942+ ECC0 AF 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ ECC2             >Prev_Ptr        defl    Heap_Ptr
 942+ ECC2             >
 942+ ECC2             >mirror_Ptr      defl    $
 942+ ECC2             >
 942+ ECC2 97 80       >                dw      Dict_Ptr + 2        // xt
 942+ ECC4             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ ECC4             >
 942+ ECC4             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ ECC4             >
 942+ ECC4             >//              ______________________________________________________________________
 942+ ECC4             >//              Dictionary part
 942+ ECC4             >
 942+ ECC4             >                org     Dict_Ptr
 942+ 8095             >
 942+ 8095 C2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 8097             >
 942+ 8097             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 8097 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 809A             >
 942+ 809A             >
 942+ 809A             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 809A             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 809A             >
 942+ 809A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 809A 5D 80                        dw      AGAIN
 944+ 809C              //              dw      TWO_MINUS
 945+ 809C 11 80                        dw      THEN
 946+ 809E 4B 68                        dw      EXIT
 947+ 80A0
 948+ 80A0              //  ______________________________________________________________________
 949+ 80A0              //
 950+ 80A0              // ?do-
 951+ 80A0              // special version of "BACK" used by ?DO and LOOP
 952+ 80A0                              Colon_Def C_DO_BACK, "?DO-", is_normal
 952+ 80A0             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 952+ 80A0             >
 952+ 80A0             >Dict_Ptr        defl    $
 952+ 80A0             >
 952+ 80A0             >//              ______________________________________________________________________
 952+ 80A0             >//              Heap part
 952+ 80A0             >
 952+ 80A0             >
 952+ 80A0             >                org     (Heap_Ptr & $1FFF) + $E000
 952+ ECC4             >
 952+ ECC4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 952+ ECC4             >Latest_Definition defl  Heap_Ptr
 952+ ECC4             >
 952+ ECC4             >                // dummy db directives used to calculate length of namec
 952+ ECC4 3F 44 4F 2D >                db      "?DO-"
 952+ ECC8             >len_NFA         defl    $ - temp_NFA
 952+ ECC8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 952+ ECC4             >
 952+ ECC4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 952+ ECC5 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 952+ ECC9             >                org     $-1                 // alter last byte of Name just above to set
 952+ ECC8 AD          >                db      {b $} | END_BIT     // msb as name end
 952+ ECC9             >
 952+ ECC9 B9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 952+ ECCB             >Prev_Ptr        defl    Heap_Ptr
 952+ ECCB             >
 952+ ECCB             >mirror_Ptr      defl    $
 952+ ECCB             >
 952+ ECCB A2 80       >                dw      Dict_Ptr + 2        // xt
 952+ ECCD             >Heap_Ptr        defl    $ - $E000           // save current HP
 952+ ECCD             >
 952+ ECCD             >Current_HP      defl  $ - $E000             // used to set HP once!
 952+ ECCD             >
 952+ ECCD             >//              ______________________________________________________________________
 952+ ECCD             >//              Dictionary part
 952+ ECCD             >
 952+ ECCD             >                org     Dict_Ptr
 952+ 80A0             >
 952+ 80A0 CB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 952+ 80A2             >
 952+ 80A2             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 952+ 80A2 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 952+ 80A5             >
 952+ 80A5             >
 952+ 80A5             >                endif           ; ok        // for other definitions it "points" the correct handler
 952+ 80A5             >                // Use of "; ok" to suppress "warning[fwdref]"
 952+ 80A5             >
 952+ 80A5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 953+ 80A5 F1 7F                        dw      BACK
 954+ 80A7              CDoBack_Begin:
 955+ 80A7 32 68 59 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 955+ 80AB 80 69 DA 6B
 956+ 80AF F3 63                        dw      ZBRANCH
 957+ 80B1 0A 00                        dw      CDoBack_While - $
 958+ 80B3 BF 68 11 80                  dw          TWO_PLUS, THEN
 959+ 80B7 EF 63                        dw      BRANCH
 960+ 80B9 EE FF                        dw      CDoBack_Begin - $
 961+ 80BB              CDoBack_While:
 962+ 80BB 17 6E 59 6B                  dw      QCSP, CSP, STORE
 962+ 80BF 8A 69
 963+ 80C1 4B 68                        dw      EXIT
 964+ 80C3
 965+ 80C3              //  ______________________________________________________________________
 966+ 80C3              //
 967+ 80C3              // do
 968+ 80C3              // DO  ... LOOP
 969+ 80C3              // DO  ... n +LOOP
 970+ 80C3              // ?DO ... LOOP
 971+ 80C3              // ?DO ... n +LOOP
 972+ 80C3                              Colon_Def DO, "DO", is_immediate
 972+ 80C3             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 972+ 80C3             >
 972+ 80C3             >Dict_Ptr        defl    $
 972+ 80C3             >
 972+ 80C3             >//              ______________________________________________________________________
 972+ 80C3             >//              Heap part
 972+ 80C3             >
 972+ 80C3             >
 972+ 80C3             >                org     (Heap_Ptr & $1FFF) + $E000
 972+ ECCD             >
 972+ ECCD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 972+ ECCD             >Latest_Definition defl  Heap_Ptr
 972+ ECCD             >
 972+ ECCD             >                // dummy db directives used to calculate length of namec
 972+ ECCD 44 4F       >                db      "DO"
 972+ ECCF             >len_NFA         defl    $ - temp_NFA
 972+ ECCF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 972+ ECCD             >
 972+ ECCD C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 972+ ECCE 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 972+ ECD0             >                org     $-1                 // alter last byte of Name just above to set
 972+ ECCF CF          >                db      {b $} | END_BIT     // msb as name end
 972+ ECD0             >
 972+ ECD0 C4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 972+ ECD2             >Prev_Ptr        defl    Heap_Ptr
 972+ ECD2             >
 972+ ECD2             >mirror_Ptr      defl    $
 972+ ECD2             >
 972+ ECD2 C5 80       >                dw      Dict_Ptr + 2        // xt
 972+ ECD4             >Heap_Ptr        defl    $ - $E000           // save current HP
 972+ ECD4             >
 972+ ECD4             >Current_HP      defl  $ - $E000             // used to set HP once!
 972+ ECD4             >
 972+ ECD4             >//              ______________________________________________________________________
 972+ ECD4             >//              Dictionary part
 972+ ECD4             >
 972+ ECD4             >                org     Dict_Ptr
 972+ 80C3             >
 972+ 80C3 D2 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 972+ 80C5             >
 972+ 80C5             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 972+ 80C5 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 972+ 80C8             >
 972+ 80C8             >
 972+ 80C8             >                endif           ; ok        // for other definitions it "points" the correct handler
 972+ 80C8             >                // Use of "; ok" to suppress "warning[fwdref]"
 972+ 80C8             >
 972+ 80C8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 973+ 80C8 3F 6E 2E 64                  dw      COMPILE, C_DO
 974+ 80CC 59 6B 80 69                  dw      CSP, FETCH, STORE_CSP
 974+ 80D0 C2 6D
 975+ 80D2 9B 6B 8B 6A                  dw      HERE, THREE
 976+ 80D6 4B 68                        dw      EXIT
 977+ 80D8
 978+ 80D8              //  ______________________________________________________________________
 979+ 80D8              //
 980+ 80D8              // loop
 981+ 80D8                              Colon_Def LOOP, "LOOP", is_immediate
 981+ 80D8             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 981+ 80D8             >
 981+ 80D8             >Dict_Ptr        defl    $
 981+ 80D8             >
 981+ 80D8             >//              ______________________________________________________________________
 981+ 80D8             >//              Heap part
 981+ 80D8             >
 981+ 80D8             >
 981+ 80D8             >                org     (Heap_Ptr & $1FFF) + $E000
 981+ ECD4             >
 981+ ECD4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 981+ ECD4             >Latest_Definition defl  Heap_Ptr
 981+ ECD4             >
 981+ ECD4             >                // dummy db directives used to calculate length of namec
 981+ ECD4 4C 4F 4F 50 >                db      "LOOP"
 981+ ECD8             >len_NFA         defl    $ - temp_NFA
 981+ ECD8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 981+ ECD4             >
 981+ ECD4 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 981+ ECD5 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 981+ ECD9             >                org     $-1                 // alter last byte of Name just above to set
 981+ ECD8 D0          >                db      {b $} | END_BIT     // msb as name end
 981+ ECD9             >
 981+ ECD9 CD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 981+ ECDB             >Prev_Ptr        defl    Heap_Ptr
 981+ ECDB             >
 981+ ECDB             >mirror_Ptr      defl    $
 981+ ECDB             >
 981+ ECDB DA 80       >                dw      Dict_Ptr + 2        // xt
 981+ ECDD             >Heap_Ptr        defl    $ - $E000           // save current HP
 981+ ECDD             >
 981+ ECDD             >Current_HP      defl  $ - $E000             // used to set HP once!
 981+ ECDD             >
 981+ ECDD             >//              ______________________________________________________________________
 981+ ECDD             >//              Dictionary part
 981+ ECDD             >
 981+ ECDD             >                org     Dict_Ptr
 981+ 80D8             >
 981+ 80D8 DB 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 981+ 80DA             >
 981+ 80DA             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 981+ 80DA CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 981+ 80DD             >
 981+ 80DD             >
 981+ 80DD             >                endif           ; ok        // for other definitions it "points" the correct handler
 981+ 80DD             >                // Use of "; ok" to suppress "warning[fwdref]"
 981+ 80DD             >
 981+ 80DD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 982+ 80DD 8B 6A 08 6E                  dw      THREE, QPAIRS
 983+ 80E1 3F 6E E7 63                  dw      COMPILE, C_LOOP
 984+ 80E5 A2 80                        dw      C_DO_BACK
 985+ 80E7 4B 68                        dw      EXIT
 986+ 80E9
 987+ 80E9              //  ______________________________________________________________________
 988+ 80E9              //
 989+ 80E9              // +loop
 990+ 80E9                              Colon_Def PLOOP, "+LOOP", is_immediate
 990+ 80E9             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 990+ 80E9             >
 990+ 80E9             >Dict_Ptr        defl    $
 990+ 80E9             >
 990+ 80E9             >//              ______________________________________________________________________
 990+ 80E9             >//              Heap part
 990+ 80E9             >
 990+ 80E9             >
 990+ 80E9             >                org     (Heap_Ptr & $1FFF) + $E000
 990+ ECDD             >
 990+ ECDD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 990+ ECDD             >Latest_Definition defl  Heap_Ptr
 990+ ECDD             >
 990+ ECDD             >                // dummy db directives used to calculate length of namec
 990+ ECDD 2B 4C 4F 4F >                db      "+LOOP"
 990+ ECE1 50          >
 990+ ECE2             >len_NFA         defl    $ - temp_NFA
 990+ ECE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 990+ ECDD             >
 990+ ECDD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 990+ ECDE 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 990+ ECE2 50          >
 990+ ECE3             >                org     $-1                 // alter last byte of Name just above to set
 990+ ECE2 D0          >                db      {b $} | END_BIT     // msb as name end
 990+ ECE3             >
 990+ ECE3 D4 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 990+ ECE5             >Prev_Ptr        defl    Heap_Ptr
 990+ ECE5             >
 990+ ECE5             >mirror_Ptr      defl    $
 990+ ECE5             >
 990+ ECE5 EB 80       >                dw      Dict_Ptr + 2        // xt
 990+ ECE7             >Heap_Ptr        defl    $ - $E000           // save current HP
 990+ ECE7             >
 990+ ECE7             >Current_HP      defl  $ - $E000             // used to set HP once!
 990+ ECE7             >
 990+ ECE7             >//              ______________________________________________________________________
 990+ ECE7             >//              Dictionary part
 990+ ECE7             >
 990+ ECE7             >                org     Dict_Ptr
 990+ 80E9             >
 990+ 80E9 E5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 990+ 80EB             >
 990+ 80EB             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 990+ 80EB CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 990+ 80EE             >
 990+ 80EE             >
 990+ 80EE             >                endif           ; ok        // for other definitions it "points" the correct handler
 990+ 80EE             >                // Use of "; ok" to suppress "warning[fwdref]"
 990+ 80EE             >
 990+ 80EE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 991+ 80EE 8B 6A 08 6E                  dw      THREE, QPAIRS
 992+ 80F2 3F 6E B1 63                  dw      COMPILE, C_PLOOP
 993+ 80F6 A2 80                        dw      C_DO_BACK
 994+ 80F8 4B 68                        dw      EXIT
 995+ 80FA
 996+ 80FA              //  ______________________________________________________________________
 997+ 80FA              //
 998+ 80FA              // ?do
 999+ 80FA                              Colon_Def QDO, "?DO", is_immediate
 999+ 80FA             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
 999+ 80FA             >
 999+ 80FA             >Dict_Ptr        defl    $
 999+ 80FA             >
 999+ 80FA             >//              ______________________________________________________________________
 999+ 80FA             >//              Heap part
 999+ 80FA             >
 999+ 80FA             >
 999+ 80FA             >                org     (Heap_Ptr & $1FFF) + $E000
 999+ ECE7             >
 999+ ECE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 999+ ECE7             >Latest_Definition defl  Heap_Ptr
 999+ ECE7             >
 999+ ECE7             >                // dummy db directives used to calculate length of namec
 999+ ECE7 3F 44 4F    >                db      "?DO"
 999+ ECEA             >len_NFA         defl    $ - temp_NFA
 999+ ECEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 999+ ECE7             >
 999+ ECE7 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 999+ ECE8 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
 999+ ECEB             >                org     $-1                 // alter last byte of Name just above to set
 999+ ECEA CF          >                db      {b $} | END_BIT     // msb as name end
 999+ ECEB             >
 999+ ECEB DD 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 999+ ECED             >Prev_Ptr        defl    Heap_Ptr
 999+ ECED             >
 999+ ECED             >mirror_Ptr      defl    $
 999+ ECED             >
 999+ ECED FC 80       >                dw      Dict_Ptr + 2        // xt
 999+ ECEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 999+ ECEF             >
 999+ ECEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 999+ ECEF             >
 999+ ECEF             >//              ______________________________________________________________________
 999+ ECEF             >//              Dictionary part
 999+ ECEF             >
 999+ ECEF             >                org     Dict_Ptr
 999+ 80FA             >
 999+ 80FA ED 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 999+ 80FC             >
 999+ 80FC             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 999+ 80FC CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 999+ 80FF             >
 999+ 80FF             >
 999+ 80FF             >                endif           ; ok        // for other definitions it "points" the correct handler
 999+ 80FF             >                // Use of "; ok" to suppress "warning[fwdref]"
 999+ 80FF             >
 999+ 80FF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1000+ 80FF 3F 6E 06 64                  dw      COMPILE, C_Q_DO
1001+ 8103 59 6B 80 69                  dw      CSP, FETCH, STORE_CSP
1001+ 8107 C2 6D
1002+ 8109 9B 6B 76 6A                  dw      HERE, ZERO, COMMA, ZERO
1002+ 810D B1 6B 76 6A
1003+ 8111 9B 6B 8B 6A                  dw      HERE, THREE
1004+ 8115 4B 68                        dw      EXIT
1005+ 8117
1006+ 8117              //  ______________________________________________________________________
1007+ 8117              //
1008+ 8117              // \
1009+ 8117                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1009+ 8117             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1009+ 8117             >
1009+ 8117             >Dict_Ptr        defl    $
1009+ 8117             >
1009+ 8117             >//              ______________________________________________________________________
1009+ 8117             >//              Heap part
1009+ 8117             >
1009+ 8117             >
1009+ 8117             >                org     (Heap_Ptr & $1FFF) + $E000
1009+ ECEF             >
1009+ ECEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1009+ ECEF             >Latest_Definition defl  Heap_Ptr
1009+ ECEF             >
1009+ ECEF             >                // dummy db directives used to calculate length of namec
1009+ ECEF 5C          >                db      "\\"
1009+ ECF0             >len_NFA         defl    $ - temp_NFA
1009+ ECF0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1009+ ECEF             >
1009+ ECEF C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1009+ ECF0 5C          >                db      "\\"               // name string in 7-bit ascii, but
1009+ ECF1             >                org     $-1                 // alter last byte of Name just above to set
1009+ ECF0 DC          >                db      {b $} | END_BIT     // msb as name end
1009+ ECF1             >
1009+ ECF1 E7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1009+ ECF3             >Prev_Ptr        defl    Heap_Ptr
1009+ ECF3             >
1009+ ECF3             >mirror_Ptr      defl    $
1009+ ECF3             >
1009+ ECF3 19 81       >                dw      Dict_Ptr + 2        // xt
1009+ ECF5             >Heap_Ptr        defl    $ - $E000           // save current HP
1009+ ECF5             >
1009+ ECF5             >Current_HP      defl  $ - $E000             // used to set HP once!
1009+ ECF5             >
1009+ ECF5             >//              ______________________________________________________________________
1009+ ECF5             >//              Dictionary part
1009+ ECF5             >
1009+ ECF5             >                org     Dict_Ptr
1009+ 8117             >
1009+ 8117 F3 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1009+ 8119             >
1009+ 8119             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1009+ 8119 CD 21 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1009+ 811C             >
1009+ 811C             >
1009+ 811C             >                endif           ; ok        // for other definitions it "points" the correct handler
1009+ 811C             >                // Use of "; ok" to suppress "warning[fwdref]"
1009+ 811C             >
1009+ 811C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1010+ 811C 17 6B 80 69                  dw      BLK, FETCH
1011+ 8120 B8 68                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1012+ 8122 F3 63                        dw      ZBRANCH
1013+ 8124 34 00                        dw      Backslash_Else_1 - $
1014+ 8126
1015+ 8126 17 6B 80 69                  dw          BLK, FETCH
1016+ 812A F3 63                        dw          ZBRANCH
1017+ 812C 1A 00                        dw          Backslash_Else_2 - $
1018+ 812E
1019+ 812E 1D 6B 80 69                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1019+ 8132 A0 6A B8 68
1019+ 8136 0B 68 A0 6A
1020+ 813A 0F 69 DA 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1020+ 813E 1D 6B 68 69
1021+ 8142 EF 63                        dw          BRANCH
1022+ 8144 10 00                        dw          Backslash_Endif_2 - $
1023+ 8146              Backslash_Else_2:
1024+ 8146 76 6A DB 6A                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1024+ 814A 80 69 1D 6B
1024+ 814E 80 69 98 68
1024+ 8152 9E 69
1025+ 8154              Backslash_Endif_2:
1026+ 8154 EF 63                        dw      BRANCH
1027+ 8156 0A 00                        dw      Backslash_Endif_1 - $
1028+ 8158              Backslash_Else_1:
1029+ 8158 A7 6A CB 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1029+ 815C 1D 6B 8A 69
1030+ 8160              Backslash_Endif_1:
1031+ 8160 4B 68                        dw      EXIT
1032+ 8162
1033+ 8162              Fence_Word:
1034+ 8162              //  ______________________________________________________________________
1035+ 8162              //
1036+ 8162
1037+ 8162 00           Here_Dictionary db      0
1038+ 8163
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/L3.asm
 144  8163
 145  8163              // now we save the compiled file so we can either run it or debug it
 146  8163                              SAVENEX OPEN "output/forth17.nex", ORIGIN, S0_system
 147  8163                              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  8163                              SAVENEX CFG  7, 0
 149  8163                              SAVENEX BANK 5,2,0,1,16
 150  8163              //              SAVENEX BANK 5,2,0,1,3,4,6,7, 16,17,18,19
 151  8163                              SAVENEX AUTO
 152  8163                              SAVENEX CLOSE
 153  8163
 154  8163              //              PAGE 7 ;set 7 page to current slot
 155  8163              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 156  8163              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 157  8163
 158  8163                              SAVETAP "output/F16d.tap", CODE, "forth17d", ORIGIN, 9999
 159  8163                              SAVETAP "output/F16e.tap", CODE, "forth17e", $E000, $2000
 160  8163
 161  8163                              SAVEBIN "output/forth17d.bin", ORIGIN, 9999
 162  8163                              SAVEBIN "output/ram7.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 163  8163
 164  8163                              // To load on ZX Spectrum Next you have to type
 165  8163                              //      LOAD "ram7.bin" BANK 16
 166  8163                              //      LOAD "forth17d.bin" CODE
 167  8163
 168  8163                              END
# file closed: C:\Zx\CSpect\Projects\vForth17_MMU7/source/main.asm
