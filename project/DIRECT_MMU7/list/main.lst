# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/main.asm
   1  0000              //  ______________________________________________________________________
   2  0000              //
   3  0000              //  main.asm
   4  0000              //  ______________________________________________________________________
   5  0000              //
   6  0000              //  v-Forth 1.8 NextZXOS version
   7  0000              //  Basic Loader version
   8  0000              //  build 20240922
   9  0000              //
  10  0000              //  Direct-Threaded version.
  11  0000              //
  12  0000              //  NextZXOS version
  13  0000              //  ______________________________________________________________________
  14  0000              //
  15  0000              // MIT License
  16  0000              //
  17  0000              // Copyright (c) 1990-2024 Matteo Vitturi
  18  0000              //
  19  0000              // Permission is hereby granted, free of charge, to any person obtaining a copy
  20  0000              // of this software and associated documentation files (the "Software"), to deal
  21  0000              // in the Software without restriction, including without limitation the rights
  22  0000              // to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  23  0000              // copies of the Software, and to permit persons to whom the Software is
  24  0000              // furnished to do so, subject to the following conditions:
  25  0000              //
  26  0000              // The above copyright notice and this permission notice shall be included in all
  27  0000              // copies or substantial portions of the Software.
  28  0000              //
  29  0000              // THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  30  0000              // IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  31  0000              // FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  32  0000              // AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  33  0000              // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  34  0000              // OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  35  0000              // SOFTWARE.
  36  0000              //  ______________________________________________________________________
  37  0000              //
  38  0000              //  by Matteo Vitturi, 1990-2024
  39  0000              //
  40  0000              //  https://sites.google.com/view/vforth/vforth15-next
  41  0000              //  https://www.oocities.org/matteo_vitturi/english/index.htm
  42  0000              //
  43  0000              //  This is the complete compiler for v.Forth for SINCLAIR ZX Spectrum Next.
  44  0000              //  Each line of this source list mustn't exceed 80 bytes.
  45  0000              //  Z80N (ZX Spectrum Next) extension is available.
  46  0000              //
  47  0000              //  This list has been tested using the following configuration:
  48  0000              //      - CSpect emulator V.2.12.30
  49  0000              //  ______________________________________________________________________
  50  0000              //
  51  0000              //  Z80 Registers usage map
  52  0000              //
  53  0000              //  AF
  54  0000              //  BC - Instruction Pointer: should be preserved during ROM/OS calls
  55  0000              //  DE - Return Stack Pointer: should be preserved during ROM/OS calls
  56  0000              //  HL - Working
  57  0000              //
  58  0000              //  AF'- Sometime used for backup purpose
  59  0000              //  BC'- Not used
  60  0000              //  DE'- Not used
  61  0000              //  HL'- Not used
  62  0000              //
  63  0000              //  SP - Calculator Stack Pointer
  64  0000              //  IX - Inner interpreter "next" address pointer. This way jp (ix) is 2T-state faster than JP next
  65  0000              //  IY - (ZX System: must be preserved to interact with standard ROM)
  66  0000              //
  67  0000              //  ______________________________________________________________________
  68  0000              //
  69  0000              //  _________________
  70  0000              //
  71  0000              //  FORTH DEFINITIONS
  72  0000              //  _________________
  73  0000
  74  0000                              OPT     --zxnext
  75  0000              //  ______________________________________________________________________
  76  0000              //
  77  0000              // this controls some debugging code in L0.asm
  78  0000              //  0 for final binary release.
  79  0000              //  1 for debugging with Visual Studio Code and DeZog
  80  0000              // -1 for for binary comparison with Forth generated code.
  81  0000              DEBUGGING       equ     0
  82  0000              //
  83  0000              //  ______________________________________________________________________
  84  0000
  85  0000                              if ( -1 == DEBUGGING )
  86  0000 ~            // ORIGIN          equ     $6366 - $80                 // for binary comparison with double compilation
  87  0000 ~            ORIGIN          equ     $6366   -$80                   // for binary comparison with single compilation
  88  0000 ~            Heap_Ptr        defl    $0002              // HP before compilation
  89  0000 ~            Heap_offset     defl    0                // given by compilation
  90  0000 ~
  91  0000                              endif
  92  0000              //  ______________________________________________________________________
  93  0000
  94  0000                              if (  0 == DEBUGGING )
  95  0000              ORIGIN          equ     $6366                   // binary and Tape
  96  0000              // ORIGIN          equ     $9A93                // binary and Tape
  97  0000              Heap_Ptr        defl    $0002
  98  0000              Heap_offset     defl     0
  99  0000
 100  0000                              endif
 101  0000              //  ______________________________________________________________________
 102  0000
 103  0000                              if (  1 == DEBUGGING )
 104  0000 ~            ORIGIN          equ     $8080                   // for DeZog
 105  0000 ~            Heap_Ptr        defl    $0002
 106  0000 ~            Heap_offset     defl     0
 107  0000 ~
 108  0000                              endif
 109  0000              //  ______________________________________________________________________
 110  0000
 111  0000                              DEVICE  ZXSPECTRUMNEXT
 112  0000
 113  0000                              ORG     ORIGIN
 114  6366
 115  6366                              if ( -1 == DEBUGGING )
 116  6366 ~                            ds 128                            // for binary comparison
 117  6366                              endif
 118  6366
 119  6366              //  ______________________________________________________________________
 120  6366              //
 121  6366              //  Naming convention for Label vs Forth correspondance
 122  6366              //  Forth words are named as they are named for real with some exception to avoid assembler syntax errors.
 123  6366              //    - Leading "0" is converted into "Z_"
 124  6366              //    - Leading "(" is converted into "C_", closing bracket is omitted
 125  6366              //    - Leading numbers are converted in letters: ONE_  TWO_ etc.
 126  6366              //    - Question mark "?" is converted into "Q" or omitted if needed / useful.
 127  6366              //    - Plus sign "+" is converted in _PLUS or ADD_ depending.
 128  6366              //    - Minus sign "-" in L (for Line), MINUS or SUBTRACT depending
 129  6366              //    - Greater-Than sign ">" in _GREATER or TO_ depending
 130  6366              //    - Equal sign "=" is converted in EQUAL
 131  6366              //    - Less-Than sign "<" in _LESS or FROM_ (or TO_ again) depending
 132  6366              //    - Asterisk sign "*" is converted in _MUL or STAR
 133  6366              //    - Slash "/" is converted in _DIV or omitted if it is clear what it means
 134  6366              //    - Exclamation mark "!" is converted in STORE
 135  6366              //    - At-Sign "@" is converted in FETCH
 136  6366              //    - Words that collide with Assembler are normally suffixed with "_OP"
 137  6366
 138  6366                              include "system.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/system.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  system.asm
   4+ 6366              //  ______________________________________________________________________
   5+ 6366
   6+ 6366              // Registers:
   7+ 6366              //
   8+ 6366              //      BC: Instruction Pointer
   9+ 6366              //      DE: Return Stack Pointer
  10+ 6366              //      HL: W register
  11+ 6366              //      SP: Calc stack Pointer
  12+ 6366              //      IX: Inner-Interpreter Address
  13+ 6366
  14+ 6366              //  ______________________________________________________________________
  15+ 6366              //
  16+ 6366              // ZX-Spectrum standard system variables
  17+ 6366              SCR_CT          equ     $5C8C                   // SCR-CT system variable
  18+ 6366              LASTK           equ     $5C08                   // LASTK system variable
  19+ 6366              BORDCR          equ     $5C48                   // BORDCR system variable
  20+ 6366              FLAGS2          equ     $5C6A                   // for caps-lock
  21+ 6366              RAMTOP          equ     $5CB2
  22+ 6366              TSTACK          equ     $5C00                   // TSTACK
  23+ 6366              // FSTACK          ecu     $4000 - 8
  24+ 6366              //  ______________________________________________________________________
  25+ 6366              //
  26+ 6366              // Flag constants
  27+ 6366              TRUE_FLAG       equ     $FFFF
  28+ 6366              FALSE_FLAG      equ     $0000
  29+ 6366
  30+ 6366              //  ______________________________________________________________________
  31+ 6366              //
  32+ 6366              // Ascii char constants
  33+ 6366              NUL_CHAR        equ     $00
  34+ 6366              COMMA_CHAR      equ     $06
  35+ 6366              BACKSPACE_CHAR  equ     $08
  36+ 6366              CR_CHAR         equ     $0D
  37+ 6366              BLANK_CHAR      equ     $20
  38+ 6366              QUOTE_CHAR      equ     "'"
  39+ 6366              DQUOTE_CHAR     equ     '"'
  40+ 6366              UNDERSCORE_CHAR equ     $5F
  41+ 6366              SOLIDBLOCK_CHAR equ     $8F
  42+ 6366              HALFBLOCK_CHAR  equ     $8C
  43+ 6366              LC_A_CHAR       equ     $61                 // lower-case "a"
  44+ 6366              LC_Z_CHAR       equ     $7A                 // lower-case "z"
  45+ 6366
  46+ 6366
  47+ 6366              //  ______________________________________________________________________
  48+ 6366              //
  49+ 6366
  50+ 6366                              // emulate something like:  ld hl,rp
  51+ 6366              ldhlrp          macro
  52+ 6366 ~                            ld      hl,(RP_Pointer)
  53+ 6366                              endm
  54+ 6366
  55+ 6366                              // emulate something like:  ld rp,hl
  56+ 6366              ldrphl          macro
  57+ 6366 ~                            ld      (RP_Pointer),hl
  58+ 6366                              endm
  59+ 6366
  60+ 6366              //  ______________________________________________________________________
  61+ 6366              //
  62+ 6366              //  Inner interpreter next-address pointer. This is 2T-state faster than "jp address"
  63+ 6366              next            macro
  64+ 6366 ~                            jp      (ix)
  65+ 6366                              endm
  66+ 6366
  67+ 6366              psh1            macro
  68+ 6366 ~                            push    hl
  69+ 6366 ~                            jp      (ix)
  70+ 6366                              endm
  71+ 6366
  72+ 6366              psh2            macro
  73+ 6366 ~                            push    de
  74+ 6366 ~                            push    hl
  75+ 6366 ~                            jp      (ix)
  76+ 6366                              endm
  77+ 6366
  78+ 6366              //  ______________________________________________________________________
  79+ 6366              //
  80+ 6366              // Bit constants in length-byte
  81+ 6366
  82+ 6366              SMUDGE_BIT      equ     %00100000               // $20
  83+ 6366              IMMEDIATE_BIT   equ     %01000000               // $40
  84+ 6366              END_BIT         equ     %10000000               // $80
  85+ 6366
  86+ 6366
  87+ 6366              //  ______________________________________________________________________
  88+ 6366              //
  89+ 6366              //  To create Forth words using this (nice) Assembler, we have to use the two following
  90+ 6366              //  pointers
  91+ 6366              temp_NFA        defl    0
  92+ 6366              last_NFA        defl    0
  93+ 6366              len_NFA         defl    0
  94+ 6366
  95+ 6366              Dict_Ptr        defl    0
  96+ 6366              // Heap_Ptr        defl    $0002
  97+ 6366              Prev_Ptr        defl    0
  98+ 6366              mirror_Ptr      defl    0
  99+ 6366
 100+ 6366              is_code         equ     0                   // so the direct machine-code starts at CFA
 101+ 6366              is_normal       equ     0                   // so the direct machine-code starts at CFA
 102+ 6366              is_immediate    equ     IMMEDIATE_BIT       // $40 - the definition is IMMEDIATE.
 103+ 6366
 104+ 6366
 105+ 6366              Behave          macro   xp
 106+ 6366 ~            temp_PTR        defl    $                   // save this org
 107+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000 -2
 108+ 6366 ~                            dw      xp
 109+ 6366 ~                            org     temp_PTR
 110+ 6366                              endm
 111+ 6366
 112+ 6366              //  ______________________________________________________________________
 113+ 6366              //
 114+ 6366              //  Create a new "low-level" definition
 115+ 6366              //  This macro is used in the form  Create FORTH_NAME,n,"forth_name"
 116+ 6366              //  to create a new Forth Dictionary entry the same way Forth itself would do.
 117+ 6366              //  A word begins with a Length-Byte in range 1-31. Top 3 msb are used as flags
 118+ 6366              //  see SMUDGE_BIT and IMMEDIATE_BIT constant above.
 119+ 6366              //  It is followed by the Name of the word, i.e. a string expressed in 7-bit Ascii.
 120+ 6366              //  The last character of the Name must have the msb set to signal the end of it (END_BIT)
 121+ 6366              //  This macro acts much like the standard Forth definition CREATE
 122+ 6366
 123+ 6366              New_Def         macro   label, namec, runcode, bits
 124+ 6366 ~
 125+ 6366 ~            Dict_Ptr        defl    $
 126+ 6366 ~
 127+ 6366 ~            //              ______________________________________________________________________
 128+ 6366 ~            //              Heap part
 129+ 6366 ~
 130+ 6366 ~
 131+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 132+ 6366 ~
 133+ 6366 ~            temp_NFA        defl    $                   // save this NFA address to temp_NFA
 134+ 6366 ~            Latest_Definition defl  Heap_Ptr
 135+ 6366 ~
 136+ 6366 ~                            // dummy db directives used to calculate length of namec
 137+ 6366 ~                            db      namec
 138+ 6366 ~            len_NFA         defl    $ - temp_NFA
 139+ 6366 ~                            org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ 6366 ~
 141+ 6366 ~                            db      len_NFA | END_BIT | bits  // The start of NFA must have msb set to signal the beginning of the sounted string
 142+ 6366 ~                            db      namec               // name string in 7-bit ascii, but
 143+ 6366 ~                            org     $-1                 // alter last byte of Name just above to set
 144+ 6366 ~                            db      {b $} | END_BIT     // msb as name end
 145+ 6366 ~
 146+ 6366 ~                            dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147+ 6366 ~            Prev_Ptr        defl    Heap_Ptr
 148+ 6366 ~
 149+ 6366 ~            mirror_Ptr      defl    $
 150+ 6366 ~
 151+ 6366 ~                            dw      Dict_Ptr + 2        // xt
 152+ 6366 ~            Heap_Ptr        defl    $ - $E000           // save current HP
 153+ 6366 ~
 154+ 6366 ~            Current_HP      defl  $ - $E000             // used to set HP once!
 155+ 6366 ~
 156+ 6366 ~            //              ______________________________________________________________________
 157+ 6366 ~            //              Dictionary part
 158+ 6366 ~
 159+ 6366 ~                            org     Dict_Ptr
 160+ 6366 ~
 161+ 6366 ~                            dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6366 ~
 163+ 6366 ~            label:          if runcode != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6366 ~                            call    runcode ; ok        // for primitive definitions  actual code
 165+ 6366 ~
 166+ 6366 ~
 167+ 6366 ~                            endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6366 ~                            // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6366 ~
 170+ 6366 ~            last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6366                              endm
 172+ 6366
 173+ 6366              //  ______________________________________________________________________
 174+ 6366              //
 175+ 6366              // Create a "constant"
 176+ 6366              // The constant value is compiled in first PFA cell
 177+ 6366              Constant_Def    macro   label, namec, constant_value
 178+ 6366 ~                            New_Def  label, namec, Constant_Ptr, is_normal
 179+ 6366 ~                            dw      constant_value
 180+ 6366                              endm
 181+ 6366
 182+ 6366              //  ______________________________________________________________________
 183+ 6366              //
 184+ 6366              // Create a "variable"
 185+ 6366              // The when invoked, a variable returns a pointer, the address of first PFA cell
 186+ 6366              // this allow creation of "variables" which content is  of any length
 187+ 6366              Variable_Def    macro   label, namec, initial_value
 188+ 6366 ~                            New_Def  label, namec, Variable_Ptr, is_normal
 189+ 6366 ~                            dw      initial_value
 190+ 6366                              endm
 191+ 6366
 192+ 6366              //  ______________________________________________________________________
 193+ 6366              //
 194+ 6366              // Create a "user" variable
 195+ 6366              // It uses a single byte as offset to calculate the address of the variable
 196+ 6366              User_Def        macro   label, namec, offset_value
 197+ 6366 ~                            New_Def  label, namec, User_Ptr, is_normal
 198+ 6366 ~                            db      offset_value
 199+ 6366                              endm
 200+ 6366
 201+ 6366              //  ______________________________________________________________________
 202+ 6366              //
 203+ 6366              // Create a "colon-definition"
 204+ 6366              // The CFA contains a small routine i.e. "call Enter_Ptr".
 205+ 6366              // The PFA, three bytes later, contains the actual Forth definition
 206+ 6366              Colon_Def       macro   label, namec, bits
 207+ 6366 ~                            New_Def  label, namec, Enter_Ptr, bits ; ok
 208+ 6366                              endm
 209+ 6366
 210+ 6366              //  ______________________________________________________________________
 211+ 6366              //
 212+ 6366              // Create a "heap-string"
 213+ 6366              Start_Heap      macro
 214+ 6366 ~            temp_ORG        defl    $                   // save this ORG
 215+ 6366 ~                            org     (Heap_Ptr & $1FFF) + $E000
 216+ 6366 ~
 217+ 6366                              endm
 218+ 6366
 219+ 6366              End_Heap        macro
 220+ 6366 ~            Heap_Ptr        defl    $ - $E000
 221+ 6366 ~                            org     temp_ORG
 222+ 6366 ~
 223+ 6366                              endm
 224+ 6366
 225+ 6366
 226+ 6366              //  ______________________________________________________________________
 227+ 6366              //
 228+ 6366
 229+ 6366
 230+ 6366
 231+ 6366              S0_system:      equ     $D0E8               // Address of top of Calc Stack
 232+ 6366              TIB_system      equ     $D0E8               // TIB grows upwards, Return-Stack downward.
 233+ 6366              R0_system:      equ     $D188               // Address of top of Return Stack. This is S0 + $00A0
 234+ 6366              USER_system:    equ     $D188               // User variables zone.
 235+ 6366              FIRST_system:   equ     $D1E4               // Address of first BUFFER
 236+ 6366              LIMIT_system:   equ     $E000               // Address of first byte beyond last BUFFER
 237+ 6366
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/system.asm
 139  6366                              include "L0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L0.asm
   1+ 6366              //  ______________________________________________________________________
   2+ 6366              //
   3+ 6366              //  L0.asm
   4+ 6366              //
   5+ 6366              //  Origin-Area and Level-0 definitions
   6+ 6366              //  ______________________________________________________________________
   7+ 6366
   8+ 6366              Cold_origin:
   9+ 6366 A7                           and     a
  10+ 6367 C3 2C 76                     jp      ColdRoutine
  11+ 636A              Warm_origin:
  12+ 636A 37                           scf
  13+ 636B C3 2C 76                     jp      WarmRoutine
  14+ 636E
  15+ 636E              // +008
  16+ 636E 01 01        SP_Basic:       dw      $0101               // These are bits with some "standard" meaning... 0101
  17+ 6370
  18+ 6370              // +00A
  19+ 6370 00 0E                        dw      $0E00
  20+ 6372
  21+ 6372              // +00C
  22+ 6372 F9 0C        Latest_origin:  dw      Latest_Definition   // Latest word (used in Cold_Start)
  23+ 6374
  24+ 6374              // +00E
  25+ 6374 0C 00        DEL_Char_Ptr:   dw      $000C               // This is the characther used as "Back-Space"
  26+ 6376
  27+ 6376              // +010
  28+ 6376 50 B2        CPU_Id          dw      $B250               // Z80 expressed in base 36
  29+ 6378
  30+ 6378              // +012
  31+ 6378 E8 D0        S0_origin:      dw      S0_system
  32+ 637A 88 D1        R0_origin:      dw      R0_system
  33+ 637C E8 D0        TIB_origin:     dw      TIB_system
  34+ 637E 1F 00        WIDTH_origin:   dw      31
  35+ 6380 01 00        WARNING_origin: dw      1
  36+ 6382 6F 81        FENCE_origin:   dw      Fence_Word
  37+ 6384 6F 81        DP_origin       dw      Fence_Word
  38+ 6386 41 75        VOCLINK_origin: dw      Voclink_Ptr
  39+ 6388 E4 D1                        dw      FIRST_system
  40+ 638A 00 E0                        dw      LIMIT_system
  41+ 638C FF 0C        HP_origin:      dw      Current_HP
  42+ 638E
  43+ 638E              // +028
  44+ 638E 8F           Block_Face:     db      SOLIDBLOCK_CHAR     // Caps-Lock   Cursor face
  45+ 638F 8C           Half_Face:      db      HALFBLOCK_CHAR      // Caps-unlock Cursor face
  46+ 6390 5F           Underscore_Face:db      UNDERSCORE_CHAR     // Underscore  Cursor face
  47+ 6391 00                           db      0
  48+ 6392
  49+ 6392              // +02C
  50+ 6392 00 00        SP_Saved:       dw      $0000               // Saved SP during NextOS call
  51+ 6394
  52+ 6394              // +02E
  53+ 6394 88 D1        USER_Pointer:   dw      USER_system
  54+ 6396
  55+ 6396              // +030
  56+ 6396 88 D1        RP_Pointer:     dw      $d188 // R0_system
  57+ 6398
  58+ 6398              // +32
  59+ 6398 00 00        IX_Echo:        dw      $0000               // Echo IX after NextOS call
  60+ 639A
  61+ 639A
  62+ 639A                              Start_Heap
  62+ 639A             >temp_ORG        defl    $                   // save this ORG
  62+ 639A             >                org     (Heap_Ptr & $1FFF) + $E000
  62+ E002             >
  63+ E002              Splash_Ptr      defl    $ - $E000           // save current HP
  64+ E002                              // length include a leading space in each line
  65+ E002 6F                           db      111
  66+ E003 20 76 2D 46                  db      " v-Forth 1.8 - NextZXOS version ", $0D      // 33
  66+ E007 6F 72 74 68
  66+ E00B 20 31 2E 38
  66+ E00F 20 2D 20 4E
  66+ E013 65 78 74 5A
  66+ E017 58 4F 53 20
  66+ E01B 76 65 72 73
  66+ E01F 69 6F 6E 20
  66+ E023 0D
  67+ E024 20 48 65 61                  db      " Heap Vocabulary - build 2024-09-22 ", $0D  // 37
  67+ E028 70 20 56 6F
  67+ E02C 63 61 62 75
  67+ E030 6C 61 72 79
  67+ E034 20 2D 20 62
  67+ E038 75 69 6C 64
  67+ E03C 20 32 30 32
  67+ E040 34 2D 30 39
  67+ E044 2D 32 32 20
  67+ E048 0D
  68+ E049 20 4D 49 54                  db      " MIT License ", 127                         // 14
  68+ E04D 20 4C 69 63
  68+ E051 65 6E 73 65
  68+ E055 20 7F
  69+ E057 20 31 39 39                  db      " 1990-2024 Matteo Vitturi ", $0D            // 27
  69+ E05B 30 2D 32 30
  69+ E05F 32 34 20 4D
  69+ E063 61 74 74 65
  69+ E067 6F 20 56 69
  69+ E06B 74 74 75 72
  69+ E06F 69 20 0D
  70+ E072                              End_Heap
  70+ E072             >Heap_Ptr        defl    $ - $E000
  70+ E072             >                org     temp_ORG
  70+ 639A             >
  71+ 639A
  72+ 639A              //  ______________________________________________________________________
  73+ 639A
  74+ 639A              // from this point we can use LDHLRP and LDRPHL Assembler macros
  75+ 639A              // instead of their equivalent long sequences.
  76+ 639A
  77+ 639A              //  ______________________________________________________________________
  78+ 639A
  79+ 639A              // address for "next" - inner interpreter
  80+ 639A              // This address must always be pointed by IX
  81+ 639A              // "next" macro simply does a  jp(ix)  instruction
  82+ 639A
  83+ 639A              // Psh2_Ptr:       push    de
  84+ 639A              // Psh1_Ptr:       push    hl
  85+ 639A
  86+ 639A              Next_Ptr:       // This address must always be kept in IX: "next" relies on that
  87+ 639A
  88+ 639A                              if ( 1 == DEBUGGING )
  89+ 639A ~                            ld      hl, Next_Breakpoint_1
  90+ 639A ~                            and     a
  91+ 639A ~                            sbc     hl, bc
  92+ 639A ~                            jr      nz, Next_Continue
  93+ 639A ~                            nop // This is where you have to put a real breakpoint to intercept BC values...
  94+ 639A                              endif
  95+ 639A
  96+ 639A              Next_Continue:
  97+ 639A 0A                           ld      a, (bc)
  98+ 639B 03                           inc     bc
  99+ 639C 6F                           ld      l, a
 100+ 639D 0A                           ld      a, (bc)
 101+ 639E 03                           inc     bc
 102+ 639F 67                           ld      h, a                // hl contains a CFA (xt) of word being executed
 103+ 63A0
 104+ 63A0              // Execute xt i.e. CFA held in HL
 105+ 63A0              Exec_Ptr:
 106+ 63A0
 107+ 63A0
 108+ 63A0
 109+ 63A0
 110+ 63A0 E9                           jp      (hl)                // and jump to it
 111+ 63A1                                                          // there you'll find the real code or a CALL to a ;code part
 112+ 63A1
 113+ 63A1              // temp_NULL       defl    Heap_Ptr & $1FFF
 114+ 63A1              // 0x00         n --      ( compile time )
 115+ 63A1              //              New_Def NUL_DUMMY,  $00, is_code, is_immediate
 116+ 63A1              //              next
 117+ 63A1
 118+ 63A1              //  ______________________________________________________________________
 119+ 63A1              //
 120+ 63A1              // lit          -- x
 121+ 63A1              // puts on top of stack the value of the following word.
 122+ 63A1              // it is compiled in colon definition before a literal number
 123+ 63A1
 124+ 63A1                              New_Def  LIT, "LIT", is_code, is_normal
 124+ 63A1             >
 124+ 63A1             >Dict_Ptr        defl    $
 124+ 63A1             >
 124+ 63A1             >//              ______________________________________________________________________
 124+ 63A1             >//              Heap part
 124+ 63A1             >
 124+ 63A1             >
 124+ 63A1             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E072             >
 124+ E072             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E072             >Latest_Definition defl  Heap_Ptr
 124+ E072             >
 124+ E072             >                // dummy db directives used to calculate length of namec
 124+ E072 4C 49 54    >                db      "LIT"
 124+ E075             >len_NFA         defl    $ - temp_NFA
 124+ E075             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E072             >
 124+ E072 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E073 4C 49 54    >                db      "LIT"               // name string in 7-bit ascii, but
 124+ E076             >                org     $-1                 // alter last byte of Name just above to set
 124+ E075 D4          >                db      {b $} | END_BIT     // msb as name end
 124+ E076             >
 124+ E076 00 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E078             >Prev_Ptr        defl    Heap_Ptr
 124+ E078             >
 124+ E078             >mirror_Ptr      defl    $
 124+ E078             >
 124+ E078 A3 63       >                dw      Dict_Ptr + 2        // xt
 124+ E07A             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E07A             >
 124+ E07A             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E07A             >
 124+ E07A             >//              ______________________________________________________________________
 124+ E07A             >//              Dictionary part
 124+ E07A             >
 124+ E07A             >                org     Dict_Ptr
 124+ 63A1             >
 124+ 63A1 78 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 63A3             >
 124+ 63A3             >LIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 63A3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 124+ 63A3 ~           >
 124+ 63A3 ~           >
 124+ 63A3             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 63A3             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 63A3             >
 124+ 63A3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 63A3
 126+ 63A3 0A                           ld      a, (bc)
 127+ 63A4 03                           inc     bc
 128+ 63A5 6F                           ld      l, a
 129+ 63A6 0A                           ld      a, (bc)
 130+ 63A7 03                           inc     bc
 131+ 63A8 67                           ld      h, a
 132+ 63A9 E5                           push    hl
 133+ 63AA                              next
 133+ 63AA DD E9       >                jp      (ix)
 134+ 63AC
 135+ 63AC              //  ______________________________________________________________________
 136+ 63AC              //
 137+ 63AC              // execute      i*x xt -- j*x
 138+ 63AC              // execution token. usually xt is given by CFA
 139+ 63AC
 140+ 63AC                              New_Def  EXECUTE, "EXECUTE", is_code, is_normal
 140+ 63AC             >
 140+ 63AC             >Dict_Ptr        defl    $
 140+ 63AC             >
 140+ 63AC             >//              ______________________________________________________________________
 140+ 63AC             >//              Heap part
 140+ 63AC             >
 140+ 63AC             >
 140+ 63AC             >                org     (Heap_Ptr & $1FFF) + $E000
 140+ E07A             >
 140+ E07A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 140+ E07A             >Latest_Definition defl  Heap_Ptr
 140+ E07A             >
 140+ E07A             >                // dummy db directives used to calculate length of namec
 140+ E07A 45 58 45 43 >                db      "EXECUTE"
 140+ E07E 55 54 45    >
 140+ E081             >len_NFA         defl    $ - temp_NFA
 140+ E081             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 140+ E07A             >
 140+ E07A 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 140+ E07B 45 58 45 43 >                db      "EXECUTE"               // name string in 7-bit ascii, but
 140+ E07F 55 54 45    >
 140+ E082             >                org     $-1                 // alter last byte of Name just above to set
 140+ E081 C5          >                db      {b $} | END_BIT     // msb as name end
 140+ E082             >
 140+ E082 72 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 140+ E084             >Prev_Ptr        defl    Heap_Ptr
 140+ E084             >
 140+ E084             >mirror_Ptr      defl    $
 140+ E084             >
 140+ E084 AE 63       >                dw      Dict_Ptr + 2        // xt
 140+ E086             >Heap_Ptr        defl    $ - $E000           // save current HP
 140+ E086             >
 140+ E086             >Current_HP      defl  $ - $E000             // used to set HP once!
 140+ E086             >
 140+ E086             >//              ______________________________________________________________________
 140+ E086             >//              Dictionary part
 140+ E086             >
 140+ E086             >                org     Dict_Ptr
 140+ 63AC             >
 140+ 63AC 84 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 140+ 63AE             >
 140+ 63AE             >EXECUTE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 140+ 63AE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 140+ 63AE ~           >
 140+ 63AE ~           >
 140+ 63AE             >                endif           ; ok        // for other definitions it "points" the correct handler
 140+ 63AE             >                // Use of "; ok" to suppress "warning[fwdref]"
 140+ 63AE             >
 140+ 63AE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 141+ 63AE C9                           ret
 142+ 63AF
 143+ 63AF              //  ______________________________________________________________________
 144+ 63AF              //
 145+ 63AF              // brk
 146+ 63AF              //              New_Def  BRK, "BRK", is_code, is_normal
 147+ 63AF              //              next
 148+ 63AF
 149+ 63AF
 150+ 63AF
 151+ 63AF              //  ______________________________________________________________________
 152+ 63AF              //
 153+ 63AF              // (+loop)      n --
 154+ 63AF              // compiled by +LOOP. it uses the top two values of return-stack to
 155+ 63AF              // keep track of index and limit, they are accessed via I and I'
 156+ 63AF              // Add n to the loop index. If the loop index did not cross the boundary
 157+ 63AF              // between the loop limit minus one and the loop limit, continue execution
 158+ 63AF              // at the beginning of the loop. Otherwise, discard the current loop control
 159+ 63AF              // parameters and continue execution immediately following the loop.
 160+ 63AF                              New_Def C_PLOOP, "(+LOOP)", is_code, is_normal
 160+ 63AF             >
 160+ 63AF             >Dict_Ptr        defl    $
 160+ 63AF             >
 160+ 63AF             >//              ______________________________________________________________________
 160+ 63AF             >//              Heap part
 160+ 63AF             >
 160+ 63AF             >
 160+ 63AF             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E086             >
 160+ E086             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E086             >Latest_Definition defl  Heap_Ptr
 160+ E086             >
 160+ E086             >                // dummy db directives used to calculate length of namec
 160+ E086 28 2B 4C 4F >                db      "(+LOOP)"
 160+ E08A 4F 50 29    >
 160+ E08D             >len_NFA         defl    $ - temp_NFA
 160+ E08D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E086             >
 160+ E086 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E087 28 2B 4C 4F >                db      "(+LOOP)"               // name string in 7-bit ascii, but
 160+ E08B 4F 50 29    >
 160+ E08E             >                org     $-1                 // alter last byte of Name just above to set
 160+ E08D A9          >                db      {b $} | END_BIT     // msb as name end
 160+ E08E             >
 160+ E08E 7A 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E090             >Prev_Ptr        defl    Heap_Ptr
 160+ E090             >
 160+ E090             >mirror_Ptr      defl    $
 160+ E090             >
 160+ E090 B1 63       >                dw      Dict_Ptr + 2        // xt
 160+ E092             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E092             >
 160+ E092             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E092             >
 160+ E092             >//              ______________________________________________________________________
 160+ E092             >//              Dictionary part
 160+ E092             >
 160+ E092             >                org     Dict_Ptr
 160+ 63AF             >
 160+ 63AF 90 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 63B1             >
 160+ 63B1             >C_PLOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 63B1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 160+ 63B1 ~           >
 160+ 63B1 ~           >
 160+ 63B1             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 63B1             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 63B1             >
 160+ 63B1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 63B1
 162+ 63B1              Loop_Ptr:
 163+ 63B1 D5                           push    de
 164+ 63B2 D9                           exx
 165+ 63B3 E1                           pop     hl                  // HL is RP
 166+ 63B4 D1                           pop     de                  // DE get increment
 167+ 63B5 42                           ld      b, d                // bc is increment also
 168+ 63B6 4B                           ld      c, e
 169+ 63B7
 170+ 63B7 5E                           ld      e, (hl)             // hl points to loop-index, add increment to it.
 171+ 63B8 7B                           ld      a, e                // de keeps index before increment.
 172+ 63B9 81                           add     c
 173+ 63BA 77                           ld      (hl), a
 174+ 63BB 23                           inc     hl
 175+ 63BC 56                           ld      d, (hl)
 176+ 63BD 7A                           ld      a, d
 177+ 63BE 88                           adc     b
 178+ 63BF 77                           ld      (hl),a
 179+ 63C0 23                           inc     hl
 180+ 63C1
 181+ 63C1 7B                           ld      a, e
 182+ 63C2 96                           sub     (hl)
 183+ 63C3 5F                           ld      e, a
 184+ 63C4 23                           inc     hl
 185+ 63C5 7A                           ld      a, d
 186+ 63C6 9E                           sbc     (hl)
 187+ 63C7 57                           ld      d, a                // DE is index - limit : limit is the "new zero"
 188+ 63C8
 189+ 63C8 EB                           ex      de, hl              // swap HL and DE, so restore DE:=RP+3
 190+ 63C9 09                           add     hl, bc
 191+ 63CA CB 78                        bit     7, b                // keep increment-sign just before overwriting d
 192+ 63CC 28 01                        jr      z, Loop_NegativeIncrement
 193+ 63CE 3F                               ccf                     // carry-flag tracks bonudary limit crossing.
 194+ 63CF              Loop_NegativeIncrement:
 195+ 63CF 38 0C                        jr      c, Loop_Endif
 196+ 63D1 D9                               exx                     // restore IP and RP
 197+ 63D2              Branch_Ptr:
 198+ 63D2 0A                               ld      a, (bc)
 199+ 63D3 6F                               ld      l, a
 200+ 63D4 03                               inc     bc
 201+ 63D5 0A                               ld      a, (bc)
 202+ 63D6 67                               ld      h, a
 203+ 63D7 0B                               dec     bc
 204+ 63D8 09                               add     hl, bc
 205+ 63D9 4D                               ld      c, l
 206+ 63DA 44                               ld      b, h
 207+ 63DB                                  next
 207+ 63DB DD E9       >                jp      (ix)
 208+ 63DD              Loop_Endif:
 209+ 63DD 13                           inc     de                  // keep    RP+4 (exit from loop)
 210+ 63DE D5                           push    de
 211+ 63DF D9                           exx
 212+ 63E0 D1                           pop     de
 213+ 63E1              End_Loop_Ptr:
 214+ 63E1 03                           inc     bc                  // skip branch-style offset
 215+ 63E2 03                           inc     bc
 216+ 63E3                              next
 216+ 63E3 DD E9       >                jp      (ix)
 217+ 63E5
 218+ 63E5              //  ______________________________________________________________________
 219+ 63E5              //
 220+ 63E5              // (loop)       n --
 221+ 63E5              // same as (LOOP) but index is incremented by 1
 222+ 63E5              // compiled by LOOP.
 223+ 63E5                              New_Def C_LOOP, "(LOOP)", is_code, is_normal
 223+ 63E5             >
 223+ 63E5             >Dict_Ptr        defl    $
 223+ 63E5             >
 223+ 63E5             >//              ______________________________________________________________________
 223+ 63E5             >//              Heap part
 223+ 63E5             >
 223+ 63E5             >
 223+ 63E5             >                org     (Heap_Ptr & $1FFF) + $E000
 223+ E092             >
 223+ E092             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 223+ E092             >Latest_Definition defl  Heap_Ptr
 223+ E092             >
 223+ E092             >                // dummy db directives used to calculate length of namec
 223+ E092 28 4C 4F 4F >                db      "(LOOP)"
 223+ E096 50 29       >
 223+ E098             >len_NFA         defl    $ - temp_NFA
 223+ E098             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 223+ E092             >
 223+ E092 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 223+ E093 28 4C 4F 4F >                db      "(LOOP)"               // name string in 7-bit ascii, but
 223+ E097 50 29       >
 223+ E099             >                org     $-1                 // alter last byte of Name just above to set
 223+ E098 A9          >                db      {b $} | END_BIT     // msb as name end
 223+ E099             >
 223+ E099 86 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 223+ E09B             >Prev_Ptr        defl    Heap_Ptr
 223+ E09B             >
 223+ E09B             >mirror_Ptr      defl    $
 223+ E09B             >
 223+ E09B E7 63       >                dw      Dict_Ptr + 2        // xt
 223+ E09D             >Heap_Ptr        defl    $ - $E000           // save current HP
 223+ E09D             >
 223+ E09D             >Current_HP      defl  $ - $E000             // used to set HP once!
 223+ E09D             >
 223+ E09D             >//              ______________________________________________________________________
 223+ E09D             >//              Dictionary part
 223+ E09D             >
 223+ E09D             >                org     Dict_Ptr
 223+ 63E5             >
 223+ 63E5 9B 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 223+ 63E7             >
 223+ 63E7             >C_LOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 223+ 63E7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 223+ 63E7 ~           >
 223+ 63E7 ~           >
 223+ 63E7             >                endif           ; ok        // for other definitions it "points" the correct handler
 223+ 63E7             >                // Use of "; ok" to suppress "warning[fwdref]"
 223+ 63E7             >
 223+ 63E7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 224+ 63E7 ED 8A 00 01                  push    1
 225+ 63EB 18 C4                        jr      Loop_Ptr
 226+ 63ED
 227+ 63ED              //  ______________________________________________________________________
 228+ 63ED              //
 229+ 63ED              // branch       --
 230+ 63ED              // unconditional branch in colon definition using the following cell as an offset from current IP value
 231+ 63ED              // compiled by ELSE, AGAIN and some other immediate words
 232+ 63ED
 233+ 63ED                              New_Def BRANCH, "BRANCH", is_code, is_normal
 233+ 63ED             >
 233+ 63ED             >Dict_Ptr        defl    $
 233+ 63ED             >
 233+ 63ED             >//              ______________________________________________________________________
 233+ 63ED             >//              Heap part
 233+ 63ED             >
 233+ 63ED             >
 233+ 63ED             >                org     (Heap_Ptr & $1FFF) + $E000
 233+ E09D             >
 233+ E09D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 233+ E09D             >Latest_Definition defl  Heap_Ptr
 233+ E09D             >
 233+ E09D             >                // dummy db directives used to calculate length of namec
 233+ E09D 42 52 41 4E >                db      "BRANCH"
 233+ E0A1 43 48       >
 233+ E0A3             >len_NFA         defl    $ - temp_NFA
 233+ E0A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 233+ E09D             >
 233+ E09D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 233+ E09E 42 52 41 4E >                db      "BRANCH"               // name string in 7-bit ascii, but
 233+ E0A2 43 48       >
 233+ E0A4             >                org     $-1                 // alter last byte of Name just above to set
 233+ E0A3 C8          >                db      {b $} | END_BIT     // msb as name end
 233+ E0A4             >
 233+ E0A4 92 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 233+ E0A6             >Prev_Ptr        defl    Heap_Ptr
 233+ E0A6             >
 233+ E0A6             >mirror_Ptr      defl    $
 233+ E0A6             >
 233+ E0A6 EF 63       >                dw      Dict_Ptr + 2        // xt
 233+ E0A8             >Heap_Ptr        defl    $ - $E000           // save current HP
 233+ E0A8             >
 233+ E0A8             >Current_HP      defl  $ - $E000             // used to set HP once!
 233+ E0A8             >
 233+ E0A8             >//              ______________________________________________________________________
 233+ E0A8             >//              Dictionary part
 233+ E0A8             >
 233+ E0A8             >                org     Dict_Ptr
 233+ 63ED             >
 233+ 63ED A6 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 233+ 63EF             >
 233+ 63EF             >BRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 233+ 63EF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 233+ 63EF ~           >
 233+ 63EF ~           >
 233+ 63EF             >                endif           ; ok        // for other definitions it "points" the correct handler
 233+ 63EF             >                // Use of "; ok" to suppress "warning[fwdref]"
 233+ 63EF             >
 233+ 63EF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 234+ 63EF 18 E1                        jr Branch_Ptr
 235+ 63F1
 236+ 63F1
 237+ 63F1              //  ______________________________________________________________________
 238+ 63F1              //
 239+ 63F1              // 0branch      f --
 240+ 63F1              // conditional branch if the top-of-stack is ZERO or FALSE.
 241+ 63F1              // compiled by IF, UNTIL and some other immediate words
 242+ 63F1
 243+ 63F1                              New_Def ZBRANCH, "0BRANCH", is_code, is_normal
 243+ 63F1             >
 243+ 63F1             >Dict_Ptr        defl    $
 243+ 63F1             >
 243+ 63F1             >//              ______________________________________________________________________
 243+ 63F1             >//              Heap part
 243+ 63F1             >
 243+ 63F1             >
 243+ 63F1             >                org     (Heap_Ptr & $1FFF) + $E000
 243+ E0A8             >
 243+ E0A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 243+ E0A8             >Latest_Definition defl  Heap_Ptr
 243+ E0A8             >
 243+ E0A8             >                // dummy db directives used to calculate length of namec
 243+ E0A8 30 42 52 41 >                db      "0BRANCH"
 243+ E0AC 4E 43 48    >
 243+ E0AF             >len_NFA         defl    $ - temp_NFA
 243+ E0AF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 243+ E0A8             >
 243+ E0A8 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 243+ E0A9 30 42 52 41 >                db      "0BRANCH"               // name string in 7-bit ascii, but
 243+ E0AD 4E 43 48    >
 243+ E0B0             >                org     $-1                 // alter last byte of Name just above to set
 243+ E0AF C8          >                db      {b $} | END_BIT     // msb as name end
 243+ E0B0             >
 243+ E0B0 9D 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 243+ E0B2             >Prev_Ptr        defl    Heap_Ptr
 243+ E0B2             >
 243+ E0B2             >mirror_Ptr      defl    $
 243+ E0B2             >
 243+ E0B2 F3 63       >                dw      Dict_Ptr + 2        // xt
 243+ E0B4             >Heap_Ptr        defl    $ - $E000           // save current HP
 243+ E0B4             >
 243+ E0B4             >Current_HP      defl  $ - $E000             // used to set HP once!
 243+ E0B4             >
 243+ E0B4             >//              ______________________________________________________________________
 243+ E0B4             >//              Dictionary part
 243+ E0B4             >
 243+ E0B4             >                org     Dict_Ptr
 243+ 63F1             >
 243+ 63F1 B2 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 243+ 63F3             >
 243+ 63F3             >ZBRANCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 243+ 63F3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 243+ 63F3 ~           >
 243+ 63F3 ~           >
 243+ 63F3             >                endif           ; ok        // for other definitions it "points" the correct handler
 243+ 63F3             >                // Use of "; ok" to suppress "warning[fwdref]"
 243+ 63F3             >
 243+ 63F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 244+ 63F3              ZBranch_Ptr:
 245+ 63F3 E1                           pop     hl
 246+ 63F4 7D                           ld      a, l
 247+ 63F5 B4                           or      h
 248+ 63F6 28 DA                        jr      z, Branch_Ptr
 249+ 63F8 18 E7                        jr      End_Loop_Ptr
 250+ 63FA              //              inc     bc                  // skip branch-style offseet
 251+ 63FA              //              inc     bc
 252+ 63FA              //              next
 253+ 63FA
 254+ 63FA              //  ______________________________________________________________________
 255+ 63FA              //
 256+ 63FA              // (leave)        --
 257+ 63FA              // compiled by LEAVE
 258+ 63FA              // this forces to exit from loop and jump past
 259+ 63FA                              New_Def C_LEAVE, "(LEAVE)", is_code, is_normal
 259+ 63FA             >
 259+ 63FA             >Dict_Ptr        defl    $
 259+ 63FA             >
 259+ 63FA             >//              ______________________________________________________________________
 259+ 63FA             >//              Heap part
 259+ 63FA             >
 259+ 63FA             >
 259+ 63FA             >                org     (Heap_Ptr & $1FFF) + $E000
 259+ E0B4             >
 259+ E0B4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 259+ E0B4             >Latest_Definition defl  Heap_Ptr
 259+ E0B4             >
 259+ E0B4             >                // dummy db directives used to calculate length of namec
 259+ E0B4 28 4C 45 41 >                db      "(LEAVE)"
 259+ E0B8 56 45 29    >
 259+ E0BB             >len_NFA         defl    $ - temp_NFA
 259+ E0BB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 259+ E0B4             >
 259+ E0B4 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 259+ E0B5 28 4C 45 41 >                db      "(LEAVE)"               // name string in 7-bit ascii, but
 259+ E0B9 56 45 29    >
 259+ E0BC             >                org     $-1                 // alter last byte of Name just above to set
 259+ E0BB A9          >                db      {b $} | END_BIT     // msb as name end
 259+ E0BC             >
 259+ E0BC A8 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 259+ E0BE             >Prev_Ptr        defl    Heap_Ptr
 259+ E0BE             >
 259+ E0BE             >mirror_Ptr      defl    $
 259+ E0BE             >
 259+ E0BE FC 63       >                dw      Dict_Ptr + 2        // xt
 259+ E0C0             >Heap_Ptr        defl    $ - $E000           // save current HP
 259+ E0C0             >
 259+ E0C0             >Current_HP      defl  $ - $E000             // used to set HP once!
 259+ E0C0             >
 259+ E0C0             >//              ______________________________________________________________________
 259+ E0C0             >//              Dictionary part
 259+ E0C0             >
 259+ E0C0             >                org     Dict_Ptr
 259+ 63FA             >
 259+ 63FA BE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 259+ 63FC             >
 259+ 63FC             >C_LEAVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 259+ 63FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 259+ 63FC ~           >
 259+ 63FC ~           >
 259+ 63FC             >                endif           ; ok        // for other definitions it "points" the correct handler
 259+ 63FC             >                // Use of "; ok" to suppress "warning[fwdref]"
 259+ 63FC             >
 259+ 63FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 260+ 63FC                              // ex      de, hl
 261+ 63FC                              // *** ldhlrp
 262+ 63FC 3E 04                        ld      a, 4
 263+ 63FE ED 32                        add     de, a
 264+ 6400                              // *** ldrphl
 265+ 6400                              // ex      de, hl
 266+ 6400 18 D0                        jr      Branch_Ptr       // perform branch consuming following cell
 267+ 6402                              next
 267+ 6402 DD E9       >                jp      (ix)
 268+ 6404
 269+ 6404              //  ______________________________________________________________________
 270+ 6404              //
 271+ 6404              // (?do)        lim ind --
 272+ 6404              // compiled by ?DO to make a loop checking for lim == ind first
 273+ 6404              // at run-time (?DO) must be followed by a BRANCH offset
 274+ 6404              // used to skip the loop if lim == ind
 275+ 6404                              New_Def C_Q_DO, "(?DO)", is_code, is_normal
 275+ 6404             >
 275+ 6404             >Dict_Ptr        defl    $
 275+ 6404             >
 275+ 6404             >//              ______________________________________________________________________
 275+ 6404             >//              Heap part
 275+ 6404             >
 275+ 6404             >
 275+ 6404             >                org     (Heap_Ptr & $1FFF) + $E000
 275+ E0C0             >
 275+ E0C0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 275+ E0C0             >Latest_Definition defl  Heap_Ptr
 275+ E0C0             >
 275+ E0C0             >                // dummy db directives used to calculate length of namec
 275+ E0C0 28 3F 44 4F >                db      "(?DO)"
 275+ E0C4 29          >
 275+ E0C5             >len_NFA         defl    $ - temp_NFA
 275+ E0C5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 275+ E0C0             >
 275+ E0C0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 275+ E0C1 28 3F 44 4F >                db      "(?DO)"               // name string in 7-bit ascii, but
 275+ E0C5 29          >
 275+ E0C6             >                org     $-1                 // alter last byte of Name just above to set
 275+ E0C5 A9          >                db      {b $} | END_BIT     // msb as name end
 275+ E0C6             >
 275+ E0C6 B4 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 275+ E0C8             >Prev_Ptr        defl    Heap_Ptr
 275+ E0C8             >
 275+ E0C8             >mirror_Ptr      defl    $
 275+ E0C8             >
 275+ E0C8 06 64       >                dw      Dict_Ptr + 2        // xt
 275+ E0CA             >Heap_Ptr        defl    $ - $E000           // save current HP
 275+ E0CA             >
 275+ E0CA             >Current_HP      defl  $ - $E000             // used to set HP once!
 275+ E0CA             >
 275+ E0CA             >//              ______________________________________________________________________
 275+ E0CA             >//              Dictionary part
 275+ E0CA             >
 275+ E0CA             >                org     Dict_Ptr
 275+ 6404             >
 275+ 6404 C8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 275+ 6406             >
 275+ 6406             >C_Q_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 275+ 6406 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 275+ 6406 ~           >
 275+ 6406 ~           >
 275+ 6406             >                endif           ; ok        // for other definitions it "points" the correct handler
 275+ 6406             >                // Use of "; ok" to suppress "warning[fwdref]"
 275+ 6406             >
 275+ 6406             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 276+ 6406 D9                           exx
 277+ 6407 D1                            pop     de                  // de has the index
 278+ 6408 E1                            pop     hl                  // hl has the limit
 279+ 6409 44                            ld      b, h
 280+ 640A 4D                            ld      c, l
 281+ 640B E5                            push    hl                  // put them back to stack for later
 282+ 640C D5                            push    de
 283+ 640D A7                            and     a                   // reset carry flag
 284+ 640E ED 52                         sbc     hl, de              // compute limit - index
 285+ 6410 D9                           exx
 286+ 6411 20 04                        jr      nz, Do_Ptr          // if zero then don't even begin loop
 287+ 6413 E1                               pop     hl
 288+ 6414 E1                               pop     hl
 289+ 6415 18 BB                            jr      Branch_Ptr          // perform branch consuming following cell
 290+ 6417              Do_Ptr:
 291+ 6417                              // *** ldhlrp                 // prepare RP
 292+ 6417                              // *** ex      de, hl
 293+ 6417                              // dec     de
 294+ 6417                              // dec     de
 295+ 6417                              // dec     de
 296+ 6417                              // dec     de
 297+ 6417 ED 35 FC FF                  add     de, -4              // cannot use LD A,-4 and ADD DE,A !
 298+ 641B D5                           push    de                  // pass it to h'l'
 299+ 641C                              // *** ex      de, hl
 300+ 641C                              // *** ldrphl
 301+ 641C D9                           exx
 302+ 641D E1                            pop     hl
 303+ 641E
 304+ 641E                               // store index as top RP
 305+ 641E D1                            pop     de
 306+ 641F 73                            ld      (hl), e
 307+ 6420 23                            inc     hl
 308+ 6421 72                            ld      (hl), d
 309+ 6422 23                            inc     hl
 310+ 6423                               // stores lim as second from top RP
 311+ 6423 D1                            pop     de
 312+ 6424 73                            ld      (hl), e
 313+ 6425 23                            inc     hl
 314+ 6426 72                            ld      (hl), d
 315+ 6427 D9                           exx
 316+ 6428                              // skip branch-style offseet
 317+ 6428 03                           inc     bc
 318+ 6429 03                           inc     bc
 319+ 642A                              next
 319+ 642A DD E9       >                jp      (ix)
 320+ 642C
 321+ 642C              //  ______________________________________________________________________
 322+ 642C              //
 323+ 642C              // (do)        lim ind --
 324+ 642C              // compiled by DO to make a loop checking for lim == ind first
 325+ 642C              // this is a simpler version of (?DO)
 326+ 642C                              New_Def C_DO, "(DO)", is_code, is_normal
 326+ 642C             >
 326+ 642C             >Dict_Ptr        defl    $
 326+ 642C             >
 326+ 642C             >//              ______________________________________________________________________
 326+ 642C             >//              Heap part
 326+ 642C             >
 326+ 642C             >
 326+ 642C             >                org     (Heap_Ptr & $1FFF) + $E000
 326+ E0CA             >
 326+ E0CA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 326+ E0CA             >Latest_Definition defl  Heap_Ptr
 326+ E0CA             >
 326+ E0CA             >                // dummy db directives used to calculate length of namec
 326+ E0CA 28 44 4F 29 >                db      "(DO)"
 326+ E0CE             >len_NFA         defl    $ - temp_NFA
 326+ E0CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 326+ E0CA             >
 326+ E0CA 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 326+ E0CB 28 44 4F 29 >                db      "(DO)"               // name string in 7-bit ascii, but
 326+ E0CF             >                org     $-1                 // alter last byte of Name just above to set
 326+ E0CE A9          >                db      {b $} | END_BIT     // msb as name end
 326+ E0CF             >
 326+ E0CF C0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 326+ E0D1             >Prev_Ptr        defl    Heap_Ptr
 326+ E0D1             >
 326+ E0D1             >mirror_Ptr      defl    $
 326+ E0D1             >
 326+ E0D1 2E 64       >                dw      Dict_Ptr + 2        // xt
 326+ E0D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 326+ E0D3             >
 326+ E0D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 326+ E0D3             >
 326+ E0D3             >//              ______________________________________________________________________
 326+ E0D3             >//              Dictionary part
 326+ E0D3             >
 326+ E0D3             >                org     Dict_Ptr
 326+ 642C             >
 326+ 642C D1 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 326+ 642E             >
 326+ 642E             >C_DO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 326+ 642E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 326+ 642E ~           >
 326+ 642E ~           >
 326+ 642E             >                endif           ; ok        // for other definitions it "points" the correct handler
 326+ 642E             >                // Use of "; ok" to suppress "warning[fwdref]"
 326+ 642E             >
 326+ 642E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 327+ 642E 0B                           dec     bc                  // prepare IP beforehand
 328+ 642F 0B                           dec     bc                  // to balance the two final 2 inc bc in (?do)
 329+ 6430 18 E5                        jr      Do_Ptr
 330+ 6432
 331+ 6432              //  ______________________________________________________________________
 332+ 6432              //
 333+ 6432              // i            -- n
 334+ 6432              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 335+ 6432              // the current value of the index-loop
 336+ 6432                              New_Def I, "I", is_code, is_normal
 336+ 6432             >
 336+ 6432             >Dict_Ptr        defl    $
 336+ 6432             >
 336+ 6432             >//              ______________________________________________________________________
 336+ 6432             >//              Heap part
 336+ 6432             >
 336+ 6432             >
 336+ 6432             >                org     (Heap_Ptr & $1FFF) + $E000
 336+ E0D3             >
 336+ E0D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 336+ E0D3             >Latest_Definition defl  Heap_Ptr
 336+ E0D3             >
 336+ E0D3             >                // dummy db directives used to calculate length of namec
 336+ E0D3 49          >                db      "I"
 336+ E0D4             >len_NFA         defl    $ - temp_NFA
 336+ E0D4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 336+ E0D3             >
 336+ E0D3 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 336+ E0D4 49          >                db      "I"               // name string in 7-bit ascii, but
 336+ E0D5             >                org     $-1                 // alter last byte of Name just above to set
 336+ E0D4 C9          >                db      {b $} | END_BIT     // msb as name end
 336+ E0D5             >
 336+ E0D5 CA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 336+ E0D7             >Prev_Ptr        defl    Heap_Ptr
 336+ E0D7             >
 336+ E0D7             >mirror_Ptr      defl    $
 336+ E0D7             >
 336+ E0D7 34 64       >                dw      Dict_Ptr + 2        // xt
 336+ E0D9             >Heap_Ptr        defl    $ - $E000           // save current HP
 336+ E0D9             >
 336+ E0D9             >Current_HP      defl  $ - $E000             // used to set HP once!
 336+ E0D9             >
 336+ E0D9             >//              ______________________________________________________________________
 336+ E0D9             >//              Dictionary part
 336+ E0D9             >
 336+ E0D9             >                org     Dict_Ptr
 336+ 6432             >
 336+ 6432 D7 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 336+ 6434             >
 336+ 6434             >I:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 336+ 6434 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 336+ 6434 ~           >
 336+ 6434 ~           >
 336+ 6434             >                endif           ; ok        // for other definitions it "points" the correct handler
 336+ 6434             >                // Use of "; ok" to suppress "warning[fwdref]"
 336+ 6434             >
 336+ 6434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 337+ 6434              I_Ptr:
 338+ 6434 62                           ld      h, d
 339+ 6435 6B                           ld      l, e
 340+ 6436                              // *** ldhlrp
 341+ 6436              I_Ptr_prime:
 342+ 6436 7E                           ld      a, (hl)
 343+ 6437 23                           inc     hl
 344+ 6438 66                           ld      h, (hl)
 345+ 6439 6F                           ld      l, a
 346+ 643A E5                           push    hl
 347+ 643B                              next
 347+ 643B DD E9       >                jp      (ix)
 348+ 643D
 349+ 643D
 350+ 643D              //  ______________________________________________________________________
 351+ 643D              //
 352+ 643D              // i'            -- n
 353+ 643D              // used between DO and LOOP or between DO e +LOOP to copy on top of stack
 354+ 643D              // the limit of the index-loop
 355+ 643D
 356+ 643D                              New_Def II, "I'", is_code, is_normal
 356+ 643D             >
 356+ 643D             >Dict_Ptr        defl    $
 356+ 643D             >
 356+ 643D             >//              ______________________________________________________________________
 356+ 643D             >//              Heap part
 356+ 643D             >
 356+ 643D             >
 356+ 643D             >                org     (Heap_Ptr & $1FFF) + $E000
 356+ E0D9             >
 356+ E0D9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 356+ E0D9             >Latest_Definition defl  Heap_Ptr
 356+ E0D9             >
 356+ E0D9             >                // dummy db directives used to calculate length of namec
 356+ E0D9 49 27       >                db      "I'"
 356+ E0DB             >len_NFA         defl    $ - temp_NFA
 356+ E0DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 356+ E0D9             >
 356+ E0D9 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 356+ E0DA 49 27       >                db      "I'"               // name string in 7-bit ascii, but
 356+ E0DC             >                org     $-1                 // alter last byte of Name just above to set
 356+ E0DB A7          >                db      {b $} | END_BIT     // msb as name end
 356+ E0DC             >
 356+ E0DC D3 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 356+ E0DE             >Prev_Ptr        defl    Heap_Ptr
 356+ E0DE             >
 356+ E0DE             >mirror_Ptr      defl    $
 356+ E0DE             >
 356+ E0DE 3F 64       >                dw      Dict_Ptr + 2        // xt
 356+ E0E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 356+ E0E0             >
 356+ E0E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 356+ E0E0             >
 356+ E0E0             >//              ______________________________________________________________________
 356+ E0E0             >//              Dictionary part
 356+ E0E0             >
 356+ E0E0             >                org     Dict_Ptr
 356+ 643D             >
 356+ 643D DE 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 356+ 643F             >
 356+ 643F             >II:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 356+ 643F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 356+ 643F ~           >
 356+ 643F ~           >
 356+ 643F             >                endif           ; ok        // for other definitions it "points" the correct handler
 356+ 643F             >                // Use of "; ok" to suppress "warning[fwdref]"
 356+ 643F             >
 356+ 643F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 357+ 643F 62                           ld      h, d
 358+ 6440 6B                           ld      l, e
 359+ 6441                              // *** ldhlrp
 360+ 6441 23                           inc     hl
 361+ 6442 23                           inc     hl
 362+ 6443 18 F1                        jr      I_Ptr_prime
 363+ 6445
 364+ 6445
 365+ 6445              //  ______________________________________________________________________
 366+ 6445              //
 367+ 6445              // digit        c n -- u tf  |  ff
 368+ 6445              // convert a character c using base n
 369+ 6445              // returns a unsigned number and a true flag
 370+ 6445              // or just a false flag if the conversion fails
 371+ 6445                              New_Def DIGIT, "DIGIT", is_code, is_normal
 371+ 6445             >
 371+ 6445             >Dict_Ptr        defl    $
 371+ 6445             >
 371+ 6445             >//              ______________________________________________________________________
 371+ 6445             >//              Heap part
 371+ 6445             >
 371+ 6445             >
 371+ 6445             >                org     (Heap_Ptr & $1FFF) + $E000
 371+ E0E0             >
 371+ E0E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 371+ E0E0             >Latest_Definition defl  Heap_Ptr
 371+ E0E0             >
 371+ E0E0             >                // dummy db directives used to calculate length of namec
 371+ E0E0 44 49 47 49 >                db      "DIGIT"
 371+ E0E4 54          >
 371+ E0E5             >len_NFA         defl    $ - temp_NFA
 371+ E0E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 371+ E0E0             >
 371+ E0E0 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 371+ E0E1 44 49 47 49 >                db      "DIGIT"               // name string in 7-bit ascii, but
 371+ E0E5 54          >
 371+ E0E6             >                org     $-1                 // alter last byte of Name just above to set
 371+ E0E5 D4          >                db      {b $} | END_BIT     // msb as name end
 371+ E0E6             >
 371+ E0E6 D9 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 371+ E0E8             >Prev_Ptr        defl    Heap_Ptr
 371+ E0E8             >
 371+ E0E8             >mirror_Ptr      defl    $
 371+ E0E8             >
 371+ E0E8 47 64       >                dw      Dict_Ptr + 2        // xt
 371+ E0EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 371+ E0EA             >
 371+ E0EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 371+ E0EA             >
 371+ E0EA             >//              ______________________________________________________________________
 371+ E0EA             >//              Dictionary part
 371+ E0EA             >
 371+ E0EA             >                org     Dict_Ptr
 371+ 6445             >
 371+ 6445 E8 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 371+ 6447             >
 371+ 6447             >DIGIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 371+ 6447 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 371+ 6447 ~           >
 371+ 6447 ~           >
 371+ 6447             >                endif           ; ok        // for other definitions it "points" the correct handler
 371+ 6447             >                // Use of "; ok" to suppress "warning[fwdref]"
 371+ 6447             >
 371+ 6447             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 372+ 6447 D9                           exx
 373+ 6448 E1                           pop     hl                  // l has the base
 374+ 6449 D1                           pop     de                  // e has the digit
 375+ 644A 7B                           ld      a, e
 376+ 644B FE 60                        cp      $60                 // check if lowercase
 377+ 644D 38 02                        jr      c, Digit_Uppercase
 378+ 644F D6 20                            sub     $20                 // quick'n'dirty uppercase
 379+ 6451              Digit_Uppercase:
 380+ 6451 D6 30                        sub     $30
 381+ 6453 38 15                        jr      c, Digit_Fail       // fail when character < "0"
 382+ 6455 FE 0A                            cp      $0A
 383+ 6457 38 06                            jr      c, Digit_Decimal    // perhaps is not decimal
 384+ 6459 D6 07                                sub     7                   // try hex and subtract 7
 385+ 645B FE 0A                                cp      $0A
 386+ 645D 38 0B                                jr      c,  Digit_Fail      // it is not hex !
 387+ 645F
 388+ 645F              Digit_Decimal:
 389+ 645F                              // compare digit
 390+ 645F BD                           cp      l                   // compare with base
 391+ 6460 30 08                        jr      nc, Digit_Fail      // fail when greater than base
 392+ 6462 5F                               ld      e, a                // digit is returned as second from TOS
 393+ 6463                              //  ld      hl, -1
 394+ 6463 ED 62                            sbc     hl, hl
 395+ 6465 D5                               push    de
 396+ 6466 E5                               push    hl
 397+ 6467 D9                               exx
 398+ 6468                                  next
 398+ 6468 DD E9       >                jp      (ix)
 399+ 646A              Digit_Fail:
 400+ 646A 21 00 00                     ld      hl, 0
 401+ 646D E5                           push    hl
 402+ 646E D9                           exx
 403+ 646F                              next
 403+ 646F DD E9       >                jp      (ix)
 404+ 6471
 405+ 6471              //  ______________________________________________________________________
 406+ 6471              //
 407+ 6471              //  parametric uppercase routine
 408+ 6471              //  depending on the following op-code the routine can be by-passed
 409+ 6471              //  changing the behaviour of some callers.
 410+ 6471              //  If it is "ret" then the system is Case-Sensitive
 411+ 6471              //  If it is "Nop" then the system is Case-Insensitive
 412+ 6471              //  Only A register is touched.
 413+ 6471 00           Case_Sensitive: nop                         // Default is case-insensitive.
 414+ 6472              Case_Upper:
 415+ 6472 FE 61                        cp      LC_A_CHAR           // lower-case "a"
 416+ 6474 D8                           ret     c                   // no change if A < "a"
 417+ 6475 FE 7B                        cp      LC_Z_CHAR + 1       // lower-case "z" + 1
 418+ 6477 D0                           ret     nc                  // no change if A > "z"
 419+ 6478 D6 20                        sub     $20                 // Make uppercase if A in ["a".."z"]
 420+ 647A C9                           ret
 421+ 647B
 422+ 647B              //  ______________________________________________________________________
 423+ 647B              //
 424+ 647B              //  caseon      --
 425+ 647B              // set system case-sensitivity on
 426+ 647B              // it patches a RET/NOP at the beginning of the uppercase-routine
 427+ 647B                              New_Def CASEON, "CASEON", is_code, is_normal
 427+ 647B             >
 427+ 647B             >Dict_Ptr        defl    $
 427+ 647B             >
 427+ 647B             >//              ______________________________________________________________________
 427+ 647B             >//              Heap part
 427+ 647B             >
 427+ 647B             >
 427+ 647B             >                org     (Heap_Ptr & $1FFF) + $E000
 427+ E0EA             >
 427+ E0EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 427+ E0EA             >Latest_Definition defl  Heap_Ptr
 427+ E0EA             >
 427+ E0EA             >                // dummy db directives used to calculate length of namec
 427+ E0EA 43 41 53 45 >                db      "CASEON"
 427+ E0EE 4F 4E       >
 427+ E0F0             >len_NFA         defl    $ - temp_NFA
 427+ E0F0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 427+ E0EA             >
 427+ E0EA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 427+ E0EB 43 41 53 45 >                db      "CASEON"               // name string in 7-bit ascii, but
 427+ E0EF 4F 4E       >
 427+ E0F1             >                org     $-1                 // alter last byte of Name just above to set
 427+ E0F0 CE          >                db      {b $} | END_BIT     // msb as name end
 427+ E0F1             >
 427+ E0F1 E0 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 427+ E0F3             >Prev_Ptr        defl    Heap_Ptr
 427+ E0F3             >
 427+ E0F3             >mirror_Ptr      defl    $
 427+ E0F3             >
 427+ E0F3 7D 64       >                dw      Dict_Ptr + 2        // xt
 427+ E0F5             >Heap_Ptr        defl    $ - $E000           // save current HP
 427+ E0F5             >
 427+ E0F5             >Current_HP      defl  $ - $E000             // used to set HP once!
 427+ E0F5             >
 427+ E0F5             >//              ______________________________________________________________________
 427+ E0F5             >//              Dictionary part
 427+ E0F5             >
 427+ E0F5             >                org     Dict_Ptr
 427+ 647B             >
 427+ 647B F3 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 427+ 647D             >
 427+ 647D             >CASEON:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 427+ 647D ~           >                call    runcode ; ok        // for primitive definitions  actual code
 427+ 647D ~           >
 427+ 647D ~           >
 427+ 647D             >                endif           ; ok        // for other definitions it "points" the correct handler
 427+ 647D             >                // Use of "; ok" to suppress "warning[fwdref]"
 427+ 647D             >
 427+ 647D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 428+ 647D 3E C9                        ld      a, $C9              // "ret"
 429+ 647F 32 71 64                     ld      (Case_Sensitive), a
 430+ 6482                              next
 430+ 6482 DD E9       >                jp      (ix)
 431+ 6484
 432+ 6484              //  ______________________________________________________________________
 433+ 6484              //
 434+ 6484              //  caseoff     --
 435+ 6484              // set system case-sensitivity on
 436+ 6484              // it patches a RET/NOP at the beginning of the uppercase-routine
 437+ 6484                              New_Def CASEOFF, "CASEOFF", is_code, is_normal
 437+ 6484             >
 437+ 6484             >Dict_Ptr        defl    $
 437+ 6484             >
 437+ 6484             >//              ______________________________________________________________________
 437+ 6484             >//              Heap part
 437+ 6484             >
 437+ 6484             >
 437+ 6484             >                org     (Heap_Ptr & $1FFF) + $E000
 437+ E0F5             >
 437+ E0F5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 437+ E0F5             >Latest_Definition defl  Heap_Ptr
 437+ E0F5             >
 437+ E0F5             >                // dummy db directives used to calculate length of namec
 437+ E0F5 43 41 53 45 >                db      "CASEOFF"
 437+ E0F9 4F 46 46    >
 437+ E0FC             >len_NFA         defl    $ - temp_NFA
 437+ E0FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 437+ E0F5             >
 437+ E0F5 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 437+ E0F6 43 41 53 45 >                db      "CASEOFF"               // name string in 7-bit ascii, but
 437+ E0FA 4F 46 46    >
 437+ E0FD             >                org     $-1                 // alter last byte of Name just above to set
 437+ E0FC C6          >                db      {b $} | END_BIT     // msb as name end
 437+ E0FD             >
 437+ E0FD EA 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 437+ E0FF             >Prev_Ptr        defl    Heap_Ptr
 437+ E0FF             >
 437+ E0FF             >mirror_Ptr      defl    $
 437+ E0FF             >
 437+ E0FF 86 64       >                dw      Dict_Ptr + 2        // xt
 437+ E101             >Heap_Ptr        defl    $ - $E000           // save current HP
 437+ E101             >
 437+ E101             >Current_HP      defl  $ - $E000             // used to set HP once!
 437+ E101             >
 437+ E101             >//              ______________________________________________________________________
 437+ E101             >//              Dictionary part
 437+ E101             >
 437+ E101             >                org     Dict_Ptr
 437+ 6484             >
 437+ 6484 FF 00       >                dw      mirror_Ptr - $E000 + Heap_offset
 437+ 6486             >
 437+ 6486             >CASEOFF:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 437+ 6486 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 437+ 6486 ~           >
 437+ 6486 ~           >
 437+ 6486             >                endif           ; ok        // for other definitions it "points" the correct handler
 437+ 6486             >                // Use of "; ok" to suppress "warning[fwdref]"
 437+ 6486             >
 437+ 6486             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 438+ 6486 3E 00                        ld      a, $00              // "nop"
 439+ 6488 32 71 64                     ld      (Case_Sensitive), a
 440+ 648B                              next
 440+ 648B DD E9       >                jp      (ix)
 441+ 648D
 442+ 648D              //  ______________________________________________________________________
 443+ 648D              //
 444+ 648D              //  upper       c1 -- c1 | c2
 445+ 648D              // character on top of stack is forced to Uppercase.
 446+ 648D                              New_Def UPPER, "UPPER", is_code, is_normal
 446+ 648D             >
 446+ 648D             >Dict_Ptr        defl    $
 446+ 648D             >
 446+ 648D             >//              ______________________________________________________________________
 446+ 648D             >//              Heap part
 446+ 648D             >
 446+ 648D             >
 446+ 648D             >                org     (Heap_Ptr & $1FFF) + $E000
 446+ E101             >
 446+ E101             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 446+ E101             >Latest_Definition defl  Heap_Ptr
 446+ E101             >
 446+ E101             >                // dummy db directives used to calculate length of namec
 446+ E101 55 50 50 45 >                db      "UPPER"
 446+ E105 52          >
 446+ E106             >len_NFA         defl    $ - temp_NFA
 446+ E106             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 446+ E101             >
 446+ E101 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 446+ E102 55 50 50 45 >                db      "UPPER"               // name string in 7-bit ascii, but
 446+ E106 52          >
 446+ E107             >                org     $-1                 // alter last byte of Name just above to set
 446+ E106 D2          >                db      {b $} | END_BIT     // msb as name end
 446+ E107             >
 446+ E107 F5 00       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 446+ E109             >Prev_Ptr        defl    Heap_Ptr
 446+ E109             >
 446+ E109             >mirror_Ptr      defl    $
 446+ E109             >
 446+ E109 8F 64       >                dw      Dict_Ptr + 2        // xt
 446+ E10B             >Heap_Ptr        defl    $ - $E000           // save current HP
 446+ E10B             >
 446+ E10B             >Current_HP      defl  $ - $E000             // used to set HP once!
 446+ E10B             >
 446+ E10B             >//              ______________________________________________________________________
 446+ E10B             >//              Dictionary part
 446+ E10B             >
 446+ E10B             >                org     Dict_Ptr
 446+ 648D             >
 446+ 648D 09 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 446+ 648F             >
 446+ 648F             >UPPER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 446+ 648F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 446+ 648F ~           >
 446+ 648F ~           >
 446+ 648F             >                endif           ; ok        // for other definitions it "points" the correct handler
 446+ 648F             >                // Use of "; ok" to suppress "warning[fwdref]"
 446+ 648F             >
 446+ 648F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 447+ 648F E1                           pop     hl
 448+ 6490 7D                           ld      a, l
 449+ 6491 CD 72 64                     call    Case_Upper
 450+ 6494 6F                           ld      l, a
 451+ 6495
 452+ 6495                              psh1
 452+ 6495 E5          >                push    hl
 452+ 6496 DD E9       >                jp      (ix)
 453+ 6498
 454+ 6498              //  ______________________________________________________________________
 455+ 6498
 456+ 6498              // This routine must be called with alternate registers active
 457+ 6498              // input: None
 458+ 6498              // Output: A = 8k-page number currently fitted at MMU7
 459+ 6498              MMU7_read:
 460+ 6498 3E 57                        ld      a, 87
 461+ 649A 01 3B 24                     ld      bc, $243B
 462+ 649D ED 79                        out     (c), a
 463+ 649F 04                           inc     b
 464+ 64A0 ED 78                        in      a, (c)
 465+ 64A2 C9                           ret
 466+ 64A3
 467+ 64A3              //  ______________________________________________________________________
 468+ 64A3
 469+ 64A3              // given an HP-pointer in input, turn it into page + offset
 470+ 64A3              // Input: HL = hp-pointer
 471+ 64A3              // Output: A = page,  HL = offset
 472+ 64A3              TO_FAR_rout:
 473+ 64A3 7C                           ld      a, h
 474+ 64A4 08                           ex      af, af
 475+ 64A5 7C                           ld      a, h
 476+ 64A6 F6 E0                        or      $E0
 477+ 64A8 67                           ld      h, a
 478+ 64A9 08                           ex      af, af
 479+ 64AA 07                           rlca
 480+ 64AB 07                           rlca
 481+ 64AC 07                           rlca
 482+ 64AD E6 07                        and     $07
 483+ 64AF C6 20                        add     $20
 484+ 64B1 C9                           ret
 485+ 64B2
 486+ 64B2
 487+ 64B2              //  ______________________________________________________________________
 488+ 64B2              //
 489+ 64B2              // (find)       addr voc -- 0 | cfa b 1
 490+ 64B2              // vocabulary search,
 491+ 64B2              // - voc is starting word's NFA
 492+ 64B2              // - addr is the string to be searched for
 493+ 64B2              // On success, it returns the CFA of found word, the first NFA byte
 494+ 64B2              // (which contains length and some flags) and a true flag.
 495+ 64B2              // On fail, a false flag  (no more: leaves addr unchanged)
 496+ 64B2                              New_Def C_FIND, "(FIND)", is_code, is_normal
 496+ 64B2             >
 496+ 64B2             >Dict_Ptr        defl    $
 496+ 64B2             >
 496+ 64B2             >//              ______________________________________________________________________
 496+ 64B2             >//              Heap part
 496+ 64B2             >
 496+ 64B2             >
 496+ 64B2             >                org     (Heap_Ptr & $1FFF) + $E000
 496+ E10B             >
 496+ E10B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 496+ E10B             >Latest_Definition defl  Heap_Ptr
 496+ E10B             >
 496+ E10B             >                // dummy db directives used to calculate length of namec
 496+ E10B 28 46 49 4E >                db      "(FIND)"
 496+ E10F 44 29       >
 496+ E111             >len_NFA         defl    $ - temp_NFA
 496+ E111             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 496+ E10B             >
 496+ E10B 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 496+ E10C 28 46 49 4E >                db      "(FIND)"               // name string in 7-bit ascii, but
 496+ E110 44 29       >
 496+ E112             >                org     $-1                 // alter last byte of Name just above to set
 496+ E111 A9          >                db      {b $} | END_BIT     // msb as name end
 496+ E112             >
 496+ E112 01 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 496+ E114             >Prev_Ptr        defl    Heap_Ptr
 496+ E114             >
 496+ E114             >mirror_Ptr      defl    $
 496+ E114             >
 496+ E114 B4 64       >                dw      Dict_Ptr + 2        // xt
 496+ E116             >Heap_Ptr        defl    $ - $E000           // save current HP
 496+ E116             >
 496+ E116             >Current_HP      defl  $ - $E000             // used to set HP once!
 496+ E116             >
 496+ E116             >//              ______________________________________________________________________
 496+ E116             >//              Dictionary part
 496+ E116             >
 496+ E116             >                org     Dict_Ptr
 496+ 64B2             >
 496+ 64B2 14 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 496+ 64B4             >
 496+ 64B4             >C_FIND:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 496+ 64B4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 496+ 64B4 ~           >
 496+ 64B4 ~           >
 496+ 64B4             >                endif           ; ok        // for other definitions it "points" the correct handler
 496+ 64B4             >                // Use of "; ok" to suppress "warning[fwdref]"
 496+ 64B4             >
 496+ 64B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 497+ 64B4 D9                           exx
 498+ 64B5 CD 98 64                     call    MMU7_read
 499+ 64B8 D9                           exx
 500+ 64B9 6F                           ld      l, a
 501+ 64BA D9                           exx
 502+ 64BB
 503+ 64BB D1                           pop     de                      // de has dictionary pointer
 504+ 64BC              Find_VocabularyLoop:
 505+ 64BC 7A                               ld      a, d
 506+ 64BD D6 60                            sub     $60
 507+ 64BF 30 08                            jr      nc, Find_far_endif
 508+ 64C1 EB                                   ex      de, hl
 509+ 64C2 CD A3 64                             call    TO_FAR_rout
 510+ 64C5 EB                                   ex      de, hl
 511+ 64C6 ED 92 57                             nextreg 87, a
 512+ 64C9              Find_far_endif:
 513+ 64C9 E1                               pop     hl                  // string pointer to search for
 514+ 64CA E5                               push    hl                  // keep it on stack too for the end.
 515+ 64CB 1A                               ld      a, (de)             // save NFA length byte
 516+ 64CC 08                               ex      af,af'              // for later use (!)
 517+ 64CD 1A                               ld      a, (de)             // reload NFA length byte
 518+ 64CE AE                               xor     (hl)                // check if same length
 519+ 64CF E6 3F                            and     $3F                 // by resetting 3 high bits (flags)
 520+ 64D1                                  // word and text haven't the same length, skip to next vocabulary entry
 521+ 64D1 20 33                            jr      nz, Find_DifferentLenght
 522+ 64D3
 523+ 64D3              Find_ThisWord:      // begin loop
 524+ 64D3 23                                   inc     hl
 525+ 64D4 13                                   inc     de
 526+ 64D5 1A                                   ld      a, (de)
 527+ 64D6                                      // case insensitive option - begin
 528+ 64D6                                      // push    bc
 529+ 64D6 E6 80                                and     $80                 // split A in msb and the rest
 530+ 64D8 47                                   ld      b, a
 531+ 64D9 1A                                   ld      a, (de)
 532+ 64DA E6 7F                                and     $7F                 // ... the rest (lower 7 bits)
 533+ 64DC CD 71 64                             call    Case_Sensitive      // uppercase routine
 534+ 64DF 4F                                   ld      c, a
 535+ 64E0 7E                                   ld      a, (hl)
 536+ 64E1 CD 71 64                             call    Case_Sensitive      // uppercase routine
 537+ 64E4 A9                                   xor     c
 538+ 64E5 A8                                   xor     b
 539+ 64E6                                      // pop     bc
 540+ 64E6                                      // case insensitive option - end
 541+ 64E6 87                                   add     a                   // ignore msb during compare
 542+ 64E7 20 1B                                jr      nz, Find_DidntMatch  // jump if doesn't match (*)
 543+ 64E9
 544+ 64E9                                  // loop back until last byte msb is found set
 545+ 64E9                                  // that bit marks the ending char of this word
 546+ 64E9 30 E8                            jr      nc, Find_ThisWord
 547+ 64EB
 548+ 64EB                                  // match found !
 549+ 64EB 21 03 00                         ld      hl, 3               // 3 bytes for CFA offset to skip LFA
 550+ 64EE 19                               add     hl, de
 551+ 64EF
 552+ 64EF 5E                               ld      e, (hl)
 553+ 64F0 23                               inc     hl
 554+ 64F1 56                               ld      d, (hl)
 555+ 64F2 EB                               ex      de, hl
 556+ 64F3              //Non_MMU7:
 557+ 64F3 E3                               ex      (sp), hl            // CFA on stack and drop addr
 558+ 64F4 08                               ex      af, af'             // retrieve NFA byte (!)
 559+ 64F5 5F                               ld      e, a
 560+ 64F6 16 00                            ld      d, 0
 561+ 64F8 21 FF FF                         ld      hl, -1
 562+ 64FB D5                               push    de
 563+ 64FC E5                               push    hl
 564+ 64FD D9                               exx
 565+ 64FE 7D                               ld      a, l
 566+ 64FF ED 92 57                         nextreg 87, a
 567+ 6502                                  next
 567+ 6502 DD E9       >                jp      (ix)
 568+ 6504
 569+ 6504              Find_DidntMatch: // didn't match (*)
 570+ 6504 38 05                            jr      c,  Find_WordEnd   // jump if not end of word (**)
 571+ 6506
 572+ 6506              Find_DifferentLenght:
 573+ 6506                                  // consume chars until the end of the word
 574+ 6506                                  // that is last byte msb is found set
 575+ 6506 13                                   inc     de
 576+ 6507 1A                                   ld      a, (de)
 577+ 6508 87                                   add     a, a
 578+ 6509 30 FB                            jr      nc, Find_DifferentLenght
 579+ 650B
 580+ 650B              Find_WordEnd:   // word-end  found (**)
 581+ 650B                                  // take LFA and use it
 582+ 650B 13                               inc     de
 583+ 650C EB                               ex      de, hl
 584+ 650D 5E                               ld      e, (hl)
 585+ 650E 23                               inc     hl
 586+ 650F 56                               ld      d, (hl)
 587+ 6510 7A                               ld      a, d
 588+ 6511 B3                               or      e
 589+ 6512
 590+ 6512                              // loop until end of vocabulary
 591+ 6512 20 A8                        jr      nz, Find_VocabularyLoop
 592+ 6514
 593+ 6514 E1                           pop     hl              // without this, leaves addr unchanged
 594+ 6515 21 00 00                     ld      hl, 0
 595+ 6518 E5                           push    hl
 596+ 6519 D9                           exx
 597+ 651A 7D                           ld      a, l
 598+ 651B ED 92 57                     nextreg 87, a
 599+ 651E                              next
 599+ 651E DD E9       >                jp      (ix)
 600+ 6520
 601+ 6520              //  ______________________________________________________________________
 602+ 6520              //
 603+ 6520              // enclose      a c -- a  n1 n2 n3
 604+ 6520              // starting from a, using delimiter c, determines the offsets:
 605+ 6520              //   n1   the first character non-delimiter
 606+ 6520              //   n2   the first delimiter after the text
 607+ 6520              //   n3   the first character non enclosed.
 608+ 6520              // This procedure does not go beyond a 'nul' ASCII (0x00) that represents
 609+ 6520              // an uncoditional delimiter.
 610+ 6520              // Examples:
 611+ 6520              //   i:	c  c  x  x  x  c  x	 -- 2  5  6
 612+ 6520              //  ii:	c  c  x  x  x  'nul' -- 2  5  5
 613+ 6520              // iii:	c  c  'nul'          -- 2  3  2
 614+ 6520                              New_Def ENCLOSE, "ENCLOSE", is_code, is_normal
 614+ 6520             >
 614+ 6520             >Dict_Ptr        defl    $
 614+ 6520             >
 614+ 6520             >//              ______________________________________________________________________
 614+ 6520             >//              Heap part
 614+ 6520             >
 614+ 6520             >
 614+ 6520             >                org     (Heap_Ptr & $1FFF) + $E000
 614+ E116             >
 614+ E116             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 614+ E116             >Latest_Definition defl  Heap_Ptr
 614+ E116             >
 614+ E116             >                // dummy db directives used to calculate length of namec
 614+ E116 45 4E 43 4C >                db      "ENCLOSE"
 614+ E11A 4F 53 45    >
 614+ E11D             >len_NFA         defl    $ - temp_NFA
 614+ E11D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 614+ E116             >
 614+ E116 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 614+ E117 45 4E 43 4C >                db      "ENCLOSE"               // name string in 7-bit ascii, but
 614+ E11B 4F 53 45    >
 614+ E11E             >                org     $-1                 // alter last byte of Name just above to set
 614+ E11D C5          >                db      {b $} | END_BIT     // msb as name end
 614+ E11E             >
 614+ E11E 0B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 614+ E120             >Prev_Ptr        defl    Heap_Ptr
 614+ E120             >
 614+ E120             >mirror_Ptr      defl    $
 614+ E120             >
 614+ E120 22 65       >                dw      Dict_Ptr + 2        // xt
 614+ E122             >Heap_Ptr        defl    $ - $E000           // save current HP
 614+ E122             >
 614+ E122             >Current_HP      defl  $ - $E000             // used to set HP once!
 614+ E122             >
 614+ E122             >//              ______________________________________________________________________
 614+ E122             >//              Dictionary part
 614+ E122             >
 614+ E122             >                org     Dict_Ptr
 614+ 6520             >
 614+ 6520 20 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 614+ 6522             >
 614+ 6522             >ENCLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 614+ 6522 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 614+ 6522 ~           >
 614+ 6522 ~           >
 614+ 6522             >                endif           ; ok        // for other definitions it "points" the correct handler
 614+ 6522             >                // Use of "; ok" to suppress "warning[fwdref]"
 614+ 6522             >
 614+ 6522             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 615+ 6522 D9                           exx
 616+ 6523 D1                           pop     de                  //  e has the character
 617+ 6524 E1                           pop     hl                  // hl has the string address
 618+ 6525 E5                           push    hl
 619+ 6526 7B                           ld      a, e
 620+ 6527 11 FF FF                     ld      de, -1              // let's start from -1
 621+ 652A 2B                           dec     hl
 622+ 652B              Enclose_NonDelimiter:
 623+ 652B                              // find first non delimiter
 624+ 652B 23                               inc     hl
 625+ 652C 13                               inc     de
 626+ 652D BE                               cp      (hl)
 627+ 652E 28 FB                        jr      z, Enclose_NonDelimiter
 628+ 6530 D5                           push    de
 629+ 6531
 630+ 6531                              // push    bc                  // save Instruction Pointer
 631+ 6531
 632+ 6531 4F                           ld      c, a                // save char
 633+ 6532 7E                           ld      a, (hl)
 634+ 6533 A7                           and     a                   // stop if 0x00
 635+ 6534 20 07                        jr      nz, Enclose_NextChar
 636+ 6536                              /// case iii. no more character in string
 637+ 6536                                  // pop     bc                  // restore Instruction Pointer
 638+ 6536 13                               inc     de
 639+ 6537 D5                               push    de
 640+ 6538 1B                               dec     de
 641+ 6539 D5                               push    de
 642+ 653A D9                               exx
 643+ 653B                                  next
 643+ 653B DD E9       >                jp      (ix)
 644+ 653D              Enclose_NextChar:
 645+ 653D 79                               ld      a, c
 646+ 653E 23                               inc     hl
 647+ 653F 13                               inc     de
 648+ 6540 BE                               cp      (hl)
 649+ 6541 20 06                            jr      nz, Enclose_NonSeparator
 650+ 6543                                      // case i. first non enclosed
 651+ 6543                                      // pop     bc                  // restore Instruction Pointer
 652+ 6543 D5                                   push    de
 653+ 6544 13                                   inc     de
 654+ 6545 D5                                   push    de
 655+ 6546 D9                                   exx
 656+ 6547                                      next
 656+ 6547 DD E9       >                jp      (ix)
 657+ 6549              Enclose_NonSeparator:
 658+ 6549 7E                               ld      a, (hl)
 659+ 654A A7                               and     a
 660+ 654B 20 F0                        jr      nz, Enclose_NextChar
 661+ 654D
 662+ 654D                              // case ii. separator & terminator
 663+ 654D                              // pop     bc                  // restore Instruction Pointer
 664+ 654D D5                           push    de
 665+ 654E D5                           push    de
 666+ 654F D9                           exx
 667+ 6550                              next
 667+ 6550 DD E9       >                jp      (ix)
 668+ 6552
 669+ 6552              //  ______________________________________________________________________
 670+ 6552              //
 671+ 6552              // (map)        a2 a1 n c1 -- c2
 672+ 6552              // translate character c1 using mapping string a2 and a2
 673+ 6552              // if c1 is not present within string a1 then
 674+ 6552              // c2 = c2 if it is not translated. n is the length of both a1 and a2.
 675+ 6552                              New_Def C_MAP, "(MAP)", is_code, is_normal
 675+ 6552             >
 675+ 6552             >Dict_Ptr        defl    $
 675+ 6552             >
 675+ 6552             >//              ______________________________________________________________________
 675+ 6552             >//              Heap part
 675+ 6552             >
 675+ 6552             >
 675+ 6552             >                org     (Heap_Ptr & $1FFF) + $E000
 675+ E122             >
 675+ E122             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 675+ E122             >Latest_Definition defl  Heap_Ptr
 675+ E122             >
 675+ E122             >                // dummy db directives used to calculate length of namec
 675+ E122 28 4D 41 50 >                db      "(MAP)"
 675+ E126 29          >
 675+ E127             >len_NFA         defl    $ - temp_NFA
 675+ E127             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 675+ E122             >
 675+ E122 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 675+ E123 28 4D 41 50 >                db      "(MAP)"               // name string in 7-bit ascii, but
 675+ E127 29          >
 675+ E128             >                org     $-1                 // alter last byte of Name just above to set
 675+ E127 A9          >                db      {b $} | END_BIT     // msb as name end
 675+ E128             >
 675+ E128 16 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 675+ E12A             >Prev_Ptr        defl    Heap_Ptr
 675+ E12A             >
 675+ E12A             >mirror_Ptr      defl    $
 675+ E12A             >
 675+ E12A 54 65       >                dw      Dict_Ptr + 2        // xt
 675+ E12C             >Heap_Ptr        defl    $ - $E000           // save current HP
 675+ E12C             >
 675+ E12C             >Current_HP      defl  $ - $E000             // used to set HP once!
 675+ E12C             >
 675+ E12C             >//              ______________________________________________________________________
 675+ E12C             >//              Dictionary part
 675+ E12C             >
 675+ E12C             >                org     Dict_Ptr
 675+ 6552             >
 675+ 6552 2A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 675+ 6554             >
 675+ 6554             >C_MAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 675+ 6554 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 675+ 6554 ~           >
 675+ 6554 ~           >
 675+ 6554             >                endif           ; ok        // for other definitions it "points" the correct handler
 675+ 6554             >                // Use of "; ok" to suppress "warning[fwdref]"
 675+ 6554             >
 675+ 6554             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 676+ 6554 D9                           exx
 677+ 6555 E1                           pop     hl
 678+ 6556 7D                           ld      a, l
 679+ 6557 C1                           pop     bc
 680+ 6558 E1                           pop     hl
 681+ 6559 50                           ld      d, b
 682+ 655A 59                           ld      e, c
 683+ 655B ED B1                        cpir
 684+ 655D E1                           pop     hl
 685+ 655E 20 05                        jr      nz, C_Map_Then
 685+ 6560
 686+ 6560 19                               add     hl, de
 687+ 6561 2B                               dec     hl
 688+ 6562 ED 42                            sbc     hl, bc
 689+ 6564 7E                               ld      a, (hl)
 690+ 6565              C_Map_Then:
 691+ 6565 6F                           ld      l, a
 692+ 6566 26 00                        ld      h, 0
 693+ 6568 E5                           push    hl
 694+ 6569 D9                           exx
 695+ 656A                              next
 695+ 656A DD E9       >                jp      (ix)
 696+ 656C
 697+ 656C              //  ______________________________________________________________________
 698+ 656C              //
 699+ 656C              // (compare)    a1 a2 n -- b
 700+ 656C              // this word performs a lexicographic compare of n bytes of text at address a1
 701+ 656C              // with n bytes of text at address a2. It returns numeric a value:
 702+ 656C              //  0 : if strings are equal
 703+ 656C              // +1 : if string at a1 greater than string at a2
 704+ 656C              // -1 : if string at a1 less than string at a2
 705+ 656C              // strings can be 256 bytes in length at most.
 706+ 656C                              New_Def C_COMPARE, "(COMPARE)", is_code, is_normal
 706+ 656C             >
 706+ 656C             >Dict_Ptr        defl    $
 706+ 656C             >
 706+ 656C             >//              ______________________________________________________________________
 706+ 656C             >//              Heap part
 706+ 656C             >
 706+ 656C             >
 706+ 656C             >                org     (Heap_Ptr & $1FFF) + $E000
 706+ E12C             >
 706+ E12C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 706+ E12C             >Latest_Definition defl  Heap_Ptr
 706+ E12C             >
 706+ E12C             >                // dummy db directives used to calculate length of namec
 706+ E12C 28 43 4F 4D >                db      "(COMPARE)"
 706+ E130 50 41 52 45 >
 706+ E134 29          >
 706+ E135             >len_NFA         defl    $ - temp_NFA
 706+ E135             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 706+ E12C             >
 706+ E12C 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 706+ E12D 28 43 4F 4D >                db      "(COMPARE)"               // name string in 7-bit ascii, but
 706+ E131 50 41 52 45 >
 706+ E135 29          >
 706+ E136             >                org     $-1                 // alter last byte of Name just above to set
 706+ E135 A9          >                db      {b $} | END_BIT     // msb as name end
 706+ E136             >
 706+ E136 22 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 706+ E138             >Prev_Ptr        defl    Heap_Ptr
 706+ E138             >
 706+ E138             >mirror_Ptr      defl    $
 706+ E138             >
 706+ E138 6E 65       >                dw      Dict_Ptr + 2        // xt
 706+ E13A             >Heap_Ptr        defl    $ - $E000           // save current HP
 706+ E13A             >
 706+ E13A             >Current_HP      defl  $ - $E000             // used to set HP once!
 706+ E13A             >
 706+ E13A             >//              ______________________________________________________________________
 706+ E13A             >//              Dictionary part
 706+ E13A             >
 706+ E13A             >                org     Dict_Ptr
 706+ 656C             >
 706+ 656C 38 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 706+ 656E             >
 706+ 656E             >C_COMPARE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 706+ 656E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 706+ 656E ~           >
 706+ 656E ~           >
 706+ 656E             >                endif           ; ok        // for other definitions it "points" the correct handler
 706+ 656E             >                // Use of "; ok" to suppress "warning[fwdref]"
 706+ 656E             >
 706+ 656E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 707+ 656E D9                           exx
 708+ 656F E1                           pop     hl                  // Number of bytes
 709+ 6570 7D                           ld      a, l
 710+ 6571 E1                           pop     hl                  // hl points string a2
 711+ 6572 D1                           pop     de                  // hl points string a1
 712+ 6573              //              push    bc                  // Instruction pointer on stack
 713+ 6573 47                           ld      b, a
 714+ 6574              C_Compare_Loop:
 715+ 6574 7E                               ld      a, (hl)
 716+ 6575 CD 71 64                         call    Case_Sensitive
 717+ 6578 4F                               ld      c, a
 718+ 6579 1A                               ld      a, (de)
 719+ 657A CD 71 64                         call    Case_Sensitive
 720+ 657D B9                               cp      c
 721+ 657E 13                               inc     de
 722+ 657F 23                               inc     hl
 723+ 6580 28 0E                            jr      z, C_Compare_Equal
 724+ 6582 38 05                                jr      c, C_Compare_NotLessThan  // If LessThan
 725+ 6584 21 01 00                                 ld      hl, 1               // a1 gt a2
 726+ 6587 18 03                                jr      C_Compare_Then      // Else
 727+ 6589              C_Compare_NotLessThan:
 728+ 6589 21 FF FF                                 ld      hl, -1              // a1 lt a2
 729+ 658C              C_Compare_Then:                                 // Endif
 730+ 658C              //                      pop     bc              // restore Instruction Pointer
 731+ 658C E5                                   push    hl
 732+ 658D D9                                   exx
 733+ 658E
 734+ 658E                                      next
 734+ 658E DD E9       >                jp      (ix)
 735+ 6590
 736+ 6590              C_Compare_Equal:
 737+ 6590 10 E2                        djnz    C_Compare_Loop
 738+ 6592 21 00 00                     ld      hl, 0               // a1 eq a2
 739+ 6595              //              pop     bc                  // restore Instruction Pointer
 740+ 6595 E5                           push    hl
 741+ 6596 D9                           exx
 742+ 6597
 743+ 6597                              next
 743+ 6597 DD E9       >                jp      (ix)
 744+ 6599
 745+ 6599              //  ______________________________________________________________________
 746+ 6599              //
 747+ 6599              // emitc        c --
 748+ 6599              // low level emit, calls ROM routine at #10 to send a character to
 749+ 6599              // the the current channel (see SELECT to change stream-channel)
 750+ 6599                              New_Def EMITC, "EMITC", is_code, is_normal
 750+ 6599             >
 750+ 6599             >Dict_Ptr        defl    $
 750+ 6599             >
 750+ 6599             >//              ______________________________________________________________________
 750+ 6599             >//              Heap part
 750+ 6599             >
 750+ 6599             >
 750+ 6599             >                org     (Heap_Ptr & $1FFF) + $E000
 750+ E13A             >
 750+ E13A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 750+ E13A             >Latest_Definition defl  Heap_Ptr
 750+ E13A             >
 750+ E13A             >                // dummy db directives used to calculate length of namec
 750+ E13A 45 4D 49 54 >                db      "EMITC"
 750+ E13E 43          >
 750+ E13F             >len_NFA         defl    $ - temp_NFA
 750+ E13F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 750+ E13A             >
 750+ E13A 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 750+ E13B 45 4D 49 54 >                db      "EMITC"               // name string in 7-bit ascii, but
 750+ E13F 43          >
 750+ E140             >                org     $-1                 // alter last byte of Name just above to set
 750+ E13F C3          >                db      {b $} | END_BIT     // msb as name end
 750+ E140             >
 750+ E140 2C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 750+ E142             >Prev_Ptr        defl    Heap_Ptr
 750+ E142             >
 750+ E142             >mirror_Ptr      defl    $
 750+ E142             >
 750+ E142 9B 65       >                dw      Dict_Ptr + 2        // xt
 750+ E144             >Heap_Ptr        defl    $ - $E000           // save current HP
 750+ E144             >
 750+ E144             >Current_HP      defl  $ - $E000             // used to set HP once!
 750+ E144             >
 750+ E144             >//              ______________________________________________________________________
 750+ E144             >//              Dictionary part
 750+ E144             >
 750+ E144             >                org     Dict_Ptr
 750+ 6599             >
 750+ 6599 42 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 750+ 659B             >
 750+ 659B             >EMITC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 750+ 659B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 750+ 659B ~           >
 750+ 659B ~           >
 750+ 659B             >                endif           ; ok        // for other definitions it "points" the correct handler
 750+ 659B             >                // Use of "; ok" to suppress "warning[fwdref]"
 750+ 659B             >
 750+ 659B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 751+ 659B E1                           pop     hl
 752+ 659C 7D                           ld      a, l
 753+ 659D              Emitc_Ptr:
 754+ 659D C5                           push    bc
 755+ 659E D5                           push    de
 756+ 659F DD E5                        push    ix
 757+ 65A1
 758+ 65A1 D7                           rst     $10
 759+ 65A2
 760+ 65A2 DD E1                        pop     ix
 761+ 65A4 D1                           pop     de
 762+ 65A5 C1                           pop     bc
 763+ 65A6 3E FF                        ld      a, 255            // max possible
 764+ 65A8 32 8C 5C                     ld      (SCR_CT), a
 765+ 65AB                              next
 765+ 65AB DD E9       >                jp      (ix)
 766+ 65AD
 767+ 65AD              //  ______________________________________________________________________
 768+ 65AD              //
 769+ 65AD              // cr           --
 770+ 65AD              // send a CR via EMITC
 771+ 65AD                              New_Def CR, "CR", is_code, is_normal
 771+ 65AD             >
 771+ 65AD             >Dict_Ptr        defl    $
 771+ 65AD             >
 771+ 65AD             >//              ______________________________________________________________________
 771+ 65AD             >//              Heap part
 771+ 65AD             >
 771+ 65AD             >
 771+ 65AD             >                org     (Heap_Ptr & $1FFF) + $E000
 771+ E144             >
 771+ E144             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 771+ E144             >Latest_Definition defl  Heap_Ptr
 771+ E144             >
 771+ E144             >                // dummy db directives used to calculate length of namec
 771+ E144 43 52       >                db      "CR"
 771+ E146             >len_NFA         defl    $ - temp_NFA
 771+ E146             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 771+ E144             >
 771+ E144 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 771+ E145 43 52       >                db      "CR"               // name string in 7-bit ascii, but
 771+ E147             >                org     $-1                 // alter last byte of Name just above to set
 771+ E146 D2          >                db      {b $} | END_BIT     // msb as name end
 771+ E147             >
 771+ E147 3A 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 771+ E149             >Prev_Ptr        defl    Heap_Ptr
 771+ E149             >
 771+ E149             >mirror_Ptr      defl    $
 771+ E149             >
 771+ E149 AF 65       >                dw      Dict_Ptr + 2        // xt
 771+ E14B             >Heap_Ptr        defl    $ - $E000           // save current HP
 771+ E14B             >
 771+ E14B             >Current_HP      defl  $ - $E000             // used to set HP once!
 771+ E14B             >
 771+ E14B             >//              ______________________________________________________________________
 771+ E14B             >//              Dictionary part
 771+ E14B             >
 771+ E14B             >                org     Dict_Ptr
 771+ 65AD             >
 771+ 65AD 49 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 771+ 65AF             >
 771+ 65AF             >CR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 771+ 65AF ~           >                call    runcode ; ok        // for primitive definitions  actual code
 771+ 65AF ~           >
 771+ 65AF ~           >
 771+ 65AF             >                endif           ; ok        // for other definitions it "points" the correct handler
 771+ 65AF             >                // Use of "; ok" to suppress "warning[fwdref]"
 771+ 65AF             >
 771+ 65AF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 772+ 65AF
 773+ 65AF 3E 0D                        ld      a, CR_CHAR
 774+ 65B1 18 EA                        jr      Emitc_Ptr
 775+ 65B3
 776+ 65B3              Emitc_Vec:
 777+ 65B3 EC 65                        dw      C_Emit_Printable  // comma
 778+ 65B5 F3 65                        dw      C_Emit_Bel        // bel
 779+ 65B7 EC 65                        dw      C_Emit_Printable  // bs
 780+ 65B9 0B 66                        dw      C_Emit_Tab        // tab
 781+ 65BB EC 65                        dw      C_Emit_Printable  // cr
 782+ 65BD 0F 66                        dw      C_Emit_NL         // lf (unix newline)
 783+ 65BF EC 65                        dw      C_Emit_Printable  // blank
 784+ 65C1 EC 65                        dw      C_Emit_Printable  // blank
 785+ 65C3
 786+ 65C3              Emit_Selector_Start:
 787+ 65C3 06                           db      $06                 // comma
 788+ 65C4 07                           db      $07                 // bel
 789+ 65C5 08                           db      $08                 // bs
 790+ 65C6 09                           db      $09                 // tab
 791+ 65C7 0D                           db      $0D                 // cr
 792+ 65C8 0A                           db      $0A                 // lf (unix newline)
 793+ 65C9 20                           db      $20
 794+ 65CA              Emit_Selector_End:
 795+ 65CA 20                           db      $20
 796+ 65CB
 797+ 65CB              //  ______________________________________________________________________
 798+ 65CB              //
 799+ 65CB              // (?emit)      c1 -- c2 | c1
 800+ 65CB              // decode a character to be sent via EMIT
 801+ 65CB              // search first the Emit_Selector table, if found jump to the corresponding routine in Emit_Vector
 802+ 65CB              // the routine should resolve anything and convert the character anyway.
 803+ 65CB                              New_Def C_EMIT, "(?EMIT)", is_code, is_normal
 803+ 65CB             >
 803+ 65CB             >Dict_Ptr        defl    $
 803+ 65CB             >
 803+ 65CB             >//              ______________________________________________________________________
 803+ 65CB             >//              Heap part
 803+ 65CB             >
 803+ 65CB             >
 803+ 65CB             >                org     (Heap_Ptr & $1FFF) + $E000
 803+ E14B             >
 803+ E14B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 803+ E14B             >Latest_Definition defl  Heap_Ptr
 803+ E14B             >
 803+ E14B             >                // dummy db directives used to calculate length of namec
 803+ E14B 28 3F 45 4D >                db      "(?EMIT)"
 803+ E14F 49 54 29    >
 803+ E152             >len_NFA         defl    $ - temp_NFA
 803+ E152             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 803+ E14B             >
 803+ E14B 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 803+ E14C 28 3F 45 4D >                db      "(?EMIT)"               // name string in 7-bit ascii, but
 803+ E150 49 54 29    >
 803+ E153             >                org     $-1                 // alter last byte of Name just above to set
 803+ E152 A9          >                db      {b $} | END_BIT     // msb as name end
 803+ E153             >
 803+ E153 44 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 803+ E155             >Prev_Ptr        defl    Heap_Ptr
 803+ E155             >
 803+ E155             >mirror_Ptr      defl    $
 803+ E155             >
 803+ E155 CD 65       >                dw      Dict_Ptr + 2        // xt
 803+ E157             >Heap_Ptr        defl    $ - $E000           // save current HP
 803+ E157             >
 803+ E157             >Current_HP      defl  $ - $E000             // used to set HP once!
 803+ E157             >
 803+ E157             >//              ______________________________________________________________________
 803+ E157             >//              Dictionary part
 803+ E157             >
 803+ E157             >                org     Dict_Ptr
 803+ 65CB             >
 803+ 65CB 55 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 803+ 65CD             >
 803+ 65CD             >C_EMIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 803+ 65CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
 803+ 65CD ~           >
 803+ 65CD ~           >
 803+ 65CD             >                endif           ; ok        // for other definitions it "points" the correct handler
 803+ 65CD             >                // Use of "; ok" to suppress "warning[fwdref]"
 803+ 65CD             >
 803+ 65CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 804+ 65CD D9                           exx
 805+ 65CE D1                           pop     de
 806+ 65CF 7B                           ld      a, e                //  de has c1
 807+ 65D0 E6 7F                        and     $7F                 // 7-bit ascii only
 808+ 65D2                              // push    bc                  // save Instruction Pointer
 809+ 65D2 01 08 00                     ld      bc, Emit_Selector_End - Emit_Selector_Start + 1
 810+ 65D5 21 CA 65                     ld      hl, Emit_Selector_End
 811+ 65D8 ED B9                        cpdr                        // search for c1 in Emit_Selector table, backward
 812+ 65DA 20 0A                        jr      nz, C_Emit_Not_Found
 813+ 65DC                                  // Found then decode it
 814+ 65DC 21 B3 65                         ld      hl, Emitc_Vec
 815+ 65DF 09                               add     hl, bc
 816+ 65E0 09                               add     hl, bc
 817+ 65E1 5E                               ld      e, (hl)
 818+ 65E2 23                               inc     hl
 819+ 65E3 56                               ld      d, (hl)
 820+ 65E4 EB                               ex      de, hl
 821+ 65E5                                  // pop     bc                  // restore Instruction Pointer
 822+ 65E5 E9                               jp      (hl)                // one of the following labels
 823+ 65E6              C_Emit_Not_Found:
 824+ 65E6                              // pop     bc                  // restore Instruction Pointer
 825+ 65E6 FE 20                        cp      BLANK_CHAR          // cp $20 non-printable check
 826+ 65E8 30 02                        jr      nc, C_Emit_Printable
 827+ 65EA 3E 00                            ld      a, NUL_CHAR         // NUL is never "printed"
 828+ 65EC              C_Emit_Printable:
 829+ 65EC 6F                           ld      l, a
 830+ 65ED 26 00                        ld      h, 0
 831+ 65EF E5                           push    hl
 832+ 65F0 D9                           exx
 833+ 65F1                              next
 833+ 65F1 DD E9       >                jp      (ix)
 834+ 65F3
 835+ 65F3              C_Emit_Bel:
 836+ 65F3 D9                            exx
 837+ 65F4 C5                           push    bc                  // save Instruction Pointer
 838+ 65F5 D5                           push    de
 839+ 65F6 11 00 01                     ld      de, $0100
 840+ 65F9 21 00 02                     ld      hl, $0200
 841+ 65FC DD E5                        push    ix                  // save Next Pointer
 842+ 65FE CD B6 03                     call    $03B6               // bleep Standard-ROM routine
 843+ 6601
 844+ 6601
 845+ 6601
 846+ 6601
 847+ 6601 DD E1                        pop     ix                  // restore Next Pointer
 848+ 6603 D1                           pop     de
 849+ 6604 C1                           pop     bc                  // restore Instruction Pointer
 850+ 6605 21 00 00                     ld      hl, NUL_CHAR
 851+ 6608 E5                           push    hl
 852+ 6609                              next
 852+ 6609 DD E9       >                jp      (ix)
 853+ 660B
 854+ 660B 3E 06        C_Emit_Tab:     ld      a, COMMA_CHAR
 855+ 660D 18 DD                        jr      C_Emit_Printable
 856+ 660F                          //  push    hl
 857+ 660F                          //  exx
 858+ 660F                          //  next
 859+ 660F
 860+ 660F 3E 0D        C_Emit_NL       ld      a, CR_CHAR           // 0x0A --> 0x0D  à la Spectrum
 861+ 6611 18 D9                        jr      C_Emit_Printable
 862+ 6613                          //  push    hl
 863+ 6613                          //  exx
 864+ 6613                          //  next
 865+ 6613
 866+ 6613              //  ______________________________________________________________________
 867+ 6613
 868+ 6613              Key_Table:
 869+ 6613 E2                           db      $E2                 //  0: STOP  --> SYMBOL+A : ~
 870+ 6614 C3                           db      $C3                 //  1: NOT   --> SYMBOL+S : |
 871+ 6615 CD                           db      $CD                 //  2: STEP  --> SYMBOl+D : //
 872+ 6616 CC                           db      $CC                 //  3: TO    --> SYMBOL+F : {
 873+ 6617 CB                           db      $CB                 //  4: THEN  --> SYMBOL+G : }
 874+ 6618 C6                           db      $C6                 //  5: AND   --> SYMBOL+Y : [
 875+ 6619 C5                           db      $C5                 //  6: OR    --> SYMBOL+U : ]
 876+ 661A AC                           db      $AC                 //  7: AT    --> SYMBOL+I : (C) copyright symbol
 877+ 661B C7                           db      $C7                 //  8: <=    --> same as SHIFT-1 [EDIT]
 878+ 661C C8                           db      $C8                 //  9: >=    --> same as SHIFT-0 [BACKSPACE]
 879+ 661D C9                           db      $C9                 // 10: <>    --> SYMBOL+W is the same as CAPS (toggle) SHIFT+2
 880+ 661E              Key_MapTo:
 881+ 661E 18                           db      $18                 // 10: ^X
 882+ 661F 03                           db      $03                 //  9: ^C
 883+ 6620 1A                           db      $1A                 //  8: ^Z
 884+ 6621 7F                           db      $7F                 //  7: SYMBOL+I : (C) copyright symbol
 885+ 6622 5D                           db      $5D                 //  6: SYMBOL+U : ]
 886+ 6623 5B                           db      $5B                 //  5: SYMBOL+Y : [
 887+ 6624 7D                           db      $7D                 //  4: SYMBOL+G : }
 888+ 6625 7B                           db      $7B                 //  3: SYMBOL+F : {
 889+ 6626 5C                           db      $5C                 //  2: SYMBOl+D : //
 890+ 6627 7C                           db      $7C                 //  1: SYMBOL+S : |
 891+ 6628 7E                           db      $7E                 //  0: SYMBOL+A : ~
 892+ 6629
 893+ 6629              //  ______________________________________________________________________
 894+ 6629              //
 895+ 6629              // curs         -- c
 896+ 6629              // wait for a keypress
 897+ 6629              // This definition need Standard ROM Interrupt to be served
 898+ 6629
 899+ 6629                              New_Def CUR, "CURS", is_code, is_normal
 899+ 6629             >
 899+ 6629             >Dict_Ptr        defl    $
 899+ 6629             >
 899+ 6629             >//              ______________________________________________________________________
 899+ 6629             >//              Heap part
 899+ 6629             >
 899+ 6629             >
 899+ 6629             >                org     (Heap_Ptr & $1FFF) + $E000
 899+ E157             >
 899+ E157             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 899+ E157             >Latest_Definition defl  Heap_Ptr
 899+ E157             >
 899+ E157             >                // dummy db directives used to calculate length of namec
 899+ E157 43 55 52 53 >                db      "CURS"
 899+ E15B             >len_NFA         defl    $ - temp_NFA
 899+ E15B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 899+ E157             >
 899+ E157 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 899+ E158 43 55 52 53 >                db      "CURS"               // name string in 7-bit ascii, but
 899+ E15C             >                org     $-1                 // alter last byte of Name just above to set
 899+ E15B D3          >                db      {b $} | END_BIT     // msb as name end
 899+ E15C             >
 899+ E15C 4B 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 899+ E15E             >Prev_Ptr        defl    Heap_Ptr
 899+ E15E             >
 899+ E15E             >mirror_Ptr      defl    $
 899+ E15E             >
 899+ E15E 2B 66       >                dw      Dict_Ptr + 2        // xt
 899+ E160             >Heap_Ptr        defl    $ - $E000           // save current HP
 899+ E160             >
 899+ E160             >Current_HP      defl  $ - $E000             // used to set HP once!
 899+ E160             >
 899+ E160             >//              ______________________________________________________________________
 899+ E160             >//              Dictionary part
 899+ E160             >
 899+ E160             >                org     Dict_Ptr
 899+ 6629             >
 899+ 6629 5E 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 899+ 662B             >
 899+ 662B             >CUR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 899+ 662B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 899+ 662B ~           >
 899+ 662B ~           >
 899+ 662B             >                endif           ; ok        // for other definitions it "points" the correct handler
 899+ 662B             >                // Use of "; ok" to suppress "warning[fwdref]"
 899+ 662B             >
 899+ 662B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 900+ 662B
 901+ 662B C5                           push    bc                  // save Instruction Pointer
 902+ 662C D5                           push    de                  // save Return Stack Pointer
 903+ 662D DD E5                        push    ix
 904+ 662F ED 73 92 63                  ld      (SP_Saved), sp      // be sure to not to be paged out.
 905+ 6633
 906+ 6633 31 61 63                     ld      sp, Cold_origin - 5 // maybe $8000 in the future...
 907+ 6636 FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 908+ 663A
 909+ 663A              Cur_Wait:
 910+ 663A 76                               halt
 911+ 663B 3E 02                            ld      a, 2                // selec channel #2 (Upper Video)
 912+ 663D CD 01 16                         call    $1601               // SELECT Standard-ROM Routine
 913+ 6640
 914+ 6640
 915+ 6640
 916+ 6640                                  // software-flash: flips face every 320 ms
 917+ 6640 3E 20                            ld      a, $20              // Timing based
 918+ 6642 FD A6 3E                         and     (iy + $3E)          // FRAMES (5C3A+3E)
 919+ 6645
 920+ 6645 3A 8E 63                         ld      a, (Block_Face)     // see origin.asm
 921+ 6648 20 0C                            jr      nz, Cur_Cursor
 922+ 664A 3A 8F 63                             ld      a, (Half_Face)      // see origin.asm
 923+ 664D FD CB 30 5E                          bit     3, (iy + $30)       // FLAGS2 (5C3A+$30) that is CAPS-LOCK
 924+ 6651 28 03                                jr      z, Cur_Cursor
 925+ 6653 3A 90 63                                 ld      a, (Underscore_Face) // see origin
 926+ 6656              Cur_Cursor:
 927+ 6656 D7                               rst     $10
 928+ 6657 3E 08                            ld      a, BACKSPACE_CHAR    // backspace
 929+ 6659 D7                               rst     $10
 930+ 665A FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 931+ 665E 28 DA                        jr      z, Cur_Wait
 932+ 6660
 933+ 6660 76                           halt    // this is to sync flashing cursor.
 934+ 6661
 935+ 6661 3E 20                        ld      a, BLANK_CHAR       // space to blank cursor
 936+ 6663 D7                           rst     $10
 937+ 6664 3E 08                        ld      a, BACKSPACE_CHAR   // backspace
 938+ 6666 D7                           rst     $10
 939+ 6667
 940+ 6667 ED 7B 92 63                  ld      sp, (SP_Saved)
 941+ 666B
 942+ 666B DD E1                        pop     ix
 943+ 666D D1                           pop     de                  // Restore Return Stack Pointer
 944+ 666E C1                           pop     bc                  // Restore Instruction Pointer
 945+ 666F                              next
 945+ 666F DD E9       >                jp      (ix)
 946+ 6671
 947+ 6671
 948+ 6671              //  ______________________________________________________________________
 949+ 6671              //
 950+ 6671              // key          -- c
 951+ 6671              // This definition need Standard ROM Interrupt to be served
 952+ 6671
 953+ 6671                              New_Def KEY, "KEY", is_code, is_normal
 953+ 6671             >
 953+ 6671             >Dict_Ptr        defl    $
 953+ 6671             >
 953+ 6671             >//              ______________________________________________________________________
 953+ 6671             >//              Heap part
 953+ 6671             >
 953+ 6671             >
 953+ 6671             >                org     (Heap_Ptr & $1FFF) + $E000
 953+ E160             >
 953+ E160             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 953+ E160             >Latest_Definition defl  Heap_Ptr
 953+ E160             >
 953+ E160             >                // dummy db directives used to calculate length of namec
 953+ E160 4B 45 59    >                db      "KEY"
 953+ E163             >len_NFA         defl    $ - temp_NFA
 953+ E163             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 953+ E160             >
 953+ E160 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 953+ E161 4B 45 59    >                db      "KEY"               // name string in 7-bit ascii, but
 953+ E164             >                org     $-1                 // alter last byte of Name just above to set
 953+ E163 D9          >                db      {b $} | END_BIT     // msb as name end
 953+ E164             >
 953+ E164 57 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 953+ E166             >Prev_Ptr        defl    Heap_Ptr
 953+ E166             >
 953+ E166             >mirror_Ptr      defl    $
 953+ E166             >
 953+ E166 73 66       >                dw      Dict_Ptr + 2        // xt
 953+ E168             >Heap_Ptr        defl    $ - $E000           // save current HP
 953+ E168             >
 953+ E168             >Current_HP      defl  $ - $E000             // used to set HP once!
 953+ E168             >
 953+ E168             >//              ______________________________________________________________________
 953+ E168             >//              Dictionary part
 953+ E168             >
 953+ E168             >                org     Dict_Ptr
 953+ 6671             >
 953+ 6671 66 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 953+ 6673             >
 953+ 6673             >KEY:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 953+ 6673 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 953+ 6673 ~           >
 953+ 6673 ~           >
 953+ 6673             >                endif           ; ok        // for other definitions it "points" the correct handler
 953+ 6673             >                // Use of "; ok" to suppress "warning[fwdref]"
 953+ 6673             >
 953+ 6673             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 954+ 6673
 955+ 6673 C5                           push    bc                  // Save Instruction Pointer
 956+ 6674
 957+ 6674              Key_Wait:
 958+ 6674 FD CB 01 6E                      bit     5, (iy + 1)         // FLAGS (5C3A+1)
 959+ 6678 28 FA                        jr      z, Key_Wait
 960+ 667A
 961+ 667A 3A 08 5C                     ld      a, (LASTK)          // get typed character (5C08)
 962+ 667D
 963+ 667D                              // decode character from above table
 964+ 667D 21 13 66                     ld      hl, Key_Table
 965+ 6680 01 0B 00                     ld      bc, $000B
 966+ 6683 ED B1                        cpir
 967+ 6685 20 05                        jr      nz, Key_DontMap
 968+ 6687 21 1E 66                         ld      hl, Key_MapTo
 969+ 668A 09                               add     hl, bc
 970+ 668B 7E                               ld      a, (hl)
 971+ 668C FE 06        Key_DontMap:    cp      $06                 // CAPS-LOCK management
 972+ 668E 20 09                        jr      nz, Key_NoCapsLock
 973+ 6690 21 6A 5C                         ld      hl, $5C6A           // FLAGS2
 974+ 6693 7E                               ld      a, (hl)
 975+ 6694 EE 08                            xor     $08
 976+ 6696 77                               ld      (hl), a
 977+ 6697 3E 00                            ld      a, NUL_CHAR
 978+ 6699 6F           Key_NoCapsLock: ld      l, a
 979+ 669A 26 00                        ld      h, 0                // Prepare TOS
 980+ 669C
 981+ 669C FD CB 01 AE                  res     5, (iy + 1)         // FLAGS (5C3A+1)
 982+ 66A0
 983+ 66A0 C1                           pop     bc                  // Restore Instruction Pointer
 984+ 66A1
 985+ 66A1                              psh1
 985+ 66A1 E5          >                push    hl
 985+ 66A2 DD E9       >                jp      (ix)
 986+ 66A4
 987+ 66A4
 988+ 66A4              //  ______________________________________________________________________
 989+ 66A4              //
 990+ 66A4              // click        --
 991+ 66A4              // This definition need Standard ROM Interrupt to be served
 992+ 66A4              //
 993+ 66A4              //              New_Def CLICK, "CLICK", is_code, is_normal
 994+ 66A4              //
 995+ 66A4              //                push    bc
 996+ 66A4              //              ld      a, ($5C48)          // BORDCR system variable
 997+ 66A4              //              rra
 998+ 66A4              //              rra
 999+ 66A4              //              rra
1000+ 66A4              //              or      $18                 // quick'n'dirty click
1001+ 66A4              //              out     ($fe), a
1002+ 66A4              //              ld      b, 0
1003+ 66A4              //              djnz    $                   // wait loop
1004+ 66A4              //              xor     $18
1005+ 66A4              //              out     ($fe), a
1006+ 66A4              //                pop     bc
1007+ 66A4
1008+ 66A4              //              next
1009+ 66A4
1010+ 66A4              //  ______________________________________________________________________
1011+ 66A4              //
1012+ 66A4              // key?         -- f
1013+ 66A4              // key available
1014+ 66A4              //
1015+ 66A4              //              New_Def KEY_Q, "KEY?", is_code, is_normal
1016+ 66A4              //
1017+ 66A4              //              ld      hl, 0000
1018+ 66A4              //              bit     5, (iy + 1)         // FLAGS (5C3A+1)
1019+ 66A4              //              jr      z, Key_Q
1020+ 66A4              //                  dec     hl
1021+ 66A4              // Key_Q:
1022+ 66A4              //                psh1
1023+ 66A4              //              next
1024+ 66A4
1025+ 66A4              //  ______________________________________________________________________
1026+ 66A4              //
1027+ 66A4              // ?terminal    -- FALSE | TRUE
1028+ 66A4              // test for BREAK keypress
1029+ 66A4                              New_Def QTERMINAL, "?TERMINAL", is_code, is_normal
1029+ 66A4             >
1029+ 66A4             >Dict_Ptr        defl    $
1029+ 66A4             >
1029+ 66A4             >//              ______________________________________________________________________
1029+ 66A4             >//              Heap part
1029+ 66A4             >
1029+ 66A4             >
1029+ 66A4             >                org     (Heap_Ptr & $1FFF) + $E000
1029+ E168             >
1029+ E168             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1029+ E168             >Latest_Definition defl  Heap_Ptr
1029+ E168             >
1029+ E168             >                // dummy db directives used to calculate length of namec
1029+ E168 3F 54 45 52 >                db      "?TERMINAL"
1029+ E16C 4D 49 4E 41 >
1029+ E170 4C          >
1029+ E171             >len_NFA         defl    $ - temp_NFA
1029+ E171             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1029+ E168             >
1029+ E168 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1029+ E169 3F 54 45 52 >                db      "?TERMINAL"               // name string in 7-bit ascii, but
1029+ E16D 4D 49 4E 41 >
1029+ E171 4C          >
1029+ E172             >                org     $-1                 // alter last byte of Name just above to set
1029+ E171 CC          >                db      {b $} | END_BIT     // msb as name end
1029+ E172             >
1029+ E172 60 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1029+ E174             >Prev_Ptr        defl    Heap_Ptr
1029+ E174             >
1029+ E174             >mirror_Ptr      defl    $
1029+ E174             >
1029+ E174 A6 66       >                dw      Dict_Ptr + 2        // xt
1029+ E176             >Heap_Ptr        defl    $ - $E000           // save current HP
1029+ E176             >
1029+ E176             >Current_HP      defl  $ - $E000             // used to set HP once!
1029+ E176             >
1029+ E176             >//              ______________________________________________________________________
1029+ E176             >//              Dictionary part
1029+ E176             >
1029+ E176             >                org     Dict_Ptr
1029+ 66A4             >
1029+ 66A4 74 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1029+ 66A6             >
1029+ 66A6             >QTERMINAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1029+ 66A6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1029+ 66A6 ~           >
1029+ 66A6 ~           >
1029+ 66A6             >                endif           ; ok        // for other definitions it "points" the correct handler
1029+ 66A6             >                // Use of "; ok" to suppress "warning[fwdref]"
1029+ 66A6             >
1029+ 66A6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1030+ 66A6 D9                           exx
1031+ 66A7 01 FE 7F                     ld      bc, $7ffe
1032+ 66AA ED 50                        in      d, (c)
1033+ 66AC 41                           ld      b, c
1034+ 66AD ED 78                        in      a, (c)
1035+ 66AF B2                           or       d
1036+ 66B0 1F                           rra
1037+ 66B1 3F                           ccf
1038+ 66B2 ED 62                        sbc     hl, hl
1039+ 66B4 E5                           push    hl
1040+ 66B5 D9                           exx
1041+ 66B6                              next
1041+ 66B6 DD E9       >                jp      (ix)
1042+ 66B8
1043+ 66B8
1044+ 66B8              //  ______________________________________________________________________
1045+ 66B8              //
1046+ 66B8              // inkey        -- c | 0
1047+ 66B8              // call ROM inkey$ routine, returns c or "zero".
1048+ 66B8              //
1049+ 66B8              //              New_Def INKEY, "INKEY", is_code, is_normal
1050+ 66B8              //              push    bc
1051+ 66B8              //              push    de
1052+ 66B8              //              ld      (SP_Saved), sp
1053+ 66B8              //              ld      sp, Cold_origin - 5
1054+ 66B8              //              push    ix
1055+ 66B8              //              call    $15E6                   // instead of 15E9
1056+ 66B8              //              pop     ix
1057+ 66B8              //              ld      sp, (SP_Saved)
1058+ 66B8              //              ld      l, a
1059+ 66B8              //              ld      h, 0
1060+ 66B8              //              pop     de
1061+ 66B8              //              pop     bc
1062+ 66B8              //              psh1
1063+ 66B8
1064+ 66B8              //  ______________________________________________________________________
1065+ 66B8              //
1066+ 66B8              // select      n --
1067+ 66B8              // selects the given channel number
1068+ 66B8
1069+ 66B8                              New_Def SELECT, "SELECT", is_code, is_normal
1069+ 66B8             >
1069+ 66B8             >Dict_Ptr        defl    $
1069+ 66B8             >
1069+ 66B8             >//              ______________________________________________________________________
1069+ 66B8             >//              Heap part
1069+ 66B8             >
1069+ 66B8             >
1069+ 66B8             >                org     (Heap_Ptr & $1FFF) + $E000
1069+ E176             >
1069+ E176             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1069+ E176             >Latest_Definition defl  Heap_Ptr
1069+ E176             >
1069+ E176             >                // dummy db directives used to calculate length of namec
1069+ E176 53 45 4C 45 >                db      "SELECT"
1069+ E17A 43 54       >
1069+ E17C             >len_NFA         defl    $ - temp_NFA
1069+ E17C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1069+ E176             >
1069+ E176 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1069+ E177 53 45 4C 45 >                db      "SELECT"               // name string in 7-bit ascii, but
1069+ E17B 43 54       >
1069+ E17D             >                org     $-1                 // alter last byte of Name just above to set
1069+ E17C D4          >                db      {b $} | END_BIT     // msb as name end
1069+ E17D             >
1069+ E17D 68 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1069+ E17F             >Prev_Ptr        defl    Heap_Ptr
1069+ E17F             >
1069+ E17F             >mirror_Ptr      defl    $
1069+ E17F             >
1069+ E17F BA 66       >                dw      Dict_Ptr + 2        // xt
1069+ E181             >Heap_Ptr        defl    $ - $E000           // save current HP
1069+ E181             >
1069+ E181             >Current_HP      defl  $ - $E000             // used to set HP once!
1069+ E181             >
1069+ E181             >//              ______________________________________________________________________
1069+ E181             >//              Dictionary part
1069+ E181             >
1069+ E181             >                org     Dict_Ptr
1069+ 66B8             >
1069+ 66B8 7F 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1069+ 66BA             >
1069+ 66BA             >SELECT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1069+ 66BA ~           >                call    runcode ; ok        // for primitive definitions  actual code
1069+ 66BA ~           >
1069+ 66BA ~           >
1069+ 66BA             >                endif           ; ok        // for other definitions it "points" the correct handler
1069+ 66BA             >                // Use of "; ok" to suppress "warning[fwdref]"
1069+ 66BA             >
1069+ 66BA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1070+ 66BA E1                           pop     hl
1071+ 66BB C5                           push    bc
1072+ 66BC D5                           push    de
1073+ 66BD 7D                           ld      a, l
1074+ 66BE ED 73 92 63                  ld      (SP_Saved), sp
1075+ 66C2 31 61 63                     ld      sp, Cold_origin - 5
1076+ 66C5
1077+ 66C5 DD E5                        push    ix
1078+ 66C7 CD 01 16                     call    $1601
1079+ 66CA
1080+ 66CA
1081+ 66CA
1082+ 66CA
1083+ 66CA DD E1                        pop     ix
1084+ 66CC ED 7B 92 63                  ld      sp, (SP_Saved)
1085+ 66D0 D1                           pop     de
1086+ 66D1 C1                           pop     bc
1087+ 66D2                              next
1087+ 66D2 DD E9       >                jp      (ix)
1088+ 66D4
1089+ 66D4              //  ______________________________________________________________________
1090+ 66D4              //
1091+ 66D4              // ZX Spectrum Next - Low Level disk primitives.
1092+ 66D4              // this include is "here" for backward compatibility
1093+ 66D4
1094+ 66D4                              include "next-opt0.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt0.asm
   1++66D4              //  ______________________________________________________________________
   2++66D4              //
   3++66D4              //  next-opt.asm
   4++66D4              //
   5++66D4              //  ZX Spectrum Next - peculiar definitions
   6++66D4              //  ______________________________________________________________________
   7++66D4
   8++66D4              //  ______________________________________________________________________
   9++66D4              //
  10++66D4              // f_seek       d u -- f
  11++66D4              // Seek to position d in file-handle u.
  12++66D4              // Return a false-flag 0 on success, True flag on error
  13++66D4                              New_Def F_SEEK, "F_SEEK", is_code, is_normal
  13++66D4             >
  13++66D4             >Dict_Ptr        defl    $
  13++66D4             >
  13++66D4             >//              ______________________________________________________________________
  13++66D4             >//              Heap part
  13++66D4             >
  13++66D4             >
  13++66D4             >                org     (Heap_Ptr & $1FFF) + $E000
  13++E181             >
  13++E181             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13++E181             >Latest_Definition defl  Heap_Ptr
  13++E181             >
  13++E181             >                // dummy db directives used to calculate length of namec
  13++E181 46 5F 53 45 >                db      "F_SEEK"
  13++E185 45 4B       >
  13++E187             >len_NFA         defl    $ - temp_NFA
  13++E187             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13++E181             >
  13++E181 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13++E182 46 5F 53 45 >                db      "F_SEEK"               // name string in 7-bit ascii, but
  13++E186 45 4B       >
  13++E188             >                org     $-1                 // alter last byte of Name just above to set
  13++E187 CB          >                db      {b $} | END_BIT     // msb as name end
  13++E188             >
  13++E188 76 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13++E18A             >Prev_Ptr        defl    Heap_Ptr
  13++E18A             >
  13++E18A             >mirror_Ptr      defl    $
  13++E18A             >
  13++E18A D6 66       >                dw      Dict_Ptr + 2        // xt
  13++E18C             >Heap_Ptr        defl    $ - $E000           // save current HP
  13++E18C             >
  13++E18C             >Current_HP      defl  $ - $E000             // used to set HP once!
  13++E18C             >
  13++E18C             >//              ______________________________________________________________________
  13++E18C             >//              Dictionary part
  13++E18C             >
  13++E18C             >                org     Dict_Ptr
  13++66D4             >
  13++66D4 8A 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  13++66D6             >
  13++66D6             >F_SEEK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  13++66D6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  13++66D6 ~           >
  13++66D6 ~           >
  13++66D6             >                endif           ; ok        // for other definitions it "points" the correct handler
  13++66D6             >                // Use of "; ok" to suppress "warning[fwdref]"
  13++66D6             >
  13++66D6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14++66D6 D9                            exx
  15++66D7 E1                            pop     hl                  // file-handle
  16++66D8 7D                            ld      a, l
  17++66D9 C1                            pop     bc                  // bc has high-word of d
  18++66DA D1                            pop     de
  19++66DB D9                           exx
  20++66DC DD E5                        push    ix
  21++66DE D5                           push    de
  22++66DF C5                           push    bc                  // save Instruction Pointer
  23++66E0 D9                            exx
  24++66E1 DD 21 00 00                   ld      ix, 0
  25++66E5 F3                            di
  26++66E6 CF                            rst     $08
  27++66E7 9F                            db      $9F
  28++66E8              F_Seek_Exit:
  29++66E8 FB                           ei
  30++66E9 C1                           pop     bc                  // restore Instruction Pointer
  31++66EA D1                           pop     de
  32++66EB DD E1                        pop     ix
  33++66ED ED 62                        sbc     hl, hl              // to get 0 or -1
  34++66EF                              psh1
  34++66EF E5          >                push    hl
  34++66F0 DD E9       >                jp      (ix)
  35++66F2
  36++66F2              //  ______________________________________________________________________
  37++66F2              //
  38++66F2              // f_close      u -- f
  39++66F2              // Close file-handle u.
  40++66F2              // Return 0 on success, True flag on error
  41++66F2
  42++66F2                              New_Def F_CLOSE, "F_CLOSE", is_code, is_normal
  42++66F2             >
  42++66F2             >Dict_Ptr        defl    $
  42++66F2             >
  42++66F2             >//              ______________________________________________________________________
  42++66F2             >//              Heap part
  42++66F2             >
  42++66F2             >
  42++66F2             >                org     (Heap_Ptr & $1FFF) + $E000
  42++E18C             >
  42++E18C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42++E18C             >Latest_Definition defl  Heap_Ptr
  42++E18C             >
  42++E18C             >                // dummy db directives used to calculate length of namec
  42++E18C 46 5F 43 4C >                db      "F_CLOSE"
  42++E190 4F 53 45    >
  42++E193             >len_NFA         defl    $ - temp_NFA
  42++E193             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42++E18C             >
  42++E18C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42++E18D 46 5F 43 4C >                db      "F_CLOSE"               // name string in 7-bit ascii, but
  42++E191 4F 53 45    >
  42++E194             >                org     $-1                 // alter last byte of Name just above to set
  42++E193 C5          >                db      {b $} | END_BIT     // msb as name end
  42++E194             >
  42++E194 81 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42++E196             >Prev_Ptr        defl    Heap_Ptr
  42++E196             >
  42++E196             >mirror_Ptr      defl    $
  42++E196             >
  42++E196 F4 66       >                dw      Dict_Ptr + 2        // xt
  42++E198             >Heap_Ptr        defl    $ - $E000           // save current HP
  42++E198             >
  42++E198             >Current_HP      defl  $ - $E000             // used to set HP once!
  42++E198             >
  42++E198             >//              ______________________________________________________________________
  42++E198             >//              Dictionary part
  42++E198             >
  42++E198             >                org     Dict_Ptr
  42++66F2             >
  42++66F2 96 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  42++66F4             >
  42++66F4             >F_CLOSE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42++66F4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42++66F4 ~           >
  42++66F4 ~           >
  42++66F4             >                endif           ; ok        // for other definitions it "points" the correct handler
  42++66F4             >                // Use of "; ok" to suppress "warning[fwdref]"
  42++66F4             >
  42++66F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43++66F4
  44++66F4 E1                           pop     hl
  45++66F5 7D                           ld      a, l                // file-handle
  46++66F6 DD E5                        push    ix
  47++66F8 D5                           push    de
  48++66F9 C5                           push    bc                  // Save Instruction pointer
  49++66FA F3                           di
  50++66FB CF                           rst     $08
  51++66FC 9B                           db      $9B
  52++66FD 18 E9                        jr      F_Seek_Exit
  53++66FF              //              ei
  54++66FF              //              pop     de
  55++66FF              //              pop     bc
  56++66FF              //              pop     ix
  57++66FF              //              sbc     hl, hl
  58++66FF              //              psh1
  59++66FF
  60++66FF              //  ______________________________________________________________________
  61++66FF              //
  62++66FF              // f_sync      u -- f
  63++66FF              // Close file-handle u.
  64++66FF              // Return 0 on success, True flag on error
  65++66FF
  66++66FF                              New_Def F_SYNC, "F_SYNC", is_code, is_normal
  66++66FF             >
  66++66FF             >Dict_Ptr        defl    $
  66++66FF             >
  66++66FF             >//              ______________________________________________________________________
  66++66FF             >//              Heap part
  66++66FF             >
  66++66FF             >
  66++66FF             >                org     (Heap_Ptr & $1FFF) + $E000
  66++E198             >
  66++E198             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  66++E198             >Latest_Definition defl  Heap_Ptr
  66++E198             >
  66++E198             >                // dummy db directives used to calculate length of namec
  66++E198 46 5F 53 59 >                db      "F_SYNC"
  66++E19C 4E 43       >
  66++E19E             >len_NFA         defl    $ - temp_NFA
  66++E19E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  66++E198             >
  66++E198 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  66++E199 46 5F 53 59 >                db      "F_SYNC"               // name string in 7-bit ascii, but
  66++E19D 4E 43       >
  66++E19F             >                org     $-1                 // alter last byte of Name just above to set
  66++E19E C3          >                db      {b $} | END_BIT     // msb as name end
  66++E19F             >
  66++E19F 8C 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  66++E1A1             >Prev_Ptr        defl    Heap_Ptr
  66++E1A1             >
  66++E1A1             >mirror_Ptr      defl    $
  66++E1A1             >
  66++E1A1 01 67       >                dw      Dict_Ptr + 2        // xt
  66++E1A3             >Heap_Ptr        defl    $ - $E000           // save current HP
  66++E1A3             >
  66++E1A3             >Current_HP      defl  $ - $E000             // used to set HP once!
  66++E1A3             >
  66++E1A3             >//              ______________________________________________________________________
  66++E1A3             >//              Dictionary part
  66++E1A3             >
  66++E1A3             >                org     Dict_Ptr
  66++66FF             >
  66++66FF A1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  66++6701             >
  66++6701             >F_SYNC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  66++6701 ~           >                call    runcode ; ok        // for primitive definitions  actual code
  66++6701 ~           >
  66++6701 ~           >
  66++6701             >                endif           ; ok        // for other definitions it "points" the correct handler
  66++6701             >                // Use of "; ok" to suppress "warning[fwdref]"
  66++6701             >
  66++6701             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  67++6701 E1                           pop     hl
  68++6702 7D                           ld      a, l                // file-handle
  69++6703 DD E5                        push    ix
  70++6705 D5                           push    de
  71++6706 C5                           push    bc
  72++6707 F3                           di
  73++6708 CF                           rst     $08
  74++6709 9C                           db      $9C
  75++670A 18 DC                        jr      F_Seek_Exit
  76++670C              //              ei
  77++670C              //              pop     de
  78++670C              //              pop     bc
  79++670C              //              pop     ix
  80++670C              //              sbc     hl, hl
  81++670C              //              psh1
  82++670C
  83++670C              //  ______________________________________________________________________
  84++670C              //
  85++670C              // f_fgetpos    u -- d f
  86++670C              // Seek to position d in file-handle u.
  87++670C              // Return a false-flag 0 on success, True flag on error
  88++670C                              New_Def F_FGETPOS, "F_FGETPOS", is_code, is_normal
  88++670C             >
  88++670C             >Dict_Ptr        defl    $
  88++670C             >
  88++670C             >//              ______________________________________________________________________
  88++670C             >//              Heap part
  88++670C             >
  88++670C             >
  88++670C             >                org     (Heap_Ptr & $1FFF) + $E000
  88++E1A3             >
  88++E1A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  88++E1A3             >Latest_Definition defl  Heap_Ptr
  88++E1A3             >
  88++E1A3             >                // dummy db directives used to calculate length of namec
  88++E1A3 46 5F 46 47 >                db      "F_FGETPOS"
  88++E1A7 45 54 50 4F >
  88++E1AB 53          >
  88++E1AC             >len_NFA         defl    $ - temp_NFA
  88++E1AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  88++E1A3             >
  88++E1A3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  88++E1A4 46 5F 46 47 >                db      "F_FGETPOS"               // name string in 7-bit ascii, but
  88++E1A8 45 54 50 4F >
  88++E1AC 53          >
  88++E1AD             >                org     $-1                 // alter last byte of Name just above to set
  88++E1AC D3          >                db      {b $} | END_BIT     // msb as name end
  88++E1AD             >
  88++E1AD 98 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  88++E1AF             >Prev_Ptr        defl    Heap_Ptr
  88++E1AF             >
  88++E1AF             >mirror_Ptr      defl    $
  88++E1AF             >
  88++E1AF 0E 67       >                dw      Dict_Ptr + 2        // xt
  88++E1B1             >Heap_Ptr        defl    $ - $E000           // save current HP
  88++E1B1             >
  88++E1B1             >Current_HP      defl  $ - $E000             // used to set HP once!
  88++E1B1             >
  88++E1B1             >//              ______________________________________________________________________
  88++E1B1             >//              Dictionary part
  88++E1B1             >
  88++E1B1             >                org     Dict_Ptr
  88++670C             >
  88++670C AF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
  88++670E             >
  88++670E             >F_FGETPOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  88++670E ~           >                call    runcode ; ok        // for primitive definitions  actual code
  88++670E ~           >
  88++670E ~           >
  88++670E             >                endif           ; ok        // for other definitions it "points" the correct handler
  88++670E             >                // Use of "; ok" to suppress "warning[fwdref]"
  88++670E             >
  88++670E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  89++670E E1                            pop     hl
  90++670F 7D                            ld      a, l                // file-handle
  91++6710 DD E5                         push    ix
  92++6712 D5                            push    de
  93++6713 C5                            push    bc
  94++6714 F3                            di
  95++6715 CF                            rst     $08
  96++6716 A0                            db      $A0
  97++6717 FB                            ei
  98++6718 D9                           exx
  99++6719 C1                           pop     bc                  // IP
 100++671A D1                           pop     de                  // Return Stack Pointer
 101++671B DD E1                        pop     ix
 102++671D D9                            exx
 103++671E D5                            push    de
 104++671F C5                            push    bc
 105++6720 ED 62                         sbc     hl, hl
 106++6722 E5                            push    hl
 107++6723 D9                           exx
 108++6724                              next
 108++6724 DD E9       >                jp      (ix)
 109++6726
 110++6726              //  ______________________________________________________________________
 111++6726              //
 112++6726              // f_read       a n u -- n f
 113++6726              // Read b bytes from file-handle u to address a
 114++6726              // Return the actual number n of bytes read
 115++6726              // Return 0 on success, True flag on error
 116++6726                              New_Def F_READ, "F_READ", is_code, is_normal
 116++6726             >
 116++6726             >Dict_Ptr        defl    $
 116++6726             >
 116++6726             >//              ______________________________________________________________________
 116++6726             >//              Heap part
 116++6726             >
 116++6726             >
 116++6726             >                org     (Heap_Ptr & $1FFF) + $E000
 116++E1B1             >
 116++E1B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 116++E1B1             >Latest_Definition defl  Heap_Ptr
 116++E1B1             >
 116++E1B1             >                // dummy db directives used to calculate length of namec
 116++E1B1 46 5F 52 45 >                db      "F_READ"
 116++E1B5 41 44       >
 116++E1B7             >len_NFA         defl    $ - temp_NFA
 116++E1B7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 116++E1B1             >
 116++E1B1 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 116++E1B2 46 5F 52 45 >                db      "F_READ"               // name string in 7-bit ascii, but
 116++E1B6 41 44       >
 116++E1B8             >                org     $-1                 // alter last byte of Name just above to set
 116++E1B7 C4          >                db      {b $} | END_BIT     // msb as name end
 116++E1B8             >
 116++E1B8 A3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 116++E1BA             >Prev_Ptr        defl    Heap_Ptr
 116++E1BA             >
 116++E1BA             >mirror_Ptr      defl    $
 116++E1BA             >
 116++E1BA 28 67       >                dw      Dict_Ptr + 2        // xt
 116++E1BC             >Heap_Ptr        defl    $ - $E000           // save current HP
 116++E1BC             >
 116++E1BC             >Current_HP      defl  $ - $E000             // used to set HP once!
 116++E1BC             >
 116++E1BC             >//              ______________________________________________________________________
 116++E1BC             >//              Dictionary part
 116++E1BC             >
 116++E1BC             >                org     Dict_Ptr
 116++6726             >
 116++6726 BA 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 116++6728             >
 116++6728             >F_READ:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 116++6728 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 116++6728 ~           >
 116++6728 ~           >
 116++6728             >                endif           ; ok        // for other definitions it "points" the correct handler
 116++6728             >                // Use of "; ok" to suppress "warning[fwdref]"
 116++6728             >
 116++6728             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 117++6728 D9                            exx
 118++6729 E1                            pop     hl
 119++672A 7D                            ld      a, l                // file-handle
 120++672B C1                            pop     bc                  // bc has bytes to read
 121++672C DD E3                         ex      (sp), ix            // ix has address
 122++672E D9                           exx
 123++672F D5                           push    de                  // Save Return Stack pointer
 124++6730 C5                           push    bc                  // Save Instruction pointer
 125++6731 D9                            exx
 126++6732 F3                            di
 127++6733 CF                            rst     $08
 128++6734 9D                            db      $9D
 129++6735              F_Read_Exit:
 130++6735 FB                           ei
 131++6736 D9                           exx
 132++6737 C1                           pop     bc                  // Restore Instruction pointer
 133++6738 D1                           pop     de                  // Restore Return Stack pointer
 134++6739 DD E1                        pop     ix                  // Restore ix
 135++673B D9                            exx
 136++673C D5                            push    de                  // bytes involved in i/o operation
 137++673D ED 62                         sbc     hl, hl
 138++673F E5                            push    hl
 139++6740 D9                           exx
 140++6741                              next
 140++6741 DD E9       >                jp      (ix)
 141++6743
 142++6743              //  ______________________________________________________________________
 143++6743              //
 144++6743              // f_write      a n u -- n f
 145++6743              // Write bytes currently stored at address a to file-handle u.
 146++6743              // Return the actual n bytes written and 0 on success, True flag on error.
 147++6743                              New_Def F_WRITE, "F_WRITE", is_code, is_normal
 147++6743             >
 147++6743             >Dict_Ptr        defl    $
 147++6743             >
 147++6743             >//              ______________________________________________________________________
 147++6743             >//              Heap part
 147++6743             >
 147++6743             >
 147++6743             >                org     (Heap_Ptr & $1FFF) + $E000
 147++E1BC             >
 147++E1BC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 147++E1BC             >Latest_Definition defl  Heap_Ptr
 147++E1BC             >
 147++E1BC             >                // dummy db directives used to calculate length of namec
 147++E1BC 46 5F 57 52 >                db      "F_WRITE"
 147++E1C0 49 54 45    >
 147++E1C3             >len_NFA         defl    $ - temp_NFA
 147++E1C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 147++E1BC             >
 147++E1BC 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 147++E1BD 46 5F 57 52 >                db      "F_WRITE"               // name string in 7-bit ascii, but
 147++E1C1 49 54 45    >
 147++E1C4             >                org     $-1                 // alter last byte of Name just above to set
 147++E1C3 C5          >                db      {b $} | END_BIT     // msb as name end
 147++E1C4             >
 147++E1C4 B1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 147++E1C6             >Prev_Ptr        defl    Heap_Ptr
 147++E1C6             >
 147++E1C6             >mirror_Ptr      defl    $
 147++E1C6             >
 147++E1C6 45 67       >                dw      Dict_Ptr + 2        // xt
 147++E1C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 147++E1C8             >
 147++E1C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 147++E1C8             >
 147++E1C8             >//              ______________________________________________________________________
 147++E1C8             >//              Dictionary part
 147++E1C8             >
 147++E1C8             >                org     Dict_Ptr
 147++6743             >
 147++6743 C6 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 147++6745             >
 147++6745             >F_WRITE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 147++6745 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 147++6745 ~           >
 147++6745 ~           >
 147++6745             >                endif           ; ok        // for other definitions it "points" the correct handler
 147++6745             >                // Use of "; ok" to suppress "warning[fwdref]"
 147++6745             >
 147++6745             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 148++6745 D9                            exx
 149++6746 E1                            pop     hl
 150++6747 7D                            ld      a, l                // file-handle
 151++6748 C1                            pop     bc                  // bc has bytes to read
 152++6749 DD E3                         ex      (sp), ix            // ix has address
 153++674B D9                           exx
 154++674C D5                           push    de                  // Save Return Stack pointer
 155++674D C5                           push    bc                  // Save Instruction pointer
 156++674E D9                            exx
 157++674F F3                            di
 158++6750 CF                            rst     $08
 159++6751 9E                            db      $9E
 160++6752 18 E1                         jr F_Read_Exit
 161++6754              //                ei
 162++6754              //                exx
 163++6754              //                pop     de                  // Restore Return Stack pointer
 164++6754              //                pop     bc                  // Restore Instruction pointer
 165++6754              //                pop     ix                  // Restore ix
 166++6754              //                 exx
 167++6754              //                 push    de                  // bytes involved in i/o operation
 168++6754              //                 sbc     hl, hl
 169++6754              //                 push    hl
 170++6754              //                exx
 171++6754              //                next
 172++6754
 173++6754              //  ______________________________________________________________________
 174++6754              //
 175++6754              // f_open       a1 a2 b -- u f
 176++6754              // open a file
 177++6754              // a1 (filespec) is a null-terminated string, such as produced by ," definition
 178++6754              // a2 is address to an 8-byte header data used in some cases.
 179++6754              // b is access mode-byte, that is a combination of:
 180++6754              // any/all of:
 181++6754              //   esx_mode_read          $01 request read access
 182++6754              //   esx_mode_write         $02 request write access
 183++6754              //   esx_mode_use_header    $40 read/write +3DOS header
 184++6754              // plus one of:
 185++6754              //   esx_mode_open_exist    $00 only open existing file
 186++6754              //   esx_mode_open_creat    $08 open existing or create file
 187++6754              //   esx_mode_creat_noexist $04 create new file, error if exists
 188++6754              //   esx_mode_creat_trunc   $0c create new file, delete existing
 189++6754              // Return file-handle u and 0 on success, True flag on error
 190++6754                              New_Def F_OPEN, "F_OPEN", is_code, is_normal
 190++6754             >
 190++6754             >Dict_Ptr        defl    $
 190++6754             >
 190++6754             >//              ______________________________________________________________________
 190++6754             >//              Heap part
 190++6754             >
 190++6754             >
 190++6754             >                org     (Heap_Ptr & $1FFF) + $E000
 190++E1C8             >
 190++E1C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 190++E1C8             >Latest_Definition defl  Heap_Ptr
 190++E1C8             >
 190++E1C8             >                // dummy db directives used to calculate length of namec
 190++E1C8 46 5F 4F 50 >                db      "F_OPEN"
 190++E1CC 45 4E       >
 190++E1CE             >len_NFA         defl    $ - temp_NFA
 190++E1CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 190++E1C8             >
 190++E1C8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 190++E1C9 46 5F 4F 50 >                db      "F_OPEN"               // name string in 7-bit ascii, but
 190++E1CD 45 4E       >
 190++E1CF             >                org     $-1                 // alter last byte of Name just above to set
 190++E1CE CE          >                db      {b $} | END_BIT     // msb as name end
 190++E1CF             >
 190++E1CF BC 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 190++E1D1             >Prev_Ptr        defl    Heap_Ptr
 190++E1D1             >
 190++E1D1             >mirror_Ptr      defl    $
 190++E1D1             >
 190++E1D1 56 67       >                dw      Dict_Ptr + 2        // xt
 190++E1D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 190++E1D3             >
 190++E1D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 190++E1D3             >
 190++E1D3             >//              ______________________________________________________________________
 190++E1D3             >//              Dictionary part
 190++E1D3             >
 190++E1D3             >                org     Dict_Ptr
 190++6754             >
 190++6754 D1 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 190++6756             >
 190++6756             >F_OPEN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 190++6756 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 190++6756 ~           >
 190++6756 ~           >
 190++6756             >                endif           ; ok        // for other definitions it "points" the correct handler
 190++6756             >                // Use of "; ok" to suppress "warning[fwdref]"
 190++6756             >
 190++6756             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 191++6756 D9                            exx
 192++6757 C1                            pop     bc                  // file-mode
 193++6758 41                            ld      b, c                // file-mode
 194++6759 D1                            pop     de                  // 8-bytes buffer if any
 195++675A DD E3                         ex      (sp), ix            // filespec nul-terminated
 196++675C D9                           exx
 197++675D D5                           push    de                  // Save Return Stack pointer
 198++675E C5                           push    bc                  // Save Instruction pointer
 199++675F D9                            exx
 200++6760 3E 2A                         ld      a, "*"
 201++6762 F3                            di
 202++6763 CF                            rst     $08
 203++6764 9A                            db      $9A
 204++6765              F_Open_Exit:
 205++6765              //               ei                         // removed because is repeated in f_read_exit
 206++6765 5F                            ld      e, a                // return the handle-number
 207++6766 16 00                         ld      d, 0
 208++6768 18 CB                        jr F_Read_Exit
 209++676A
 210++676A              //   \ CREATE FILENAME ," test.txt"   \ new Counted String
 211++676A              //   \ FILENAME 1+ PAD 1 F_OPEN
 212++676A              //   \ DROP
 213++676A              //   \ F_CLOSE
 214++676A
 215++676A
 216++676A              //  ______________________________________________________________________
 217++676A              //
 218++676A              // f_opendir    a1 -- u f
 219++676A              // open a file
 220++676A                              New_Def F_OPENDIR, "F_OPENDIR", is_code, is_normal
 220++676A             >
 220++676A             >Dict_Ptr        defl    $
 220++676A             >
 220++676A             >//              ______________________________________________________________________
 220++676A             >//              Heap part
 220++676A             >
 220++676A             >
 220++676A             >                org     (Heap_Ptr & $1FFF) + $E000
 220++E1D3             >
 220++E1D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 220++E1D3             >Latest_Definition defl  Heap_Ptr
 220++E1D3             >
 220++E1D3             >                // dummy db directives used to calculate length of namec
 220++E1D3 46 5F 4F 50 >                db      "F_OPENDIR"
 220++E1D7 45 4E 44 49 >
 220++E1DB 52          >
 220++E1DC             >len_NFA         defl    $ - temp_NFA
 220++E1DC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 220++E1D3             >
 220++E1D3 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 220++E1D4 46 5F 4F 50 >                db      "F_OPENDIR"               // name string in 7-bit ascii, but
 220++E1D8 45 4E 44 49 >
 220++E1DC 52          >
 220++E1DD             >                org     $-1                 // alter last byte of Name just above to set
 220++E1DC D2          >                db      {b $} | END_BIT     // msb as name end
 220++E1DD             >
 220++E1DD C8 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 220++E1DF             >Prev_Ptr        defl    Heap_Ptr
 220++E1DF             >
 220++E1DF             >mirror_Ptr      defl    $
 220++E1DF             >
 220++E1DF 6C 67       >                dw      Dict_Ptr + 2        // xt
 220++E1E1             >Heap_Ptr        defl    $ - $E000           // save current HP
 220++E1E1             >
 220++E1E1             >Current_HP      defl  $ - $E000             // used to set HP once!
 220++E1E1             >
 220++E1E1             >//              ______________________________________________________________________
 220++E1E1             >//              Dictionary part
 220++E1E1             >
 220++E1E1             >                org     Dict_Ptr
 220++676A             >
 220++676A DF 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 220++676C             >
 220++676C             >F_OPENDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 220++676C ~           >                call    runcode ; ok        // for primitive definitions  actual code
 220++676C ~           >
 220++676C ~           >
 220++676C             >                endif           ; ok        // for other definitions it "points" the correct handler
 220++676C             >                // Use of "; ok" to suppress "warning[fwdref]"
 220++676C             >
 220++676C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 221++676C DD E3                        ex      (sp), ix            // filespec nul-terminated
 222++676E D5                           push    de                  // Save Return Stack pointer
 223++676F C5                           push    bc                  // Save Instruction pointer
 224++6770 06 10                        ld      b, $10              // file-mode
 225++6772 3E 43                        ld      a, "C"
 226++6774 F3                           di
 227++6775 CF                           rst     $08
 228++6776 A3                           db      $A3
 229++6777 18 EC                        jr      F_Open_Exit
 230++6779
 231++6779
 232++6779              //  ______________________________________________________________________
 233++6779              //
 234++6779              // f_readdir    a1 a2 b -- u f
 235++6779              // open a file
 236++6779                              New_Def F_READDIR, "F_READDIR", is_code, is_normal
 236++6779             >
 236++6779             >Dict_Ptr        defl    $
 236++6779             >
 236++6779             >//              ______________________________________________________________________
 236++6779             >//              Heap part
 236++6779             >
 236++6779             >
 236++6779             >                org     (Heap_Ptr & $1FFF) + $E000
 236++E1E1             >
 236++E1E1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 236++E1E1             >Latest_Definition defl  Heap_Ptr
 236++E1E1             >
 236++E1E1             >                // dummy db directives used to calculate length of namec
 236++E1E1 46 5F 52 45 >                db      "F_READDIR"
 236++E1E5 41 44 44 49 >
 236++E1E9 52          >
 236++E1EA             >len_NFA         defl    $ - temp_NFA
 236++E1EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 236++E1E1             >
 236++E1E1 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 236++E1E2 46 5F 52 45 >                db      "F_READDIR"               // name string in 7-bit ascii, but
 236++E1E6 41 44 44 49 >
 236++E1EA 52          >
 236++E1EB             >                org     $-1                 // alter last byte of Name just above to set
 236++E1EA D2          >                db      {b $} | END_BIT     // msb as name end
 236++E1EB             >
 236++E1EB D3 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 236++E1ED             >Prev_Ptr        defl    Heap_Ptr
 236++E1ED             >
 236++E1ED             >mirror_Ptr      defl    $
 236++E1ED             >
 236++E1ED 7B 67       >                dw      Dict_Ptr + 2        // xt
 236++E1EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 236++E1EF             >
 236++E1EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 236++E1EF             >
 236++E1EF             >//              ______________________________________________________________________
 236++E1EF             >//              Dictionary part
 236++E1EF             >
 236++E1EF             >                org     Dict_Ptr
 236++6779             >
 236++6779 ED 01       >                dw      mirror_Ptr - $E000 + Heap_offset
 236++677B             >
 236++677B             >F_READDIR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 236++677B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 236++677B ~           >
 236++677B ~           >
 236++677B             >                endif           ; ok        // for other definitions it "points" the correct handler
 236++677B             >                // Use of "; ok" to suppress "warning[fwdref]"
 236++677B             >
 236++677B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 237++677B D9                            exx
 238++677C E1                            pop     hl
 239++677D 7D                            ld      a, l
 240++677E D1                            pop     de
 241++677F DD E3                         ex      (sp), ix            // filespec nul-terminated
 242++6781 D9                           exx
 243++6782 D5                           push    de                  // Save Return Stack pointer
 244++6783 C5                           push    bc                  // Save Instruction pointer
 245++6784 D9                            exx
 246++6785 F3                            di
 247++6786 CF                            rst     $08
 248++6787 A4                            db      $A4
 249++6788 18 DB                         jr      F_Open_Exit
 250++678A
 251++678A
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt0.asm
1095+ 678A
1096+ 678A
1097+ 678A              //  ______________________________________________________________________
1098+ 678A              //
1099+ 678A              // cmove    a1 a2 u --
1100+ 678A              // If u > 0, moves memory content starting at address a1 for n bytes long
1101+ 678A              // storing then starting at address addr2.
1102+ 678A              // The content of a1 is moved first. See CMOVE> also.
1103+ 678A                              New_Def CMOVE, "CMOVE", is_code, is_normal
1103+ 678A             >
1103+ 678A             >Dict_Ptr        defl    $
1103+ 678A             >
1103+ 678A             >//              ______________________________________________________________________
1103+ 678A             >//              Heap part
1103+ 678A             >
1103+ 678A             >
1103+ 678A             >                org     (Heap_Ptr & $1FFF) + $E000
1103+ E1EF             >
1103+ E1EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1103+ E1EF             >Latest_Definition defl  Heap_Ptr
1103+ E1EF             >
1103+ E1EF             >                // dummy db directives used to calculate length of namec
1103+ E1EF 43 4D 4F 56 >                db      "CMOVE"
1103+ E1F3 45          >
1103+ E1F4             >len_NFA         defl    $ - temp_NFA
1103+ E1F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1103+ E1EF             >
1103+ E1EF 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1103+ E1F0 43 4D 4F 56 >                db      "CMOVE"               // name string in 7-bit ascii, but
1103+ E1F4 45          >
1103+ E1F5             >                org     $-1                 // alter last byte of Name just above to set
1103+ E1F4 C5          >                db      {b $} | END_BIT     // msb as name end
1103+ E1F5             >
1103+ E1F5 E1 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1103+ E1F7             >Prev_Ptr        defl    Heap_Ptr
1103+ E1F7             >
1103+ E1F7             >mirror_Ptr      defl    $
1103+ E1F7             >
1103+ E1F7 8C 67       >                dw      Dict_Ptr + 2        // xt
1103+ E1F9             >Heap_Ptr        defl    $ - $E000           // save current HP
1103+ E1F9             >
1103+ E1F9             >Current_HP      defl  $ - $E000             // used to set HP once!
1103+ E1F9             >
1103+ E1F9             >//              ______________________________________________________________________
1103+ E1F9             >//              Dictionary part
1103+ E1F9             >
1103+ E1F9             >                org     Dict_Ptr
1103+ 678A             >
1103+ 678A F7 01       >                dw      mirror_Ptr - $E000 + Heap_offset
1103+ 678C             >
1103+ 678C             >CMOVE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1103+ 678C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1103+ 678C ~           >
1103+ 678C ~           >
1103+ 678C             >                endif           ; ok        // for other definitions it "points" the correct handler
1103+ 678C             >                // Use of "; ok" to suppress "warning[fwdref]"
1103+ 678C             >
1103+ 678C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1104+ 678C D9                           exx
1105+ 678D
1106+ 678D C1                           pop     bc                  // bc has counter
1107+ 678E D1                           pop     de                  // de now has dest
1108+ 678F E1                           pop     hl                 // hl has source, save Instruction Pointer
1109+ 6790 78                           ld      a, b
1110+ 6791 B1                           or      c
1111+ 6792 28 02                        jr      z, Cmove_NoMove
1112+ 6794 ED B0                            ldir
1113+ 6796              Cmove_NoMove:
1114+ 6796 D9                           exx
1115+ 6797
1116+ 6797                              next
1116+ 6797 DD E9       >                jp      (ix)
1117+ 6799
1118+ 6799              //  ______________________________________________________________________
1119+ 6799              //
1120+ 6799              // cmove>    a1 a2 u --
1121+ 6799              // If u > 0, moves memory content starting at address a1 for n bytes long
1122+ 6799              // storing then starting at address addr2.
1123+ 6799              // The content of a1 is moved last. See cmove.
1124+ 6799                              New_Def CMOVE_TO, "CMOVE>", is_code, is_normal
1124+ 6799             >
1124+ 6799             >Dict_Ptr        defl    $
1124+ 6799             >
1124+ 6799             >//              ______________________________________________________________________
1124+ 6799             >//              Heap part
1124+ 6799             >
1124+ 6799             >
1124+ 6799             >                org     (Heap_Ptr & $1FFF) + $E000
1124+ E1F9             >
1124+ E1F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1124+ E1F9             >Latest_Definition defl  Heap_Ptr
1124+ E1F9             >
1124+ E1F9             >                // dummy db directives used to calculate length of namec
1124+ E1F9 43 4D 4F 56 >                db      "CMOVE>"
1124+ E1FD 45 3E       >
1124+ E1FF             >len_NFA         defl    $ - temp_NFA
1124+ E1FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1124+ E1F9             >
1124+ E1F9 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1124+ E1FA 43 4D 4F 56 >                db      "CMOVE>"               // name string in 7-bit ascii, but
1124+ E1FE 45 3E       >
1124+ E200             >                org     $-1                 // alter last byte of Name just above to set
1124+ E1FF BE          >                db      {b $} | END_BIT     // msb as name end
1124+ E200             >
1124+ E200 EF 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1124+ E202             >Prev_Ptr        defl    Heap_Ptr
1124+ E202             >
1124+ E202             >mirror_Ptr      defl    $
1124+ E202             >
1124+ E202 9B 67       >                dw      Dict_Ptr + 2        // xt
1124+ E204             >Heap_Ptr        defl    $ - $E000           // save current HP
1124+ E204             >
1124+ E204             >Current_HP      defl  $ - $E000             // used to set HP once!
1124+ E204             >
1124+ E204             >//              ______________________________________________________________________
1124+ E204             >//              Dictionary part
1124+ E204             >
1124+ E204             >                org     Dict_Ptr
1124+ 6799             >
1124+ 6799 02 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1124+ 679B             >
1124+ 679B             >CMOVE_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1124+ 679B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1124+ 679B ~           >
1124+ 679B ~           >
1124+ 679B             >                endif           ; ok        // for other definitions it "points" the correct handler
1124+ 679B             >                // Use of "; ok" to suppress "warning[fwdref]"
1124+ 679B             >
1124+ 679B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1125+ 679B D9                           exx
1126+ 679C
1127+ 679C C1                           pop     bc                  // bc has counter
1128+ 679D D1                           pop     de                  // de has dest
1129+ 679E E1                           pop     hl                  // hl has source, save Instruction Pointer
1130+ 679F 78                           ld      a, b
1131+ 67A0 B1                           or      c
1132+ 67A1 28 08                        jr      z, CmoveV_NoMove
1133+ 67A3 EB                               ex      de, hl              // compute address to
1134+ 67A4 09                               add     hl, bc              // operate backward
1135+ 67A5 2B                               dec     hl
1136+ 67A6 EB                               ex      de, hl
1137+ 67A7 09                               add     hl, bc
1138+ 67A8 2B                               dec     hl
1139+ 67A9 ED B8                            lddr                        // backward
1140+ 67AB              CmoveV_NoMove:
1141+ 67AB D9                           exx
1142+ 67AC
1143+ 67AC                              next
1143+ 67AC DD E9       >                jp      (ix)
1144+ 67AE
1145+ 67AE              //  ______________________________________________________________________
1146+ 67AE              //
1147+ 67AE              // um*      u1 u2 -- ud
1148+ 67AE              // Unsigned multiplication
1149+ 67AE              // A double-integer is kept in CPU registers as DEHL then pushed on stack.
1150+ 67AE              // On the stack a double number is treated as two single numbers
1151+ 67AE              // where DE is on the top of the stack and HL is the second from top,
1152+ 67AE              // Instead, in 2VARIABLE a double number is stored as EDLH.
1153+ 67AE              // this definition could use "MUL" Z80N new op-code.
1154+ 67AE                              New_Def UM_MUL, "UM*", is_code, is_normal
1154+ 67AE             >
1154+ 67AE             >Dict_Ptr        defl    $
1154+ 67AE             >
1154+ 67AE             >//              ______________________________________________________________________
1154+ 67AE             >//              Heap part
1154+ 67AE             >
1154+ 67AE             >
1154+ 67AE             >                org     (Heap_Ptr & $1FFF) + $E000
1154+ E204             >
1154+ E204             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1154+ E204             >Latest_Definition defl  Heap_Ptr
1154+ E204             >
1154+ E204             >                // dummy db directives used to calculate length of namec
1154+ E204 55 4D 2A    >                db      "UM*"
1154+ E207             >len_NFA         defl    $ - temp_NFA
1154+ E207             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1154+ E204             >
1154+ E204 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1154+ E205 55 4D 2A    >                db      "UM*"               // name string in 7-bit ascii, but
1154+ E208             >                org     $-1                 // alter last byte of Name just above to set
1154+ E207 AA          >                db      {b $} | END_BIT     // msb as name end
1154+ E208             >
1154+ E208 F9 01       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1154+ E20A             >Prev_Ptr        defl    Heap_Ptr
1154+ E20A             >
1154+ E20A             >mirror_Ptr      defl    $
1154+ E20A             >
1154+ E20A B0 67       >                dw      Dict_Ptr + 2        // xt
1154+ E20C             >Heap_Ptr        defl    $ - $E000           // save current HP
1154+ E20C             >
1154+ E20C             >Current_HP      defl  $ - $E000             // used to set HP once!
1154+ E20C             >
1154+ E20C             >//              ______________________________________________________________________
1154+ E20C             >//              Dictionary part
1154+ E20C             >
1154+ E20C             >                org     Dict_Ptr
1154+ 67AE             >
1154+ 67AE 0A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1154+ 67B0             >
1154+ 67B0             >UM_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1154+ 67B0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1154+ 67B0 ~           >
1154+ 67B0 ~           >
1154+ 67B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1154+ 67B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1154+ 67B0             >
1154+ 67B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1155+ 67B0 D9                           exx
1156+ 67B1 D1                           pop     de                    // de has u2 operand
1157+ 67B2 E1                           pop     hl                    // hl has u1 operand
1158+ 67B3 45                           ld      b, l
1159+ 67B4 4B                           ld      c, e
1160+ 67B5 5D                           ld      e, l
1161+ 67B6 6A                           ld      l, d
1162+ 67B7 E5                           push    hl
1163+ 67B8 69                           ld      l, c
1164+ 67B9 ED 30                        mul
1165+ 67BB EB                           ex      de, hl
1166+ 67BC ED 30                        mul
1167+ 67BE AF                           xor     a
1168+ 67BF 19                           add     hl, de
1169+ 67C0 8F                           adc     a
1170+ 67C1 59                           ld      e, c
1171+ 67C2 50                           ld      d, b
1172+ 67C3 ED 30                        mul
1173+ 67C5 47                           ld      b, a
1174+ 67C6 4C                           ld      c, h
1175+ 67C7 7A                           ld      a, d
1176+ 67C8 85                           add     l
1177+ 67C9 67                           ld      h, a
1178+ 67CA 6B                           ld      l, e
1179+ 67CB D1                           pop     de
1180+ 67CC ED 30                        mul
1181+ 67CE EB                           ex      de, hl
1182+ 67CF ED 4A                        adc     hl, bc
1183+ 67D1 D5                           push    de
1184+ 67D2 E5                           push    hl
1185+ 67D3 D9                           exx
1186+ 67D4                              next
1186+ 67D4 DD E9       >                jp      (ix)
1187+ 67D6
1188+ 67D6              //  ______________________________________________________________________
1189+ 67D6              //
1190+ 67D6              // um/mod      ud u1 -- q r
1191+ 67D6              // divides ud into u1 giving quotient q and remainder r
1192+ 67D6              // algorithm takes 16 bit at a time starting from msb
1193+ 67D6              // DE grows from lsb upward with quotient result
1194+ 67D6              // HL keeps the remainder at each stage of division
1195+ 67D6              // each loop 'lowers' the next binary digit to form the current dividend
1196+ 67D6                              New_Def UMDIVMOD, "UM/MOD", is_code, is_normal
1196+ 67D6             >
1196+ 67D6             >Dict_Ptr        defl    $
1196+ 67D6             >
1196+ 67D6             >//              ______________________________________________________________________
1196+ 67D6             >//              Heap part
1196+ 67D6             >
1196+ 67D6             >
1196+ 67D6             >                org     (Heap_Ptr & $1FFF) + $E000
1196+ E20C             >
1196+ E20C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ E20C             >Latest_Definition defl  Heap_Ptr
1196+ E20C             >
1196+ E20C             >                // dummy db directives used to calculate length of namec
1196+ E20C 55 4D 2F 4D >                db      "UM/MOD"
1196+ E210 4F 44       >
1196+ E212             >len_NFA         defl    $ - temp_NFA
1196+ E212             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ E20C             >
1196+ E20C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ E20D 55 4D 2F 4D >                db      "UM/MOD"               // name string in 7-bit ascii, but
1196+ E211 4F 44       >
1196+ E213             >                org     $-1                 // alter last byte of Name just above to set
1196+ E212 C4          >                db      {b $} | END_BIT     // msb as name end
1196+ E213             >
1196+ E213 04 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1196+ E215             >Prev_Ptr        defl    Heap_Ptr
1196+ E215             >
1196+ E215             >mirror_Ptr      defl    $
1196+ E215             >
1196+ E215 D8 67       >                dw      Dict_Ptr + 2        // xt
1196+ E217             >Heap_Ptr        defl    $ - $E000           // save current HP
1196+ E217             >
1196+ E217             >Current_HP      defl  $ - $E000             // used to set HP once!
1196+ E217             >
1196+ E217             >//              ______________________________________________________________________
1196+ E217             >//              Dictionary part
1196+ E217             >
1196+ E217             >                org     Dict_Ptr
1196+ 67D6             >
1196+ 67D6 15 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1196+ 67D8             >
1196+ 67D8             >UMDIVMOD:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 67D8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1196+ 67D8 ~           >
1196+ 67D8 ~           >
1196+ 67D8             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 67D8             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 67D8             >
1196+ 67D8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 67D8 D9                           exx
1198+ 67D9 C1                           pop     bc                      // divisor
1199+ 67DA
1200+ 67DA E1                           pop     hl                      // < high part
1201+ 67DB D1                           pop     de                      // < low part and
1202+ 67DC
1203+ 67DC 7D                           ld      a, l                    // check without changing arguments
1204+ 67DD 91                           sub     c                       // if divisor is greater than high part
1205+ 67DE 7C                           ld      a, h                    // so quotient will be in range
1206+ 67DF 98                           sbc     a, b
1207+ 67E0 30 20                        jr      nc, Um_DivMod_OutOfRange
1208+ 67E2 3E 10                            ld      a, 16
1209+ 67E4              Um_DivMod_Loop:
1210+ 67E4 CB 23                                sla     e
1211+ 67E6 CB 12                                rl      d
1212+ 67E8 ED 6A                                adc     hl, hl
1213+ 67EA 30 05                                jr      nc, Um_DivMod_Carry
1214+ 67EC A7                                       and     a
1215+ 67ED ED 42                                    sbc     hl, bc
1216+ 67EF 18 07                                jr      Um_DivMod_Endif    // else
1217+ 67F1              Um_DivMod_Carry:
1218+ 67F1 A7                                       and     a
1219+ 67F2 ED 42                                    sbc     hl, bc
1220+ 67F4 30 02                                    jr      nc, Um_DivMod_Endif
1221+ 67F6 09                                           add     hl, bc
1222+ 67F7 1B                                           dec     de
1223+ 67F8              Um_DivMod_Endif:                                   // endif
1224+ 67F8 13                                   inc     de
1225+ 67F9 3D                                   dec     a
1226+ 67FA 20 E8                            jr      nz, Um_DivMod_Loop
1227+ 67FC EB                               ex      de, hl
1228+ 67FD              Um_DivMod_Bailout:
1229+ 67FD D5                               push    de                  // de := remanider
1230+ 67FE E5                               push    hl                  // hl := quotient
1231+ 67FF D9                               exx
1232+ 6800                                  next
1232+ 6800 DD E9       >                jp      (ix)
1233+ 6802
1234+ 6802              Um_DivMod_OutOfRange:
1235+ 6802 21 FF FF                     ld      hl, -1
1236+ 6805 54                           ld      d, h
1237+ 6806 5D                           ld      e, l
1238+ 6807 18 F4                        jr      Um_DivMod_Bailout
1239+ 6809
1240+ 6809              //  ______________________________________________________________________
1241+ 6809              //
1242+ 6809              // and          n1 n2 -- n3
1243+ 6809              // bit logical AND. Returns n3 as n1 & n2
1244+ 6809                              New_Def AND_OP, "AND", is_code, is_normal
1244+ 6809             >
1244+ 6809             >Dict_Ptr        defl    $
1244+ 6809             >
1244+ 6809             >//              ______________________________________________________________________
1244+ 6809             >//              Heap part
1244+ 6809             >
1244+ 6809             >
1244+ 6809             >                org     (Heap_Ptr & $1FFF) + $E000
1244+ E217             >
1244+ E217             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1244+ E217             >Latest_Definition defl  Heap_Ptr
1244+ E217             >
1244+ E217             >                // dummy db directives used to calculate length of namec
1244+ E217 41 4E 44    >                db      "AND"
1244+ E21A             >len_NFA         defl    $ - temp_NFA
1244+ E21A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1244+ E217             >
1244+ E217 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1244+ E218 41 4E 44    >                db      "AND"               // name string in 7-bit ascii, but
1244+ E21B             >                org     $-1                 // alter last byte of Name just above to set
1244+ E21A C4          >                db      {b $} | END_BIT     // msb as name end
1244+ E21B             >
1244+ E21B 0C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1244+ E21D             >Prev_Ptr        defl    Heap_Ptr
1244+ E21D             >
1244+ E21D             >mirror_Ptr      defl    $
1244+ E21D             >
1244+ E21D 0B 68       >                dw      Dict_Ptr + 2        // xt
1244+ E21F             >Heap_Ptr        defl    $ - $E000           // save current HP
1244+ E21F             >
1244+ E21F             >Current_HP      defl  $ - $E000             // used to set HP once!
1244+ E21F             >
1244+ E21F             >//              ______________________________________________________________________
1244+ E21F             >//              Dictionary part
1244+ E21F             >
1244+ E21F             >                org     Dict_Ptr
1244+ 6809             >
1244+ 6809 1D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1244+ 680B             >
1244+ 680B             >AND_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1244+ 680B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1244+ 680B ~           >
1244+ 680B ~           >
1244+ 680B             >                endif           ; ok        // for other definitions it "points" the correct handler
1244+ 680B             >                // Use of "; ok" to suppress "warning[fwdref]"
1244+ 680B             >
1244+ 680B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1245+ 680B D9                           exx
1246+ 680C D1                           pop     de
1247+ 680D E1                           pop     hl
1248+ 680E 7B                           ld      a, e
1249+ 680F A5                           and     l
1250+ 6810 6F                           ld      l, a
1251+ 6811 7A                           ld      a, d
1252+ 6812 A4                           and     h
1253+ 6813              Boolean_exit:
1254+ 6813 67                           ld      h, a
1255+ 6814 E5                           push    hl
1256+ 6815 D9                           exx
1257+ 6816                              next
1257+ 6816 DD E9       >                jp      (ix)
1258+ 6818
1259+ 6818              //  ______________________________________________________________________
1260+ 6818              //
1261+ 6818              // or           n1 n2 -- n3
1262+ 6818              // bit logical OR. Returns n3 as n1 | n2
1263+ 6818                              New_Def OR_OP, "OR", is_code, is_normal
1263+ 6818             >
1263+ 6818             >Dict_Ptr        defl    $
1263+ 6818             >
1263+ 6818             >//              ______________________________________________________________________
1263+ 6818             >//              Heap part
1263+ 6818             >
1263+ 6818             >
1263+ 6818             >                org     (Heap_Ptr & $1FFF) + $E000
1263+ E21F             >
1263+ E21F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1263+ E21F             >Latest_Definition defl  Heap_Ptr
1263+ E21F             >
1263+ E21F             >                // dummy db directives used to calculate length of namec
1263+ E21F 4F 52       >                db      "OR"
1263+ E221             >len_NFA         defl    $ - temp_NFA
1263+ E221             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1263+ E21F             >
1263+ E21F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1263+ E220 4F 52       >                db      "OR"               // name string in 7-bit ascii, but
1263+ E222             >                org     $-1                 // alter last byte of Name just above to set
1263+ E221 D2          >                db      {b $} | END_BIT     // msb as name end
1263+ E222             >
1263+ E222 17 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1263+ E224             >Prev_Ptr        defl    Heap_Ptr
1263+ E224             >
1263+ E224             >mirror_Ptr      defl    $
1263+ E224             >
1263+ E224 1A 68       >                dw      Dict_Ptr + 2        // xt
1263+ E226             >Heap_Ptr        defl    $ - $E000           // save current HP
1263+ E226             >
1263+ E226             >Current_HP      defl  $ - $E000             // used to set HP once!
1263+ E226             >
1263+ E226             >//              ______________________________________________________________________
1263+ E226             >//              Dictionary part
1263+ E226             >
1263+ E226             >                org     Dict_Ptr
1263+ 6818             >
1263+ 6818 24 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1263+ 681A             >
1263+ 681A             >OR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1263+ 681A ~           >                call    runcode ; ok        // for primitive definitions  actual code
1263+ 681A ~           >
1263+ 681A ~           >
1263+ 681A             >                endif           ; ok        // for other definitions it "points" the correct handler
1263+ 681A             >                // Use of "; ok" to suppress "warning[fwdref]"
1263+ 681A             >
1263+ 681A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1264+ 681A D9                           exx
1265+ 681B D1                           pop     de
1266+ 681C E1                           pop     hl
1267+ 681D 7B                           ld      a, e
1268+ 681E B5                           or      l
1269+ 681F 6F                           ld      l, a
1270+ 6820 7A                           ld      a, d
1271+ 6821 B4                           or      h
1272+ 6822 67                           ld      h, a
1273+ 6823 E5                           push    hl
1274+ 6824 D9                           exx
1275+ 6825                              next
1275+ 6825 DD E9       >                jp      (ix)
1276+ 6827
1277+ 6827              //  ______________________________________________________________________
1278+ 6827              //
1279+ 6827              // xor          n1 n2 -- n3
1280+ 6827              // bit logical OR. Returns n3 as n1 ^ n2
1281+ 6827                              New_Def XOR_OP, "XOR", is_code, is_normal
1281+ 6827             >
1281+ 6827             >Dict_Ptr        defl    $
1281+ 6827             >
1281+ 6827             >//              ______________________________________________________________________
1281+ 6827             >//              Heap part
1281+ 6827             >
1281+ 6827             >
1281+ 6827             >                org     (Heap_Ptr & $1FFF) + $E000
1281+ E226             >
1281+ E226             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1281+ E226             >Latest_Definition defl  Heap_Ptr
1281+ E226             >
1281+ E226             >                // dummy db directives used to calculate length of namec
1281+ E226 58 4F 52    >                db      "XOR"
1281+ E229             >len_NFA         defl    $ - temp_NFA
1281+ E229             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1281+ E226             >
1281+ E226 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1281+ E227 58 4F 52    >                db      "XOR"               // name string in 7-bit ascii, but
1281+ E22A             >                org     $-1                 // alter last byte of Name just above to set
1281+ E229 D2          >                db      {b $} | END_BIT     // msb as name end
1281+ E22A             >
1281+ E22A 1F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1281+ E22C             >Prev_Ptr        defl    Heap_Ptr
1281+ E22C             >
1281+ E22C             >mirror_Ptr      defl    $
1281+ E22C             >
1281+ E22C 29 68       >                dw      Dict_Ptr + 2        // xt
1281+ E22E             >Heap_Ptr        defl    $ - $E000           // save current HP
1281+ E22E             >
1281+ E22E             >Current_HP      defl  $ - $E000             // used to set HP once!
1281+ E22E             >
1281+ E22E             >//              ______________________________________________________________________
1281+ E22E             >//              Dictionary part
1281+ E22E             >
1281+ E22E             >                org     Dict_Ptr
1281+ 6827             >
1281+ 6827 2C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1281+ 6829             >
1281+ 6829             >XOR_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1281+ 6829 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1281+ 6829 ~           >
1281+ 6829 ~           >
1281+ 6829             >                endif           ; ok        // for other definitions it "points" the correct handler
1281+ 6829             >                // Use of "; ok" to suppress "warning[fwdref]"
1281+ 6829             >
1281+ 6829             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1282+ 6829 D9                           exx
1283+ 682A D1                           pop     de
1284+ 682B E1                           pop     hl
1285+ 682C 7B                           ld      a, e
1286+ 682D AD                           xor     l
1287+ 682E 6F                           ld      l, a
1288+ 682F 7A                           ld      a, d
1289+ 6830 AC                           xor     h
1290+ 6831 67                           ld      h, a
1291+ 6832 E5                           push    hl
1292+ 6833 D9                           exx
1293+ 6834                              next
1293+ 6834 DD E9       >                jp      (ix)
1294+ 6836
1295+ 6836              //  ______________________________________________________________________
1296+ 6836              //
1297+ 6836              // sp@      -- a
1298+ 6836              // returns on top of stack the value of SP before execution
1299+ 6836                              New_Def SPFETCH, "SP@", is_code, is_normal
1299+ 6836             >
1299+ 6836             >Dict_Ptr        defl    $
1299+ 6836             >
1299+ 6836             >//              ______________________________________________________________________
1299+ 6836             >//              Heap part
1299+ 6836             >
1299+ 6836             >
1299+ 6836             >                org     (Heap_Ptr & $1FFF) + $E000
1299+ E22E             >
1299+ E22E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1299+ E22E             >Latest_Definition defl  Heap_Ptr
1299+ E22E             >
1299+ E22E             >                // dummy db directives used to calculate length of namec
1299+ E22E 53 50 40    >                db      "SP@"
1299+ E231             >len_NFA         defl    $ - temp_NFA
1299+ E231             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1299+ E22E             >
1299+ E22E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1299+ E22F 53 50 40    >                db      "SP@"               // name string in 7-bit ascii, but
1299+ E232             >                org     $-1                 // alter last byte of Name just above to set
1299+ E231 C0          >                db      {b $} | END_BIT     // msb as name end
1299+ E232             >
1299+ E232 26 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1299+ E234             >Prev_Ptr        defl    Heap_Ptr
1299+ E234             >
1299+ E234             >mirror_Ptr      defl    $
1299+ E234             >
1299+ E234 38 68       >                dw      Dict_Ptr + 2        // xt
1299+ E236             >Heap_Ptr        defl    $ - $E000           // save current HP
1299+ E236             >
1299+ E236             >Current_HP      defl  $ - $E000             // used to set HP once!
1299+ E236             >
1299+ E236             >//              ______________________________________________________________________
1299+ E236             >//              Dictionary part
1299+ E236             >
1299+ E236             >                org     Dict_Ptr
1299+ 6836             >
1299+ 6836 34 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1299+ 6838             >
1299+ 6838             >SPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1299+ 6838 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1299+ 6838 ~           >
1299+ 6838 ~           >
1299+ 6838             >                endif           ; ok        // for other definitions it "points" the correct handler
1299+ 6838             >                // Use of "; ok" to suppress "warning[fwdref]"
1299+ 6838             >
1299+ 6838             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1300+ 6838
1301+ 6838 21 00 00                     ld      hl, 0
1302+ 683B 39                           add     hl, sp
1303+ 683C
1304+ 683C                              psh1
1304+ 683C E5          >                push    hl
1304+ 683D DD E9       >                jp      (ix)
1305+ 683F
1306+ 683F              //  ______________________________________________________________________
1307+ 683F              //
1308+ 683F              // sp!      a --
1309+ 683F              // restore SP to the initial value passed
1310+ 683F              // normally it is S0, i.e. the word at offset 6 and 7 of user variabiles area.
1311+ 683F                              New_Def SPSTORE, "SP!", is_code, is_normal
1311+ 683F             >
1311+ 683F             >Dict_Ptr        defl    $
1311+ 683F             >
1311+ 683F             >//              ______________________________________________________________________
1311+ 683F             >//              Heap part
1311+ 683F             >
1311+ 683F             >
1311+ 683F             >                org     (Heap_Ptr & $1FFF) + $E000
1311+ E236             >
1311+ E236             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1311+ E236             >Latest_Definition defl  Heap_Ptr
1311+ E236             >
1311+ E236             >                // dummy db directives used to calculate length of namec
1311+ E236 53 50 21    >                db      "SP!"
1311+ E239             >len_NFA         defl    $ - temp_NFA
1311+ E239             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1311+ E236             >
1311+ E236 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1311+ E237 53 50 21    >                db      "SP!"               // name string in 7-bit ascii, but
1311+ E23A             >                org     $-1                 // alter last byte of Name just above to set
1311+ E239 A1          >                db      {b $} | END_BIT     // msb as name end
1311+ E23A             >
1311+ E23A 2E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1311+ E23C             >Prev_Ptr        defl    Heap_Ptr
1311+ E23C             >
1311+ E23C             >mirror_Ptr      defl    $
1311+ E23C             >
1311+ E23C 41 68       >                dw      Dict_Ptr + 2        // xt
1311+ E23E             >Heap_Ptr        defl    $ - $E000           // save current HP
1311+ E23E             >
1311+ E23E             >Current_HP      defl  $ - $E000             // used to set HP once!
1311+ E23E             >
1311+ E23E             >//              ______________________________________________________________________
1311+ E23E             >//              Dictionary part
1311+ E23E             >
1311+ E23E             >                org     Dict_Ptr
1311+ 683F             >
1311+ 683F 3C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1311+ 6841             >
1311+ 6841             >SPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1311+ 6841 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1311+ 6841 ~           >
1311+ 6841 ~           >
1311+ 6841             >                endif           ; ok        // for other definitions it "points" the correct handler
1311+ 6841             >                // Use of "; ok" to suppress "warning[fwdref]"
1311+ 6841             >
1311+ 6841             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1312+ 6841 E1                           pop     hl
1313+ 6842 F9                           ld      sp, hl
1314+ 6843
1315+ 6843                              next
1315+ 6843 DD E9       >                jp      (ix)
1316+ 6845
1317+ 6845              //  ______________________________________________________________________
1318+ 6845              //
1319+ 6845              // rp@      -- a
1320+ 6845              // returns on top of stack the value of Return-Pointer
1321+ 6845                              New_Def RPFETCH, "RP@", is_code, is_normal
1321+ 6845             >
1321+ 6845             >Dict_Ptr        defl    $
1321+ 6845             >
1321+ 6845             >//              ______________________________________________________________________
1321+ 6845             >//              Heap part
1321+ 6845             >
1321+ 6845             >
1321+ 6845             >                org     (Heap_Ptr & $1FFF) + $E000
1321+ E23E             >
1321+ E23E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1321+ E23E             >Latest_Definition defl  Heap_Ptr
1321+ E23E             >
1321+ E23E             >                // dummy db directives used to calculate length of namec
1321+ E23E 52 50 40    >                db      "RP@"
1321+ E241             >len_NFA         defl    $ - temp_NFA
1321+ E241             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1321+ E23E             >
1321+ E23E 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1321+ E23F 52 50 40    >                db      "RP@"               // name string in 7-bit ascii, but
1321+ E242             >                org     $-1                 // alter last byte of Name just above to set
1321+ E241 C0          >                db      {b $} | END_BIT     // msb as name end
1321+ E242             >
1321+ E242 36 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1321+ E244             >Prev_Ptr        defl    Heap_Ptr
1321+ E244             >
1321+ E244             >mirror_Ptr      defl    $
1321+ E244             >
1321+ E244 47 68       >                dw      Dict_Ptr + 2        // xt
1321+ E246             >Heap_Ptr        defl    $ - $E000           // save current HP
1321+ E246             >
1321+ E246             >Current_HP      defl  $ - $E000             // used to set HP once!
1321+ E246             >
1321+ E246             >//              ______________________________________________________________________
1321+ E246             >//              Dictionary part
1321+ E246             >
1321+ E246             >                org     Dict_Ptr
1321+ 6845             >
1321+ 6845 44 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1321+ 6847             >
1321+ 6847             >RPFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1321+ 6847 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1321+ 6847 ~           >
1321+ 6847 ~           >
1321+ 6847             >                endif           ; ok        // for other definitions it "points" the correct handler
1321+ 6847             >                // Use of "; ok" to suppress "warning[fwdref]"
1321+ 6847             >
1321+ 6847             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1322+ 6847
1323+ 6847                              // *** ldhlrp
1324+ 6847                              // *** ex      de, hl
1325+ 6847 D5                           push de
1326+ 6848
1327+ 6848                              next
1327+ 6848 DD E9       >                jp      (ix)
1328+ 684A
1329+ 684A              //  ______________________________________________________________________
1330+ 684A              //
1331+ 684A              // rp!      a --
1332+ 684A              // restore RP to the initial value passed
1333+ 684A              // normally it is R0 @, i.e. the word at offset 8 of user variabiles area.
1334+ 684A                              New_Def RPSTORE, "RP!", is_code, is_normal
1334+ 684A             >
1334+ 684A             >Dict_Ptr        defl    $
1334+ 684A             >
1334+ 684A             >//              ______________________________________________________________________
1334+ 684A             >//              Heap part
1334+ 684A             >
1334+ 684A             >
1334+ 684A             >                org     (Heap_Ptr & $1FFF) + $E000
1334+ E246             >
1334+ E246             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1334+ E246             >Latest_Definition defl  Heap_Ptr
1334+ E246             >
1334+ E246             >                // dummy db directives used to calculate length of namec
1334+ E246 52 50 21    >                db      "RP!"
1334+ E249             >len_NFA         defl    $ - temp_NFA
1334+ E249             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1334+ E246             >
1334+ E246 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1334+ E247 52 50 21    >                db      "RP!"               // name string in 7-bit ascii, but
1334+ E24A             >                org     $-1                 // alter last byte of Name just above to set
1334+ E249 A1          >                db      {b $} | END_BIT     // msb as name end
1334+ E24A             >
1334+ E24A 3E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1334+ E24C             >Prev_Ptr        defl    Heap_Ptr
1334+ E24C             >
1334+ E24C             >mirror_Ptr      defl    $
1334+ E24C             >
1334+ E24C 4C 68       >                dw      Dict_Ptr + 2        // xt
1334+ E24E             >Heap_Ptr        defl    $ - $E000           // save current HP
1334+ E24E             >
1334+ E24E             >Current_HP      defl  $ - $E000             // used to set HP once!
1334+ E24E             >
1334+ E24E             >//              ______________________________________________________________________
1334+ E24E             >//              Dictionary part
1334+ E24E             >
1334+ E24E             >                org     Dict_Ptr
1334+ 684A             >
1334+ 684A 4C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1334+ 684C             >
1334+ 684C             >RPSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1334+ 684C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1334+ 684C ~           >
1334+ 684C ~           >
1334+ 684C             >                endif           ; ok        // for other definitions it "points" the correct handler
1334+ 684C             >                // Use of "; ok" to suppress "warning[fwdref]"
1334+ 684C             >
1334+ 684C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1335+ 684C D1                           pop     de
1336+ 684D                              // *** ex      de, hl
1337+ 684D                              // *** ldrphl
1338+ 684D
1339+ 684D                              next
1339+ 684D DD E9       >                jp      (ix)
1340+ 684F
1341+ 684F              //  ______________________________________________________________________
1342+ 684F              //
1343+ 684F              // exit       --
1344+ 684F              // exits back to the caller word
1345+ 684F                              New_Def EXIT, "EXIT", is_code, is_normal
1345+ 684F             >
1345+ 684F             >Dict_Ptr        defl    $
1345+ 684F             >
1345+ 684F             >//              ______________________________________________________________________
1345+ 684F             >//              Heap part
1345+ 684F             >
1345+ 684F             >
1345+ 684F             >                org     (Heap_Ptr & $1FFF) + $E000
1345+ E24E             >
1345+ E24E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1345+ E24E             >Latest_Definition defl  Heap_Ptr
1345+ E24E             >
1345+ E24E             >                // dummy db directives used to calculate length of namec
1345+ E24E 45 58 49 54 >                db      "EXIT"
1345+ E252             >len_NFA         defl    $ - temp_NFA
1345+ E252             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1345+ E24E             >
1345+ E24E 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1345+ E24F 45 58 49 54 >                db      "EXIT"               // name string in 7-bit ascii, but
1345+ E253             >                org     $-1                 // alter last byte of Name just above to set
1345+ E252 D4          >                db      {b $} | END_BIT     // msb as name end
1345+ E253             >
1345+ E253 46 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1345+ E255             >Prev_Ptr        defl    Heap_Ptr
1345+ E255             >
1345+ E255             >mirror_Ptr      defl    $
1345+ E255             >
1345+ E255 51 68       >                dw      Dict_Ptr + 2        // xt
1345+ E257             >Heap_Ptr        defl    $ - $E000           // save current HP
1345+ E257             >
1345+ E257             >Current_HP      defl  $ - $E000             // used to set HP once!
1345+ E257             >
1345+ E257             >//              ______________________________________________________________________
1345+ E257             >//              Dictionary part
1345+ E257             >
1345+ E257             >                org     Dict_Ptr
1345+ 684F             >
1345+ 684F 55 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1345+ 6851             >
1345+ 6851             >EXIT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1345+ 6851 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1345+ 6851 ~           >
1345+ 6851 ~           >
1345+ 6851             >                endif           ; ok        // for other definitions it "points" the correct handler
1345+ 6851             >                // Use of "; ok" to suppress "warning[fwdref]"
1345+ 6851             >
1345+ 6851             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1346+ 6851 EB                           ex      de, hl
1347+ 6852                              // *** ldhlrp                      // Get Return Stack Pointer
1348+ 6852 4E                           ld      c, (hl)             // pop Instruction Pointer
1349+ 6853 23                           inc     hl                  // from Return Stack
1350+ 6854 46                           ld      b, (hl)
1351+ 6855 23                           inc     hl
1352+ 6856                              // *** ldrphl                      // Set Return Stack Pointer
1353+ 6856 EB                           ex      de, hl
1354+ 6857                              next
1354+ 6857 DD E9       >                jp      (ix)
1355+ 6859
1356+ 6859              //  ______________________________________________________________________
1357+ 6859              //
1358+ 6859              // lastl      --
1359+ 6859              // exits back to the caller word
1360+ 6859              //              New_Def EXIT, "LASTL", is_code, is_normal
1361+ 6859              //              push    de
1362+ 6859              //              ex      de, hl //**
1363+ 6859              //              // *** ldhlrp                      // Get Return Stack Pointer
1364+ 6859              //              ld      e, (hl)             // pop Instruction Pointer
1365+ 6859              //              inc     hl                  // from Return Stack
1366+ 6859              //              ld      d, (hl)
1367+ 6859              //              inc     hl
1368+ 6859              //              ld      (hl), e
1369+ 6859              //              inc     hl
1370+ 6859              //              ld      (hl), d
1371+ 6859              //              add     hl, -3
1372+ 6859              //              pop     de
1373+ 6859              //              next
1374+ 6859
1375+ 6859              //  ______________________________________________________________________
1376+ 6859              //
1377+ 6859              // >r      n --
1378+ 6859              // pop from calculator-stack and push into return-stack
1379+ 6859                              New_Def TO_R, ">R", is_code, is_normal
1379+ 6859             >
1379+ 6859             >Dict_Ptr        defl    $
1379+ 6859             >
1379+ 6859             >//              ______________________________________________________________________
1379+ 6859             >//              Heap part
1379+ 6859             >
1379+ 6859             >
1379+ 6859             >                org     (Heap_Ptr & $1FFF) + $E000
1379+ E257             >
1379+ E257             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1379+ E257             >Latest_Definition defl  Heap_Ptr
1379+ E257             >
1379+ E257             >                // dummy db directives used to calculate length of namec
1379+ E257 3E 52       >                db      ">R"
1379+ E259             >len_NFA         defl    $ - temp_NFA
1379+ E259             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1379+ E257             >
1379+ E257 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1379+ E258 3E 52       >                db      ">R"               // name string in 7-bit ascii, but
1379+ E25A             >                org     $-1                 // alter last byte of Name just above to set
1379+ E259 D2          >                db      {b $} | END_BIT     // msb as name end
1379+ E25A             >
1379+ E25A 4E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1379+ E25C             >Prev_Ptr        defl    Heap_Ptr
1379+ E25C             >
1379+ E25C             >mirror_Ptr      defl    $
1379+ E25C             >
1379+ E25C 5B 68       >                dw      Dict_Ptr + 2        // xt
1379+ E25E             >Heap_Ptr        defl    $ - $E000           // save current HP
1379+ E25E             >
1379+ E25E             >Current_HP      defl  $ - $E000             // used to set HP once!
1379+ E25E             >
1379+ E25E             >//              ______________________________________________________________________
1379+ E25E             >//              Dictionary part
1379+ E25E             >
1379+ E25E             >                org     Dict_Ptr
1379+ 6859             >
1379+ 6859 5C 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1379+ 685B             >
1379+ 685B             >TO_R:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1379+ 685B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1379+ 685B ~           >
1379+ 685B ~           >
1379+ 685B             >                endif           ; ok        // for other definitions it "points" the correct handler
1379+ 685B             >                // Use of "; ok" to suppress "warning[fwdref]"
1379+ 685B             >
1379+ 685B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1380+ 685B E1                           pop     hl
1381+ 685C EB                           ex      de, hl //**
1382+ 685D                              // *** ldhlrp
1383+ 685D 2B                           dec     hl
1384+ 685E 72                           ld      (hl), d             // store current TOS
1385+ 685F 2B                           dec     hl                  // to Return Stack
1386+ 6860 73                           ld      (hl), e
1387+ 6861                              // *** ldrphl
1388+ 6861 EB                           ex      de, hl //**
1389+ 6862                              next
1389+ 6862 DD E9       >                jp      (ix)
1390+ 6864
1391+ 6864              //  ______________________________________________________________________
1392+ 6864              //
1393+ 6864              // r>      -- n
1394+ 6864              // pop from return-stack and push into calculator-stack
1395+ 6864                              New_Def R_TO, "R>", is_code, is_normal
1395+ 6864             >
1395+ 6864             >Dict_Ptr        defl    $
1395+ 6864             >
1395+ 6864             >//              ______________________________________________________________________
1395+ 6864             >//              Heap part
1395+ 6864             >
1395+ 6864             >
1395+ 6864             >                org     (Heap_Ptr & $1FFF) + $E000
1395+ E25E             >
1395+ E25E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1395+ E25E             >Latest_Definition defl  Heap_Ptr
1395+ E25E             >
1395+ E25E             >                // dummy db directives used to calculate length of namec
1395+ E25E 52 3E       >                db      "R>"
1395+ E260             >len_NFA         defl    $ - temp_NFA
1395+ E260             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1395+ E25E             >
1395+ E25E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1395+ E25F 52 3E       >                db      "R>"               // name string in 7-bit ascii, but
1395+ E261             >                org     $-1                 // alter last byte of Name just above to set
1395+ E260 BE          >                db      {b $} | END_BIT     // msb as name end
1395+ E261             >
1395+ E261 57 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1395+ E263             >Prev_Ptr        defl    Heap_Ptr
1395+ E263             >
1395+ E263             >mirror_Ptr      defl    $
1395+ E263             >
1395+ E263 66 68       >                dw      Dict_Ptr + 2        // xt
1395+ E265             >Heap_Ptr        defl    $ - $E000           // save current HP
1395+ E265             >
1395+ E265             >Current_HP      defl  $ - $E000             // used to set HP once!
1395+ E265             >
1395+ E265             >//              ______________________________________________________________________
1395+ E265             >//              Dictionary part
1395+ E265             >
1395+ E265             >                org     Dict_Ptr
1395+ 6864             >
1395+ 6864 63 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1395+ 6866             >
1395+ 6866             >R_TO:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1395+ 6866 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1395+ 6866 ~           >
1395+ 6866 ~           >
1395+ 6866             >                endif           ; ok        // for other definitions it "points" the correct handler
1395+ 6866             >                // Use of "; ok" to suppress "warning[fwdref]"
1395+ 6866             >
1395+ 6866             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1396+ 6866
1397+ 6866 EB                           ex      de, hl //**
1398+ 6867                              // *** ldhlrp
1399+ 6867 5E                           ld      e, (hl)             // retrieve from Return Stack
1400+ 6868 23                           inc     hl
1401+ 6869 56                           ld      d, (hl)
1402+ 686A 23                           inc     hl
1403+ 686B                              // *** ldrphl
1404+ 686B EB                           ex      de, hl //**
1405+ 686C E5                           push    hl
1406+ 686D                              next
1406+ 686D DD E9       >                jp      (ix)
1407+ 686F
1408+ 686F              //  ______________________________________________________________________
1409+ 686F              //
1410+ 686F              // r@           -- n
1411+ 686F              // return on top of stack the value of top of return-stack
1412+ 686F              // Since this is the same as I, we alter R's CFA to jump there
1413+ 686F                              New_Def R_OP, "R@", is_code, is_normal
1413+ 686F             >
1413+ 686F             >Dict_Ptr        defl    $
1413+ 686F             >
1413+ 686F             >//              ______________________________________________________________________
1413+ 686F             >//              Heap part
1413+ 686F             >
1413+ 686F             >
1413+ 686F             >                org     (Heap_Ptr & $1FFF) + $E000
1413+ E265             >
1413+ E265             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1413+ E265             >Latest_Definition defl  Heap_Ptr
1413+ E265             >
1413+ E265             >                // dummy db directives used to calculate length of namec
1413+ E265 52 40       >                db      "R@"
1413+ E267             >len_NFA         defl    $ - temp_NFA
1413+ E267             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1413+ E265             >
1413+ E265 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1413+ E266 52 40       >                db      "R@"               // name string in 7-bit ascii, but
1413+ E268             >                org     $-1                 // alter last byte of Name just above to set
1413+ E267 C0          >                db      {b $} | END_BIT     // msb as name end
1413+ E268             >
1413+ E268 5E 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1413+ E26A             >Prev_Ptr        defl    Heap_Ptr
1413+ E26A             >
1413+ E26A             >mirror_Ptr      defl    $
1413+ E26A             >
1413+ E26A 71 68       >                dw      Dict_Ptr + 2        // xt
1413+ E26C             >Heap_Ptr        defl    $ - $E000           // save current HP
1413+ E26C             >
1413+ E26C             >Current_HP      defl  $ - $E000             // used to set HP once!
1413+ E26C             >
1413+ E26C             >//              ______________________________________________________________________
1413+ E26C             >//              Dictionary part
1413+ E26C             >
1413+ E26C             >                org     Dict_Ptr
1413+ 686F             >
1413+ 686F 6A 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1413+ 6871             >
1413+ 6871             >R_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1413+ 6871 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1413+ 6871 ~           >
1413+ 6871 ~           >
1413+ 6871             >                endif           ; ok        // for other definitions it "points" the correct handler
1413+ 6871             >                // Use of "; ok" to suppress "warning[fwdref]"
1413+ 6871             >
1413+ 6871             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1414+ 6871                          //  Behave  I_Ptr
1415+ 6871 C3 34 64                     jp      I_Ptr
1416+ 6874
1417+ 6874              //  ______________________________________________________________________
1418+ 6874              //
1419+ 6874              // r            -- n
1420+ 6874              // return on top of stack the value of top of return-stack
1421+ 6874              // Since this is the same as I, we alter R's CFA to jump there
1422+ 6874              //              New_Def R_OLD, "R", is_code, is_normal
1423+ 6874              //              jp      I_Ptr
1424+ 6874
1425+ 6874              //  ______________________________________________________________________
1426+ 6874              //
1427+ 6874              // 0=           n -- f
1428+ 6874              // true (non zero) if n is zero, false (0) elsewere
1429+ 6874                              New_Def ZEQUAL, "0=", is_code, is_normal
1429+ 6874             >
1429+ 6874             >Dict_Ptr        defl    $
1429+ 6874             >
1429+ 6874             >//              ______________________________________________________________________
1429+ 6874             >//              Heap part
1429+ 6874             >
1429+ 6874             >
1429+ 6874             >                org     (Heap_Ptr & $1FFF) + $E000
1429+ E26C             >
1429+ E26C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1429+ E26C             >Latest_Definition defl  Heap_Ptr
1429+ E26C             >
1429+ E26C             >                // dummy db directives used to calculate length of namec
1429+ E26C 30 3D       >                db      "0="
1429+ E26E             >len_NFA         defl    $ - temp_NFA
1429+ E26E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1429+ E26C             >
1429+ E26C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1429+ E26D 30 3D       >                db      "0="               // name string in 7-bit ascii, but
1429+ E26F             >                org     $-1                 // alter last byte of Name just above to set
1429+ E26E BD          >                db      {b $} | END_BIT     // msb as name end
1429+ E26F             >
1429+ E26F 65 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1429+ E271             >Prev_Ptr        defl    Heap_Ptr
1429+ E271             >
1429+ E271             >mirror_Ptr      defl    $
1429+ E271             >
1429+ E271 76 68       >                dw      Dict_Ptr + 2        // xt
1429+ E273             >Heap_Ptr        defl    $ - $E000           // save current HP
1429+ E273             >
1429+ E273             >Current_HP      defl  $ - $E000             // used to set HP once!
1429+ E273             >
1429+ E273             >//              ______________________________________________________________________
1429+ E273             >//              Dictionary part
1429+ E273             >
1429+ E273             >                org     Dict_Ptr
1429+ 6874             >
1429+ 6874 71 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1429+ 6876             >
1429+ 6876             >ZEQUAL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1429+ 6876 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1429+ 6876 ~           >
1429+ 6876 ~           >
1429+ 6876             >                endif           ; ok        // for other definitions it "points" the correct handler
1429+ 6876             >                // Use of "; ok" to suppress "warning[fwdref]"
1429+ 6876             >
1429+ 6876             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1430+ 6876              Zero_Equal:
1431+ 6876 E1                           pop     hl
1432+ 6877 7D                           ld      a, l
1433+ 6878 B4                           or      h
1434+ 6879 20 01                        jr      nz, ZEqual_Skip
1435+ 687B 3F                               ccf
1436+ 687C              ZEqual_Skip:
1437+ 687C ED 62                        sbc     hl, hl
1438+ 687E                              psh1
1438+ 687E E5          >                push    hl
1438+ 687F DD E9       >                jp      (ix)
1439+ 6881
1440+ 6881              //  ______________________________________________________________________
1441+ 6881              //
1442+ 6881              // not         a1 -- a2
1443+ 6881              // increment by 2 top of stack
1444+ 6881                              New_Def NOT_OP, "NOT", is_code, is_normal
1444+ 6881             >
1444+ 6881             >Dict_Ptr        defl    $
1444+ 6881             >
1444+ 6881             >//              ______________________________________________________________________
1444+ 6881             >//              Heap part
1444+ 6881             >
1444+ 6881             >
1444+ 6881             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E273             >
1444+ E273             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E273             >Latest_Definition defl  Heap_Ptr
1444+ E273             >
1444+ E273             >                // dummy db directives used to calculate length of namec
1444+ E273 4E 4F 54    >                db      "NOT"
1444+ E276             >len_NFA         defl    $ - temp_NFA
1444+ E276             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E273             >
1444+ E273 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E274 4E 4F 54    >                db      "NOT"               // name string in 7-bit ascii, but
1444+ E277             >                org     $-1                 // alter last byte of Name just above to set
1444+ E276 D4          >                db      {b $} | END_BIT     // msb as name end
1444+ E277             >
1444+ E277 6C 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E279             >Prev_Ptr        defl    Heap_Ptr
1444+ E279             >
1444+ E279             >mirror_Ptr      defl    $
1444+ E279             >
1444+ E279 83 68       >                dw      Dict_Ptr + 2        // xt
1444+ E27B             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E27B             >
1444+ E27B             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E27B             >
1444+ E27B             >//              ______________________________________________________________________
1444+ E27B             >//              Dictionary part
1444+ E27B             >
1444+ E27B             >                org     Dict_Ptr
1444+ 6881             >
1444+ 6881 79 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 6883             >
1444+ 6883             >NOT_OP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 6883 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1444+ 6883 ~           >
1444+ 6883 ~           >
1444+ 6883             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 6883             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 6883             >
1444+ 6883             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 6883                          //  Behave  Zero_Equal
1446+ 6883 18 F1                        jr      Zero_Equal
1447+ 6885
1448+ 6885              //  ______________________________________________________________________
1449+ 6885              //
1450+ 6885              // 0<           n -- f
1451+ 6885              // true (non zero) if n is less than zero, false (0) elsewere
1452+ 6885                              New_Def ZLESS, "0<", is_code, is_normal
1452+ 6885             >
1452+ 6885             >Dict_Ptr        defl    $
1452+ 6885             >
1452+ 6885             >//              ______________________________________________________________________
1452+ 6885             >//              Heap part
1452+ 6885             >
1452+ 6885             >
1452+ 6885             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E27B             >
1452+ E27B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E27B             >Latest_Definition defl  Heap_Ptr
1452+ E27B             >
1452+ E27B             >                // dummy db directives used to calculate length of namec
1452+ E27B 30 3C       >                db      "0<"
1452+ E27D             >len_NFA         defl    $ - temp_NFA
1452+ E27D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E27B             >
1452+ E27B 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E27C 30 3C       >                db      "0<"               // name string in 7-bit ascii, but
1452+ E27E             >                org     $-1                 // alter last byte of Name just above to set
1452+ E27D BC          >                db      {b $} | END_BIT     // msb as name end
1452+ E27E             >
1452+ E27E 73 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E280             >Prev_Ptr        defl    Heap_Ptr
1452+ E280             >
1452+ E280             >mirror_Ptr      defl    $
1452+ E280             >
1452+ E280 87 68       >                dw      Dict_Ptr + 2        // xt
1452+ E282             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E282             >
1452+ E282             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E282             >
1452+ E282             >//              ______________________________________________________________________
1452+ E282             >//              Dictionary part
1452+ E282             >
1452+ E282             >                org     Dict_Ptr
1452+ 6885             >
1452+ 6885 80 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 6887             >
1452+ 6887             >ZLESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 6887 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1452+ 6887 ~           >
1452+ 6887 ~           >
1452+ 6887             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 6887             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 6887             >
1452+ 6887             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 6887 E1                           pop     hl
1454+ 6888 29                           add     hl, hl
1455+ 6889 ED 62                        sbc     hl, hl
1456+ 688B                              psh1
1456+ 688B E5          >                push    hl
1456+ 688C DD E9       >                jp      (ix)
1457+ 688E
1458+ 688E              //  ______________________________________________________________________
1459+ 688E              //
1460+ 688E              // 0>           n -- f
1461+ 688E              // true (non zero) if n is less than zero, false (0) elsewere
1462+ 688E                              New_Def ZGREATER, "0>", is_code, is_normal
1462+ 688E             >
1462+ 688E             >Dict_Ptr        defl    $
1462+ 688E             >
1462+ 688E             >//              ______________________________________________________________________
1462+ 688E             >//              Heap part
1462+ 688E             >
1462+ 688E             >
1462+ 688E             >                org     (Heap_Ptr & $1FFF) + $E000
1462+ E282             >
1462+ E282             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1462+ E282             >Latest_Definition defl  Heap_Ptr
1462+ E282             >
1462+ E282             >                // dummy db directives used to calculate length of namec
1462+ E282 30 3E       >                db      "0>"
1462+ E284             >len_NFA         defl    $ - temp_NFA
1462+ E284             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1462+ E282             >
1462+ E282 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1462+ E283 30 3E       >                db      "0>"               // name string in 7-bit ascii, but
1462+ E285             >                org     $-1                 // alter last byte of Name just above to set
1462+ E284 BE          >                db      {b $} | END_BIT     // msb as name end
1462+ E285             >
1462+ E285 7B 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1462+ E287             >Prev_Ptr        defl    Heap_Ptr
1462+ E287             >
1462+ E287             >mirror_Ptr      defl    $
1462+ E287             >
1462+ E287 90 68       >                dw      Dict_Ptr + 2        // xt
1462+ E289             >Heap_Ptr        defl    $ - $E000           // save current HP
1462+ E289             >
1462+ E289             >Current_HP      defl  $ - $E000             // used to set HP once!
1462+ E289             >
1462+ E289             >//              ______________________________________________________________________
1462+ E289             >//              Dictionary part
1462+ E289             >
1462+ E289             >                org     Dict_Ptr
1462+ 688E             >
1462+ 688E 87 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1462+ 6890             >
1462+ 6890             >ZGREATER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1462+ 6890 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1462+ 6890 ~           >
1462+ 6890 ~           >
1462+ 6890             >                endif           ; ok        // for other definitions it "points" the correct handler
1462+ 6890             >                // Use of "; ok" to suppress "warning[fwdref]"
1462+ 6890             >
1462+ 6890             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1463+ 6890 E1                           pop     hl
1464+ 6891 7D                           ld      a, l
1465+ 6892 B4                           or      h
1466+ 6893 28 04                        jr      z, ZGreater_Skip
1467+ 6895 29                           add     hl, hl
1468+ 6896 3F                           ccf
1469+ 6897 ED 62                        sbc     hl, hl
1470+ 6899              ZGreater_Skip:
1471+ 6899                              psh1
1471+ 6899 E5          >                push    hl
1471+ 689A DD E9       >                jp      (ix)
1472+ 689C
1473+ 689C              //  ______________________________________________________________________
1474+ 689C              //
1475+ 689C              // +            n1 n2 -- n3
1476+ 689C              // returns the unsigned sum of two top values
1477+ 689C                              New_Def PLUS, "+", is_code, is_normal
1477+ 689C             >
1477+ 689C             >Dict_Ptr        defl    $
1477+ 689C             >
1477+ 689C             >//              ______________________________________________________________________
1477+ 689C             >//              Heap part
1477+ 689C             >
1477+ 689C             >
1477+ 689C             >                org     (Heap_Ptr & $1FFF) + $E000
1477+ E289             >
1477+ E289             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1477+ E289             >Latest_Definition defl  Heap_Ptr
1477+ E289             >
1477+ E289             >                // dummy db directives used to calculate length of namec
1477+ E289 2B          >                db      "+"
1477+ E28A             >len_NFA         defl    $ - temp_NFA
1477+ E28A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1477+ E289             >
1477+ E289 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1477+ E28A 2B          >                db      "+"               // name string in 7-bit ascii, but
1477+ E28B             >                org     $-1                 // alter last byte of Name just above to set
1477+ E28A AB          >                db      {b $} | END_BIT     // msb as name end
1477+ E28B             >
1477+ E28B 82 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1477+ E28D             >Prev_Ptr        defl    Heap_Ptr
1477+ E28D             >
1477+ E28D             >mirror_Ptr      defl    $
1477+ E28D             >
1477+ E28D 9E 68       >                dw      Dict_Ptr + 2        // xt
1477+ E28F             >Heap_Ptr        defl    $ - $E000           // save current HP
1477+ E28F             >
1477+ E28F             >Current_HP      defl  $ - $E000             // used to set HP once!
1477+ E28F             >
1477+ E28F             >//              ______________________________________________________________________
1477+ E28F             >//              Dictionary part
1477+ E28F             >
1477+ E28F             >                org     Dict_Ptr
1477+ 689C             >
1477+ 689C 8D 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1477+ 689E             >
1477+ 689E             >PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1477+ 689E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1477+ 689E ~           >
1477+ 689E ~           >
1477+ 689E             >                endif           ; ok        // for other definitions it "points" the correct handler
1477+ 689E             >                // Use of "; ok" to suppress "warning[fwdref]"
1477+ 689E             >
1477+ 689E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1478+ 689E D9                           exx
1479+ 689F E1                           pop     hl
1480+ 68A0 D1                           pop     de
1481+ 68A1 19                           add     hl, de
1482+ 68A2 E5                           push    hl
1483+ 68A3 D9                           exx
1484+ 68A4                              next
1484+ 68A4 DD E9       >                jp      (ix)
1485+ 68A6
1486+ 68A6
1487+ 68A6              //  ______________________________________________________________________
1488+ 68A6              //
1489+ 68A6              // d+           d1 d2 -- d3
1490+ 68A6              // returns the unsigned sum of two top double-numbers
1491+ 68A6              //      d2  d1
1492+ 68A6              //      h l h l
1493+ 68A6              // SP   LHEDLHED
1494+ 68A6              // SP  +01234567
1495+ 68A6                              New_Def DPLUS, "D+", is_code, is_normal
1495+ 68A6             >
1495+ 68A6             >Dict_Ptr        defl    $
1495+ 68A6             >
1495+ 68A6             >//              ______________________________________________________________________
1495+ 68A6             >//              Heap part
1495+ 68A6             >
1495+ 68A6             >
1495+ 68A6             >                org     (Heap_Ptr & $1FFF) + $E000
1495+ E28F             >
1495+ E28F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1495+ E28F             >Latest_Definition defl  Heap_Ptr
1495+ E28F             >
1495+ E28F             >                // dummy db directives used to calculate length of namec
1495+ E28F 44 2B       >                db      "D+"
1495+ E291             >len_NFA         defl    $ - temp_NFA
1495+ E291             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1495+ E28F             >
1495+ E28F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1495+ E290 44 2B       >                db      "D+"               // name string in 7-bit ascii, but
1495+ E292             >                org     $-1                 // alter last byte of Name just above to set
1495+ E291 AB          >                db      {b $} | END_BIT     // msb as name end
1495+ E292             >
1495+ E292 89 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1495+ E294             >Prev_Ptr        defl    Heap_Ptr
1495+ E294             >
1495+ E294             >mirror_Ptr      defl    $
1495+ E294             >
1495+ E294 A8 68       >                dw      Dict_Ptr + 2        // xt
1495+ E296             >Heap_Ptr        defl    $ - $E000           // save current HP
1495+ E296             >
1495+ E296             >Current_HP      defl  $ - $E000             // used to set HP once!
1495+ E296             >
1495+ E296             >//              ______________________________________________________________________
1495+ E296             >//              Dictionary part
1495+ E296             >
1495+ E296             >                org     Dict_Ptr
1495+ 68A6             >
1495+ 68A6 94 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1495+ 68A8             >
1495+ 68A8             >DPLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1495+ 68A8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1495+ 68A8 ~           >
1495+ 68A8 ~           >
1495+ 68A8             >                endif           ; ok        // for other definitions it "points" the correct handler
1495+ 68A8             >                // Use of "; ok" to suppress "warning[fwdref]"
1495+ 68A8             >
1495+ 68A8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1496+ 68A8
1497+ 68A8 D9                           exx
1498+ 68A9 C1                           pop     bc                  // bc := d2.H
1499+ 68AA D1                           pop     de                  // hl := d2.L
1500+ 68AB E1                           pop     hl                  // d1.H
1501+ 68AC E3                           ex      (sp), hl            // d1.L
1502+ 68AD 19                           add     hl, de              // hl := d2.L + d1.L
1503+ 68AE E3                           ex      (sp), hl            // d1.H
1504+ 68AF ED 4A                        adc     hl, bc              // d1.H + d2.H
1505+ 68B1 E5                           push    hl
1506+ 68B2 D9                           exx
1507+ 68B3                              next
1507+ 68B3 DD E9       >                jp      (ix)
1508+ 68B5
1509+ 68B5              //  ______________________________________________________________________
1510+ 68B5              //
1511+ 68B5              // 1+           n1 -- n2
1512+ 68B5              // increment by 1 top of stack
1513+ 68B5                              New_Def ONE_PLUS, "1+", is_code, is_normal
1513+ 68B5             >
1513+ 68B5             >Dict_Ptr        defl    $
1513+ 68B5             >
1513+ 68B5             >//              ______________________________________________________________________
1513+ 68B5             >//              Heap part
1513+ 68B5             >
1513+ 68B5             >
1513+ 68B5             >                org     (Heap_Ptr & $1FFF) + $E000
1513+ E296             >
1513+ E296             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1513+ E296             >Latest_Definition defl  Heap_Ptr
1513+ E296             >
1513+ E296             >                // dummy db directives used to calculate length of namec
1513+ E296 31 2B       >                db      "1+"
1513+ E298             >len_NFA         defl    $ - temp_NFA
1513+ E298             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1513+ E296             >
1513+ E296 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1513+ E297 31 2B       >                db      "1+"               // name string in 7-bit ascii, but
1513+ E299             >                org     $-1                 // alter last byte of Name just above to set
1513+ E298 AB          >                db      {b $} | END_BIT     // msb as name end
1513+ E299             >
1513+ E299 8F 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1513+ E29B             >Prev_Ptr        defl    Heap_Ptr
1513+ E29B             >
1513+ E29B             >mirror_Ptr      defl    $
1513+ E29B             >
1513+ E29B B7 68       >                dw      Dict_Ptr + 2        // xt
1513+ E29D             >Heap_Ptr        defl    $ - $E000           // save current HP
1513+ E29D             >
1513+ E29D             >Current_HP      defl  $ - $E000             // used to set HP once!
1513+ E29D             >
1513+ E29D             >//              ______________________________________________________________________
1513+ E29D             >//              Dictionary part
1513+ E29D             >
1513+ E29D             >                org     Dict_Ptr
1513+ 68B5             >
1513+ 68B5 9B 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1513+ 68B7             >
1513+ 68B7             >ONE_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1513+ 68B7 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1513+ 68B7 ~           >
1513+ 68B7 ~           >
1513+ 68B7             >                endif           ; ok        // for other definitions it "points" the correct handler
1513+ 68B7             >                // Use of "; ok" to suppress "warning[fwdref]"
1513+ 68B7             >
1513+ 68B7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1514+ 68B7 E1                           pop     hl
1515+ 68B8 23                           inc     hl
1516+ 68B9
1517+ 68B9                              psh1
1517+ 68B9 E5          >                push    hl
1517+ 68BA DD E9       >                jp      (ix)
1518+ 68BC
1519+ 68BC              //  ______________________________________________________________________
1520+ 68BC              //
1521+ 68BC              // 1-           n1 -- n2
1522+ 68BC              // decrement by 1 top of stack
1523+ 68BC                              New_Def ONE_SUBTRACT, "1-", is_code, is_normal
1523+ 68BC             >
1523+ 68BC             >Dict_Ptr        defl    $
1523+ 68BC             >
1523+ 68BC             >//              ______________________________________________________________________
1523+ 68BC             >//              Heap part
1523+ 68BC             >
1523+ 68BC             >
1523+ 68BC             >                org     (Heap_Ptr & $1FFF) + $E000
1523+ E29D             >
1523+ E29D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1523+ E29D             >Latest_Definition defl  Heap_Ptr
1523+ E29D             >
1523+ E29D             >                // dummy db directives used to calculate length of namec
1523+ E29D 31 2D       >                db      "1-"
1523+ E29F             >len_NFA         defl    $ - temp_NFA
1523+ E29F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1523+ E29D             >
1523+ E29D 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1523+ E29E 31 2D       >                db      "1-"               // name string in 7-bit ascii, but
1523+ E2A0             >                org     $-1                 // alter last byte of Name just above to set
1523+ E29F AD          >                db      {b $} | END_BIT     // msb as name end
1523+ E2A0             >
1523+ E2A0 96 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1523+ E2A2             >Prev_Ptr        defl    Heap_Ptr
1523+ E2A2             >
1523+ E2A2             >mirror_Ptr      defl    $
1523+ E2A2             >
1523+ E2A2 BE 68       >                dw      Dict_Ptr + 2        // xt
1523+ E2A4             >Heap_Ptr        defl    $ - $E000           // save current HP
1523+ E2A4             >
1523+ E2A4             >Current_HP      defl  $ - $E000             // used to set HP once!
1523+ E2A4             >
1523+ E2A4             >//              ______________________________________________________________________
1523+ E2A4             >//              Dictionary part
1523+ E2A4             >
1523+ E2A4             >                org     Dict_Ptr
1523+ 68BC             >
1523+ 68BC A2 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1523+ 68BE             >
1523+ 68BE             >ONE_SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1523+ 68BE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1523+ 68BE ~           >
1523+ 68BE ~           >
1523+ 68BE             >                endif           ; ok        // for other definitions it "points" the correct handler
1523+ 68BE             >                // Use of "; ok" to suppress "warning[fwdref]"
1523+ 68BE             >
1523+ 68BE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1524+ 68BE E1                           pop     hl
1525+ 68BF 2B                           dec     hl
1526+ 68C0
1527+ 68C0                              psh1
1527+ 68C0 E5          >                push    hl
1527+ 68C1 DD E9       >                jp      (ix)
1528+ 68C3
1529+ 68C3              //  ______________________________________________________________________
1530+ 68C3              //
1531+ 68C3              // 2+           n1 -- n2
1532+ 68C3              // increment by 2 top of stack
1533+ 68C3                              New_Def TWO_PLUS, "2+", is_code, is_normal
1533+ 68C3             >
1533+ 68C3             >Dict_Ptr        defl    $
1533+ 68C3             >
1533+ 68C3             >//              ______________________________________________________________________
1533+ 68C3             >//              Heap part
1533+ 68C3             >
1533+ 68C3             >
1533+ 68C3             >                org     (Heap_Ptr & $1FFF) + $E000
1533+ E2A4             >
1533+ E2A4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1533+ E2A4             >Latest_Definition defl  Heap_Ptr
1533+ E2A4             >
1533+ E2A4             >                // dummy db directives used to calculate length of namec
1533+ E2A4 32 2B       >                db      "2+"
1533+ E2A6             >len_NFA         defl    $ - temp_NFA
1533+ E2A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1533+ E2A4             >
1533+ E2A4 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1533+ E2A5 32 2B       >                db      "2+"               // name string in 7-bit ascii, but
1533+ E2A7             >                org     $-1                 // alter last byte of Name just above to set
1533+ E2A6 AB          >                db      {b $} | END_BIT     // msb as name end
1533+ E2A7             >
1533+ E2A7 9D 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1533+ E2A9             >Prev_Ptr        defl    Heap_Ptr
1533+ E2A9             >
1533+ E2A9             >mirror_Ptr      defl    $
1533+ E2A9             >
1533+ E2A9 C5 68       >                dw      Dict_Ptr + 2        // xt
1533+ E2AB             >Heap_Ptr        defl    $ - $E000           // save current HP
1533+ E2AB             >
1533+ E2AB             >Current_HP      defl  $ - $E000             // used to set HP once!
1533+ E2AB             >
1533+ E2AB             >//              ______________________________________________________________________
1533+ E2AB             >//              Dictionary part
1533+ E2AB             >
1533+ E2AB             >                org     Dict_Ptr
1533+ 68C3             >
1533+ 68C3 A9 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1533+ 68C5             >
1533+ 68C5             >TWO_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1533+ 68C5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1533+ 68C5 ~           >
1533+ 68C5 ~           >
1533+ 68C5             >                endif           ; ok        // for other definitions it "points" the correct handler
1533+ 68C5             >                // Use of "; ok" to suppress "warning[fwdref]"
1533+ 68C5             >
1533+ 68C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1534+ 68C5              Two_Plus:
1535+ 68C5 E1                           pop     hl
1536+ 68C6 23                           inc     hl
1537+ 68C7 23                           inc     hl
1538+ 68C8
1539+ 68C8                              psh1
1539+ 68C8 E5          >                push    hl
1539+ 68C9 DD E9       >                jp      (ix)
1540+ 68CB
1541+ 68CB              //  ______________________________________________________________________
1542+ 68CB              //
1543+ 68CB              // cell+        a1 -- a2
1544+ 68CB              // increment by 2 top of stack
1545+ 68CB                              New_Def CELL_PLUS, "CELL+", is_code, is_normal
1545+ 68CB             >
1545+ 68CB             >Dict_Ptr        defl    $
1545+ 68CB             >
1545+ 68CB             >//              ______________________________________________________________________
1545+ 68CB             >//              Heap part
1545+ 68CB             >
1545+ 68CB             >
1545+ 68CB             >                org     (Heap_Ptr & $1FFF) + $E000
1545+ E2AB             >
1545+ E2AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1545+ E2AB             >Latest_Definition defl  Heap_Ptr
1545+ E2AB             >
1545+ E2AB             >                // dummy db directives used to calculate length of namec
1545+ E2AB 43 45 4C 4C >                db      "CELL+"
1545+ E2AF 2B          >
1545+ E2B0             >len_NFA         defl    $ - temp_NFA
1545+ E2B0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1545+ E2AB             >
1545+ E2AB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1545+ E2AC 43 45 4C 4C >                db      "CELL+"               // name string in 7-bit ascii, but
1545+ E2B0 2B          >
1545+ E2B1             >                org     $-1                 // alter last byte of Name just above to set
1545+ E2B0 AB          >                db      {b $} | END_BIT     // msb as name end
1545+ E2B1             >
1545+ E2B1 A4 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1545+ E2B3             >Prev_Ptr        defl    Heap_Ptr
1545+ E2B3             >
1545+ E2B3             >mirror_Ptr      defl    $
1545+ E2B3             >
1545+ E2B3 CD 68       >                dw      Dict_Ptr + 2        // xt
1545+ E2B5             >Heap_Ptr        defl    $ - $E000           // save current HP
1545+ E2B5             >
1545+ E2B5             >Current_HP      defl  $ - $E000             // used to set HP once!
1545+ E2B5             >
1545+ E2B5             >//              ______________________________________________________________________
1545+ E2B5             >//              Dictionary part
1545+ E2B5             >
1545+ E2B5             >                org     Dict_Ptr
1545+ 68CB             >
1545+ 68CB B3 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1545+ 68CD             >
1545+ 68CD             >CELL_PLUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1545+ 68CD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1545+ 68CD ~           >
1545+ 68CD ~           >
1545+ 68CD             >                endif           ; ok        // for other definitions it "points" the correct handler
1545+ 68CD             >                // Use of "; ok" to suppress "warning[fwdref]"
1545+ 68CD             >
1545+ 68CD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1546+ 68CD 18 F6                        jr      Two_Plus
1547+ 68CF
1548+ 68CF              //  ______________________________________________________________________
1549+ 68CF              //
1550+ 68CF              // align        a1 -- a2
1551+ 68CF              // align memory : not used
1552+ 68CF              //              New_Def ALIGN_ADDR, "ALIGN", is_code, is_normal
1553+ 68CF              //            next
1554+ 68CF
1555+ 68CF              //  ______________________________________________________________________
1556+ 68CF              //
1557+ 68CF              // cell-        a1 -- a2
1558+ 68CF              // decrement by 2 top of stack
1559+ 68CF                              New_Def CELL_MINUS, "CELL-", is_code, is_normal
1559+ 68CF             >
1559+ 68CF             >Dict_Ptr        defl    $
1559+ 68CF             >
1559+ 68CF             >//              ______________________________________________________________________
1559+ 68CF             >//              Heap part
1559+ 68CF             >
1559+ 68CF             >
1559+ 68CF             >                org     (Heap_Ptr & $1FFF) + $E000
1559+ E2B5             >
1559+ E2B5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1559+ E2B5             >Latest_Definition defl  Heap_Ptr
1559+ E2B5             >
1559+ E2B5             >                // dummy db directives used to calculate length of namec
1559+ E2B5 43 45 4C 4C >                db      "CELL-"
1559+ E2B9 2D          >
1559+ E2BA             >len_NFA         defl    $ - temp_NFA
1559+ E2BA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1559+ E2B5             >
1559+ E2B5 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1559+ E2B6 43 45 4C 4C >                db      "CELL-"               // name string in 7-bit ascii, but
1559+ E2BA 2D          >
1559+ E2BB             >                org     $-1                 // alter last byte of Name just above to set
1559+ E2BA AD          >                db      {b $} | END_BIT     // msb as name end
1559+ E2BB             >
1559+ E2BB AB 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1559+ E2BD             >Prev_Ptr        defl    Heap_Ptr
1559+ E2BD             >
1559+ E2BD             >mirror_Ptr      defl    $
1559+ E2BD             >
1559+ E2BD D1 68       >                dw      Dict_Ptr + 2        // xt
1559+ E2BF             >Heap_Ptr        defl    $ - $E000           // save current HP
1559+ E2BF             >
1559+ E2BF             >Current_HP      defl  $ - $E000             // used to set HP once!
1559+ E2BF             >
1559+ E2BF             >//              ______________________________________________________________________
1559+ E2BF             >//              Dictionary part
1559+ E2BF             >
1559+ E2BF             >                org     Dict_Ptr
1559+ 68CF             >
1559+ 68CF BD 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1559+ 68D1             >
1559+ 68D1             >CELL_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1559+ 68D1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1559+ 68D1 ~           >
1559+ 68D1 ~           >
1559+ 68D1             >                endif           ; ok        // for other definitions it "points" the correct handler
1559+ 68D1             >                // Use of "; ok" to suppress "warning[fwdref]"
1559+ 68D1             >
1559+ 68D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1560+ 68D1              CellMinus:
1561+ 68D1 E1                           pop     hl
1562+ 68D2 2B                           dec     hl
1563+ 68D3 2B                           dec     hl
1564+ 68D4
1565+ 68D4                              psh1
1565+ 68D4 E5          >                push    hl
1565+ 68D5 DD E9       >                jp      (ix)
1566+ 68D7
1567+ 68D7              //  ______________________________________________________________________
1568+ 68D7              //
1569+ 68D7              // 2-           a1 -- a2
1570+ 68D7              // decrement by 2 top of stack
1571+ 68D7                              New_Def TWO_MINUS, "2-", is_code, is_normal
1571+ 68D7             >
1571+ 68D7             >Dict_Ptr        defl    $
1571+ 68D7             >
1571+ 68D7             >//              ______________________________________________________________________
1571+ 68D7             >//              Heap part
1571+ 68D7             >
1571+ 68D7             >
1571+ 68D7             >                org     (Heap_Ptr & $1FFF) + $E000
1571+ E2BF             >
1571+ E2BF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1571+ E2BF             >Latest_Definition defl  Heap_Ptr
1571+ E2BF             >
1571+ E2BF             >                // dummy db directives used to calculate length of namec
1571+ E2BF 32 2D       >                db      "2-"
1571+ E2C1             >len_NFA         defl    $ - temp_NFA
1571+ E2C1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1571+ E2BF             >
1571+ E2BF 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1571+ E2C0 32 2D       >                db      "2-"               // name string in 7-bit ascii, but
1571+ E2C2             >                org     $-1                 // alter last byte of Name just above to set
1571+ E2C1 AD          >                db      {b $} | END_BIT     // msb as name end
1571+ E2C2             >
1571+ E2C2 B5 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1571+ E2C4             >Prev_Ptr        defl    Heap_Ptr
1571+ E2C4             >
1571+ E2C4             >mirror_Ptr      defl    $
1571+ E2C4             >
1571+ E2C4 D9 68       >                dw      Dict_Ptr + 2        // xt
1571+ E2C6             >Heap_Ptr        defl    $ - $E000           // save current HP
1571+ E2C6             >
1571+ E2C6             >Current_HP      defl  $ - $E000             // used to set HP once!
1571+ E2C6             >
1571+ E2C6             >//              ______________________________________________________________________
1571+ E2C6             >//              Dictionary part
1571+ E2C6             >
1571+ E2C6             >                org     Dict_Ptr
1571+ 68D7             >
1571+ 68D7 C4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1571+ 68D9             >
1571+ 68D9             >TWO_MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1571+ 68D9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1571+ 68D9 ~           >
1571+ 68D9 ~           >
1571+ 68D9             >                endif           ; ok        // for other definitions it "points" the correct handler
1571+ 68D9             >                // Use of "; ok" to suppress "warning[fwdref]"
1571+ 68D9             >
1571+ 68D9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1572+ 68D9 C3 D1 68                     jp      CellMinus
1573+ 68DC
1574+ 68DC              //  ______________________________________________________________________
1575+ 68DC              //
1576+ 68DC              // negate       n1 -- n2
1577+ 68DC              // change the sign of number
1578+ 68DC                              New_Def MINUS, "NEGATE", is_code, is_normal
1578+ 68DC             >
1578+ 68DC             >Dict_Ptr        defl    $
1578+ 68DC             >
1578+ 68DC             >//              ______________________________________________________________________
1578+ 68DC             >//              Heap part
1578+ 68DC             >
1578+ 68DC             >
1578+ 68DC             >                org     (Heap_Ptr & $1FFF) + $E000
1578+ E2C6             >
1578+ E2C6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1578+ E2C6             >Latest_Definition defl  Heap_Ptr
1578+ E2C6             >
1578+ E2C6             >                // dummy db directives used to calculate length of namec
1578+ E2C6 4E 45 47 41 >                db      "NEGATE"
1578+ E2CA 54 45       >
1578+ E2CC             >len_NFA         defl    $ - temp_NFA
1578+ E2CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1578+ E2C6             >
1578+ E2C6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1578+ E2C7 4E 45 47 41 >                db      "NEGATE"               // name string in 7-bit ascii, but
1578+ E2CB 54 45       >
1578+ E2CD             >                org     $-1                 // alter last byte of Name just above to set
1578+ E2CC C5          >                db      {b $} | END_BIT     // msb as name end
1578+ E2CD             >
1578+ E2CD BF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1578+ E2CF             >Prev_Ptr        defl    Heap_Ptr
1578+ E2CF             >
1578+ E2CF             >mirror_Ptr      defl    $
1578+ E2CF             >
1578+ E2CF DE 68       >                dw      Dict_Ptr + 2        // xt
1578+ E2D1             >Heap_Ptr        defl    $ - $E000           // save current HP
1578+ E2D1             >
1578+ E2D1             >Current_HP      defl  $ - $E000             // used to set HP once!
1578+ E2D1             >
1578+ E2D1             >//              ______________________________________________________________________
1578+ E2D1             >//              Dictionary part
1578+ E2D1             >
1578+ E2D1             >                org     Dict_Ptr
1578+ 68DC             >
1578+ 68DC CF 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1578+ 68DE             >
1578+ 68DE             >MINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1578+ 68DE ~           >                call    runcode ; ok        // for primitive definitions  actual code
1578+ 68DE ~           >
1578+ 68DE ~           >
1578+ 68DE             >                endif           ; ok        // for other definitions it "points" the correct handler
1578+ 68DE             >                // Use of "; ok" to suppress "warning[fwdref]"
1578+ 68DE             >
1578+ 68DE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1579+ 68DE D9                           exx
1580+ 68DF D1                           pop     de
1581+ 68E0 AF                           xor     a
1582+ 68E1              Negate_Ptr:
1583+ 68E1 67                           ld      h, a
1584+ 68E2 6F                           ld      l, a
1585+ 68E3 ED 52                        sbc     hl, de
1586+ 68E5 E5                           push    hl
1587+ 68E6 D9                           exx
1588+ 68E7                              next
1588+ 68E7 DD E9       >                jp      (ix)
1589+ 68E9
1590+ 68E9              //  ______________________________________________________________________
1591+ 68E9              //
1592+ 68E9              // dnegate      d1 -- d2
1593+ 68E9              // change the sign of a double number
1594+ 68E9                              New_Def DMINUS, "DNEGATE", is_code, is_normal
1594+ 68E9             >
1594+ 68E9             >Dict_Ptr        defl    $
1594+ 68E9             >
1594+ 68E9             >//              ______________________________________________________________________
1594+ 68E9             >//              Heap part
1594+ 68E9             >
1594+ 68E9             >
1594+ 68E9             >                org     (Heap_Ptr & $1FFF) + $E000
1594+ E2D1             >
1594+ E2D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1594+ E2D1             >Latest_Definition defl  Heap_Ptr
1594+ E2D1             >
1594+ E2D1             >                // dummy db directives used to calculate length of namec
1594+ E2D1 44 4E 45 47 >                db      "DNEGATE"
1594+ E2D5 41 54 45    >
1594+ E2D8             >len_NFA         defl    $ - temp_NFA
1594+ E2D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1594+ E2D1             >
1594+ E2D1 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1594+ E2D2 44 4E 45 47 >                db      "DNEGATE"               // name string in 7-bit ascii, but
1594+ E2D6 41 54 45    >
1594+ E2D9             >                org     $-1                 // alter last byte of Name just above to set
1594+ E2D8 C5          >                db      {b $} | END_BIT     // msb as name end
1594+ E2D9             >
1594+ E2D9 C6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1594+ E2DB             >Prev_Ptr        defl    Heap_Ptr
1594+ E2DB             >
1594+ E2DB             >mirror_Ptr      defl    $
1594+ E2DB             >
1594+ E2DB EB 68       >                dw      Dict_Ptr + 2        // xt
1594+ E2DD             >Heap_Ptr        defl    $ - $E000           // save current HP
1594+ E2DD             >
1594+ E2DD             >Current_HP      defl  $ - $E000             // used to set HP once!
1594+ E2DD             >
1594+ E2DD             >//              ______________________________________________________________________
1594+ E2DD             >//              Dictionary part
1594+ E2DD             >
1594+ E2DD             >                org     Dict_Ptr
1594+ 68E9             >
1594+ 68E9 DB 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1594+ 68EB             >
1594+ 68EB             >DMINUS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1594+ 68EB ~           >                call    runcode ; ok        // for primitive definitions  actual code
1594+ 68EB ~           >
1594+ 68EB ~           >
1594+ 68EB             >                endif           ; ok        // for other definitions it "points" the correct handler
1594+ 68EB             >                // Use of "; ok" to suppress "warning[fwdref]"
1594+ 68EB             >
1594+ 68EB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1595+ 68EB D9                           exx
1596+ 68EC D1                           pop     de                  // d1.H
1597+ 68ED C1                           pop     bc                  // d1.L
1598+ 68EE AF                           xor     a
1599+ 68EF 67                           ld      h, a
1600+ 68F0 6F                           ld      l, a
1601+ 68F1 ED 42                        sbc     hl, bc              // subtact from zero
1602+ 68F3 E5                           push    hl                  // > d2-L
1603+ 68F4
1604+ 68F4 18 EB                        jr      Negate_Ptr
1605+ 68F6              //              ld      h, a
1606+ 68F6              //              ld      l, a
1607+ 68F6              //              sbc     hl, de              // subtract from zero with carry
1608+ 68F6                                                          // > d2-H
1609+ 68F6              //              push    hl
1610+ 68F6              //              exx
1611+ 68F6              //              next
1612+ 68F6
1613+ 68F6              //  ______________________________________________________________________
1614+ 68F6              //
1615+ 68F6              // over         n1 n2 -- n1 n2 n1
1616+ 68F6              // copy the second value of stack and put it on top.
1617+ 68F6                              New_Def OVER, "OVER", is_code, is_normal
1617+ 68F6             >
1617+ 68F6             >Dict_Ptr        defl    $
1617+ 68F6             >
1617+ 68F6             >//              ______________________________________________________________________
1617+ 68F6             >//              Heap part
1617+ 68F6             >
1617+ 68F6             >
1617+ 68F6             >                org     (Heap_Ptr & $1FFF) + $E000
1617+ E2DD             >
1617+ E2DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1617+ E2DD             >Latest_Definition defl  Heap_Ptr
1617+ E2DD             >
1617+ E2DD             >                // dummy db directives used to calculate length of namec
1617+ E2DD 4F 56 45 52 >                db      "OVER"
1617+ E2E1             >len_NFA         defl    $ - temp_NFA
1617+ E2E1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1617+ E2DD             >
1617+ E2DD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1617+ E2DE 4F 56 45 52 >                db      "OVER"               // name string in 7-bit ascii, but
1617+ E2E2             >                org     $-1                 // alter last byte of Name just above to set
1617+ E2E1 D2          >                db      {b $} | END_BIT     // msb as name end
1617+ E2E2             >
1617+ E2E2 D1 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1617+ E2E4             >Prev_Ptr        defl    Heap_Ptr
1617+ E2E4             >
1617+ E2E4             >mirror_Ptr      defl    $
1617+ E2E4             >
1617+ E2E4 F8 68       >                dw      Dict_Ptr + 2        // xt
1617+ E2E6             >Heap_Ptr        defl    $ - $E000           // save current HP
1617+ E2E6             >
1617+ E2E6             >Current_HP      defl  $ - $E000             // used to set HP once!
1617+ E2E6             >
1617+ E2E6             >//              ______________________________________________________________________
1617+ E2E6             >//              Dictionary part
1617+ E2E6             >
1617+ E2E6             >                org     Dict_Ptr
1617+ 68F6             >
1617+ 68F6 E4 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1617+ 68F8             >
1617+ 68F8             >OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1617+ 68F8 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1617+ 68F8 ~           >
1617+ 68F8 ~           >
1617+ 68F8             >                endif           ; ok        // for other definitions it "points" the correct handler
1617+ 68F8             >                // Use of "; ok" to suppress "warning[fwdref]"
1617+ 68F8             >
1617+ 68F8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1618+ 68F8                              // exx     // we can use af instead OPTIMIZATION possible
1619+ 68F8 F1                           pop     af                  //   n2
1620+ 68F9 E1                           pop     hl                  // < n1
1621+ 68FA E5                           push    hl                  // > n1
1622+ 68FB F5                           push    af                  // > n2
1623+ 68FC E5                           push    hl                  // > n1
1624+ 68FD                              // exx
1625+ 68FD                              next
1625+ 68FD DD E9       >                jp      (ix)
1626+ 68FF
1627+ 68FF              //  ______________________________________________________________________
1628+ 68FF              //
1629+ 68FF              // drop         n1 --
1630+ 68FF              // drops the top of stack
1631+ 68FF                              New_Def DROP, "DROP", is_code, is_normal
1631+ 68FF             >
1631+ 68FF             >Dict_Ptr        defl    $
1631+ 68FF             >
1631+ 68FF             >//              ______________________________________________________________________
1631+ 68FF             >//              Heap part
1631+ 68FF             >
1631+ 68FF             >
1631+ 68FF             >                org     (Heap_Ptr & $1FFF) + $E000
1631+ E2E6             >
1631+ E2E6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1631+ E2E6             >Latest_Definition defl  Heap_Ptr
1631+ E2E6             >
1631+ E2E6             >                // dummy db directives used to calculate length of namec
1631+ E2E6 44 52 4F 50 >                db      "DROP"
1631+ E2EA             >len_NFA         defl    $ - temp_NFA
1631+ E2EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1631+ E2E6             >
1631+ E2E6 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1631+ E2E7 44 52 4F 50 >                db      "DROP"               // name string in 7-bit ascii, but
1631+ E2EB             >                org     $-1                 // alter last byte of Name just above to set
1631+ E2EA D0          >                db      {b $} | END_BIT     // msb as name end
1631+ E2EB             >
1631+ E2EB DD 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1631+ E2ED             >Prev_Ptr        defl    Heap_Ptr
1631+ E2ED             >
1631+ E2ED             >mirror_Ptr      defl    $
1631+ E2ED             >
1631+ E2ED 01 69       >                dw      Dict_Ptr + 2        // xt
1631+ E2EF             >Heap_Ptr        defl    $ - $E000           // save current HP
1631+ E2EF             >
1631+ E2EF             >Current_HP      defl  $ - $E000             // used to set HP once!
1631+ E2EF             >
1631+ E2EF             >//              ______________________________________________________________________
1631+ E2EF             >//              Dictionary part
1631+ E2EF             >
1631+ E2EF             >                org     Dict_Ptr
1631+ 68FF             >
1631+ 68FF ED 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1631+ 6901             >
1631+ 6901             >DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1631+ 6901 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1631+ 6901 ~           >
1631+ 6901 ~           >
1631+ 6901             >                endif           ; ok        // for other definitions it "points" the correct handler
1631+ 6901             >                // Use of "; ok" to suppress "warning[fwdref]"
1631+ 6901             >
1631+ 6901             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1632+ 6901 E1                           pop     hl                  // < n1 and discard previous TOS
1633+ 6902                              next
1633+ 6902 DD E9       >                jp      (ix)
1634+ 6904
1635+ 6904              //  ______________________________________________________________________
1636+ 6904              //
1637+ 6904              // nip          n1 n2 -- n2
1638+ 6904              // drops the second elemento on the stack
1639+ 6904                              New_Def NIP, "NIP", is_code, is_normal
1639+ 6904             >
1639+ 6904             >Dict_Ptr        defl    $
1639+ 6904             >
1639+ 6904             >//              ______________________________________________________________________
1639+ 6904             >//              Heap part
1639+ 6904             >
1639+ 6904             >
1639+ 6904             >                org     (Heap_Ptr & $1FFF) + $E000
1639+ E2EF             >
1639+ E2EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1639+ E2EF             >Latest_Definition defl  Heap_Ptr
1639+ E2EF             >
1639+ E2EF             >                // dummy db directives used to calculate length of namec
1639+ E2EF 4E 49 50    >                db      "NIP"
1639+ E2F2             >len_NFA         defl    $ - temp_NFA
1639+ E2F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1639+ E2EF             >
1639+ E2EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1639+ E2F0 4E 49 50    >                db      "NIP"               // name string in 7-bit ascii, but
1639+ E2F3             >                org     $-1                 // alter last byte of Name just above to set
1639+ E2F2 D0          >                db      {b $} | END_BIT     // msb as name end
1639+ E2F3             >
1639+ E2F3 E6 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1639+ E2F5             >Prev_Ptr        defl    Heap_Ptr
1639+ E2F5             >
1639+ E2F5             >mirror_Ptr      defl    $
1639+ E2F5             >
1639+ E2F5 06 69       >                dw      Dict_Ptr + 2        // xt
1639+ E2F7             >Heap_Ptr        defl    $ - $E000           // save current HP
1639+ E2F7             >
1639+ E2F7             >Current_HP      defl  $ - $E000             // used to set HP once!
1639+ E2F7             >
1639+ E2F7             >//              ______________________________________________________________________
1639+ E2F7             >//              Dictionary part
1639+ E2F7             >
1639+ E2F7             >                org     Dict_Ptr
1639+ 6904             >
1639+ 6904 F5 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1639+ 6906             >
1639+ 6906             >NIP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1639+ 6906 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1639+ 6906 ~           >
1639+ 6906 ~           >
1639+ 6906             >                endif           ; ok        // for other definitions it "points" the correct handler
1639+ 6906             >                // Use of "; ok" to suppress "warning[fwdref]"
1639+ 6906             >
1639+ 6906             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1640+ 6906
1641+ 6906 E1                           pop     hl                  // < n1 discarded
1642+ 6907 E3                           ex      (sp), hl
1643+ 6908                              next
1643+ 6908 DD E9       >                jp      (ix)
1644+ 690A
1645+ 690A              //  ______________________________________________________________________
1646+ 690A              //
1647+ 690A              // tuck         n1 n2 -- n2 n1 n2
1648+ 690A              // copy the top element after the second.
1649+ 690A                              New_Def TUCK, "TUCK", is_code, is_normal
1649+ 690A             >
1649+ 690A             >Dict_Ptr        defl    $
1649+ 690A             >
1649+ 690A             >//              ______________________________________________________________________
1649+ 690A             >//              Heap part
1649+ 690A             >
1649+ 690A             >
1649+ 690A             >                org     (Heap_Ptr & $1FFF) + $E000
1649+ E2F7             >
1649+ E2F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1649+ E2F7             >Latest_Definition defl  Heap_Ptr
1649+ E2F7             >
1649+ E2F7             >                // dummy db directives used to calculate length of namec
1649+ E2F7 54 55 43 4B >                db      "TUCK"
1649+ E2FB             >len_NFA         defl    $ - temp_NFA
1649+ E2FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1649+ E2F7             >
1649+ E2F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1649+ E2F8 54 55 43 4B >                db      "TUCK"               // name string in 7-bit ascii, but
1649+ E2FC             >                org     $-1                 // alter last byte of Name just above to set
1649+ E2FB CB          >                db      {b $} | END_BIT     // msb as name end
1649+ E2FC             >
1649+ E2FC EF 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1649+ E2FE             >Prev_Ptr        defl    Heap_Ptr
1649+ E2FE             >
1649+ E2FE             >mirror_Ptr      defl    $
1649+ E2FE             >
1649+ E2FE 0C 69       >                dw      Dict_Ptr + 2        // xt
1649+ E300             >Heap_Ptr        defl    $ - $E000           // save current HP
1649+ E300             >
1649+ E300             >Current_HP      defl  $ - $E000             // used to set HP once!
1649+ E300             >
1649+ E300             >//              ______________________________________________________________________
1649+ E300             >//              Dictionary part
1649+ E300             >
1649+ E300             >                org     Dict_Ptr
1649+ 690A             >
1649+ 690A FE 02       >                dw      mirror_Ptr - $E000 + Heap_offset
1649+ 690C             >
1649+ 690C             >TUCK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1649+ 690C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1649+ 690C ~           >
1649+ 690C ~           >
1649+ 690C             >                endif           ; ok        // for other definitions it "points" the correct handler
1649+ 690C             >                // Use of "; ok" to suppress "warning[fwdref]"
1649+ 690C             >
1649+ 690C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1650+ 690C E1                           pop     hl
1651+ 690D F1                           pop     af                  // < n1
1652+ 690E E5                           push    hl                  // > n2  and TOS
1653+ 690F F5                           push    af                  // > n1
1654+ 6910 E5                           push    hl
1655+ 6911                              next
1655+ 6911 DD E9       >                jp      (ix)
1656+ 6913
1657+ 6913              //  ______________________________________________________________________
1658+ 6913              //
1659+ 6913              // swap         n1 n2 -- n2 n1
1660+ 6913              // swaps the two values on top of stack
1661+ 6913                              New_Def SWAP, "SWAP", is_code, is_normal
1661+ 6913             >
1661+ 6913             >Dict_Ptr        defl    $
1661+ 6913             >
1661+ 6913             >//              ______________________________________________________________________
1661+ 6913             >//              Heap part
1661+ 6913             >
1661+ 6913             >
1661+ 6913             >                org     (Heap_Ptr & $1FFF) + $E000
1661+ E300             >
1661+ E300             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1661+ E300             >Latest_Definition defl  Heap_Ptr
1661+ E300             >
1661+ E300             >                // dummy db directives used to calculate length of namec
1661+ E300 53 57 41 50 >                db      "SWAP"
1661+ E304             >len_NFA         defl    $ - temp_NFA
1661+ E304             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1661+ E300             >
1661+ E300 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1661+ E301 53 57 41 50 >                db      "SWAP"               // name string in 7-bit ascii, but
1661+ E305             >                org     $-1                 // alter last byte of Name just above to set
1661+ E304 D0          >                db      {b $} | END_BIT     // msb as name end
1661+ E305             >
1661+ E305 F7 02       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1661+ E307             >Prev_Ptr        defl    Heap_Ptr
1661+ E307             >
1661+ E307             >mirror_Ptr      defl    $
1661+ E307             >
1661+ E307 15 69       >                dw      Dict_Ptr + 2        // xt
1661+ E309             >Heap_Ptr        defl    $ - $E000           // save current HP
1661+ E309             >
1661+ E309             >Current_HP      defl  $ - $E000             // used to set HP once!
1661+ E309             >
1661+ E309             >//              ______________________________________________________________________
1661+ E309             >//              Dictionary part
1661+ E309             >
1661+ E309             >                org     Dict_Ptr
1661+ 6913             >
1661+ 6913 07 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1661+ 6915             >
1661+ 6915             >SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1661+ 6915 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1661+ 6915 ~           >
1661+ 6915 ~           >
1661+ 6915             >                endif           ; ok        // for other definitions it "points" the correct handler
1661+ 6915             >                // Use of "; ok" to suppress "warning[fwdref]"
1661+ 6915             >
1661+ 6915             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1662+ 6915 E1                           pop     hl                  // < n1
1663+ 6916 E3                           ex      (sp),hl             // > n2
1664+ 6917 E5                           push    hl                  // copy n1 to TOS
1665+ 6918                              next
1665+ 6918 DD E9       >                jp      (ix)
1666+ 691A
1667+ 691A              //  ______________________________________________________________________
1668+ 691A              //
1669+ 691A              // dup         n -- n n
1670+ 691A              // duplicates the top value of stack
1671+ 691A                              New_Def DUP, "DUP", is_code, is_normal
1671+ 691A             >
1671+ 691A             >Dict_Ptr        defl    $
1671+ 691A             >
1671+ 691A             >//              ______________________________________________________________________
1671+ 691A             >//              Heap part
1671+ 691A             >
1671+ 691A             >
1671+ 691A             >                org     (Heap_Ptr & $1FFF) + $E000
1671+ E309             >
1671+ E309             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1671+ E309             >Latest_Definition defl  Heap_Ptr
1671+ E309             >
1671+ E309             >                // dummy db directives used to calculate length of namec
1671+ E309 44 55 50    >                db      "DUP"
1671+ E30C             >len_NFA         defl    $ - temp_NFA
1671+ E30C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1671+ E309             >
1671+ E309 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1671+ E30A 44 55 50    >                db      "DUP"               // name string in 7-bit ascii, but
1671+ E30D             >                org     $-1                 // alter last byte of Name just above to set
1671+ E30C D0          >                db      {b $} | END_BIT     // msb as name end
1671+ E30D             >
1671+ E30D 00 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1671+ E30F             >Prev_Ptr        defl    Heap_Ptr
1671+ E30F             >
1671+ E30F             >mirror_Ptr      defl    $
1671+ E30F             >
1671+ E30F 1C 69       >                dw      Dict_Ptr + 2        // xt
1671+ E311             >Heap_Ptr        defl    $ - $E000           // save current HP
1671+ E311             >
1671+ E311             >Current_HP      defl  $ - $E000             // used to set HP once!
1671+ E311             >
1671+ E311             >//              ______________________________________________________________________
1671+ E311             >//              Dictionary part
1671+ E311             >
1671+ E311             >                org     Dict_Ptr
1671+ 691A             >
1671+ 691A 0F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1671+ 691C             >
1671+ 691C             >DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1671+ 691C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1671+ 691C ~           >
1671+ 691C ~           >
1671+ 691C             >                endif           ; ok        // for other definitions it "points" the correct handler
1671+ 691C             >                // Use of "; ok" to suppress "warning[fwdref]"
1671+ 691C             >
1671+ 691C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1672+ 691C E1                           pop     hl
1673+ 691D E5                           push    hl                  // > n duplicate TOS
1674+ 691E E5                           push    hl
1675+ 691F                              next
1675+ 691F DD E9       >                jp      (ix)
1676+ 6921
1677+ 6921              //  ______________________________________________________________________
1678+ 6921              //
1679+ 6921              // rot         n1 n2 n3 -- n2 n3 n1
1680+ 6921              // Rotates the 3 top values of stack by picking the 3rd in access-order
1681+ 6921              // and putting it on top. The other two are shifted down one place.
1682+ 6921                              New_Def ROT, "ROT", is_code, is_normal
1682+ 6921             >
1682+ 6921             >Dict_Ptr        defl    $
1682+ 6921             >
1682+ 6921             >//              ______________________________________________________________________
1682+ 6921             >//              Heap part
1682+ 6921             >
1682+ 6921             >
1682+ 6921             >                org     (Heap_Ptr & $1FFF) + $E000
1682+ E311             >
1682+ E311             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1682+ E311             >Latest_Definition defl  Heap_Ptr
1682+ E311             >
1682+ E311             >                // dummy db directives used to calculate length of namec
1682+ E311 52 4F 54    >                db      "ROT"
1682+ E314             >len_NFA         defl    $ - temp_NFA
1682+ E314             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1682+ E311             >
1682+ E311 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1682+ E312 52 4F 54    >                db      "ROT"               // name string in 7-bit ascii, but
1682+ E315             >                org     $-1                 // alter last byte of Name just above to set
1682+ E314 D4          >                db      {b $} | END_BIT     // msb as name end
1682+ E315             >
1682+ E315 09 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1682+ E317             >Prev_Ptr        defl    Heap_Ptr
1682+ E317             >
1682+ E317             >mirror_Ptr      defl    $
1682+ E317             >
1682+ E317 23 69       >                dw      Dict_Ptr + 2        // xt
1682+ E319             >Heap_Ptr        defl    $ - $E000           // save current HP
1682+ E319             >
1682+ E319             >Current_HP      defl  $ - $E000             // used to set HP once!
1682+ E319             >
1682+ E319             >//              ______________________________________________________________________
1682+ E319             >//              Dictionary part
1682+ E319             >
1682+ E319             >                org     Dict_Ptr
1682+ 6921             >
1682+ 6921 17 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1682+ 6923             >
1682+ 6923             >ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1682+ 6923 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1682+ 6923 ~           >
1682+ 6923 ~           >
1682+ 6923             >                endif           ; ok        // for other definitions it "points" the correct handler
1682+ 6923             >                // Use of "; ok" to suppress "warning[fwdref]"
1682+ 6923             >
1682+ 6923             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1683+ 6923                          //  exx
1684+ 6923 F1                           pop     af                  // < n3
1685+ 6924 E1                           pop     hl                  // < n2
1686+ 6925 E3                           ex      (sp),hl             // > n2 < n1
1687+ 6926 F5                           push    af                  // > n3
1688+ 6927 E5                           push    hl                  // copy n1 to TOS
1689+ 6928                          //  exx
1690+ 6928                              next
1690+ 6928 DD E9       >                jp      (ix)
1691+ 692A
1692+ 692A              //  ______________________________________________________________________
1693+ 692A              //
1694+ 692A              // -rot         n1 n2 n3 -- n3 n1 n2
1695+ 692A              // Rotates the 3 top values of stack by picking the 1st in access-order
1696+ 692A              // and putting back to 3rd place. The other two are shifted down one place.
1697+ 692A                              New_Def DASH_ROT, "-ROT", is_code, is_normal
1697+ 692A             >
1697+ 692A             >Dict_Ptr        defl    $
1697+ 692A             >
1697+ 692A             >//              ______________________________________________________________________
1697+ 692A             >//              Heap part
1697+ 692A             >
1697+ 692A             >
1697+ 692A             >                org     (Heap_Ptr & $1FFF) + $E000
1697+ E319             >
1697+ E319             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1697+ E319             >Latest_Definition defl  Heap_Ptr
1697+ E319             >
1697+ E319             >                // dummy db directives used to calculate length of namec
1697+ E319 2D 52 4F 54 >                db      "-ROT"
1697+ E31D             >len_NFA         defl    $ - temp_NFA
1697+ E31D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1697+ E319             >
1697+ E319 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1697+ E31A 2D 52 4F 54 >                db      "-ROT"               // name string in 7-bit ascii, but
1697+ E31E             >                org     $-1                 // alter last byte of Name just above to set
1697+ E31D D4          >                db      {b $} | END_BIT     // msb as name end
1697+ E31E             >
1697+ E31E 11 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1697+ E320             >Prev_Ptr        defl    Heap_Ptr
1697+ E320             >
1697+ E320             >mirror_Ptr      defl    $
1697+ E320             >
1697+ E320 2C 69       >                dw      Dict_Ptr + 2        // xt
1697+ E322             >Heap_Ptr        defl    $ - $E000           // save current HP
1697+ E322             >
1697+ E322             >Current_HP      defl  $ - $E000             // used to set HP once!
1697+ E322             >
1697+ E322             >//              ______________________________________________________________________
1697+ E322             >//              Dictionary part
1697+ E322             >
1697+ E322             >                org     Dict_Ptr
1697+ 692A             >
1697+ 692A 20 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1697+ 692C             >
1697+ 692C             >DASH_ROT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1697+ 692C ~           >                call    runcode ; ok        // for primitive definitions  actual code
1697+ 692C ~           >
1697+ 692C ~           >
1697+ 692C             >                endif           ; ok        // for other definitions it "points" the correct handler
1697+ 692C             >                // Use of "; ok" to suppress "warning[fwdref]"
1697+ 692C             >
1697+ 692C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1698+ 692C                          //  exx
1699+ 692C E1                           pop     hl                  // < n3
1700+ 692D F1                           pop     af                  // < n2
1701+ 692E E3                           ex      (sp),hl             // > n3 < n1
1702+ 692F E5                           push    hl                  // > n1
1703+ 6930 F5                           push    af                  // copy n3 to TOS
1704+ 6931                          //  exx
1705+ 6931                              next
1705+ 6931 DD E9       >                jp      (ix)
1706+ 6933
1707+ 6933              //  ______________________________________________________________________
1708+ 6933              //
1709+ 6933              // pick        n1 -- nx
1710+ 6933              // picks the nth element from TOS
1711+ 6933                              New_Def PICK, "PICK", is_code, is_normal
1711+ 6933             >
1711+ 6933             >Dict_Ptr        defl    $
1711+ 6933             >
1711+ 6933             >//              ______________________________________________________________________
1711+ 6933             >//              Heap part
1711+ 6933             >
1711+ 6933             >
1711+ 6933             >                org     (Heap_Ptr & $1FFF) + $E000
1711+ E322             >
1711+ E322             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1711+ E322             >Latest_Definition defl  Heap_Ptr
1711+ E322             >
1711+ E322             >                // dummy db directives used to calculate length of namec
1711+ E322 50 49 43 4B >                db      "PICK"
1711+ E326             >len_NFA         defl    $ - temp_NFA
1711+ E326             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1711+ E322             >
1711+ E322 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1711+ E323 50 49 43 4B >                db      "PICK"               // name string in 7-bit ascii, but
1711+ E327             >                org     $-1                 // alter last byte of Name just above to set
1711+ E326 CB          >                db      {b $} | END_BIT     // msb as name end
1711+ E327             >
1711+ E327 19 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1711+ E329             >Prev_Ptr        defl    Heap_Ptr
1711+ E329             >
1711+ E329             >mirror_Ptr      defl    $
1711+ E329             >
1711+ E329 35 69       >                dw      Dict_Ptr + 2        // xt
1711+ E32B             >Heap_Ptr        defl    $ - $E000           // save current HP
1711+ E32B             >
1711+ E32B             >Current_HP      defl  $ - $E000             // used to set HP once!
1711+ E32B             >
1711+ E32B             >//              ______________________________________________________________________
1711+ E32B             >//              Dictionary part
1711+ E32B             >
1711+ E32B             >                org     Dict_Ptr
1711+ 6933             >
1711+ 6933 29 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1711+ 6935             >
1711+ 6935             >PICK:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1711+ 6935 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1711+ 6935 ~           >
1711+ 6935 ~           >
1711+ 6935             >                endif           ; ok        // for other definitions it "points" the correct handler
1711+ 6935             >                // Use of "; ok" to suppress "warning[fwdref]"
1711+ 6935             >
1711+ 6935             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1712+ 6935 E1                           pop     hl                  // take TOS as index
1713+ 6936 29                           add     hl, hl              // as cells
1714+ 6937 39                           add     hl, sp              // from Stack Pointer
1715+ 6938 7E                           ld      a, (hl)             // replace TOS
1716+ 6939 23                           inc     hl
1717+ 693A 66                           ld      h, (hl)
1718+ 693B 6F                           ld      l, a
1719+ 693C E5                           push    hl
1720+ 693D                              next
1720+ 693D DD E9       >                jp      (ix)
1721+ 693F
1722+ 693F
1723+ 693F              //  ______________________________________________________________________
1724+ 693F              //
1725+ 693F              // roll        n1 n2 n3 ... n -- n2 n3 ... n1
1726+ 693F              // picks the nth element from TOS
1727+ 693F              //              New_Def ROLL, "ROLL", is_code, is_normal
1728+ 693F              //              exx                     // we need all registers free
1729+ 693F              //              pop     hl              // number of cells to roll
1730+ 693F              //              ld      a, h
1731+ 693F              //              or       l
1732+ 693F              //              jr      z, Roll_Zero
1733+ 693F              //                  add     hl, hl              // number of bytes to move
1734+ 693F              //                  ld      b, h
1735+ 693F              //                  ld      c, l
1736+ 693F              //                  add     hl, sp          // address of n1
1737+ 693F              //                  ld      a, (hl)         // take n1 into a and a,
1738+ 693F              //                  inc     hl
1739+ 693F              //                  ex      af, af'
1740+ 693F              //                  ld      a, (hl)         // take n1 into a and a,
1741+ 693F              //                  ld      d, h
1742+ 693F              //                  ld      e, l
1743+ 693F              //                  dec     hl
1744+ 693F              //                  dec     hl
1745+ 693F              //                  lddr
1746+ 693F              //                  ex      de, hl
1747+ 693F              //                  ld      (hl), a
1748+ 693F              //                  dec     hl
1749+ 693F              //                  ex      af, af'
1750+ 693F              //                  ld      (hl), a
1751+ 693F              //Roll_Zero:
1752+ 693F              //              exx
1753+ 693F              //              next
1754+ 693F
1755+ 693F
1756+ 693F              //  ______________________________________________________________________
1757+ 693F              //
1758+ 693F              // 2over        d1 d2 -- d1 d2 d1
1759+ 693F              //              n1 n2 n3 n4 -- n1 n2 n3 n4 n1 n2
1760+ 693F              // copy the second double of stack and put on top.
1761+ 693F                              New_Def TWO_OVER, "2OVER", is_code, is_normal
1761+ 693F             >
1761+ 693F             >Dict_Ptr        defl    $
1761+ 693F             >
1761+ 693F             >//              ______________________________________________________________________
1761+ 693F             >//              Heap part
1761+ 693F             >
1761+ 693F             >
1761+ 693F             >                org     (Heap_Ptr & $1FFF) + $E000
1761+ E32B             >
1761+ E32B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1761+ E32B             >Latest_Definition defl  Heap_Ptr
1761+ E32B             >
1761+ E32B             >                // dummy db directives used to calculate length of namec
1761+ E32B 32 4F 56 45 >                db      "2OVER"
1761+ E32F 52          >
1761+ E330             >len_NFA         defl    $ - temp_NFA
1761+ E330             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1761+ E32B             >
1761+ E32B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1761+ E32C 32 4F 56 45 >                db      "2OVER"               // name string in 7-bit ascii, but
1761+ E330 52          >
1761+ E331             >                org     $-1                 // alter last byte of Name just above to set
1761+ E330 D2          >                db      {b $} | END_BIT     // msb as name end
1761+ E331             >
1761+ E331 22 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1761+ E333             >Prev_Ptr        defl    Heap_Ptr
1761+ E333             >
1761+ E333             >mirror_Ptr      defl    $
1761+ E333             >
1761+ E333 41 69       >                dw      Dict_Ptr + 2        // xt
1761+ E335             >Heap_Ptr        defl    $ - $E000           // save current HP
1761+ E335             >
1761+ E335             >Current_HP      defl  $ - $E000             // used to set HP once!
1761+ E335             >
1761+ E335             >//              ______________________________________________________________________
1761+ E335             >//              Dictionary part
1761+ E335             >
1761+ E335             >                org     Dict_Ptr
1761+ 693F             >
1761+ 693F 33 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1761+ 6941             >
1761+ 6941             >TWO_OVER:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1761+ 6941 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1761+ 6941 ~           >
1761+ 6941 ~           >
1761+ 6941             >                endif           ; ok        // for other definitions it "points" the correct handler
1761+ 6941             >                // Use of "; ok" to suppress "warning[fwdref]"
1761+ 6941             >
1761+ 6941             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1762+ 6941 D9                           exx
1763+ 6942 E1                           pop     hl      // 10
1764+ 6943 D1                           pop     de      // 10
1765+ 6944 C1                           pop     bc      // 10
1766+ 6945 F1                           pop     af      // 10
1767+ 6946 F5                           push    af      // 11
1768+ 6947 C5                           push    bc      // 11
1769+ 6948 D5                           push    de      // 11
1770+ 6949 E5                           push    hl      // 11
1771+ 694A F5                           push    af      // 11
1772+ 694B C5                           push    bc      // 11
1773+ 694C D9                           exx
1774+ 694D                              next
1774+ 694D DD E9       >                jp      (ix)
1775+ 694F
1776+ 694F              //  ______________________________________________________________________
1777+ 694F              //
1778+ 694F              // 2drop        d --
1779+ 694F              //              n1 n2 --
1780+ 694F              // drops the top double from stack
1781+ 694F                              New_Def TWO_DROP, "2DROP", is_code, is_normal
1781+ 694F             >
1781+ 694F             >Dict_Ptr        defl    $
1781+ 694F             >
1781+ 694F             >//              ______________________________________________________________________
1781+ 694F             >//              Heap part
1781+ 694F             >
1781+ 694F             >
1781+ 694F             >                org     (Heap_Ptr & $1FFF) + $E000
1781+ E335             >
1781+ E335             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1781+ E335             >Latest_Definition defl  Heap_Ptr
1781+ E335             >
1781+ E335             >                // dummy db directives used to calculate length of namec
1781+ E335 32 44 52 4F >                db      "2DROP"
1781+ E339 50          >
1781+ E33A             >len_NFA         defl    $ - temp_NFA
1781+ E33A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1781+ E335             >
1781+ E335 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1781+ E336 32 44 52 4F >                db      "2DROP"               // name string in 7-bit ascii, but
1781+ E33A 50          >
1781+ E33B             >                org     $-1                 // alter last byte of Name just above to set
1781+ E33A D0          >                db      {b $} | END_BIT     // msb as name end
1781+ E33B             >
1781+ E33B 2B 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1781+ E33D             >Prev_Ptr        defl    Heap_Ptr
1781+ E33D             >
1781+ E33D             >mirror_Ptr      defl    $
1781+ E33D             >
1781+ E33D 51 69       >                dw      Dict_Ptr + 2        // xt
1781+ E33F             >Heap_Ptr        defl    $ - $E000           // save current HP
1781+ E33F             >
1781+ E33F             >Current_HP      defl  $ - $E000             // used to set HP once!
1781+ E33F             >
1781+ E33F             >//              ______________________________________________________________________
1781+ E33F             >//              Dictionary part
1781+ E33F             >
1781+ E33F             >                org     Dict_Ptr
1781+ 694F             >
1781+ 694F 3D 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1781+ 6951             >
1781+ 6951             >TWO_DROP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1781+ 6951 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1781+ 6951 ~           >
1781+ 6951 ~           >
1781+ 6951             >                endif           ; ok        // for other definitions it "points" the correct handler
1781+ 6951             >                // Use of "; ok" to suppress "warning[fwdref]"
1781+ 6951             >
1781+ 6951             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1782+ 6951 E1                           pop     hl
1783+ 6952 E1                           pop     hl
1784+ 6953                              next
1784+ 6953 DD E9       >                jp      (ix)
1785+ 6955
1786+ 6955              //  ______________________________________________________________________
1787+ 6955              //
1788+ 6955              // 2nip         d1 d2 -- d2
1789+ 6955              //              n1 n2 n3 n4 -- n3 n4
1790+ 6955              // drops the second double on the stack
1791+ 6955              //              New_Def TWO_NIP, 4, "2nip"
1792+ 6955              //              ...
1793+ 6955
1794+ 6955              //  ______________________________________________________________________
1795+ 6955              //
1796+ 6955              // 2tuck         d1 d2 -- d2 d1 d2
1797+ 6955              // copy the top element after the second.
1798+ 6955              //              New_Def TWO_TUCK, 5, "2tuck"
1799+ 6955              //              ...
1800+ 6955
1801+ 6955              //  ______________________________________________________________________
1802+ 6955              //
1803+ 6955              // 2swap         d1 d2 -- d2 d1
1804+ 6955              //               n1 n2 n3 n4 -- n3 n4 n1 n2
1805+ 6955              // swaps the two doubles on top of stack
1806+ 6955                              New_Def TWO_SWAP, "2SWAP", is_code, is_normal
1806+ 6955             >
1806+ 6955             >Dict_Ptr        defl    $
1806+ 6955             >
1806+ 6955             >//              ______________________________________________________________________
1806+ 6955             >//              Heap part
1806+ 6955             >
1806+ 6955             >
1806+ 6955             >                org     (Heap_Ptr & $1FFF) + $E000
1806+ E33F             >
1806+ E33F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1806+ E33F             >Latest_Definition defl  Heap_Ptr
1806+ E33F             >
1806+ E33F             >                // dummy db directives used to calculate length of namec
1806+ E33F 32 53 57 41 >                db      "2SWAP"
1806+ E343 50          >
1806+ E344             >len_NFA         defl    $ - temp_NFA
1806+ E344             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1806+ E33F             >
1806+ E33F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1806+ E340 32 53 57 41 >                db      "2SWAP"               // name string in 7-bit ascii, but
1806+ E344 50          >
1806+ E345             >                org     $-1                 // alter last byte of Name just above to set
1806+ E344 D0          >                db      {b $} | END_BIT     // msb as name end
1806+ E345             >
1806+ E345 35 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1806+ E347             >Prev_Ptr        defl    Heap_Ptr
1806+ E347             >
1806+ E347             >mirror_Ptr      defl    $
1806+ E347             >
1806+ E347 57 69       >                dw      Dict_Ptr + 2        // xt
1806+ E349             >Heap_Ptr        defl    $ - $E000           // save current HP
1806+ E349             >
1806+ E349             >Current_HP      defl  $ - $E000             // used to set HP once!
1806+ E349             >
1806+ E349             >//              ______________________________________________________________________
1806+ E349             >//              Dictionary part
1806+ E349             >
1806+ E349             >                org     Dict_Ptr
1806+ 6955             >
1806+ 6955 47 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1806+ 6957             >
1806+ 6957             >TWO_SWAP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1806+ 6957 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1806+ 6957 ~           >
1806+ 6957 ~           >
1806+ 6957             >                endif           ; ok        // for other definitions it "points" the correct handler
1806+ 6957             >                // Use of "; ok" to suppress "warning[fwdref]"
1806+ 6957             >
1806+ 6957             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1807+ 6957 D9                           exx
1808+ 6958 F1                           pop     af                  // < d2-H
1809+ 6959 E1                           pop     hl                  // < d2-L
1810+ 695A D1                           pop     de                  // < d1-H
1811+ 695B E3                           ex      (sp), hl            // < d1-L > d2-L
1812+ 695C F5                           push    af                  //        > d2-H
1813+ 695D E5                           push    hl                  //        > d1-L
1814+ 695E D5                           push    de                  //        > d1-H
1815+ 695F D9                           exx
1816+ 6960                              next
1816+ 6960 DD E9       >                jp      (ix)
1817+ 6962
1818+ 6962              //  ______________________________________________________________________
1819+ 6962              //
1820+ 6962              // 2dup         d -- d d
1821+ 6962              //              n1 n2 -- n1 n2 n1 n2
1822+ 6962              // duplicates the top double of stack
1823+ 6962                              New_Def TWO_DUP, "2DUP", is_code, is_normal
1823+ 6962             >
1823+ 6962             >Dict_Ptr        defl    $
1823+ 6962             >
1823+ 6962             >//              ______________________________________________________________________
1823+ 6962             >//              Heap part
1823+ 6962             >
1823+ 6962             >
1823+ 6962             >                org     (Heap_Ptr & $1FFF) + $E000
1823+ E349             >
1823+ E349             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1823+ E349             >Latest_Definition defl  Heap_Ptr
1823+ E349             >
1823+ E349             >                // dummy db directives used to calculate length of namec
1823+ E349 32 44 55 50 >                db      "2DUP"
1823+ E34D             >len_NFA         defl    $ - temp_NFA
1823+ E34D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1823+ E349             >
1823+ E349 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1823+ E34A 32 44 55 50 >                db      "2DUP"               // name string in 7-bit ascii, but
1823+ E34E             >                org     $-1                 // alter last byte of Name just above to set
1823+ E34D D0          >                db      {b $} | END_BIT     // msb as name end
1823+ E34E             >
1823+ E34E 3F 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1823+ E350             >Prev_Ptr        defl    Heap_Ptr
1823+ E350             >
1823+ E350             >mirror_Ptr      defl    $
1823+ E350             >
1823+ E350 64 69       >                dw      Dict_Ptr + 2        // xt
1823+ E352             >Heap_Ptr        defl    $ - $E000           // save current HP
1823+ E352             >
1823+ E352             >Current_HP      defl  $ - $E000             // used to set HP once!
1823+ E352             >
1823+ E352             >//              ______________________________________________________________________
1823+ E352             >//              Dictionary part
1823+ E352             >
1823+ E352             >                org     Dict_Ptr
1823+ 6962             >
1823+ 6962 50 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1823+ 6964             >
1823+ 6964             >TWO_DUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1823+ 6964 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1823+ 6964 ~           >
1823+ 6964 ~           >
1823+ 6964             >                endif           ; ok        // for other definitions it "points" the correct handler
1823+ 6964             >                // Use of "; ok" to suppress "warning[fwdref]"
1823+ 6964             >
1823+ 6964             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1824+ 6964 E1                           pop     hl                  // < d-H
1825+ 6965 F1                           pop     af                  // < d-L
1826+ 6966 F5                           push    af                  // < d-L
1827+ 6967 E5                           push    hl                  //       > d-H
1828+ 6968 F5                           push    af                  //       > d-L
1829+ 6969 E5                           push    hl                  //       > d-H
1830+ 696A                              next
1830+ 696A DD E9       >                jp      (ix)
1831+ 696C
1832+ 696C              //  ______________________________________________________________________
1833+ 696C              //
1834+ 696C              // 2rot         d1 d2 d3 -- d2 d3 d1
1835+ 696C              //              n1 n2 n3 n4 n5 n6 -- n3 n4 n5 n6 n1 n2
1836+ 696C              // Rotates the 3 top doubles of stack by picking the 3rd in access-order
1837+ 696C              // and putting it on top. The other two are shifted down one place.
1838+ 696C              //              New_Def TWO?ROT, 4, "2rot"
1839+ 696C              //              ...
1840+ 696C              //              New_Def TWO_ROT, "2ROT", is_code, is_normal
1841+ 696C              //
1842+ 696C              //      d3  |d2  |d1  |
1843+ 696C              //      h l |h l |h l |
1844+ 696C              // SP   LHED|LHED|LHED|
1845+ 696C              // SP  +0123|4567|89ab|
1846+ 696C              //              ld      hl, $000B
1847+ 696C              //              add     hl, sp
1848+ 696C              //              ld      d, (hl)
1849+ 696C              //              dec     hl
1850+ 696C              //              ld      e, (hl)
1851+ 696C              //              dec     hl
1852+ 696C              //              push    de
1853+ 696C              //              ld      d, (hl)
1854+ 696C              //              dec     hl
1855+ 696C              //              ld      e, (hl)
1856+ 696C              //              dec     hl
1857+ 696C              //              push    de
1858+ 696C
1859+ 696C              //      d1  |d3  |d2  |d1  |
1860+ 696C              //      h l |h l |h l |h l |
1861+ 696C              // SP   LHED|LHED|LHED|LHED|
1862+ 696C              // SP       +0123|4567|89ab|
1863+ 696C
1864+ 696C              //              ld      d, h
1865+ 696C              //              ld      e, l
1866+ 696C              //              inc     de
1867+ 696C              //              inc     de
1868+ 696C              //              inc     de
1869+ 696C              //              inc     de
1870+ 696C              //              push    bc
1871+ 696C              //              ld      bc, $000C
1872+ 696C              //              lddr
1873+ 696C              //              pop     bc
1874+ 696C              //              pop     de
1875+ 696C              //              pop     de
1876+ 696C              //
1877+ 696C              //              next
1878+ 696C
1879+ 696C
1880+ 696C              //  ______________________________________________________________________
1881+ 696C              //
1882+ 696C              // +!           n a --
1883+ 696C              // Sums to the content of address a the number n.
1884+ 696C              // It is the same of  a @ n + a !
1885+ 696C                              New_Def PLUSSTORE, "+!", is_code, is_normal
1885+ 696C             >
1885+ 696C             >Dict_Ptr        defl    $
1885+ 696C             >
1885+ 696C             >//              ______________________________________________________________________
1885+ 696C             >//              Heap part
1885+ 696C             >
1885+ 696C             >
1885+ 696C             >                org     (Heap_Ptr & $1FFF) + $E000
1885+ E352             >
1885+ E352             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1885+ E352             >Latest_Definition defl  Heap_Ptr
1885+ E352             >
1885+ E352             >                // dummy db directives used to calculate length of namec
1885+ E352 2B 21       >                db      "+!"
1885+ E354             >len_NFA         defl    $ - temp_NFA
1885+ E354             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1885+ E352             >
1885+ E352 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1885+ E353 2B 21       >                db      "+!"               // name string in 7-bit ascii, but
1885+ E355             >                org     $-1                 // alter last byte of Name just above to set
1885+ E354 A1          >                db      {b $} | END_BIT     // msb as name end
1885+ E355             >
1885+ E355 49 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1885+ E357             >Prev_Ptr        defl    Heap_Ptr
1885+ E357             >
1885+ E357             >mirror_Ptr      defl    $
1885+ E357             >
1885+ E357 6E 69       >                dw      Dict_Ptr + 2        // xt
1885+ E359             >Heap_Ptr        defl    $ - $E000           // save current HP
1885+ E359             >
1885+ E359             >Current_HP      defl  $ - $E000             // used to set HP once!
1885+ E359             >
1885+ E359             >//              ______________________________________________________________________
1885+ E359             >//              Dictionary part
1885+ E359             >
1885+ E359             >                org     Dict_Ptr
1885+ 696C             >
1885+ 696C 57 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1885+ 696E             >
1885+ 696E             >PLUSSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1885+ 696E ~           >                call    runcode ; ok        // for primitive definitions  actual code
1885+ 696E ~           >
1885+ 696E ~           >
1885+ 696E             >                endif           ; ok        // for other definitions it "points" the correct handler
1885+ 696E             >                // Use of "; ok" to suppress "warning[fwdref]"
1885+ 696E             >
1885+ 696E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1886+ 696E D9                           exx
1887+ 696F E1                           pop     hl                  // hl is the address
1888+ 6970 D1                           pop     de                  // de is the number
1889+ 6971 7E                           ld      a, (hl)
1890+ 6972 83                           add     e
1891+ 6973 77                           ld      (hl), a
1892+ 6974 23                           inc     hl
1893+ 6975 7E                           ld      a, (hl)
1894+ 6976 8A                           adc     d
1895+ 6977 77                           ld      (hl), a
1896+ 6978 D9                           exx
1897+ 6979                              next
1897+ 6979 DD E9       >                jp      (ix)
1898+ 697B
1899+ 697B              //  ______________________________________________________________________
1900+ 697B              //
1901+ 697B              // toggle       a n --
1902+ 697B              // Complements (xor) the byte at addrress  a  with the model n.
1903+ 697B                              New_Def TOGGLE, "TOGGLE", is_code, is_normal
1903+ 697B             >
1903+ 697B             >Dict_Ptr        defl    $
1903+ 697B             >
1903+ 697B             >//              ______________________________________________________________________
1903+ 697B             >//              Heap part
1903+ 697B             >
1903+ 697B             >
1903+ 697B             >                org     (Heap_Ptr & $1FFF) + $E000
1903+ E359             >
1903+ E359             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1903+ E359             >Latest_Definition defl  Heap_Ptr
1903+ E359             >
1903+ E359             >                // dummy db directives used to calculate length of namec
1903+ E359 54 4F 47 47 >                db      "TOGGLE"
1903+ E35D 4C 45       >
1903+ E35F             >len_NFA         defl    $ - temp_NFA
1903+ E35F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1903+ E359             >
1903+ E359 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1903+ E35A 54 4F 47 47 >                db      "TOGGLE"               // name string in 7-bit ascii, but
1903+ E35E 4C 45       >
1903+ E360             >                org     $-1                 // alter last byte of Name just above to set
1903+ E35F C5          >                db      {b $} | END_BIT     // msb as name end
1903+ E360             >
1903+ E360 52 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1903+ E362             >Prev_Ptr        defl    Heap_Ptr
1903+ E362             >
1903+ E362             >mirror_Ptr      defl    $
1903+ E362             >
1903+ E362 7D 69       >                dw      Dict_Ptr + 2        // xt
1903+ E364             >Heap_Ptr        defl    $ - $E000           // save current HP
1903+ E364             >
1903+ E364             >Current_HP      defl  $ - $E000             // used to set HP once!
1903+ E364             >
1903+ E364             >//              ______________________________________________________________________
1903+ E364             >//              Dictionary part
1903+ E364             >
1903+ E364             >                org     Dict_Ptr
1903+ 697B             >
1903+ 697B 62 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1903+ 697D             >
1903+ 697D             >TOGGLE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1903+ 697D ~           >                call    runcode ; ok        // for primitive definitions  actual code
1903+ 697D ~           >
1903+ 697D ~           >
1903+ 697D             >                endif           ; ok        // for other definitions it "points" the correct handler
1903+ 697D             >                // Use of "; ok" to suppress "warning[fwdref]"
1903+ 697D             >
1903+ 697D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1904+ 697D E1                           pop     hl
1905+ 697E 7D                           ld      a, l
1906+ 697F E1                           pop     hl
1907+ 6980 AE                           xor     (hl)
1908+ 6981 77                           ld      (hl), a
1909+ 6982
1910+ 6982                              next
1910+ 6982 DD E9       >                jp      (ix)
1911+ 6984
1912+ 6984              //  ______________________________________________________________________
1913+ 6984              //
1914+ 6984              // @            a -- n
1915+ 6984              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1916+ 6984                              New_Def FETCH, "@", is_code, is_normal
1916+ 6984             >
1916+ 6984             >Dict_Ptr        defl    $
1916+ 6984             >
1916+ 6984             >//              ______________________________________________________________________
1916+ 6984             >//              Heap part
1916+ 6984             >
1916+ 6984             >
1916+ 6984             >                org     (Heap_Ptr & $1FFF) + $E000
1916+ E364             >
1916+ E364             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1916+ E364             >Latest_Definition defl  Heap_Ptr
1916+ E364             >
1916+ E364             >                // dummy db directives used to calculate length of namec
1916+ E364 40          >                db      "@"
1916+ E365             >len_NFA         defl    $ - temp_NFA
1916+ E365             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1916+ E364             >
1916+ E364 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1916+ E365 40          >                db      "@"               // name string in 7-bit ascii, but
1916+ E366             >                org     $-1                 // alter last byte of Name just above to set
1916+ E365 C0          >                db      {b $} | END_BIT     // msb as name end
1916+ E366             >
1916+ E366 59 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1916+ E368             >Prev_Ptr        defl    Heap_Ptr
1916+ E368             >
1916+ E368             >mirror_Ptr      defl    $
1916+ E368             >
1916+ E368 86 69       >                dw      Dict_Ptr + 2        // xt
1916+ E36A             >Heap_Ptr        defl    $ - $E000           // save current HP
1916+ E36A             >
1916+ E36A             >Current_HP      defl  $ - $E000             // used to set HP once!
1916+ E36A             >
1916+ E36A             >//              ______________________________________________________________________
1916+ E36A             >//              Dictionary part
1916+ E36A             >
1916+ E36A             >                org     Dict_Ptr
1916+ 6984             >
1916+ 6984 68 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1916+ 6986             >
1916+ 6986             >FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1916+ 6986 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1916+ 6986 ~           >
1916+ 6986 ~           >
1916+ 6986             >                endif           ; ok        // for other definitions it "points" the correct handler
1916+ 6986             >                // Use of "; ok" to suppress "warning[fwdref]"
1916+ 6986             >
1916+ 6986             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1917+ 6986 E1                           pop     hl
1918+ 6987 7E                           ld      a, (hl)             // low-byte
1919+ 6988 23                           inc     hl
1920+ 6989 66                           ld      h, (hl)             // high-byte
1921+ 698A 6F                           ld      l, a
1922+ 698B E5                           push    hl
1923+ 698C                              next
1923+ 698C DD E9       >                jp      (ix)
1924+ 698E
1925+ 698E              //  ______________________________________________________________________
1926+ 698E              //
1927+ 698E              // !            n a --
1928+ 698E              // store 16 bit number n from address a. Z80 keeps high byte is in high memory
1929+ 698E                              New_Def STORE, "!", is_code, is_normal
1929+ 698E             >
1929+ 698E             >Dict_Ptr        defl    $
1929+ 698E             >
1929+ 698E             >//              ______________________________________________________________________
1929+ 698E             >//              Heap part
1929+ 698E             >
1929+ 698E             >
1929+ 698E             >                org     (Heap_Ptr & $1FFF) + $E000
1929+ E36A             >
1929+ E36A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1929+ E36A             >Latest_Definition defl  Heap_Ptr
1929+ E36A             >
1929+ E36A             >                // dummy db directives used to calculate length of namec
1929+ E36A 21          >                db      "!"
1929+ E36B             >len_NFA         defl    $ - temp_NFA
1929+ E36B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1929+ E36A             >
1929+ E36A 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1929+ E36B 21          >                db      "!"               // name string in 7-bit ascii, but
1929+ E36C             >                org     $-1                 // alter last byte of Name just above to set
1929+ E36B A1          >                db      {b $} | END_BIT     // msb as name end
1929+ E36C             >
1929+ E36C 64 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1929+ E36E             >Prev_Ptr        defl    Heap_Ptr
1929+ E36E             >
1929+ E36E             >mirror_Ptr      defl    $
1929+ E36E             >
1929+ E36E 90 69       >                dw      Dict_Ptr + 2        // xt
1929+ E370             >Heap_Ptr        defl    $ - $E000           // save current HP
1929+ E370             >
1929+ E370             >Current_HP      defl  $ - $E000             // used to set HP once!
1929+ E370             >
1929+ E370             >//              ______________________________________________________________________
1929+ E370             >//              Dictionary part
1929+ E370             >
1929+ E370             >                org     Dict_Ptr
1929+ 698E             >
1929+ 698E 6E 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1929+ 6990             >
1929+ 6990             >STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1929+ 6990 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1929+ 6990 ~           >
1929+ 6990 ~           >
1929+ 6990             >                endif           ; ok        // for other definitions it "points" the correct handler
1929+ 6990             >                // Use of "; ok" to suppress "warning[fwdref]"
1929+ 6990             >
1929+ 6990             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1930+ 6990 D9                           exx
1931+ 6991 E1                           pop     hl                  // address
1932+ 6992 D1                           pop     de                  // < n
1933+ 6993              Store_end:
1934+ 6993 73                           ld      (hl), e             // low-byte
1935+ 6994 23                           inc     hl
1936+ 6995 72                           ld      (hl), d             // high-byte
1937+ 6996 D9                           exx
1938+ 6997                              next
1938+ 6997 DD E9       >                jp      (ix)
1939+ 6999
1940+ 6999              //  ______________________________________________________________________
1941+ 6999              //
1942+ 6999              // c@           a -- c
1943+ 6999              // fetch a character n from address a
1944+ 6999                              New_Def CFETCH, "C@", is_code, is_normal
1944+ 6999             >
1944+ 6999             >Dict_Ptr        defl    $
1944+ 6999             >
1944+ 6999             >//              ______________________________________________________________________
1944+ 6999             >//              Heap part
1944+ 6999             >
1944+ 6999             >
1944+ 6999             >                org     (Heap_Ptr & $1FFF) + $E000
1944+ E370             >
1944+ E370             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1944+ E370             >Latest_Definition defl  Heap_Ptr
1944+ E370             >
1944+ E370             >                // dummy db directives used to calculate length of namec
1944+ E370 43 40       >                db      "C@"
1944+ E372             >len_NFA         defl    $ - temp_NFA
1944+ E372             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1944+ E370             >
1944+ E370 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1944+ E371 43 40       >                db      "C@"               // name string in 7-bit ascii, but
1944+ E373             >                org     $-1                 // alter last byte of Name just above to set
1944+ E372 C0          >                db      {b $} | END_BIT     // msb as name end
1944+ E373             >
1944+ E373 6A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1944+ E375             >Prev_Ptr        defl    Heap_Ptr
1944+ E375             >
1944+ E375             >mirror_Ptr      defl    $
1944+ E375             >
1944+ E375 9B 69       >                dw      Dict_Ptr + 2        // xt
1944+ E377             >Heap_Ptr        defl    $ - $E000           // save current HP
1944+ E377             >
1944+ E377             >Current_HP      defl  $ - $E000             // used to set HP once!
1944+ E377             >
1944+ E377             >//              ______________________________________________________________________
1944+ E377             >//              Dictionary part
1944+ E377             >
1944+ E377             >                org     Dict_Ptr
1944+ 6999             >
1944+ 6999 75 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1944+ 699B             >
1944+ 699B             >CFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1944+ 699B ~           >                call    runcode ; ok        // for primitive definitions  actual code
1944+ 699B ~           >
1944+ 699B ~           >
1944+ 699B             >                endif           ; ok        // for other definitions it "points" the correct handler
1944+ 699B             >                // Use of "; ok" to suppress "warning[fwdref]"
1944+ 699B             >
1944+ 699B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1945+ 699B E1                           pop     hl
1946+ 699C 6E                           ld      l, (hl)             // low-byte
1947+ 699D 26 00                        ld      h, 0
1948+ 699F
1949+ 699F                              psh1
1949+ 699F E5          >                push    hl
1949+ 69A0 DD E9       >                jp      (ix)
1950+ 69A2
1951+ 69A2              //  ______________________________________________________________________
1952+ 69A2              //
1953+ 69A2              // c!           c a --
1954+ 69A2              // fetch 16 bit number n from address a. Z80 keeps high byte is in high memory
1955+ 69A2                              New_Def CSTORE, "C!", is_code, is_normal
1955+ 69A2             >
1955+ 69A2             >Dict_Ptr        defl    $
1955+ 69A2             >
1955+ 69A2             >//              ______________________________________________________________________
1955+ 69A2             >//              Heap part
1955+ 69A2             >
1955+ 69A2             >
1955+ 69A2             >                org     (Heap_Ptr & $1FFF) + $E000
1955+ E377             >
1955+ E377             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1955+ E377             >Latest_Definition defl  Heap_Ptr
1955+ E377             >
1955+ E377             >                // dummy db directives used to calculate length of namec
1955+ E377 43 21       >                db      "C!"
1955+ E379             >len_NFA         defl    $ - temp_NFA
1955+ E379             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1955+ E377             >
1955+ E377 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1955+ E378 43 21       >                db      "C!"               // name string in 7-bit ascii, but
1955+ E37A             >                org     $-1                 // alter last byte of Name just above to set
1955+ E379 A1          >                db      {b $} | END_BIT     // msb as name end
1955+ E37A             >
1955+ E37A 70 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1955+ E37C             >Prev_Ptr        defl    Heap_Ptr
1955+ E37C             >
1955+ E37C             >mirror_Ptr      defl    $
1955+ E37C             >
1955+ E37C A4 69       >                dw      Dict_Ptr + 2        // xt
1955+ E37E             >Heap_Ptr        defl    $ - $E000           // save current HP
1955+ E37E             >
1955+ E37E             >Current_HP      defl  $ - $E000             // used to set HP once!
1955+ E37E             >
1955+ E37E             >//              ______________________________________________________________________
1955+ E37E             >//              Dictionary part
1955+ E37E             >
1955+ E37E             >                org     Dict_Ptr
1955+ 69A2             >
1955+ 69A2 7C 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1955+ 69A4             >
1955+ 69A4             >CSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1955+ 69A4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1955+ 69A4 ~           >
1955+ 69A4 ~           >
1955+ 69A4             >                endif           ; ok        // for other definitions it "points" the correct handler
1955+ 69A4             >                // Use of "; ok" to suppress "warning[fwdref]"
1955+ 69A4             >
1955+ 69A4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1956+ 69A4 D9                           exx
1957+ 69A5 E1                           pop     hl                  // < address
1958+ 69A6 D1                           pop     de
1959+ 69A7 73                           ld      (hl), e             // low-byte
1960+ 69A8 D9                           exx
1961+ 69A9                              next
1961+ 69A9 DD E9       >                jp      (ix)
1962+ 69AB
1963+ 69AB              //  ______________________________________________________________________
1964+ 69AB              //
1965+ 69AB              // 2@           a -- d
1966+ 69AB              // fetch a 32 bits number d from address a and leaves it on top of the
1967+ 69AB              // stack as two single numbers, high part as top of the stack.
1968+ 69AB              // A double number is normally kept in CPU registers as HLDE.
1969+ 69AB              // On stack a double number is treated as two single numbers
1970+ 69AB              // where BC is on the top of the stack and HL is the second from top,
1971+ 69AB              // so the sign of the number can be checked on top of stack
1972+ 69AB              // and in the stack memory it appears as LHED.
1973+ 69AB                              New_Def TWO_FETCH, "2@", is_code, is_normal
1973+ 69AB             >
1973+ 69AB             >Dict_Ptr        defl    $
1973+ 69AB             >
1973+ 69AB             >//              ______________________________________________________________________
1973+ 69AB             >//              Heap part
1973+ 69AB             >
1973+ 69AB             >
1973+ 69AB             >                org     (Heap_Ptr & $1FFF) + $E000
1973+ E37E             >
1973+ E37E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1973+ E37E             >Latest_Definition defl  Heap_Ptr
1973+ E37E             >
1973+ E37E             >                // dummy db directives used to calculate length of namec
1973+ E37E 32 40       >                db      "2@"
1973+ E380             >len_NFA         defl    $ - temp_NFA
1973+ E380             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1973+ E37E             >
1973+ E37E 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1973+ E37F 32 40       >                db      "2@"               // name string in 7-bit ascii, but
1973+ E381             >                org     $-1                 // alter last byte of Name just above to set
1973+ E380 C0          >                db      {b $} | END_BIT     // msb as name end
1973+ E381             >
1973+ E381 77 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1973+ E383             >Prev_Ptr        defl    Heap_Ptr
1973+ E383             >
1973+ E383             >mirror_Ptr      defl    $
1973+ E383             >
1973+ E383 AD 69       >                dw      Dict_Ptr + 2        // xt
1973+ E385             >Heap_Ptr        defl    $ - $E000           // save current HP
1973+ E385             >
1973+ E385             >Current_HP      defl  $ - $E000             // used to set HP once!
1973+ E385             >
1973+ E385             >//              ______________________________________________________________________
1973+ E385             >//              Dictionary part
1973+ E385             >
1973+ E385             >                org     Dict_Ptr
1973+ 69AB             >
1973+ 69AB 83 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1973+ 69AD             >
1973+ 69AD             >TWO_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1973+ 69AD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1973+ 69AD ~           >
1973+ 69AD ~           >
1973+ 69AD             >                endif           ; ok        // for other definitions it "points" the correct handler
1973+ 69AD             >                // Use of "; ok" to suppress "warning[fwdref]"
1973+ 69AD             >
1973+ 69AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1974+ 69AD D9                           exx
1975+ 69AE E1                           pop     hl                  // address
1976+ 69AF 5E                           ld      e, (hl)             // low-byte
1977+ 69B0 23                           inc     hl
1978+ 69B1 56                           ld      d, (hl)             // high-byte
1979+ 69B2 23                           inc     hl
1980+ 69B3 4E                           ld      c, (hl)             // low-byte
1981+ 69B4 23                           inc     hl
1982+ 69B5 46                           ld      b, (hl)             // high-byte
1983+ 69B6 C5                           push    bc
1984+ 69B7 D5                           push    de
1985+ 69B8 D9                           exx
1986+ 69B9                              next
1986+ 69B9 DD E9       >                jp      (ix)
1987+ 69BB
1988+ 69BB              //  ______________________________________________________________________
1989+ 69BB              //
1990+ 69BB              // 2!           d a --
1991+ 69BB              // stores a 32 bits number d from address a and leaves it on top of the
1992+ 69BB              // stack as two single numbers, high part as top of the stack.
1993+ 69BB              // A double number is normally kept in CPU registers as HLDE.
1994+ 69BB              // On stack a double number is treated as two single numbers
1995+ 69BB              // where BC is on the top of the stack and HL is the second from top,
1996+ 69BB              // so the sign of the number can be checked on top of stack
1997+ 69BB              // and in the stack memory it appears as LHED.
1998+ 69BB                              New_Def TWO_STORE, "2!", is_code, is_normal
1998+ 69BB             >
1998+ 69BB             >Dict_Ptr        defl    $
1998+ 69BB             >
1998+ 69BB             >//              ______________________________________________________________________
1998+ 69BB             >//              Heap part
1998+ 69BB             >
1998+ 69BB             >
1998+ 69BB             >                org     (Heap_Ptr & $1FFF) + $E000
1998+ E385             >
1998+ E385             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1998+ E385             >Latest_Definition defl  Heap_Ptr
1998+ E385             >
1998+ E385             >                // dummy db directives used to calculate length of namec
1998+ E385 32 21       >                db      "2!"
1998+ E387             >len_NFA         defl    $ - temp_NFA
1998+ E387             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1998+ E385             >
1998+ E385 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1998+ E386 32 21       >                db      "2!"               // name string in 7-bit ascii, but
1998+ E388             >                org     $-1                 // alter last byte of Name just above to set
1998+ E387 A1          >                db      {b $} | END_BIT     // msb as name end
1998+ E388             >
1998+ E388 7E 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1998+ E38A             >Prev_Ptr        defl    Heap_Ptr
1998+ E38A             >
1998+ E38A             >mirror_Ptr      defl    $
1998+ E38A             >
1998+ E38A BD 69       >                dw      Dict_Ptr + 2        // xt
1998+ E38C             >Heap_Ptr        defl    $ - $E000           // save current HP
1998+ E38C             >
1998+ E38C             >Current_HP      defl  $ - $E000             // used to set HP once!
1998+ E38C             >
1998+ E38C             >//              ______________________________________________________________________
1998+ E38C             >//              Dictionary part
1998+ E38C             >
1998+ E38C             >                org     Dict_Ptr
1998+ 69BB             >
1998+ 69BB 8A 03       >                dw      mirror_Ptr - $E000 + Heap_offset
1998+ 69BD             >
1998+ 69BD             >TWO_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1998+ 69BD ~           >                call    runcode ; ok        // for primitive definitions  actual code
1998+ 69BD ~           >
1998+ 69BD ~           >
1998+ 69BD             >                endif           ; ok        // for other definitions it "points" the correct handler
1998+ 69BD             >                // Use of "; ok" to suppress "warning[fwdref]"
1998+ 69BD             >
1998+ 69BD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1999+ 69BD D9                           exx
2000+ 69BE E1                           pop     hl                  // address
2001+ 69BF C1                           pop     bc                  // < high-part
2002+ 69C0 D1                           pop     de                  // < low-part > Instruction Pointer
2003+ 69C1 71                           ld      (hl), c
2004+ 69C2 23                           inc     hl
2005+ 69C3 70                           ld      (hl), b
2006+ 69C4 23                           inc     hl
2007+ 69C5 18 CC                        jr      Store_end
2008+ 69C7                          //  ld      (hl), e
2009+ 69C7                          //  inc     hl
2010+ 69C7                          //  ld      (hl), d
2011+ 69C7                          //  exx
2012+ 69C7                          //  next
2013+ 69C7
2014+ 69C7              //  ______________________________________________________________________
2015+ 69C7              //
2016+ 69C7              // p@           a -- c
2017+ 69C7              // Read one byte from port a and leave the result on top of stack
2018+ 69C7                              New_Def PFETCH, "P@", is_code, is_normal
2018+ 69C7             >
2018+ 69C7             >Dict_Ptr        defl    $
2018+ 69C7             >
2018+ 69C7             >//              ______________________________________________________________________
2018+ 69C7             >//              Heap part
2018+ 69C7             >
2018+ 69C7             >
2018+ 69C7             >                org     (Heap_Ptr & $1FFF) + $E000
2018+ E38C             >
2018+ E38C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2018+ E38C             >Latest_Definition defl  Heap_Ptr
2018+ E38C             >
2018+ E38C             >                // dummy db directives used to calculate length of namec
2018+ E38C 50 40       >                db      "P@"
2018+ E38E             >len_NFA         defl    $ - temp_NFA
2018+ E38E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2018+ E38C             >
2018+ E38C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2018+ E38D 50 40       >                db      "P@"               // name string in 7-bit ascii, but
2018+ E38F             >                org     $-1                 // alter last byte of Name just above to set
2018+ E38E C0          >                db      {b $} | END_BIT     // msb as name end
2018+ E38F             >
2018+ E38F 85 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2018+ E391             >Prev_Ptr        defl    Heap_Ptr
2018+ E391             >
2018+ E391             >mirror_Ptr      defl    $
2018+ E391             >
2018+ E391 C9 69       >                dw      Dict_Ptr + 2        // xt
2018+ E393             >Heap_Ptr        defl    $ - $E000           // save current HP
2018+ E393             >
2018+ E393             >Current_HP      defl  $ - $E000             // used to set HP once!
2018+ E393             >
2018+ E393             >//              ______________________________________________________________________
2018+ E393             >//              Dictionary part
2018+ E393             >
2018+ E393             >                org     Dict_Ptr
2018+ 69C7             >
2018+ 69C7 91 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2018+ 69C9             >
2018+ 69C9             >PFETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2018+ 69C9 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2018+ 69C9 ~           >
2018+ 69C9 ~           >
2018+ 69C9             >                endif           ; ok        // for other definitions it "points" the correct handler
2018+ 69C9             >                // Use of "; ok" to suppress "warning[fwdref]"
2018+ 69C9             >
2018+ 69C9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2019+ 69C9 D9                           exx
2020+ 69CA C1                           pop     bc
2021+ 69CB 26 00                        ld      h, 0
2022+ 69CD ED 68                        in      l, (c)
2023+ 69CF E5                           push    hl
2024+ 69D0 D9                           exx
2025+ 69D1                              next
2025+ 69D1 DD E9       >                jp      (ix)
2026+ 69D3
2027+ 69D3              //  ______________________________________________________________________
2028+ 69D3              //
2029+ 69D3              // p!           c a --
2030+ 69D3              // Send one byte (top of stack) to port a
2031+ 69D3                              New_Def PSTORE, "P!", is_code, is_normal
2031+ 69D3             >
2031+ 69D3             >Dict_Ptr        defl    $
2031+ 69D3             >
2031+ 69D3             >//              ______________________________________________________________________
2031+ 69D3             >//              Heap part
2031+ 69D3             >
2031+ 69D3             >
2031+ 69D3             >                org     (Heap_Ptr & $1FFF) + $E000
2031+ E393             >
2031+ E393             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2031+ E393             >Latest_Definition defl  Heap_Ptr
2031+ E393             >
2031+ E393             >                // dummy db directives used to calculate length of namec
2031+ E393 50 21       >                db      "P!"
2031+ E395             >len_NFA         defl    $ - temp_NFA
2031+ E395             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2031+ E393             >
2031+ E393 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2031+ E394 50 21       >                db      "P!"               // name string in 7-bit ascii, but
2031+ E396             >                org     $-1                 // alter last byte of Name just above to set
2031+ E395 A1          >                db      {b $} | END_BIT     // msb as name end
2031+ E396             >
2031+ E396 8C 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2031+ E398             >Prev_Ptr        defl    Heap_Ptr
2031+ E398             >
2031+ E398             >mirror_Ptr      defl    $
2031+ E398             >
2031+ E398 D5 69       >                dw      Dict_Ptr + 2        // xt
2031+ E39A             >Heap_Ptr        defl    $ - $E000           // save current HP
2031+ E39A             >
2031+ E39A             >Current_HP      defl  $ - $E000             // used to set HP once!
2031+ E39A             >
2031+ E39A             >//              ______________________________________________________________________
2031+ E39A             >//              Dictionary part
2031+ E39A             >
2031+ E39A             >                org     Dict_Ptr
2031+ 69D3             >
2031+ 69D3 98 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2031+ 69D5             >
2031+ 69D5             >PSTORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2031+ 69D5 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2031+ 69D5 ~           >
2031+ 69D5 ~           >
2031+ 69D5             >                endif           ; ok        // for other definitions it "points" the correct handler
2031+ 69D5             >                // Use of "; ok" to suppress "warning[fwdref]"
2031+ 69D5             >
2031+ 69D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2032+ 69D5 D9                           exx
2033+ 69D6 C1                           pop     bc
2034+ 69D7 E1                           pop     hl                  // < c
2035+ 69D8 ED 69                        out     (c), l              // low-byte
2036+ 69DA D9                           exx
2037+ 69DB                              next
2037+ 69DB DD E9       >                jp      (ix)
2038+ 69DD
2039+ 69DD
2040+ 69DD              //  ______________________________________________________________________
2041+ 69DD              //
2042+ 69DD              // 2*           n1 -- n2
2043+ 69DD              // doubles the number at top of stack
2044+ 69DD                              New_Def TWO_MUL, "2*", is_code, is_normal
2044+ 69DD             >
2044+ 69DD             >Dict_Ptr        defl    $
2044+ 69DD             >
2044+ 69DD             >//              ______________________________________________________________________
2044+ 69DD             >//              Heap part
2044+ 69DD             >
2044+ 69DD             >
2044+ 69DD             >                org     (Heap_Ptr & $1FFF) + $E000
2044+ E39A             >
2044+ E39A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2044+ E39A             >Latest_Definition defl  Heap_Ptr
2044+ E39A             >
2044+ E39A             >                // dummy db directives used to calculate length of namec
2044+ E39A 32 2A       >                db      "2*"
2044+ E39C             >len_NFA         defl    $ - temp_NFA
2044+ E39C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2044+ E39A             >
2044+ E39A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2044+ E39B 32 2A       >                db      "2*"               // name string in 7-bit ascii, but
2044+ E39D             >                org     $-1                 // alter last byte of Name just above to set
2044+ E39C AA          >                db      {b $} | END_BIT     // msb as name end
2044+ E39D             >
2044+ E39D 93 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2044+ E39F             >Prev_Ptr        defl    Heap_Ptr
2044+ E39F             >
2044+ E39F             >mirror_Ptr      defl    $
2044+ E39F             >
2044+ E39F DF 69       >                dw      Dict_Ptr + 2        // xt
2044+ E3A1             >Heap_Ptr        defl    $ - $E000           // save current HP
2044+ E3A1             >
2044+ E3A1             >Current_HP      defl  $ - $E000             // used to set HP once!
2044+ E3A1             >
2044+ E3A1             >//              ______________________________________________________________________
2044+ E3A1             >//              Dictionary part
2044+ E3A1             >
2044+ E3A1             >                org     Dict_Ptr
2044+ 69DD             >
2044+ 69DD 9F 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2044+ 69DF             >
2044+ 69DF             >TWO_MUL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2044+ 69DF ~           >                call    runcode ; ok        // for primitive definitions  actual code
2044+ 69DF ~           >
2044+ 69DF ~           >
2044+ 69DF             >                endif           ; ok        // for other definitions it "points" the correct handler
2044+ 69DF             >                // Use of "; ok" to suppress "warning[fwdref]"
2044+ 69DF             >
2044+ 69DF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2045+ 69DF              Two_Mul_Ptr:
2046+ 69DF E1                           pop     hl
2047+ 69E0 29                           add     hl, hl
2048+ 69E1
2049+ 69E1                              psh1
2049+ 69E1 E5          >                push    hl
2049+ 69E2 DD E9       >                jp      (ix)
2050+ 69E4
2051+ 69E4              //  ______________________________________________________________________
2052+ 69E4              //
2053+ 69E4              // 2/           n1 -- n2
2054+ 69E4              // halves the top of stack, sign is unchanged
2055+ 69E4                              New_Def TWO_DIV, "2/", is_code, is_normal
2055+ 69E4             >
2055+ 69E4             >Dict_Ptr        defl    $
2055+ 69E4             >
2055+ 69E4             >//              ______________________________________________________________________
2055+ 69E4             >//              Heap part
2055+ 69E4             >
2055+ 69E4             >
2055+ 69E4             >                org     (Heap_Ptr & $1FFF) + $E000
2055+ E3A1             >
2055+ E3A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2055+ E3A1             >Latest_Definition defl  Heap_Ptr
2055+ E3A1             >
2055+ E3A1             >                // dummy db directives used to calculate length of namec
2055+ E3A1 32 2F       >                db      "2/"
2055+ E3A3             >len_NFA         defl    $ - temp_NFA
2055+ E3A3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2055+ E3A1             >
2055+ E3A1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2055+ E3A2 32 2F       >                db      "2/"               // name string in 7-bit ascii, but
2055+ E3A4             >                org     $-1                 // alter last byte of Name just above to set
2055+ E3A3 AF          >                db      {b $} | END_BIT     // msb as name end
2055+ E3A4             >
2055+ E3A4 9A 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2055+ E3A6             >Prev_Ptr        defl    Heap_Ptr
2055+ E3A6             >
2055+ E3A6             >mirror_Ptr      defl    $
2055+ E3A6             >
2055+ E3A6 E6 69       >                dw      Dict_Ptr + 2        // xt
2055+ E3A8             >Heap_Ptr        defl    $ - $E000           // save current HP
2055+ E3A8             >
2055+ E3A8             >Current_HP      defl  $ - $E000             // used to set HP once!
2055+ E3A8             >
2055+ E3A8             >//              ______________________________________________________________________
2055+ E3A8             >//              Dictionary part
2055+ E3A8             >
2055+ E3A8             >                org     Dict_Ptr
2055+ 69E4             >
2055+ 69E4 A6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2055+ 69E6             >
2055+ 69E6             >TWO_DIV:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2055+ 69E6 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2055+ 69E6 ~           >
2055+ 69E6 ~           >
2055+ 69E6             >                endif           ; ok        // for other definitions it "points" the correct handler
2055+ 69E6             >                // Use of "; ok" to suppress "warning[fwdref]"
2055+ 69E6             >
2055+ 69E6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2056+ 69E6 E1                           pop     hl
2057+ 69E7 CB 2C                        sra     h
2058+ 69E9 CB 1D                        rr      l
2059+ 69EB
2060+ 69EB                              psh1
2060+ 69EB E5          >                push    hl
2060+ 69EC DD E9       >                jp      (ix)
2061+ 69EE
2062+ 69EE              //  ______________________________________________________________________
2063+ 69EE              //
2064+ 69EE              // lshift       n1 u -- n2
2065+ 69EE              // bit left shift of u bits
2066+ 69EE                              New_Def LSHIFT, "LSHIFT", is_code, is_normal
2066+ 69EE             >
2066+ 69EE             >Dict_Ptr        defl    $
2066+ 69EE             >
2066+ 69EE             >//              ______________________________________________________________________
2066+ 69EE             >//              Heap part
2066+ 69EE             >
2066+ 69EE             >
2066+ 69EE             >                org     (Heap_Ptr & $1FFF) + $E000
2066+ E3A8             >
2066+ E3A8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2066+ E3A8             >Latest_Definition defl  Heap_Ptr
2066+ E3A8             >
2066+ E3A8             >                // dummy db directives used to calculate length of namec
2066+ E3A8 4C 53 48 49 >                db      "LSHIFT"
2066+ E3AC 46 54       >
2066+ E3AE             >len_NFA         defl    $ - temp_NFA
2066+ E3AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2066+ E3A8             >
2066+ E3A8 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2066+ E3A9 4C 53 48 49 >                db      "LSHIFT"               // name string in 7-bit ascii, but
2066+ E3AD 46 54       >
2066+ E3AF             >                org     $-1                 // alter last byte of Name just above to set
2066+ E3AE D4          >                db      {b $} | END_BIT     // msb as name end
2066+ E3AF             >
2066+ E3AF A1 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2066+ E3B1             >Prev_Ptr        defl    Heap_Ptr
2066+ E3B1             >
2066+ E3B1             >mirror_Ptr      defl    $
2066+ E3B1             >
2066+ E3B1 F0 69       >                dw      Dict_Ptr + 2        // xt
2066+ E3B3             >Heap_Ptr        defl    $ - $E000           // save current HP
2066+ E3B3             >
2066+ E3B3             >Current_HP      defl  $ - $E000             // used to set HP once!
2066+ E3B3             >
2066+ E3B3             >//              ______________________________________________________________________
2066+ E3B3             >//              Dictionary part
2066+ E3B3             >
2066+ E3B3             >                org     Dict_Ptr
2066+ 69EE             >
2066+ 69EE B1 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2066+ 69F0             >
2066+ 69F0             >LSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2066+ 69F0 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2066+ 69F0 ~           >
2066+ 69F0 ~           >
2066+ 69F0             >                endif           ; ok        // for other definitions it "points" the correct handler
2066+ 69F0             >                // Use of "; ok" to suppress "warning[fwdref]"
2066+ 69F0             >
2066+ 69F0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2067+ 69F0 D9                           exx
2068+ 69F1 C1                           pop     bc
2069+ 69F2 41                           ld      b, c
2070+ 69F3 D1                           pop     de
2071+ 69F4 ED 28                        bsla    de, b
2072+ 69F6 D5                           push    de
2073+ 69F7 D9                           exx
2074+ 69F8                              next
2074+ 69F8 DD E9       >                jp      (ix)
2075+ 69FA
2076+ 69FA              //  ______________________________________________________________________
2077+ 69FA              //
2078+ 69FA              // rshift       n1 u -- n2
2079+ 69FA              // bit right shift of u bits
2080+ 69FA                              New_Def RSHIFT, "RSHIFT", is_code, is_normal
2080+ 69FA             >
2080+ 69FA             >Dict_Ptr        defl    $
2080+ 69FA             >
2080+ 69FA             >//              ______________________________________________________________________
2080+ 69FA             >//              Heap part
2080+ 69FA             >
2080+ 69FA             >
2080+ 69FA             >                org     (Heap_Ptr & $1FFF) + $E000
2080+ E3B3             >
2080+ E3B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2080+ E3B3             >Latest_Definition defl  Heap_Ptr
2080+ E3B3             >
2080+ E3B3             >                // dummy db directives used to calculate length of namec
2080+ E3B3 52 53 48 49 >                db      "RSHIFT"
2080+ E3B7 46 54       >
2080+ E3B9             >len_NFA         defl    $ - temp_NFA
2080+ E3B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2080+ E3B3             >
2080+ E3B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2080+ E3B4 52 53 48 49 >                db      "RSHIFT"               // name string in 7-bit ascii, but
2080+ E3B8 46 54       >
2080+ E3BA             >                org     $-1                 // alter last byte of Name just above to set
2080+ E3B9 D4          >                db      {b $} | END_BIT     // msb as name end
2080+ E3BA             >
2080+ E3BA A8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2080+ E3BC             >Prev_Ptr        defl    Heap_Ptr
2080+ E3BC             >
2080+ E3BC             >mirror_Ptr      defl    $
2080+ E3BC             >
2080+ E3BC FC 69       >                dw      Dict_Ptr + 2        // xt
2080+ E3BE             >Heap_Ptr        defl    $ - $E000           // save current HP
2080+ E3BE             >
2080+ E3BE             >Current_HP      defl  $ - $E000             // used to set HP once!
2080+ E3BE             >
2080+ E3BE             >//              ______________________________________________________________________
2080+ E3BE             >//              Dictionary part
2080+ E3BE             >
2080+ E3BE             >                org     Dict_Ptr
2080+ 69FA             >
2080+ 69FA BC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2080+ 69FC             >
2080+ 69FC             >RSHIFT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2080+ 69FC ~           >                call    runcode ; ok        // for primitive definitions  actual code
2080+ 69FC ~           >
2080+ 69FC ~           >
2080+ 69FC             >                endif           ; ok        // for other definitions it "points" the correct handler
2080+ 69FC             >                // Use of "; ok" to suppress "warning[fwdref]"
2080+ 69FC             >
2080+ 69FC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2081+ 69FC D9                           exx
2082+ 69FD C1                           pop     bc
2083+ 69FE 41                           ld      b, c
2084+ 69FF D1                           pop     de
2085+ 6A00 ED 2A                        bsrl    de, b
2086+ 6A02 D5                           push    de
2087+ 6A03 D9                           exx
2088+ 6A04                              next
2088+ 6A04 DD E9       >                jp      (ix)
2089+ 6A06
2090+ 6A06              //  ______________________________________________________________________
2091+ 6A06              //
2092+ 6A06              // cells        n1 -- n2
2093+ 6A06              // decrement by 2 top of stack
2094+ 6A06                              New_Def CELLS, "CELLS", is_code, is_normal
2094+ 6A06             >
2094+ 6A06             >Dict_Ptr        defl    $
2094+ 6A06             >
2094+ 6A06             >//              ______________________________________________________________________
2094+ 6A06             >//              Heap part
2094+ 6A06             >
2094+ 6A06             >
2094+ 6A06             >                org     (Heap_Ptr & $1FFF) + $E000
2094+ E3BE             >
2094+ E3BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
2094+ E3BE             >Latest_Definition defl  Heap_Ptr
2094+ E3BE             >
2094+ E3BE             >                // dummy db directives used to calculate length of namec
2094+ E3BE 43 45 4C 4C >                db      "CELLS"
2094+ E3C2 53          >
2094+ E3C3             >len_NFA         defl    $ - temp_NFA
2094+ E3C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
2094+ E3BE             >
2094+ E3BE 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
2094+ E3BF 43 45 4C 4C >                db      "CELLS"               // name string in 7-bit ascii, but
2094+ E3C3 53          >
2094+ E3C4             >                org     $-1                 // alter last byte of Name just above to set
2094+ E3C3 D3          >                db      {b $} | END_BIT     // msb as name end
2094+ E3C4             >
2094+ E3C4 B3 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
2094+ E3C6             >Prev_Ptr        defl    Heap_Ptr
2094+ E3C6             >
2094+ E3C6             >mirror_Ptr      defl    $
2094+ E3C6             >
2094+ E3C6 08 6A       >                dw      Dict_Ptr + 2        // xt
2094+ E3C8             >Heap_Ptr        defl    $ - $E000           // save current HP
2094+ E3C8             >
2094+ E3C8             >Current_HP      defl  $ - $E000             // used to set HP once!
2094+ E3C8             >
2094+ E3C8             >//              ______________________________________________________________________
2094+ E3C8             >//              Dictionary part
2094+ E3C8             >
2094+ E3C8             >                org     Dict_Ptr
2094+ 6A06             >
2094+ 6A06 C6 03       >                dw      mirror_Ptr - $E000 + Heap_offset
2094+ 6A08             >
2094+ 6A08             >CELLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
2094+ 6A08 ~           >                call    runcode ; ok        // for primitive definitions  actual code
2094+ 6A08 ~           >
2094+ 6A08 ~           >
2094+ 6A08             >                endif           ; ok        // for other definitions it "points" the correct handler
2094+ 6A08             >                // Use of "; ok" to suppress "warning[fwdref]"
2094+ 6A08             >
2094+ 6A08             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
2095+ 6A08 18 D5                        jr      Two_Mul_Ptr
2096+ 6A0A
2097+ 6A0A
2098+ 6A0A              //  ______________________________________________________________________
2099+ 6A0A
2100+ 6A0A
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L0.asm
 140  6A0A                              include "L1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L1.asm
   1+ 6A0A              //  ______________________________________________________________________
   2+ 6A0A              //
   3+ 6A0A              //  L1.asm
   4+ 6A0A              //
   5+ 6A0A              //  Level-1 definitions and derivate
   6+ 6A0A              //  ______________________________________________________________________
   7+ 6A0A
   8+ 6A0A              //  ______________________________________________________________________
   9+ 6A0A              //
  10+ 6A0A              // :            -- cccc     ( compile time )
  11+ 6A0A              //              i*x -- j*x  ( run time )
  12+ 6A0A              // Colon Definition
  13+ 6A0A                              Colon_Def COLON, ":", is_normal      // has forward-ref
  13+ 6A0A             >                New_Def  COLON, ":", Enter_Ptr, is_normal ; ok
  13+ 6A0A             >
  13+ 6A0A             >Dict_Ptr        defl    $
  13+ 6A0A             >
  13+ 6A0A             >//              ______________________________________________________________________
  13+ 6A0A             >//              Heap part
  13+ 6A0A             >
  13+ 6A0A             >
  13+ 6A0A             >                org     (Heap_Ptr & $1FFF) + $E000
  13+ E3C8             >
  13+ E3C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  13+ E3C8             >Latest_Definition defl  Heap_Ptr
  13+ E3C8             >
  13+ E3C8             >                // dummy db directives used to calculate length of namec
  13+ E3C8 3A          >                db      ":"
  13+ E3C9             >len_NFA         defl    $ - temp_NFA
  13+ E3C9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  13+ E3C8             >
  13+ E3C8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  13+ E3C9 3A          >                db      ":"               // name string in 7-bit ascii, but
  13+ E3CA             >                org     $-1                 // alter last byte of Name just above to set
  13+ E3C9 BA          >                db      {b $} | END_BIT     // msb as name end
  13+ E3CA             >
  13+ E3CA BE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  13+ E3CC             >Prev_Ptr        defl    Heap_Ptr
  13+ E3CC             >
  13+ E3CC             >mirror_Ptr      defl    $
  13+ E3CC             >
  13+ E3CC 0C 6A       >                dw      Dict_Ptr + 2        // xt
  13+ E3CE             >Heap_Ptr        defl    $ - $E000           // save current HP
  13+ E3CE             >
  13+ E3CE             >Current_HP      defl  $ - $E000             // used to set HP once!
  13+ E3CE             >
  13+ E3CE             >//              ______________________________________________________________________
  13+ E3CE             >//              Dictionary part
  13+ E3CE             >
  13+ E3CE             >                org     Dict_Ptr
  13+ 6A0A             >
  13+ 6A0A CC 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  13+ 6A0C             >
  13+ 6A0C             >COLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  13+ 6A0C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  13+ 6A0F             >
  13+ 6A0F             >
  13+ 6A0F             >                endif           ; ok        // for other definitions it "points" the correct handler
  13+ 6A0F             >                // Use of "; ok" to suppress "warning[fwdref]"
  13+ 6A0F             >
  13+ 6A0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  14+ 6A0F
  15+ 6A0F F9 6D                        dw      QEXEC                   // ?exec
  16+ 6A11 C4 6D                        dw      STORE_CSP               // !csp
  17+ 6A13 3D 6B 86 69                  dw      CURRENT, FETCH          // current @
  18+ 6A17 37 6B 90 69                  dw      CONTEXT, STORE          // context !
  19+ 6A1B F0 73                        dw      CREATE                  // create  ( forward )
  20+ 6A1D 7B 6E                        dw      SMUDGE                  // dmudge
  21+ 6A1F 6C 6E                        dw      SQUARED_CLOSE           // ]
  22+ 6A21 B7 6E                        dw      C_SEMICOLON_CODE        // ;code ( change the 3-bytes CFA of defining word to call Enter_Ptr )
  23+ 6A23                                                              // ... immediate
  24+ 6A23              Enter_Ptr:
  25+ 6A23                              // via call coded in CFA
  26+ 6A23 EB                           ex      de, hl //**
  27+ 6A24                              // *** ldhlrp
  28+ 6A24 2B                           dec     hl                  // push on Return-Stack current Instruction-Pointer
  29+ 6A25 70                           ld      (hl), b
  30+ 6A26 2B                           dec     hl
  31+ 6A27 71                           ld      (hl), c
  32+ 6A28                              // *** ldrphl
  33+ 6A28 EB                           ex      de, hl //**
  34+ 6A29
  35+ 6A29
  36+ 6A29 C1                           pop     bc                  // points to PFA of "this" word
  37+ 6A2A                              next
  37+ 6A2A DD E9       >                jp      (ix)
  38+ 6A2C
  39+ 6A2C              //  ______________________________________________________________________
  40+ 6A2C              //
  41+ 6A2C              // ;            --
  42+ 6A2C              // Semicolon. End of Colon-Definition. Stack must be balanced.
  43+ 6A2C                              Colon_Def SEMICOLON, ";", is_immediate   // has forward-ref
  43+ 6A2C             >                New_Def  SEMICOLON, ";", Enter_Ptr, is_immediate ; ok
  43+ 6A2C             >
  43+ 6A2C             >Dict_Ptr        defl    $
  43+ 6A2C             >
  43+ 6A2C             >//              ______________________________________________________________________
  43+ 6A2C             >//              Heap part
  43+ 6A2C             >
  43+ 6A2C             >
  43+ 6A2C             >                org     (Heap_Ptr & $1FFF) + $E000
  43+ E3CE             >
  43+ E3CE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  43+ E3CE             >Latest_Definition defl  Heap_Ptr
  43+ E3CE             >
  43+ E3CE             >                // dummy db directives used to calculate length of namec
  43+ E3CE 3B          >                db      ";"
  43+ E3CF             >len_NFA         defl    $ - temp_NFA
  43+ E3CF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  43+ E3CE             >
  43+ E3CE C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
  43+ E3CF 3B          >                db      ";"               // name string in 7-bit ascii, but
  43+ E3D0             >                org     $-1                 // alter last byte of Name just above to set
  43+ E3CF BB          >                db      {b $} | END_BIT     // msb as name end
  43+ E3D0             >
  43+ E3D0 C8 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  43+ E3D2             >Prev_Ptr        defl    Heap_Ptr
  43+ E3D2             >
  43+ E3D2             >mirror_Ptr      defl    $
  43+ E3D2             >
  43+ E3D2 2E 6A       >                dw      Dict_Ptr + 2        // xt
  43+ E3D4             >Heap_Ptr        defl    $ - $E000           // save current HP
  43+ E3D4             >
  43+ E3D4             >Current_HP      defl  $ - $E000             // used to set HP once!
  43+ E3D4             >
  43+ E3D4             >//              ______________________________________________________________________
  43+ E3D4             >//              Dictionary part
  43+ E3D4             >
  43+ E3D4             >                org     Dict_Ptr
  43+ 6A2C             >
  43+ 6A2C D2 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  43+ 6A2E             >
  43+ 6A2E             >SEMICOLON:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  43+ 6A2E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  43+ 6A31             >
  43+ 6A31             >
  43+ 6A31             >                endif           ; ok        // for other definitions it "points" the correct handler
  43+ 6A31             >                // Use of "; ok" to suppress "warning[fwdref]"
  43+ 6A31             >
  43+ 6A31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  44+ 6A31
  45+ 6A31 19 6E                        dw      QCSP                    // ?csp
  46+ 6A33 41 6E 51 68                  dw      COMPILE, EXIT           // [compile] ;s
  47+ 6A37 7B 6E                        dw      SMUDGE                  // smudge
  48+ 6A39 5F 6E                        dw      SQUARED_OPEN            // [
  49+ 6A3B 51 68                        dw      EXIT                    // ; immediate
  50+ 6A3D
  51+ 6A3D              //  ______________________________________________________________________
  52+ 6A3D              //
  53+ 6A3D              // noop         --
  54+ 6A3D
  55+ 6A3D                              New_Def NOOP, "NOOP", is_code, is_normal
  55+ 6A3D             >
  55+ 6A3D             >Dict_Ptr        defl    $
  55+ 6A3D             >
  55+ 6A3D             >//              ______________________________________________________________________
  55+ 6A3D             >//              Heap part
  55+ 6A3D             >
  55+ 6A3D             >
  55+ 6A3D             >                org     (Heap_Ptr & $1FFF) + $E000
  55+ E3D4             >
  55+ E3D4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  55+ E3D4             >Latest_Definition defl  Heap_Ptr
  55+ E3D4             >
  55+ E3D4             >                // dummy db directives used to calculate length of namec
  55+ E3D4 4E 4F 4F 50 >                db      "NOOP"
  55+ E3D8             >len_NFA         defl    $ - temp_NFA
  55+ E3D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  55+ E3D4             >
  55+ E3D4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  55+ E3D5 4E 4F 4F 50 >                db      "NOOP"               // name string in 7-bit ascii, but
  55+ E3D9             >                org     $-1                 // alter last byte of Name just above to set
  55+ E3D8 D0          >                db      {b $} | END_BIT     // msb as name end
  55+ E3D9             >
  55+ E3D9 CE 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  55+ E3DB             >Prev_Ptr        defl    Heap_Ptr
  55+ E3DB             >
  55+ E3DB             >mirror_Ptr      defl    $
  55+ E3DB             >
  55+ E3DB 3F 6A       >                dw      Dict_Ptr + 2        // xt
  55+ E3DD             >Heap_Ptr        defl    $ - $E000           // save current HP
  55+ E3DD             >
  55+ E3DD             >Current_HP      defl  $ - $E000             // used to set HP once!
  55+ E3DD             >
  55+ E3DD             >//              ______________________________________________________________________
  55+ E3DD             >//              Dictionary part
  55+ E3DD             >
  55+ E3DD             >                org     Dict_Ptr
  55+ 6A3D             >
  55+ 6A3D DB 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  55+ 6A3F             >
  55+ 6A3F             >NOOP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  55+ 6A3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
  55+ 6A3F ~           >
  55+ 6A3F ~           >
  55+ 6A3F             >                endif           ; ok        // for other definitions it "points" the correct handler
  55+ 6A3F             >                // Use of "; ok" to suppress "warning[fwdref]"
  55+ 6A3F             >
  55+ 6A3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  56+ 6A3F                              next
  56+ 6A3F DD E9       >                jp      (ix)
  57+ 6A41
  58+ 6A41              //  ______________________________________________________________________
  59+ 6A41              //
  60+ 6A41              // constant     n -- cccc     ( compile time )
  61+ 6A41              //              -- n          ( run time )
  62+ 6A41              // Constant definition.
  63+ 6A41                              Colon_Def CONSTANT, "CONSTANT", is_normal   // has forward-ref
  63+ 6A41             >                New_Def  CONSTANT, "CONSTANT", Enter_Ptr, is_normal ; ok
  63+ 6A41             >
  63+ 6A41             >Dict_Ptr        defl    $
  63+ 6A41             >
  63+ 6A41             >//              ______________________________________________________________________
  63+ 6A41             >//              Heap part
  63+ 6A41             >
  63+ 6A41             >
  63+ 6A41             >                org     (Heap_Ptr & $1FFF) + $E000
  63+ E3DD             >
  63+ E3DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  63+ E3DD             >Latest_Definition defl  Heap_Ptr
  63+ E3DD             >
  63+ E3DD             >                // dummy db directives used to calculate length of namec
  63+ E3DD 43 4F 4E 53 >                db      "CONSTANT"
  63+ E3E1 54 41 4E 54 >
  63+ E3E5             >len_NFA         defl    $ - temp_NFA
  63+ E3E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  63+ E3DD             >
  63+ E3DD 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  63+ E3DE 43 4F 4E 53 >                db      "CONSTANT"               // name string in 7-bit ascii, but
  63+ E3E2 54 41 4E 54 >
  63+ E3E6             >                org     $-1                 // alter last byte of Name just above to set
  63+ E3E5 D4          >                db      {b $} | END_BIT     // msb as name end
  63+ E3E6             >
  63+ E3E6 D4 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  63+ E3E8             >Prev_Ptr        defl    Heap_Ptr
  63+ E3E8             >
  63+ E3E8             >mirror_Ptr      defl    $
  63+ E3E8             >
  63+ E3E8 43 6A       >                dw      Dict_Ptr + 2        // xt
  63+ E3EA             >Heap_Ptr        defl    $ - $E000           // save current HP
  63+ E3EA             >
  63+ E3EA             >Current_HP      defl  $ - $E000             // used to set HP once!
  63+ E3EA             >
  63+ E3EA             >//              ______________________________________________________________________
  63+ E3EA             >//              Dictionary part
  63+ E3EA             >
  63+ E3EA             >                org     Dict_Ptr
  63+ 6A41             >
  63+ 6A41 E8 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  63+ 6A43             >
  63+ 6A43             >CONSTANT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  63+ 6A43 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  63+ 6A46             >
  63+ 6A46             >
  63+ 6A46             >                endif           ; ok        // for other definitions it "points" the correct handler
  63+ 6A46             >                // Use of "; ok" to suppress "warning[fwdref]"
  63+ 6A46             >
  63+ 6A46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  64+ 6A46 F0 73                        dw      CREATE                  // create
  65+ 6A48 B3 6B                        dw      COMMA                   // ,    ( at PFA then, store the value )
  66+ 6A4A B7 6E                        dw      C_SEMICOLON_CODE        // ;code (  changes the 3-bytes CFA to call Constant_Ptr )
  67+ 6A4C              Constant_Ptr:
  68+ 6A4C
  69+ 6A4C
  70+ 6A4C E1                           pop     hl
  71+ 6A4D
  72+ 6A4D 7E                           ld      a, (hl)
  73+ 6A4E 23                           inc     hl
  74+ 6A4F 66                           ld      h, (hl)
  75+ 6A50 6F                           ld      l, a
  76+ 6A51 E5                           push    hl
  77+ 6A52                              next
  77+ 6A52 DD E9       >                jp      (ix)
  78+ 6A54
  79+ 6A54              //  ______________________________________________________________________
  80+ 6A54              //
  81+ 6A54              // variable     n -- cccc     ( compile time )
  82+ 6A54              //              -- a          ( run time )
  83+ 6A54              // Variable definition, n is the initial value.
  84+ 6A54                              Colon_Def VARIABLE, "VARIABLE", is_normal   // has forward-ref
  84+ 6A54             >                New_Def  VARIABLE, "VARIABLE", Enter_Ptr, is_normal ; ok
  84+ 6A54             >
  84+ 6A54             >Dict_Ptr        defl    $
  84+ 6A54             >
  84+ 6A54             >//              ______________________________________________________________________
  84+ 6A54             >//              Heap part
  84+ 6A54             >
  84+ 6A54             >
  84+ 6A54             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E3EA             >
  84+ E3EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E3EA             >Latest_Definition defl  Heap_Ptr
  84+ E3EA             >
  84+ E3EA             >                // dummy db directives used to calculate length of namec
  84+ E3EA 56 41 52 49 >                db      "VARIABLE"
  84+ E3EE 41 42 4C 45 >
  84+ E3F2             >len_NFA         defl    $ - temp_NFA
  84+ E3F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E3EA             >
  84+ E3EA 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E3EB 56 41 52 49 >                db      "VARIABLE"               // name string in 7-bit ascii, but
  84+ E3EF 41 42 4C 45 >
  84+ E3F3             >                org     $-1                 // alter last byte of Name just above to set
  84+ E3F2 C5          >                db      {b $} | END_BIT     // msb as name end
  84+ E3F3             >
  84+ E3F3 DD 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E3F5             >Prev_Ptr        defl    Heap_Ptr
  84+ E3F5             >
  84+ E3F5             >mirror_Ptr      defl    $
  84+ E3F5             >
  84+ E3F5 56 6A       >                dw      Dict_Ptr + 2        // xt
  84+ E3F7             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E3F7             >
  84+ E3F7             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E3F7             >
  84+ E3F7             >//              ______________________________________________________________________
  84+ E3F7             >//              Dictionary part
  84+ E3F7             >
  84+ E3F7             >                org     Dict_Ptr
  84+ 6A54             >
  84+ 6A54 F5 03       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 6A56             >
  84+ 6A56             >VARIABLE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 6A56 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 6A59             >
  84+ 6A59             >
  84+ 6A59             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 6A59             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 6A59             >
  84+ 6A59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 6A59
  86+ 6A59 78 6A                        dw      ZERO
  87+ 6A5B 43 6A                        dw      CONSTANT                // constant
  88+ 6A5D B7 6E                        dw      C_SEMICOLON_CODE        // ;code ( changes the 3-bytes CFA to call Variable_Ptr )
  89+ 6A5F              Variable_Ptr:
  90+ 6A5F
  91+ 6A5F
  92+ 6A5F
  93+ 6A5F
  94+ 6A5F                              next
  94+ 6A5F DD E9       >                jp      (ix)
  95+ 6A61
  96+ 6A61              //  ______________________________________________________________________
  97+ 6A61              //
  98+ 6A61              // user         b -- cccc     ( compile time )
  99+ 6A61              //              -- a          ( run time )
 100+ 6A61              // User variable definition
 101+ 6A61                              Colon_Def USER, "USER", is_normal
 101+ 6A61             >                New_Def  USER, "USER", Enter_Ptr, is_normal ; ok
 101+ 6A61             >
 101+ 6A61             >Dict_Ptr        defl    $
 101+ 6A61             >
 101+ 6A61             >//              ______________________________________________________________________
 101+ 6A61             >//              Heap part
 101+ 6A61             >
 101+ 6A61             >
 101+ 6A61             >                org     (Heap_Ptr & $1FFF) + $E000
 101+ E3F7             >
 101+ E3F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 101+ E3F7             >Latest_Definition defl  Heap_Ptr
 101+ E3F7             >
 101+ E3F7             >                // dummy db directives used to calculate length of namec
 101+ E3F7 55 53 45 52 >                db      "USER"
 101+ E3FB             >len_NFA         defl    $ - temp_NFA
 101+ E3FB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 101+ E3F7             >
 101+ E3F7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 101+ E3F8 55 53 45 52 >                db      "USER"               // name string in 7-bit ascii, but
 101+ E3FC             >                org     $-1                 // alter last byte of Name just above to set
 101+ E3FB D2          >                db      {b $} | END_BIT     // msb as name end
 101+ E3FC             >
 101+ E3FC EA 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 101+ E3FE             >Prev_Ptr        defl    Heap_Ptr
 101+ E3FE             >
 101+ E3FE             >mirror_Ptr      defl    $
 101+ E3FE             >
 101+ E3FE 63 6A       >                dw      Dict_Ptr + 2        // xt
 101+ E400             >Heap_Ptr        defl    $ - $E000           // save current HP
 101+ E400             >
 101+ E400             >Current_HP      defl  $ - $E000             // used to set HP once!
 101+ E400             >
 101+ E400             >//              ______________________________________________________________________
 101+ E400             >//              Dictionary part
 101+ E400             >
 101+ E400             >                org     Dict_Ptr
 101+ 6A61             >
 101+ 6A61 FE 03       >                dw      mirror_Ptr - $E000 + Heap_offset
 101+ 6A63             >
 101+ 6A63             >USER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 101+ 6A63 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 101+ 6A66             >
 101+ 6A66             >
 101+ 6A66             >                endif           ; ok        // for other definitions it "points" the correct handler
 101+ 6A66             >                // Use of "; ok" to suppress "warning[fwdref]"
 101+ 6A66             >
 101+ 6A66             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 102+ 6A66
 103+ 6A66 F0 73                        dw      CREATE                  // create
 104+ 6A68 C2 6B                        dw      CCOMMA                  // c,
 105+ 6A6A B7 6E                        dw      C_SEMICOLON_CODE        // ;code () changes the 3-bytes CFA to call User_Ptr )
 106+ 6A6C
 107+ 6A6C
 108+ 6A6C              User_Ptr:
 109+ 6A6C                              // via call coded in CFA
 110+ 6A6C E1                           pop     hl
 111+ 6A6D
 112+ 6A6D 7E                           ld      a, (hl)
 113+ 6A6E 2A 94 63                     ld      hl, (USER_Pointer)
 114+ 6A71 ED 31                        add     hl, a
 115+ 6A73 E5                           push    hl
 116+ 6A74                              next
 116+ 6A74 DD E9       >                jp      (ix)
 117+ 6A76
 118+ 6A76              //  ______________________________________________________________________
 119+ 6A76              //
 120+ 6A76                              Constant_Def ZERO       ,   "0"     ,   0
 120+ 6A76             >                New_Def  ZERO, "0", Constant_Ptr, is_normal
 120+ 6A76             >
 120+ 6A76             >Dict_Ptr        defl    $
 120+ 6A76             >
 120+ 6A76             >//              ______________________________________________________________________
 120+ 6A76             >//              Heap part
 120+ 6A76             >
 120+ 6A76             >
 120+ 6A76             >                org     (Heap_Ptr & $1FFF) + $E000
 120+ E400             >
 120+ E400             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 120+ E400             >Latest_Definition defl  Heap_Ptr
 120+ E400             >
 120+ E400             >                // dummy db directives used to calculate length of namec
 120+ E400 30          >                db      "0"
 120+ E401             >len_NFA         defl    $ - temp_NFA
 120+ E401             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 120+ E400             >
 120+ E400 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 120+ E401 30          >                db      "0"               // name string in 7-bit ascii, but
 120+ E402             >                org     $-1                 // alter last byte of Name just above to set
 120+ E401 B0          >                db      {b $} | END_BIT     // msb as name end
 120+ E402             >
 120+ E402 F7 03       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 120+ E404             >Prev_Ptr        defl    Heap_Ptr
 120+ E404             >
 120+ E404             >mirror_Ptr      defl    $
 120+ E404             >
 120+ E404 78 6A       >                dw      Dict_Ptr + 2        // xt
 120+ E406             >Heap_Ptr        defl    $ - $E000           // save current HP
 120+ E406             >
 120+ E406             >Current_HP      defl  $ - $E000             // used to set HP once!
 120+ E406             >
 120+ E406             >//              ______________________________________________________________________
 120+ E406             >//              Dictionary part
 120+ E406             >
 120+ E406             >                org     Dict_Ptr
 120+ 6A76             >
 120+ 6A76 04 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 120+ 6A78             >
 120+ 6A78             >ZERO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 120+ 6A78 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 120+ 6A7B             >
 120+ 6A7B             >
 120+ 6A7B             >                endif           ; ok        // for other definitions it "points" the correct handler
 120+ 6A7B             >                // Use of "; ok" to suppress "warning[fwdref]"
 120+ 6A7B             >
 120+ 6A7B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 6A7B 00 00       >                dw      0
 121+ 6A7D                              Constant_Def ONE        ,   "1"     ,   1
 121+ 6A7D             >                New_Def  ONE, "1", Constant_Ptr, is_normal
 121+ 6A7D             >
 121+ 6A7D             >Dict_Ptr        defl    $
 121+ 6A7D             >
 121+ 6A7D             >//              ______________________________________________________________________
 121+ 6A7D             >//              Heap part
 121+ 6A7D             >
 121+ 6A7D             >
 121+ 6A7D             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ E406             >
 121+ E406             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ E406             >Latest_Definition defl  Heap_Ptr
 121+ E406             >
 121+ E406             >                // dummy db directives used to calculate length of namec
 121+ E406 31          >                db      "1"
 121+ E407             >len_NFA         defl    $ - temp_NFA
 121+ E407             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ E406             >
 121+ E406 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ E407 31          >                db      "1"               // name string in 7-bit ascii, but
 121+ E408             >                org     $-1                 // alter last byte of Name just above to set
 121+ E407 B1          >                db      {b $} | END_BIT     // msb as name end
 121+ E408             >
 121+ E408 00 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ E40A             >Prev_Ptr        defl    Heap_Ptr
 121+ E40A             >
 121+ E40A             >mirror_Ptr      defl    $
 121+ E40A             >
 121+ E40A 7F 6A       >                dw      Dict_Ptr + 2        // xt
 121+ E40C             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ E40C             >
 121+ E40C             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ E40C             >
 121+ E40C             >//              ______________________________________________________________________
 121+ E40C             >//              Dictionary part
 121+ E40C             >
 121+ E40C             >                org     Dict_Ptr
 121+ 6A7D             >
 121+ 6A7D 0A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 6A7F             >
 121+ 6A7F             >ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 6A7F CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 121+ 6A82             >
 121+ 6A82             >
 121+ 6A82             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 6A82             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 6A82             >
 121+ 6A82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 6A82 01 00       >                dw      1
 122+ 6A84                              Constant_Def TWO        ,   "2"     ,   2
 122+ 6A84             >                New_Def  TWO, "2", Constant_Ptr, is_normal
 122+ 6A84             >
 122+ 6A84             >Dict_Ptr        defl    $
 122+ 6A84             >
 122+ 6A84             >//              ______________________________________________________________________
 122+ 6A84             >//              Heap part
 122+ 6A84             >
 122+ 6A84             >
 122+ 6A84             >                org     (Heap_Ptr & $1FFF) + $E000
 122+ E40C             >
 122+ E40C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 122+ E40C             >Latest_Definition defl  Heap_Ptr
 122+ E40C             >
 122+ E40C             >                // dummy db directives used to calculate length of namec
 122+ E40C 32          >                db      "2"
 122+ E40D             >len_NFA         defl    $ - temp_NFA
 122+ E40D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 122+ E40C             >
 122+ E40C 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 122+ E40D 32          >                db      "2"               // name string in 7-bit ascii, but
 122+ E40E             >                org     $-1                 // alter last byte of Name just above to set
 122+ E40D B2          >                db      {b $} | END_BIT     // msb as name end
 122+ E40E             >
 122+ E40E 06 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 122+ E410             >Prev_Ptr        defl    Heap_Ptr
 122+ E410             >
 122+ E410             >mirror_Ptr      defl    $
 122+ E410             >
 122+ E410 86 6A       >                dw      Dict_Ptr + 2        // xt
 122+ E412             >Heap_Ptr        defl    $ - $E000           // save current HP
 122+ E412             >
 122+ E412             >Current_HP      defl  $ - $E000             // used to set HP once!
 122+ E412             >
 122+ E412             >//              ______________________________________________________________________
 122+ E412             >//              Dictionary part
 122+ E412             >
 122+ E412             >                org     Dict_Ptr
 122+ 6A84             >
 122+ 6A84 10 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 122+ 6A86             >
 122+ 6A86             >TWO:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 122+ 6A86 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 122+ 6A89             >
 122+ 6A89             >
 122+ 6A89             >                endif           ; ok        // for other definitions it "points" the correct handler
 122+ 6A89             >                // Use of "; ok" to suppress "warning[fwdref]"
 122+ 6A89             >
 122+ 6A89             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 122+ 6A89 02 00       >                dw      2
 123+ 6A8B                              Constant_Def THREE      ,   "3"     ,   3
 123+ 6A8B             >                New_Def  THREE, "3", Constant_Ptr, is_normal
 123+ 6A8B             >
 123+ 6A8B             >Dict_Ptr        defl    $
 123+ 6A8B             >
 123+ 6A8B             >//              ______________________________________________________________________
 123+ 6A8B             >//              Heap part
 123+ 6A8B             >
 123+ 6A8B             >
 123+ 6A8B             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ E412             >
 123+ E412             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ E412             >Latest_Definition defl  Heap_Ptr
 123+ E412             >
 123+ E412             >                // dummy db directives used to calculate length of namec
 123+ E412 33          >                db      "3"
 123+ E413             >len_NFA         defl    $ - temp_NFA
 123+ E413             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ E412             >
 123+ E412 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ E413 33          >                db      "3"               // name string in 7-bit ascii, but
 123+ E414             >                org     $-1                 // alter last byte of Name just above to set
 123+ E413 B3          >                db      {b $} | END_BIT     // msb as name end
 123+ E414             >
 123+ E414 0C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ E416             >Prev_Ptr        defl    Heap_Ptr
 123+ E416             >
 123+ E416             >mirror_Ptr      defl    $
 123+ E416             >
 123+ E416 8D 6A       >                dw      Dict_Ptr + 2        // xt
 123+ E418             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ E418             >
 123+ E418             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ E418             >
 123+ E418             >//              ______________________________________________________________________
 123+ E418             >//              Dictionary part
 123+ E418             >
 123+ E418             >                org     Dict_Ptr
 123+ 6A8B             >
 123+ 6A8B 16 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 6A8D             >
 123+ 6A8D             >THREE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 6A8D CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 123+ 6A90             >
 123+ 6A90             >
 123+ 6A90             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 6A90             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 6A90             >
 123+ 6A90             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 123+ 6A90 03 00       >                dw      3
 124+ 6A92                              Constant_Def NEG_ONE    ,   "-1"    ,  -1
 124+ 6A92             >                New_Def  NEG_ONE, "-1", Constant_Ptr, is_normal
 124+ 6A92             >
 124+ 6A92             >Dict_Ptr        defl    $
 124+ 6A92             >
 124+ 6A92             >//              ______________________________________________________________________
 124+ 6A92             >//              Heap part
 124+ 6A92             >
 124+ 6A92             >
 124+ 6A92             >                org     (Heap_Ptr & $1FFF) + $E000
 124+ E418             >
 124+ E418             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 124+ E418             >Latest_Definition defl  Heap_Ptr
 124+ E418             >
 124+ E418             >                // dummy db directives used to calculate length of namec
 124+ E418 2D 31       >                db      "-1"
 124+ E41A             >len_NFA         defl    $ - temp_NFA
 124+ E41A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 124+ E418             >
 124+ E418 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 124+ E419 2D 31       >                db      "-1"               // name string in 7-bit ascii, but
 124+ E41B             >                org     $-1                 // alter last byte of Name just above to set
 124+ E41A B1          >                db      {b $} | END_BIT     // msb as name end
 124+ E41B             >
 124+ E41B 12 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 124+ E41D             >Prev_Ptr        defl    Heap_Ptr
 124+ E41D             >
 124+ E41D             >mirror_Ptr      defl    $
 124+ E41D             >
 124+ E41D 94 6A       >                dw      Dict_Ptr + 2        // xt
 124+ E41F             >Heap_Ptr        defl    $ - $E000           // save current HP
 124+ E41F             >
 124+ E41F             >Current_HP      defl  $ - $E000             // used to set HP once!
 124+ E41F             >
 124+ E41F             >//              ______________________________________________________________________
 124+ E41F             >//              Dictionary part
 124+ E41F             >
 124+ E41F             >                org     Dict_Ptr
 124+ 6A92             >
 124+ 6A92 1D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 124+ 6A94             >
 124+ 6A94             >NEG_ONE:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 124+ 6A94 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 124+ 6A97             >
 124+ 6A97             >
 124+ 6A97             >                endif           ; ok        // for other definitions it "points" the correct handler
 124+ 6A97             >                // Use of "; ok" to suppress "warning[fwdref]"
 124+ 6A97             >
 124+ 6A97             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 6A97 FF FF       >                dw      -1
 125+ 6A99                              Constant_Def BL         ,   "BL"    , $20
 125+ 6A99             >                New_Def  BL, "BL", Constant_Ptr, is_normal
 125+ 6A99             >
 125+ 6A99             >Dict_Ptr        defl    $
 125+ 6A99             >
 125+ 6A99             >//              ______________________________________________________________________
 125+ 6A99             >//              Heap part
 125+ 6A99             >
 125+ 6A99             >
 125+ 6A99             >                org     (Heap_Ptr & $1FFF) + $E000
 125+ E41F             >
 125+ E41F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 125+ E41F             >Latest_Definition defl  Heap_Ptr
 125+ E41F             >
 125+ E41F             >                // dummy db directives used to calculate length of namec
 125+ E41F 42 4C       >                db      "BL"
 125+ E421             >len_NFA         defl    $ - temp_NFA
 125+ E421             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 125+ E41F             >
 125+ E41F 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 125+ E420 42 4C       >                db      "BL"               // name string in 7-bit ascii, but
 125+ E422             >                org     $-1                 // alter last byte of Name just above to set
 125+ E421 CC          >                db      {b $} | END_BIT     // msb as name end
 125+ E422             >
 125+ E422 18 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 125+ E424             >Prev_Ptr        defl    Heap_Ptr
 125+ E424             >
 125+ E424             >mirror_Ptr      defl    $
 125+ E424             >
 125+ E424 9B 6A       >                dw      Dict_Ptr + 2        // xt
 125+ E426             >Heap_Ptr        defl    $ - $E000           // save current HP
 125+ E426             >
 125+ E426             >Current_HP      defl  $ - $E000             // used to set HP once!
 125+ E426             >
 125+ E426             >//              ______________________________________________________________________
 125+ E426             >//              Dictionary part
 125+ E426             >
 125+ E426             >                org     Dict_Ptr
 125+ 6A99             >
 125+ 6A99 24 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 125+ 6A9B             >
 125+ 6A9B             >BL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 125+ 6A9B CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 125+ 6A9E             >
 125+ 6A9E             >
 125+ 6A9E             >                endif           ; ok        // for other definitions it "points" the correct handler
 125+ 6A9E             >                // Use of "; ok" to suppress "warning[fwdref]"
 125+ 6A9E             >
 125+ 6A9E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 125+ 6A9E 20 00       >                dw      $20
 126+ 6AA0                              Constant_Def CL         ,   "C/L"   ,  64
 126+ 6AA0             >                New_Def  CL, "C/L", Constant_Ptr, is_normal
 126+ 6AA0             >
 126+ 6AA0             >Dict_Ptr        defl    $
 126+ 6AA0             >
 126+ 6AA0             >//              ______________________________________________________________________
 126+ 6AA0             >//              Heap part
 126+ 6AA0             >
 126+ 6AA0             >
 126+ 6AA0             >                org     (Heap_Ptr & $1FFF) + $E000
 126+ E426             >
 126+ E426             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 126+ E426             >Latest_Definition defl  Heap_Ptr
 126+ E426             >
 126+ E426             >                // dummy db directives used to calculate length of namec
 126+ E426 43 2F 4C    >                db      "C/L"
 126+ E429             >len_NFA         defl    $ - temp_NFA
 126+ E429             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 126+ E426             >
 126+ E426 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 126+ E427 43 2F 4C    >                db      "C/L"               // name string in 7-bit ascii, but
 126+ E42A             >                org     $-1                 // alter last byte of Name just above to set
 126+ E429 CC          >                db      {b $} | END_BIT     // msb as name end
 126+ E42A             >
 126+ E42A 1F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 126+ E42C             >Prev_Ptr        defl    Heap_Ptr
 126+ E42C             >
 126+ E42C             >mirror_Ptr      defl    $
 126+ E42C             >
 126+ E42C A2 6A       >                dw      Dict_Ptr + 2        // xt
 126+ E42E             >Heap_Ptr        defl    $ - $E000           // save current HP
 126+ E42E             >
 126+ E42E             >Current_HP      defl  $ - $E000             // used to set HP once!
 126+ E42E             >
 126+ E42E             >//              ______________________________________________________________________
 126+ E42E             >//              Dictionary part
 126+ E42E             >
 126+ E42E             >                org     Dict_Ptr
 126+ 6AA0             >
 126+ 6AA0 2C 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 126+ 6AA2             >
 126+ 6AA2             >CL:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 126+ 6AA2 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 126+ 6AA5             >
 126+ 6AA5             >
 126+ 6AA5             >                endif           ; ok        // for other definitions it "points" the correct handler
 126+ 6AA5             >                // Use of "; ok" to suppress "warning[fwdref]"
 126+ 6AA5             >
 126+ 6AA5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 126+ 6AA5 40 00       >                dw      64
 127+ 6AA7                              Constant_Def BBUF       ,   "B/BUF" , 512
 127+ 6AA7             >                New_Def  BBUF, "B/BUF", Constant_Ptr, is_normal
 127+ 6AA7             >
 127+ 6AA7             >Dict_Ptr        defl    $
 127+ 6AA7             >
 127+ 6AA7             >//              ______________________________________________________________________
 127+ 6AA7             >//              Heap part
 127+ 6AA7             >
 127+ 6AA7             >
 127+ 6AA7             >                org     (Heap_Ptr & $1FFF) + $E000
 127+ E42E             >
 127+ E42E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 127+ E42E             >Latest_Definition defl  Heap_Ptr
 127+ E42E             >
 127+ E42E             >                // dummy db directives used to calculate length of namec
 127+ E42E 42 2F 42 55 >                db      "B/BUF"
 127+ E432 46          >
 127+ E433             >len_NFA         defl    $ - temp_NFA
 127+ E433             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 127+ E42E             >
 127+ E42E 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 127+ E42F 42 2F 42 55 >                db      "B/BUF"               // name string in 7-bit ascii, but
 127+ E433 46          >
 127+ E434             >                org     $-1                 // alter last byte of Name just above to set
 127+ E433 C6          >                db      {b $} | END_BIT     // msb as name end
 127+ E434             >
 127+ E434 26 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 127+ E436             >Prev_Ptr        defl    Heap_Ptr
 127+ E436             >
 127+ E436             >mirror_Ptr      defl    $
 127+ E436             >
 127+ E436 A9 6A       >                dw      Dict_Ptr + 2        // xt
 127+ E438             >Heap_Ptr        defl    $ - $E000           // save current HP
 127+ E438             >
 127+ E438             >Current_HP      defl  $ - $E000             // used to set HP once!
 127+ E438             >
 127+ E438             >//              ______________________________________________________________________
 127+ E438             >//              Dictionary part
 127+ E438             >
 127+ E438             >                org     Dict_Ptr
 127+ 6AA7             >
 127+ 6AA7 36 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 127+ 6AA9             >
 127+ 6AA9             >BBUF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 127+ 6AA9 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 127+ 6AAC             >
 127+ 6AAC             >
 127+ 6AAC             >                endif           ; ok        // for other definitions it "points" the correct handler
 127+ 6AAC             >                // Use of "; ok" to suppress "warning[fwdref]"
 127+ 6AAC             >
 127+ 6AAC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 127+ 6AAC 00 02       >                dw      512
 128+ 6AAE                              Constant_Def BSCR       ,   "B/SCR" ,   2
 128+ 6AAE             >                New_Def  BSCR, "B/SCR", Constant_Ptr, is_normal
 128+ 6AAE             >
 128+ 6AAE             >Dict_Ptr        defl    $
 128+ 6AAE             >
 128+ 6AAE             >//              ______________________________________________________________________
 128+ 6AAE             >//              Heap part
 128+ 6AAE             >
 128+ 6AAE             >
 128+ 6AAE             >                org     (Heap_Ptr & $1FFF) + $E000
 128+ E438             >
 128+ E438             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 128+ E438             >Latest_Definition defl  Heap_Ptr
 128+ E438             >
 128+ E438             >                // dummy db directives used to calculate length of namec
 128+ E438 42 2F 53 43 >                db      "B/SCR"
 128+ E43C 52          >
 128+ E43D             >len_NFA         defl    $ - temp_NFA
 128+ E43D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 128+ E438             >
 128+ E438 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 128+ E439 42 2F 53 43 >                db      "B/SCR"               // name string in 7-bit ascii, but
 128+ E43D 52          >
 128+ E43E             >                org     $-1                 // alter last byte of Name just above to set
 128+ E43D D2          >                db      {b $} | END_BIT     // msb as name end
 128+ E43E             >
 128+ E43E 2E 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 128+ E440             >Prev_Ptr        defl    Heap_Ptr
 128+ E440             >
 128+ E440             >mirror_Ptr      defl    $
 128+ E440             >
 128+ E440 B0 6A       >                dw      Dict_Ptr + 2        // xt
 128+ E442             >Heap_Ptr        defl    $ - $E000           // save current HP
 128+ E442             >
 128+ E442             >Current_HP      defl  $ - $E000             // used to set HP once!
 128+ E442             >
 128+ E442             >//              ______________________________________________________________________
 128+ E442             >//              Dictionary part
 128+ E442             >
 128+ E442             >                org     Dict_Ptr
 128+ 6AAE             >
 128+ 6AAE 40 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 128+ 6AB0             >
 128+ 6AB0             >BSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 128+ 6AB0 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 128+ 6AB3             >
 128+ 6AB3             >
 128+ 6AB3             >                endif           ; ok        // for other definitions it "points" the correct handler
 128+ 6AB3             >                // Use of "; ok" to suppress "warning[fwdref]"
 128+ 6AB3             >
 128+ 6AB3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 128+ 6AB3 02 00       >                dw      2
 129+ 6AB5                              Constant_Def LSCR       ,   "L/SCR" ,  16
 129+ 6AB5             >                New_Def  LSCR, "L/SCR", Constant_Ptr, is_normal
 129+ 6AB5             >
 129+ 6AB5             >Dict_Ptr        defl    $
 129+ 6AB5             >
 129+ 6AB5             >//              ______________________________________________________________________
 129+ 6AB5             >//              Heap part
 129+ 6AB5             >
 129+ 6AB5             >
 129+ 6AB5             >                org     (Heap_Ptr & $1FFF) + $E000
 129+ E442             >
 129+ E442             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 129+ E442             >Latest_Definition defl  Heap_Ptr
 129+ E442             >
 129+ E442             >                // dummy db directives used to calculate length of namec
 129+ E442 4C 2F 53 43 >                db      "L/SCR"
 129+ E446 52          >
 129+ E447             >len_NFA         defl    $ - temp_NFA
 129+ E447             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 129+ E442             >
 129+ E442 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 129+ E443 4C 2F 53 43 >                db      "L/SCR"               // name string in 7-bit ascii, but
 129+ E447 52          >
 129+ E448             >                org     $-1                 // alter last byte of Name just above to set
 129+ E447 D2          >                db      {b $} | END_BIT     // msb as name end
 129+ E448             >
 129+ E448 38 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 129+ E44A             >Prev_Ptr        defl    Heap_Ptr
 129+ E44A             >
 129+ E44A             >mirror_Ptr      defl    $
 129+ E44A             >
 129+ E44A B7 6A       >                dw      Dict_Ptr + 2        // xt
 129+ E44C             >Heap_Ptr        defl    $ - $E000           // save current HP
 129+ E44C             >
 129+ E44C             >Current_HP      defl  $ - $E000             // used to set HP once!
 129+ E44C             >
 129+ E44C             >//              ______________________________________________________________________
 129+ E44C             >//              Dictionary part
 129+ E44C             >
 129+ E44C             >                org     Dict_Ptr
 129+ 6AB5             >
 129+ 6AB5 4A 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 129+ 6AB7             >
 129+ 6AB7             >LSCR:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 129+ 6AB7 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 129+ 6ABA             >
 129+ 6ABA             >
 129+ 6ABA             >                endif           ; ok        // for other definitions it "points" the correct handler
 129+ 6ABA             >                // Use of "; ok" to suppress "warning[fwdref]"
 129+ 6ABA             >
 129+ 6ABA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 129+ 6ABA 10 00       >                dw      16
 130+ 6ABC
 131+ 6ABC              //  ______________________________________________________________________
 132+ 6ABC              //
 133+ 6ABC              // +origin         --
 134+ 6ABC              //              Colon_Def PLUS_ORIGIN, "+ORIGIN", is_normal
 135+ 6ABC              //              dw      LIT, Cold_origin        // [ hex 6366 ] literal
 136+ 6ABC              //              dw      PLUS                    // +
 137+ 6ABC              //              dw      EXIT                    // ;
 138+ 6ABC                              New_Def  PLUS_ORIGIN, "+ORIGIN", is_code, is_normal
 138+ 6ABC             >
 138+ 6ABC             >Dict_Ptr        defl    $
 138+ 6ABC             >
 138+ 6ABC             >//              ______________________________________________________________________
 138+ 6ABC             >//              Heap part
 138+ 6ABC             >
 138+ 6ABC             >
 138+ 6ABC             >                org     (Heap_Ptr & $1FFF) + $E000
 138+ E44C             >
 138+ E44C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 138+ E44C             >Latest_Definition defl  Heap_Ptr
 138+ E44C             >
 138+ E44C             >                // dummy db directives used to calculate length of namec
 138+ E44C 2B 4F 52 49 >                db      "+ORIGIN"
 138+ E450 47 49 4E    >
 138+ E453             >len_NFA         defl    $ - temp_NFA
 138+ E453             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 138+ E44C             >
 138+ E44C 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 138+ E44D 2B 4F 52 49 >                db      "+ORIGIN"               // name string in 7-bit ascii, but
 138+ E451 47 49 4E    >
 138+ E454             >                org     $-1                 // alter last byte of Name just above to set
 138+ E453 CE          >                db      {b $} | END_BIT     // msb as name end
 138+ E454             >
 138+ E454 42 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 138+ E456             >Prev_Ptr        defl    Heap_Ptr
 138+ E456             >
 138+ E456             >mirror_Ptr      defl    $
 138+ E456             >
 138+ E456 BE 6A       >                dw      Dict_Ptr + 2        // xt
 138+ E458             >Heap_Ptr        defl    $ - $E000           // save current HP
 138+ E458             >
 138+ E458             >Current_HP      defl  $ - $E000             // used to set HP once!
 138+ E458             >
 138+ E458             >//              ______________________________________________________________________
 138+ E458             >//              Dictionary part
 138+ E458             >
 138+ E458             >                org     Dict_Ptr
 138+ 6ABC             >
 138+ 6ABC 56 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 138+ 6ABE             >
 138+ 6ABE             >PLUS_ORIGIN:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 138+ 6ABE ~           >                call    runcode ; ok        // for primitive definitions  actual code
 138+ 6ABE ~           >
 138+ 6ABE ~           >
 138+ 6ABE             >                endif           ; ok        // for other definitions it "points" the correct handler
 138+ 6ABE             >                // Use of "; ok" to suppress "warning[fwdref]"
 138+ 6ABE             >
 138+ 6ABE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 139+ 6ABE D9                           exx
 140+ 6ABF E1                           pop     hl
 141+ 6AC0 11 66 63                     ld      de, Cold_origin
 142+ 6AC3 19                           add     hl, de
 143+ 6AC4 E5                           push    hl
 144+ 6AC5 D9                           exx
 145+ 6AC6                              next
 145+ 6AC6 DD E9       >                jp      (ix)
 146+ 6AC8
 147+ 6AC8
 148+ 6AC8              //  ______________________________________________________________________
 149+ 6AC8              //
 150+ 6AC8                              Constant_Def CNEXT      ,   "(NEXT)", Next_Ptr
 150+ 6AC8             >                New_Def  CNEXT, "(NEXT)", Constant_Ptr, is_normal
 150+ 6AC8             >
 150+ 6AC8             >Dict_Ptr        defl    $
 150+ 6AC8             >
 150+ 6AC8             >//              ______________________________________________________________________
 150+ 6AC8             >//              Heap part
 150+ 6AC8             >
 150+ 6AC8             >
 150+ 6AC8             >                org     (Heap_Ptr & $1FFF) + $E000
 150+ E458             >
 150+ E458             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 150+ E458             >Latest_Definition defl  Heap_Ptr
 150+ E458             >
 150+ E458             >                // dummy db directives used to calculate length of namec
 150+ E458 28 4E 45 58 >                db      "(NEXT)"
 150+ E45C 54 29       >
 150+ E45E             >len_NFA         defl    $ - temp_NFA
 150+ E45E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 150+ E458             >
 150+ E458 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 150+ E459 28 4E 45 58 >                db      "(NEXT)"               // name string in 7-bit ascii, but
 150+ E45D 54 29       >
 150+ E45F             >                org     $-1                 // alter last byte of Name just above to set
 150+ E45E A9          >                db      {b $} | END_BIT     // msb as name end
 150+ E45F             >
 150+ E45F 4C 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 150+ E461             >Prev_Ptr        defl    Heap_Ptr
 150+ E461             >
 150+ E461             >mirror_Ptr      defl    $
 150+ E461             >
 150+ E461 CA 6A       >                dw      Dict_Ptr + 2        // xt
 150+ E463             >Heap_Ptr        defl    $ - $E000           // save current HP
 150+ E463             >
 150+ E463             >Current_HP      defl  $ - $E000             // used to set HP once!
 150+ E463             >
 150+ E463             >//              ______________________________________________________________________
 150+ E463             >//              Dictionary part
 150+ E463             >
 150+ E463             >                org     Dict_Ptr
 150+ 6AC8             >
 150+ 6AC8 61 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 150+ 6ACA             >
 150+ 6ACA             >CNEXT:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 150+ 6ACA CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 150+ 6ACD             >
 150+ 6ACD             >
 150+ 6ACD             >                endif           ; ok        // for other definitions it "points" the correct handler
 150+ 6ACD             >                // Use of "; ok" to suppress "warning[fwdref]"
 150+ 6ACD             >
 150+ 6ACD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 150+ 6ACD 9A 63       >                dw      Next_Ptr
 151+ 6ACF
 152+ 6ACF              //  ______________________________________________________________________
 153+ 6ACF              //
 154+ 6ACF
 155+ 6ACF                              User_Def S0         , "S0"        , 06 // starting value of Stack-Pointer
 155+ 6ACF             >                New_Def  S0, "S0", User_Ptr, is_normal
 155+ 6ACF             >
 155+ 6ACF             >Dict_Ptr        defl    $
 155+ 6ACF             >
 155+ 6ACF             >//              ______________________________________________________________________
 155+ 6ACF             >//              Heap part
 155+ 6ACF             >
 155+ 6ACF             >
 155+ 6ACF             >                org     (Heap_Ptr & $1FFF) + $E000
 155+ E463             >
 155+ E463             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 155+ E463             >Latest_Definition defl  Heap_Ptr
 155+ E463             >
 155+ E463             >                // dummy db directives used to calculate length of namec
 155+ E463 53 30       >                db      "S0"
 155+ E465             >len_NFA         defl    $ - temp_NFA
 155+ E465             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 155+ E463             >
 155+ E463 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 155+ E464 53 30       >                db      "S0"               // name string in 7-bit ascii, but
 155+ E466             >                org     $-1                 // alter last byte of Name just above to set
 155+ E465 B0          >                db      {b $} | END_BIT     // msb as name end
 155+ E466             >
 155+ E466 58 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 155+ E468             >Prev_Ptr        defl    Heap_Ptr
 155+ E468             >
 155+ E468             >mirror_Ptr      defl    $
 155+ E468             >
 155+ E468 D1 6A       >                dw      Dict_Ptr + 2        // xt
 155+ E46A             >Heap_Ptr        defl    $ - $E000           // save current HP
 155+ E46A             >
 155+ E46A             >Current_HP      defl  $ - $E000             // used to set HP once!
 155+ E46A             >
 155+ E46A             >//              ______________________________________________________________________
 155+ E46A             >//              Dictionary part
 155+ E46A             >
 155+ E46A             >                org     Dict_Ptr
 155+ 6ACF             >
 155+ 6ACF 68 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 155+ 6AD1             >
 155+ 6AD1             >S0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 155+ 6AD1 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 155+ 6AD4             >
 155+ 6AD4             >
 155+ 6AD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 155+ 6AD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 155+ 6AD4             >
 155+ 6AD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 155+ 6AD4 06          >                db      06
 156+ 6AD5                              User_Def R0         , "R0"        , 08 // starting value of Return-Pointer
 156+ 6AD5             >                New_Def  R0, "R0", User_Ptr, is_normal
 156+ 6AD5             >
 156+ 6AD5             >Dict_Ptr        defl    $
 156+ 6AD5             >
 156+ 6AD5             >//              ______________________________________________________________________
 156+ 6AD5             >//              Heap part
 156+ 6AD5             >
 156+ 6AD5             >
 156+ 6AD5             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ E46A             >
 156+ E46A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ E46A             >Latest_Definition defl  Heap_Ptr
 156+ E46A             >
 156+ E46A             >                // dummy db directives used to calculate length of namec
 156+ E46A 52 30       >                db      "R0"
 156+ E46C             >len_NFA         defl    $ - temp_NFA
 156+ E46C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ E46A             >
 156+ E46A 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ E46B 52 30       >                db      "R0"               // name string in 7-bit ascii, but
 156+ E46D             >                org     $-1                 // alter last byte of Name just above to set
 156+ E46C B0          >                db      {b $} | END_BIT     // msb as name end
 156+ E46D             >
 156+ E46D 63 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ E46F             >Prev_Ptr        defl    Heap_Ptr
 156+ E46F             >
 156+ E46F             >mirror_Ptr      defl    $
 156+ E46F             >
 156+ E46F D7 6A       >                dw      Dict_Ptr + 2        // xt
 156+ E471             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ E471             >
 156+ E471             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ E471             >
 156+ E471             >//              ______________________________________________________________________
 156+ E471             >//              Dictionary part
 156+ E471             >
 156+ E471             >                org     Dict_Ptr
 156+ 6AD5             >
 156+ 6AD5 6F 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 6AD7             >
 156+ 6AD7             >R0:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 6AD7 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 156+ 6ADA             >
 156+ 6ADA             >
 156+ 6ADA             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 6ADA             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 6ADA             >
 156+ 6ADA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 156+ 6ADA 08          >                db      08
 157+ 6ADB                              User_Def TIB        , "TIB"       , 10 // input terminal buffer address
 157+ 6ADB             >                New_Def  TIB, "TIB", User_Ptr, is_normal
 157+ 6ADB             >
 157+ 6ADB             >Dict_Ptr        defl    $
 157+ 6ADB             >
 157+ 6ADB             >//              ______________________________________________________________________
 157+ 6ADB             >//              Heap part
 157+ 6ADB             >
 157+ 6ADB             >
 157+ 6ADB             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E471             >
 157+ E471             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E471             >Latest_Definition defl  Heap_Ptr
 157+ E471             >
 157+ E471             >                // dummy db directives used to calculate length of namec
 157+ E471 54 49 42    >                db      "TIB"
 157+ E474             >len_NFA         defl    $ - temp_NFA
 157+ E474             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E471             >
 157+ E471 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E472 54 49 42    >                db      "TIB"               // name string in 7-bit ascii, but
 157+ E475             >                org     $-1                 // alter last byte of Name just above to set
 157+ E474 C2          >                db      {b $} | END_BIT     // msb as name end
 157+ E475             >
 157+ E475 6A 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E477             >Prev_Ptr        defl    Heap_Ptr
 157+ E477             >
 157+ E477             >mirror_Ptr      defl    $
 157+ E477             >
 157+ E477 DD 6A       >                dw      Dict_Ptr + 2        // xt
 157+ E479             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E479             >
 157+ E479             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E479             >
 157+ E479             >//              ______________________________________________________________________
 157+ E479             >//              Dictionary part
 157+ E479             >
 157+ E479             >                org     Dict_Ptr
 157+ 6ADB             >
 157+ 6ADB 77 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 6ADD             >
 157+ 6ADD             >TIB:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 6ADD CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 157+ 6AE0             >
 157+ 6AE0             >
 157+ 6AE0             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 6AE0             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 6AE0             >
 157+ 6AE0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 6AE0 0A          >                db      10
 158+ 6AE1                              User_Def WIDTH      , "WIDTH"     , 12 // maximum number of characters for a word name
 158+ 6AE1             >                New_Def  WIDTH, "WIDTH", User_Ptr, is_normal
 158+ 6AE1             >
 158+ 6AE1             >Dict_Ptr        defl    $
 158+ 6AE1             >
 158+ 6AE1             >//              ______________________________________________________________________
 158+ 6AE1             >//              Heap part
 158+ 6AE1             >
 158+ 6AE1             >
 158+ 6AE1             >                org     (Heap_Ptr & $1FFF) + $E000
 158+ E479             >
 158+ E479             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 158+ E479             >Latest_Definition defl  Heap_Ptr
 158+ E479             >
 158+ E479             >                // dummy db directives used to calculate length of namec
 158+ E479 57 49 44 54 >                db      "WIDTH"
 158+ E47D 48          >
 158+ E47E             >len_NFA         defl    $ - temp_NFA
 158+ E47E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 158+ E479             >
 158+ E479 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 158+ E47A 57 49 44 54 >                db      "WIDTH"               // name string in 7-bit ascii, but
 158+ E47E 48          >
 158+ E47F             >                org     $-1                 // alter last byte of Name just above to set
 158+ E47E C8          >                db      {b $} | END_BIT     // msb as name end
 158+ E47F             >
 158+ E47F 71 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 158+ E481             >Prev_Ptr        defl    Heap_Ptr
 158+ E481             >
 158+ E481             >mirror_Ptr      defl    $
 158+ E481             >
 158+ E481 E3 6A       >                dw      Dict_Ptr + 2        // xt
 158+ E483             >Heap_Ptr        defl    $ - $E000           // save current HP
 158+ E483             >
 158+ E483             >Current_HP      defl  $ - $E000             // used to set HP once!
 158+ E483             >
 158+ E483             >//              ______________________________________________________________________
 158+ E483             >//              Dictionary part
 158+ E483             >
 158+ E483             >                org     Dict_Ptr
 158+ 6AE1             >
 158+ 6AE1 81 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 158+ 6AE3             >
 158+ 6AE3             >WIDTH:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 158+ 6AE3 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 158+ 6AE6             >
 158+ 6AE6             >
 158+ 6AE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 158+ 6AE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 158+ 6AE6             >
 158+ 6AE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 6AE6 0C          >                db      12
 159+ 6AE7                              User_Def WARNING    , "WARNING"   , 14 // error reporting method: 0 base, 1 verbose
 159+ 6AE7             >                New_Def  WARNING, "WARNING", User_Ptr, is_normal
 159+ 6AE7             >
 159+ 6AE7             >Dict_Ptr        defl    $
 159+ 6AE7             >
 159+ 6AE7             >//              ______________________________________________________________________
 159+ 6AE7             >//              Heap part
 159+ 6AE7             >
 159+ 6AE7             >
 159+ 6AE7             >                org     (Heap_Ptr & $1FFF) + $E000
 159+ E483             >
 159+ E483             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 159+ E483             >Latest_Definition defl  Heap_Ptr
 159+ E483             >
 159+ E483             >                // dummy db directives used to calculate length of namec
 159+ E483 57 41 52 4E >                db      "WARNING"
 159+ E487 49 4E 47    >
 159+ E48A             >len_NFA         defl    $ - temp_NFA
 159+ E48A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 159+ E483             >
 159+ E483 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 159+ E484 57 41 52 4E >                db      "WARNING"               // name string in 7-bit ascii, but
 159+ E488 49 4E 47    >
 159+ E48B             >                org     $-1                 // alter last byte of Name just above to set
 159+ E48A C7          >                db      {b $} | END_BIT     // msb as name end
 159+ E48B             >
 159+ E48B 79 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 159+ E48D             >Prev_Ptr        defl    Heap_Ptr
 159+ E48D             >
 159+ E48D             >mirror_Ptr      defl    $
 159+ E48D             >
 159+ E48D E9 6A       >                dw      Dict_Ptr + 2        // xt
 159+ E48F             >Heap_Ptr        defl    $ - $E000           // save current HP
 159+ E48F             >
 159+ E48F             >Current_HP      defl  $ - $E000             // used to set HP once!
 159+ E48F             >
 159+ E48F             >//              ______________________________________________________________________
 159+ E48F             >//              Dictionary part
 159+ E48F             >
 159+ E48F             >                org     Dict_Ptr
 159+ 6AE7             >
 159+ 6AE7 8D 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 159+ 6AE9             >
 159+ 6AE9             >WARNING:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 159+ 6AE9 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 159+ 6AEC             >
 159+ 6AEC             >
 159+ 6AEC             >                endif           ; ok        // for other definitions it "points" the correct handler
 159+ 6AEC             >                // Use of "; ok" to suppress "warning[fwdref]"
 159+ 6AEC             >
 159+ 6AEC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 159+ 6AEC 0E          >                db      14
 160+ 6AED                              User_Def FENCE      , "FENCE"     , 16 // minimum address where FORGET can work
 160+ 6AED             >                New_Def  FENCE, "FENCE", User_Ptr, is_normal
 160+ 6AED             >
 160+ 6AED             >Dict_Ptr        defl    $
 160+ 6AED             >
 160+ 6AED             >//              ______________________________________________________________________
 160+ 6AED             >//              Heap part
 160+ 6AED             >
 160+ 6AED             >
 160+ 6AED             >                org     (Heap_Ptr & $1FFF) + $E000
 160+ E48F             >
 160+ E48F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 160+ E48F             >Latest_Definition defl  Heap_Ptr
 160+ E48F             >
 160+ E48F             >                // dummy db directives used to calculate length of namec
 160+ E48F 46 45 4E 43 >                db      "FENCE"
 160+ E493 45          >
 160+ E494             >len_NFA         defl    $ - temp_NFA
 160+ E494             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 160+ E48F             >
 160+ E48F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 160+ E490 46 45 4E 43 >                db      "FENCE"               // name string in 7-bit ascii, but
 160+ E494 45          >
 160+ E495             >                org     $-1                 // alter last byte of Name just above to set
 160+ E494 C5          >                db      {b $} | END_BIT     // msb as name end
 160+ E495             >
 160+ E495 83 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 160+ E497             >Prev_Ptr        defl    Heap_Ptr
 160+ E497             >
 160+ E497             >mirror_Ptr      defl    $
 160+ E497             >
 160+ E497 EF 6A       >                dw      Dict_Ptr + 2        // xt
 160+ E499             >Heap_Ptr        defl    $ - $E000           // save current HP
 160+ E499             >
 160+ E499             >Current_HP      defl  $ - $E000             // used to set HP once!
 160+ E499             >
 160+ E499             >//              ______________________________________________________________________
 160+ E499             >//              Dictionary part
 160+ E499             >
 160+ E499             >                org     Dict_Ptr
 160+ 6AED             >
 160+ 6AED 97 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 160+ 6AEF             >
 160+ 6AEF             >FENCE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 160+ 6AEF CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 160+ 6AF2             >
 160+ 6AF2             >
 160+ 6AF2             >                endif           ; ok        // for other definitions it "points" the correct handler
 160+ 6AF2             >                // Use of "; ok" to suppress "warning[fwdref]"
 160+ 6AF2             >
 160+ 6AF2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 160+ 6AF2 10          >                db      16
 161+ 6AF3                              User_Def DP         , "DP"        , 18 // Dictionary Pointer
 161+ 6AF3             >                New_Def  DP, "DP", User_Ptr, is_normal
 161+ 6AF3             >
 161+ 6AF3             >Dict_Ptr        defl    $
 161+ 6AF3             >
 161+ 6AF3             >//              ______________________________________________________________________
 161+ 6AF3             >//              Heap part
 161+ 6AF3             >
 161+ 6AF3             >
 161+ 6AF3             >                org     (Heap_Ptr & $1FFF) + $E000
 161+ E499             >
 161+ E499             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 161+ E499             >Latest_Definition defl  Heap_Ptr
 161+ E499             >
 161+ E499             >                // dummy db directives used to calculate length of namec
 161+ E499 44 50       >                db      "DP"
 161+ E49B             >len_NFA         defl    $ - temp_NFA
 161+ E49B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 161+ E499             >
 161+ E499 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 161+ E49A 44 50       >                db      "DP"               // name string in 7-bit ascii, but
 161+ E49C             >                org     $-1                 // alter last byte of Name just above to set
 161+ E49B D0          >                db      {b $} | END_BIT     // msb as name end
 161+ E49C             >
 161+ E49C 8F 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 161+ E49E             >Prev_Ptr        defl    Heap_Ptr
 161+ E49E             >
 161+ E49E             >mirror_Ptr      defl    $
 161+ E49E             >
 161+ E49E F5 6A       >                dw      Dict_Ptr + 2        // xt
 161+ E4A0             >Heap_Ptr        defl    $ - $E000           // save current HP
 161+ E4A0             >
 161+ E4A0             >Current_HP      defl  $ - $E000             // used to set HP once!
 161+ E4A0             >
 161+ E4A0             >//              ______________________________________________________________________
 161+ E4A0             >//              Dictionary part
 161+ E4A0             >
 161+ E4A0             >                org     Dict_Ptr
 161+ 6AF3             >
 161+ 6AF3 9E 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 161+ 6AF5             >
 161+ 6AF5             >DP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 161+ 6AF5 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 161+ 6AF8             >
 161+ 6AF8             >
 161+ 6AF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 161+ 6AF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 161+ 6AF8             >
 161+ 6AF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 161+ 6AF8 12          >                db      18
 162+ 6AF9                              User_Def VOC_LINK   , "VOC-LINK"  , 20 // pointer to the latest vocabulary
 162+ 6AF9             >                New_Def  VOC_LINK, "VOC-LINK", User_Ptr, is_normal
 162+ 6AF9             >
 162+ 6AF9             >Dict_Ptr        defl    $
 162+ 6AF9             >
 162+ 6AF9             >//              ______________________________________________________________________
 162+ 6AF9             >//              Heap part
 162+ 6AF9             >
 162+ 6AF9             >
 162+ 6AF9             >                org     (Heap_Ptr & $1FFF) + $E000
 162+ E4A0             >
 162+ E4A0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 162+ E4A0             >Latest_Definition defl  Heap_Ptr
 162+ E4A0             >
 162+ E4A0             >                // dummy db directives used to calculate length of namec
 162+ E4A0 56 4F 43 2D >                db      "VOC-LINK"
 162+ E4A4 4C 49 4E 4B >
 162+ E4A8             >len_NFA         defl    $ - temp_NFA
 162+ E4A8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 162+ E4A0             >
 162+ E4A0 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 162+ E4A1 56 4F 43 2D >                db      "VOC-LINK"               // name string in 7-bit ascii, but
 162+ E4A5 4C 49 4E 4B >
 162+ E4A9             >                org     $-1                 // alter last byte of Name just above to set
 162+ E4A8 CB          >                db      {b $} | END_BIT     // msb as name end
 162+ E4A9             >
 162+ E4A9 99 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 162+ E4AB             >Prev_Ptr        defl    Heap_Ptr
 162+ E4AB             >
 162+ E4AB             >mirror_Ptr      defl    $
 162+ E4AB             >
 162+ E4AB FB 6A       >                dw      Dict_Ptr + 2        // xt
 162+ E4AD             >Heap_Ptr        defl    $ - $E000           // save current HP
 162+ E4AD             >
 162+ E4AD             >Current_HP      defl  $ - $E000             // used to set HP once!
 162+ E4AD             >
 162+ E4AD             >//              ______________________________________________________________________
 162+ E4AD             >//              Dictionary part
 162+ E4AD             >
 162+ E4AD             >                org     Dict_Ptr
 162+ 6AF9             >
 162+ 6AF9 AB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 162+ 6AFB             >
 162+ 6AFB             >VOC_LINK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 162+ 6AFB CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 162+ 6AFE             >
 162+ 6AFE             >
 162+ 6AFE             >                endif           ; ok        // for other definitions it "points" the correct handler
 162+ 6AFE             >                // Use of "; ok" to suppress "warning[fwdref]"
 162+ 6AFE             >
 162+ 6AFE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 162+ 6AFE 14          >                db      20
 163+ 6AFF                              User_Def FIRST      , "FIRST"     , 22 // address of first buffer
 163+ 6AFF             >                New_Def  FIRST, "FIRST", User_Ptr, is_normal
 163+ 6AFF             >
 163+ 6AFF             >Dict_Ptr        defl    $
 163+ 6AFF             >
 163+ 6AFF             >//              ______________________________________________________________________
 163+ 6AFF             >//              Heap part
 163+ 6AFF             >
 163+ 6AFF             >
 163+ 6AFF             >                org     (Heap_Ptr & $1FFF) + $E000
 163+ E4AD             >
 163+ E4AD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 163+ E4AD             >Latest_Definition defl  Heap_Ptr
 163+ E4AD             >
 163+ E4AD             >                // dummy db directives used to calculate length of namec
 163+ E4AD 46 49 52 53 >                db      "FIRST"
 163+ E4B1 54          >
 163+ E4B2             >len_NFA         defl    $ - temp_NFA
 163+ E4B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 163+ E4AD             >
 163+ E4AD 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 163+ E4AE 46 49 52 53 >                db      "FIRST"               // name string in 7-bit ascii, but
 163+ E4B2 54          >
 163+ E4B3             >                org     $-1                 // alter last byte of Name just above to set
 163+ E4B2 D4          >                db      {b $} | END_BIT     // msb as name end
 163+ E4B3             >
 163+ E4B3 A0 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 163+ E4B5             >Prev_Ptr        defl    Heap_Ptr
 163+ E4B5             >
 163+ E4B5             >mirror_Ptr      defl    $
 163+ E4B5             >
 163+ E4B5 01 6B       >                dw      Dict_Ptr + 2        // xt
 163+ E4B7             >Heap_Ptr        defl    $ - $E000           // save current HP
 163+ E4B7             >
 163+ E4B7             >Current_HP      defl  $ - $E000             // used to set HP once!
 163+ E4B7             >
 163+ E4B7             >//              ______________________________________________________________________
 163+ E4B7             >//              Dictionary part
 163+ E4B7             >
 163+ E4B7             >                org     Dict_Ptr
 163+ 6AFF             >
 163+ 6AFF B5 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 163+ 6B01             >
 163+ 6B01             >FIRST:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 163+ 6B01 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 163+ 6B04             >
 163+ 6B04             >
 163+ 6B04             >                endif           ; ok        // for other definitions it "points" the correct handler
 163+ 6B04             >                // Use of "; ok" to suppress "warning[fwdref]"
 163+ 6B04             >
 163+ 6B04             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 163+ 6B04 16          >                db      22
 164+ 6B05                              User_Def LIMIT      , "LIMIT"     , 24 // address of last buffer
 164+ 6B05             >                New_Def  LIMIT, "LIMIT", User_Ptr, is_normal
 164+ 6B05             >
 164+ 6B05             >Dict_Ptr        defl    $
 164+ 6B05             >
 164+ 6B05             >//              ______________________________________________________________________
 164+ 6B05             >//              Heap part
 164+ 6B05             >
 164+ 6B05             >
 164+ 6B05             >                org     (Heap_Ptr & $1FFF) + $E000
 164+ E4B7             >
 164+ E4B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 164+ E4B7             >Latest_Definition defl  Heap_Ptr
 164+ E4B7             >
 164+ E4B7             >                // dummy db directives used to calculate length of namec
 164+ E4B7 4C 49 4D 49 >                db      "LIMIT"
 164+ E4BB 54          >
 164+ E4BC             >len_NFA         defl    $ - temp_NFA
 164+ E4BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 164+ E4B7             >
 164+ E4B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 164+ E4B8 4C 49 4D 49 >                db      "LIMIT"               // name string in 7-bit ascii, but
 164+ E4BC 54          >
 164+ E4BD             >                org     $-1                 // alter last byte of Name just above to set
 164+ E4BC D4          >                db      {b $} | END_BIT     // msb as name end
 164+ E4BD             >
 164+ E4BD AD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 164+ E4BF             >Prev_Ptr        defl    Heap_Ptr
 164+ E4BF             >
 164+ E4BF             >mirror_Ptr      defl    $
 164+ E4BF             >
 164+ E4BF 07 6B       >                dw      Dict_Ptr + 2        // xt
 164+ E4C1             >Heap_Ptr        defl    $ - $E000           // save current HP
 164+ E4C1             >
 164+ E4C1             >Current_HP      defl  $ - $E000             // used to set HP once!
 164+ E4C1             >
 164+ E4C1             >//              ______________________________________________________________________
 164+ E4C1             >//              Dictionary part
 164+ E4C1             >
 164+ E4C1             >                org     Dict_Ptr
 164+ 6B05             >
 164+ 6B05 BF 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 164+ 6B07             >
 164+ 6B07             >LIMIT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 164+ 6B07 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 164+ 6B0A             >
 164+ 6B0A             >
 164+ 6B0A             >                endif           ; ok        // for other definitions it "points" the correct handler
 164+ 6B0A             >                // Use of "; ok" to suppress "warning[fwdref]"
 164+ 6B0A             >
 164+ 6B0A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 164+ 6B0A 18          >                db      24
 165+ 6B0B                              User_Def HP         , "HP"        , 26 // heap-pointer address
 165+ 6B0B             >                New_Def  HP, "HP", User_Ptr, is_normal
 165+ 6B0B             >
 165+ 6B0B             >Dict_Ptr        defl    $
 165+ 6B0B             >
 165+ 6B0B             >//              ______________________________________________________________________
 165+ 6B0B             >//              Heap part
 165+ 6B0B             >
 165+ 6B0B             >
 165+ 6B0B             >                org     (Heap_Ptr & $1FFF) + $E000
 165+ E4C1             >
 165+ E4C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 165+ E4C1             >Latest_Definition defl  Heap_Ptr
 165+ E4C1             >
 165+ E4C1             >                // dummy db directives used to calculate length of namec
 165+ E4C1 48 50       >                db      "HP"
 165+ E4C3             >len_NFA         defl    $ - temp_NFA
 165+ E4C3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 165+ E4C1             >
 165+ E4C1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 165+ E4C2 48 50       >                db      "HP"               // name string in 7-bit ascii, but
 165+ E4C4             >                org     $-1                 // alter last byte of Name just above to set
 165+ E4C3 D0          >                db      {b $} | END_BIT     // msb as name end
 165+ E4C4             >
 165+ E4C4 B7 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 165+ E4C6             >Prev_Ptr        defl    Heap_Ptr
 165+ E4C6             >
 165+ E4C6             >mirror_Ptr      defl    $
 165+ E4C6             >
 165+ E4C6 0D 6B       >                dw      Dict_Ptr + 2        // xt
 165+ E4C8             >Heap_Ptr        defl    $ - $E000           // save current HP
 165+ E4C8             >
 165+ E4C8             >Current_HP      defl  $ - $E000             // used to set HP once!
 165+ E4C8             >
 165+ E4C8             >//              ______________________________________________________________________
 165+ E4C8             >//              Dictionary part
 165+ E4C8             >
 165+ E4C8             >                org     Dict_Ptr
 165+ 6B0B             >
 165+ 6B0B C6 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 165+ 6B0D             >
 165+ 6B0D             >HP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 165+ 6B0D CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 165+ 6B10             >
 165+ 6B10             >
 165+ 6B10             >                endif           ; ok        // for other definitions it "points" the correct handler
 165+ 6B10             >                // Use of "; ok" to suppress "warning[fwdref]"
 165+ 6B10             >
 165+ 6B10             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 165+ 6B10 1A          >                db      26
 166+ 6B11                              User_Def NMODE      , "NMODE"     , 28 // number mode: 0 integer, 1 floating point
 166+ 6B11             >                New_Def  NMODE, "NMODE", User_Ptr, is_normal
 166+ 6B11             >
 166+ 6B11             >Dict_Ptr        defl    $
 166+ 6B11             >
 166+ 6B11             >//              ______________________________________________________________________
 166+ 6B11             >//              Heap part
 166+ 6B11             >
 166+ 6B11             >
 166+ 6B11             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E4C8             >
 166+ E4C8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E4C8             >Latest_Definition defl  Heap_Ptr
 166+ E4C8             >
 166+ E4C8             >                // dummy db directives used to calculate length of namec
 166+ E4C8 4E 4D 4F 44 >                db      "NMODE"
 166+ E4CC 45          >
 166+ E4CD             >len_NFA         defl    $ - temp_NFA
 166+ E4CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E4C8             >
 166+ E4C8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E4C9 4E 4D 4F 44 >                db      "NMODE"               // name string in 7-bit ascii, but
 166+ E4CD 45          >
 166+ E4CE             >                org     $-1                 // alter last byte of Name just above to set
 166+ E4CD C5          >                db      {b $} | END_BIT     // msb as name end
 166+ E4CE             >
 166+ E4CE C1 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E4D0             >Prev_Ptr        defl    Heap_Ptr
 166+ E4D0             >
 166+ E4D0             >mirror_Ptr      defl    $
 166+ E4D0             >
 166+ E4D0 13 6B       >                dw      Dict_Ptr + 2        // xt
 166+ E4D2             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E4D2             >
 166+ E4D2             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E4D2             >
 166+ E4D2             >//              ______________________________________________________________________
 166+ E4D2             >//              Dictionary part
 166+ E4D2             >
 166+ E4D2             >                org     Dict_Ptr
 166+ 6B11             >
 166+ 6B11 D0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 6B13             >
 166+ 6B13             >NMODE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 6B13 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 166+ 6B16             >
 166+ 6B16             >
 166+ 6B16             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 6B16             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 6B16             >
 166+ 6B16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 166+ 6B16 1C          >                db      28
 167+ 6B17                              User_Def BLK        , "BLK"       , 30 // block number to be interpreted. 0 for terminal
 167+ 6B17             >                New_Def  BLK, "BLK", User_Ptr, is_normal
 167+ 6B17             >
 167+ 6B17             >Dict_Ptr        defl    $
 167+ 6B17             >
 167+ 6B17             >//              ______________________________________________________________________
 167+ 6B17             >//              Heap part
 167+ 6B17             >
 167+ 6B17             >
 167+ 6B17             >                org     (Heap_Ptr & $1FFF) + $E000
 167+ E4D2             >
 167+ E4D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 167+ E4D2             >Latest_Definition defl  Heap_Ptr
 167+ E4D2             >
 167+ E4D2             >                // dummy db directives used to calculate length of namec
 167+ E4D2 42 4C 4B    >                db      "BLK"
 167+ E4D5             >len_NFA         defl    $ - temp_NFA
 167+ E4D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 167+ E4D2             >
 167+ E4D2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 167+ E4D3 42 4C 4B    >                db      "BLK"               // name string in 7-bit ascii, but
 167+ E4D6             >                org     $-1                 // alter last byte of Name just above to set
 167+ E4D5 CB          >                db      {b $} | END_BIT     // msb as name end
 167+ E4D6             >
 167+ E4D6 C8 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 167+ E4D8             >Prev_Ptr        defl    Heap_Ptr
 167+ E4D8             >
 167+ E4D8             >mirror_Ptr      defl    $
 167+ E4D8             >
 167+ E4D8 19 6B       >                dw      Dict_Ptr + 2        // xt
 167+ E4DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 167+ E4DA             >
 167+ E4DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 167+ E4DA             >
 167+ E4DA             >//              ______________________________________________________________________
 167+ E4DA             >//              Dictionary part
 167+ E4DA             >
 167+ E4DA             >                org     Dict_Ptr
 167+ 6B17             >
 167+ 6B17 D8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 167+ 6B19             >
 167+ 6B19             >BLK:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 167+ 6B19 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 167+ 6B1C             >
 167+ 6B1C             >
 167+ 6B1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 167+ 6B1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 167+ 6B1C             >
 167+ 6B1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 6B1C 1E          >                db      30
 168+ 6B1D                              User_Def TO_IN      , ">IN"       , 32 // incremented when consuming input buffer
 168+ 6B1D             >                New_Def  TO_IN, ">IN", User_Ptr, is_normal
 168+ 6B1D             >
 168+ 6B1D             >Dict_Ptr        defl    $
 168+ 6B1D             >
 168+ 6B1D             >//              ______________________________________________________________________
 168+ 6B1D             >//              Heap part
 168+ 6B1D             >
 168+ 6B1D             >
 168+ 6B1D             >                org     (Heap_Ptr & $1FFF) + $E000
 168+ E4DA             >
 168+ E4DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 168+ E4DA             >Latest_Definition defl  Heap_Ptr
 168+ E4DA             >
 168+ E4DA             >                // dummy db directives used to calculate length of namec
 168+ E4DA 3E 49 4E    >                db      ">IN"
 168+ E4DD             >len_NFA         defl    $ - temp_NFA
 168+ E4DD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 168+ E4DA             >
 168+ E4DA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 168+ E4DB 3E 49 4E    >                db      ">IN"               // name string in 7-bit ascii, but
 168+ E4DE             >                org     $-1                 // alter last byte of Name just above to set
 168+ E4DD CE          >                db      {b $} | END_BIT     // msb as name end
 168+ E4DE             >
 168+ E4DE D2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 168+ E4E0             >Prev_Ptr        defl    Heap_Ptr
 168+ E4E0             >
 168+ E4E0             >mirror_Ptr      defl    $
 168+ E4E0             >
 168+ E4E0 1F 6B       >                dw      Dict_Ptr + 2        // xt
 168+ E4E2             >Heap_Ptr        defl    $ - $E000           // save current HP
 168+ E4E2             >
 168+ E4E2             >Current_HP      defl  $ - $E000             // used to set HP once!
 168+ E4E2             >
 168+ E4E2             >//              ______________________________________________________________________
 168+ E4E2             >//              Dictionary part
 168+ E4E2             >
 168+ E4E2             >                org     Dict_Ptr
 168+ 6B1D             >
 168+ 6B1D E0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 168+ 6B1F             >
 168+ 6B1F             >TO_IN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 168+ 6B1F CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 168+ 6B22             >
 168+ 6B22             >
 168+ 6B22             >                endif           ; ok        // for other definitions it "points" the correct handler
 168+ 6B22             >                // Use of "; ok" to suppress "warning[fwdref]"
 168+ 6B22             >
 168+ 6B22             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 168+ 6B22 20          >                db      32
 169+ 6B23                              User_Def OUT        , "OUT"       , 34 // incremented when sending to output
 169+ 6B23             >                New_Def  OUT, "OUT", User_Ptr, is_normal
 169+ 6B23             >
 169+ 6B23             >Dict_Ptr        defl    $
 169+ 6B23             >
 169+ 6B23             >//              ______________________________________________________________________
 169+ 6B23             >//              Heap part
 169+ 6B23             >
 169+ 6B23             >
 169+ 6B23             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ E4E2             >
 169+ E4E2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ E4E2             >Latest_Definition defl  Heap_Ptr
 169+ E4E2             >
 169+ E4E2             >                // dummy db directives used to calculate length of namec
 169+ E4E2 4F 55 54    >                db      "OUT"
 169+ E4E5             >len_NFA         defl    $ - temp_NFA
 169+ E4E5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ E4E2             >
 169+ E4E2 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ E4E3 4F 55 54    >                db      "OUT"               // name string in 7-bit ascii, but
 169+ E4E6             >                org     $-1                 // alter last byte of Name just above to set
 169+ E4E5 D4          >                db      {b $} | END_BIT     // msb as name end
 169+ E4E6             >
 169+ E4E6 DA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ E4E8             >Prev_Ptr        defl    Heap_Ptr
 169+ E4E8             >
 169+ E4E8             >mirror_Ptr      defl    $
 169+ E4E8             >
 169+ E4E8 25 6B       >                dw      Dict_Ptr + 2        // xt
 169+ E4EA             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ E4EA             >
 169+ E4EA             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ E4EA             >
 169+ E4EA             >//              ______________________________________________________________________
 169+ E4EA             >//              Dictionary part
 169+ E4EA             >
 169+ E4EA             >                org     Dict_Ptr
 169+ 6B23             >
 169+ 6B23 E8 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 6B25             >
 169+ 6B25             >OUT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 6B25 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 169+ 6B28             >
 169+ 6B28             >
 169+ 6B28             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 6B28             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 6B28             >
 169+ 6B28             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 169+ 6B28 22          >                db      34
 170+ 6B29                              User_Def SCR        , "SCR"       , 36 // latest screen retreieved by LIST
 170+ 6B29             >                New_Def  SCR, "SCR", User_Ptr, is_normal
 170+ 6B29             >
 170+ 6B29             >Dict_Ptr        defl    $
 170+ 6B29             >
 170+ 6B29             >//              ______________________________________________________________________
 170+ 6B29             >//              Heap part
 170+ 6B29             >
 170+ 6B29             >
 170+ 6B29             >                org     (Heap_Ptr & $1FFF) + $E000
 170+ E4EA             >
 170+ E4EA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 170+ E4EA             >Latest_Definition defl  Heap_Ptr
 170+ E4EA             >
 170+ E4EA             >                // dummy db directives used to calculate length of namec
 170+ E4EA 53 43 52    >                db      "SCR"
 170+ E4ED             >len_NFA         defl    $ - temp_NFA
 170+ E4ED             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 170+ E4EA             >
 170+ E4EA 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 170+ E4EB 53 43 52    >                db      "SCR"               // name string in 7-bit ascii, but
 170+ E4EE             >                org     $-1                 // alter last byte of Name just above to set
 170+ E4ED D2          >                db      {b $} | END_BIT     // msb as name end
 170+ E4EE             >
 170+ E4EE E2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 170+ E4F0             >Prev_Ptr        defl    Heap_Ptr
 170+ E4F0             >
 170+ E4F0             >mirror_Ptr      defl    $
 170+ E4F0             >
 170+ E4F0 2B 6B       >                dw      Dict_Ptr + 2        // xt
 170+ E4F2             >Heap_Ptr        defl    $ - $E000           // save current HP
 170+ E4F2             >
 170+ E4F2             >Current_HP      defl  $ - $E000             // used to set HP once!
 170+ E4F2             >
 170+ E4F2             >//              ______________________________________________________________________
 170+ E4F2             >//              Dictionary part
 170+ E4F2             >
 170+ E4F2             >                org     Dict_Ptr
 170+ 6B29             >
 170+ 6B29 F0 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 170+ 6B2B             >
 170+ 6B2B             >SCR:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 170+ 6B2B CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 170+ 6B2E             >
 170+ 6B2E             >
 170+ 6B2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 170+ 6B2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 170+ 6B2E             >
 170+ 6B2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 6B2E 24          >                db      36
 171+ 6B2F                              User_Def OFFSET     , "OFFSET"    , 38 //
 171+ 6B2F             >                New_Def  OFFSET, "OFFSET", User_Ptr, is_normal
 171+ 6B2F             >
 171+ 6B2F             >Dict_Ptr        defl    $
 171+ 6B2F             >
 171+ 6B2F             >//              ______________________________________________________________________
 171+ 6B2F             >//              Heap part
 171+ 6B2F             >
 171+ 6B2F             >
 171+ 6B2F             >                org     (Heap_Ptr & $1FFF) + $E000
 171+ E4F2             >
 171+ E4F2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 171+ E4F2             >Latest_Definition defl  Heap_Ptr
 171+ E4F2             >
 171+ E4F2             >                // dummy db directives used to calculate length of namec
 171+ E4F2 4F 46 46 53 >                db      "OFFSET"
 171+ E4F6 45 54       >
 171+ E4F8             >len_NFA         defl    $ - temp_NFA
 171+ E4F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 171+ E4F2             >
 171+ E4F2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 171+ E4F3 4F 46 46 53 >                db      "OFFSET"               // name string in 7-bit ascii, but
 171+ E4F7 45 54       >
 171+ E4F9             >                org     $-1                 // alter last byte of Name just above to set
 171+ E4F8 D4          >                db      {b $} | END_BIT     // msb as name end
 171+ E4F9             >
 171+ E4F9 EA 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 171+ E4FB             >Prev_Ptr        defl    Heap_Ptr
 171+ E4FB             >
 171+ E4FB             >mirror_Ptr      defl    $
 171+ E4FB             >
 171+ E4FB 31 6B       >                dw      Dict_Ptr + 2        // xt
 171+ E4FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 171+ E4FD             >
 171+ E4FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 171+ E4FD             >
 171+ E4FD             >//              ______________________________________________________________________
 171+ E4FD             >//              Dictionary part
 171+ E4FD             >
 171+ E4FD             >                org     Dict_Ptr
 171+ 6B2F             >
 171+ 6B2F FB 04       >                dw      mirror_Ptr - $E000 + Heap_offset
 171+ 6B31             >
 171+ 6B31             >OFFSET:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 171+ 6B31 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 171+ 6B34             >
 171+ 6B34             >
 171+ 6B34             >                endif           ; ok        // for other definitions it "points" the correct handler
 171+ 6B34             >                // Use of "; ok" to suppress "warning[fwdref]"
 171+ 6B34             >
 171+ 6B34             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 171+ 6B34 26          >                db      38
 172+ 6B35                              User_Def CONTEXT    , "CONTEXT"   , 40 // pointer to the vocabulary where search begins
 172+ 6B35             >                New_Def  CONTEXT, "CONTEXT", User_Ptr, is_normal
 172+ 6B35             >
 172+ 6B35             >Dict_Ptr        defl    $
 172+ 6B35             >
 172+ 6B35             >//              ______________________________________________________________________
 172+ 6B35             >//              Heap part
 172+ 6B35             >
 172+ 6B35             >
 172+ 6B35             >                org     (Heap_Ptr & $1FFF) + $E000
 172+ E4FD             >
 172+ E4FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 172+ E4FD             >Latest_Definition defl  Heap_Ptr
 172+ E4FD             >
 172+ E4FD             >                // dummy db directives used to calculate length of namec
 172+ E4FD 43 4F 4E 54 >                db      "CONTEXT"
 172+ E501 45 58 54    >
 172+ E504             >len_NFA         defl    $ - temp_NFA
 172+ E504             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 172+ E4FD             >
 172+ E4FD 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 172+ E4FE 43 4F 4E 54 >                db      "CONTEXT"               // name string in 7-bit ascii, but
 172+ E502 45 58 54    >
 172+ E505             >                org     $-1                 // alter last byte of Name just above to set
 172+ E504 D4          >                db      {b $} | END_BIT     // msb as name end
 172+ E505             >
 172+ E505 F2 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 172+ E507             >Prev_Ptr        defl    Heap_Ptr
 172+ E507             >
 172+ E507             >mirror_Ptr      defl    $
 172+ E507             >
 172+ E507 37 6B       >                dw      Dict_Ptr + 2        // xt
 172+ E509             >Heap_Ptr        defl    $ - $E000           // save current HP
 172+ E509             >
 172+ E509             >Current_HP      defl  $ - $E000             // used to set HP once!
 172+ E509             >
 172+ E509             >//              ______________________________________________________________________
 172+ E509             >//              Dictionary part
 172+ E509             >
 172+ E509             >                org     Dict_Ptr
 172+ 6B35             >
 172+ 6B35 07 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 172+ 6B37             >
 172+ 6B37             >CONTEXT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 172+ 6B37 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 172+ 6B3A             >
 172+ 6B3A             >
 172+ 6B3A             >                endif           ; ok        // for other definitions it "points" the correct handler
 172+ 6B3A             >                // Use of "; ok" to suppress "warning[fwdref]"
 172+ 6B3A             >
 172+ 6B3A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 172+ 6B3A 28          >                db      40
 173+ 6B3B                              User_Def CURRENT    , "CURRENT"   , 42 // pointer to the vocabulary where search continues
 173+ 6B3B             >                New_Def  CURRENT, "CURRENT", User_Ptr, is_normal
 173+ 6B3B             >
 173+ 6B3B             >Dict_Ptr        defl    $
 173+ 6B3B             >
 173+ 6B3B             >//              ______________________________________________________________________
 173+ 6B3B             >//              Heap part
 173+ 6B3B             >
 173+ 6B3B             >
 173+ 6B3B             >                org     (Heap_Ptr & $1FFF) + $E000
 173+ E509             >
 173+ E509             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 173+ E509             >Latest_Definition defl  Heap_Ptr
 173+ E509             >
 173+ E509             >                // dummy db directives used to calculate length of namec
 173+ E509 43 55 52 52 >                db      "CURRENT"
 173+ E50D 45 4E 54    >
 173+ E510             >len_NFA         defl    $ - temp_NFA
 173+ E510             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 173+ E509             >
 173+ E509 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 173+ E50A 43 55 52 52 >                db      "CURRENT"               // name string in 7-bit ascii, but
 173+ E50E 45 4E 54    >
 173+ E511             >                org     $-1                 // alter last byte of Name just above to set
 173+ E510 D4          >                db      {b $} | END_BIT     // msb as name end
 173+ E511             >
 173+ E511 FD 04       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 173+ E513             >Prev_Ptr        defl    Heap_Ptr
 173+ E513             >
 173+ E513             >mirror_Ptr      defl    $
 173+ E513             >
 173+ E513 3D 6B       >                dw      Dict_Ptr + 2        // xt
 173+ E515             >Heap_Ptr        defl    $ - $E000           // save current HP
 173+ E515             >
 173+ E515             >Current_HP      defl  $ - $E000             // used to set HP once!
 173+ E515             >
 173+ E515             >//              ______________________________________________________________________
 173+ E515             >//              Dictionary part
 173+ E515             >
 173+ E515             >                org     Dict_Ptr
 173+ 6B3B             >
 173+ 6B3B 13 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 173+ 6B3D             >
 173+ 6B3D             >CURRENT:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 173+ 6B3D CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 173+ 6B40             >
 173+ 6B40             >
 173+ 6B40             >                endif           ; ok        // for other definitions it "points" the correct handler
 173+ 6B40             >                // Use of "; ok" to suppress "warning[fwdref]"
 173+ 6B40             >
 173+ 6B40             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 173+ 6B40 2A          >                db      42
 174+ 6B41                              User_Def STATE      , "STATE"     , 44 // compilation status. 0 interpreting.
 174+ 6B41             >                New_Def  STATE, "STATE", User_Ptr, is_normal
 174+ 6B41             >
 174+ 6B41             >Dict_Ptr        defl    $
 174+ 6B41             >
 174+ 6B41             >//              ______________________________________________________________________
 174+ 6B41             >//              Heap part
 174+ 6B41             >
 174+ 6B41             >
 174+ 6B41             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ E515             >
 174+ E515             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ E515             >Latest_Definition defl  Heap_Ptr
 174+ E515             >
 174+ E515             >                // dummy db directives used to calculate length of namec
 174+ E515 53 54 41 54 >                db      "STATE"
 174+ E519 45          >
 174+ E51A             >len_NFA         defl    $ - temp_NFA
 174+ E51A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ E515             >
 174+ E515 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ E516 53 54 41 54 >                db      "STATE"               // name string in 7-bit ascii, but
 174+ E51A 45          >
 174+ E51B             >                org     $-1                 // alter last byte of Name just above to set
 174+ E51A C5          >                db      {b $} | END_BIT     // msb as name end
 174+ E51B             >
 174+ E51B 09 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ E51D             >Prev_Ptr        defl    Heap_Ptr
 174+ E51D             >
 174+ E51D             >mirror_Ptr      defl    $
 174+ E51D             >
 174+ E51D 43 6B       >                dw      Dict_Ptr + 2        // xt
 174+ E51F             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ E51F             >
 174+ E51F             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ E51F             >
 174+ E51F             >//              ______________________________________________________________________
 174+ E51F             >//              Dictionary part
 174+ E51F             >
 174+ E51F             >                org     Dict_Ptr
 174+ 6B41             >
 174+ 6B41 1D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 6B43             >
 174+ 6B43             >STATE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 6B43 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 174+ 6B46             >
 174+ 6B46             >
 174+ 6B46             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 6B46             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 6B46             >
 174+ 6B46             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 174+ 6B46 2C          >                db      44
 175+ 6B47                              User_Def BASE       , "BASE"      , 46 //
 175+ 6B47             >                New_Def  BASE, "BASE", User_Ptr, is_normal
 175+ 6B47             >
 175+ 6B47             >Dict_Ptr        defl    $
 175+ 6B47             >
 175+ 6B47             >//              ______________________________________________________________________
 175+ 6B47             >//              Heap part
 175+ 6B47             >
 175+ 6B47             >
 175+ 6B47             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E51F             >
 175+ E51F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E51F             >Latest_Definition defl  Heap_Ptr
 175+ E51F             >
 175+ E51F             >                // dummy db directives used to calculate length of namec
 175+ E51F 42 41 53 45 >                db      "BASE"
 175+ E523             >len_NFA         defl    $ - temp_NFA
 175+ E523             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E51F             >
 175+ E51F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E520 42 41 53 45 >                db      "BASE"               // name string in 7-bit ascii, but
 175+ E524             >                org     $-1                 // alter last byte of Name just above to set
 175+ E523 C5          >                db      {b $} | END_BIT     // msb as name end
 175+ E524             >
 175+ E524 15 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E526             >Prev_Ptr        defl    Heap_Ptr
 175+ E526             >
 175+ E526             >mirror_Ptr      defl    $
 175+ E526             >
 175+ E526 49 6B       >                dw      Dict_Ptr + 2        // xt
 175+ E528             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E528             >
 175+ E528             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E528             >
 175+ E528             >//              ______________________________________________________________________
 175+ E528             >//              Dictionary part
 175+ E528             >
 175+ E528             >                org     Dict_Ptr
 175+ 6B47             >
 175+ 6B47 26 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 6B49             >
 175+ 6B49             >BASE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 6B49 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 175+ 6B4C             >
 175+ 6B4C             >
 175+ 6B4C             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 6B4C             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 6B4C             >
 175+ 6B4C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 6B4C 2E          >                db      46
 176+ 6B4D                              User_Def DPL        , "DPL"       , 48 // number of digits after decimal point in conversion
 176+ 6B4D             >                New_Def  DPL, "DPL", User_Ptr, is_normal
 176+ 6B4D             >
 176+ 6B4D             >Dict_Ptr        defl    $
 176+ 6B4D             >
 176+ 6B4D             >//              ______________________________________________________________________
 176+ 6B4D             >//              Heap part
 176+ 6B4D             >
 176+ 6B4D             >
 176+ 6B4D             >                org     (Heap_Ptr & $1FFF) + $E000
 176+ E528             >
 176+ E528             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 176+ E528             >Latest_Definition defl  Heap_Ptr
 176+ E528             >
 176+ E528             >                // dummy db directives used to calculate length of namec
 176+ E528 44 50 4C    >                db      "DPL"
 176+ E52B             >len_NFA         defl    $ - temp_NFA
 176+ E52B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 176+ E528             >
 176+ E528 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 176+ E529 44 50 4C    >                db      "DPL"               // name string in 7-bit ascii, but
 176+ E52C             >                org     $-1                 // alter last byte of Name just above to set
 176+ E52B CC          >                db      {b $} | END_BIT     // msb as name end
 176+ E52C             >
 176+ E52C 1F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 176+ E52E             >Prev_Ptr        defl    Heap_Ptr
 176+ E52E             >
 176+ E52E             >mirror_Ptr      defl    $
 176+ E52E             >
 176+ E52E 4F 6B       >                dw      Dict_Ptr + 2        // xt
 176+ E530             >Heap_Ptr        defl    $ - $E000           // save current HP
 176+ E530             >
 176+ E530             >Current_HP      defl  $ - $E000             // used to set HP once!
 176+ E530             >
 176+ E530             >//              ______________________________________________________________________
 176+ E530             >//              Dictionary part
 176+ E530             >
 176+ E530             >                org     Dict_Ptr
 176+ 6B4D             >
 176+ 6B4D 2E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 176+ 6B4F             >
 176+ 6B4F             >DPL:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 176+ 6B4F CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 176+ 6B52             >
 176+ 6B52             >
 176+ 6B52             >                endif           ; ok        // for other definitions it "points" the correct handler
 176+ 6B52             >                // Use of "; ok" to suppress "warning[fwdref]"
 176+ 6B52             >
 176+ 6B52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 6B52 30          >                db      48
 177+ 6B53                              User_Def FLD        , "FLD"       , 50 // output field width
 177+ 6B53             >                New_Def  FLD, "FLD", User_Ptr, is_normal
 177+ 6B53             >
 177+ 6B53             >Dict_Ptr        defl    $
 177+ 6B53             >
 177+ 6B53             >//              ______________________________________________________________________
 177+ 6B53             >//              Heap part
 177+ 6B53             >
 177+ 6B53             >
 177+ 6B53             >                org     (Heap_Ptr & $1FFF) + $E000
 177+ E530             >
 177+ E530             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 177+ E530             >Latest_Definition defl  Heap_Ptr
 177+ E530             >
 177+ E530             >                // dummy db directives used to calculate length of namec
 177+ E530 46 4C 44    >                db      "FLD"
 177+ E533             >len_NFA         defl    $ - temp_NFA
 177+ E533             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 177+ E530             >
 177+ E530 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 177+ E531 46 4C 44    >                db      "FLD"               // name string in 7-bit ascii, but
 177+ E534             >                org     $-1                 // alter last byte of Name just above to set
 177+ E533 C4          >                db      {b $} | END_BIT     // msb as name end
 177+ E534             >
 177+ E534 28 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 177+ E536             >Prev_Ptr        defl    Heap_Ptr
 177+ E536             >
 177+ E536             >mirror_Ptr      defl    $
 177+ E536             >
 177+ E536 55 6B       >                dw      Dict_Ptr + 2        // xt
 177+ E538             >Heap_Ptr        defl    $ - $E000           // save current HP
 177+ E538             >
 177+ E538             >Current_HP      defl  $ - $E000             // used to set HP once!
 177+ E538             >
 177+ E538             >//              ______________________________________________________________________
 177+ E538             >//              Dictionary part
 177+ E538             >
 177+ E538             >                org     Dict_Ptr
 177+ 6B53             >
 177+ 6B53 36 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 177+ 6B55             >
 177+ 6B55             >FLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 177+ 6B55 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 177+ 6B58             >
 177+ 6B58             >
 177+ 6B58             >                endif           ; ok        // for other definitions it "points" the correct handler
 177+ 6B58             >                // Use of "; ok" to suppress "warning[fwdref]"
 177+ 6B58             >
 177+ 6B58             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 177+ 6B58 32          >                db      50
 178+ 6B59                              User_Def CSP        , "CSP"       , 52 // used to temporary store Stack-Pointer value
 178+ 6B59             >                New_Def  CSP, "CSP", User_Ptr, is_normal
 178+ 6B59             >
 178+ 6B59             >Dict_Ptr        defl    $
 178+ 6B59             >
 178+ 6B59             >//              ______________________________________________________________________
 178+ 6B59             >//              Heap part
 178+ 6B59             >
 178+ 6B59             >
 178+ 6B59             >                org     (Heap_Ptr & $1FFF) + $E000
 178+ E538             >
 178+ E538             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 178+ E538             >Latest_Definition defl  Heap_Ptr
 178+ E538             >
 178+ E538             >                // dummy db directives used to calculate length of namec
 178+ E538 43 53 50    >                db      "CSP"
 178+ E53B             >len_NFA         defl    $ - temp_NFA
 178+ E53B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 178+ E538             >
 178+ E538 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 178+ E539 43 53 50    >                db      "CSP"               // name string in 7-bit ascii, but
 178+ E53C             >                org     $-1                 // alter last byte of Name just above to set
 178+ E53B D0          >                db      {b $} | END_BIT     // msb as name end
 178+ E53C             >
 178+ E53C 30 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 178+ E53E             >Prev_Ptr        defl    Heap_Ptr
 178+ E53E             >
 178+ E53E             >mirror_Ptr      defl    $
 178+ E53E             >
 178+ E53E 5B 6B       >                dw      Dict_Ptr + 2        // xt
 178+ E540             >Heap_Ptr        defl    $ - $E000           // save current HP
 178+ E540             >
 178+ E540             >Current_HP      defl  $ - $E000             // used to set HP once!
 178+ E540             >
 178+ E540             >//              ______________________________________________________________________
 178+ E540             >//              Dictionary part
 178+ E540             >
 178+ E540             >                org     Dict_Ptr
 178+ 6B59             >
 178+ 6B59 3E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 178+ 6B5B             >
 178+ 6B5B             >CSP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 178+ 6B5B CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 178+ 6B5E             >
 178+ 6B5E             >
 178+ 6B5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 178+ 6B5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 178+ 6B5E             >
 178+ 6B5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 178+ 6B5E 34          >                db      52
 179+ 6B5F                              User_Def RSHARP     , "R#"        , 54 // location of editing cursor
 179+ 6B5F             >                New_Def  RSHARP, "R#", User_Ptr, is_normal
 179+ 6B5F             >
 179+ 6B5F             >Dict_Ptr        defl    $
 179+ 6B5F             >
 179+ 6B5F             >//              ______________________________________________________________________
 179+ 6B5F             >//              Heap part
 179+ 6B5F             >
 179+ 6B5F             >
 179+ 6B5F             >                org     (Heap_Ptr & $1FFF) + $E000
 179+ E540             >
 179+ E540             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 179+ E540             >Latest_Definition defl  Heap_Ptr
 179+ E540             >
 179+ E540             >                // dummy db directives used to calculate length of namec
 179+ E540 52 23       >                db      "R#"
 179+ E542             >len_NFA         defl    $ - temp_NFA
 179+ E542             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 179+ E540             >
 179+ E540 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 179+ E541 52 23       >                db      "R#"               // name string in 7-bit ascii, but
 179+ E543             >                org     $-1                 // alter last byte of Name just above to set
 179+ E542 A3          >                db      {b $} | END_BIT     // msb as name end
 179+ E543             >
 179+ E543 38 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 179+ E545             >Prev_Ptr        defl    Heap_Ptr
 179+ E545             >
 179+ E545             >mirror_Ptr      defl    $
 179+ E545             >
 179+ E545 61 6B       >                dw      Dict_Ptr + 2        // xt
 179+ E547             >Heap_Ptr        defl    $ - $E000           // save current HP
 179+ E547             >
 179+ E547             >Current_HP      defl  $ - $E000             // used to set HP once!
 179+ E547             >
 179+ E547             >//              ______________________________________________________________________
 179+ E547             >//              Dictionary part
 179+ E547             >
 179+ E547             >                org     Dict_Ptr
 179+ 6B5F             >
 179+ 6B5F 45 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 179+ 6B61             >
 179+ 6B61             >RSHARP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 179+ 6B61 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 179+ 6B64             >
 179+ 6B64             >
 179+ 6B64             >                endif           ; ok        // for other definitions it "points" the correct handler
 179+ 6B64             >                // Use of "; ok" to suppress "warning[fwdref]"
 179+ 6B64             >
 179+ 6B64             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 179+ 6B64 36          >                db      54
 180+ 6B65                              User_Def HLD        , "HLD"       , 56 // last character during a number conversion output
 180+ 6B65             >                New_Def  HLD, "HLD", User_Ptr, is_normal
 180+ 6B65             >
 180+ 6B65             >Dict_Ptr        defl    $
 180+ 6B65             >
 180+ 6B65             >//              ______________________________________________________________________
 180+ 6B65             >//              Heap part
 180+ 6B65             >
 180+ 6B65             >
 180+ 6B65             >                org     (Heap_Ptr & $1FFF) + $E000
 180+ E547             >
 180+ E547             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 180+ E547             >Latest_Definition defl  Heap_Ptr
 180+ E547             >
 180+ E547             >                // dummy db directives used to calculate length of namec
 180+ E547 48 4C 44    >                db      "HLD"
 180+ E54A             >len_NFA         defl    $ - temp_NFA
 180+ E54A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 180+ E547             >
 180+ E547 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 180+ E548 48 4C 44    >                db      "HLD"               // name string in 7-bit ascii, but
 180+ E54B             >                org     $-1                 // alter last byte of Name just above to set
 180+ E54A C4          >                db      {b $} | END_BIT     // msb as name end
 180+ E54B             >
 180+ E54B 40 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 180+ E54D             >Prev_Ptr        defl    Heap_Ptr
 180+ E54D             >
 180+ E54D             >mirror_Ptr      defl    $
 180+ E54D             >
 180+ E54D 67 6B       >                dw      Dict_Ptr + 2        // xt
 180+ E54F             >Heap_Ptr        defl    $ - $E000           // save current HP
 180+ E54F             >
 180+ E54F             >Current_HP      defl  $ - $E000             // used to set HP once!
 180+ E54F             >
 180+ E54F             >//              ______________________________________________________________________
 180+ E54F             >//              Dictionary part
 180+ E54F             >
 180+ E54F             >                org     Dict_Ptr
 180+ 6B65             >
 180+ 6B65 4D 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 180+ 6B67             >
 180+ 6B67             >HLD:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 180+ 6B67 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 180+ 6B6A             >
 180+ 6B6A             >
 180+ 6B6A             >                endif           ; ok        // for other definitions it "points" the correct handler
 180+ 6B6A             >                // Use of "; ok" to suppress "warning[fwdref]"
 180+ 6B6A             >
 180+ 6B6A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 180+ 6B6A 38          >                db      56
 181+ 6B6B                              User_Def USED       , "USED"      , 58 // address of last used block
 181+ 6B6B             >                New_Def  USED, "USED", User_Ptr, is_normal
 181+ 6B6B             >
 181+ 6B6B             >Dict_Ptr        defl    $
 181+ 6B6B             >
 181+ 6B6B             >//              ______________________________________________________________________
 181+ 6B6B             >//              Heap part
 181+ 6B6B             >
 181+ 6B6B             >
 181+ 6B6B             >                org     (Heap_Ptr & $1FFF) + $E000
 181+ E54F             >
 181+ E54F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 181+ E54F             >Latest_Definition defl  Heap_Ptr
 181+ E54F             >
 181+ E54F             >                // dummy db directives used to calculate length of namec
 181+ E54F 55 53 45 44 >                db      "USED"
 181+ E553             >len_NFA         defl    $ - temp_NFA
 181+ E553             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 181+ E54F             >
 181+ E54F 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 181+ E550 55 53 45 44 >                db      "USED"               // name string in 7-bit ascii, but
 181+ E554             >                org     $-1                 // alter last byte of Name just above to set
 181+ E553 C4          >                db      {b $} | END_BIT     // msb as name end
 181+ E554             >
 181+ E554 47 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 181+ E556             >Prev_Ptr        defl    Heap_Ptr
 181+ E556             >
 181+ E556             >mirror_Ptr      defl    $
 181+ E556             >
 181+ E556 6D 6B       >                dw      Dict_Ptr + 2        // xt
 181+ E558             >Heap_Ptr        defl    $ - $E000           // save current HP
 181+ E558             >
 181+ E558             >Current_HP      defl  $ - $E000             // used to set HP once!
 181+ E558             >
 181+ E558             >//              ______________________________________________________________________
 181+ E558             >//              Dictionary part
 181+ E558             >
 181+ E558             >                org     Dict_Ptr
 181+ 6B6B             >
 181+ 6B6B 56 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 181+ 6B6D             >
 181+ 6B6D             >USED:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 181+ 6B6D CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 181+ 6B70             >
 181+ 6B70             >
 181+ 6B70             >                endif           ; ok        // for other definitions it "points" the correct handler
 181+ 6B70             >                // Use of "; ok" to suppress "warning[fwdref]"
 181+ 6B70             >
 181+ 6B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 181+ 6B70 3A          >                db      58
 182+ 6B71                              User_Def PREV       , "PREV"      , 60 // address of previous used block
 182+ 6B71             >                New_Def  PREV, "PREV", User_Ptr, is_normal
 182+ 6B71             >
 182+ 6B71             >Dict_Ptr        defl    $
 182+ 6B71             >
 182+ 6B71             >//              ______________________________________________________________________
 182+ 6B71             >//              Heap part
 182+ 6B71             >
 182+ 6B71             >
 182+ 6B71             >                org     (Heap_Ptr & $1FFF) + $E000
 182+ E558             >
 182+ E558             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 182+ E558             >Latest_Definition defl  Heap_Ptr
 182+ E558             >
 182+ E558             >                // dummy db directives used to calculate length of namec
 182+ E558 50 52 45 56 >                db      "PREV"
 182+ E55C             >len_NFA         defl    $ - temp_NFA
 182+ E55C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 182+ E558             >
 182+ E558 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 182+ E559 50 52 45 56 >                db      "PREV"               // name string in 7-bit ascii, but
 182+ E55D             >                org     $-1                 // alter last byte of Name just above to set
 182+ E55C D6          >                db      {b $} | END_BIT     // msb as name end
 182+ E55D             >
 182+ E55D 4F 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 182+ E55F             >Prev_Ptr        defl    Heap_Ptr
 182+ E55F             >
 182+ E55F             >mirror_Ptr      defl    $
 182+ E55F             >
 182+ E55F 73 6B       >                dw      Dict_Ptr + 2        // xt
 182+ E561             >Heap_Ptr        defl    $ - $E000           // save current HP
 182+ E561             >
 182+ E561             >Current_HP      defl  $ - $E000             // used to set HP once!
 182+ E561             >
 182+ E561             >//              ______________________________________________________________________
 182+ E561             >//              Dictionary part
 182+ E561             >
 182+ E561             >                org     Dict_Ptr
 182+ 6B71             >
 182+ 6B71 5F 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 182+ 6B73             >
 182+ 6B73             >PREV:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 182+ 6B73 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 182+ 6B76             >
 182+ 6B76             >
 182+ 6B76             >                endif           ; ok        // for other definitions it "points" the correct handler
 182+ 6B76             >                // Use of "; ok" to suppress "warning[fwdref]"
 182+ 6B76             >
 182+ 6B76             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 182+ 6B76 3C          >                db      60
 183+ 6B77                              User_Def LP         , "LP"        , 62 // line printer (not used)
 183+ 6B77             >                New_Def  LP, "LP", User_Ptr, is_normal
 183+ 6B77             >
 183+ 6B77             >Dict_Ptr        defl    $
 183+ 6B77             >
 183+ 6B77             >//              ______________________________________________________________________
 183+ 6B77             >//              Heap part
 183+ 6B77             >
 183+ 6B77             >
 183+ 6B77             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ E561             >
 183+ E561             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ E561             >Latest_Definition defl  Heap_Ptr
 183+ E561             >
 183+ E561             >                // dummy db directives used to calculate length of namec
 183+ E561 4C 50       >                db      "LP"
 183+ E563             >len_NFA         defl    $ - temp_NFA
 183+ E563             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ E561             >
 183+ E561 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ E562 4C 50       >                db      "LP"               // name string in 7-bit ascii, but
 183+ E564             >                org     $-1                 // alter last byte of Name just above to set
 183+ E563 D0          >                db      {b $} | END_BIT     // msb as name end
 183+ E564             >
 183+ E564 58 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ E566             >Prev_Ptr        defl    Heap_Ptr
 183+ E566             >
 183+ E566             >mirror_Ptr      defl    $
 183+ E566             >
 183+ E566 79 6B       >                dw      Dict_Ptr + 2        // xt
 183+ E568             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ E568             >
 183+ E568             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ E568             >
 183+ E568             >//              ______________________________________________________________________
 183+ E568             >//              Dictionary part
 183+ E568             >
 183+ E568             >                org     Dict_Ptr
 183+ 6B77             >
 183+ 6B77 66 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 6B79             >
 183+ 6B79             >LP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 6B79 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 183+ 6B7C             >
 183+ 6B7C             >
 183+ 6B7C             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 6B7C             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 6B7C             >
 183+ 6B7C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 6B7C 3E          >                db      62
 184+ 6B7D                              User_Def PLACE      , "PLACE"     , 64 // number of digits after decimal point in output
 184+ 6B7D             >                New_Def  PLACE, "PLACE", User_Ptr, is_normal
 184+ 6B7D             >
 184+ 6B7D             >Dict_Ptr        defl    $
 184+ 6B7D             >
 184+ 6B7D             >//              ______________________________________________________________________
 184+ 6B7D             >//              Heap part
 184+ 6B7D             >
 184+ 6B7D             >
 184+ 6B7D             >                org     (Heap_Ptr & $1FFF) + $E000
 184+ E568             >
 184+ E568             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 184+ E568             >Latest_Definition defl  Heap_Ptr
 184+ E568             >
 184+ E568             >                // dummy db directives used to calculate length of namec
 184+ E568 50 4C 41 43 >                db      "PLACE"
 184+ E56C 45          >
 184+ E56D             >len_NFA         defl    $ - temp_NFA
 184+ E56D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 184+ E568             >
 184+ E568 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 184+ E569 50 4C 41 43 >                db      "PLACE"               // name string in 7-bit ascii, but
 184+ E56D 45          >
 184+ E56E             >                org     $-1                 // alter last byte of Name just above to set
 184+ E56D C5          >                db      {b $} | END_BIT     // msb as name end
 184+ E56E             >
 184+ E56E 61 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 184+ E570             >Prev_Ptr        defl    Heap_Ptr
 184+ E570             >
 184+ E570             >mirror_Ptr      defl    $
 184+ E570             >
 184+ E570 7F 6B       >                dw      Dict_Ptr + 2        // xt
 184+ E572             >Heap_Ptr        defl    $ - $E000           // save current HP
 184+ E572             >
 184+ E572             >Current_HP      defl  $ - $E000             // used to set HP once!
 184+ E572             >
 184+ E572             >//              ______________________________________________________________________
 184+ E572             >//              Dictionary part
 184+ E572             >
 184+ E572             >                org     Dict_Ptr
 184+ 6B7D             >
 184+ 6B7D 70 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 184+ 6B7F             >
 184+ 6B7F             >PLACE:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 184+ 6B7F CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 184+ 6B82             >
 184+ 6B82             >
 184+ 6B82             >                endif           ; ok        // for other definitions it "points" the correct handler
 184+ 6B82             >                // Use of "; ok" to suppress "warning[fwdref]"
 184+ 6B82             >
 184+ 6B82             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 184+ 6B82 40          >                db      64
 185+ 6B83                              User_Def SOURCE_ID  , "SOURCE-ID" , 66 // data-stream number in INCLUDE and LOAD-
 185+ 6B83             >                New_Def  SOURCE_ID, "SOURCE-ID", User_Ptr, is_normal
 185+ 6B83             >
 185+ 6B83             >Dict_Ptr        defl    $
 185+ 6B83             >
 185+ 6B83             >//              ______________________________________________________________________
 185+ 6B83             >//              Heap part
 185+ 6B83             >
 185+ 6B83             >
 185+ 6B83             >                org     (Heap_Ptr & $1FFF) + $E000
 185+ E572             >
 185+ E572             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 185+ E572             >Latest_Definition defl  Heap_Ptr
 185+ E572             >
 185+ E572             >                // dummy db directives used to calculate length of namec
 185+ E572 53 4F 55 52 >                db      "SOURCE-ID"
 185+ E576 43 45 2D 49 >
 185+ E57A 44          >
 185+ E57B             >len_NFA         defl    $ - temp_NFA
 185+ E57B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 185+ E572             >
 185+ E572 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 185+ E573 53 4F 55 52 >                db      "SOURCE-ID"               // name string in 7-bit ascii, but
 185+ E577 43 45 2D 49 >
 185+ E57B 44          >
 185+ E57C             >                org     $-1                 // alter last byte of Name just above to set
 185+ E57B C4          >                db      {b $} | END_BIT     // msb as name end
 185+ E57C             >
 185+ E57C 68 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 185+ E57E             >Prev_Ptr        defl    Heap_Ptr
 185+ E57E             >
 185+ E57E             >mirror_Ptr      defl    $
 185+ E57E             >
 185+ E57E 85 6B       >                dw      Dict_Ptr + 2        // xt
 185+ E580             >Heap_Ptr        defl    $ - $E000           // save current HP
 185+ E580             >
 185+ E580             >Current_HP      defl  $ - $E000             // used to set HP once!
 185+ E580             >
 185+ E580             >//              ______________________________________________________________________
 185+ E580             >//              Dictionary part
 185+ E580             >
 185+ E580             >                org     Dict_Ptr
 185+ 6B83             >
 185+ 6B83 7E 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 185+ 6B85             >
 185+ 6B85             >SOURCE_ID:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 185+ 6B85 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 185+ 6B88             >
 185+ 6B88             >
 185+ 6B88             >                endif           ; ok        // for other definitions it "points" the correct handler
 185+ 6B88             >                // Use of "; ok" to suppress "warning[fwdref]"
 185+ 6B88             >
 185+ 6B88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 185+ 6B88 42          >                db      66
 186+ 6B89                              User_Def SPAN       , "SPAN"      , 68 // number of character of last EXPECT
 186+ 6B89             >                New_Def  SPAN, "SPAN", User_Ptr, is_normal
 186+ 6B89             >
 186+ 6B89             >Dict_Ptr        defl    $
 186+ 6B89             >
 186+ 6B89             >//              ______________________________________________________________________
 186+ 6B89             >//              Heap part
 186+ 6B89             >
 186+ 6B89             >
 186+ 6B89             >                org     (Heap_Ptr & $1FFF) + $E000
 186+ E580             >
 186+ E580             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 186+ E580             >Latest_Definition defl  Heap_Ptr
 186+ E580             >
 186+ E580             >                // dummy db directives used to calculate length of namec
 186+ E580 53 50 41 4E >                db      "SPAN"
 186+ E584             >len_NFA         defl    $ - temp_NFA
 186+ E584             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 186+ E580             >
 186+ E580 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 186+ E581 53 50 41 4E >                db      "SPAN"               // name string in 7-bit ascii, but
 186+ E585             >                org     $-1                 // alter last byte of Name just above to set
 186+ E584 CE          >                db      {b $} | END_BIT     // msb as name end
 186+ E585             >
 186+ E585 72 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 186+ E587             >Prev_Ptr        defl    Heap_Ptr
 186+ E587             >
 186+ E587             >mirror_Ptr      defl    $
 186+ E587             >
 186+ E587 8B 6B       >                dw      Dict_Ptr + 2        // xt
 186+ E589             >Heap_Ptr        defl    $ - $E000           // save current HP
 186+ E589             >
 186+ E589             >Current_HP      defl  $ - $E000             // used to set HP once!
 186+ E589             >
 186+ E589             >//              ______________________________________________________________________
 186+ E589             >//              Dictionary part
 186+ E589             >
 186+ E589             >                org     Dict_Ptr
 186+ 6B89             >
 186+ 6B89 87 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 186+ 6B8B             >
 186+ 6B8B             >SPAN:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 186+ 6B8B CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 186+ 6B8E             >
 186+ 6B8E             >
 186+ 6B8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 186+ 6B8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 186+ 6B8E             >
 186+ 6B8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 186+ 6B8E 44          >                db      68
 187+ 6B8F                              User_Def HANDLER    , "HANDLER"   , 70 // Used by THROW-CATCH
 187+ 6B8F             >                New_Def  HANDLER, "HANDLER", User_Ptr, is_normal
 187+ 6B8F             >
 187+ 6B8F             >Dict_Ptr        defl    $
 187+ 6B8F             >
 187+ 6B8F             >//              ______________________________________________________________________
 187+ 6B8F             >//              Heap part
 187+ 6B8F             >
 187+ 6B8F             >
 187+ 6B8F             >                org     (Heap_Ptr & $1FFF) + $E000
 187+ E589             >
 187+ E589             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 187+ E589             >Latest_Definition defl  Heap_Ptr
 187+ E589             >
 187+ E589             >                // dummy db directives used to calculate length of namec
 187+ E589 48 41 4E 44 >                db      "HANDLER"
 187+ E58D 4C 45 52    >
 187+ E590             >len_NFA         defl    $ - temp_NFA
 187+ E590             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 187+ E589             >
 187+ E589 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 187+ E58A 48 41 4E 44 >                db      "HANDLER"               // name string in 7-bit ascii, but
 187+ E58E 4C 45 52    >
 187+ E591             >                org     $-1                 // alter last byte of Name just above to set
 187+ E590 D2          >                db      {b $} | END_BIT     // msb as name end
 187+ E591             >
 187+ E591 80 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 187+ E593             >Prev_Ptr        defl    Heap_Ptr
 187+ E593             >
 187+ E593             >mirror_Ptr      defl    $
 187+ E593             >
 187+ E593 91 6B       >                dw      Dict_Ptr + 2        // xt
 187+ E595             >Heap_Ptr        defl    $ - $E000           // save current HP
 187+ E595             >
 187+ E595             >Current_HP      defl  $ - $E000             // used to set HP once!
 187+ E595             >
 187+ E595             >//              ______________________________________________________________________
 187+ E595             >//              Dictionary part
 187+ E595             >
 187+ E595             >                org     Dict_Ptr
 187+ 6B8F             >
 187+ 6B8F 93 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 187+ 6B91             >
 187+ 6B91             >HANDLER:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 187+ 6B91 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 187+ 6B94             >
 187+ 6B94             >
 187+ 6B94             >                endif           ; ok        // for other definitions it "points" the correct handler
 187+ 6B94             >                // Use of "; ok" to suppress "warning[fwdref]"
 187+ 6B94             >
 187+ 6B94             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 187+ 6B94 46          >                db      70
 188+ 6B95                              User_Def EXP        , "EXP"       , 72 // keeps the exponent in number conversion
 188+ 6B95             >                New_Def  EXP, "EXP", User_Ptr, is_normal
 188+ 6B95             >
 188+ 6B95             >Dict_Ptr        defl    $
 188+ 6B95             >
 188+ 6B95             >//              ______________________________________________________________________
 188+ 6B95             >//              Heap part
 188+ 6B95             >
 188+ 6B95             >
 188+ 6B95             >                org     (Heap_Ptr & $1FFF) + $E000
 188+ E595             >
 188+ E595             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 188+ E595             >Latest_Definition defl  Heap_Ptr
 188+ E595             >
 188+ E595             >                // dummy db directives used to calculate length of namec
 188+ E595 45 58 50    >                db      "EXP"
 188+ E598             >len_NFA         defl    $ - temp_NFA
 188+ E598             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 188+ E595             >
 188+ E595 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 188+ E596 45 58 50    >                db      "EXP"               // name string in 7-bit ascii, but
 188+ E599             >                org     $-1                 // alter last byte of Name just above to set
 188+ E598 D0          >                db      {b $} | END_BIT     // msb as name end
 188+ E599             >
 188+ E599 89 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 188+ E59B             >Prev_Ptr        defl    Heap_Ptr
 188+ E59B             >
 188+ E59B             >mirror_Ptr      defl    $
 188+ E59B             >
 188+ E59B 97 6B       >                dw      Dict_Ptr + 2        // xt
 188+ E59D             >Heap_Ptr        defl    $ - $E000           // save current HP
 188+ E59D             >
 188+ E59D             >Current_HP      defl  $ - $E000             // used to set HP once!
 188+ E59D             >
 188+ E59D             >//              ______________________________________________________________________
 188+ E59D             >//              Dictionary part
 188+ E59D             >
 188+ E59D             >                org     Dict_Ptr
 188+ 6B95             >
 188+ 6B95 9B 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 188+ 6B97             >
 188+ 6B97             >EXP:          if User_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 188+ 6B97 CD 6C 6A    >                call    User_Ptr ; ok        // for primitive definitions  actual code
 188+ 6B9A             >
 188+ 6B9A             >
 188+ 6B9A             >                endif           ; ok        // for other definitions it "points" the correct handler
 188+ 6B9A             >                // Use of "; ok" to suppress "warning[fwdref]"
 188+ 6B9A             >
 188+ 6B9A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 188+ 6B9A 48          >                db      72
 189+ 6B9B
 190+ 6B9B              //  ______________________________________________________________________
 191+ 6B9B              //
 192+ 6B9B              // here         -- a
 193+ 6B9B                              Colon_Def HERE, "HERE", is_normal
 193+ 6B9B             >                New_Def  HERE, "HERE", Enter_Ptr, is_normal ; ok
 193+ 6B9B             >
 193+ 6B9B             >Dict_Ptr        defl    $
 193+ 6B9B             >
 193+ 6B9B             >//              ______________________________________________________________________
 193+ 6B9B             >//              Heap part
 193+ 6B9B             >
 193+ 6B9B             >
 193+ 6B9B             >                org     (Heap_Ptr & $1FFF) + $E000
 193+ E59D             >
 193+ E59D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 193+ E59D             >Latest_Definition defl  Heap_Ptr
 193+ E59D             >
 193+ E59D             >                // dummy db directives used to calculate length of namec
 193+ E59D 48 45 52 45 >                db      "HERE"
 193+ E5A1             >len_NFA         defl    $ - temp_NFA
 193+ E5A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 193+ E59D             >
 193+ E59D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 193+ E59E 48 45 52 45 >                db      "HERE"               // name string in 7-bit ascii, but
 193+ E5A2             >                org     $-1                 // alter last byte of Name just above to set
 193+ E5A1 C5          >                db      {b $} | END_BIT     // msb as name end
 193+ E5A2             >
 193+ E5A2 95 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 193+ E5A4             >Prev_Ptr        defl    Heap_Ptr
 193+ E5A4             >
 193+ E5A4             >mirror_Ptr      defl    $
 193+ E5A4             >
 193+ E5A4 9D 6B       >                dw      Dict_Ptr + 2        // xt
 193+ E5A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 193+ E5A6             >
 193+ E5A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 193+ E5A6             >
 193+ E5A6             >//              ______________________________________________________________________
 193+ E5A6             >//              Dictionary part
 193+ E5A6             >
 193+ E5A6             >                org     Dict_Ptr
 193+ 6B9B             >
 193+ 6B9B A4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 193+ 6B9D             >
 193+ 6B9D             >HERE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 193+ 6B9D CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 193+ 6BA0             >
 193+ 6BA0             >
 193+ 6BA0             >                endif           ; ok        // for other definitions it "points" the correct handler
 193+ 6BA0             >                // Use of "; ok" to suppress "warning[fwdref]"
 193+ 6BA0             >
 193+ 6BA0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 194+ 6BA0 F5 6A 86 69                  dw      DP, FETCH               // dp @
 195+ 6BA4 51 68                        dw      EXIT                    // ;
 196+ 6BA6
 197+ 6BA6              //  ______________________________________________________________________
 198+ 6BA6              //
 199+ 6BA6              // allot        n --
 200+ 6BA6                              Colon_Def ALLOT, "ALLOT", is_normal
 200+ 6BA6             >                New_Def  ALLOT, "ALLOT", Enter_Ptr, is_normal ; ok
 200+ 6BA6             >
 200+ 6BA6             >Dict_Ptr        defl    $
 200+ 6BA6             >
 200+ 6BA6             >//              ______________________________________________________________________
 200+ 6BA6             >//              Heap part
 200+ 6BA6             >
 200+ 6BA6             >
 200+ 6BA6             >                org     (Heap_Ptr & $1FFF) + $E000
 200+ E5A6             >
 200+ E5A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 200+ E5A6             >Latest_Definition defl  Heap_Ptr
 200+ E5A6             >
 200+ E5A6             >                // dummy db directives used to calculate length of namec
 200+ E5A6 41 4C 4C 4F >                db      "ALLOT"
 200+ E5AA 54          >
 200+ E5AB             >len_NFA         defl    $ - temp_NFA
 200+ E5AB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 200+ E5A6             >
 200+ E5A6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 200+ E5A7 41 4C 4C 4F >                db      "ALLOT"               // name string in 7-bit ascii, but
 200+ E5AB 54          >
 200+ E5AC             >                org     $-1                 // alter last byte of Name just above to set
 200+ E5AB D4          >                db      {b $} | END_BIT     // msb as name end
 200+ E5AC             >
 200+ E5AC 9D 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 200+ E5AE             >Prev_Ptr        defl    Heap_Ptr
 200+ E5AE             >
 200+ E5AE             >mirror_Ptr      defl    $
 200+ E5AE             >
 200+ E5AE A8 6B       >                dw      Dict_Ptr + 2        // xt
 200+ E5B0             >Heap_Ptr        defl    $ - $E000           // save current HP
 200+ E5B0             >
 200+ E5B0             >Current_HP      defl  $ - $E000             // used to set HP once!
 200+ E5B0             >
 200+ E5B0             >//              ______________________________________________________________________
 200+ E5B0             >//              Dictionary part
 200+ E5B0             >
 200+ E5B0             >                org     Dict_Ptr
 200+ 6BA6             >
 200+ 6BA6 AE 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 200+ 6BA8             >
 200+ 6BA8             >ALLOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 200+ 6BA8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 200+ 6BAB             >
 200+ 6BAB             >
 200+ 6BAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 200+ 6BAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 200+ 6BAB             >
 200+ 6BAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 201+ 6BAB F5 6A 6E 69                  dw      DP,  PLUSSTORE          // dp +!
 202+ 6BAF 51 68                        dw      EXIT                    // ;
 203+ 6BB1
 204+ 6BB1              //  ______________________________________________________________________
 205+ 6BB1              //
 206+ 6BB1              // comma        n --
 207+ 6BB1                              Colon_Def COMMA, ",", is_normal
 207+ 6BB1             >                New_Def  COMMA, ",", Enter_Ptr, is_normal ; ok
 207+ 6BB1             >
 207+ 6BB1             >Dict_Ptr        defl    $
 207+ 6BB1             >
 207+ 6BB1             >//              ______________________________________________________________________
 207+ 6BB1             >//              Heap part
 207+ 6BB1             >
 207+ 6BB1             >
 207+ 6BB1             >                org     (Heap_Ptr & $1FFF) + $E000
 207+ E5B0             >
 207+ E5B0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 207+ E5B0             >Latest_Definition defl  Heap_Ptr
 207+ E5B0             >
 207+ E5B0             >                // dummy db directives used to calculate length of namec
 207+ E5B0 2C          >                db      ","
 207+ E5B1             >len_NFA         defl    $ - temp_NFA
 207+ E5B1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 207+ E5B0             >
 207+ E5B0 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 207+ E5B1 2C          >                db      ","               // name string in 7-bit ascii, but
 207+ E5B2             >                org     $-1                 // alter last byte of Name just above to set
 207+ E5B1 AC          >                db      {b $} | END_BIT     // msb as name end
 207+ E5B2             >
 207+ E5B2 A6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 207+ E5B4             >Prev_Ptr        defl    Heap_Ptr
 207+ E5B4             >
 207+ E5B4             >mirror_Ptr      defl    $
 207+ E5B4             >
 207+ E5B4 B3 6B       >                dw      Dict_Ptr + 2        // xt
 207+ E5B6             >Heap_Ptr        defl    $ - $E000           // save current HP
 207+ E5B6             >
 207+ E5B6             >Current_HP      defl  $ - $E000             // used to set HP once!
 207+ E5B6             >
 207+ E5B6             >//              ______________________________________________________________________
 207+ E5B6             >//              Dictionary part
 207+ E5B6             >
 207+ E5B6             >                org     Dict_Ptr
 207+ 6BB1             >
 207+ 6BB1 B4 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 207+ 6BB3             >
 207+ 6BB3             >COMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 207+ 6BB3 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 207+ 6BB6             >
 207+ 6BB6             >
 207+ 6BB6             >                endif           ; ok        // for other definitions it "points" the correct handler
 207+ 6BB6             >                // Use of "; ok" to suppress "warning[fwdref]"
 207+ 6BB6             >
 207+ 6BB6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 208+ 6BB6 9D 6B 90 69                  dw      HERE, STORE             // here !
 209+ 6BBA 86 6A A8 6B                  dw      TWO, ALLOT              // 2 allot
 210+ 6BBE 51 68                        dw      EXIT                    // ;
 211+ 6BC0
 212+ 6BC0              //  ______________________________________________________________________
 213+ 6BC0              //
 214+ 6BC0              // ccomma       c --
 215+ 6BC0                              Colon_Def CCOMMA, "C,", is_normal
 215+ 6BC0             >                New_Def  CCOMMA, "C,", Enter_Ptr, is_normal ; ok
 215+ 6BC0             >
 215+ 6BC0             >Dict_Ptr        defl    $
 215+ 6BC0             >
 215+ 6BC0             >//              ______________________________________________________________________
 215+ 6BC0             >//              Heap part
 215+ 6BC0             >
 215+ 6BC0             >
 215+ 6BC0             >                org     (Heap_Ptr & $1FFF) + $E000
 215+ E5B6             >
 215+ E5B6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 215+ E5B6             >Latest_Definition defl  Heap_Ptr
 215+ E5B6             >
 215+ E5B6             >                // dummy db directives used to calculate length of namec
 215+ E5B6 43 2C       >                db      "C,"
 215+ E5B8             >len_NFA         defl    $ - temp_NFA
 215+ E5B8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 215+ E5B6             >
 215+ E5B6 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 215+ E5B7 43 2C       >                db      "C,"               // name string in 7-bit ascii, but
 215+ E5B9             >                org     $-1                 // alter last byte of Name just above to set
 215+ E5B8 AC          >                db      {b $} | END_BIT     // msb as name end
 215+ E5B9             >
 215+ E5B9 B0 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 215+ E5BB             >Prev_Ptr        defl    Heap_Ptr
 215+ E5BB             >
 215+ E5BB             >mirror_Ptr      defl    $
 215+ E5BB             >
 215+ E5BB C2 6B       >                dw      Dict_Ptr + 2        // xt
 215+ E5BD             >Heap_Ptr        defl    $ - $E000           // save current HP
 215+ E5BD             >
 215+ E5BD             >Current_HP      defl  $ - $E000             // used to set HP once!
 215+ E5BD             >
 215+ E5BD             >//              ______________________________________________________________________
 215+ E5BD             >//              Dictionary part
 215+ E5BD             >
 215+ E5BD             >                org     Dict_Ptr
 215+ 6BC0             >
 215+ 6BC0 BB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 215+ 6BC2             >
 215+ 6BC2             >CCOMMA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 215+ 6BC2 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 215+ 6BC5             >
 215+ 6BC5             >
 215+ 6BC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 215+ 6BC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 215+ 6BC5             >
 215+ 6BC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 216+ 6BC5 9D 6B A4 69                  dw      HERE, CSTORE            // here c!
 217+ 6BC9 7F 6A A8 6B                  dw      ONE, ALLOT              // 1 allot
 218+ 6BCD 51 68                        dw      EXIT                    // ;
 219+ 6BCF
 220+ 6BCF              //  ______________________________________________________________________
 221+ 6BCF              //
 222+ 6BCF              // hpcomma      n --
 223+ 6BCF              //              Colon_Def HCOMMA, "HP,", is_normal
 224+ 6BCF              //              dw      HP_FETCH, FAR, STORE    // HP@ FAR !
 225+ 6BCF              //              dw      TWO, HP, PLUSSTORE      // 2 HP +!
 226+ 6BCF              //              dw      EXIT                    // ;
 227+ 6BCF
 228+ 6BCF              //  ______________________________________________________________________
 229+ 6BCF              //
 230+ 6BCF              // s>d          n -- d
 231+ 6BCF              // converts a single precision integer in a double precision
 232+ 6BCF                              New_Def S_TO_D, "S>D", is_code, is_normal
 232+ 6BCF             >
 232+ 6BCF             >Dict_Ptr        defl    $
 232+ 6BCF             >
 232+ 6BCF             >//              ______________________________________________________________________
 232+ 6BCF             >//              Heap part
 232+ 6BCF             >
 232+ 6BCF             >
 232+ 6BCF             >                org     (Heap_Ptr & $1FFF) + $E000
 232+ E5BD             >
 232+ E5BD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 232+ E5BD             >Latest_Definition defl  Heap_Ptr
 232+ E5BD             >
 232+ E5BD             >                // dummy db directives used to calculate length of namec
 232+ E5BD 53 3E 44    >                db      "S>D"
 232+ E5C0             >len_NFA         defl    $ - temp_NFA
 232+ E5C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 232+ E5BD             >
 232+ E5BD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 232+ E5BE 53 3E 44    >                db      "S>D"               // name string in 7-bit ascii, but
 232+ E5C1             >                org     $-1                 // alter last byte of Name just above to set
 232+ E5C0 C4          >                db      {b $} | END_BIT     // msb as name end
 232+ E5C1             >
 232+ E5C1 B6 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 232+ E5C3             >Prev_Ptr        defl    Heap_Ptr
 232+ E5C3             >
 232+ E5C3             >mirror_Ptr      defl    $
 232+ E5C3             >
 232+ E5C3 D1 6B       >                dw      Dict_Ptr + 2        // xt
 232+ E5C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 232+ E5C5             >
 232+ E5C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 232+ E5C5             >
 232+ E5C5             >//              ______________________________________________________________________
 232+ E5C5             >//              Dictionary part
 232+ E5C5             >
 232+ E5C5             >                org     Dict_Ptr
 232+ 6BCF             >
 232+ 6BCF C3 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 232+ 6BD1             >
 232+ 6BD1             >S_TO_D:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 232+ 6BD1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 232+ 6BD1 ~           >
 232+ 6BD1 ~           >
 232+ 6BD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 232+ 6BD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 232+ 6BD1             >
 232+ 6BD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 233+ 6BD1 E1                           pop     hl
 234+ 6BD2 7C                           ld      a, h
 235+ 6BD3 E5                           push    hl
 236+ 6BD4 17                           rla
 237+ 6BD5 ED 62                        sbc     hl, hl
 238+ 6BD7 E5                           push    hl
 239+ 6BD8                              next
 239+ 6BD8 DD E9       >                jp      (ix)
 240+ 6BDA
 241+ 6BDA              //  ______________________________________________________________________
 242+ 6BDA              //
 243+ 6BDA              // -            n1 n2 -- n3
 244+ 6BDA              // subtraction
 245+ 6BDA                              New_Def SUBTRACT, "-", is_code, is_normal
 245+ 6BDA             >
 245+ 6BDA             >Dict_Ptr        defl    $
 245+ 6BDA             >
 245+ 6BDA             >//              ______________________________________________________________________
 245+ 6BDA             >//              Heap part
 245+ 6BDA             >
 245+ 6BDA             >
 245+ 6BDA             >                org     (Heap_Ptr & $1FFF) + $E000
 245+ E5C5             >
 245+ E5C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 245+ E5C5             >Latest_Definition defl  Heap_Ptr
 245+ E5C5             >
 245+ E5C5             >                // dummy db directives used to calculate length of namec
 245+ E5C5 2D          >                db      "-"
 245+ E5C6             >len_NFA         defl    $ - temp_NFA
 245+ E5C6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 245+ E5C5             >
 245+ E5C5 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 245+ E5C6 2D          >                db      "-"               // name string in 7-bit ascii, but
 245+ E5C7             >                org     $-1                 // alter last byte of Name just above to set
 245+ E5C6 AD          >                db      {b $} | END_BIT     // msb as name end
 245+ E5C7             >
 245+ E5C7 BD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 245+ E5C9             >Prev_Ptr        defl    Heap_Ptr
 245+ E5C9             >
 245+ E5C9             >mirror_Ptr      defl    $
 245+ E5C9             >
 245+ E5C9 DC 6B       >                dw      Dict_Ptr + 2        // xt
 245+ E5CB             >Heap_Ptr        defl    $ - $E000           // save current HP
 245+ E5CB             >
 245+ E5CB             >Current_HP      defl  $ - $E000             // used to set HP once!
 245+ E5CB             >
 245+ E5CB             >//              ______________________________________________________________________
 245+ E5CB             >//              Dictionary part
 245+ E5CB             >
 245+ E5CB             >                org     Dict_Ptr
 245+ 6BDA             >
 245+ 6BDA C9 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 245+ 6BDC             >
 245+ 6BDC             >SUBTRACT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 245+ 6BDC ~           >                call    runcode ; ok        // for primitive definitions  actual code
 245+ 6BDC ~           >
 245+ 6BDC ~           >
 245+ 6BDC             >                endif           ; ok        // for other definitions it "points" the correct handler
 245+ 6BDC             >                // Use of "; ok" to suppress "warning[fwdref]"
 245+ 6BDC             >
 245+ 6BDC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 246+ 6BDC D9                           exx
 247+ 6BDD D1                           pop     de
 248+ 6BDE E1                           pop     hl
 249+ 6BDF A7                           and     a
 250+ 6BE0 ED 52                        sbc     hl, de
 251+ 6BE2 E5                           push    hl
 252+ 6BE3 D9                           exx
 253+ 6BE4                              next
 253+ 6BE4 DD E9       >                jp      (ix)
 254+ 6BE6
 255+ 6BE6
 256+ 6BE6              //  ______________________________________________________________________
 257+ 6BE6              //
 258+ 6BE6              // =            n1 n2 -- n3
 259+ 6BE6              // equals
 260+ 6BE6                              Colon_Def EQUALS, "=", is_normal
 260+ 6BE6             >                New_Def  EQUALS, "=", Enter_Ptr, is_normal ; ok
 260+ 6BE6             >
 260+ 6BE6             >Dict_Ptr        defl    $
 260+ 6BE6             >
 260+ 6BE6             >//              ______________________________________________________________________
 260+ 6BE6             >//              Heap part
 260+ 6BE6             >
 260+ 6BE6             >
 260+ 6BE6             >                org     (Heap_Ptr & $1FFF) + $E000
 260+ E5CB             >
 260+ E5CB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 260+ E5CB             >Latest_Definition defl  Heap_Ptr
 260+ E5CB             >
 260+ E5CB             >                // dummy db directives used to calculate length of namec
 260+ E5CB 3D          >                db      "="
 260+ E5CC             >len_NFA         defl    $ - temp_NFA
 260+ E5CC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 260+ E5CB             >
 260+ E5CB 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 260+ E5CC 3D          >                db      "="               // name string in 7-bit ascii, but
 260+ E5CD             >                org     $-1                 // alter last byte of Name just above to set
 260+ E5CC BD          >                db      {b $} | END_BIT     // msb as name end
 260+ E5CD             >
 260+ E5CD C5 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 260+ E5CF             >Prev_Ptr        defl    Heap_Ptr
 260+ E5CF             >
 260+ E5CF             >mirror_Ptr      defl    $
 260+ E5CF             >
 260+ E5CF E8 6B       >                dw      Dict_Ptr + 2        // xt
 260+ E5D1             >Heap_Ptr        defl    $ - $E000           // save current HP
 260+ E5D1             >
 260+ E5D1             >Current_HP      defl  $ - $E000             // used to set HP once!
 260+ E5D1             >
 260+ E5D1             >//              ______________________________________________________________________
 260+ E5D1             >//              Dictionary part
 260+ E5D1             >
 260+ E5D1             >                org     Dict_Ptr
 260+ 6BE6             >
 260+ 6BE6 CF 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 260+ 6BE8             >
 260+ 6BE8             >EQUALS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 260+ 6BE8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 260+ 6BEB             >
 260+ 6BEB             >
 260+ 6BEB             >                endif           ; ok        // for other definitions it "points" the correct handler
 260+ 6BEB             >                // Use of "; ok" to suppress "warning[fwdref]"
 260+ 6BEB             >
 260+ 6BEB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 261+ 6BEB DC 6B 76 68                  dw      SUBTRACT, ZEQUAL        // - 0=
 262+ 6BEF 51 68                        dw      EXIT                    // ;
 263+ 6BF1
 264+ 6BF1              //  ______________________________________________________________________
 265+ 6BF1              //
 266+ 6BF1              // u<           u1 u2 -- u3
 267+ 6BF1              // unsigned less-than
 268+ 6BF1                              New_Def ULESS, "U<", is_code, is_normal
 268+ 6BF1             >
 268+ 6BF1             >Dict_Ptr        defl    $
 268+ 6BF1             >
 268+ 6BF1             >//              ______________________________________________________________________
 268+ 6BF1             >//              Heap part
 268+ 6BF1             >
 268+ 6BF1             >
 268+ 6BF1             >                org     (Heap_Ptr & $1FFF) + $E000
 268+ E5D1             >
 268+ E5D1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 268+ E5D1             >Latest_Definition defl  Heap_Ptr
 268+ E5D1             >
 268+ E5D1             >                // dummy db directives used to calculate length of namec
 268+ E5D1 55 3C       >                db      "U<"
 268+ E5D3             >len_NFA         defl    $ - temp_NFA
 268+ E5D3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 268+ E5D1             >
 268+ E5D1 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 268+ E5D2 55 3C       >                db      "U<"               // name string in 7-bit ascii, but
 268+ E5D4             >                org     $-1                 // alter last byte of Name just above to set
 268+ E5D3 BC          >                db      {b $} | END_BIT     // msb as name end
 268+ E5D4             >
 268+ E5D4 CB 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 268+ E5D6             >Prev_Ptr        defl    Heap_Ptr
 268+ E5D6             >
 268+ E5D6             >mirror_Ptr      defl    $
 268+ E5D6             >
 268+ E5D6 F3 6B       >                dw      Dict_Ptr + 2        // xt
 268+ E5D8             >Heap_Ptr        defl    $ - $E000           // save current HP
 268+ E5D8             >
 268+ E5D8             >Current_HP      defl  $ - $E000             // used to set HP once!
 268+ E5D8             >
 268+ E5D8             >//              ______________________________________________________________________
 268+ E5D8             >//              Dictionary part
 268+ E5D8             >
 268+ E5D8             >                org     Dict_Ptr
 268+ 6BF1             >
 268+ 6BF1 D6 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 268+ 6BF3             >
 268+ 6BF3             >ULESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 268+ 6BF3 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 268+ 6BF3 ~           >
 268+ 6BF3 ~           >
 268+ 6BF3             >                endif           ; ok        // for other definitions it "points" the correct handler
 268+ 6BF3             >                // Use of "; ok" to suppress "warning[fwdref]"
 268+ 6BF3             >
 268+ 6BF3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 269+ 6BF3 D9                           exx
 270+ 6BF4 D1                           pop     de
 271+ 6BF5 E1                           pop     hl
 272+ 6BF6              Unsigned_Less_Exit:
 273+ 6BF6 A7                           and     a
 274+ 6BF7 ED 52                        sbc     hl, de
 275+ 6BF9 ED 62                        sbc     hl, hl
 276+ 6BFB E5                           push    hl
 277+ 6BFC D9                           exx
 278+ 6BFD                              next
 278+ 6BFD DD E9       >                jp      (ix)
 279+ 6BFF
 280+ 6BFF              //  ______________________________________________________________________
 281+ 6BFF              //
 282+ 6BFF              // <           n1 n2 -- n3
 283+ 6BFF              // less-than
 284+ 6BFF                              New_Def LESS, "<", is_code, is_normal
 284+ 6BFF             >
 284+ 6BFF             >Dict_Ptr        defl    $
 284+ 6BFF             >
 284+ 6BFF             >//              ______________________________________________________________________
 284+ 6BFF             >//              Heap part
 284+ 6BFF             >
 284+ 6BFF             >
 284+ 6BFF             >                org     (Heap_Ptr & $1FFF) + $E000
 284+ E5D8             >
 284+ E5D8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 284+ E5D8             >Latest_Definition defl  Heap_Ptr
 284+ E5D8             >
 284+ E5D8             >                // dummy db directives used to calculate length of namec
 284+ E5D8 3C          >                db      "<"
 284+ E5D9             >len_NFA         defl    $ - temp_NFA
 284+ E5D9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 284+ E5D8             >
 284+ E5D8 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 284+ E5D9 3C          >                db      "<"               // name string in 7-bit ascii, but
 284+ E5DA             >                org     $-1                 // alter last byte of Name just above to set
 284+ E5D9 BC          >                db      {b $} | END_BIT     // msb as name end
 284+ E5DA             >
 284+ E5DA D1 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 284+ E5DC             >Prev_Ptr        defl    Heap_Ptr
 284+ E5DC             >
 284+ E5DC             >mirror_Ptr      defl    $
 284+ E5DC             >
 284+ E5DC 01 6C       >                dw      Dict_Ptr + 2        // xt
 284+ E5DE             >Heap_Ptr        defl    $ - $E000           // save current HP
 284+ E5DE             >
 284+ E5DE             >Current_HP      defl  $ - $E000             // used to set HP once!
 284+ E5DE             >
 284+ E5DE             >//              ______________________________________________________________________
 284+ E5DE             >//              Dictionary part
 284+ E5DE             >
 284+ E5DE             >                org     Dict_Ptr
 284+ 6BFF             >
 284+ 6BFF DC 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 284+ 6C01             >
 284+ 6C01             >LESS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 284+ 6C01 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 284+ 6C01 ~           >
 284+ 6C01 ~           >
 284+ 6C01             >                endif           ; ok        // for other definitions it "points" the correct handler
 284+ 6C01             >                // Use of "; ok" to suppress "warning[fwdref]"
 284+ 6C01             >
 284+ 6C01             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 285+ 6C01 D9                           exx
 286+ 6C02 E1                           pop     hl
 287+ 6C03 D1                           pop     de
 288+ 6C04 01 00 80                     ld      bc, $8000
 289+ 6C07 09                           add     hl, bc
 290+ 6C08 EB                           ex      de, hl
 291+ 6C09 09                           add     hl, bc
 292+ 6C0A 18 EA                        jr      Unsigned_Less_Exit
 293+ 6C0C              //              and     a
 294+ 6C0C              //              sbc     hl, de
 295+ 6C0C              //              sbc     hl, hl
 296+ 6C0C              //              push    hl
 297+ 6C0C              //              exx
 298+ 6C0C              //              next
 299+ 6C0C
 300+ 6C0C              //  ______________________________________________________________________
 301+ 6C0C              //
 302+ 6C0C              // >            n1 n2 -- n3
 303+ 6C0C              // greater than
 304+ 6C0C                              Colon_Def GREATER, ">", is_normal
 304+ 6C0C             >                New_Def  GREATER, ">", Enter_Ptr, is_normal ; ok
 304+ 6C0C             >
 304+ 6C0C             >Dict_Ptr        defl    $
 304+ 6C0C             >
 304+ 6C0C             >//              ______________________________________________________________________
 304+ 6C0C             >//              Heap part
 304+ 6C0C             >
 304+ 6C0C             >
 304+ 6C0C             >                org     (Heap_Ptr & $1FFF) + $E000
 304+ E5DE             >
 304+ E5DE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 304+ E5DE             >Latest_Definition defl  Heap_Ptr
 304+ E5DE             >
 304+ E5DE             >                // dummy db directives used to calculate length of namec
 304+ E5DE 3E          >                db      ">"
 304+ E5DF             >len_NFA         defl    $ - temp_NFA
 304+ E5DF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 304+ E5DE             >
 304+ E5DE 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 304+ E5DF 3E          >                db      ">"               // name string in 7-bit ascii, but
 304+ E5E0             >                org     $-1                 // alter last byte of Name just above to set
 304+ E5DF BE          >                db      {b $} | END_BIT     // msb as name end
 304+ E5E0             >
 304+ E5E0 D8 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 304+ E5E2             >Prev_Ptr        defl    Heap_Ptr
 304+ E5E2             >
 304+ E5E2             >mirror_Ptr      defl    $
 304+ E5E2             >
 304+ E5E2 0E 6C       >                dw      Dict_Ptr + 2        // xt
 304+ E5E4             >Heap_Ptr        defl    $ - $E000           // save current HP
 304+ E5E4             >
 304+ E5E4             >Current_HP      defl  $ - $E000             // used to set HP once!
 304+ E5E4             >
 304+ E5E4             >//              ______________________________________________________________________
 304+ E5E4             >//              Dictionary part
 304+ E5E4             >
 304+ E5E4             >                org     Dict_Ptr
 304+ 6C0C             >
 304+ 6C0C E2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 304+ 6C0E             >
 304+ 6C0E             >GREATER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 304+ 6C0E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 304+ 6C11             >
 304+ 6C11             >
 304+ 6C11             >                endif           ; ok        // for other definitions it "points" the correct handler
 304+ 6C11             >                // Use of "; ok" to suppress "warning[fwdref]"
 304+ 6C11             >
 304+ 6C11             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 305+ 6C11 15 69 01 6C                  dw      SWAP, LESS              // swap <
 306+ 6C15 51 68                        dw      EXIT                    // ;
 307+ 6C17              //  ______________________________________________________________________
 308+ 6C17              //
 309+ 6C17              // min          n1 n2 -- n3
 310+ 6C17              // minimum between n1 and n2
 311+ 6C17                              Colon_Def MIN, "MIN" , is_normal
 311+ 6C17             >                New_Def  MIN, "MIN", Enter_Ptr, is_normal ; ok
 311+ 6C17             >
 311+ 6C17             >Dict_Ptr        defl    $
 311+ 6C17             >
 311+ 6C17             >//              ______________________________________________________________________
 311+ 6C17             >//              Heap part
 311+ 6C17             >
 311+ 6C17             >
 311+ 6C17             >                org     (Heap_Ptr & $1FFF) + $E000
 311+ E5E4             >
 311+ E5E4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 311+ E5E4             >Latest_Definition defl  Heap_Ptr
 311+ E5E4             >
 311+ E5E4             >                // dummy db directives used to calculate length of namec
 311+ E5E4 4D 49 4E    >                db      "MIN"
 311+ E5E7             >len_NFA         defl    $ - temp_NFA
 311+ E5E7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 311+ E5E4             >
 311+ E5E4 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 311+ E5E5 4D 49 4E    >                db      "MIN"               // name string in 7-bit ascii, but
 311+ E5E8             >                org     $-1                 // alter last byte of Name just above to set
 311+ E5E7 CE          >                db      {b $} | END_BIT     // msb as name end
 311+ E5E8             >
 311+ E5E8 DE 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 311+ E5EA             >Prev_Ptr        defl    Heap_Ptr
 311+ E5EA             >
 311+ E5EA             >mirror_Ptr      defl    $
 311+ E5EA             >
 311+ E5EA 19 6C       >                dw      Dict_Ptr + 2        // xt
 311+ E5EC             >Heap_Ptr        defl    $ - $E000           // save current HP
 311+ E5EC             >
 311+ E5EC             >Current_HP      defl  $ - $E000             // used to set HP once!
 311+ E5EC             >
 311+ E5EC             >//              ______________________________________________________________________
 311+ E5EC             >//              Dictionary part
 311+ E5EC             >
 311+ E5EC             >                org     Dict_Ptr
 311+ 6C17             >
 311+ 6C17 EA 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 311+ 6C19             >
 311+ 6C19             >MIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 311+ 6C19 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 311+ 6C1C             >
 311+ 6C1C             >
 311+ 6C1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 311+ 6C1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 311+ 6C1C             >
 311+ 6C1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 312+ 6C1C 64 69                        dw      TWO_DUP                 // 2dup
 313+ 6C1E 0E 6C                        dw      GREATER                 // >
 314+ 6C20 F3 63                        dw      ZBRANCH
 315+ 6C22 04 00                        dw      Min_Skip - $   // if
 316+ 6C24 15 69                        dw          SWAP                //      swap
 317+ 6C26              Min_Skip:                                       // endif
 318+ 6C26 01 69                        dw      DROP                    // drop
 319+ 6C28 51 68                        dw      EXIT                    // ;
 320+ 6C2A
 321+ 6C2A              //  ______________________________________________________________________
 322+ 6C2A              //
 323+ 6C2A              // max          n1 n2 -- n3
 324+ 6C2A              // maximum between n1 and n2
 325+ 6C2A                              Colon_Def MAX, "MAX", is_normal
 325+ 6C2A             >                New_Def  MAX, "MAX", Enter_Ptr, is_normal ; ok
 325+ 6C2A             >
 325+ 6C2A             >Dict_Ptr        defl    $
 325+ 6C2A             >
 325+ 6C2A             >//              ______________________________________________________________________
 325+ 6C2A             >//              Heap part
 325+ 6C2A             >
 325+ 6C2A             >
 325+ 6C2A             >                org     (Heap_Ptr & $1FFF) + $E000
 325+ E5EC             >
 325+ E5EC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 325+ E5EC             >Latest_Definition defl  Heap_Ptr
 325+ E5EC             >
 325+ E5EC             >                // dummy db directives used to calculate length of namec
 325+ E5EC 4D 41 58    >                db      "MAX"
 325+ E5EF             >len_NFA         defl    $ - temp_NFA
 325+ E5EF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 325+ E5EC             >
 325+ E5EC 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 325+ E5ED 4D 41 58    >                db      "MAX"               // name string in 7-bit ascii, but
 325+ E5F0             >                org     $-1                 // alter last byte of Name just above to set
 325+ E5EF D8          >                db      {b $} | END_BIT     // msb as name end
 325+ E5F0             >
 325+ E5F0 E4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 325+ E5F2             >Prev_Ptr        defl    Heap_Ptr
 325+ E5F2             >
 325+ E5F2             >mirror_Ptr      defl    $
 325+ E5F2             >
 325+ E5F2 2C 6C       >                dw      Dict_Ptr + 2        // xt
 325+ E5F4             >Heap_Ptr        defl    $ - $E000           // save current HP
 325+ E5F4             >
 325+ E5F4             >Current_HP      defl  $ - $E000             // used to set HP once!
 325+ E5F4             >
 325+ E5F4             >//              ______________________________________________________________________
 325+ E5F4             >//              Dictionary part
 325+ E5F4             >
 325+ E5F4             >                org     Dict_Ptr
 325+ 6C2A             >
 325+ 6C2A F2 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 325+ 6C2C             >
 325+ 6C2C             >MAX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 325+ 6C2C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 325+ 6C2F             >
 325+ 6C2F             >
 325+ 6C2F             >                endif           ; ok        // for other definitions it "points" the correct handler
 325+ 6C2F             >                // Use of "; ok" to suppress "warning[fwdref]"
 325+ 6C2F             >
 325+ 6C2F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 326+ 6C2F 64 69                        dw      TWO_DUP                 // 2dup
 327+ 6C31 01 6C                        dw      LESS                    // <
 328+ 6C33 F3 63                        dw      ZBRANCH
 329+ 6C35 04 00                        dw      Max_Skip - $   // if
 330+ 6C37 15 69                        dw          SWAP                //      swap
 331+ 6C39              Max_Skip:                                       // endif
 332+ 6C39 01 69                        dw      DROP                    // drop
 333+ 6C3B 51 68                        dw      EXIT                    // ;
 334+ 6C3D
 335+ 6C3D              //  ______________________________________________________________________
 336+ 6C3D              //
 337+ 6C3D              // ?dup         n -- 0 | n n
 338+ 6C3D              // duplicate if not zero
 339+ 6C3D                              New_Def QDUP, "?DUP", is_code, is_normal
 339+ 6C3D             >
 339+ 6C3D             >Dict_Ptr        defl    $
 339+ 6C3D             >
 339+ 6C3D             >//              ______________________________________________________________________
 339+ 6C3D             >//              Heap part
 339+ 6C3D             >
 339+ 6C3D             >
 339+ 6C3D             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ E5F4             >
 339+ E5F4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ E5F4             >Latest_Definition defl  Heap_Ptr
 339+ E5F4             >
 339+ E5F4             >                // dummy db directives used to calculate length of namec
 339+ E5F4 3F 44 55 50 >                db      "?DUP"
 339+ E5F8             >len_NFA         defl    $ - temp_NFA
 339+ E5F8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ E5F4             >
 339+ E5F4 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ E5F5 3F 44 55 50 >                db      "?DUP"               // name string in 7-bit ascii, but
 339+ E5F9             >                org     $-1                 // alter last byte of Name just above to set
 339+ E5F8 D0          >                db      {b $} | END_BIT     // msb as name end
 339+ E5F9             >
 339+ E5F9 EC 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ E5FB             >Prev_Ptr        defl    Heap_Ptr
 339+ E5FB             >
 339+ E5FB             >mirror_Ptr      defl    $
 339+ E5FB             >
 339+ E5FB 3F 6C       >                dw      Dict_Ptr + 2        // xt
 339+ E5FD             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ E5FD             >
 339+ E5FD             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ E5FD             >
 339+ E5FD             >//              ______________________________________________________________________
 339+ E5FD             >//              Dictionary part
 339+ E5FD             >
 339+ E5FD             >                org     Dict_Ptr
 339+ 6C3D             >
 339+ 6C3D FB 05       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 6C3F             >
 339+ 6C3F             >QDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 6C3F ~           >                call    runcode ; ok        // for primitive definitions  actual code
 339+ 6C3F ~           >
 339+ 6C3F ~           >
 339+ 6C3F             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 6C3F             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 6C3F             >
 339+ 6C3F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 6C3F              QDup_Ptr:
 341+ 6C3F E1                           pop     hl
 342+ 6C40 7C                           ld      a, h
 343+ 6C41 B5                           or      l
 344+ 6C42 28 01                        jr      z, QDup_Skip
 345+ 6C44 E5                               push    hl
 346+ 6C45              QDup_Skip:
 347+ 6C45                              psh1
 347+ 6C45 E5          >                push    hl
 347+ 6C46 DD E9       >                jp      (ix)
 348+ 6C48
 349+ 6C48              //  ______________________________________________________________________
 350+ 6C48              //
 351+ 6C48              // -dup         n -- 0 | n n
 352+ 6C48              // duplicate if not zero
 353+ 6C48                              New_Def LDUP, "-DUP", is_code, is_normal
 353+ 6C48             >
 353+ 6C48             >Dict_Ptr        defl    $
 353+ 6C48             >
 353+ 6C48             >//              ______________________________________________________________________
 353+ 6C48             >//              Heap part
 353+ 6C48             >
 353+ 6C48             >
 353+ 6C48             >                org     (Heap_Ptr & $1FFF) + $E000
 353+ E5FD             >
 353+ E5FD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 353+ E5FD             >Latest_Definition defl  Heap_Ptr
 353+ E5FD             >
 353+ E5FD             >                // dummy db directives used to calculate length of namec
 353+ E5FD 2D 44 55 50 >                db      "-DUP"
 353+ E601             >len_NFA         defl    $ - temp_NFA
 353+ E601             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 353+ E5FD             >
 353+ E5FD 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 353+ E5FE 2D 44 55 50 >                db      "-DUP"               // name string in 7-bit ascii, but
 353+ E602             >                org     $-1                 // alter last byte of Name just above to set
 353+ E601 D0          >                db      {b $} | END_BIT     // msb as name end
 353+ E602             >
 353+ E602 F4 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 353+ E604             >Prev_Ptr        defl    Heap_Ptr
 353+ E604             >
 353+ E604             >mirror_Ptr      defl    $
 353+ E604             >
 353+ E604 4A 6C       >                dw      Dict_Ptr + 2        // xt
 353+ E606             >Heap_Ptr        defl    $ - $E000           // save current HP
 353+ E606             >
 353+ E606             >Current_HP      defl  $ - $E000             // used to set HP once!
 353+ E606             >
 353+ E606             >//              ______________________________________________________________________
 353+ E606             >//              Dictionary part
 353+ E606             >
 353+ E606             >                org     Dict_Ptr
 353+ 6C48             >
 353+ 6C48 04 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 353+ 6C4A             >
 353+ 6C4A             >LDUP:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 353+ 6C4A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 353+ 6C4A ~           >
 353+ 6C4A ~           >
 353+ 6C4A             >                endif           ; ok        // for other definitions it "points" the correct handler
 353+ 6C4A             >                // Use of "; ok" to suppress "warning[fwdref]"
 353+ 6C4A             >
 353+ 6C4A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 354+ 6C4A C3 3F 6C                     jp      QDup_Ptr
 355+ 6C4D
 356+ 6C4D              //  ______________________________________________________________________
 357+ 6C4D              //
 358+ 6C4D              // emit         c --
 359+ 6C4D                              Colon_Def EMIT, "EMIT", is_normal
 359+ 6C4D             >                New_Def  EMIT, "EMIT", Enter_Ptr, is_normal ; ok
 359+ 6C4D             >
 359+ 6C4D             >Dict_Ptr        defl    $
 359+ 6C4D             >
 359+ 6C4D             >//              ______________________________________________________________________
 359+ 6C4D             >//              Heap part
 359+ 6C4D             >
 359+ 6C4D             >
 359+ 6C4D             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E606             >
 359+ E606             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E606             >Latest_Definition defl  Heap_Ptr
 359+ E606             >
 359+ E606             >                // dummy db directives used to calculate length of namec
 359+ E606 45 4D 49 54 >                db      "EMIT"
 359+ E60A             >len_NFA         defl    $ - temp_NFA
 359+ E60A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E606             >
 359+ E606 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E607 45 4D 49 54 >                db      "EMIT"               // name string in 7-bit ascii, but
 359+ E60B             >                org     $-1                 // alter last byte of Name just above to set
 359+ E60A D4          >                db      {b $} | END_BIT     // msb as name end
 359+ E60B             >
 359+ E60B FD 05       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E60D             >Prev_Ptr        defl    Heap_Ptr
 359+ E60D             >
 359+ E60D             >mirror_Ptr      defl    $
 359+ E60D             >
 359+ E60D 4F 6C       >                dw      Dict_Ptr + 2        // xt
 359+ E60F             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E60F             >
 359+ E60F             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E60F             >
 359+ E60F             >//              ______________________________________________________________________
 359+ E60F             >//              Dictionary part
 359+ E60F             >
 359+ E60F             >                org     Dict_Ptr
 359+ 6C4D             >
 359+ 6C4D 0D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 6C4F             >
 359+ 6C4F             >EMIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 6C4F CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 6C52             >
 359+ 6C52             >
 359+ 6C52             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 6C52             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 6C52             >
 359+ 6C52             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 6C52 CD 65                        dw      C_EMIT                      // (?emit)
 361+ 6C54 3F 6C                        dw      QDUP                        // ?dup
 362+ 6C56                                                                  // if
 363+ 6C56 F3 63                        dw      ZBRANCH
 364+ 6C58 0A 00                        dw      Emit_Skip - $
 365+ 6C5A 9B 65                        dw          EMITC                   //      emitc
 366+ 6C5C 7F 6A                        dw          ONE                     //      1
 367+ 6C5E 25 6B 6E 69                  dw          OUT, PLUSSTORE        //      out +!
 368+ 6C62              Emit_Skip:                                          // endif
 369+ 6C62 51 68                        dw      EXIT                        // ;
 370+ 6C64
 371+ 6C64              //  ______________________________________________________________________
 372+ 6C64              //
 373+ 6C64              // space        --
 374+ 6C64                              Colon_Def SPACE, "SPACE", is_normal
 374+ 6C64             >                New_Def  SPACE, "SPACE", Enter_Ptr, is_normal ; ok
 374+ 6C64             >
 374+ 6C64             >Dict_Ptr        defl    $
 374+ 6C64             >
 374+ 6C64             >//              ______________________________________________________________________
 374+ 6C64             >//              Heap part
 374+ 6C64             >
 374+ 6C64             >
 374+ 6C64             >                org     (Heap_Ptr & $1FFF) + $E000
 374+ E60F             >
 374+ E60F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 374+ E60F             >Latest_Definition defl  Heap_Ptr
 374+ E60F             >
 374+ E60F             >                // dummy db directives used to calculate length of namec
 374+ E60F 53 50 41 43 >                db      "SPACE"
 374+ E613 45          >
 374+ E614             >len_NFA         defl    $ - temp_NFA
 374+ E614             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 374+ E60F             >
 374+ E60F 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 374+ E610 53 50 41 43 >                db      "SPACE"               // name string in 7-bit ascii, but
 374+ E614 45          >
 374+ E615             >                org     $-1                 // alter last byte of Name just above to set
 374+ E614 C5          >                db      {b $} | END_BIT     // msb as name end
 374+ E615             >
 374+ E615 06 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 374+ E617             >Prev_Ptr        defl    Heap_Ptr
 374+ E617             >
 374+ E617             >mirror_Ptr      defl    $
 374+ E617             >
 374+ E617 66 6C       >                dw      Dict_Ptr + 2        // xt
 374+ E619             >Heap_Ptr        defl    $ - $E000           // save current HP
 374+ E619             >
 374+ E619             >Current_HP      defl  $ - $E000             // used to set HP once!
 374+ E619             >
 374+ E619             >//              ______________________________________________________________________
 374+ E619             >//              Dictionary part
 374+ E619             >
 374+ E619             >                org     Dict_Ptr
 374+ 6C64             >
 374+ 6C64 17 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 374+ 6C66             >
 374+ 6C66             >SPACE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 374+ 6C66 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 374+ 6C69             >
 374+ 6C69             >
 374+ 6C69             >                endif           ; ok        // for other definitions it "points" the correct handler
 374+ 6C69             >                // Use of "; ok" to suppress "warning[fwdref]"
 374+ 6C69             >
 374+ 6C69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 375+ 6C69 9B 6A 4F 6C                  dw      BL, EMIT                // bl emit
 376+ 6C6D 51 68                        dw      EXIT                    // ;
 377+ 6C6F
 378+ 6C6F              //  ______________________________________________________________________
 379+ 6C6F              //
 380+ 6C6F              // traverse     a n -- a
 381+ 6C6F              // A dictionary entry is structured as follows
 382+ 6C6F              // NFA: +0   one byte of word-length (n<32) | some flags (immediate, smudge) | $80
 383+ 6C6F              //      +1   word name, last character is toggled with $80
 384+ 6C6F              // LFA: +1+n link to NFA ofprevious  dictionary entry.
 385+ 6C6F              // CFA: +3+n routine address. Colon definitions here have a CALL aa
 386+ 6C6F              // PFA: +6+n "is_code", definitions have no PFA. // +5
 387+ 6C6F              //
 388+ 6C6F                              Colon_Def TRAVERSE, "TRAVERSE", is_normal
 388+ 6C6F             >                New_Def  TRAVERSE, "TRAVERSE", Enter_Ptr, is_normal ; ok
 388+ 6C6F             >
 388+ 6C6F             >Dict_Ptr        defl    $
 388+ 6C6F             >
 388+ 6C6F             >//              ______________________________________________________________________
 388+ 6C6F             >//              Heap part
 388+ 6C6F             >
 388+ 6C6F             >
 388+ 6C6F             >                org     (Heap_Ptr & $1FFF) + $E000
 388+ E619             >
 388+ E619             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 388+ E619             >Latest_Definition defl  Heap_Ptr
 388+ E619             >
 388+ E619             >                // dummy db directives used to calculate length of namec
 388+ E619 54 52 41 56 >                db      "TRAVERSE"
 388+ E61D 45 52 53 45 >
 388+ E621             >len_NFA         defl    $ - temp_NFA
 388+ E621             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 388+ E619             >
 388+ E619 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 388+ E61A 54 52 41 56 >                db      "TRAVERSE"               // name string in 7-bit ascii, but
 388+ E61E 45 52 53 45 >
 388+ E622             >                org     $-1                 // alter last byte of Name just above to set
 388+ E621 C5          >                db      {b $} | END_BIT     // msb as name end
 388+ E622             >
 388+ E622 0F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 388+ E624             >Prev_Ptr        defl    Heap_Ptr
 388+ E624             >
 388+ E624             >mirror_Ptr      defl    $
 388+ E624             >
 388+ E624 71 6C       >                dw      Dict_Ptr + 2        // xt
 388+ E626             >Heap_Ptr        defl    $ - $E000           // save current HP
 388+ E626             >
 388+ E626             >Current_HP      defl  $ - $E000             // used to set HP once!
 388+ E626             >
 388+ E626             >//              ______________________________________________________________________
 388+ E626             >//              Dictionary part
 388+ E626             >
 388+ E626             >                org     Dict_Ptr
 388+ 6C6F             >
 388+ 6C6F 24 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 388+ 6C71             >
 388+ 6C71             >TRAVERSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 388+ 6C71 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 388+ 6C74             >
 388+ 6C74             >
 388+ 6C74             >                endif           ; ok        // for other definitions it "points" the correct handler
 388+ 6C74             >                // Use of "; ok" to suppress "warning[fwdref]"
 388+ 6C74             >
 388+ 6C74             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 389+ 6C74 15 69                        dw      SWAP                    // swap
 390+ 6C76              Traverse_Begin:                                 // begin
 391+ 6C76 F8 68 9E 68                  dw          OVER, PLUS          //      over +
 392+ 6C7A A3 63 7F 00                  dw          LIT, 127            //      127
 393+ 6C7E F8 68 9B 69                  dw          OVER, CFETCH        //      over @
 394+ 6C82 01 6C                        dw          LESS                //      <
 395+ 6C84                                                              // until
 396+ 6C84 F3 63                        dw      ZBRANCH
 397+ 6C86 F0 FF                        dw      Traverse_Begin - $
 398+ 6C88 06 69                        dw      NIP                     //  nip
 399+ 6C8A 51 68                        dw      EXIT                    //  ;
 400+ 6C8C
 401+ 6C8C              //  ______________________________________________________________________
 402+ 6C8C              //
 403+ 6C8C              // mmu7@        -- n
 404+ 6C8C              // query current page in MMU7 8K-RAM : 0 and 223
 405+ 6C8C
 406+ 6C8C                              New_Def MMU7_FETCH, "MMU7@", is_code, is_normal
 406+ 6C8C             >
 406+ 6C8C             >Dict_Ptr        defl    $
 406+ 6C8C             >
 406+ 6C8C             >//              ______________________________________________________________________
 406+ 6C8C             >//              Heap part
 406+ 6C8C             >
 406+ 6C8C             >
 406+ 6C8C             >                org     (Heap_Ptr & $1FFF) + $E000
 406+ E626             >
 406+ E626             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 406+ E626             >Latest_Definition defl  Heap_Ptr
 406+ E626             >
 406+ E626             >                // dummy db directives used to calculate length of namec
 406+ E626 4D 4D 55 37 >                db      "MMU7@"
 406+ E62A 40          >
 406+ E62B             >len_NFA         defl    $ - temp_NFA
 406+ E62B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 406+ E626             >
 406+ E626 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 406+ E627 4D 4D 55 37 >                db      "MMU7@"               // name string in 7-bit ascii, but
 406+ E62B 40          >
 406+ E62C             >                org     $-1                 // alter last byte of Name just above to set
 406+ E62B C0          >                db      {b $} | END_BIT     // msb as name end
 406+ E62C             >
 406+ E62C 19 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 406+ E62E             >Prev_Ptr        defl    Heap_Ptr
 406+ E62E             >
 406+ E62E             >mirror_Ptr      defl    $
 406+ E62E             >
 406+ E62E 8E 6C       >                dw      Dict_Ptr + 2        // xt
 406+ E630             >Heap_Ptr        defl    $ - $E000           // save current HP
 406+ E630             >
 406+ E630             >Current_HP      defl  $ - $E000             // used to set HP once!
 406+ E630             >
 406+ E630             >//              ______________________________________________________________________
 406+ E630             >//              Dictionary part
 406+ E630             >
 406+ E630             >                org     Dict_Ptr
 406+ 6C8C             >
 406+ 6C8C 2E 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 406+ 6C8E             >
 406+ 6C8E             >MMU7_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 406+ 6C8E ~           >                call    runcode ; ok        // for primitive definitions  actual code
 406+ 6C8E ~           >
 406+ 6C8E ~           >
 406+ 6C8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 406+ 6C8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 406+ 6C8E             >
 406+ 6C8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 407+ 6C8E D9                           exx
 408+ 6C8F CD 98 64                     call    MMU7_read
 409+ 6C92 D9                           exx
 410+ 6C93 6F                           ld      l, a
 411+ 6C94 26 00                        ld      h, 0
 412+ 6C96 E5                           push    hl
 413+ 6C97                              next
 413+ 6C97 DD E9       >                jp      (ix)
 414+ 6C99
 415+ 6C99              //  ______________________________________________________________________
 416+ 6C99              //
 417+ 6C99              // mmu7!        n --
 418+ 6C99              // set MMU7 8K-RAM page to n given between 0 and 223
 419+ 6C99              // optimized version that uses NEXTREG n,A Z80n op-code.
 420+ 6C99
 421+ 6C99                              New_Def MMU7_STORE, "MMU7!", is_code, is_normal
 421+ 6C99             >
 421+ 6C99             >Dict_Ptr        defl    $
 421+ 6C99             >
 421+ 6C99             >//              ______________________________________________________________________
 421+ 6C99             >//              Heap part
 421+ 6C99             >
 421+ 6C99             >
 421+ 6C99             >                org     (Heap_Ptr & $1FFF) + $E000
 421+ E630             >
 421+ E630             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 421+ E630             >Latest_Definition defl  Heap_Ptr
 421+ E630             >
 421+ E630             >                // dummy db directives used to calculate length of namec
 421+ E630 4D 4D 55 37 >                db      "MMU7!"
 421+ E634 21          >
 421+ E635             >len_NFA         defl    $ - temp_NFA
 421+ E635             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 421+ E630             >
 421+ E630 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 421+ E631 4D 4D 55 37 >                db      "MMU7!"               // name string in 7-bit ascii, but
 421+ E635 21          >
 421+ E636             >                org     $-1                 // alter last byte of Name just above to set
 421+ E635 A1          >                db      {b $} | END_BIT     // msb as name end
 421+ E636             >
 421+ E636 26 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 421+ E638             >Prev_Ptr        defl    Heap_Ptr
 421+ E638             >
 421+ E638             >mirror_Ptr      defl    $
 421+ E638             >
 421+ E638 9B 6C       >                dw      Dict_Ptr + 2        // xt
 421+ E63A             >Heap_Ptr        defl    $ - $E000           // save current HP
 421+ E63A             >
 421+ E63A             >Current_HP      defl  $ - $E000             // used to set HP once!
 421+ E63A             >
 421+ E63A             >//              ______________________________________________________________________
 421+ E63A             >//              Dictionary part
 421+ E63A             >
 421+ E63A             >                org     Dict_Ptr
 421+ 6C99             >
 421+ 6C99 38 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 421+ 6C9B             >
 421+ 6C9B             >MMU7_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 421+ 6C9B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 421+ 6C9B ~           >
 421+ 6C9B ~           >
 421+ 6C9B             >                endif           ; ok        // for other definitions it "points" the correct handler
 421+ 6C9B             >                // Use of "; ok" to suppress "warning[fwdref]"
 421+ 6C9B             >
 421+ 6C9B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 422+ 6C9B E1                           pop     hl
 423+ 6C9C 7D                           ld      a, l
 424+ 6C9D ED 92 57                     nextreg 87, a
 425+ 6CA0
 426+ 6CA0                              next
 426+ 6CA0 DD E9       >                jp      (ix)
 427+ 6CA2
 428+ 6CA2              //  ______________________________________________________________________
 429+ 6CA2              //
 430+ 6CA2              // >far         ha -- a n
 431+ 6CA2              // decode bits 765 of H as one of the 8K-page between 64 and 71 (40h-47h)
 432+ 6CA2              // take lower bits of H and L as an offset from E000h
 433+ 6CA2              // then return address  a  between E000h-FFFFh
 434+ 6CA2              // and page number n  between 64-71 (40h-47h)
 435+ 6CA2              // For example, in hex:
 436+ 6CA2              //   0000 >FAR  gives  40.E000
 437+ 6CA2              //   1FFF >FAR  gives  40.FFFF
 438+ 6CA2              //   2000 >FAR  gives  41.E000
 439+ 6CA2              //   3FFF >FAR  gives  41.FFFF
 440+ 6CA2              //   EFFF >FAR  gives  47.EFFF
 441+ 6CA2              //   FFFF >FAR  gives  47.FFFF
 442+ 6CA2                              New_Def TO_FAR, ">FAR", is_code, is_normal
 442+ 6CA2             >
 442+ 6CA2             >Dict_Ptr        defl    $
 442+ 6CA2             >
 442+ 6CA2             >//              ______________________________________________________________________
 442+ 6CA2             >//              Heap part
 442+ 6CA2             >
 442+ 6CA2             >
 442+ 6CA2             >                org     (Heap_Ptr & $1FFF) + $E000
 442+ E63A             >
 442+ E63A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 442+ E63A             >Latest_Definition defl  Heap_Ptr
 442+ E63A             >
 442+ E63A             >                // dummy db directives used to calculate length of namec
 442+ E63A 3E 46 41 52 >                db      ">FAR"
 442+ E63E             >len_NFA         defl    $ - temp_NFA
 442+ E63E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 442+ E63A             >
 442+ E63A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 442+ E63B 3E 46 41 52 >                db      ">FAR"               // name string in 7-bit ascii, but
 442+ E63F             >                org     $-1                 // alter last byte of Name just above to set
 442+ E63E D2          >                db      {b $} | END_BIT     // msb as name end
 442+ E63F             >
 442+ E63F 30 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 442+ E641             >Prev_Ptr        defl    Heap_Ptr
 442+ E641             >
 442+ E641             >mirror_Ptr      defl    $
 442+ E641             >
 442+ E641 A4 6C       >                dw      Dict_Ptr + 2        // xt
 442+ E643             >Heap_Ptr        defl    $ - $E000           // save current HP
 442+ E643             >
 442+ E643             >Current_HP      defl  $ - $E000             // used to set HP once!
 442+ E643             >
 442+ E643             >//              ______________________________________________________________________
 442+ E643             >//              Dictionary part
 442+ E643             >
 442+ E643             >                org     Dict_Ptr
 442+ 6CA2             >
 442+ 6CA2 41 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 442+ 6CA4             >
 442+ 6CA4             >TO_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 442+ 6CA4 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 442+ 6CA4 ~           >
 442+ 6CA4 ~           >
 442+ 6CA4             >                endif           ; ok        // for other definitions it "points" the correct handler
 442+ 6CA4             >                // Use of "; ok" to suppress "warning[fwdref]"
 442+ 6CA4             >
 442+ 6CA4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 443+ 6CA4 E1                           pop     hl
 444+ 6CA5 CD A3 64                     call    TO_FAR_rout
 445+ 6CA8 E5                           push    hl
 446+ 6CA9 6F                           ld      l, a
 447+ 6CAA 26 00                        ld      h, 0
 448+ 6CAC E5                           push    hl
 449+ 6CAD                              next
 449+ 6CAD DD E9       >                jp      (ix)
 450+ 6CAF
 451+ 6CAF              //  ______________________________________________________________________
 452+ 6CAF              //
 453+ 6CAF              // <far         a n  -- ha
 454+ 6CAF              // given an address E000-FFFF and a page number n (32-39 or 20h-27h)
 455+ 6CAF              // reverse of >FAR: encodes a FAR address compressing
 456+ 6CAF              // to bits 765 of H, lower bits of HL address offset from E000h
 457+ 6CAF                              New_Def FROM_FAR, "<FAR", is_code, is_normal
 457+ 6CAF             >
 457+ 6CAF             >Dict_Ptr        defl    $
 457+ 6CAF             >
 457+ 6CAF             >//              ______________________________________________________________________
 457+ 6CAF             >//              Heap part
 457+ 6CAF             >
 457+ 6CAF             >
 457+ 6CAF             >                org     (Heap_Ptr & $1FFF) + $E000
 457+ E643             >
 457+ E643             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 457+ E643             >Latest_Definition defl  Heap_Ptr
 457+ E643             >
 457+ E643             >                // dummy db directives used to calculate length of namec
 457+ E643 3C 46 41 52 >                db      "<FAR"
 457+ E647             >len_NFA         defl    $ - temp_NFA
 457+ E647             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 457+ E643             >
 457+ E643 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 457+ E644 3C 46 41 52 >                db      "<FAR"               // name string in 7-bit ascii, but
 457+ E648             >                org     $-1                 // alter last byte of Name just above to set
 457+ E647 D2          >                db      {b $} | END_BIT     // msb as name end
 457+ E648             >
 457+ E648 3A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 457+ E64A             >Prev_Ptr        defl    Heap_Ptr
 457+ E64A             >
 457+ E64A             >mirror_Ptr      defl    $
 457+ E64A             >
 457+ E64A B1 6C       >                dw      Dict_Ptr + 2        // xt
 457+ E64C             >Heap_Ptr        defl    $ - $E000           // save current HP
 457+ E64C             >
 457+ E64C             >Current_HP      defl  $ - $E000             // used to set HP once!
 457+ E64C             >
 457+ E64C             >//              ______________________________________________________________________
 457+ E64C             >//              Dictionary part
 457+ E64C             >
 457+ E64C             >                org     Dict_Ptr
 457+ 6CAF             >
 457+ 6CAF 4A 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 457+ 6CB1             >
 457+ 6CB1             >FROM_FAR:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 457+ 6CB1 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 457+ 6CB1 ~           >
 457+ 6CB1 ~           >
 457+ 6CB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 457+ 6CB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 457+ 6CB1             >
 457+ 6CB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 458+ 6CB1 E1                           pop     hl                  // page number in l
 459+ 6CB2 7D                           ld      a, l
 460+ 6CB3 E6 07                        and     07
 461+ 6CB5 0F                           rrca
 462+ 6CB6 0F                           rrca
 463+ 6CB7 0F                           rrca
 464+ 6CB8 08                           ex      af, af
 465+ 6CB9 E1                           pop     hl                  // address in hl
 466+ 6CBA 7C                           ld      a, h
 467+ 6CBB E6 1F                        and     $1F
 468+ 6CBD 67                           ld      h, a
 469+ 6CBE 08                           ex      af, af
 470+ 6CBF B4                           or      h
 471+ 6CC0 67                           ld      h, a
 472+ 6CC1                              psh1
 472+ 6CC1 E5          >                push    hl
 472+ 6CC2 DD E9       >                jp      (ix)
 473+ 6CC4
 474+ 6CC4              //  ______________________________________________________________________
 475+ 6CC4              //
 476+ 6CC4              // ?IN_MMU7        a -- f
 477+ 6CC4              // check if address lies on MMU7
 478+ 6CC4              // tf is passed address is on MMU7
 479+ 6CC4                              Colon_Def QMMU7, "?IN_MMU7", is_normal
 479+ 6CC4             >                New_Def  QMMU7, "?IN_MMU7", Enter_Ptr, is_normal ; ok
 479+ 6CC4             >
 479+ 6CC4             >Dict_Ptr        defl    $
 479+ 6CC4             >
 479+ 6CC4             >//              ______________________________________________________________________
 479+ 6CC4             >//              Heap part
 479+ 6CC4             >
 479+ 6CC4             >
 479+ 6CC4             >                org     (Heap_Ptr & $1FFF) + $E000
 479+ E64C             >
 479+ E64C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 479+ E64C             >Latest_Definition defl  Heap_Ptr
 479+ E64C             >
 479+ E64C             >                // dummy db directives used to calculate length of namec
 479+ E64C 3F 49 4E 5F >                db      "?IN_MMU7"
 479+ E650 4D 4D 55 37 >
 479+ E654             >len_NFA         defl    $ - temp_NFA
 479+ E654             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 479+ E64C             >
 479+ E64C 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 479+ E64D 3F 49 4E 5F >                db      "?IN_MMU7"               // name string in 7-bit ascii, but
 479+ E651 4D 4D 55 37 >
 479+ E655             >                org     $-1                 // alter last byte of Name just above to set
 479+ E654 B7          >                db      {b $} | END_BIT     // msb as name end
 479+ E655             >
 479+ E655 43 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 479+ E657             >Prev_Ptr        defl    Heap_Ptr
 479+ E657             >
 479+ E657             >mirror_Ptr      defl    $
 479+ E657             >
 479+ E657 C6 6C       >                dw      Dict_Ptr + 2        // xt
 479+ E659             >Heap_Ptr        defl    $ - $E000           // save current HP
 479+ E659             >
 479+ E659             >Current_HP      defl  $ - $E000             // used to set HP once!
 479+ E659             >
 479+ E659             >//              ______________________________________________________________________
 479+ E659             >//              Dictionary part
 479+ E659             >
 479+ E659             >                org     Dict_Ptr
 479+ 6CC4             >
 479+ 6CC4 57 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 479+ 6CC6             >
 479+ 6CC6             >QMMU7:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 479+ 6CC6 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 479+ 6CC9             >
 479+ 6CC9             >
 479+ 6CC9             >                endif           ; ok        // for other definitions it "points" the correct handler
 479+ 6CC9             >                // Use of "; ok" to suppress "warning[fwdref]"
 479+ 6CC9             >
 479+ 6CC9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 480+ 6CC9 1C 69                        dw      DUP
 481+ 6CCB A3 63 00 E0                  dw      LIT, $E000
 482+ 6CCF F3 6B                        dw      ULESS
 483+ 6CD1 83 68                        dw      NOT_OP
 484+ 6CD3 51 68                        dw      EXIT
 485+ 6CD5
 486+ 6CD5              //  ______________________________________________________________________
 487+ 6CD5              //
 488+ 6CD5              // far          hp -- ha
 489+ 6CD5              // Convert an "heap-pointer address" (ha) into a real address (a)
 490+ 6CD5              // between E000h and FFFFh and fit the correct 8K page on MMU7
 491+ 6CD5              // An "ha" uses the 3 msb as page-number and the lower bits as offset at E000.
 492+ 6CD5                              Colon_Def FAR, "FAR", is_normal
 492+ 6CD5             >                New_Def  FAR, "FAR", Enter_Ptr, is_normal ; ok
 492+ 6CD5             >
 492+ 6CD5             >Dict_Ptr        defl    $
 492+ 6CD5             >
 492+ 6CD5             >//              ______________________________________________________________________
 492+ 6CD5             >//              Heap part
 492+ 6CD5             >
 492+ 6CD5             >
 492+ 6CD5             >                org     (Heap_Ptr & $1FFF) + $E000
 492+ E659             >
 492+ E659             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 492+ E659             >Latest_Definition defl  Heap_Ptr
 492+ E659             >
 492+ E659             >                // dummy db directives used to calculate length of namec
 492+ E659 46 41 52    >                db      "FAR"
 492+ E65C             >len_NFA         defl    $ - temp_NFA
 492+ E65C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 492+ E659             >
 492+ E659 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 492+ E65A 46 41 52    >                db      "FAR"               // name string in 7-bit ascii, but
 492+ E65D             >                org     $-1                 // alter last byte of Name just above to set
 492+ E65C D2          >                db      {b $} | END_BIT     // msb as name end
 492+ E65D             >
 492+ E65D 4C 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 492+ E65F             >Prev_Ptr        defl    Heap_Ptr
 492+ E65F             >
 492+ E65F             >mirror_Ptr      defl    $
 492+ E65F             >
 492+ E65F D7 6C       >                dw      Dict_Ptr + 2        // xt
 492+ E661             >Heap_Ptr        defl    $ - $E000           // save current HP
 492+ E661             >
 492+ E661             >Current_HP      defl  $ - $E000             // used to set HP once!
 492+ E661             >
 492+ E661             >//              ______________________________________________________________________
 492+ E661             >//              Dictionary part
 492+ E661             >
 492+ E661             >                org     Dict_Ptr
 492+ 6CD5             >
 492+ 6CD5 5F 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 492+ 6CD7             >
 492+ 6CD7             >FAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 492+ 6CD7 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 492+ 6CDA             >
 492+ 6CDA             >
 492+ 6CDA             >                endif           ; ok        // for other definitions it "points" the correct handler
 492+ 6CDA             >                // Use of "; ok" to suppress "warning[fwdref]"
 492+ 6CDA             >
 492+ 6CDA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 493+ 6CDA A4 6C                        dw      TO_FAR
 494+ 6CDC 9B 6C                        dw      MMU7_STORE
 495+ 6CDE 51 68                        dw      EXIT
 496+ 6CE0
 497+ 6CE0              //  ______________________________________________________________________
 498+ 6CE0              //
 499+ 6CE0              // ?HEAP_PTR       n -- n f
 500+ 6CE0              // check if it's a non-zero heap-pointer or less than $6300
 501+ 6CE0              // tf if passed argument is an hp
 502+ 6CE0              // ff if passed argument isn't hp
 503+ 6CE0                              Colon_Def QHEAPP, "?HEAP_PTR", is_normal
 503+ 6CE0             >                New_Def  QHEAPP, "?HEAP_PTR", Enter_Ptr, is_normal ; ok
 503+ 6CE0             >
 503+ 6CE0             >Dict_Ptr        defl    $
 503+ 6CE0             >
 503+ 6CE0             >//              ______________________________________________________________________
 503+ 6CE0             >//              Heap part
 503+ 6CE0             >
 503+ 6CE0             >
 503+ 6CE0             >                org     (Heap_Ptr & $1FFF) + $E000
 503+ E661             >
 503+ E661             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 503+ E661             >Latest_Definition defl  Heap_Ptr
 503+ E661             >
 503+ E661             >                // dummy db directives used to calculate length of namec
 503+ E661 3F 48 45 41 >                db      "?HEAP_PTR"
 503+ E665 50 5F 50 54 >
 503+ E669 52          >
 503+ E66A             >len_NFA         defl    $ - temp_NFA
 503+ E66A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 503+ E661             >
 503+ E661 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 503+ E662 3F 48 45 41 >                db      "?HEAP_PTR"               // name string in 7-bit ascii, but
 503+ E666 50 5F 50 54 >
 503+ E66A 52          >
 503+ E66B             >                org     $-1                 // alter last byte of Name just above to set
 503+ E66A D2          >                db      {b $} | END_BIT     // msb as name end
 503+ E66B             >
 503+ E66B 59 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 503+ E66D             >Prev_Ptr        defl    Heap_Ptr
 503+ E66D             >
 503+ E66D             >mirror_Ptr      defl    $
 503+ E66D             >
 503+ E66D E2 6C       >                dw      Dict_Ptr + 2        // xt
 503+ E66F             >Heap_Ptr        defl    $ - $E000           // save current HP
 503+ E66F             >
 503+ E66F             >Current_HP      defl  $ - $E000             // used to set HP once!
 503+ E66F             >
 503+ E66F             >//              ______________________________________________________________________
 503+ E66F             >//              Dictionary part
 503+ E66F             >
 503+ E66F             >                org     Dict_Ptr
 503+ 6CE0             >
 503+ 6CE0 6D 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 503+ 6CE2             >
 503+ 6CE2             >QHEAPP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 503+ 6CE2 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 503+ 6CE5             >
 503+ 6CE5             >
 503+ 6CE5             >                endif           ; ok        // for other definitions it "points" the correct handler
 503+ 6CE5             >                // Use of "; ok" to suppress "warning[fwdref]"
 503+ 6CE5             >
 503+ 6CE5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 504+ 6CE5 1C 69                        dw      DUP
 505+ 6CE7 F3 63                        dw      ZBRANCH
 506+ 6CE9 08 00                        dw      QHeap_Skip - $
 507+ 6CEB A3 63 00 63                  dw          LIT, $6300
 508+ 6CEF F3 6B                        dw          ULESS
 509+ 6CF1              QHeap_Skip:                                          // endif
 510+ 6CF1 51 68                        dw      EXIT                        // ;
 511+ 6CF3
 512+ 6CF3              //  ______________________________________________________________________
 513+ 6CF3              //
 514+ 6CF3              // ?>heap       n1 -- n2
 515+ 6CF3              // heap correction: given an LFA check if it's a real address or a heap-pointer
 516+ 6CF3              // address <= 6300h -- except 0000h -- are interpreted as heap-pointers
 517+ 6CF3              // and converted to heap address updating MMU7 via FAR
 518+ 6CF3                              Colon_Def QTOHEAP, "?>HEAP", is_normal
 518+ 6CF3             >                New_Def  QTOHEAP, "?>HEAP", Enter_Ptr, is_normal ; ok
 518+ 6CF3             >
 518+ 6CF3             >Dict_Ptr        defl    $
 518+ 6CF3             >
 518+ 6CF3             >//              ______________________________________________________________________
 518+ 6CF3             >//              Heap part
 518+ 6CF3             >
 518+ 6CF3             >
 518+ 6CF3             >                org     (Heap_Ptr & $1FFF) + $E000
 518+ E66F             >
 518+ E66F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 518+ E66F             >Latest_Definition defl  Heap_Ptr
 518+ E66F             >
 518+ E66F             >                // dummy db directives used to calculate length of namec
 518+ E66F 3F 3E 48 45 >                db      "?>HEAP"
 518+ E673 41 50       >
 518+ E675             >len_NFA         defl    $ - temp_NFA
 518+ E675             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 518+ E66F             >
 518+ E66F 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 518+ E670 3F 3E 48 45 >                db      "?>HEAP"               // name string in 7-bit ascii, but
 518+ E674 41 50       >
 518+ E676             >                org     $-1                 // alter last byte of Name just above to set
 518+ E675 D0          >                db      {b $} | END_BIT     // msb as name end
 518+ E676             >
 518+ E676 61 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 518+ E678             >Prev_Ptr        defl    Heap_Ptr
 518+ E678             >
 518+ E678             >mirror_Ptr      defl    $
 518+ E678             >
 518+ E678 F5 6C       >                dw      Dict_Ptr + 2        // xt
 518+ E67A             >Heap_Ptr        defl    $ - $E000           // save current HP
 518+ E67A             >
 518+ E67A             >Current_HP      defl  $ - $E000             // used to set HP once!
 518+ E67A             >
 518+ E67A             >//              ______________________________________________________________________
 518+ E67A             >//              Dictionary part
 518+ E67A             >
 518+ E67A             >                org     Dict_Ptr
 518+ 6CF3             >
 518+ 6CF3 78 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 518+ 6CF5             >
 518+ 6CF5             >QTOHEAP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 518+ 6CF5 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 518+ 6CF8             >
 518+ 6CF8             >
 518+ 6CF8             >                endif           ; ok        // for other definitions it "points" the correct handler
 518+ 6CF8             >                // Use of "; ok" to suppress "warning[fwdref]"
 518+ 6CF8             >
 518+ 6CF8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 519+ 6CF8 1C 69                        dw      DUP
 520+ 6CFA E2 6C                        dw      QHEAPP
 521+ 6CFC F3 63                        dw      ZBRANCH
 522+ 6CFE 04 00                        dw      Q2Heap_Skip - $
 523+ 6D00 D7 6C                        dw          FAR
 524+ 6D02              Q2Heap_Skip:                                          // endif
 525+ 6D02 51 68                        dw      EXIT                        // ;
 526+ 6D04
 527+ 6D04              //  ______________________________________________________________________
 528+ 6D04              //
 529+ 6D04              // hp_fetch     -- a
 530+ 6D04                              Colon_Def HP_FETCH, "HP@", is_normal
 530+ 6D04             >                New_Def  HP_FETCH, "HP@", Enter_Ptr, is_normal ; ok
 530+ 6D04             >
 530+ 6D04             >Dict_Ptr        defl    $
 530+ 6D04             >
 530+ 6D04             >//              ______________________________________________________________________
 530+ 6D04             >//              Heap part
 530+ 6D04             >
 530+ 6D04             >
 530+ 6D04             >                org     (Heap_Ptr & $1FFF) + $E000
 530+ E67A             >
 530+ E67A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 530+ E67A             >Latest_Definition defl  Heap_Ptr
 530+ E67A             >
 530+ E67A             >                // dummy db directives used to calculate length of namec
 530+ E67A 48 50 40    >                db      "HP@"
 530+ E67D             >len_NFA         defl    $ - temp_NFA
 530+ E67D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 530+ E67A             >
 530+ E67A 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 530+ E67B 48 50 40    >                db      "HP@"               // name string in 7-bit ascii, but
 530+ E67E             >                org     $-1                 // alter last byte of Name just above to set
 530+ E67D C0          >                db      {b $} | END_BIT     // msb as name end
 530+ E67E             >
 530+ E67E 6F 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 530+ E680             >Prev_Ptr        defl    Heap_Ptr
 530+ E680             >
 530+ E680             >mirror_Ptr      defl    $
 530+ E680             >
 530+ E680 06 6D       >                dw      Dict_Ptr + 2        // xt
 530+ E682             >Heap_Ptr        defl    $ - $E000           // save current HP
 530+ E682             >
 530+ E682             >Current_HP      defl  $ - $E000             // used to set HP once!
 530+ E682             >
 530+ E682             >//              ______________________________________________________________________
 530+ E682             >//              Dictionary part
 530+ E682             >
 530+ E682             >                org     Dict_Ptr
 530+ 6D04             >
 530+ 6D04 80 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 530+ 6D06             >
 530+ 6D06             >HP_FETCH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 530+ 6D06 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 530+ 6D09             >
 530+ 6D09             >
 530+ 6D09             >                endif           ; ok        // for other definitions it "points" the correct handler
 530+ 6D09             >                // Use of "; ok" to suppress "warning[fwdref]"
 530+ 6D09             >
 530+ 6D09             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 531+ 6D09 0D 6B 86 69                  dw      HP, FETCH               // hp @
 532+ 6D0D 51 68                        dw      EXIT                    // ;
 533+ 6D0F
 534+ 6D0F              //  ______________________________________________________________________
 535+ 6D0F              //
 536+ 6D0F              // page-watermark   -- n
 537+ 6D0F              // how much a 8K page can be filled..
 538+ 6D0F                              Constant_Def PAGE_WATERMARK,   "PAGE-WATERMARK", $1F80
 538+ 6D0F             >                New_Def  PAGE_WATERMARK, "PAGE-WATERMARK", Constant_Ptr, is_normal
 538+ 6D0F             >
 538+ 6D0F             >Dict_Ptr        defl    $
 538+ 6D0F             >
 538+ 6D0F             >//              ______________________________________________________________________
 538+ 6D0F             >//              Heap part
 538+ 6D0F             >
 538+ 6D0F             >
 538+ 6D0F             >                org     (Heap_Ptr & $1FFF) + $E000
 538+ E682             >
 538+ E682             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 538+ E682             >Latest_Definition defl  Heap_Ptr
 538+ E682             >
 538+ E682             >                // dummy db directives used to calculate length of namec
 538+ E682 50 41 47 45 >                db      "PAGE-WATERMARK"
 538+ E686 2D 57 41 54 >
 538+ E68A 45 52 4D 41 >
 538+ E68E 52 4B       >
 538+ E690             >len_NFA         defl    $ - temp_NFA
 538+ E690             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 538+ E682             >
 538+ E682 8E          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 538+ E683 50 41 47 45 >                db      "PAGE-WATERMARK"               // name string in 7-bit ascii, but
 538+ E687 2D 57 41 54 >
 538+ E68B 45 52 4D 41 >
 538+ E68F 52 4B       >
 538+ E691             >                org     $-1                 // alter last byte of Name just above to set
 538+ E690 CB          >                db      {b $} | END_BIT     // msb as name end
 538+ E691             >
 538+ E691 7A 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 538+ E693             >Prev_Ptr        defl    Heap_Ptr
 538+ E693             >
 538+ E693             >mirror_Ptr      defl    $
 538+ E693             >
 538+ E693 11 6D       >                dw      Dict_Ptr + 2        // xt
 538+ E695             >Heap_Ptr        defl    $ - $E000           // save current HP
 538+ E695             >
 538+ E695             >Current_HP      defl  $ - $E000             // used to set HP once!
 538+ E695             >
 538+ E695             >//              ______________________________________________________________________
 538+ E695             >//              Dictionary part
 538+ E695             >
 538+ E695             >                org     Dict_Ptr
 538+ 6D0F             >
 538+ 6D0F 93 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 538+ 6D11             >
 538+ 6D11             >PAGE_WATERMARK:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 538+ 6D11 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 538+ 6D14             >
 538+ 6D14             >
 538+ 6D14             >                endif           ; ok        // for other definitions it "points" the correct handler
 538+ 6D14             >                // Use of "; ok" to suppress "warning[fwdref]"
 538+ 6D14             >
 538+ 6D14             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 538+ 6D14 80 1F       >                dw      $1F80
 539+ 6D16
 540+ 6D16              //  ______________________________________________________________________
 541+ 6D16              //
 542+ 6D16              // skip-hp-page ha -- a
 543+ 6D16                              Colon_Def SKIP_HP_PAGE, "SKIP-HP-PAGE", is_normal
 543+ 6D16             >                New_Def  SKIP_HP_PAGE, "SKIP-HP-PAGE", Enter_Ptr, is_normal ; ok
 543+ 6D16             >
 543+ 6D16             >Dict_Ptr        defl    $
 543+ 6D16             >
 543+ 6D16             >//              ______________________________________________________________________
 543+ 6D16             >//              Heap part
 543+ 6D16             >
 543+ 6D16             >
 543+ 6D16             >                org     (Heap_Ptr & $1FFF) + $E000
 543+ E695             >
 543+ E695             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 543+ E695             >Latest_Definition defl  Heap_Ptr
 543+ E695             >
 543+ E695             >                // dummy db directives used to calculate length of namec
 543+ E695 53 4B 49 50 >                db      "SKIP-HP-PAGE"
 543+ E699 2D 48 50 2D >
 543+ E69D 50 41 47 45 >
 543+ E6A1             >len_NFA         defl    $ - temp_NFA
 543+ E6A1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 543+ E695             >
 543+ E695 8C          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 543+ E696 53 4B 49 50 >                db      "SKIP-HP-PAGE"               // name string in 7-bit ascii, but
 543+ E69A 2D 48 50 2D >
 543+ E69E 50 41 47 45 >
 543+ E6A2             >                org     $-1                 // alter last byte of Name just above to set
 543+ E6A1 C5          >                db      {b $} | END_BIT     // msb as name end
 543+ E6A2             >
 543+ E6A2 82 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 543+ E6A4             >Prev_Ptr        defl    Heap_Ptr
 543+ E6A4             >
 543+ E6A4             >mirror_Ptr      defl    $
 543+ E6A4             >
 543+ E6A4 18 6D       >                dw      Dict_Ptr + 2        // xt
 543+ E6A6             >Heap_Ptr        defl    $ - $E000           // save current HP
 543+ E6A6             >
 543+ E6A6             >Current_HP      defl  $ - $E000             // used to set HP once!
 543+ E6A6             >
 543+ E6A6             >//              ______________________________________________________________________
 543+ E6A6             >//              Dictionary part
 543+ E6A6             >
 543+ E6A6             >                org     Dict_Ptr
 543+ 6D16             >
 543+ 6D16 A4 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 543+ 6D18             >
 543+ 6D18             >SKIP_HP_PAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 543+ 6D18 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 543+ 6D1B             >
 543+ 6D1B             >
 543+ 6D1B             >                endif           ; ok        // for other definitions it "points" the correct handler
 543+ 6D1B             >                // Use of "; ok" to suppress "warning[fwdref]"
 543+ 6D1B             >
 543+ 6D1B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 544+ 6D1B 06 6D                        dw      HP_FETCH                // hp@
 545+ 6D1D A3 63 FF 1F                  dw      LIT, $1FFF, AND_OP      // 1FFF and
 545+ 6D21 0B 68
 546+ 6D23 9E 68                        dw      PLUS
 547+ 6D25 11 6D                        dw      PAGE_WATERMARK
 548+ 6D27 0E 6C                        dw      GREATER
 549+ 6D29 F3 63                        dw      ZBRANCH
 550+ 6D2B 12 00                        dw      Skip_Skip - $   // if
 551+ 6D2D 06 6D                        dw      HP_FETCH
 552+ 6D2F A3 63 FF 1F                  dw      LIT, $1FFF, OR_OP
 552+ 6D33 1A 68
 553+ 6D35 B7 68 C5 68                  dw      ONE_PLUS, TWO_PLUS
 554+ 6D39 0D 6B 90 69                  dw      HP, STORE
 555+ 6D3D              Skip_Skip:
 556+ 6D3D 51 68                        dw      EXIT                    // ;
 557+ 6D3F              //  ______________________________________________________________________
 558+ 6D3F              //
 559+ 6D3F              // latest       -- nfa
 560+ 6D3F                              Colon_Def LATEST, "LATEST", is_normal
 560+ 6D3F             >                New_Def  LATEST, "LATEST", Enter_Ptr, is_normal ; ok
 560+ 6D3F             >
 560+ 6D3F             >Dict_Ptr        defl    $
 560+ 6D3F             >
 560+ 6D3F             >//              ______________________________________________________________________
 560+ 6D3F             >//              Heap part
 560+ 6D3F             >
 560+ 6D3F             >
 560+ 6D3F             >                org     (Heap_Ptr & $1FFF) + $E000
 560+ E6A6             >
 560+ E6A6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 560+ E6A6             >Latest_Definition defl  Heap_Ptr
 560+ E6A6             >
 560+ E6A6             >                // dummy db directives used to calculate length of namec
 560+ E6A6 4C 41 54 45 >                db      "LATEST"
 560+ E6AA 53 54       >
 560+ E6AC             >len_NFA         defl    $ - temp_NFA
 560+ E6AC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 560+ E6A6             >
 560+ E6A6 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 560+ E6A7 4C 41 54 45 >                db      "LATEST"               // name string in 7-bit ascii, but
 560+ E6AB 53 54       >
 560+ E6AD             >                org     $-1                 // alter last byte of Name just above to set
 560+ E6AC D4          >                db      {b $} | END_BIT     // msb as name end
 560+ E6AD             >
 560+ E6AD 95 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 560+ E6AF             >Prev_Ptr        defl    Heap_Ptr
 560+ E6AF             >
 560+ E6AF             >mirror_Ptr      defl    $
 560+ E6AF             >
 560+ E6AF 41 6D       >                dw      Dict_Ptr + 2        // xt
 560+ E6B1             >Heap_Ptr        defl    $ - $E000           // save current HP
 560+ E6B1             >
 560+ E6B1             >Current_HP      defl  $ - $E000             // used to set HP once!
 560+ E6B1             >
 560+ E6B1             >//              ______________________________________________________________________
 560+ E6B1             >//              Dictionary part
 560+ E6B1             >
 560+ E6B1             >                org     Dict_Ptr
 560+ 6D3F             >
 560+ 6D3F AF 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 560+ 6D41             >
 560+ 6D41             >LATEST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 560+ 6D41 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 560+ 6D44             >
 560+ 6D44             >
 560+ 6D44             >                endif           ; ok        // for other definitions it "points" the correct handler
 560+ 6D44             >                // Use of "; ok" to suppress "warning[fwdref]"
 560+ 6D44             >
 560+ 6D44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 561+ 6D44 3D 6B                        dw      CURRENT                 // current
 562+ 6D46 86 69 86 69                  dw      FETCH, FETCH            // @ @
 563+ 6D4A D7 6C                        dw      FAR // Q TO HEAP
 564+ 6D4C 51 68                        dw      EXIT                    // ;
 565+ 6D4E
 566+ 6D4E              //  ______________________________________________________________________
 567+ 6D4E              //
 568+ 6D4E              // >body        cfa -- pfa
 569+ 6D4E                              Colon_Def TO_BODY, ">BODY", is_normal
 569+ 6D4E             >                New_Def  TO_BODY, ">BODY", Enter_Ptr, is_normal ; ok
 569+ 6D4E             >
 569+ 6D4E             >Dict_Ptr        defl    $
 569+ 6D4E             >
 569+ 6D4E             >//              ______________________________________________________________________
 569+ 6D4E             >//              Heap part
 569+ 6D4E             >
 569+ 6D4E             >
 569+ 6D4E             >                org     (Heap_Ptr & $1FFF) + $E000
 569+ E6B1             >
 569+ E6B1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 569+ E6B1             >Latest_Definition defl  Heap_Ptr
 569+ E6B1             >
 569+ E6B1             >                // dummy db directives used to calculate length of namec
 569+ E6B1 3E 42 4F 44 >                db      ">BODY"
 569+ E6B5 59          >
 569+ E6B6             >len_NFA         defl    $ - temp_NFA
 569+ E6B6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 569+ E6B1             >
 569+ E6B1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 569+ E6B2 3E 42 4F 44 >                db      ">BODY"               // name string in 7-bit ascii, but
 569+ E6B6 59          >
 569+ E6B7             >                org     $-1                 // alter last byte of Name just above to set
 569+ E6B6 D9          >                db      {b $} | END_BIT     // msb as name end
 569+ E6B7             >
 569+ E6B7 A6 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 569+ E6B9             >Prev_Ptr        defl    Heap_Ptr
 569+ E6B9             >
 569+ E6B9             >mirror_Ptr      defl    $
 569+ E6B9             >
 569+ E6B9 50 6D       >                dw      Dict_Ptr + 2        // xt
 569+ E6BB             >Heap_Ptr        defl    $ - $E000           // save current HP
 569+ E6BB             >
 569+ E6BB             >Current_HP      defl  $ - $E000             // used to set HP once!
 569+ E6BB             >
 569+ E6BB             >//              ______________________________________________________________________
 569+ E6BB             >//              Dictionary part
 569+ E6BB             >
 569+ E6BB             >                org     Dict_Ptr
 569+ 6D4E             >
 569+ 6D4E B9 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 569+ 6D50             >
 569+ 6D50             >TO_BODY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 569+ 6D50 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 569+ 6D53             >
 569+ 6D53             >
 569+ 6D53             >                endif           ; ok        // for other definitions it "points" the correct handler
 569+ 6D53             >                // Use of "; ok" to suppress "warning[fwdref]"
 569+ 6D53             >
 569+ 6D53             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 570+ 6D53 8D 6A 9E 68                  dw      THREE, PLUS             // cell+ --> 3 +
 571+ 6D57 51 68                        dw      EXIT                    // ;
 572+ 6D59
 573+ 6D59              //  ______________________________________________________________________
 574+ 6D59              //
 575+ 6D59              // <name        cfa -- nfa
 576+ 6D59                              Colon_Def TO_NAME, "<NAME", is_normal
 576+ 6D59             >                New_Def  TO_NAME, "<NAME", Enter_Ptr, is_normal ; ok
 576+ 6D59             >
 576+ 6D59             >Dict_Ptr        defl    $
 576+ 6D59             >
 576+ 6D59             >//              ______________________________________________________________________
 576+ 6D59             >//              Heap part
 576+ 6D59             >
 576+ 6D59             >
 576+ 6D59             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ E6BB             >
 576+ E6BB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ E6BB             >Latest_Definition defl  Heap_Ptr
 576+ E6BB             >
 576+ E6BB             >                // dummy db directives used to calculate length of namec
 576+ E6BB 3C 4E 41 4D >                db      "<NAME"
 576+ E6BF 45          >
 576+ E6C0             >len_NFA         defl    $ - temp_NFA
 576+ E6C0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ E6BB             >
 576+ E6BB 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ E6BC 3C 4E 41 4D >                db      "<NAME"               // name string in 7-bit ascii, but
 576+ E6C0 45          >
 576+ E6C1             >                org     $-1                 // alter last byte of Name just above to set
 576+ E6C0 C5          >                db      {b $} | END_BIT     // msb as name end
 576+ E6C1             >
 576+ E6C1 B1 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ E6C3             >Prev_Ptr        defl    Heap_Ptr
 576+ E6C3             >
 576+ E6C3             >mirror_Ptr      defl    $
 576+ E6C3             >
 576+ E6C3 5B 6D       >                dw      Dict_Ptr + 2        // xt
 576+ E6C5             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ E6C5             >
 576+ E6C5             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ E6C5             >
 576+ E6C5             >//              ______________________________________________________________________
 576+ E6C5             >//              Dictionary part
 576+ E6C5             >
 576+ E6C5             >                org     Dict_Ptr
 576+ 6D59             >
 576+ 6D59 C3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 6D5B             >
 576+ 6D5B             >TO_NAME:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 6D5B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 6D5E             >
 576+ 6D5E             >
 576+ 6D5E             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 6D5E             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 6D5E             >
 576+ 6D5E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 6D5E D1 68                        dw      CELL_MINUS              // cell-
 578+ 6D60 1C 69 86 69                  dw      DUP, FETCH
 579+ 6D64 E2 6C                        dw      QHEAPP
 580+ 6D66 F3 63                        dw      ZBRANCH
 581+ 6D68 08 00                        dw      ToName_Skip - $
 582+ 6D6A 86 69 D7 6C                  dw          FETCH, FAR
 583+ 6D6E D1 68                        dw          CELL_MINUS
 584+ 6D70              ToName_Skip:                                    // endif
 585+ 6D70
 586+ 6D70 BE 68                        dw      ONE_SUBTRACT            // 1-
 587+ 6D72 94 6A                        dw      NEG_ONE                 // -1
 588+ 6D74 71 6C                        dw      TRAVERSE                // traverse
 589+ 6D76 51 68                        dw      EXIT                    // ;
 590+ 6D78
 591+ 6D78              //  ______________________________________________________________________
 592+ 6D78              //
 593+ 6D78              // cfa          pfa -- cfa
 594+ 6D78                              Colon_Def CFA, "CFA", is_normal
 594+ 6D78             >                New_Def  CFA, "CFA", Enter_Ptr, is_normal ; ok
 594+ 6D78             >
 594+ 6D78             >Dict_Ptr        defl    $
 594+ 6D78             >
 594+ 6D78             >//              ______________________________________________________________________
 594+ 6D78             >//              Heap part
 594+ 6D78             >
 594+ 6D78             >
 594+ 6D78             >                org     (Heap_Ptr & $1FFF) + $E000
 594+ E6C5             >
 594+ E6C5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 594+ E6C5             >Latest_Definition defl  Heap_Ptr
 594+ E6C5             >
 594+ E6C5             >                // dummy db directives used to calculate length of namec
 594+ E6C5 43 46 41    >                db      "CFA"
 594+ E6C8             >len_NFA         defl    $ - temp_NFA
 594+ E6C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 594+ E6C5             >
 594+ E6C5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 594+ E6C6 43 46 41    >                db      "CFA"               // name string in 7-bit ascii, but
 594+ E6C9             >                org     $-1                 // alter last byte of Name just above to set
 594+ E6C8 C1          >                db      {b $} | END_BIT     // msb as name end
 594+ E6C9             >
 594+ E6C9 BB 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 594+ E6CB             >Prev_Ptr        defl    Heap_Ptr
 594+ E6CB             >
 594+ E6CB             >mirror_Ptr      defl    $
 594+ E6CB             >
 594+ E6CB 7A 6D       >                dw      Dict_Ptr + 2        // xt
 594+ E6CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 594+ E6CD             >
 594+ E6CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 594+ E6CD             >
 594+ E6CD             >//              ______________________________________________________________________
 594+ E6CD             >//              Dictionary part
 594+ E6CD             >
 594+ E6CD             >                org     Dict_Ptr
 594+ 6D78             >
 594+ 6D78 CB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 594+ 6D7A             >
 594+ 6D7A             >CFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 594+ 6D7A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 594+ 6D7D             >
 594+ 6D7D             >
 594+ 6D7D             >                endif           ; ok        // for other definitions it "points" the correct handler
 594+ 6D7D             >                // Use of "; ok" to suppress "warning[fwdref]"
 594+ 6D7D             >
 594+ 6D7D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 595+ 6D7D 8D 6A DC 6B                  dw      THREE, SUBTRACT         // 3 -
 596+ 6D81 51 68                        dw      EXIT                    // ;
 597+ 6D83
 598+ 6D83              //  ______________________________________________________________________
 599+ 6D83              //
 600+ 6D83              // nfa          pfa -- nfa
 601+ 6D83                              Colon_Def NFA, "NFA", is_normal
 601+ 6D83             >                New_Def  NFA, "NFA", Enter_Ptr, is_normal ; ok
 601+ 6D83             >
 601+ 6D83             >Dict_Ptr        defl    $
 601+ 6D83             >
 601+ 6D83             >//              ______________________________________________________________________
 601+ 6D83             >//              Heap part
 601+ 6D83             >
 601+ 6D83             >
 601+ 6D83             >                org     (Heap_Ptr & $1FFF) + $E000
 601+ E6CD             >
 601+ E6CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 601+ E6CD             >Latest_Definition defl  Heap_Ptr
 601+ E6CD             >
 601+ E6CD             >                // dummy db directives used to calculate length of namec
 601+ E6CD 4E 46 41    >                db      "NFA"
 601+ E6D0             >len_NFA         defl    $ - temp_NFA
 601+ E6D0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 601+ E6CD             >
 601+ E6CD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 601+ E6CE 4E 46 41    >                db      "NFA"               // name string in 7-bit ascii, but
 601+ E6D1             >                org     $-1                 // alter last byte of Name just above to set
 601+ E6D0 C1          >                db      {b $} | END_BIT     // msb as name end
 601+ E6D1             >
 601+ E6D1 C5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 601+ E6D3             >Prev_Ptr        defl    Heap_Ptr
 601+ E6D3             >
 601+ E6D3             >mirror_Ptr      defl    $
 601+ E6D3             >
 601+ E6D3 85 6D       >                dw      Dict_Ptr + 2        // xt
 601+ E6D5             >Heap_Ptr        defl    $ - $E000           // save current HP
 601+ E6D5             >
 601+ E6D5             >Current_HP      defl  $ - $E000             // used to set HP once!
 601+ E6D5             >
 601+ E6D5             >//              ______________________________________________________________________
 601+ E6D5             >//              Dictionary part
 601+ E6D5             >
 601+ E6D5             >                org     Dict_Ptr
 601+ 6D83             >
 601+ 6D83 D3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 601+ 6D85             >
 601+ 6D85             >NFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 601+ 6D85 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 601+ 6D88             >
 601+ 6D88             >
 601+ 6D88             >                endif           ; ok        // for other definitions it "points" the correct handler
 601+ 6D88             >                // Use of "; ok" to suppress "warning[fwdref]"
 601+ 6D88             >
 601+ 6D88             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 602+ 6D88 7A 6D                        dw      CFA                     // cfa
 603+ 6D8A 5B 6D                        dw      TO_NAME                 // traverse
 604+ 6D8C 51 68                        dw      EXIT                    // ;
 605+ 6D8E
 606+ 6D8E              //  ______________________________________________________________________
 607+ 6D8E              //
 608+ 6D8E              // lfa          pfa -- lfa
 609+ 6D8E                              Colon_Def LFA, "LFA", is_normal
 609+ 6D8E             >                New_Def  LFA, "LFA", Enter_Ptr, is_normal ; ok
 609+ 6D8E             >
 609+ 6D8E             >Dict_Ptr        defl    $
 609+ 6D8E             >
 609+ 6D8E             >//              ______________________________________________________________________
 609+ 6D8E             >//              Heap part
 609+ 6D8E             >
 609+ 6D8E             >
 609+ 6D8E             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ E6D5             >
 609+ E6D5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ E6D5             >Latest_Definition defl  Heap_Ptr
 609+ E6D5             >
 609+ E6D5             >                // dummy db directives used to calculate length of namec
 609+ E6D5 4C 46 41    >                db      "LFA"
 609+ E6D8             >len_NFA         defl    $ - temp_NFA
 609+ E6D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ E6D5             >
 609+ E6D5 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ E6D6 4C 46 41    >                db      "LFA"               // name string in 7-bit ascii, but
 609+ E6D9             >                org     $-1                 // alter last byte of Name just above to set
 609+ E6D8 C1          >                db      {b $} | END_BIT     // msb as name end
 609+ E6D9             >
 609+ E6D9 CD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ E6DB             >Prev_Ptr        defl    Heap_Ptr
 609+ E6DB             >
 609+ E6DB             >mirror_Ptr      defl    $
 609+ E6DB             >
 609+ E6DB 90 6D       >                dw      Dict_Ptr + 2        // xt
 609+ E6DD             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ E6DD             >
 609+ E6DD             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ E6DD             >
 609+ E6DD             >//              ______________________________________________________________________
 609+ E6DD             >//              Dictionary part
 609+ E6DD             >
 609+ E6DD             >                org     Dict_Ptr
 609+ 6D8E             >
 609+ 6D8E DB 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 6D90             >
 609+ 6D90             >LFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 6D90 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 6D93             >
 609+ 6D93             >
 609+ 6D93             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 6D93             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 6D93             >
 609+ 6D93             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 6D93 85 6D                        dw      NFA                     // nfa
 611+ 6D95 7F 6A                        dw      ONE                     // 1
 612+ 6D97 71 6C                        dw      TRAVERSE                // traverse
 613+ 6D99 B7 68                        dw      ONE_PLUS                // 1+
 614+ 6D9B 51 68                        dw      EXIT                    // ;
 615+ 6D9D
 616+ 6D9D              //  ______________________________________________________________________
 617+ 6D9D              //
 618+ 6D9D              // pfa          nfa -- pfa
 619+ 6D9D                              Colon_Def PFA, "PFA", is_normal
 619+ 6D9D             >                New_Def  PFA, "PFA", Enter_Ptr, is_normal ; ok
 619+ 6D9D             >
 619+ 6D9D             >Dict_Ptr        defl    $
 619+ 6D9D             >
 619+ 6D9D             >//              ______________________________________________________________________
 619+ 6D9D             >//              Heap part
 619+ 6D9D             >
 619+ 6D9D             >
 619+ 6D9D             >                org     (Heap_Ptr & $1FFF) + $E000
 619+ E6DD             >
 619+ E6DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 619+ E6DD             >Latest_Definition defl  Heap_Ptr
 619+ E6DD             >
 619+ E6DD             >                // dummy db directives used to calculate length of namec
 619+ E6DD 50 46 41    >                db      "PFA"
 619+ E6E0             >len_NFA         defl    $ - temp_NFA
 619+ E6E0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 619+ E6DD             >
 619+ E6DD 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 619+ E6DE 50 46 41    >                db      "PFA"               // name string in 7-bit ascii, but
 619+ E6E1             >                org     $-1                 // alter last byte of Name just above to set
 619+ E6E0 C1          >                db      {b $} | END_BIT     // msb as name end
 619+ E6E1             >
 619+ E6E1 D5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 619+ E6E3             >Prev_Ptr        defl    Heap_Ptr
 619+ E6E3             >
 619+ E6E3             >mirror_Ptr      defl    $
 619+ E6E3             >
 619+ E6E3 9F 6D       >                dw      Dict_Ptr + 2        // xt
 619+ E6E5             >Heap_Ptr        defl    $ - $E000           // save current HP
 619+ E6E5             >
 619+ E6E5             >Current_HP      defl  $ - $E000             // used to set HP once!
 619+ E6E5             >
 619+ E6E5             >//              ______________________________________________________________________
 619+ E6E5             >//              Dictionary part
 619+ E6E5             >
 619+ E6E5             >                org     Dict_Ptr
 619+ 6D9D             >
 619+ 6D9D E3 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 619+ 6D9F             >
 619+ 6D9F             >PFA:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 619+ 6D9F CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 619+ 6DA2             >
 619+ 6DA2             >
 619+ 6DA2             >                endif           ; ok        // for other definitions it "points" the correct handler
 619+ 6DA2             >                // Use of "; ok" to suppress "warning[fwdref]"
 619+ 6DA2             >
 619+ 6DA2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 620+ 6DA2 F5 6C                        dw      QTOHEAP
 621+ 6DA4 7F 6A                        dw      ONE                     // 1
 622+ 6DA6 71 6C                        dw      TRAVERSE                // traverse
 623+ 6DA8 B7 68                        dw      ONE_PLUS                // 1+
 624+ 6DAA CD 68                        dw      CELL_PLUS               // cell+
 625+ 6DAC C6 6C                        dw      QMMU7
 626+ 6DAE F3 63                        dw      ZBRANCH
 627+ 6DB0 0E 00                        dw      PFA_Skip - $
 628+ 6DB2 8E 6C                        dw          MMU7_FETCH
 629+ 6DB4 7F 6A DC 6B                  dw          ONE, SUBTRACT
 630+ 6DB8 F3 63                        dw          ZBRANCH
 631+ 6DBA 04 00                        dw          PFA_Skip - $
 632+ 6DBC 86 69                        dw              FETCH
 633+ 6DBE              PFA_Skip:                                    // endif
 634+ 6DBE 50 6D                        dw      TO_BODY                 // >body
 635+ 6DC0 51 68                        dw      EXIT                    // ;
 636+ 6DC2
 637+ 6DC2              //  ______________________________________________________________________
 638+ 6DC2              //
 639+ 6DC2              // !csp         --
 640+ 6DC2              // store in user variable CSP current value of SP. Used at compile-time for syntax checkng
 641+ 6DC2                              Colon_Def STORE_CSP, "!CSP", is_normal
 641+ 6DC2             >                New_Def  STORE_CSP, "!CSP", Enter_Ptr, is_normal ; ok
 641+ 6DC2             >
 641+ 6DC2             >Dict_Ptr        defl    $
 641+ 6DC2             >
 641+ 6DC2             >//              ______________________________________________________________________
 641+ 6DC2             >//              Heap part
 641+ 6DC2             >
 641+ 6DC2             >
 641+ 6DC2             >                org     (Heap_Ptr & $1FFF) + $E000
 641+ E6E5             >
 641+ E6E5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 641+ E6E5             >Latest_Definition defl  Heap_Ptr
 641+ E6E5             >
 641+ E6E5             >                // dummy db directives used to calculate length of namec
 641+ E6E5 21 43 53 50 >                db      "!CSP"
 641+ E6E9             >len_NFA         defl    $ - temp_NFA
 641+ E6E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 641+ E6E5             >
 641+ E6E5 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 641+ E6E6 21 43 53 50 >                db      "!CSP"               // name string in 7-bit ascii, but
 641+ E6EA             >                org     $-1                 // alter last byte of Name just above to set
 641+ E6E9 D0          >                db      {b $} | END_BIT     // msb as name end
 641+ E6EA             >
 641+ E6EA DD 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 641+ E6EC             >Prev_Ptr        defl    Heap_Ptr
 641+ E6EC             >
 641+ E6EC             >mirror_Ptr      defl    $
 641+ E6EC             >
 641+ E6EC C4 6D       >                dw      Dict_Ptr + 2        // xt
 641+ E6EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 641+ E6EE             >
 641+ E6EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 641+ E6EE             >
 641+ E6EE             >//              ______________________________________________________________________
 641+ E6EE             >//              Dictionary part
 641+ E6EE             >
 641+ E6EE             >                org     Dict_Ptr
 641+ 6DC2             >
 641+ 6DC2 EC 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 641+ 6DC4             >
 641+ 6DC4             >STORE_CSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 641+ 6DC4 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 641+ 6DC7             >
 641+ 6DC7             >
 641+ 6DC7             >                endif           ; ok        // for other definitions it "points" the correct handler
 641+ 6DC7             >                // Use of "; ok" to suppress "warning[fwdref]"
 641+ 6DC7             >
 641+ 6DC7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 642+ 6DC7 38 68                        dw      SPFETCH                 // sp@
 643+ 6DC9 5B 6B 90 69                  dw      CSP, STORE              // csp !
 644+ 6DCD 51 68                        dw      EXIT                    // ;
 645+ 6DCF
 646+ 6DCF              //  ______________________________________________________________________
 647+ 6DCF              //
 648+ 6DCF              // ?error       f n --
 649+ 6DCF              // raise error n if flag f it true
 650+ 6DCF                              Colon_Def QERROR, "?ERROR", is_normal
 650+ 6DCF             >                New_Def  QERROR, "?ERROR", Enter_Ptr, is_normal ; ok
 650+ 6DCF             >
 650+ 6DCF             >Dict_Ptr        defl    $
 650+ 6DCF             >
 650+ 6DCF             >//              ______________________________________________________________________
 650+ 6DCF             >//              Heap part
 650+ 6DCF             >
 650+ 6DCF             >
 650+ 6DCF             >                org     (Heap_Ptr & $1FFF) + $E000
 650+ E6EE             >
 650+ E6EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 650+ E6EE             >Latest_Definition defl  Heap_Ptr
 650+ E6EE             >
 650+ E6EE             >                // dummy db directives used to calculate length of namec
 650+ E6EE 3F 45 52 52 >                db      "?ERROR"
 650+ E6F2 4F 52       >
 650+ E6F4             >len_NFA         defl    $ - temp_NFA
 650+ E6F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 650+ E6EE             >
 650+ E6EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 650+ E6EF 3F 45 52 52 >                db      "?ERROR"               // name string in 7-bit ascii, but
 650+ E6F3 4F 52       >
 650+ E6F5             >                org     $-1                 // alter last byte of Name just above to set
 650+ E6F4 D2          >                db      {b $} | END_BIT     // msb as name end
 650+ E6F5             >
 650+ E6F5 E5 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 650+ E6F7             >Prev_Ptr        defl    Heap_Ptr
 650+ E6F7             >
 650+ E6F7             >mirror_Ptr      defl    $
 650+ E6F7             >
 650+ E6F7 D1 6D       >                dw      Dict_Ptr + 2        // xt
 650+ E6F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 650+ E6F9             >
 650+ E6F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 650+ E6F9             >
 650+ E6F9             >//              ______________________________________________________________________
 650+ E6F9             >//              Dictionary part
 650+ E6F9             >
 650+ E6F9             >                org     Dict_Ptr
 650+ 6DCF             >
 650+ 6DCF F7 06       >                dw      mirror_Ptr - $E000 + Heap_offset
 650+ 6DD1             >
 650+ 6DD1             >QERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 650+ 6DD1 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 650+ 6DD4             >
 650+ 6DD4             >
 650+ 6DD4             >                endif           ; ok        // for other definitions it "points" the correct handler
 650+ 6DD4             >                // Use of "; ok" to suppress "warning[fwdref]"
 650+ 6DD4             >
 650+ 6DD4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 651+ 6DD4 15 69                        dw      SWAP                    // swap
 652+ 6DD6                                                              // if
 653+ 6DD6 F3 63                        dw      ZBRANCH
 654+ 6DD8 08 00                        dw      QError_Else - $
 655+ 6DDA 14 73                        dw          ERROR               //      error  ( is a forward-ref )
 656+ 6DDC                                                              // else
 657+ 6DDC EF 63                        dw      BRANCH
 658+ 6DDE 04 00                        dw      QError_Endif - $
 659+ 6DE0              QError_Else:
 660+ 6DE0 01 69                        dw          DROP                //      drop
 661+ 6DE2              QError_Endif:                                   // endif
 662+ 6DE2 51 68                        dw      EXIT                    // ;
 663+ 6DE4
 664+ 6DE4              //  ______________________________________________________________________
 665+ 6DE4              //
 666+ 6DE4              // ?comp       --
 667+ 6DE4              // raise msg #17 if not compiling
 668+ 6DE4                              Colon_Def QCOMP, "?COMP", is_normal
 668+ 6DE4             >                New_Def  QCOMP, "?COMP", Enter_Ptr, is_normal ; ok
 668+ 6DE4             >
 668+ 6DE4             >Dict_Ptr        defl    $
 668+ 6DE4             >
 668+ 6DE4             >//              ______________________________________________________________________
 668+ 6DE4             >//              Heap part
 668+ 6DE4             >
 668+ 6DE4             >
 668+ 6DE4             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ E6F9             >
 668+ E6F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ E6F9             >Latest_Definition defl  Heap_Ptr
 668+ E6F9             >
 668+ E6F9             >                // dummy db directives used to calculate length of namec
 668+ E6F9 3F 43 4F 4D >                db      "?COMP"
 668+ E6FD 50          >
 668+ E6FE             >len_NFA         defl    $ - temp_NFA
 668+ E6FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ E6F9             >
 668+ E6F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ E6FA 3F 43 4F 4D >                db      "?COMP"               // name string in 7-bit ascii, but
 668+ E6FE 50          >
 668+ E6FF             >                org     $-1                 // alter last byte of Name just above to set
 668+ E6FE D0          >                db      {b $} | END_BIT     // msb as name end
 668+ E6FF             >
 668+ E6FF EE 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ E701             >Prev_Ptr        defl    Heap_Ptr
 668+ E701             >
 668+ E701             >mirror_Ptr      defl    $
 668+ E701             >
 668+ E701 E6 6D       >                dw      Dict_Ptr + 2        // xt
 668+ E703             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ E703             >
 668+ E703             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ E703             >
 668+ E703             >//              ______________________________________________________________________
 668+ E703             >//              Dictionary part
 668+ E703             >
 668+ E703             >                org     Dict_Ptr
 668+ 6DE4             >
 668+ 6DE4 01 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 6DE6             >
 668+ 6DE6             >QCOMP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 6DE6 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 6DE9             >
 668+ 6DE9             >
 668+ 6DE9             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 6DE9             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 6DE9             >
 668+ 6DE9             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 6DE9 43 6B 86 69                  dw      STATE, FETCH            // state @
 670+ 6DED 76 68                        dw      ZEQUAL                  // 0=
 671+ 6DEF A3 63 11 00                  dw      LIT, 17                 // 17  ( can't be executed )
 672+ 6DF3 D1 6D                        dw      QERROR                  // ?error
 673+ 6DF5 51 68                        dw      EXIT                    // ;
 674+ 6DF7
 675+ 6DF7              //  ______________________________________________________________________
 676+ 6DF7              //
 677+ 6DF7              // ?exec       --
 678+ 6DF7              // raise msg #18 if compiling
 679+ 6DF7                              Colon_Def QEXEC, "?EXEC", is_normal
 679+ 6DF7             >                New_Def  QEXEC, "?EXEC", Enter_Ptr, is_normal ; ok
 679+ 6DF7             >
 679+ 6DF7             >Dict_Ptr        defl    $
 679+ 6DF7             >
 679+ 6DF7             >//              ______________________________________________________________________
 679+ 6DF7             >//              Heap part
 679+ 6DF7             >
 679+ 6DF7             >
 679+ 6DF7             >                org     (Heap_Ptr & $1FFF) + $E000
 679+ E703             >
 679+ E703             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 679+ E703             >Latest_Definition defl  Heap_Ptr
 679+ E703             >
 679+ E703             >                // dummy db directives used to calculate length of namec
 679+ E703 3F 45 58 45 >                db      "?EXEC"
 679+ E707 43          >
 679+ E708             >len_NFA         defl    $ - temp_NFA
 679+ E708             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 679+ E703             >
 679+ E703 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 679+ E704 3F 45 58 45 >                db      "?EXEC"               // name string in 7-bit ascii, but
 679+ E708 43          >
 679+ E709             >                org     $-1                 // alter last byte of Name just above to set
 679+ E708 C3          >                db      {b $} | END_BIT     // msb as name end
 679+ E709             >
 679+ E709 F9 06       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 679+ E70B             >Prev_Ptr        defl    Heap_Ptr
 679+ E70B             >
 679+ E70B             >mirror_Ptr      defl    $
 679+ E70B             >
 679+ E70B F9 6D       >                dw      Dict_Ptr + 2        // xt
 679+ E70D             >Heap_Ptr        defl    $ - $E000           // save current HP
 679+ E70D             >
 679+ E70D             >Current_HP      defl  $ - $E000             // used to set HP once!
 679+ E70D             >
 679+ E70D             >//              ______________________________________________________________________
 679+ E70D             >//              Dictionary part
 679+ E70D             >
 679+ E70D             >                org     Dict_Ptr
 679+ 6DF7             >
 679+ 6DF7 0B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 679+ 6DF9             >
 679+ 6DF9             >QEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 679+ 6DF9 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 679+ 6DFC             >
 679+ 6DFC             >
 679+ 6DFC             >                endif           ; ok        // for other definitions it "points" the correct handler
 679+ 6DFC             >                // Use of "; ok" to suppress "warning[fwdref]"
 679+ 6DFC             >
 679+ 6DFC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 680+ 6DFC 43 6B 86 69                  dw      STATE, FETCH            // state @
 681+ 6E00 A3 63 12 00                  dw      LIT, 18                 // 18  ( can't be compiled )
 682+ 6E04 D1 6D                        dw      QERROR                  // ?error
 683+ 6E06 51 68                        dw      EXIT                    // ;
 684+ 6E08
 685+ 6E08              //  ______________________________________________________________________
 686+ 6E08              //
 687+ 6E08              // ?pairs       n1 n2 --
 688+ 6E08              // raise msg #19 if n1 != n2. Compiler pushes some placeholder to stack for syntax checking
 689+ 6E08                              Colon_Def QPAIRS, "?PAIRS", is_normal
 689+ 6E08             >                New_Def  QPAIRS, "?PAIRS", Enter_Ptr, is_normal ; ok
 689+ 6E08             >
 689+ 6E08             >Dict_Ptr        defl    $
 689+ 6E08             >
 689+ 6E08             >//              ______________________________________________________________________
 689+ 6E08             >//              Heap part
 689+ 6E08             >
 689+ 6E08             >
 689+ 6E08             >                org     (Heap_Ptr & $1FFF) + $E000
 689+ E70D             >
 689+ E70D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 689+ E70D             >Latest_Definition defl  Heap_Ptr
 689+ E70D             >
 689+ E70D             >                // dummy db directives used to calculate length of namec
 689+ E70D 3F 50 41 49 >                db      "?PAIRS"
 689+ E711 52 53       >
 689+ E713             >len_NFA         defl    $ - temp_NFA
 689+ E713             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 689+ E70D             >
 689+ E70D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 689+ E70E 3F 50 41 49 >                db      "?PAIRS"               // name string in 7-bit ascii, but
 689+ E712 52 53       >
 689+ E714             >                org     $-1                 // alter last byte of Name just above to set
 689+ E713 D3          >                db      {b $} | END_BIT     // msb as name end
 689+ E714             >
 689+ E714 03 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 689+ E716             >Prev_Ptr        defl    Heap_Ptr
 689+ E716             >
 689+ E716             >mirror_Ptr      defl    $
 689+ E716             >
 689+ E716 0A 6E       >                dw      Dict_Ptr + 2        // xt
 689+ E718             >Heap_Ptr        defl    $ - $E000           // save current HP
 689+ E718             >
 689+ E718             >Current_HP      defl  $ - $E000             // used to set HP once!
 689+ E718             >
 689+ E718             >//              ______________________________________________________________________
 689+ E718             >//              Dictionary part
 689+ E718             >
 689+ E718             >                org     Dict_Ptr
 689+ 6E08             >
 689+ 6E08 16 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 689+ 6E0A             >
 689+ 6E0A             >QPAIRS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 689+ 6E0A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 689+ 6E0D             >
 689+ 6E0D             >
 689+ 6E0D             >                endif           ; ok        // for other definitions it "points" the correct handler
 689+ 6E0D             >                // Use of "; ok" to suppress "warning[fwdref]"
 689+ 6E0D             >
 689+ 6E0D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 690+ 6E0D DC 6B                        dw      SUBTRACT                // -
 691+ 6E0F A3 63 13 00                  dw      LIT, 19                 // 18  ( syntax error )
 692+ 6E13 D1 6D                        dw      QERROR                  // ?error
 693+ 6E15 51 68                        dw      EXIT                    // ;
 694+ 6E17
 695+ 6E17              //  ______________________________________________________________________
 696+ 6E17              //
 697+ 6E17              // ?csp       --
 698+ 6E17              // raise msg #20 if surrent SP in not what previously saved in CSP.
 699+ 6E17              // Compiler relies on that for  syntax checking of structures
 700+ 6E17                              Colon_Def QCSP, "?CSP", is_normal
 700+ 6E17             >                New_Def  QCSP, "?CSP", Enter_Ptr, is_normal ; ok
 700+ 6E17             >
 700+ 6E17             >Dict_Ptr        defl    $
 700+ 6E17             >
 700+ 6E17             >//              ______________________________________________________________________
 700+ 6E17             >//              Heap part
 700+ 6E17             >
 700+ 6E17             >
 700+ 6E17             >                org     (Heap_Ptr & $1FFF) + $E000
 700+ E718             >
 700+ E718             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 700+ E718             >Latest_Definition defl  Heap_Ptr
 700+ E718             >
 700+ E718             >                // dummy db directives used to calculate length of namec
 700+ E718 3F 43 53 50 >                db      "?CSP"
 700+ E71C             >len_NFA         defl    $ - temp_NFA
 700+ E71C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 700+ E718             >
 700+ E718 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 700+ E719 3F 43 53 50 >                db      "?CSP"               // name string in 7-bit ascii, but
 700+ E71D             >                org     $-1                 // alter last byte of Name just above to set
 700+ E71C D0          >                db      {b $} | END_BIT     // msb as name end
 700+ E71D             >
 700+ E71D 0D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 700+ E71F             >Prev_Ptr        defl    Heap_Ptr
 700+ E71F             >
 700+ E71F             >mirror_Ptr      defl    $
 700+ E71F             >
 700+ E71F 19 6E       >                dw      Dict_Ptr + 2        // xt
 700+ E721             >Heap_Ptr        defl    $ - $E000           // save current HP
 700+ E721             >
 700+ E721             >Current_HP      defl  $ - $E000             // used to set HP once!
 700+ E721             >
 700+ E721             >//              ______________________________________________________________________
 700+ E721             >//              Dictionary part
 700+ E721             >
 700+ E721             >                org     Dict_Ptr
 700+ 6E17             >
 700+ 6E17 1F 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 700+ 6E19             >
 700+ 6E19             >QCSP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 700+ 6E19 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 700+ 6E1C             >
 700+ 6E1C             >
 700+ 6E1C             >                endif           ; ok        // for other definitions it "points" the correct handler
 700+ 6E1C             >                // Use of "; ok" to suppress "warning[fwdref]"
 700+ 6E1C             >
 700+ 6E1C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 701+ 6E1C 38 68                        dw      SPFETCH                 // sp@
 702+ 6E1E 5B 6B 86 69                  dw      CSP, FETCH              // csp @
 703+ 6E22 DC 6B                        dw      SUBTRACT                // -
 704+ 6E24 A3 63 14 00                  dw      LIT, 20                 // 20  ( bad definition end )
 705+ 6E28 D1 6D                        dw      QERROR                  // ?error
 706+ 6E2A 51 68                        dw      EXIT                    // ;
 707+ 6E2C
 708+ 6E2C              //  ______________________________________________________________________
 709+ 6E2C              //
 710+ 6E2C              // ?loading      --
 711+ 6E2C              // raise msg #22 if not loading
 712+ 6E2C                              Colon_Def QLOADING, "?LOADING", is_normal
 712+ 6E2C             >                New_Def  QLOADING, "?LOADING", Enter_Ptr, is_normal ; ok
 712+ 6E2C             >
 712+ 6E2C             >Dict_Ptr        defl    $
 712+ 6E2C             >
 712+ 6E2C             >//              ______________________________________________________________________
 712+ 6E2C             >//              Heap part
 712+ 6E2C             >
 712+ 6E2C             >
 712+ 6E2C             >                org     (Heap_Ptr & $1FFF) + $E000
 712+ E721             >
 712+ E721             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 712+ E721             >Latest_Definition defl  Heap_Ptr
 712+ E721             >
 712+ E721             >                // dummy db directives used to calculate length of namec
 712+ E721 3F 4C 4F 41 >                db      "?LOADING"
 712+ E725 44 49 4E 47 >
 712+ E729             >len_NFA         defl    $ - temp_NFA
 712+ E729             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 712+ E721             >
 712+ E721 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 712+ E722 3F 4C 4F 41 >                db      "?LOADING"               // name string in 7-bit ascii, but
 712+ E726 44 49 4E 47 >
 712+ E72A             >                org     $-1                 // alter last byte of Name just above to set
 712+ E729 C7          >                db      {b $} | END_BIT     // msb as name end
 712+ E72A             >
 712+ E72A 18 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 712+ E72C             >Prev_Ptr        defl    Heap_Ptr
 712+ E72C             >
 712+ E72C             >mirror_Ptr      defl    $
 712+ E72C             >
 712+ E72C 2E 6E       >                dw      Dict_Ptr + 2        // xt
 712+ E72E             >Heap_Ptr        defl    $ - $E000           // save current HP
 712+ E72E             >
 712+ E72E             >Current_HP      defl  $ - $E000             // used to set HP once!
 712+ E72E             >
 712+ E72E             >//              ______________________________________________________________________
 712+ E72E             >//              Dictionary part
 712+ E72E             >
 712+ E72E             >                org     Dict_Ptr
 712+ 6E2C             >
 712+ 6E2C 2C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 712+ 6E2E             >
 712+ 6E2E             >QLOADING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 712+ 6E2E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 712+ 6E31             >
 712+ 6E31             >
 712+ 6E31             >                endif           ; ok        // for other definitions it "points" the correct handler
 712+ 6E31             >                // Use of "; ok" to suppress "warning[fwdref]"
 712+ 6E31             >
 712+ 6E31             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 713+ 6E31 19 6B 86 69                  dw      BLK, FETCH              // blk @
 714+ 6E35 76 68                        dw      ZEQUAL                  // 0=
 715+ 6E37 A3 63 16 00                  dw      LIT, 22                 // 22  ( aren't loading now )
 716+ 6E3B D1 6D                        dw      QERROR                  // ?error
 717+ 6E3D 51 68                        dw      EXIT                    // ;
 718+ 6E3F
 719+ 6E3F              //  ______________________________________________________________________
 720+ 6E3F              //
 721+ 6E3F              // compile      --
 722+ 6E3F              // compiles the following word
 723+ 6E3F                              Colon_Def COMPILE, "COMPILE", is_normal
 723+ 6E3F             >                New_Def  COMPILE, "COMPILE", Enter_Ptr, is_normal ; ok
 723+ 6E3F             >
 723+ 6E3F             >Dict_Ptr        defl    $
 723+ 6E3F             >
 723+ 6E3F             >//              ______________________________________________________________________
 723+ 6E3F             >//              Heap part
 723+ 6E3F             >
 723+ 6E3F             >
 723+ 6E3F             >                org     (Heap_Ptr & $1FFF) + $E000
 723+ E72E             >
 723+ E72E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 723+ E72E             >Latest_Definition defl  Heap_Ptr
 723+ E72E             >
 723+ E72E             >                // dummy db directives used to calculate length of namec
 723+ E72E 43 4F 4D 50 >                db      "COMPILE"
 723+ E732 49 4C 45    >
 723+ E735             >len_NFA         defl    $ - temp_NFA
 723+ E735             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 723+ E72E             >
 723+ E72E 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 723+ E72F 43 4F 4D 50 >                db      "COMPILE"               // name string in 7-bit ascii, but
 723+ E733 49 4C 45    >
 723+ E736             >                org     $-1                 // alter last byte of Name just above to set
 723+ E735 C5          >                db      {b $} | END_BIT     // msb as name end
 723+ E736             >
 723+ E736 21 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 723+ E738             >Prev_Ptr        defl    Heap_Ptr
 723+ E738             >
 723+ E738             >mirror_Ptr      defl    $
 723+ E738             >
 723+ E738 41 6E       >                dw      Dict_Ptr + 2        // xt
 723+ E73A             >Heap_Ptr        defl    $ - $E000           // save current HP
 723+ E73A             >
 723+ E73A             >Current_HP      defl  $ - $E000             // used to set HP once!
 723+ E73A             >
 723+ E73A             >//              ______________________________________________________________________
 723+ E73A             >//              Dictionary part
 723+ E73A             >
 723+ E73A             >                org     Dict_Ptr
 723+ 6E3F             >
 723+ 6E3F 38 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 723+ 6E41             >
 723+ 6E41             >COMPILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 723+ 6E41 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 723+ 6E44             >
 723+ 6E44             >
 723+ 6E44             >                endif           ; ok        // for other definitions it "points" the correct handler
 723+ 6E44             >                // Use of "; ok" to suppress "warning[fwdref]"
 723+ 6E44             >
 723+ 6E44             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 724+ 6E44 E6 6D                        dw      QCOMP                   // ?comp
 725+ 6E46 66 68                        dw      R_TO                    // r>
 726+ 6E48 1C 69 CD 68                  dw      DUP, CELL_PLUS          // dup, cell+
 727+ 6E4C 5B 68                        dw      TO_R                    // >r
 728+ 6E4E 86 69 B3 6B                  dw      FETCH, COMMA            // @ ,
 729+ 6E52 51 68                        dw      EXIT                    // ;
 730+ 6E54
 731+ 6E54              //  ______________________________________________________________________
 732+ 6E54              //
 733+ 6E54              // compile,     --
 734+ 6E54              // compiles the following word
 735+ 6E54                              Colon_Def COMPILE_XT, "COMPILE,", is_normal
 735+ 6E54             >                New_Def  COMPILE_XT, "COMPILE,", Enter_Ptr, is_normal ; ok
 735+ 6E54             >
 735+ 6E54             >Dict_Ptr        defl    $
 735+ 6E54             >
 735+ 6E54             >//              ______________________________________________________________________
 735+ 6E54             >//              Heap part
 735+ 6E54             >
 735+ 6E54             >
 735+ 6E54             >                org     (Heap_Ptr & $1FFF) + $E000
 735+ E73A             >
 735+ E73A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 735+ E73A             >Latest_Definition defl  Heap_Ptr
 735+ E73A             >
 735+ E73A             >                // dummy db directives used to calculate length of namec
 735+ E73A 43 4F 4D 50 >                db      "COMPILE,"
 735+ E73E 49 4C 45 2C >
 735+ E742             >len_NFA         defl    $ - temp_NFA
 735+ E742             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 735+ E73A             >
 735+ E73A 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 735+ E73B 43 4F 4D 50 >                db      "COMPILE,"               // name string in 7-bit ascii, but
 735+ E73F 49 4C 45 2C >
 735+ E743             >                org     $-1                 // alter last byte of Name just above to set
 735+ E742 AC          >                db      {b $} | END_BIT     // msb as name end
 735+ E743             >
 735+ E743 2E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 735+ E745             >Prev_Ptr        defl    Heap_Ptr
 735+ E745             >
 735+ E745             >mirror_Ptr      defl    $
 735+ E745             >
 735+ E745 56 6E       >                dw      Dict_Ptr + 2        // xt
 735+ E747             >Heap_Ptr        defl    $ - $E000           // save current HP
 735+ E747             >
 735+ E747             >Current_HP      defl  $ - $E000             // used to set HP once!
 735+ E747             >
 735+ E747             >//              ______________________________________________________________________
 735+ E747             >//              Dictionary part
 735+ E747             >
 735+ E747             >                org     Dict_Ptr
 735+ 6E54             >
 735+ 6E54 45 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 735+ 6E56             >
 735+ 6E56             >COMPILE_XT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 735+ 6E56 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 735+ 6E59             >
 735+ 6E59             >
 735+ 6E59             >                endif           ; ok        // for other definitions it "points" the correct handler
 735+ 6E59             >                // Use of "; ok" to suppress "warning[fwdref]"
 735+ 6E59             >
 735+ 6E59             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 736+ 6E59              //              dw      QCOMP                   // ?comp
 737+ 6E59 B3 6B                        dw      COMMA                   // ,
 738+ 6E5B 51 68                        dw      EXIT                    // ;
 739+ 6E5D
 740+ 6E5D              //  ______________________________________________________________________
 741+ 6E5D              //
 742+ 6E5D              // [            --
 743+ 6E5D              // stop compilation
 744+ 6E5D                              Colon_Def SQUARED_OPEN, "[", is_immediate
 744+ 6E5D             >                New_Def  SQUARED_OPEN, "[", Enter_Ptr, is_immediate ; ok
 744+ 6E5D             >
 744+ 6E5D             >Dict_Ptr        defl    $
 744+ 6E5D             >
 744+ 6E5D             >//              ______________________________________________________________________
 744+ 6E5D             >//              Heap part
 744+ 6E5D             >
 744+ 6E5D             >
 744+ 6E5D             >                org     (Heap_Ptr & $1FFF) + $E000
 744+ E747             >
 744+ E747             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 744+ E747             >Latest_Definition defl  Heap_Ptr
 744+ E747             >
 744+ E747             >                // dummy db directives used to calculate length of namec
 744+ E747 5B          >                db      "["
 744+ E748             >len_NFA         defl    $ - temp_NFA
 744+ E748             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 744+ E747             >
 744+ E747 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 744+ E748 5B          >                db      "["               // name string in 7-bit ascii, but
 744+ E749             >                org     $-1                 // alter last byte of Name just above to set
 744+ E748 DB          >                db      {b $} | END_BIT     // msb as name end
 744+ E749             >
 744+ E749 3A 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 744+ E74B             >Prev_Ptr        defl    Heap_Ptr
 744+ E74B             >
 744+ E74B             >mirror_Ptr      defl    $
 744+ E74B             >
 744+ E74B 5F 6E       >                dw      Dict_Ptr + 2        // xt
 744+ E74D             >Heap_Ptr        defl    $ - $E000           // save current HP
 744+ E74D             >
 744+ E74D             >Current_HP      defl  $ - $E000             // used to set HP once!
 744+ E74D             >
 744+ E74D             >//              ______________________________________________________________________
 744+ E74D             >//              Dictionary part
 744+ E74D             >
 744+ E74D             >                org     Dict_Ptr
 744+ 6E5D             >
 744+ 6E5D 4B 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 744+ 6E5F             >
 744+ 6E5F             >SQUARED_OPEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 744+ 6E5F CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 744+ 6E62             >
 744+ 6E62             >
 744+ 6E62             >                endif           ; ok        // for other definitions it "points" the correct handler
 744+ 6E62             >                // Use of "; ok" to suppress "warning[fwdref]"
 744+ 6E62             >
 744+ 6E62             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 745+ 6E62 78 6A                        dw      ZERO                    // 0
 746+ 6E64 43 6B 90 69                  dw      STATE, STORE            // state !
 747+ 6E68 51 68                        dw      EXIT                    // ; immediate
 748+ 6E6A
 749+ 6E6A              //  ______________________________________________________________________
 750+ 6E6A              //
 751+ 6E6A              // ]            --
 752+ 6E6A              // start compilation
 753+ 6E6A                              Colon_Def SQUARED_CLOSE, "]", is_normal
 753+ 6E6A             >                New_Def  SQUARED_CLOSE, "]", Enter_Ptr, is_normal ; ok
 753+ 6E6A             >
 753+ 6E6A             >Dict_Ptr        defl    $
 753+ 6E6A             >
 753+ 6E6A             >//              ______________________________________________________________________
 753+ 6E6A             >//              Heap part
 753+ 6E6A             >
 753+ 6E6A             >
 753+ 6E6A             >                org     (Heap_Ptr & $1FFF) + $E000
 753+ E74D             >
 753+ E74D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 753+ E74D             >Latest_Definition defl  Heap_Ptr
 753+ E74D             >
 753+ E74D             >                // dummy db directives used to calculate length of namec
 753+ E74D 5D          >                db      "]"
 753+ E74E             >len_NFA         defl    $ - temp_NFA
 753+ E74E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 753+ E74D             >
 753+ E74D 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 753+ E74E 5D          >                db      "]"               // name string in 7-bit ascii, but
 753+ E74F             >                org     $-1                 // alter last byte of Name just above to set
 753+ E74E DD          >                db      {b $} | END_BIT     // msb as name end
 753+ E74F             >
 753+ E74F 47 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 753+ E751             >Prev_Ptr        defl    Heap_Ptr
 753+ E751             >
 753+ E751             >mirror_Ptr      defl    $
 753+ E751             >
 753+ E751 6C 6E       >                dw      Dict_Ptr + 2        // xt
 753+ E753             >Heap_Ptr        defl    $ - $E000           // save current HP
 753+ E753             >
 753+ E753             >Current_HP      defl  $ - $E000             // used to set HP once!
 753+ E753             >
 753+ E753             >//              ______________________________________________________________________
 753+ E753             >//              Dictionary part
 753+ E753             >
 753+ E753             >                org     Dict_Ptr
 753+ 6E6A             >
 753+ 6E6A 51 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 753+ 6E6C             >
 753+ 6E6C             >SQUARED_CLOSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 753+ 6E6C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 753+ 6E6F             >
 753+ 6E6F             >
 753+ 6E6F             >                endif           ; ok        // for other definitions it "points" the correct handler
 753+ 6E6F             >                // Use of "; ok" to suppress "warning[fwdref]"
 753+ 6E6F             >
 753+ 6E6F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 754+ 6E6F A3 63 C0 00                  dw      LIT, $C0                // 192
 755+ 6E73 43 6B 90 69                  dw      STATE, STORE            // state !
 756+ 6E77 51 68                        dw      EXIT                    // ;
 757+ 6E79
 758+ 6E79              //  ______________________________________________________________________
 759+ 6E79              //
 760+ 6E79              // smudge       --
 761+ 6E79              // toggle smudge bit of latest definition
 762+ 6E79                              Colon_Def SMUDGE, "SMUDGE", is_normal
 762+ 6E79             >                New_Def  SMUDGE, "SMUDGE", Enter_Ptr, is_normal ; ok
 762+ 6E79             >
 762+ 6E79             >Dict_Ptr        defl    $
 762+ 6E79             >
 762+ 6E79             >//              ______________________________________________________________________
 762+ 6E79             >//              Heap part
 762+ 6E79             >
 762+ 6E79             >
 762+ 6E79             >                org     (Heap_Ptr & $1FFF) + $E000
 762+ E753             >
 762+ E753             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 762+ E753             >Latest_Definition defl  Heap_Ptr
 762+ E753             >
 762+ E753             >                // dummy db directives used to calculate length of namec
 762+ E753 53 4D 55 44 >                db      "SMUDGE"
 762+ E757 47 45       >
 762+ E759             >len_NFA         defl    $ - temp_NFA
 762+ E759             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 762+ E753             >
 762+ E753 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 762+ E754 53 4D 55 44 >                db      "SMUDGE"               // name string in 7-bit ascii, but
 762+ E758 47 45       >
 762+ E75A             >                org     $-1                 // alter last byte of Name just above to set
 762+ E759 C5          >                db      {b $} | END_BIT     // msb as name end
 762+ E75A             >
 762+ E75A 4D 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 762+ E75C             >Prev_Ptr        defl    Heap_Ptr
 762+ E75C             >
 762+ E75C             >mirror_Ptr      defl    $
 762+ E75C             >
 762+ E75C 7B 6E       >                dw      Dict_Ptr + 2        // xt
 762+ E75E             >Heap_Ptr        defl    $ - $E000           // save current HP
 762+ E75E             >
 762+ E75E             >Current_HP      defl  $ - $E000             // used to set HP once!
 762+ E75E             >
 762+ E75E             >//              ______________________________________________________________________
 762+ E75E             >//              Dictionary part
 762+ E75E             >
 762+ E75E             >                org     Dict_Ptr
 762+ 6E79             >
 762+ 6E79 5C 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 762+ 6E7B             >
 762+ 6E7B             >SMUDGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 762+ 6E7B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 762+ 6E7E             >
 762+ 6E7E             >
 762+ 6E7E             >                endif           ; ok        // for other definitions it "points" the correct handler
 762+ 6E7E             >                // Use of "; ok" to suppress "warning[fwdref]"
 762+ 6E7E             >
 762+ 6E7E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 763+ 6E7E 41 6D                        dw      LATEST                  // latest
 764+ 6E80 A3 63 20 00                  dw      LIT, SMUDGE_BIT         // 32
 765+ 6E84 7D 69                        dw      TOGGLE                  // toggle
 766+ 6E86 51 68                        dw      EXIT                    // ;
 767+ 6E88
 768+ 6E88              //  ______________________________________________________________________
 769+ 6E88              //
 770+ 6E88              // immediate    --
 771+ 6E88              // make immediate the latest definition
 772+ 6E88                              Colon_Def IMMEDIATE, "IMMEDIATE", is_normal
 772+ 6E88             >                New_Def  IMMEDIATE, "IMMEDIATE", Enter_Ptr, is_normal ; ok
 772+ 6E88             >
 772+ 6E88             >Dict_Ptr        defl    $
 772+ 6E88             >
 772+ 6E88             >//              ______________________________________________________________________
 772+ 6E88             >//              Heap part
 772+ 6E88             >
 772+ 6E88             >
 772+ 6E88             >                org     (Heap_Ptr & $1FFF) + $E000
 772+ E75E             >
 772+ E75E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 772+ E75E             >Latest_Definition defl  Heap_Ptr
 772+ E75E             >
 772+ E75E             >                // dummy db directives used to calculate length of namec
 772+ E75E 49 4D 4D 45 >                db      "IMMEDIATE"
 772+ E762 44 49 41 54 >
 772+ E766 45          >
 772+ E767             >len_NFA         defl    $ - temp_NFA
 772+ E767             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 772+ E75E             >
 772+ E75E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 772+ E75F 49 4D 4D 45 >                db      "IMMEDIATE"               // name string in 7-bit ascii, but
 772+ E763 44 49 41 54 >
 772+ E767 45          >
 772+ E768             >                org     $-1                 // alter last byte of Name just above to set
 772+ E767 C5          >                db      {b $} | END_BIT     // msb as name end
 772+ E768             >
 772+ E768 53 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 772+ E76A             >Prev_Ptr        defl    Heap_Ptr
 772+ E76A             >
 772+ E76A             >mirror_Ptr      defl    $
 772+ E76A             >
 772+ E76A 8A 6E       >                dw      Dict_Ptr + 2        // xt
 772+ E76C             >Heap_Ptr        defl    $ - $E000           // save current HP
 772+ E76C             >
 772+ E76C             >Current_HP      defl  $ - $E000             // used to set HP once!
 772+ E76C             >
 772+ E76C             >//              ______________________________________________________________________
 772+ E76C             >//              Dictionary part
 772+ E76C             >
 772+ E76C             >                org     Dict_Ptr
 772+ 6E88             >
 772+ 6E88 6A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 772+ 6E8A             >
 772+ 6E8A             >IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 772+ 6E8A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 772+ 6E8D             >
 772+ 6E8D             >
 772+ 6E8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 772+ 6E8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 772+ 6E8D             >
 772+ 6E8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 773+ 6E8D 41 6D                        dw      LATEST                  // latest
 774+ 6E8F A3 63 40 00                  dw      LIT, IMMEDIATE_BIT      // 64
 775+ 6E93 7D 69                        dw      TOGGLE                  // toggle
 776+ 6E95 51 68                        dw      EXIT                    // ;
 777+ 6E97
 778+ 6E97              //  ______________________________________________________________________
 779+ 6E97              //
 780+ 6E97              // hex          --
 781+ 6E97              // change numeration base
 782+ 6E97                              Colon_Def HEX, "HEX", is_normal
 782+ 6E97             >                New_Def  HEX, "HEX", Enter_Ptr, is_normal ; ok
 782+ 6E97             >
 782+ 6E97             >Dict_Ptr        defl    $
 782+ 6E97             >
 782+ 6E97             >//              ______________________________________________________________________
 782+ 6E97             >//              Heap part
 782+ 6E97             >
 782+ 6E97             >
 782+ 6E97             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ E76C             >
 782+ E76C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ E76C             >Latest_Definition defl  Heap_Ptr
 782+ E76C             >
 782+ E76C             >                // dummy db directives used to calculate length of namec
 782+ E76C 48 45 58    >                db      "HEX"
 782+ E76F             >len_NFA         defl    $ - temp_NFA
 782+ E76F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ E76C             >
 782+ E76C 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ E76D 48 45 58    >                db      "HEX"               // name string in 7-bit ascii, but
 782+ E770             >                org     $-1                 // alter last byte of Name just above to set
 782+ E76F D8          >                db      {b $} | END_BIT     // msb as name end
 782+ E770             >
 782+ E770 5E 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ E772             >Prev_Ptr        defl    Heap_Ptr
 782+ E772             >
 782+ E772             >mirror_Ptr      defl    $
 782+ E772             >
 782+ E772 99 6E       >                dw      Dict_Ptr + 2        // xt
 782+ E774             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ E774             >
 782+ E774             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ E774             >
 782+ E774             >//              ______________________________________________________________________
 782+ E774             >//              Dictionary part
 782+ E774             >
 782+ E774             >                org     Dict_Ptr
 782+ 6E97             >
 782+ 6E97 72 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 6E99             >
 782+ 6E99             >HEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 6E99 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 6E9C             >
 782+ 6E9C             >
 782+ 6E9C             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 6E9C             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 6E9C             >
 782+ 6E9C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 6E9C A3 63 10 00                  dw      LIT, 16                 // 16
 784+ 6EA0 49 6B 90 69                  dw      BASE, STORE             // base !
 785+ 6EA4 51 68                        dw      EXIT                    // ;
 786+ 6EA6
 787+ 6EA6              //  ______________________________________________________________________
 788+ 6EA6              //
 789+ 6EA6              // decimal      --
 790+ 6EA6              // change numeration base
 791+ 6EA6                              Colon_Def DECIMAL, "DECIMAL", is_normal
 791+ 6EA6             >                New_Def  DECIMAL, "DECIMAL", Enter_Ptr, is_normal ; ok
 791+ 6EA6             >
 791+ 6EA6             >Dict_Ptr        defl    $
 791+ 6EA6             >
 791+ 6EA6             >//              ______________________________________________________________________
 791+ 6EA6             >//              Heap part
 791+ 6EA6             >
 791+ 6EA6             >
 791+ 6EA6             >                org     (Heap_Ptr & $1FFF) + $E000
 791+ E774             >
 791+ E774             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 791+ E774             >Latest_Definition defl  Heap_Ptr
 791+ E774             >
 791+ E774             >                // dummy db directives used to calculate length of namec
 791+ E774 44 45 43 49 >                db      "DECIMAL"
 791+ E778 4D 41 4C    >
 791+ E77B             >len_NFA         defl    $ - temp_NFA
 791+ E77B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 791+ E774             >
 791+ E774 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 791+ E775 44 45 43 49 >                db      "DECIMAL"               // name string in 7-bit ascii, but
 791+ E779 4D 41 4C    >
 791+ E77C             >                org     $-1                 // alter last byte of Name just above to set
 791+ E77B CC          >                db      {b $} | END_BIT     // msb as name end
 791+ E77C             >
 791+ E77C 6C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 791+ E77E             >Prev_Ptr        defl    Heap_Ptr
 791+ E77E             >
 791+ E77E             >mirror_Ptr      defl    $
 791+ E77E             >
 791+ E77E A8 6E       >                dw      Dict_Ptr + 2        // xt
 791+ E780             >Heap_Ptr        defl    $ - $E000           // save current HP
 791+ E780             >
 791+ E780             >Current_HP      defl  $ - $E000             // used to set HP once!
 791+ E780             >
 791+ E780             >//              ______________________________________________________________________
 791+ E780             >//              Dictionary part
 791+ E780             >
 791+ E780             >                org     Dict_Ptr
 791+ 6EA6             >
 791+ 6EA6 7E 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 791+ 6EA8             >
 791+ 6EA8             >DECIMAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 791+ 6EA8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 791+ 6EAB             >
 791+ 6EAB             >
 791+ 6EAB             >                endif           ; ok        // for other definitions it "points" the correct handler
 791+ 6EAB             >                // Use of "; ok" to suppress "warning[fwdref]"
 791+ 6EAB             >
 791+ 6EAB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 792+ 6EAB A3 63 0A 00                  dw      LIT, 10                 // 10
 793+ 6EAF 49 6B 90 69                  dw      BASE, STORE             // base !
 794+ 6EB3 51 68                        dw      EXIT                    // ;
 795+ 6EB5
 796+ 6EB5              //  ______________________________________________________________________
 797+ 6EB5              //
 798+ 6EB5              // (;code)       --
 799+ 6EB5              // patch to CFA to call/jump to the "following code"
 800+ 6EB5                              Colon_Def C_SEMICOLON_CODE, "(;CODE)", is_normal
 800+ 6EB5             >                New_Def  C_SEMICOLON_CODE, "(;CODE)", Enter_Ptr, is_normal ; ok
 800+ 6EB5             >
 800+ 6EB5             >Dict_Ptr        defl    $
 800+ 6EB5             >
 800+ 6EB5             >//              ______________________________________________________________________
 800+ 6EB5             >//              Heap part
 800+ 6EB5             >
 800+ 6EB5             >
 800+ 6EB5             >                org     (Heap_Ptr & $1FFF) + $E000
 800+ E780             >
 800+ E780             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 800+ E780             >Latest_Definition defl  Heap_Ptr
 800+ E780             >
 800+ E780             >                // dummy db directives used to calculate length of namec
 800+ E780 28 3B 43 4F >                db      "(;CODE)"
 800+ E784 44 45 29    >
 800+ E787             >len_NFA         defl    $ - temp_NFA
 800+ E787             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 800+ E780             >
 800+ E780 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 800+ E781 28 3B 43 4F >                db      "(;CODE)"               // name string in 7-bit ascii, but
 800+ E785 44 45 29    >
 800+ E788             >                org     $-1                 // alter last byte of Name just above to set
 800+ E787 A9          >                db      {b $} | END_BIT     // msb as name end
 800+ E788             >
 800+ E788 74 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 800+ E78A             >Prev_Ptr        defl    Heap_Ptr
 800+ E78A             >
 800+ E78A             >mirror_Ptr      defl    $
 800+ E78A             >
 800+ E78A B7 6E       >                dw      Dict_Ptr + 2        // xt
 800+ E78C             >Heap_Ptr        defl    $ - $E000           // save current HP
 800+ E78C             >
 800+ E78C             >Current_HP      defl  $ - $E000             // used to set HP once!
 800+ E78C             >
 800+ E78C             >//              ______________________________________________________________________
 800+ E78C             >//              Dictionary part
 800+ E78C             >
 800+ E78C             >                org     Dict_Ptr
 800+ 6EB5             >
 800+ 6EB5 8A 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 800+ 6EB7             >
 800+ 6EB7             >C_SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 800+ 6EB7 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 800+ 6EBA             >
 800+ 6EBA             >
 800+ 6EBA             >                endif           ; ok        // for other definitions it "points" the correct handler
 800+ 6EBA             >                // Use of "; ok" to suppress "warning[fwdref]"
 800+ 6EBA             >
 800+ 6EBA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 801+ 6EBA 66 68                        dw      R_TO                    // r>       ( Return Stack has IP to caller's next cell )
 802+ 6EBC 41 6D                        dw      LATEST                  // latest   ( Word being defined in this moment )
 803+ 6EBE 9F 6D 7A 6D                  dw      PFA, CFA                // pfa cfa  ( cfa of latest word )
 804+ 6EC2
 805+ 6EC2 A3 63 CD 00                  dw      LIT, $CD                // $CD      ( At Latest CFA put "call" op-code )
 806+ 6EC6 F8 68 A4 69                  dw      OVER, CSTORE            // over c!  ( why can't use comma? because CFA was already ALLOTted by create? )
 807+ 6ECA B7 68                        dw      ONE_PLUS                // 1+       ( At Latest CFA+1 put address for call. )
 808+ 6ECC
 809+ 6ECC 90 69                        dw      STORE                   // !
 810+ 6ECE 51 68                        dw      EXIT                    // ;
 811+ 6ED0
 812+ 6ED0              //  ______________________________________________________________________
 813+ 6ED0              //
 814+ 6ED0              // ;code        --
 815+ 6ED0                              Colon_Def SEMICOLON_CODE, ";CODE", is_immediate
 815+ 6ED0             >                New_Def  SEMICOLON_CODE, ";CODE", Enter_Ptr, is_immediate ; ok
 815+ 6ED0             >
 815+ 6ED0             >Dict_Ptr        defl    $
 815+ 6ED0             >
 815+ 6ED0             >//              ______________________________________________________________________
 815+ 6ED0             >//              Heap part
 815+ 6ED0             >
 815+ 6ED0             >
 815+ 6ED0             >                org     (Heap_Ptr & $1FFF) + $E000
 815+ E78C             >
 815+ E78C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 815+ E78C             >Latest_Definition defl  Heap_Ptr
 815+ E78C             >
 815+ E78C             >                // dummy db directives used to calculate length of namec
 815+ E78C 3B 43 4F 44 >                db      ";CODE"
 815+ E790 45          >
 815+ E791             >len_NFA         defl    $ - temp_NFA
 815+ E791             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 815+ E78C             >
 815+ E78C C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 815+ E78D 3B 43 4F 44 >                db      ";CODE"               // name string in 7-bit ascii, but
 815+ E791 45          >
 815+ E792             >                org     $-1                 // alter last byte of Name just above to set
 815+ E791 C5          >                db      {b $} | END_BIT     // msb as name end
 815+ E792             >
 815+ E792 80 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 815+ E794             >Prev_Ptr        defl    Heap_Ptr
 815+ E794             >
 815+ E794             >mirror_Ptr      defl    $
 815+ E794             >
 815+ E794 D2 6E       >                dw      Dict_Ptr + 2        // xt
 815+ E796             >Heap_Ptr        defl    $ - $E000           // save current HP
 815+ E796             >
 815+ E796             >Current_HP      defl  $ - $E000             // used to set HP once!
 815+ E796             >
 815+ E796             >//              ______________________________________________________________________
 815+ E796             >//              Dictionary part
 815+ E796             >
 815+ E796             >                org     Dict_Ptr
 815+ 6ED0             >
 815+ 6ED0 94 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 815+ 6ED2             >
 815+ 6ED2             >SEMICOLON_CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 815+ 6ED2 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 815+ 6ED5             >
 815+ 6ED5             >
 815+ 6ED5             >                endif           ; ok        // for other definitions it "points" the correct handler
 815+ 6ED5             >                // Use of "; ok" to suppress "warning[fwdref]"
 815+ 6ED5             >
 815+ 6ED5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 816+ 6ED5 19 6E                        dw      QCSP                    // ?csp
 817+ 6ED7 41 6E                        dw      COMPILE                 // compile
 818+ 6ED9 B7 6E                        dw      C_SEMICOLON_CODE        // (;code)
 819+ 6EDB 5F 6E                        dw      SQUARED_OPEN            // [
 820+ 6EDD 3F 6A                        dw      NOOP                    // noop () can be patched later to ASSEMBLER... )
 821+ 6EDF 51 68                        dw      EXIT                    // ; immediate
 822+ 6EE1
 823+ 6EE1              //  ______________________________________________________________________
 824+ 6EE1              //
 825+ 6EE1              // recurse      --
 826+ 6EE1              //              Colon_Def RECURSE, "RECURSE", is_immediate
 827+ 6EE1              //              dw      QCOMP                   // ?comp
 828+ 6EE1              //              dw      LATEST                  // latest
 829+ 6EE1              //              dw      PFA, CFA                // pfa cfa
 830+ 6EE1              //              dw      COMMA                   // ,
 831+ 6EE1              //              dw      EXIT                    // ; immediate
 832+ 6EE1
 833+ 6EE1              //  ______________________________________________________________________
 834+ 6EE1              //
 835+ 6EE1              // <builds     --
 836+ 6EE1                              Colon_Def CBUILDS, "<BUILDS", is_normal
 836+ 6EE1             >                New_Def  CBUILDS, "<BUILDS", Enter_Ptr, is_normal ; ok
 836+ 6EE1             >
 836+ 6EE1             >Dict_Ptr        defl    $
 836+ 6EE1             >
 836+ 6EE1             >//              ______________________________________________________________________
 836+ 6EE1             >//              Heap part
 836+ 6EE1             >
 836+ 6EE1             >
 836+ 6EE1             >                org     (Heap_Ptr & $1FFF) + $E000
 836+ E796             >
 836+ E796             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 836+ E796             >Latest_Definition defl  Heap_Ptr
 836+ E796             >
 836+ E796             >                // dummy db directives used to calculate length of namec
 836+ E796 3C 42 55 49 >                db      "<BUILDS"
 836+ E79A 4C 44 53    >
 836+ E79D             >len_NFA         defl    $ - temp_NFA
 836+ E79D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 836+ E796             >
 836+ E796 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 836+ E797 3C 42 55 49 >                db      "<BUILDS"               // name string in 7-bit ascii, but
 836+ E79B 4C 44 53    >
 836+ E79E             >                org     $-1                 // alter last byte of Name just above to set
 836+ E79D D3          >                db      {b $} | END_BIT     // msb as name end
 836+ E79E             >
 836+ E79E 8C 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 836+ E7A0             >Prev_Ptr        defl    Heap_Ptr
 836+ E7A0             >
 836+ E7A0             >mirror_Ptr      defl    $
 836+ E7A0             >
 836+ E7A0 E3 6E       >                dw      Dict_Ptr + 2        // xt
 836+ E7A2             >Heap_Ptr        defl    $ - $E000           // save current HP
 836+ E7A2             >
 836+ E7A2             >Current_HP      defl  $ - $E000             // used to set HP once!
 836+ E7A2             >
 836+ E7A2             >//              ______________________________________________________________________
 836+ E7A2             >//              Dictionary part
 836+ E7A2             >
 836+ E7A2             >                org     Dict_Ptr
 836+ 6EE1             >
 836+ 6EE1 A0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 836+ 6EE3             >
 836+ 6EE3             >CBUILDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 836+ 6EE3 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 836+ 6EE6             >
 836+ 6EE6             >
 836+ 6EE6             >                endif           ; ok        // for other definitions it "points" the correct handler
 836+ 6EE6             >                // Use of "; ok" to suppress "warning[fwdref]"
 836+ 6EE6             >
 836+ 6EE6             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 837+ 6EE6 F0 73                        dw      CREATE                  // CREATE
 838+ 6EE8 51 68                        dw      EXIT                    // ;
 839+ 6EEA
 840+ 6EEA              //  ______________________________________________________________________
 841+ 6EEA              //
 842+ 6EEA              // _does>_     --
 843+ 6EEA                              Colon_Def C_DOES, "_DOES>_", is_normal
 843+ 6EEA             >                New_Def  C_DOES, "_DOES>_", Enter_Ptr, is_normal ; ok
 843+ 6EEA             >
 843+ 6EEA             >Dict_Ptr        defl    $
 843+ 6EEA             >
 843+ 6EEA             >//              ______________________________________________________________________
 843+ 6EEA             >//              Heap part
 843+ 6EEA             >
 843+ 6EEA             >
 843+ 6EEA             >                org     (Heap_Ptr & $1FFF) + $E000
 843+ E7A2             >
 843+ E7A2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 843+ E7A2             >Latest_Definition defl  Heap_Ptr
 843+ E7A2             >
 843+ E7A2             >                // dummy db directives used to calculate length of namec
 843+ E7A2 5F 44 4F 45 >                db      "_DOES>_"
 843+ E7A6 53 3E 5F    >
 843+ E7A9             >len_NFA         defl    $ - temp_NFA
 843+ E7A9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 843+ E7A2             >
 843+ E7A2 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 843+ E7A3 5F 44 4F 45 >                db      "_DOES>_"               // name string in 7-bit ascii, but
 843+ E7A7 53 3E 5F    >
 843+ E7AA             >                org     $-1                 // alter last byte of Name just above to set
 843+ E7A9 DF          >                db      {b $} | END_BIT     // msb as name end
 843+ E7AA             >
 843+ E7AA 96 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 843+ E7AC             >Prev_Ptr        defl    Heap_Ptr
 843+ E7AC             >
 843+ E7AC             >mirror_Ptr      defl    $
 843+ E7AC             >
 843+ E7AC EC 6E       >                dw      Dict_Ptr + 2        // xt
 843+ E7AE             >Heap_Ptr        defl    $ - $E000           // save current HP
 843+ E7AE             >
 843+ E7AE             >Current_HP      defl  $ - $E000             // used to set HP once!
 843+ E7AE             >
 843+ E7AE             >//              ______________________________________________________________________
 843+ E7AE             >//              Dictionary part
 843+ E7AE             >
 843+ E7AE             >                org     Dict_Ptr
 843+ 6EEA             >
 843+ 6EEA AC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 843+ 6EEC             >
 843+ 6EEC             >C_DOES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 843+ 6EEC CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 843+ 6EEF             >
 843+ 6EEF             >
 843+ 6EEF             >                endif           ; ok        // for other definitions it "points" the correct handler
 843+ 6EEF             >                // Use of "; ok" to suppress "warning[fwdref]"
 843+ 6EEF             >
 843+ 6EEF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 844+ 6EEF 66 68                        dw      R_TO                    // r>
 845+ 6EF1 41 6D                        dw      LATEST                  // latest
 846+ 6EF3 9F 6D                        dw      PFA                     // pfa
 847+ 6EF5 7A 6D B7 68                  dw      CFA, ONE_PLUS           // cfa 1+
 848+ 6EF9 90 69                        dw      STORE                   // !
 849+ 6EFB 51 68                        dw      EXIT                    // ;
 850+ 6EFD
 851+ 6EFD              //  ______________________________________________________________________
 852+ 6EFD              //
 853+ 6EFD              // does>     --
 854+ 6EFD                              Colon_Def DOES_TO, "DOES>", is_immediate
 854+ 6EFD             >                New_Def  DOES_TO, "DOES>", Enter_Ptr, is_immediate ; ok
 854+ 6EFD             >
 854+ 6EFD             >Dict_Ptr        defl    $
 854+ 6EFD             >
 854+ 6EFD             >//              ______________________________________________________________________
 854+ 6EFD             >//              Heap part
 854+ 6EFD             >
 854+ 6EFD             >
 854+ 6EFD             >                org     (Heap_Ptr & $1FFF) + $E000
 854+ E7AE             >
 854+ E7AE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 854+ E7AE             >Latest_Definition defl  Heap_Ptr
 854+ E7AE             >
 854+ E7AE             >                // dummy db directives used to calculate length of namec
 854+ E7AE 44 4F 45 53 >                db      "DOES>"
 854+ E7B2 3E          >
 854+ E7B3             >len_NFA         defl    $ - temp_NFA
 854+ E7B3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 854+ E7AE             >
 854+ E7AE C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 854+ E7AF 44 4F 45 53 >                db      "DOES>"               // name string in 7-bit ascii, but
 854+ E7B3 3E          >
 854+ E7B4             >                org     $-1                 // alter last byte of Name just above to set
 854+ E7B3 BE          >                db      {b $} | END_BIT     // msb as name end
 854+ E7B4             >
 854+ E7B4 A2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 854+ E7B6             >Prev_Ptr        defl    Heap_Ptr
 854+ E7B6             >
 854+ E7B6             >mirror_Ptr      defl    $
 854+ E7B6             >
 854+ E7B6 FF 6E       >                dw      Dict_Ptr + 2        // xt
 854+ E7B8             >Heap_Ptr        defl    $ - $E000           // save current HP
 854+ E7B8             >
 854+ E7B8             >Current_HP      defl  $ - $E000             // used to set HP once!
 854+ E7B8             >
 854+ E7B8             >//              ______________________________________________________________________
 854+ E7B8             >//              Dictionary part
 854+ E7B8             >
 854+ E7B8             >                org     Dict_Ptr
 854+ 6EFD             >
 854+ 6EFD B6 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 854+ 6EFF             >
 854+ 6EFF             >DOES_TO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 854+ 6EFF CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 854+ 6F02             >
 854+ 6F02             >
 854+ 6F02             >                endif           ; ok        // for other definitions it "points" the correct handler
 854+ 6F02             >                // Use of "; ok" to suppress "warning[fwdref]"
 854+ 6F02             >
 854+ 6F02             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 855+ 6F02 41 6E EC 6E                  dw      COMPILE,  C_DOES
 856+ 6F06 A3 63 CD 00                  dw      LIT, $CD, CCOMMA
 856+ 6F0A C2 6B
 857+ 6F0C A3 63 23 6A                  dw      LIT, Enter_Ptr, COMMA
 857+ 6F10 B3 6B
 858+ 6F12 51 68                        dw      EXIT
 859+ 6F14
 860+ 6F14              //  ______________________________________________________________________
 861+ 6F14              //
 862+ 6F14              // count        a -- a2 n
 863+ 6F14              // expects a counted string at address a, returns string address and counter
 864+ 6F14                              New_Def COUNT, "COUNT", is_code, is_normal
 864+ 6F14             >
 864+ 6F14             >Dict_Ptr        defl    $
 864+ 6F14             >
 864+ 6F14             >//              ______________________________________________________________________
 864+ 6F14             >//              Heap part
 864+ 6F14             >
 864+ 6F14             >
 864+ 6F14             >                org     (Heap_Ptr & $1FFF) + $E000
 864+ E7B8             >
 864+ E7B8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 864+ E7B8             >Latest_Definition defl  Heap_Ptr
 864+ E7B8             >
 864+ E7B8             >                // dummy db directives used to calculate length of namec
 864+ E7B8 43 4F 55 4E >                db      "COUNT"
 864+ E7BC 54          >
 864+ E7BD             >len_NFA         defl    $ - temp_NFA
 864+ E7BD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 864+ E7B8             >
 864+ E7B8 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 864+ E7B9 43 4F 55 4E >                db      "COUNT"               // name string in 7-bit ascii, but
 864+ E7BD 54          >
 864+ E7BE             >                org     $-1                 // alter last byte of Name just above to set
 864+ E7BD D4          >                db      {b $} | END_BIT     // msb as name end
 864+ E7BE             >
 864+ E7BE AE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 864+ E7C0             >Prev_Ptr        defl    Heap_Ptr
 864+ E7C0             >
 864+ E7C0             >mirror_Ptr      defl    $
 864+ E7C0             >
 864+ E7C0 16 6F       >                dw      Dict_Ptr + 2        // xt
 864+ E7C2             >Heap_Ptr        defl    $ - $E000           // save current HP
 864+ E7C2             >
 864+ E7C2             >Current_HP      defl  $ - $E000             // used to set HP once!
 864+ E7C2             >
 864+ E7C2             >//              ______________________________________________________________________
 864+ E7C2             >//              Dictionary part
 864+ E7C2             >
 864+ E7C2             >                org     Dict_Ptr
 864+ 6F14             >
 864+ 6F14 C0 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 864+ 6F16             >
 864+ 6F16             >COUNT:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 864+ 6F16 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 864+ 6F16 ~           >
 864+ 6F16 ~           >
 864+ 6F16             >                endif           ; ok        // for other definitions it "points" the correct handler
 864+ 6F16             >                // Use of "; ok" to suppress "warning[fwdref]"
 864+ 6F16             >
 864+ 6F16             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 865+ 6F16 D9                           exx
 866+ 6F17 E1                           pop     hl
 867+ 6F18 5E                           ld      e, (hl)
 868+ 6F19 16 00                        ld      d, 0
 869+ 6F1B 23                           inc     hl
 870+ 6F1C              Count_Here:
 871+ 6F1C E5                           push    hl
 872+ 6F1D D5                           push    de
 873+ 6F1E D9                           exx
 874+ 6F1F                              next
 874+ 6F1F DD E9       >                jp      (ix)
 875+ 6F21              //                pop     hl
 876+ 6F21              //                ld      a, (hl)
 877+ 6F21              //                inc     hl
 878+ 6F21              //                push    hl
 879+ 6F21              //                ld      h, 0
 880+ 6F21              //                ld      l, a
 881+ 6F21              //                push    hl
 882+ 6F21              //                next
 883+ 6F21
 884+ 6F21              //  ______________________________________________________________________
 885+ 6F21              //
 886+ 6F21              // bounds       a n -- a+n n
 887+ 6F21              // given an address and a length ( a n ) calculate the bound addresses
 888+ 6F21              // suitable for DO-LOOP
 889+ 6F21                              New_Def BOUNDS, "BOUNDS", is_code, is_normal
 889+ 6F21             >
 889+ 6F21             >Dict_Ptr        defl    $
 889+ 6F21             >
 889+ 6F21             >//              ______________________________________________________________________
 889+ 6F21             >//              Heap part
 889+ 6F21             >
 889+ 6F21             >
 889+ 6F21             >                org     (Heap_Ptr & $1FFF) + $E000
 889+ E7C2             >
 889+ E7C2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 889+ E7C2             >Latest_Definition defl  Heap_Ptr
 889+ E7C2             >
 889+ E7C2             >                // dummy db directives used to calculate length of namec
 889+ E7C2 42 4F 55 4E >                db      "BOUNDS"
 889+ E7C6 44 53       >
 889+ E7C8             >len_NFA         defl    $ - temp_NFA
 889+ E7C8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 889+ E7C2             >
 889+ E7C2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 889+ E7C3 42 4F 55 4E >                db      "BOUNDS"               // name string in 7-bit ascii, but
 889+ E7C7 44 53       >
 889+ E7C9             >                org     $-1                 // alter last byte of Name just above to set
 889+ E7C8 D3          >                db      {b $} | END_BIT     // msb as name end
 889+ E7C9             >
 889+ E7C9 B8 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 889+ E7CB             >Prev_Ptr        defl    Heap_Ptr
 889+ E7CB             >
 889+ E7CB             >mirror_Ptr      defl    $
 889+ E7CB             >
 889+ E7CB 23 6F       >                dw      Dict_Ptr + 2        // xt
 889+ E7CD             >Heap_Ptr        defl    $ - $E000           // save current HP
 889+ E7CD             >
 889+ E7CD             >Current_HP      defl  $ - $E000             // used to set HP once!
 889+ E7CD             >
 889+ E7CD             >//              ______________________________________________________________________
 889+ E7CD             >//              Dictionary part
 889+ E7CD             >
 889+ E7CD             >                org     Dict_Ptr
 889+ 6F21             >
 889+ 6F21 CB 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 889+ 6F23             >
 889+ 6F23             >BOUNDS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 889+ 6F23 ~           >                call    runcode ; ok        // for primitive definitions  actual code
 889+ 6F23 ~           >
 889+ 6F23 ~           >
 889+ 6F23             >                endif           ; ok        // for other definitions it "points" the correct handler
 889+ 6F23             >                // Use of "; ok" to suppress "warning[fwdref]"
 889+ 6F23             >
 889+ 6F23             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 890+ 6F23 D9                           exx
 891+ 6F24 E1                           pop     hl
 892+ 6F25 D1                           pop     de
 893+ 6F26 19                           add     hl, de
 894+ 6F27 18 F3                        jr      Count_Here
 895+ 6F29                              // push    hl
 896+ 6F29                              // push    de
 897+ 6F29                              // exx
 898+ 6F29                              // next
 899+ 6F29
 900+ 6F29              //  ______________________________________________________________________
 901+ 6F29              //
 902+ 6F29              // leave        --
 903+ 6F29              // Compile (leave) to leave current LOOP and jump just after it
 904+ 6F29                              Colon_Def LEAVE, "LEAVE", is_immediate
 904+ 6F29             >                New_Def  LEAVE, "LEAVE", Enter_Ptr, is_immediate ; ok
 904+ 6F29             >
 904+ 6F29             >Dict_Ptr        defl    $
 904+ 6F29             >
 904+ 6F29             >//              ______________________________________________________________________
 904+ 6F29             >//              Heap part
 904+ 6F29             >
 904+ 6F29             >
 904+ 6F29             >                org     (Heap_Ptr & $1FFF) + $E000
 904+ E7CD             >
 904+ E7CD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 904+ E7CD             >Latest_Definition defl  Heap_Ptr
 904+ E7CD             >
 904+ E7CD             >                // dummy db directives used to calculate length of namec
 904+ E7CD 4C 45 41 56 >                db      "LEAVE"
 904+ E7D1 45          >
 904+ E7D2             >len_NFA         defl    $ - temp_NFA
 904+ E7D2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 904+ E7CD             >
 904+ E7CD C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 904+ E7CE 4C 45 41 56 >                db      "LEAVE"               // name string in 7-bit ascii, but
 904+ E7D2 45          >
 904+ E7D3             >                org     $-1                 // alter last byte of Name just above to set
 904+ E7D2 C5          >                db      {b $} | END_BIT     // msb as name end
 904+ E7D3             >
 904+ E7D3 C2 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 904+ E7D5             >Prev_Ptr        defl    Heap_Ptr
 904+ E7D5             >
 904+ E7D5             >mirror_Ptr      defl    $
 904+ E7D5             >
 904+ E7D5 2B 6F       >                dw      Dict_Ptr + 2        // xt
 904+ E7D7             >Heap_Ptr        defl    $ - $E000           // save current HP
 904+ E7D7             >
 904+ E7D7             >Current_HP      defl  $ - $E000             // used to set HP once!
 904+ E7D7             >
 904+ E7D7             >//              ______________________________________________________________________
 904+ E7D7             >//              Dictionary part
 904+ E7D7             >
 904+ E7D7             >                org     Dict_Ptr
 904+ 6F29             >
 904+ 6F29 D5 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 904+ 6F2B             >
 904+ 6F2B             >LEAVE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 904+ 6F2B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 904+ 6F2E             >
 904+ 6F2E             >
 904+ 6F2E             >                endif           ; ok        // for other definitions it "points" the correct handler
 904+ 6F2E             >                // Use of "; ok" to suppress "warning[fwdref]"
 904+ 6F2E             >
 904+ 6F2E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 905+ 6F2E 41 6E FC 63                  dw      COMPILE, C_LEAVE       // compile (leave)     \ unloop and branch
 906+ 6F32 9D 6B 5B 68                  dw      HERE, TO_R, ZERO, COMMA // here >r 0 ,
 906+ 6F36 78 6A B3 6B
 907+ 6F3A 78 6A 78 6A                  dw      ZERO, ZERO
 908+ 6F3E 38 68 1C 69                  dw      SPFETCH, DUP
 909+ 6F42 CD 68 CD 68                  dw      CELL_PLUS, CELL_PLUS
 910+ 6F46 0C 69                        dw      TUCK
 911+ 6F48 5B 6B 86 69                  dw      CSP, FETCH
 912+ 6F4C 15 69 DC 6B                  dw      SWAP, SUBTRACT
 913+ 6F50 8C 67                        dw      CMOVE
 914+ 6F52 5B 6B 86 69                  dw      CSP, FETCH, CELL_MINUS
 914+ 6F56 D1 68
 915+ 6F58 66 68 F8 68                  dw      R_TO, OVER, STORE
 915+ 6F5C 90 69
 916+ 6F5E D1 68 78 6A                  dw      CELL_MINUS, ZERO
 917+ 6F62 15 69 90 69                  dw      SWAP, STORE
 918+ 6F66 51 68                        dw      EXIT                    // ;
 919+ 6F68
 920+ 6F68              //  ______________________________________________________________________
 921+ 6F68              //
 922+ 6F68              // type         a n --
 923+ 6F68              // Sends to current output channel n characters starting at address a.
 924+ 6F68                              Colon_Def TYPE, "TYPE", is_normal
 924+ 6F68             >                New_Def  TYPE, "TYPE", Enter_Ptr, is_normal ; ok
 924+ 6F68             >
 924+ 6F68             >Dict_Ptr        defl    $
 924+ 6F68             >
 924+ 6F68             >//              ______________________________________________________________________
 924+ 6F68             >//              Heap part
 924+ 6F68             >
 924+ 6F68             >
 924+ 6F68             >                org     (Heap_Ptr & $1FFF) + $E000
 924+ E7D7             >
 924+ E7D7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 924+ E7D7             >Latest_Definition defl  Heap_Ptr
 924+ E7D7             >
 924+ E7D7             >                // dummy db directives used to calculate length of namec
 924+ E7D7 54 59 50 45 >                db      "TYPE"
 924+ E7DB             >len_NFA         defl    $ - temp_NFA
 924+ E7DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 924+ E7D7             >
 924+ E7D7 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 924+ E7D8 54 59 50 45 >                db      "TYPE"               // name string in 7-bit ascii, but
 924+ E7DC             >                org     $-1                 // alter last byte of Name just above to set
 924+ E7DB C5          >                db      {b $} | END_BIT     // msb as name end
 924+ E7DC             >
 924+ E7DC CD 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 924+ E7DE             >Prev_Ptr        defl    Heap_Ptr
 924+ E7DE             >
 924+ E7DE             >mirror_Ptr      defl    $
 924+ E7DE             >
 924+ E7DE 6A 6F       >                dw      Dict_Ptr + 2        // xt
 924+ E7E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 924+ E7E0             >
 924+ E7E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 924+ E7E0             >
 924+ E7E0             >//              ______________________________________________________________________
 924+ E7E0             >//              Dictionary part
 924+ E7E0             >
 924+ E7E0             >                org     Dict_Ptr
 924+ 6F68             >
 924+ 6F68 DE 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 924+ 6F6A             >
 924+ 6F6A             >TYPE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 924+ 6F6A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 924+ 6F6D             >
 924+ 6F6D             >
 924+ 6F6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 924+ 6F6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 924+ 6F6D             >
 924+ 6F6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 925+ 6F6D 23 6F                        dw      BOUNDS                  // bounds
 926+ 6F6F 06 64                        dw      C_Q_DO                  // ?do
 927+ 6F71 0C 00                        dw      Type_Skip - $
 928+ 6F73              Type_Loop:
 929+ 6F73 34 64 9B 69                  dw          I, CFETCH           //      i c@
 930+ 6F77 4F 6C                        dw          EMIT                //      emit
 931+ 6F79 E7 63                        dw      C_LOOP                  // loop
 932+ 6F7B F8 FF                        dw      Type_Loop - $
 933+ 6F7D              Type_Skip:
 934+ 6F7D 51 68                        dw      EXIT                    // ;
 935+ 6F7F
 936+ 6F7F              //  ______________________________________________________________________
 937+ 6F7F              //
 938+ 6F7F              // -trailing    a n1 -- a n2
 939+ 6F7F              // Assumes that an n1 bytes-long string is stored at address a
 940+ 6F7F              // and the string contains a space delimited word,
 941+ 6F7F              // Finds n2 as the position of the first character after the word.
 942+ 6F7F                              Colon_Def LTRAILING, "-TRAILING", is_normal
 942+ 6F7F             >                New_Def  LTRAILING, "-TRAILING", Enter_Ptr, is_normal ; ok
 942+ 6F7F             >
 942+ 6F7F             >Dict_Ptr        defl    $
 942+ 6F7F             >
 942+ 6F7F             >//              ______________________________________________________________________
 942+ 6F7F             >//              Heap part
 942+ 6F7F             >
 942+ 6F7F             >
 942+ 6F7F             >                org     (Heap_Ptr & $1FFF) + $E000
 942+ E7E0             >
 942+ E7E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 942+ E7E0             >Latest_Definition defl  Heap_Ptr
 942+ E7E0             >
 942+ E7E0             >                // dummy db directives used to calculate length of namec
 942+ E7E0 2D 54 52 41 >                db      "-TRAILING"
 942+ E7E4 49 4C 49 4E >
 942+ E7E8 47          >
 942+ E7E9             >len_NFA         defl    $ - temp_NFA
 942+ E7E9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 942+ E7E0             >
 942+ E7E0 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 942+ E7E1 2D 54 52 41 >                db      "-TRAILING"               // name string in 7-bit ascii, but
 942+ E7E5 49 4C 49 4E >
 942+ E7E9 47          >
 942+ E7EA             >                org     $-1                 // alter last byte of Name just above to set
 942+ E7E9 C7          >                db      {b $} | END_BIT     // msb as name end
 942+ E7EA             >
 942+ E7EA D7 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 942+ E7EC             >Prev_Ptr        defl    Heap_Ptr
 942+ E7EC             >
 942+ E7EC             >mirror_Ptr      defl    $
 942+ E7EC             >
 942+ E7EC 81 6F       >                dw      Dict_Ptr + 2        // xt
 942+ E7EE             >Heap_Ptr        defl    $ - $E000           // save current HP
 942+ E7EE             >
 942+ E7EE             >Current_HP      defl  $ - $E000             // used to set HP once!
 942+ E7EE             >
 942+ E7EE             >//              ______________________________________________________________________
 942+ E7EE             >//              Dictionary part
 942+ E7EE             >
 942+ E7EE             >                org     Dict_Ptr
 942+ 6F7F             >
 942+ 6F7F EC 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 942+ 6F81             >
 942+ 6F81             >LTRAILING:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 942+ 6F81 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 942+ 6F84             >
 942+ 6F84             >
 942+ 6F84             >                endif           ; ok        // for other definitions it "points" the correct handler
 942+ 6F84             >                // Use of "; ok" to suppress "warning[fwdref]"
 942+ 6F84             >
 942+ 6F84             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 943+ 6F84 1C 69 78 6A                  dw      DUP, ZERO               // dup 0
 944+ 6F88                                                              // do
 945+ 6F88 06 64                        dw      C_Q_DO
 946+ 6F8A 20 00                        dw      LTrailing_Leave - $
 947+ 6F8C              LTrailing_Loop:
 948+ 6F8C 64 69 9E 68                  dw          TWO_DUP, PLUS       //      2dup +
 949+ 6F90 BE 68                        dw          ONE_SUBTRACT        //      1-
 950+ 6F92 9B 69                        dw          CFETCH              //      c@
 951+ 6F94 9B 6A DC 6B                  dw          BL, SUBTRACT        //      bl -
 952+ 6F98                                                              //      if
 953+ 6F98 F3 63                        dw          ZBRANCH
 954+ 6F9A 0A 00                        dw          LTrailing_Else - $
 955+ 6F9C FC 63                        dw              C_LEAVE         //          leave
 956+ 6F9E 0C 00                        dw              LTrailing_Leave - $
 957+ 6FA0 EF 63                        dw          BRANCH              //      else
 958+ 6FA2 04 00                        dw          LTrailing_Endif - $
 959+ 6FA4              LTrailing_Else:
 960+ 6FA4 BE 68                        dw              ONE_SUBTRACT    //          1-
 961+ 6FA6              LTrailing_Endif:                                //      endif
 962+ 6FA6                                                              // loop
 963+ 6FA6 E7 63                        dw      C_LOOP
 964+ 6FA8 E4 FF                        dw      LTrailing_Loop - $
 965+ 6FAA              LTrailing_Leave:
 966+ 6FAA 51 68                        dw      EXIT                    // ;
 967+ 6FAC
 968+ 6FAC              //  ______________________________________________________________________
 969+ 6FAC              //
 970+ 6FAC              // accept       a n1 -- n2
 971+ 6FAC              // Accepts at most n1 characters from terminal and stores them at address a
 972+ 6FAC              // CR stops input. A 'nul' is added as trailer.
 973+ 6FAC              // n2 is the string length. n2 is kept in span user variable also.
 974+ 6FAC                              Colon_Def ACCEPT, "ACCEPT", is_normal
 974+ 6FAC             >                New_Def  ACCEPT, "ACCEPT", Enter_Ptr, is_normal ; ok
 974+ 6FAC             >
 974+ 6FAC             >Dict_Ptr        defl    $
 974+ 6FAC             >
 974+ 6FAC             >//              ______________________________________________________________________
 974+ 6FAC             >//              Heap part
 974+ 6FAC             >
 974+ 6FAC             >
 974+ 6FAC             >                org     (Heap_Ptr & $1FFF) + $E000
 974+ E7EE             >
 974+ E7EE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 974+ E7EE             >Latest_Definition defl  Heap_Ptr
 974+ E7EE             >
 974+ E7EE             >                // dummy db directives used to calculate length of namec
 974+ E7EE 41 43 43 45 >                db      "ACCEPT"
 974+ E7F2 50 54       >
 974+ E7F4             >len_NFA         defl    $ - temp_NFA
 974+ E7F4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 974+ E7EE             >
 974+ E7EE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 974+ E7EF 41 43 43 45 >                db      "ACCEPT"               // name string in 7-bit ascii, but
 974+ E7F3 50 54       >
 974+ E7F5             >                org     $-1                 // alter last byte of Name just above to set
 974+ E7F4 D4          >                db      {b $} | END_BIT     // msb as name end
 974+ E7F5             >
 974+ E7F5 E0 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 974+ E7F7             >Prev_Ptr        defl    Heap_Ptr
 974+ E7F7             >
 974+ E7F7             >mirror_Ptr      defl    $
 974+ E7F7             >
 974+ E7F7 AE 6F       >                dw      Dict_Ptr + 2        // xt
 974+ E7F9             >Heap_Ptr        defl    $ - $E000           // save current HP
 974+ E7F9             >
 974+ E7F9             >Current_HP      defl  $ - $E000             // used to set HP once!
 974+ E7F9             >
 974+ E7F9             >//              ______________________________________________________________________
 974+ E7F9             >//              Dictionary part
 974+ E7F9             >
 974+ E7F9             >                org     Dict_Ptr
 974+ 6FAC             >
 974+ 6FAC F7 07       >                dw      mirror_Ptr - $E000 + Heap_offset
 974+ 6FAE             >
 974+ 6FAE             >ACCEPT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 974+ 6FAE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 974+ 6FB1             >
 974+ 6FB1             >
 974+ 6FB1             >                endif           ; ok        // for other definitions it "points" the correct handler
 974+ 6FB1             >                // Use of "; ok" to suppress "warning[fwdref]"
 974+ 6FB1             >
 974+ 6FB1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 975+ 6FB1 F8 68 9E 68                  dw      OVER, PLUS, OVER        //                      ( a  n1+a  a )
 975+ 6FB5 F8 68
 976+ 6FB7 78 6A 2C 69                  dw      ZERO, DASH_ROT          //                      ( a  0     a+n1  a )
 977+ 6FBB                                                              // do
 978+ 6FBB 06 64                        dw      C_Q_DO
 979+ 6FBD 8C 00                        dw      Accept_Leave - $
 980+ 6FBF              Accept_Loop:
 981+ 6FBF 2B 66                        dw          CUR                 //      cur             ( a  0 )
 982+ 6FC1 01 69 73 66                  dw          DROP, KEY           //      drop key        ( a  c )
 983+ 6FC5 1C 69                        dw          DUP                 //      dup             ( a  c  c )
 984+ 6FC7 A3 63 0E 00                  dw          LIT, $0E            //      0E
 985+ 6FCB BE 6A                        dw          PLUS_ORIGIN         //      +origin
 986+ 6FCD 86 69                        dw          FETCH               //      @               ( a  c  c  del )
 987+ 6FCF E8 6B                        dw          EQUALS              //      =               ( a  c  c==del )
 988+ 6FD1                                                              //      if
 989+ 6FD1 F3 63                        dw          ZBRANCH
 990+ 6FD3 2C 00                        dw          Accept_Else_0 - $
 991+ 6FD5 01 69                        dw              DROP            //          drop        ( a  )
 992+ 6FD7 1C 69 34 64                  dw              DUP, I, EQUALS  //          dup i =     ( a  a==i )
 992+ 6FDB E8 6B
 993+ 6FDD 7F 6A 0B 68                  dw              ONE, AND_OP     //          1 and
 994+ 6FE1 1C 69                        dw              DUP             //          dup         ( a  a==i  a==i )
 995+ 6FE3 66 68                        dw              R_TO            //          r> 2 - + r>
 996+ 6FE5 D9 68 9E 68                  dw              TWO_MINUS, PLUS //      ( decrement index by 1 or 2 )
 997+ 6FE9 5B 68                        dw              TO_R            //
 998+ 6FEB                                                              //          if
 999+ 6FEB F3 63                        dw              ZBRANCH
1000+ 6FED 0A 00                        dw              Accept_Else_1 - $
1001+ 6FEF A3 63 07 00                  dw                  LIT, 7      //              7       ( a  7 )
1002+ 6FF3                                                              //          else
1003+ 6FF3 EF 63                        dw              BRANCH
1004+ 6FF5 06 00                        dw              Accept_Endif_1 - $
1005+ 6FF7              Accept_Else_1:
1006+ 6FF7 A3 63 08 00                  dw                  LIT, 8      //              8       ( a  8 )
1007+ 6FFB              Accept_Endif_1:                                 //          endif
1008+ 6FFB EF 63                        dw          BRANCH
1009+ 6FFD 2E 00                        dw          Accept_Endif_0 - $
1010+ 6FFF              Accept_Else_0:                                  //      else
1011+ 6FFF 1C 69                        dw              DUP             //          dup         ( a  c  c )
1012+ 7001 A3 63 0D 00                  dw              LIT, 13         //          13
1013+ 7005 E8 6B                        dw              EQUALS          //          =           ( a  c  c==CR )
1014+ 7007                                                              //          if
1015+ 7007 F3 63                        dw              ZBRANCH
1016+ 7009 0C 00                        dw              Accept_Else_2 - $
1017+ 700B 01 69 9B 6A                  dw                  DROP, BL    //              drop bl ( a  bl )
1018+ 700F 78 6A                        dw                  ZERO        //              0       ( a  c  0 )
1019+ 7011                                                              //          else
1020+ 7011 EF 63                        dw              BRANCH
1021+ 7013 04 00                        dw              Accept_Endif_2 - $
1022+ 7015              Accept_Else_2:
1023+ 7015 1C 69                        dw                  DUP         //              dup     ( a  c  c )
1024+ 7017                                                              //          endif
1025+ 7017              Accept_Endif_2:
1026+ 7017 34 64 A4 69                  dw              I, CSTORE       //          i           ( a  c )
1027+ 701B 1C 69 9B 6A                  dw              DUP, BL, LESS   //          dup bl <    ( a  c  c<BL )
1027+ 701F 01 6C
1028+ 7021                                                              //          if
1029+ 7021 F3 63                        dw              ZBRANCH
1030+ 7023 08 00                        dw              Accept_Endif_3 - $
1031+ 7025 66 68                        dw                  R_TO        //              r>
1032+ 7027 BE 68                        dw                  ONE_SUBTRACT//              1-
1033+ 7029 5B 68                        dw                  TO_R        //              >r
1034+ 702B                                                              //          endif
1035+ 702B              Accept_Endif_3:
1036+ 702B              Accept_Endif_0:                                 //      endif
1037+ 702B 4F 6C                        dw          EMIT                //      emit            ( a )
1038+ 702D
1039+ 702D 78 6A 34 64                  dw          ZERO, I, ONE_PLUS   //      0 i 1+ !
1039+ 7031 B7 68
1040+ 7033 90 69                        dw          STORE               //          ( zero pad )
1041+ 7035 34 64                        dw          I                   //      i
1042+ 7037 34 64 9B 69                  dw          I, CFETCH, ZEQUAL   //      i c@ 0= if
1042+ 703B 76 68
1043+ 703D F3 63                        dw          ZBRANCH             //
1044+ 703F 06 00                        dw              Accept_Endif_4 - $
1045+ 7041 FC 63                        dw                  C_LEAVE     //              leave
1046+ 7043 06 00                        dw                  Accept_Leave - $
1047+ 7045              Accept_Endif_4:                                 //      endif
1048+ 7045                                                              // loop
1049+ 7045 E7 63                        dw      C_LOOP
1050+ 7047 78 FF                        dw      Accept_Loop - $
1051+ 7049              Accept_Leave:
1052+ 7049 15 69 DC 6B                  dw      SWAP, SUBTRACT          // swap -
1053+ 704D B7 68                        dw      ONE_PLUS                // 1+
1054+ 704F 1C 69 8B 6B                  dw      DUP, SPAN, STORE        // dup span !
1054+ 7053 90 69
1055+ 7055 51 68                        dw      EXIT                    // ;
1056+ 7057
1057+ 7057              //  ______________________________________________________________________
1058+ 7057              //
1059+ 7057              // expect      a n --
1060+ 7057              // Accepts at most n1 characters from terminal and stores them at address a
1061+ 7057              // CR stops input. A 'nul' is added as trailer.
1062+ 7057              // n2 is the string length. n2 is kept in span user variable also.
1063+ 7057              //              Colon_Def EXPECT, "EXPECT", is_normal
1064+ 7057              //              dw      ACCEPT, DROP            // accept drop
1065+ 7057              //              dw      EXIT                    // ;
1066+ 7057
1067+ 7057              //  ______________________________________________________________________
1068+ 7057              //
1069+ 7057              // query        --
1070+ 7057              // Accept at most 80 character from console. CR stops.
1071+ 7057              // Text is stored in TIB. Variable IN is zeroed.
1072+ 7057                              Colon_Def QUERY, "QUERY", is_normal
1072+ 7057             >                New_Def  QUERY, "QUERY", Enter_Ptr, is_normal ; ok
1072+ 7057             >
1072+ 7057             >Dict_Ptr        defl    $
1072+ 7057             >
1072+ 7057             >//              ______________________________________________________________________
1072+ 7057             >//              Heap part
1072+ 7057             >
1072+ 7057             >
1072+ 7057             >                org     (Heap_Ptr & $1FFF) + $E000
1072+ E7F9             >
1072+ E7F9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1072+ E7F9             >Latest_Definition defl  Heap_Ptr
1072+ E7F9             >
1072+ E7F9             >                // dummy db directives used to calculate length of namec
1072+ E7F9 51 55 45 52 >                db      "QUERY"
1072+ E7FD 59          >
1072+ E7FE             >len_NFA         defl    $ - temp_NFA
1072+ E7FE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1072+ E7F9             >
1072+ E7F9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1072+ E7FA 51 55 45 52 >                db      "QUERY"               // name string in 7-bit ascii, but
1072+ E7FE 59          >
1072+ E7FF             >                org     $-1                 // alter last byte of Name just above to set
1072+ E7FE D9          >                db      {b $} | END_BIT     // msb as name end
1072+ E7FF             >
1072+ E7FF EE 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1072+ E801             >Prev_Ptr        defl    Heap_Ptr
1072+ E801             >
1072+ E801             >mirror_Ptr      defl    $
1072+ E801             >
1072+ E801 59 70       >                dw      Dict_Ptr + 2        // xt
1072+ E803             >Heap_Ptr        defl    $ - $E000           // save current HP
1072+ E803             >
1072+ E803             >Current_HP      defl  $ - $E000             // used to set HP once!
1072+ E803             >
1072+ E803             >//              ______________________________________________________________________
1072+ E803             >//              Dictionary part
1072+ E803             >
1072+ E803             >                org     Dict_Ptr
1072+ 7057             >
1072+ 7057 01 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1072+ 7059             >
1072+ 7059             >QUERY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1072+ 7059 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1072+ 705C             >
1072+ 705C             >
1072+ 705C             >                endif           ; ok        // for other definitions it "points" the correct handler
1072+ 705C             >                // Use of "; ok" to suppress "warning[fwdref]"
1072+ 705C             >
1072+ 705C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1073+ 705C DD 6A 86 69                  dw      TIB, FETCH              // tib @
1074+ 7060 A3 63 50 00                  dw      LIT, 80                 // 80
1075+ 7064 AE 6F 01 69                  dw      ACCEPT, DROP            // accept drop
1076+ 7068 78 6A 1F 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
1076+ 706C 90 69
1077+ 706E 51 68                        dw      EXIT                    // ;
1078+ 7070
1079+ 7070              //  ______________________________________________________________________
1080+ 7070              //
1081+ 7070              // fill        a n c --
1082+ 7070              // If n > 0, fills n locations starting from address a with the value c.
1083+ 7070                              New_Def FILL, "FILL", is_code, is_normal
1083+ 7070             >
1083+ 7070             >Dict_Ptr        defl    $
1083+ 7070             >
1083+ 7070             >//              ______________________________________________________________________
1083+ 7070             >//              Heap part
1083+ 7070             >
1083+ 7070             >
1083+ 7070             >                org     (Heap_Ptr & $1FFF) + $E000
1083+ E803             >
1083+ E803             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1083+ E803             >Latest_Definition defl  Heap_Ptr
1083+ E803             >
1083+ E803             >                // dummy db directives used to calculate length of namec
1083+ E803 46 49 4C 4C >                db      "FILL"
1083+ E807             >len_NFA         defl    $ - temp_NFA
1083+ E807             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1083+ E803             >
1083+ E803 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1083+ E804 46 49 4C 4C >                db      "FILL"               // name string in 7-bit ascii, but
1083+ E808             >                org     $-1                 // alter last byte of Name just above to set
1083+ E807 CC          >                db      {b $} | END_BIT     // msb as name end
1083+ E808             >
1083+ E808 F9 07       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1083+ E80A             >Prev_Ptr        defl    Heap_Ptr
1083+ E80A             >
1083+ E80A             >mirror_Ptr      defl    $
1083+ E80A             >
1083+ E80A 72 70       >                dw      Dict_Ptr + 2        // xt
1083+ E80C             >Heap_Ptr        defl    $ - $E000           // save current HP
1083+ E80C             >
1083+ E80C             >Current_HP      defl  $ - $E000             // used to set HP once!
1083+ E80C             >
1083+ E80C             >//              ______________________________________________________________________
1083+ E80C             >//              Dictionary part
1083+ E80C             >
1083+ E80C             >                org     Dict_Ptr
1083+ 7070             >
1083+ 7070 0A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1083+ 7072             >
1083+ 7072             >FILL:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
1083+ 7072 ~           >                call    runcode ; ok        // for primitive definitions  actual code
1083+ 7072 ~           >
1083+ 7072 ~           >
1083+ 7072             >                endif           ; ok        // for other definitions it "points" the correct handler
1083+ 7072             >                // Use of "; ok" to suppress "warning[fwdref]"
1083+ 7072             >
1083+ 7072             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1084+ 7072 D9                           exx
1085+ 7073 D1                           pop     de                  // de has character
1086+ 7074 C1                           pop     bc                  // bc has counter
1087+ 7075 E1                           pop     hl                  // hl has address, save Instruction Pointer
1088+ 7076              Fill_Loop:
1089+ 7076 78                               ld      a, b
1090+ 7077 B1                               or      c
1091+ 7078 28 05                        jr      z, Fill_While_End
1092+ 707A 73                               ld      (hl), e
1093+ 707B 0B                               dec     bc
1094+ 707C 23                               inc     hl
1095+ 707D 18 F7                        jr      Fill_Loop
1096+ 707F              Fill_While_End:
1097+ 707F D9                           exx
1098+ 7080                              next
1098+ 7080 DD E9       >                jp      (ix)
1099+ 7082
1100+ 7082              //  ______________________________________________________________________
1101+ 7082              //
1102+ 7082              // erase        a n --
1103+ 7082              // If n > 0, fills n locations starting from address a with 'nul' characters.
1104+ 7082                              Colon_Def ERASE, "ERASE", is_normal
1104+ 7082             >                New_Def  ERASE, "ERASE", Enter_Ptr, is_normal ; ok
1104+ 7082             >
1104+ 7082             >Dict_Ptr        defl    $
1104+ 7082             >
1104+ 7082             >//              ______________________________________________________________________
1104+ 7082             >//              Heap part
1104+ 7082             >
1104+ 7082             >
1104+ 7082             >                org     (Heap_Ptr & $1FFF) + $E000
1104+ E80C             >
1104+ E80C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1104+ E80C             >Latest_Definition defl  Heap_Ptr
1104+ E80C             >
1104+ E80C             >                // dummy db directives used to calculate length of namec
1104+ E80C 45 52 41 53 >                db      "ERASE"
1104+ E810 45          >
1104+ E811             >len_NFA         defl    $ - temp_NFA
1104+ E811             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1104+ E80C             >
1104+ E80C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1104+ E80D 45 52 41 53 >                db      "ERASE"               // name string in 7-bit ascii, but
1104+ E811 45          >
1104+ E812             >                org     $-1                 // alter last byte of Name just above to set
1104+ E811 C5          >                db      {b $} | END_BIT     // msb as name end
1104+ E812             >
1104+ E812 03 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1104+ E814             >Prev_Ptr        defl    Heap_Ptr
1104+ E814             >
1104+ E814             >mirror_Ptr      defl    $
1104+ E814             >
1104+ E814 84 70       >                dw      Dict_Ptr + 2        // xt
1104+ E816             >Heap_Ptr        defl    $ - $E000           // save current HP
1104+ E816             >
1104+ E816             >Current_HP      defl  $ - $E000             // used to set HP once!
1104+ E816             >
1104+ E816             >//              ______________________________________________________________________
1104+ E816             >//              Dictionary part
1104+ E816             >
1104+ E816             >                org     Dict_Ptr
1104+ 7082             >
1104+ 7082 14 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1104+ 7084             >
1104+ 7084             >ERASE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1104+ 7084 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1104+ 7087             >
1104+ 7087             >
1104+ 7087             >                endif           ; ok        // for other definitions it "points" the correct handler
1104+ 7087             >                // Use of "; ok" to suppress "warning[fwdref]"
1104+ 7087             >
1104+ 7087             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1105+ 7087 78 6A 72 70                  dw      ZERO, FILL              // 0 fill
1106+ 708B 51 68                        dw      EXIT                    // ;
1107+ 708D
1108+ 708D              //  ______________________________________________________________________
1109+ 708D              //
1110+ 708D              // blank        a n --
1111+ 708D              // If n > 0, fills n locations starting from address a with 'nul' characters.
1112+ 708D                              Colon_Def BLANK, "BLANK", is_normal
1112+ 708D             >                New_Def  BLANK, "BLANK", Enter_Ptr, is_normal ; ok
1112+ 708D             >
1112+ 708D             >Dict_Ptr        defl    $
1112+ 708D             >
1112+ 708D             >//              ______________________________________________________________________
1112+ 708D             >//              Heap part
1112+ 708D             >
1112+ 708D             >
1112+ 708D             >                org     (Heap_Ptr & $1FFF) + $E000
1112+ E816             >
1112+ E816             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1112+ E816             >Latest_Definition defl  Heap_Ptr
1112+ E816             >
1112+ E816             >                // dummy db directives used to calculate length of namec
1112+ E816 42 4C 41 4E >                db      "BLANK"
1112+ E81A 4B          >
1112+ E81B             >len_NFA         defl    $ - temp_NFA
1112+ E81B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1112+ E816             >
1112+ E816 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1112+ E817 42 4C 41 4E >                db      "BLANK"               // name string in 7-bit ascii, but
1112+ E81B 4B          >
1112+ E81C             >                org     $-1                 // alter last byte of Name just above to set
1112+ E81B CB          >                db      {b $} | END_BIT     // msb as name end
1112+ E81C             >
1112+ E81C 0C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1112+ E81E             >Prev_Ptr        defl    Heap_Ptr
1112+ E81E             >
1112+ E81E             >mirror_Ptr      defl    $
1112+ E81E             >
1112+ E81E 8F 70       >                dw      Dict_Ptr + 2        // xt
1112+ E820             >Heap_Ptr        defl    $ - $E000           // save current HP
1112+ E820             >
1112+ E820             >Current_HP      defl  $ - $E000             // used to set HP once!
1112+ E820             >
1112+ E820             >//              ______________________________________________________________________
1112+ E820             >//              Dictionary part
1112+ E820             >
1112+ E820             >                org     Dict_Ptr
1112+ 708D             >
1112+ 708D 1E 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1112+ 708F             >
1112+ 708F             >BLANK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1112+ 708F CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1112+ 7092             >
1112+ 7092             >
1112+ 7092             >                endif           ; ok        // for other definitions it "points" the correct handler
1112+ 7092             >                // Use of "; ok" to suppress "warning[fwdref]"
1112+ 7092             >
1112+ 7092             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1113+ 7092 9B 6A 72 70                  dw      BL, FILL                // bl fill
1114+ 7096 51 68                        dw      EXIT                    // ;
1115+ 7098
1116+ 7098              //  ______________________________________________________________________
1117+ 7098              //
1118+ 7098              // hold         c --
1119+ 7098              // Used between <# and #> to insert a character c in numeric formatting.
1120+ 7098                              Colon_Def HOLD, "HOLD", is_normal
1120+ 7098             >                New_Def  HOLD, "HOLD", Enter_Ptr, is_normal ; ok
1120+ 7098             >
1120+ 7098             >Dict_Ptr        defl    $
1120+ 7098             >
1120+ 7098             >//              ______________________________________________________________________
1120+ 7098             >//              Heap part
1120+ 7098             >
1120+ 7098             >
1120+ 7098             >                org     (Heap_Ptr & $1FFF) + $E000
1120+ E820             >
1120+ E820             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1120+ E820             >Latest_Definition defl  Heap_Ptr
1120+ E820             >
1120+ E820             >                // dummy db directives used to calculate length of namec
1120+ E820 48 4F 4C 44 >                db      "HOLD"
1120+ E824             >len_NFA         defl    $ - temp_NFA
1120+ E824             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1120+ E820             >
1120+ E820 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1120+ E821 48 4F 4C 44 >                db      "HOLD"               // name string in 7-bit ascii, but
1120+ E825             >                org     $-1                 // alter last byte of Name just above to set
1120+ E824 C4          >                db      {b $} | END_BIT     // msb as name end
1120+ E825             >
1120+ E825 16 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1120+ E827             >Prev_Ptr        defl    Heap_Ptr
1120+ E827             >
1120+ E827             >mirror_Ptr      defl    $
1120+ E827             >
1120+ E827 9A 70       >                dw      Dict_Ptr + 2        // xt
1120+ E829             >Heap_Ptr        defl    $ - $E000           // save current HP
1120+ E829             >
1120+ E829             >Current_HP      defl  $ - $E000             // used to set HP once!
1120+ E829             >
1120+ E829             >//              ______________________________________________________________________
1120+ E829             >//              Dictionary part
1120+ E829             >
1120+ E829             >                org     Dict_Ptr
1120+ 7098             >
1120+ 7098 27 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1120+ 709A             >
1120+ 709A             >HOLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1120+ 709A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1120+ 709D             >
1120+ 709D             >
1120+ 709D             >                endif           ; ok        // for other definitions it "points" the correct handler
1120+ 709D             >                // Use of "; ok" to suppress "warning[fwdref]"
1120+ 709D             >
1120+ 709D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1121+ 709D 94 6A                        dw      NEG_ONE                 // -1
1122+ 709F 67 6B 6E 69                  dw      HLD, PLUSSTORE          // hld +!
1123+ 70A3 67 6B 86 69                  dw      HLD, FETCH, CSTORE      // hld @ c!
1123+ 70A7 A4 69
1124+ 70A9 51 68                        dw      EXIT                    // ;
1125+ 70AB
1126+ 70AB              //  ______________________________________________________________________
1127+ 70AB              //
1128+ 70AB              // pad         -- a
1129+ 70AB              // leaves the buffer text address. This is at a fixed distance over HERE.
1130+ 70AB                              Colon_Def PAD, "PAD", is_normal
1130+ 70AB             >                New_Def  PAD, "PAD", Enter_Ptr, is_normal ; ok
1130+ 70AB             >
1130+ 70AB             >Dict_Ptr        defl    $
1130+ 70AB             >
1130+ 70AB             >//              ______________________________________________________________________
1130+ 70AB             >//              Heap part
1130+ 70AB             >
1130+ 70AB             >
1130+ 70AB             >                org     (Heap_Ptr & $1FFF) + $E000
1130+ E829             >
1130+ E829             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1130+ E829             >Latest_Definition defl  Heap_Ptr
1130+ E829             >
1130+ E829             >                // dummy db directives used to calculate length of namec
1130+ E829 50 41 44    >                db      "PAD"
1130+ E82C             >len_NFA         defl    $ - temp_NFA
1130+ E82C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1130+ E829             >
1130+ E829 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1130+ E82A 50 41 44    >                db      "PAD"               // name string in 7-bit ascii, but
1130+ E82D             >                org     $-1                 // alter last byte of Name just above to set
1130+ E82C C4          >                db      {b $} | END_BIT     // msb as name end
1130+ E82D             >
1130+ E82D 20 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1130+ E82F             >Prev_Ptr        defl    Heap_Ptr
1130+ E82F             >
1130+ E82F             >mirror_Ptr      defl    $
1130+ E82F             >
1130+ E82F AD 70       >                dw      Dict_Ptr + 2        // xt
1130+ E831             >Heap_Ptr        defl    $ - $E000           // save current HP
1130+ E831             >
1130+ E831             >Current_HP      defl  $ - $E000             // used to set HP once!
1130+ E831             >
1130+ E831             >//              ______________________________________________________________________
1130+ E831             >//              Dictionary part
1130+ E831             >
1130+ E831             >                org     Dict_Ptr
1130+ 70AB             >
1130+ 70AB 2F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1130+ 70AD             >
1130+ 70AD             >PAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1130+ 70AD CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1130+ 70B0             >
1130+ 70B0             >
1130+ 70B0             >                endif           ; ok        // for other definitions it "points" the correct handler
1130+ 70B0             >                // Use of "; ok" to suppress "warning[fwdref]"
1130+ 70B0             >
1130+ 70B0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1131+ 70B0 9D 6B                        dw      HERE                    // here
1132+ 70B2 A3 63 44 00                  dw      LIT, 68                 // 68
1133+ 70B6 9E 68                        dw      PLUS                    // +
1134+ 70B8 51 68                        dw      EXIT                    // ;
1135+ 70BA
1136+ 70BA              //  ______________________________________________________________________
1137+ 70BA              //
1138+ 70BA              // word         c -- a
1139+ 70BA              // reads characters from input streams until it encouners a c delimiter.
1140+ 70BA              // Stores that packet so it starts from HERE
1141+ 70BA              // WORD leaves a counter as first byte and ends the packet with two spaces.
1142+ 70BA              // Other occurrences of c are ignored.
1143+ 70BA              // If BLK is zero, text is taken from terminal buffer TIB.
1144+ 70BA              // Otherwise text is taken from the disk-block given by BLK.
1145+ 70BA              // "in" variable is incremented of the number of character read.
1146+ 70BA              // The number of characters read is given by ENCLOSE.
1147+ 70BA                              Colon_Def WORD, "WORD", is_normal
1147+ 70BA             >                New_Def  WORD, "WORD", Enter_Ptr, is_normal ; ok
1147+ 70BA             >
1147+ 70BA             >Dict_Ptr        defl    $
1147+ 70BA             >
1147+ 70BA             >//              ______________________________________________________________________
1147+ 70BA             >//              Heap part
1147+ 70BA             >
1147+ 70BA             >
1147+ 70BA             >                org     (Heap_Ptr & $1FFF) + $E000
1147+ E831             >
1147+ E831             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1147+ E831             >Latest_Definition defl  Heap_Ptr
1147+ E831             >
1147+ E831             >                // dummy db directives used to calculate length of namec
1147+ E831 57 4F 52 44 >                db      "WORD"
1147+ E835             >len_NFA         defl    $ - temp_NFA
1147+ E835             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1147+ E831             >
1147+ E831 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1147+ E832 57 4F 52 44 >                db      "WORD"               // name string in 7-bit ascii, but
1147+ E836             >                org     $-1                 // alter last byte of Name just above to set
1147+ E835 C4          >                db      {b $} | END_BIT     // msb as name end
1147+ E836             >
1147+ E836 29 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1147+ E838             >Prev_Ptr        defl    Heap_Ptr
1147+ E838             >
1147+ E838             >mirror_Ptr      defl    $
1147+ E838             >
1147+ E838 BC 70       >                dw      Dict_Ptr + 2        // xt
1147+ E83A             >Heap_Ptr        defl    $ - $E000           // save current HP
1147+ E83A             >
1147+ E83A             >Current_HP      defl  $ - $E000             // used to set HP once!
1147+ E83A             >
1147+ E83A             >//              ______________________________________________________________________
1147+ E83A             >//              Dictionary part
1147+ E83A             >
1147+ E83A             >                org     Dict_Ptr
1147+ 70BA             >
1147+ 70BA 38 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1147+ 70BC             >
1147+ 70BC             >WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1147+ 70BC CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1147+ 70BF             >
1147+ 70BF             >
1147+ 70BF             >                endif           ; ok        // for other definitions it "points" the correct handler
1147+ 70BF             >                // Use of "; ok" to suppress "warning[fwdref]"
1147+ 70BF             >
1147+ 70BF             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1148+ 70BF 19 6B 86 69                  dw      BLK, FETCH              // blk @
1149+ 70C3                                                              // if
1150+ 70C3 F3 63                        dw      ZBRANCH
1151+ 70C5 0C 00                        dw      Word_Else - $
1152+ 70C7 19 6B 86 69                  dw          BLK, FETCH          //      blk @
1153+ 70CB 76 79                        dw          BLOCK               //      block ( forward )
1154+ 70CD                                                              // else
1155+ 70CD EF 63                        dw      BRANCH
1156+ 70CF 06 00                        dw      Word_Endif - $
1157+ 70D1              Word_Else:
1158+ 70D1 DD 6A 86 69                  dw         TIB, FETCH           //      tib @
1159+ 70D5              Word_Endif:                                     // endif
1160+ 70D5 1F 6B 86 69                  dw      TO_IN, FETCH, PLUS      // >in @ +
1160+ 70D9 9E 68
1161+ 70DB 15 69 22 65                  dw      SWAP, ENCLOSE           // swap enclose
1162+ 70DF 9D 6B A3 63                  dw      HERE, LIT, 34, BLANK    // here 34 blank
1162+ 70E3 22 00 8F 70
1163+ 70E7 1F 6B 6E 69                  dw      TO_IN, PLUSSTORE        // >in @ +
1164+ 70EB F8 68 DC 6B                  dw      OVER, SUBTRACT, TO_R    // over - >r
1164+ 70EF 5B 68
1165+ 70F1 71 68 9D 6B                  dw      R_OP, HERE, CSTORE      // r here c!
1165+ 70F5 A4 69
1166+ 70F7 9E 68                        dw      PLUS                    // +
1167+ 70F9 9D 6B B7 68                  dw      HERE, ONE_PLUS, R_TO    // here 1+ r>
1167+ 70FD 66 68
1168+ 70FF 8C 67                        dw      CMOVE                   // cmove
1169+ 7101 9D 6B                        dw      HERE                    // here
1170+ 7103 51 68                        dw      EXIT                    // ;
1171+ 7105
1172+ 7105              //  ______________________________________________________________________
1173+ 7105              //
1174+ 7105              // (.")         --
1175+ 7105              // Direct procedure compiled by ." and  .(  It executes TYPE.
1176+ 7105                              Colon_Def C_DOT_QUOTE, '(.")', is_normal
1176+ 7105             >                New_Def  C_DOT_QUOTE, '(.")', Enter_Ptr, is_normal ; ok
1176+ 7105             >
1176+ 7105             >Dict_Ptr        defl    $
1176+ 7105             >
1176+ 7105             >//              ______________________________________________________________________
1176+ 7105             >//              Heap part
1176+ 7105             >
1176+ 7105             >
1176+ 7105             >                org     (Heap_Ptr & $1FFF) + $E000
1176+ E83A             >
1176+ E83A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1176+ E83A             >Latest_Definition defl  Heap_Ptr
1176+ E83A             >
1176+ E83A             >                // dummy db directives used to calculate length of namec
1176+ E83A 28 2E 22 29 >                db      '(.")'
1176+ E83E             >len_NFA         defl    $ - temp_NFA
1176+ E83E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1176+ E83A             >
1176+ E83A 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1176+ E83B 28 2E 22 29 >                db      '(.")'               // name string in 7-bit ascii, but
1176+ E83F             >                org     $-1                 // alter last byte of Name just above to set
1176+ E83E A9          >                db      {b $} | END_BIT     // msb as name end
1176+ E83F             >
1176+ E83F 31 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1176+ E841             >Prev_Ptr        defl    Heap_Ptr
1176+ E841             >
1176+ E841             >mirror_Ptr      defl    $
1176+ E841             >
1176+ E841 07 71       >                dw      Dict_Ptr + 2        // xt
1176+ E843             >Heap_Ptr        defl    $ - $E000           // save current HP
1176+ E843             >
1176+ E843             >Current_HP      defl  $ - $E000             // used to set HP once!
1176+ E843             >
1176+ E843             >//              ______________________________________________________________________
1176+ E843             >//              Dictionary part
1176+ E843             >
1176+ E843             >                org     Dict_Ptr
1176+ 7105             >
1176+ 7105 41 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1176+ 7107             >
1176+ 7107             >C_DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1176+ 7107 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1176+ 710A             >
1176+ 710A             >
1176+ 710A             >                endif           ; ok        // for other definitions it "points" the correct handler
1176+ 710A             >                // Use of "; ok" to suppress "warning[fwdref]"
1176+ 710A             >
1176+ 710A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1177+ 710A 71 68 16 6F                  dw      R_OP, COUNT             // r count
1178+ 710E 1C 69 B7 68                  dw      DUP, ONE_PLUS           // dup 1+
1179+ 7112 66 68 9E 68                  dw      R_TO, PLUS, TO_R        // r> + >r  ( advance IP )
1179+ 7116 5B 68
1180+ 7118 6A 6F                        dw      TYPE                    // type
1181+ 711A 51 68                        dw      EXIT                    // ;
1182+ 711C
1183+ 711C              //  ______________________________________________________________________
1184+ 711C              //
1185+ 711C              // char         -- c
1186+ 711C              // get first character from next input word
1187+ 711C                              Colon_Def CHAR,  "CHAR", is_normal
1187+ 711C             >                New_Def  CHAR, "CHAR", Enter_Ptr, is_normal ; ok
1187+ 711C             >
1187+ 711C             >Dict_Ptr        defl    $
1187+ 711C             >
1187+ 711C             >//              ______________________________________________________________________
1187+ 711C             >//              Heap part
1187+ 711C             >
1187+ 711C             >
1187+ 711C             >                org     (Heap_Ptr & $1FFF) + $E000
1187+ E843             >
1187+ E843             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1187+ E843             >Latest_Definition defl  Heap_Ptr
1187+ E843             >
1187+ E843             >                // dummy db directives used to calculate length of namec
1187+ E843 43 48 41 52 >                db      "CHAR"
1187+ E847             >len_NFA         defl    $ - temp_NFA
1187+ E847             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1187+ E843             >
1187+ E843 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1187+ E844 43 48 41 52 >                db      "CHAR"               // name string in 7-bit ascii, but
1187+ E848             >                org     $-1                 // alter last byte of Name just above to set
1187+ E847 D2          >                db      {b $} | END_BIT     // msb as name end
1187+ E848             >
1187+ E848 3A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1187+ E84A             >Prev_Ptr        defl    Heap_Ptr
1187+ E84A             >
1187+ E84A             >mirror_Ptr      defl    $
1187+ E84A             >
1187+ E84A 1E 71       >                dw      Dict_Ptr + 2        // xt
1187+ E84C             >Heap_Ptr        defl    $ - $E000           // save current HP
1187+ E84C             >
1187+ E84C             >Current_HP      defl  $ - $E000             // used to set HP once!
1187+ E84C             >
1187+ E84C             >//              ______________________________________________________________________
1187+ E84C             >//              Dictionary part
1187+ E84C             >
1187+ E84C             >                org     Dict_Ptr
1187+ 711C             >
1187+ 711C 4A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1187+ 711E             >
1187+ 711E             >CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1187+ 711E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1187+ 7121             >
1187+ 7121             >
1187+ 7121             >                endif           ; ok        // for other definitions it "points" the correct handler
1187+ 7121             >                // Use of "; ok" to suppress "warning[fwdref]"
1187+ 7121             >
1187+ 7121             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1188+ 7121 9B 6A BC 70                  dw      BL, WORD                // bl word
1189+ 7125 B7 68 9B 69                  dw      ONE_PLUS, CFETCH        // 1+ c@
1190+ 7129 51 68                        dw      EXIT                    // ;
1191+ 712B
1192+ 712B              //  ______________________________________________________________________
1193+ 712B              //
1194+ 712B              // ,"           --
1195+ 712B              // compiles a string terminated by " as a counted string from next input stream
1196+ 712B                              Colon_Def COMMA_QUOTE,  ',"', is_normal
1196+ 712B             >                New_Def  COMMA_QUOTE, ',"', Enter_Ptr, is_normal ; ok
1196+ 712B             >
1196+ 712B             >Dict_Ptr        defl    $
1196+ 712B             >
1196+ 712B             >//              ______________________________________________________________________
1196+ 712B             >//              Heap part
1196+ 712B             >
1196+ 712B             >
1196+ 712B             >                org     (Heap_Ptr & $1FFF) + $E000
1196+ E84C             >
1196+ E84C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1196+ E84C             >Latest_Definition defl  Heap_Ptr
1196+ E84C             >
1196+ E84C             >                // dummy db directives used to calculate length of namec
1196+ E84C 2C 22       >                db      ',"'
1196+ E84E             >len_NFA         defl    $ - temp_NFA
1196+ E84E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1196+ E84C             >
1196+ E84C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1196+ E84D 2C 22       >                db      ',"'               // name string in 7-bit ascii, but
1196+ E84F             >                org     $-1                 // alter last byte of Name just above to set
1196+ E84E A2          >                db      {b $} | END_BIT     // msb as name end
1196+ E84F             >
1196+ E84F 43 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1196+ E851             >Prev_Ptr        defl    Heap_Ptr
1196+ E851             >
1196+ E851             >mirror_Ptr      defl    $
1196+ E851             >
1196+ E851 2D 71       >                dw      Dict_Ptr + 2        // xt
1196+ E853             >Heap_Ptr        defl    $ - $E000           // save current HP
1196+ E853             >
1196+ E853             >Current_HP      defl  $ - $E000             // used to set HP once!
1196+ E853             >
1196+ E853             >//              ______________________________________________________________________
1196+ E853             >//              Dictionary part
1196+ E853             >
1196+ E853             >                org     Dict_Ptr
1196+ 712B             >
1196+ 712B 51 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1196+ 712D             >
1196+ 712D             >COMMA_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1196+ 712D CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1196+ 7130             >
1196+ 7130             >
1196+ 7130             >                endif           ; ok        // for other definitions it "points" the correct handler
1196+ 7130             >                // Use of "; ok" to suppress "warning[fwdref]"
1196+ 7130             >
1196+ 7130             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1197+ 7130 A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1198+ 7134 BC 70                        dw      WORD                    // word
1199+ 7136 9B 69 B7 68                  dw      CFETCH, ONE_PLUS        // c@ 1+
1200+ 713A A8 6B                        dw      ALLOT                   // allot
1201+ 713C 78 6A C2 6B                  dw      ZERO, CCOMMA            // 0 c,  ( nul-terminated string - useful anyway )
1202+ 7140 51 68                        dw      EXIT
1203+ 7142
1204+ 7142              //  ______________________________________________________________________
1205+ 7142              //
1206+ 7142              // .c           c --
1207+ 7142              // intermediate general purpose string builder, used by ." and .(
1208+ 7142                              Colon_Def DOT_C,  ".C", is_immediate
1208+ 7142             >                New_Def  DOT_C, ".C", Enter_Ptr, is_immediate ; ok
1208+ 7142             >
1208+ 7142             >Dict_Ptr        defl    $
1208+ 7142             >
1208+ 7142             >//              ______________________________________________________________________
1208+ 7142             >//              Heap part
1208+ 7142             >
1208+ 7142             >
1208+ 7142             >                org     (Heap_Ptr & $1FFF) + $E000
1208+ E853             >
1208+ E853             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1208+ E853             >Latest_Definition defl  Heap_Ptr
1208+ E853             >
1208+ E853             >                // dummy db directives used to calculate length of namec
1208+ E853 2E 43       >                db      ".C"
1208+ E855             >len_NFA         defl    $ - temp_NFA
1208+ E855             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1208+ E853             >
1208+ E853 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1208+ E854 2E 43       >                db      ".C"               // name string in 7-bit ascii, but
1208+ E856             >                org     $-1                 // alter last byte of Name just above to set
1208+ E855 C3          >                db      {b $} | END_BIT     // msb as name end
1208+ E856             >
1208+ E856 4C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1208+ E858             >Prev_Ptr        defl    Heap_Ptr
1208+ E858             >
1208+ E858             >mirror_Ptr      defl    $
1208+ E858             >
1208+ E858 44 71       >                dw      Dict_Ptr + 2        // xt
1208+ E85A             >Heap_Ptr        defl    $ - $E000           // save current HP
1208+ E85A             >
1208+ E85A             >Current_HP      defl  $ - $E000             // used to set HP once!
1208+ E85A             >
1208+ E85A             >//              ______________________________________________________________________
1208+ E85A             >//              Dictionary part
1208+ E85A             >
1208+ E85A             >                org     Dict_Ptr
1208+ 7142             >
1208+ 7142 58 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1208+ 7144             >
1208+ 7144             >DOT_C:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1208+ 7144 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1208+ 7147             >
1208+ 7147             >
1208+ 7147             >                endif           ; ok        // for other definitions it "points" the correct handler
1208+ 7147             >                // Use of "; ok" to suppress "warning[fwdref]"
1208+ 7147             >
1208+ 7147             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1209+ 7147 43 6B 86 69                  dw      STATE, FETCH            // state @
1210+ 714B                                                              // if
1211+ 714B F3 63                        dw      ZBRANCH
1212+ 714D 12 00                        dw      Dot_C_Else - $
1213+ 714F 41 6E 07 71                  dw          COMPILE, C_DOT_QUOTE //     compile (.")
1214+ 7153 BC 70 9B 69                  dw          WORD, CFETCH        //      word c@
1215+ 7157 B7 68 A8 6B                  dw          ONE_PLUS, ALLOT     //      1+ allot
1216+ 715B                                                              // else
1217+ 715B EF 63                        dw      BRANCH
1218+ 715D 08 00                        dw      Dot_C_Endif - $
1219+ 715F              Dot_C_Else:
1220+ 715F BC 70 16 6F                  dw          WORD, COUNT, TYPE   //      word count type
1220+ 7163 6A 6F
1221+ 7165              Dot_C_Endif:                                    // endif
1222+ 7165 51 68                        dw      EXIT                    ;
1223+ 7167
1224+ 7167              //  ______________________________________________________________________
1225+ 7167              //
1226+ 7167              // ."           c --
1227+ 7167                              Colon_Def DOT_QUOTE,  '."', is_immediate
1227+ 7167             >                New_Def  DOT_QUOTE, '."', Enter_Ptr, is_immediate ; ok
1227+ 7167             >
1227+ 7167             >Dict_Ptr        defl    $
1227+ 7167             >
1227+ 7167             >//              ______________________________________________________________________
1227+ 7167             >//              Heap part
1227+ 7167             >
1227+ 7167             >
1227+ 7167             >                org     (Heap_Ptr & $1FFF) + $E000
1227+ E85A             >
1227+ E85A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1227+ E85A             >Latest_Definition defl  Heap_Ptr
1227+ E85A             >
1227+ E85A             >                // dummy db directives used to calculate length of namec
1227+ E85A 2E 22       >                db      '."'
1227+ E85C             >len_NFA         defl    $ - temp_NFA
1227+ E85C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1227+ E85A             >
1227+ E85A C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1227+ E85B 2E 22       >                db      '."'               // name string in 7-bit ascii, but
1227+ E85D             >                org     $-1                 // alter last byte of Name just above to set
1227+ E85C A2          >                db      {b $} | END_BIT     // msb as name end
1227+ E85D             >
1227+ E85D 53 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1227+ E85F             >Prev_Ptr        defl    Heap_Ptr
1227+ E85F             >
1227+ E85F             >mirror_Ptr      defl    $
1227+ E85F             >
1227+ E85F 69 71       >                dw      Dict_Ptr + 2        // xt
1227+ E861             >Heap_Ptr        defl    $ - $E000           // save current HP
1227+ E861             >
1227+ E861             >Current_HP      defl  $ - $E000             // used to set HP once!
1227+ E861             >
1227+ E861             >//              ______________________________________________________________________
1227+ E861             >//              Dictionary part
1227+ E861             >
1227+ E861             >                org     Dict_Ptr
1227+ 7167             >
1227+ 7167 5F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1227+ 7169             >
1227+ 7169             >DOT_QUOTE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1227+ 7169 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1227+ 716C             >
1227+ 716C             >
1227+ 716C             >                endif           ; ok        // for other definitions it "points" the correct handler
1227+ 716C             >                // Use of "; ok" to suppress "warning[fwdref]"
1227+ 716C             >
1227+ 716C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1228+ 716C A3 63 22 00                  dw      LIT, DQUOTE_CHAR        // [char] "
1229+ 7170 44 71                        dw      DOT_C                   // [compile] .c
1230+ 7172 51 68                        dw      EXIT                    // ; immediate
1231+ 7174
1232+ 7174              //  ______________________________________________________________________
1233+ 7174              //
1234+ 7174              // .(           c --
1235+ 7174                              Colon_Def DOT_BRACKET,  ".(", is_immediate
1235+ 7174             >                New_Def  DOT_BRACKET, ".(", Enter_Ptr, is_immediate ; ok
1235+ 7174             >
1235+ 7174             >Dict_Ptr        defl    $
1235+ 7174             >
1235+ 7174             >//              ______________________________________________________________________
1235+ 7174             >//              Heap part
1235+ 7174             >
1235+ 7174             >
1235+ 7174             >                org     (Heap_Ptr & $1FFF) + $E000
1235+ E861             >
1235+ E861             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1235+ E861             >Latest_Definition defl  Heap_Ptr
1235+ E861             >
1235+ E861             >                // dummy db directives used to calculate length of namec
1235+ E861 2E 28       >                db      ".("
1235+ E863             >len_NFA         defl    $ - temp_NFA
1235+ E863             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1235+ E861             >
1235+ E861 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1235+ E862 2E 28       >                db      ".("               // name string in 7-bit ascii, but
1235+ E864             >                org     $-1                 // alter last byte of Name just above to set
1235+ E863 A8          >                db      {b $} | END_BIT     // msb as name end
1235+ E864             >
1235+ E864 5A 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1235+ E866             >Prev_Ptr        defl    Heap_Ptr
1235+ E866             >
1235+ E866             >mirror_Ptr      defl    $
1235+ E866             >
1235+ E866 76 71       >                dw      Dict_Ptr + 2        // xt
1235+ E868             >Heap_Ptr        defl    $ - $E000           // save current HP
1235+ E868             >
1235+ E868             >Current_HP      defl  $ - $E000             // used to set HP once!
1235+ E868             >
1235+ E868             >//              ______________________________________________________________________
1235+ E868             >//              Dictionary part
1235+ E868             >
1235+ E868             >                org     Dict_Ptr
1235+ 7174             >
1235+ 7174 66 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1235+ 7176             >
1235+ 7176             >DOT_BRACKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1235+ 7176 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1235+ 7179             >
1235+ 7179             >
1235+ 7179             >                endif           ; ok        // for other definitions it "points" the correct handler
1235+ 7179             >                // Use of "; ok" to suppress "warning[fwdref]"
1235+ 7179             >
1235+ 7179             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1236+ 7179 A3 63 29 00                  dw      LIT, ")"                // [char] )
1237+ 717D 44 71                        dw      DOT_C                   // [compile] .c
1238+ 717F 51 68                        dw      EXIT                    // ; immediate
1239+ 7181
1240+ 7181              //  ______________________________________________________________________
1241+ 7181              //
1242+ 7181              // (sgn)        a -- a f
1243+ 7181              // determines if char in addr a is a sign (+ or -), and in that case increments
1244+ 7181              // a flag. Returns f as the sign, true for negative, false for positive.
1245+ 7181              // called by NUMBER and (EXP)
1246+ 7181                              Colon_Def CSGN,  "(SGN)", is_normal
1246+ 7181             >                New_Def  CSGN, "(SGN)", Enter_Ptr, is_normal ; ok
1246+ 7181             >
1246+ 7181             >Dict_Ptr        defl    $
1246+ 7181             >
1246+ 7181             >//              ______________________________________________________________________
1246+ 7181             >//              Heap part
1246+ 7181             >
1246+ 7181             >
1246+ 7181             >                org     (Heap_Ptr & $1FFF) + $E000
1246+ E868             >
1246+ E868             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1246+ E868             >Latest_Definition defl  Heap_Ptr
1246+ E868             >
1246+ E868             >                // dummy db directives used to calculate length of namec
1246+ E868 28 53 47 4E >                db      "(SGN)"
1246+ E86C 29          >
1246+ E86D             >len_NFA         defl    $ - temp_NFA
1246+ E86D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1246+ E868             >
1246+ E868 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1246+ E869 28 53 47 4E >                db      "(SGN)"               // name string in 7-bit ascii, but
1246+ E86D 29          >
1246+ E86E             >                org     $-1                 // alter last byte of Name just above to set
1246+ E86D A9          >                db      {b $} | END_BIT     // msb as name end
1246+ E86E             >
1246+ E86E 61 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1246+ E870             >Prev_Ptr        defl    Heap_Ptr
1246+ E870             >
1246+ E870             >mirror_Ptr      defl    $
1246+ E870             >
1246+ E870 83 71       >                dw      Dict_Ptr + 2        // xt
1246+ E872             >Heap_Ptr        defl    $ - $E000           // save current HP
1246+ E872             >
1246+ E872             >Current_HP      defl  $ - $E000             // used to set HP once!
1246+ E872             >
1246+ E872             >//              ______________________________________________________________________
1246+ E872             >//              Dictionary part
1246+ E872             >
1246+ E872             >                org     Dict_Ptr
1246+ 7181             >
1246+ 7181 70 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1246+ 7183             >
1246+ 7183             >CSGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1246+ 7183 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1246+ 7186             >
1246+ 7186             >
1246+ 7186             >                endif           ; ok        // for other definitions it "points" the correct handler
1246+ 7186             >                // Use of "; ok" to suppress "warning[fwdref]"
1246+ 7186             >
1246+ 7186             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1247+ 7186 1C 69 B7 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1247+ 718A 9B 69
1248+ 718C 1C 69 A3 63                  dw      DUP, LIT, "-", EQUALS   // dup [char] - =
1248+ 7190 2D 00 E8 6B
1249+ 7194                                                              // if
1250+ 7194 F3 63                        dw      ZBRANCH
1251+ 7196 12 00                        dw      CSgn_Else_0 - $
1252+ 7198 01 69                        dw          DROP                //      drop
1253+ 719A B7 68                        dw          ONE_PLUS            //      1+
1254+ 719C 7F 6A 4F 6B                  dw          ONE, DPL, PLUSSTORE //      1 dpl +!
1254+ 71A0 6E 69
1255+ 71A2 7F 6A                        dw          ONE                 //      1
1256+ 71A4                                                              // else
1257+ 71A4 EF 63                        dw      BRANCH
1258+ 71A6 16 00                        dw      CSgn_Endif_0 - $
1259+ 71A8              CSgn_Else_0:
1260+ 71A8 A3 63 2B 00                  dw          LIT, "+", EQUALS    //      [char] + =
1260+ 71AC E8 6B
1261+ 71AE                                                              //      if
1262+ 71AE F3 63                        dw          ZBRANCH
1263+ 71B0 0A 00                        dw          CSgn_Endif_1 - $
1264+ 71B2 B7 68                        dw              ONE_PLUS        //          1+
1265+ 71B4 7F 6A 4F 6B                  dw              ONE, DPL        //          1 dpl
1266+ 71B8 6E 69                        dw              PLUSSTORE       //          +!
1267+ 71BA              CSgn_Endif_1                                    //      endif
1268+ 71BA 78 6A                        dw          ZERO                //      0
1269+ 71BC              CSgn_Endif_0:                                   // endif
1270+ 71BC 51 68                        dw      EXIT
1271+ 71BE
1272+ 71BE              //  ______________________________________________________________________
1273+ 71BE              //
1274+ 71BE              // (number)     d a -- d1 a1
1275+ 71BE              // using the current BASE parse characters stored in address a
1276+ 71BE              // accumulating a double precision integer d
1277+ 71BE              // the process stops at the first not-convertible character
1278+ 71BE              // A double-number is kept in CPU registers as HLDE.
1279+ 71BE              // On the stack a double number is treated as two single numbers
1280+ 71BE              // where HL is on the top of the stack and DE is the second from top,
1281+ 71BE              // so in the stack memory it appears as LHED.
1282+ 71BE              // Instead, in 2VARIABLE a double number is stored as EDLH.
1283+ 71BE                              Colon_Def CNUMBER,  "(NUMBER)", is_normal
1283+ 71BE             >                New_Def  CNUMBER, "(NUMBER)", Enter_Ptr, is_normal ; ok
1283+ 71BE             >
1283+ 71BE             >Dict_Ptr        defl    $
1283+ 71BE             >
1283+ 71BE             >//              ______________________________________________________________________
1283+ 71BE             >//              Heap part
1283+ 71BE             >
1283+ 71BE             >
1283+ 71BE             >                org     (Heap_Ptr & $1FFF) + $E000
1283+ E872             >
1283+ E872             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1283+ E872             >Latest_Definition defl  Heap_Ptr
1283+ E872             >
1283+ E872             >                // dummy db directives used to calculate length of namec
1283+ E872 28 4E 55 4D >                db      "(NUMBER)"
1283+ E876 42 45 52 29 >
1283+ E87A             >len_NFA         defl    $ - temp_NFA
1283+ E87A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1283+ E872             >
1283+ E872 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1283+ E873 28 4E 55 4D >                db      "(NUMBER)"               // name string in 7-bit ascii, but
1283+ E877 42 45 52 29 >
1283+ E87B             >                org     $-1                 // alter last byte of Name just above to set
1283+ E87A A9          >                db      {b $} | END_BIT     // msb as name end
1283+ E87B             >
1283+ E87B 68 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1283+ E87D             >Prev_Ptr        defl    Heap_Ptr
1283+ E87D             >
1283+ E87D             >mirror_Ptr      defl    $
1283+ E87D             >
1283+ E87D C0 71       >                dw      Dict_Ptr + 2        // xt
1283+ E87F             >Heap_Ptr        defl    $ - $E000           // save current HP
1283+ E87F             >
1283+ E87F             >Current_HP      defl  $ - $E000             // used to set HP once!
1283+ E87F             >
1283+ E87F             >//              ______________________________________________________________________
1283+ E87F             >//              Dictionary part
1283+ E87F             >
1283+ E87F             >                org     Dict_Ptr
1283+ 71BE             >
1283+ 71BE 7D 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1283+ 71C0             >
1283+ 71C0             >CNUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1283+ 71C0 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1283+ 71C3             >
1283+ 71C3             >
1283+ 71C3             >                endif           ; ok        // for other definitions it "points" the correct handler
1283+ 71C3             >                // Use of "; ok" to suppress "warning[fwdref]"
1283+ 71C3             >
1283+ 71C3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1284+ 71C3                                                              // begin
1285+ 71C3              CNumber_Begin:
1286+ 71C3 B7 68                        dw          ONE_PLUS            //      1+
1287+ 71C5 1C 69 5B 68                  dw          DUP, TO_R           //      dup >r
1288+ 71C9 9B 69                        dw          CFETCH              //      @
1289+ 71CB 49 6B 86 69                  dw          BASE, FETCH         //      base @
1290+ 71CF 47 64                        dw          DIGIT               //      digit
1291+ 71D1                                                              // while
1292+ 71D1 F3 63                        dw      ZBRANCH
1293+ 71D3 2C 00                        dw      CNumber_While_end - $
1294+ 71D5 15 69                        dw          SWAP                //      swap
1295+ 71D7 49 6B 86 69                  dw          BASE, FETCH         //      base @
1296+ 71DB B0 67                        dw          UM_MUL              //      um*
1297+ 71DD 01 69 23 69                  dw          DROP, ROT           //      drop rot
1298+ 71E1 49 6B 86 69                  dw          BASE, FETCH         //      base @
1299+ 71E5 B0 67                        dw          UM_MUL              //      um*
1300+ 71E7 A8 68                        dw          DPLUS               //      d+
1301+ 71E9 4F 6B 86 69                  dw          DPL, FETCH          //      dpl @
1302+ 71ED B7 68                        dw          ONE_PLUS            //      1+
1303+ 71EF                                                              //      if
1304+ 71EF F3 63                        dw          ZBRANCH
1305+ 71F1 08 00                        dw          CNumber_Endif - $
1306+ 71F3 7F 6A 4F 6B                  dw              ONE, DPL        //          1 dpl
1307+ 71F7 6E 69                        dw              PLUSSTORE       //          +!
1308+ 71F9              CNumber_Endif:                                  //      endif
1309+ 71F9 66 68                        dw             R_TO             //      r>  ( balance rp )
1310+ 71FB EF 63                        dw      BRANCH
1311+ 71FD C6 FF                        dw      CNumber_Begin - $
1312+ 71FF              CNumber_While_end:                              // repeat
1313+ 71FF 66 68                        dw      R_TO                    // r>  ( balance rp on exit while-repeat )
1314+ 7201 51 68                        dw      EXIT                    // ;
1315+ 7203
1316+ 7203              //  ______________________________________________________________________
1317+ 7203              //
1318+ 7203              // (prefix)
1319+ 7203                              Colon_Def CPREFIX,  "(PREFIX)", is_normal
1319+ 7203             >                New_Def  CPREFIX, "(PREFIX)", Enter_Ptr, is_normal ; ok
1319+ 7203             >
1319+ 7203             >Dict_Ptr        defl    $
1319+ 7203             >
1319+ 7203             >//              ______________________________________________________________________
1319+ 7203             >//              Heap part
1319+ 7203             >
1319+ 7203             >
1319+ 7203             >                org     (Heap_Ptr & $1FFF) + $E000
1319+ E87F             >
1319+ E87F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1319+ E87F             >Latest_Definition defl  Heap_Ptr
1319+ E87F             >
1319+ E87F             >                // dummy db directives used to calculate length of namec
1319+ E87F 28 50 52 45 >                db      "(PREFIX)"
1319+ E883 46 49 58 29 >
1319+ E887             >len_NFA         defl    $ - temp_NFA
1319+ E887             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1319+ E87F             >
1319+ E87F 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1319+ E880 28 50 52 45 >                db      "(PREFIX)"               // name string in 7-bit ascii, but
1319+ E884 46 49 58 29 >
1319+ E888             >                org     $-1                 // alter last byte of Name just above to set
1319+ E887 A9          >                db      {b $} | END_BIT     // msb as name end
1319+ E888             >
1319+ E888 72 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1319+ E88A             >Prev_Ptr        defl    Heap_Ptr
1319+ E88A             >
1319+ E88A             >mirror_Ptr      defl    $
1319+ E88A             >
1319+ E88A 05 72       >                dw      Dict_Ptr + 2        // xt
1319+ E88C             >Heap_Ptr        defl    $ - $E000           // save current HP
1319+ E88C             >
1319+ E88C             >Current_HP      defl  $ - $E000             // used to set HP once!
1319+ E88C             >
1319+ E88C             >//              ______________________________________________________________________
1319+ E88C             >//              Dictionary part
1319+ E88C             >
1319+ E88C             >                org     Dict_Ptr
1319+ 7203             >
1319+ 7203 8A 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1319+ 7205             >
1319+ 7205             >CPREFIX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1319+ 7205 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1319+ 7208             >
1319+ 7208             >
1319+ 7208             >                endif           ; ok        // for other definitions it "points" the correct handler
1319+ 7208             >                // Use of "; ok" to suppress "warning[fwdref]"
1319+ 7208             >
1319+ 7208             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1320+ 7208 1C 69 B7 68                  dw      DUP, ONE_PLUS, CFETCH   // dup 1+ c@
1320+ 720C 9B 69
1321+ 720E 1C 69 5B 68                  dw      DUP, TO_R               // dup >r
1322+ 7212 A3 63 24 00                  dw      LIT, "$", EQUALS        // [char] $ =
1322+ 7216 E8 6B
1323+ 7218                                                              // if
1324+ 7218 F3 63                        dw      ZBRANCH
1325+ 721A 06 00                        dw      CPrefix_Endif_0 - $
1326+ 721C B7 68                        dw          ONE_PLUS            //      1+
1327+ 721E 99 6E                        dw          HEX
1328+ 7220              CPrefix_Endif_0:                                // endif
1329+ 7220 71 68                        dw      R_OP                    // r@
1330+ 7222 A3 63 25 00                  dw      LIT, "%", EQUALS        // [char] $ =
1330+ 7226 E8 6B
1331+ 7228                                                              // if
1332+ 7228 F3 63                        dw      ZBRANCH
1333+ 722A 0A 00                        dw      CPrefix_Endif_1 - $
1334+ 722C B7 68                        dw          ONE_PLUS            //      1+
1335+ 722E 86 6A                        dw          TWO
1336+ 7230 49 6B 90 69                  dw          BASE, STORE         //      2 base !
1337+ 7234              CPrefix_Endif_1:                                // endif
1338+ 7234 66 68                        dw      R_TO                    // r>
1339+ 7236 A3 63 23 00                  dw      LIT, "#", EQUALS        // [char] $ =
1339+ 723A E8 6B
1340+ 723C                                                              // if
1341+ 723C F3 63                        dw      ZBRANCH
1342+ 723E 06 00                        dw      CPrefix_Endif_2 - $
1343+ 7240 B7 68                        dw          ONE_PLUS            //      1+
1344+ 7242 A8 6E                        dw          DECIMAL
1345+ 7244              CPrefix_Endif_2:                                // endif
1346+ 7244 51 68                        dw      EXIT
1347+ 7246
1348+ 7246              //  ______________________________________________________________________
1349+ 7246
1350+ 7246              PDOM_PTR:
1351+ 7246              //              New_Def PDOM,   "PDOM", Create_Ptr, is_normal
1352+ 7246 2C 2F 2D 3A                  db ',/-:'
1353+ 724A              PCDM_PTR:
1354+ 724A              //              New_Def PCDM,   "PCDM", Create_Ptr, is_normal
1355+ 724A 2E 2E 2E 2E                  db '....'
1356+ 724E
1357+ 724E              //  ______________________________________________________________________
1358+ 724E              //
1359+ 724E              // number       a -- d
1360+ 724E                              Colon_Def NUMBER,  "NUMBER", is_normal
1360+ 724E             >                New_Def  NUMBER, "NUMBER", Enter_Ptr, is_normal ; ok
1360+ 724E             >
1360+ 724E             >Dict_Ptr        defl    $
1360+ 724E             >
1360+ 724E             >//              ______________________________________________________________________
1360+ 724E             >//              Heap part
1360+ 724E             >
1360+ 724E             >
1360+ 724E             >                org     (Heap_Ptr & $1FFF) + $E000
1360+ E88C             >
1360+ E88C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1360+ E88C             >Latest_Definition defl  Heap_Ptr
1360+ E88C             >
1360+ E88C             >                // dummy db directives used to calculate length of namec
1360+ E88C 4E 55 4D 42 >                db      "NUMBER"
1360+ E890 45 52       >
1360+ E892             >len_NFA         defl    $ - temp_NFA
1360+ E892             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1360+ E88C             >
1360+ E88C 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1360+ E88D 4E 55 4D 42 >                db      "NUMBER"               // name string in 7-bit ascii, but
1360+ E891 45 52       >
1360+ E893             >                org     $-1                 // alter last byte of Name just above to set
1360+ E892 D2          >                db      {b $} | END_BIT     // msb as name end
1360+ E893             >
1360+ E893 7F 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1360+ E895             >Prev_Ptr        defl    Heap_Ptr
1360+ E895             >
1360+ E895             >mirror_Ptr      defl    $
1360+ E895             >
1360+ E895 50 72       >                dw      Dict_Ptr + 2        // xt
1360+ E897             >Heap_Ptr        defl    $ - $E000           // save current HP
1360+ E897             >
1360+ E897             >Current_HP      defl  $ - $E000             // used to set HP once!
1360+ E897             >
1360+ E897             >//              ______________________________________________________________________
1360+ E897             >//              Dictionary part
1360+ E897             >
1360+ E897             >                org     Dict_Ptr
1360+ 724E             >
1360+ 724E 95 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1360+ 7250             >
1360+ 7250             >NUMBER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1360+ 7250 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1360+ 7253             >
1360+ 7253             >
1360+ 7253             >                endif           ; ok        // for other definitions it "points" the correct handler
1360+ 7253             >                // Use of "; ok" to suppress "warning[fwdref]"
1360+ 7253             >
1360+ 7253             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1361+ 7253 78 6A 78 6A                  dw      ZERO, ZERO              // 0 0
1362+ 7257 23 69                        dw      ROT                     // rot
1363+ 7259
1364+ 7259 49 6B 86 69                  dw      BASE, FETCH, TO_R       // base @ >r  // ***
1364+ 725D 5B 68
1365+ 725F 05 72                        dw      CPREFIX                 // (prefix)   // ***
1366+ 7261
1367+ 7261 83 71 5B 68                  dw      CSGN, TO_R              // (sgn) >r
1368+ 7265
1369+ 7265 94 6A 4F 6B                  dw      NEG_ONE, DPL, STORE     // -1 dpl !
1369+ 7269 90 69
1370+ 726B C0 71                        dw      CNUMBER                 // (number)
1371+ 726D              Number_Begin:                                   // begin
1372+ 726D 1C 69 9B 69                  dw        DUP, CFETCH             // dup c@
1373+ 7271 5B 68                        dw        TO_R                    // >r
1374+ 7273                          //  dw        PCDM, PDOM              //  pcdm pdom
1375+ 7273 A3 63 4A 72                  dw        LIT, PCDM_PTR           //
1376+ 7277 A3 63 46 72                  dw        LIT, PDOM_PTR           //
1377+ 727B A3 63 04 00                  dw        LIT, 4                  //  4
1378+ 727F 66 68                        dw        R_TO                    // r>
1379+ 7281 54 65                        dw        C_MAP                   // (map)
1380+ 7283 78 6A 15 69                  dw        ZERO, SWAP              // 0 swap
1381+ 7287 A3 63 2E 00                  dw        LIT, ".", EQUALS        // [char] . =  ( decimal point )
1381+ 728B E8 6B
1382+ 728D
1383+ 728D F3 63                        dw        ZBRANCH                 // if
1384+ 728F 0A 00                        dw        Number_Endif_1 - $
1385+ 7291 78 6A 4F 6B                  dw          ZERO, DPL, STORE        //      0 dpl !
1385+ 7295 90 69
1386+ 7297 B7 68                        dw          ONE_PLUS                //      1+
1387+ 7299              Number_Endif_1:                                   // endif
1388+ 7299
1389+ 7299 F3 63                        dw      ZBRANCH                // while
1390+ 729B 08 00                        dw      Number_While_end - $
1391+ 729D C0 71                        dw        CNUMBER                 // (number)
1392+ 729F EF 63                        dw      BRANCH
1393+ 72A1 CC FF                        dw      Number_Begin - $
1394+ 72A3              Number_While_end:                               // repeat
1395+ 72A3
1396+ 72A3 9B 69 9B 6A                  dw      CFETCH, BL              // c@ bl
1397+ 72A7 DC 6B 78 6A                  dw      SUBTRACT, ZERO, QERROR  // - 0 ?error
1397+ 72AB D1 6D
1398+ 72AD 66 68                        dw      R_TO                    // r>
1399+ 72AF                                                              // if
1400+ 72AF F3 63                        dw      ZBRANCH
1401+ 72B1 04 00                        dw      Number_Endif_2 - $
1402+ 72B3 EB 68                        dw          DMINUS              //      dminus
1403+ 72B5              Number_Endif_2:                                 // endif
1404+ 72B5 66 68 49 6B                  dw      R_TO, BASE, STORE       // r> base !  // ***
1404+ 72B9 90 69
1405+ 72BB 51 68                        dw      EXIT                    // ;
1406+ 72BD
1407+ 72BD              //  ______________________________________________________________________
1408+ 72BD              //
1409+ 72BD              // twofind      a -- d
1410+ 72BD                              Colon_Def TWOFIND,  "2FIND", is_normal
1410+ 72BD             >                New_Def  TWOFIND, "2FIND", Enter_Ptr, is_normal ; ok
1410+ 72BD             >
1410+ 72BD             >Dict_Ptr        defl    $
1410+ 72BD             >
1410+ 72BD             >//              ______________________________________________________________________
1410+ 72BD             >//              Heap part
1410+ 72BD             >
1410+ 72BD             >
1410+ 72BD             >                org     (Heap_Ptr & $1FFF) + $E000
1410+ E897             >
1410+ E897             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1410+ E897             >Latest_Definition defl  Heap_Ptr
1410+ E897             >
1410+ E897             >                // dummy db directives used to calculate length of namec
1410+ E897 32 46 49 4E >                db      "2FIND"
1410+ E89B 44          >
1410+ E89C             >len_NFA         defl    $ - temp_NFA
1410+ E89C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1410+ E897             >
1410+ E897 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1410+ E898 32 46 49 4E >                db      "2FIND"               // name string in 7-bit ascii, but
1410+ E89C 44          >
1410+ E89D             >                org     $-1                 // alter last byte of Name just above to set
1410+ E89C C4          >                db      {b $} | END_BIT     // msb as name end
1410+ E89D             >
1410+ E89D 8C 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1410+ E89F             >Prev_Ptr        defl    Heap_Ptr
1410+ E89F             >
1410+ E89F             >mirror_Ptr      defl    $
1410+ E89F             >
1410+ E89F BF 72       >                dw      Dict_Ptr + 2        // xt
1410+ E8A1             >Heap_Ptr        defl    $ - $E000           // save current HP
1410+ E8A1             >
1410+ E8A1             >Current_HP      defl  $ - $E000             // used to set HP once!
1410+ E8A1             >
1410+ E8A1             >//              ______________________________________________________________________
1410+ E8A1             >//              Dictionary part
1410+ E8A1             >
1410+ E8A1             >                org     Dict_Ptr
1410+ 72BD             >
1410+ 72BD 9F 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1410+ 72BF             >
1410+ 72BF             >TWOFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1410+ 72BF CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1410+ 72C2             >
1410+ 72C2             >
1410+ 72C2             >                endif           ; ok        // for other definitions it "points" the correct handler
1410+ 72C2             >                // Use of "; ok" to suppress "warning[fwdref]"
1410+ 72C2             >
1410+ 72C2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1411+ 72C2 5B 68 71 68                  dw      TO_R, R_OP              // >r r@
1412+ 72C6 37 6B 86 69                  dw      CONTEXT, FETCH, FETCH   // context @ @
1412+ 72CA 86 69
1413+ 72CC B4 64                        dw      C_FIND                  // (find)
1414+ 72CE 3F 6C                        dw      QDUP                    // ?dup
1415+ 72D0 76 68                        dw      ZEQUAL                  // 0=
1416+ 72D2                                                              // if
1417+ 72D2 F3 63                        dw      ZBRANCH
1418+ 72D4 22 00                        dw      LFind_Endif - $
1419+ 72D6 71 68                        dw          R_OP                //      r@
1420+ 72D8                              // dw          LATEST               //      latest
1421+ 72D8 3D 6B 86 69                  dw          CURRENT, FETCH, FETCH   // context @ @
1421+ 72DC 86 69
1422+ 72DE B4 64                        dw          C_FIND              //      (find)
1423+ 72E0
1424+ 72E0 3F 6C                            dw      QDUP                    // ?dup
1425+ 72E2 76 68                            dw      ZEQUAL                  // 0=
1426+ 72E4                                                                  // if
1427+ 72E4 F3 63                            dw      ZBRANCH
1428+ 72E6 10 00                            dw      LFind_Endif2 - $
1429+ 72E8 71 68                            dw          R_OP                //      r@
1430+ 72EA A3 63 3A 75                      dw          LIT, FORTH, TO_BODY
1430+ 72EE 50 6D
1431+ 72F0 CD 68                            dw          CELL_PLUS //, CELL_PLUS
1432+ 72F2 86 69                            dw          FETCH
1433+ 72F4 B4 64                            dw          C_FIND              //      (find)
1434+ 72F6              LFind_Endif2:                                    // endif
1435+ 72F6
1436+ 72F6
1437+ 72F6              LFind_Endif:                                    // endif
1438+ 72F6 66 68 01 69                  dw      R_TO, DROP              // r> drop
1439+ 72FA 51 68                        dw      EXIT                    // ;
1440+ 72FC
1441+ 72FC              //  ______________________________________________________________________
1442+ 72FC              //
1443+ 72FC              // -find        a -- d
1444+ 72FC                              Colon_Def LFIND,  "-FIND", is_normal
1444+ 72FC             >                New_Def  LFIND, "-FIND", Enter_Ptr, is_normal ; ok
1444+ 72FC             >
1444+ 72FC             >Dict_Ptr        defl    $
1444+ 72FC             >
1444+ 72FC             >//              ______________________________________________________________________
1444+ 72FC             >//              Heap part
1444+ 72FC             >
1444+ 72FC             >
1444+ 72FC             >                org     (Heap_Ptr & $1FFF) + $E000
1444+ E8A1             >
1444+ E8A1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1444+ E8A1             >Latest_Definition defl  Heap_Ptr
1444+ E8A1             >
1444+ E8A1             >                // dummy db directives used to calculate length of namec
1444+ E8A1 2D 46 49 4E >                db      "-FIND"
1444+ E8A5 44          >
1444+ E8A6             >len_NFA         defl    $ - temp_NFA
1444+ E8A6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1444+ E8A1             >
1444+ E8A1 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1444+ E8A2 2D 46 49 4E >                db      "-FIND"               // name string in 7-bit ascii, but
1444+ E8A6 44          >
1444+ E8A7             >                org     $-1                 // alter last byte of Name just above to set
1444+ E8A6 C4          >                db      {b $} | END_BIT     // msb as name end
1444+ E8A7             >
1444+ E8A7 97 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1444+ E8A9             >Prev_Ptr        defl    Heap_Ptr
1444+ E8A9             >
1444+ E8A9             >mirror_Ptr      defl    $
1444+ E8A9             >
1444+ E8A9 FE 72       >                dw      Dict_Ptr + 2        // xt
1444+ E8AB             >Heap_Ptr        defl    $ - $E000           // save current HP
1444+ E8AB             >
1444+ E8AB             >Current_HP      defl  $ - $E000             // used to set HP once!
1444+ E8AB             >
1444+ E8AB             >//              ______________________________________________________________________
1444+ E8AB             >//              Dictionary part
1444+ E8AB             >
1444+ E8AB             >                org     Dict_Ptr
1444+ 72FC             >
1444+ 72FC A9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1444+ 72FE             >
1444+ 72FE             >LFIND:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1444+ 72FE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1444+ 7301             >
1444+ 7301             >
1444+ 7301             >                endif           ; ok        // for other definitions it "points" the correct handler
1444+ 7301             >                // Use of "; ok" to suppress "warning[fwdref]"
1444+ 7301             >
1444+ 7301             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1445+ 7301 9B 6A BC 70                  dw      BL, WORD                // bl word
1446+ 7305 BF 72                        dw      TWOFIND                 // 2find
1447+ 7307 51 68                        dw      EXIT                    // ;
1448+ 7309
1449+ 7309              //  ______________________________________________________________________
1450+ 7309              //
1451+ 7309              // (abort)      --
1452+ 7309                              Colon_Def CABORT,  "(ABORT)", is_normal
1452+ 7309             >                New_Def  CABORT, "(ABORT)", Enter_Ptr, is_normal ; ok
1452+ 7309             >
1452+ 7309             >Dict_Ptr        defl    $
1452+ 7309             >
1452+ 7309             >//              ______________________________________________________________________
1452+ 7309             >//              Heap part
1452+ 7309             >
1452+ 7309             >
1452+ 7309             >                org     (Heap_Ptr & $1FFF) + $E000
1452+ E8AB             >
1452+ E8AB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1452+ E8AB             >Latest_Definition defl  Heap_Ptr
1452+ E8AB             >
1452+ E8AB             >                // dummy db directives used to calculate length of namec
1452+ E8AB 28 41 42 4F >                db      "(ABORT)"
1452+ E8AF 52 54 29    >
1452+ E8B2             >len_NFA         defl    $ - temp_NFA
1452+ E8B2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1452+ E8AB             >
1452+ E8AB 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1452+ E8AC 28 41 42 4F >                db      "(ABORT)"               // name string in 7-bit ascii, but
1452+ E8B0 52 54 29    >
1452+ E8B3             >                org     $-1                 // alter last byte of Name just above to set
1452+ E8B2 A9          >                db      {b $} | END_BIT     // msb as name end
1452+ E8B3             >
1452+ E8B3 A1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1452+ E8B5             >Prev_Ptr        defl    Heap_Ptr
1452+ E8B5             >
1452+ E8B5             >mirror_Ptr      defl    $
1452+ E8B5             >
1452+ E8B5 0B 73       >                dw      Dict_Ptr + 2        // xt
1452+ E8B7             >Heap_Ptr        defl    $ - $E000           // save current HP
1452+ E8B7             >
1452+ E8B7             >Current_HP      defl  $ - $E000             // used to set HP once!
1452+ E8B7             >
1452+ E8B7             >//              ______________________________________________________________________
1452+ E8B7             >//              Dictionary part
1452+ E8B7             >
1452+ E8B7             >                org     Dict_Ptr
1452+ 7309             >
1452+ 7309 B5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1452+ 730B             >
1452+ 730B             >CABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1452+ 730B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1452+ 730E             >
1452+ 730E             >
1452+ 730E             >                endif           ; ok        // for other definitions it "points" the correct handler
1452+ 730E             >                // Use of "; ok" to suppress "warning[fwdref]"
1452+ 730E             >
1452+ 730E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1453+ 730E 9F 75                        dw      ABORT                   // abort
1454+ 7310 51 68                        dw      EXIT                    // ;
1455+ 7312
1456+ 7312              //  ______________________________________________________________________
1457+ 7312              //
1458+ 7312              // error        n --
1459+ 7312              // raise an error
1460+ 7312              // if WARNING is 0, prints "MSG#n".
1461+ 7312              // if WARNING is 1, prints line n of screen 4.
1462+ 7312              // if WARNING is -1 does (ABORT) that normally does ABORT
1463+ 7312              // value can be negative or beyond block 4.
1464+ 7312                              Colon_Def ERROR,  "ERROR", is_normal
1464+ 7312             >                New_Def  ERROR, "ERROR", Enter_Ptr, is_normal ; ok
1464+ 7312             >
1464+ 7312             >Dict_Ptr        defl    $
1464+ 7312             >
1464+ 7312             >//              ______________________________________________________________________
1464+ 7312             >//              Heap part
1464+ 7312             >
1464+ 7312             >
1464+ 7312             >                org     (Heap_Ptr & $1FFF) + $E000
1464+ E8B7             >
1464+ E8B7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1464+ E8B7             >Latest_Definition defl  Heap_Ptr
1464+ E8B7             >
1464+ E8B7             >                // dummy db directives used to calculate length of namec
1464+ E8B7 45 52 52 4F >                db      "ERROR"
1464+ E8BB 52          >
1464+ E8BC             >len_NFA         defl    $ - temp_NFA
1464+ E8BC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1464+ E8B7             >
1464+ E8B7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1464+ E8B8 45 52 52 4F >                db      "ERROR"               // name string in 7-bit ascii, but
1464+ E8BC 52          >
1464+ E8BD             >                org     $-1                 // alter last byte of Name just above to set
1464+ E8BC D2          >                db      {b $} | END_BIT     // msb as name end
1464+ E8BD             >
1464+ E8BD AB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1464+ E8BF             >Prev_Ptr        defl    Heap_Ptr
1464+ E8BF             >
1464+ E8BF             >mirror_Ptr      defl    $
1464+ E8BF             >
1464+ E8BF 14 73       >                dw      Dict_Ptr + 2        // xt
1464+ E8C1             >Heap_Ptr        defl    $ - $E000           // save current HP
1464+ E8C1             >
1464+ E8C1             >Current_HP      defl  $ - $E000             // used to set HP once!
1464+ E8C1             >
1464+ E8C1             >//              ______________________________________________________________________
1464+ E8C1             >//              Dictionary part
1464+ E8C1             >
1464+ E8C1             >                org     Dict_Ptr
1464+ 7312             >
1464+ 7312 BF 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1464+ 7314             >
1464+ 7314             >ERROR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1464+ 7314 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1464+ 7317             >
1464+ 7317             >
1464+ 7317             >                endif           ; ok        // for other definitions it "points" the correct handler
1464+ 7317             >                // Use of "; ok" to suppress "warning[fwdref]"
1464+ 7317             >
1464+ 7317             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1465+ 7317 E9 6A 86 69                  dw      WARNING, FETCH, ZLESS   // warning @ 0<
1465+ 731B 87 68
1466+ 731D                                                              // if
1467+ 731D F3 63                        dw      ZBRANCH
1468+ 731F 04 00                        dw      Error_Endif_1 - $
1469+ 7321 0B 73                        dw          CABORT              //      (abort)
1470+ 7323              Error_Endif_1:                                  // endif
1471+ 7323 9D 6B 16 6F                  dw      HERE, COUNT, TYPE       // here count type
1471+ 7327 6A 6F
1472+ 7329 07 71                        dw      C_DOT_QUOTE             // .( ? )
1473+ 732B 02 3F 20                     db      2, "? "
1474+ 732E 8D 77                        dw      MESSAGE                 // message  ( forward )
1475+ 7330 D1 6A 86 69                  dw      S0, FETCH, SPSTORE      // s0 @ sp!
1475+ 7334 41 68
1476+ 7336 19 6B 86 69                  dw      BLK, FETCH, QDUP        // blk @ ?dup
1476+ 733A 3F 6C
1477+ 733C                                                              // if
1478+ 733C F3 63                        dw      ZBRANCH
1479+ 733E 08 00                        dw      Error_Endif_2 - $
1480+ 7340 1F 6B 86 69                  dw          TO_IN, FETCH, SWAP  //      >in @ swap
1480+ 7344 15 69
1481+ 7346              Error_Endif_2:                                  // endif
1482+ 7346 63 75                        dw      QUIT                    // quit ( forward )
1483+ 7348 51 68                        dw      EXIT                    // ;
1484+ 734A              //  ______________________________________________________________________
1485+ 734A              //
1486+ 734A              // id.          nfa --
1487+ 734A                              Colon_Def ID_DOT,  "ID.", is_normal
1487+ 734A             >                New_Def  ID_DOT, "ID.", Enter_Ptr, is_normal ; ok
1487+ 734A             >
1487+ 734A             >Dict_Ptr        defl    $
1487+ 734A             >
1487+ 734A             >//              ______________________________________________________________________
1487+ 734A             >//              Heap part
1487+ 734A             >
1487+ 734A             >
1487+ 734A             >                org     (Heap_Ptr & $1FFF) + $E000
1487+ E8C1             >
1487+ E8C1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1487+ E8C1             >Latest_Definition defl  Heap_Ptr
1487+ E8C1             >
1487+ E8C1             >                // dummy db directives used to calculate length of namec
1487+ E8C1 49 44 2E    >                db      "ID."
1487+ E8C4             >len_NFA         defl    $ - temp_NFA
1487+ E8C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1487+ E8C1             >
1487+ E8C1 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1487+ E8C2 49 44 2E    >                db      "ID."               // name string in 7-bit ascii, but
1487+ E8C5             >                org     $-1                 // alter last byte of Name just above to set
1487+ E8C4 AE          >                db      {b $} | END_BIT     // msb as name end
1487+ E8C5             >
1487+ E8C5 B7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1487+ E8C7             >Prev_Ptr        defl    Heap_Ptr
1487+ E8C7             >
1487+ E8C7             >mirror_Ptr      defl    $
1487+ E8C7             >
1487+ E8C7 4C 73       >                dw      Dict_Ptr + 2        // xt
1487+ E8C9             >Heap_Ptr        defl    $ - $E000           // save current HP
1487+ E8C9             >
1487+ E8C9             >Current_HP      defl  $ - $E000             // used to set HP once!
1487+ E8C9             >
1487+ E8C9             >//              ______________________________________________________________________
1487+ E8C9             >//              Dictionary part
1487+ E8C9             >
1487+ E8C9             >                org     Dict_Ptr
1487+ 734A             >
1487+ 734A C7 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1487+ 734C             >
1487+ 734C             >ID_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1487+ 734C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1487+ 734F             >
1487+ 734F             >
1487+ 734F             >                endif           ; ok        // for other definitions it "points" the correct handler
1487+ 734F             >                // Use of "; ok" to suppress "warning[fwdref]"
1487+ 734F             >
1487+ 734F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1488+ 734F F5 6C                        dw      QTOHEAP
1489+ 7351 1C 69 7F 6A                  dw      DUP, ONE, TRAVERSE      // dup 1 traverse
1489+ 7355 71 6C
1490+ 7357 B7 68                        dw      ONE_PLUS                // 1+
1491+ 7359 F8 68 DC 6B                  dw      OVER, SUBTRACT          // over -
1492+ 735D 1C 69 5B 68                  dw      DUP, TO_R               // >r
1493+ 7361 AD 70 15 69                  dw      PAD, SWAP               // pad swap
1494+ 7365 8C 67                        dw      CMOVE                   // cmove
1495+ 7367 AD 70 B7 68                  dw      PAD, ONE_PLUS           // pad 1+
1496+ 736B 66 68 BE 68                  dw      R_TO, ONE_SUBTRACT      // R> 1-
1497+ 736F 6A 6F 66 6C                  dw      TYPE, SPACE             // type
1498+ 7373 51 68                        dw      EXIT                    // ;
1499+ 7375
1500+ 7375              //  ______________________________________________________________________
1501+ 7375              //
1502+ 7375              // code         -- cccc
1503+ 7375                              Colon_Def CODE,  "CODE", is_normal
1503+ 7375             >                New_Def  CODE, "CODE", Enter_Ptr, is_normal ; ok
1503+ 7375             >
1503+ 7375             >Dict_Ptr        defl    $
1503+ 7375             >
1503+ 7375             >//              ______________________________________________________________________
1503+ 7375             >//              Heap part
1503+ 7375             >
1503+ 7375             >
1503+ 7375             >                org     (Heap_Ptr & $1FFF) + $E000
1503+ E8C9             >
1503+ E8C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1503+ E8C9             >Latest_Definition defl  Heap_Ptr
1503+ E8C9             >
1503+ E8C9             >                // dummy db directives used to calculate length of namec
1503+ E8C9 43 4F 44 45 >                db      "CODE"
1503+ E8CD             >len_NFA         defl    $ - temp_NFA
1503+ E8CD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1503+ E8C9             >
1503+ E8C9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1503+ E8CA 43 4F 44 45 >                db      "CODE"               // name string in 7-bit ascii, but
1503+ E8CE             >                org     $-1                 // alter last byte of Name just above to set
1503+ E8CD C5          >                db      {b $} | END_BIT     // msb as name end
1503+ E8CE             >
1503+ E8CE C1 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1503+ E8D0             >Prev_Ptr        defl    Heap_Ptr
1503+ E8D0             >
1503+ E8D0             >mirror_Ptr      defl    $
1503+ E8D0             >
1503+ E8D0 77 73       >                dw      Dict_Ptr + 2        // xt
1503+ E8D2             >Heap_Ptr        defl    $ - $E000           // save current HP
1503+ E8D2             >
1503+ E8D2             >Current_HP      defl  $ - $E000             // used to set HP once!
1503+ E8D2             >
1503+ E8D2             >//              ______________________________________________________________________
1503+ E8D2             >//              Dictionary part
1503+ E8D2             >
1503+ E8D2             >                org     Dict_Ptr
1503+ 7375             >
1503+ 7375 D0 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1503+ 7377             >
1503+ 7377             >CODE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1503+ 7377 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1503+ 737A             >
1503+ 737A             >
1503+ 737A             >                endif           ; ok        // for other definitions it "points" the correct handler
1503+ 737A             >                // Use of "; ok" to suppress "warning[fwdref]"
1503+ 737A             >
1503+ 737A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1504+ 737A FE 72                        dw      LFIND                   // -find
1505+ 737C                                                              // if
1506+ 737C F3 63                        dw      ZBRANCH
1507+ 737E 10 00                        dw      Code_Endif - $
1508+ 7380 01 69                        dw          DROP                //      drop
1509+ 7382 5B 6D 4C 73                  dw          TO_NAME, ID_DOT     //      >name id.
1510+ 7386 A3 63 04 00                  dw          LIT, 4, MESSAGE     //      4 message
1510+ 738A 8D 77
1511+ 738C 66 6C                        dw          SPACE               //      space
1512+ 738E              Code_Endif:                                     // endif
1513+ 738E 9D 6B                        dw      HERE                    // here
1514+ 7390                                                              // ( ---- here begins NFA ---- )
1515+ 7390 1C 69 9B 69                  dw      DUP, CFETCH             // dup c@
1516+ 7394 E3 6A 86 69                  dw      WIDTH, FETCH, MIN       // width @ min  ( max 31 character length )
1516+ 7398 19 6C
1517+ 739A B7 68                        dw      ONE_PLUS                // 1+
1518+ 739C 1C 69 A8 6B                  dw      DUP, ALLOT              // dup allot
1519+ 73A0 CD 68 CD 68                  dw      CELL_PLUS, CELL_PLUS    // cell+ cell+
1520+ 73A4 5B 68                        dw      TO_R                    // >r
1521+ 73A6 1C 69                        dw      DUP                     // dup
1522+ 73A8 A3 63                        dw      LIT
1523+ 73AA A0 00                        dw      SMUDGE_BIT | END_BIT    // 160
1524+ 73AC 7D 69                        dw      TOGGLE                  // toggle
1525+ 73AE 9D 6B BE 68                  dw      HERE, ONE_SUBTRACT      // here 1- ( last character )
1526+ 73B2 A3 63 80 00                  dw      LIT, END_BIT, TOGGLE    // 128 toggle
1526+ 73B6 7D 69
1527+ 73B8                                                              // ( ---- here is LFA ---- )
1528+ 73B8 3D 6B 86 69                  dw      CURRENT, FETCH, FETCH   // current @ @ , \ latest ,
1528+ 73BC 86 69
1529+ 73BE B3 6B                        dw      COMMA
1530+ 73C0 1C 69 CD 68                  dw      DUP, CELL_PLUS, COMMA   // dup cell+ ,
1530+ 73C4 B3 6B
1531+ 73C6 06 6D                        dw      HP_FETCH                // hp@
1532+ 73C8 3D 6B 86 69                  dw      CURRENT, FETCH, STORE   // current @ ! ( save this word as the latest )
1532+ 73CC 90 69
1533+ 73CE 06 6D D7 6C                  dw      HP_FETCH, FAR           // hp@ far R@ cmove
1534+ 73D2 71 68 8C 67                  dw      R_OP, CMOVE
1535+ 73D6 71 68 DE 68                  dw      R_OP, MINUS, ALLOT      // r@ negate allot
1535+ 73DA A8 6B
1536+ 73DC 66 68 0D 6B                  dw      R_TO, HP, PLUSSTORE     // r> hp +!
1536+ 73E0 6E 69
1537+ 73E2 06 6D D1 68                  dw      HP_FETCH, CELL_MINUS    // hp@ cell- ,
1538+ 73E6 B3 6B                        dw      COMMA
1539+ 73E8 78 6A 18 6D                  dw      ZERO, SKIP_HP_PAGE
1540+ 73EC                                                              // ( ---- here is LFA ---- )
1541+ 73EC 51 68                        dw      EXIT                    // ;
1542+ 73EE
1543+ 73EE              //  ______________________________________________________________________
1544+ 73EE              //
1545+ 73EE              // create       -- cccc     ( compile time )
1546+ 73EE              //              -- a        ( run time )
1547+ 73EE                              Colon_Def CREATE,  "CREATE", is_normal
1547+ 73EE             >                New_Def  CREATE, "CREATE", Enter_Ptr, is_normal ; ok
1547+ 73EE             >
1547+ 73EE             >Dict_Ptr        defl    $
1547+ 73EE             >
1547+ 73EE             >//              ______________________________________________________________________
1547+ 73EE             >//              Heap part
1547+ 73EE             >
1547+ 73EE             >
1547+ 73EE             >                org     (Heap_Ptr & $1FFF) + $E000
1547+ E8D2             >
1547+ E8D2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1547+ E8D2             >Latest_Definition defl  Heap_Ptr
1547+ E8D2             >
1547+ E8D2             >                // dummy db directives used to calculate length of namec
1547+ E8D2 43 52 45 41 >                db      "CREATE"
1547+ E8D6 54 45       >
1547+ E8D8             >len_NFA         defl    $ - temp_NFA
1547+ E8D8             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1547+ E8D2             >
1547+ E8D2 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1547+ E8D3 43 52 45 41 >                db      "CREATE"               // name string in 7-bit ascii, but
1547+ E8D7 54 45       >
1547+ E8D9             >                org     $-1                 // alter last byte of Name just above to set
1547+ E8D8 C5          >                db      {b $} | END_BIT     // msb as name end
1547+ E8D9             >
1547+ E8D9 C9 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1547+ E8DB             >Prev_Ptr        defl    Heap_Ptr
1547+ E8DB             >
1547+ E8DB             >mirror_Ptr      defl    $
1547+ E8DB             >
1547+ E8DB F0 73       >                dw      Dict_Ptr + 2        // xt
1547+ E8DD             >Heap_Ptr        defl    $ - $E000           // save current HP
1547+ E8DD             >
1547+ E8DD             >Current_HP      defl  $ - $E000             // used to set HP once!
1547+ E8DD             >
1547+ E8DD             >//              ______________________________________________________________________
1547+ E8DD             >//              Dictionary part
1547+ E8DD             >
1547+ E8DD             >                org     Dict_Ptr
1547+ 73EE             >
1547+ 73EE DB 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1547+ 73F0             >
1547+ 73F0             >CREATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1547+ 73F0 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1547+ 73F3             >
1547+ 73F3             >
1547+ 73F3             >                endif           ; ok        // for other definitions it "points" the correct handler
1547+ 73F3             >                // Use of "; ok" to suppress "warning[fwdref]"
1547+ 73F3             >
1547+ 73F3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1548+ 73F3 77 73 7B 6E                  dw      CODE, SMUDGE            // code smudge
1549+ 73F7 A3 63 CD 00                  dw      LIT, $CD, CCOMMA        // 00CD c,
1549+ 73FB C2 6B
1550+ 73FD A3 63 5F 6A                  dw      LIT, Variable_Ptr, COMMA// Variable_Ptr ,
1550+ 7401 B3 6B
1551+ 7403 B7 6E                        dw      C_SEMICOLON_CODE
1552+ 7405                              // this routine is called from the call coded in CFA
1553+ 7405              Create_Ptr:
1554+ 7405
1555+ 7405
1556+ 7405
1557+ 7405                              next
1557+ 7405 DD E9       >                jp      (ix)
1558+ 7407
1559+ 7407              //  ______________________________________________________________________
1560+ 7407              //
1561+ 7407              // [compile]    -- cccc     ( compile time )
1562+ 7407                              Colon_Def COMPILE_IMMEDIATE,  "[COMPILE]", is_immediate
1562+ 7407             >                New_Def  COMPILE_IMMEDIATE, "[COMPILE]", Enter_Ptr, is_immediate ; ok
1562+ 7407             >
1562+ 7407             >Dict_Ptr        defl    $
1562+ 7407             >
1562+ 7407             >//              ______________________________________________________________________
1562+ 7407             >//              Heap part
1562+ 7407             >
1562+ 7407             >
1562+ 7407             >                org     (Heap_Ptr & $1FFF) + $E000
1562+ E8DD             >
1562+ E8DD             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1562+ E8DD             >Latest_Definition defl  Heap_Ptr
1562+ E8DD             >
1562+ E8DD             >                // dummy db directives used to calculate length of namec
1562+ E8DD 5B 43 4F 4D >                db      "[COMPILE]"
1562+ E8E1 50 49 4C 45 >
1562+ E8E5 5D          >
1562+ E8E6             >len_NFA         defl    $ - temp_NFA
1562+ E8E6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1562+ E8DD             >
1562+ E8DD C9          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1562+ E8DE 5B 43 4F 4D >                db      "[COMPILE]"               // name string in 7-bit ascii, but
1562+ E8E2 50 49 4C 45 >
1562+ E8E6 5D          >
1562+ E8E7             >                org     $-1                 // alter last byte of Name just above to set
1562+ E8E6 DD          >                db      {b $} | END_BIT     // msb as name end
1562+ E8E7             >
1562+ E8E7 D2 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1562+ E8E9             >Prev_Ptr        defl    Heap_Ptr
1562+ E8E9             >
1562+ E8E9             >mirror_Ptr      defl    $
1562+ E8E9             >
1562+ E8E9 09 74       >                dw      Dict_Ptr + 2        // xt
1562+ E8EB             >Heap_Ptr        defl    $ - $E000           // save current HP
1562+ E8EB             >
1562+ E8EB             >Current_HP      defl  $ - $E000             // used to set HP once!
1562+ E8EB             >
1562+ E8EB             >//              ______________________________________________________________________
1562+ E8EB             >//              Dictionary part
1562+ E8EB             >
1562+ E8EB             >                org     Dict_Ptr
1562+ 7407             >
1562+ 7407 E9 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1562+ 7409             >
1562+ 7409             >COMPILE_IMMEDIATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1562+ 7409 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1562+ 740C             >
1562+ 740C             >
1562+ 740C             >                endif           ; ok        // for other definitions it "points" the correct handler
1562+ 740C             >                // Use of "; ok" to suppress "warning[fwdref]"
1562+ 740C             >
1562+ 740C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1563+ 740C FE 72                        dw      LFIND                   // -find      (  cfa  b  f  )
1564+ 740E 76 68                        dw      ZEQUAL                  // 0=         (  cfa  b  )
1565+ 7410 78 6A D1 6D                  dw      ZERO, QERROR            // 0 ?error
1566+ 7414 01 69                        dw      DROP                    // drop       (  cfa  )
1567+ 7416 B3 6B                        dw      COMMA                   // ,
1568+ 7418 51 68                        dw      EXIT                    // ; immediate
1569+ 741A
1570+ 741A              //  ______________________________________________________________________
1571+ 741A              //
1572+ 741A              // literal      n --      ( compile time )
1573+ 741A                              Colon_Def LITERAL,  "LITERAL", is_immediate
1573+ 741A             >                New_Def  LITERAL, "LITERAL", Enter_Ptr, is_immediate ; ok
1573+ 741A             >
1573+ 741A             >Dict_Ptr        defl    $
1573+ 741A             >
1573+ 741A             >//              ______________________________________________________________________
1573+ 741A             >//              Heap part
1573+ 741A             >
1573+ 741A             >
1573+ 741A             >                org     (Heap_Ptr & $1FFF) + $E000
1573+ E8EB             >
1573+ E8EB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1573+ E8EB             >Latest_Definition defl  Heap_Ptr
1573+ E8EB             >
1573+ E8EB             >                // dummy db directives used to calculate length of namec
1573+ E8EB 4C 49 54 45 >                db      "LITERAL"
1573+ E8EF 52 41 4C    >
1573+ E8F2             >len_NFA         defl    $ - temp_NFA
1573+ E8F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1573+ E8EB             >
1573+ E8EB C7          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1573+ E8EC 4C 49 54 45 >                db      "LITERAL"               // name string in 7-bit ascii, but
1573+ E8F0 52 41 4C    >
1573+ E8F3             >                org     $-1                 // alter last byte of Name just above to set
1573+ E8F2 CC          >                db      {b $} | END_BIT     // msb as name end
1573+ E8F3             >
1573+ E8F3 DD 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1573+ E8F5             >Prev_Ptr        defl    Heap_Ptr
1573+ E8F5             >
1573+ E8F5             >mirror_Ptr      defl    $
1573+ E8F5             >
1573+ E8F5 1C 74       >                dw      Dict_Ptr + 2        // xt
1573+ E8F7             >Heap_Ptr        defl    $ - $E000           // save current HP
1573+ E8F7             >
1573+ E8F7             >Current_HP      defl  $ - $E000             // used to set HP once!
1573+ E8F7             >
1573+ E8F7             >//              ______________________________________________________________________
1573+ E8F7             >//              Dictionary part
1573+ E8F7             >
1573+ E8F7             >                org     Dict_Ptr
1573+ 741A             >
1573+ 741A F5 08       >                dw      mirror_Ptr - $E000 + Heap_offset
1573+ 741C             >
1573+ 741C             >LITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1573+ 741C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1573+ 741F             >
1573+ 741F             >
1573+ 741F             >                endif           ; ok        // for other definitions it "points" the correct handler
1573+ 741F             >                // Use of "; ok" to suppress "warning[fwdref]"
1573+ 741F             >
1573+ 741F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1574+ 741F 43 6B 86 69                  dw      STATE, FETCH            // state @
1575+ 7423                                                              // if
1576+ 7423 F3 63                        dw      ZBRANCH
1577+ 7425 08 00                        dw      Literal_Endif - $
1578+ 7427 41 6E A3 63                  dw          COMPILE, LIT        //      compile lit
1579+ 742B B3 6B                        dw          COMMA               //      ,
1580+ 742D              Literal_Endif:                                  // endif
1581+ 742D 51 68                        dw      EXIT                    // ; immediate
1582+ 742F
1583+ 742F              //  ______________________________________________________________________
1584+ 742F              //
1585+ 742F              // dliteral     n --      ( compile time )
1586+ 742F                              Colon_Def DLITERAL,  "DLITERAL", is_immediate
1586+ 742F             >                New_Def  DLITERAL, "DLITERAL", Enter_Ptr, is_immediate ; ok
1586+ 742F             >
1586+ 742F             >Dict_Ptr        defl    $
1586+ 742F             >
1586+ 742F             >//              ______________________________________________________________________
1586+ 742F             >//              Heap part
1586+ 742F             >
1586+ 742F             >
1586+ 742F             >                org     (Heap_Ptr & $1FFF) + $E000
1586+ E8F7             >
1586+ E8F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1586+ E8F7             >Latest_Definition defl  Heap_Ptr
1586+ E8F7             >
1586+ E8F7             >                // dummy db directives used to calculate length of namec
1586+ E8F7 44 4C 49 54 >                db      "DLITERAL"
1586+ E8FB 45 52 41 4C >
1586+ E8FF             >len_NFA         defl    $ - temp_NFA
1586+ E8FF             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1586+ E8F7             >
1586+ E8F7 C8          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1586+ E8F8 44 4C 49 54 >                db      "DLITERAL"               // name string in 7-bit ascii, but
1586+ E8FC 45 52 41 4C >
1586+ E900             >                org     $-1                 // alter last byte of Name just above to set
1586+ E8FF CC          >                db      {b $} | END_BIT     // msb as name end
1586+ E900             >
1586+ E900 EB 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1586+ E902             >Prev_Ptr        defl    Heap_Ptr
1586+ E902             >
1586+ E902             >mirror_Ptr      defl    $
1586+ E902             >
1586+ E902 31 74       >                dw      Dict_Ptr + 2        // xt
1586+ E904             >Heap_Ptr        defl    $ - $E000           // save current HP
1586+ E904             >
1586+ E904             >Current_HP      defl  $ - $E000             // used to set HP once!
1586+ E904             >
1586+ E904             >//              ______________________________________________________________________
1586+ E904             >//              Dictionary part
1586+ E904             >
1586+ E904             >                org     Dict_Ptr
1586+ 742F             >
1586+ 742F 02 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1586+ 7431             >
1586+ 7431             >DLITERAL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1586+ 7431 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1586+ 7434             >
1586+ 7434             >
1586+ 7434             >                endif           ; ok        // for other definitions it "points" the correct handler
1586+ 7434             >                // Use of "; ok" to suppress "warning[fwdref]"
1586+ 7434             >
1586+ 7434             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1587+ 7434 43 6B 86 69                  dw      STATE, FETCH            // state @
1588+ 7438                                                              // if
1589+ 7438 F3 63                        dw      ZBRANCH
1590+ 743A 08 00                        dw      DLiteral_Endif - $
1591+ 743C 15 69                        dw          SWAP                //      swap
1592+ 743E 1C 74 1C 74                  dw          LITERAL,  LITERAL   //      [compile] literal [compile] literal
1593+ 7442              DLiteral_Endif:                                 // endif
1594+ 7442 51 68                        dw      EXIT                    // ; immediate
1595+ 7444
1596+ 7444              //  ______________________________________________________________________
1597+ 7444              //
1598+ 7444              // [char]       n --      ( compile time )
1599+ 7444              // inside colon definition, gets first character from next input word
1600+ 7444              // and compiles it as literal.
1601+ 7444                              Colon_Def COMPILE_CHAR,  "[CHAR]", is_immediate
1601+ 7444             >                New_Def  COMPILE_CHAR, "[CHAR]", Enter_Ptr, is_immediate ; ok
1601+ 7444             >
1601+ 7444             >Dict_Ptr        defl    $
1601+ 7444             >
1601+ 7444             >//              ______________________________________________________________________
1601+ 7444             >//              Heap part
1601+ 7444             >
1601+ 7444             >
1601+ 7444             >                org     (Heap_Ptr & $1FFF) + $E000
1601+ E904             >
1601+ E904             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1601+ E904             >Latest_Definition defl  Heap_Ptr
1601+ E904             >
1601+ E904             >                // dummy db directives used to calculate length of namec
1601+ E904 5B 43 48 41 >                db      "[CHAR]"
1601+ E908 52 5D       >
1601+ E90A             >len_NFA         defl    $ - temp_NFA
1601+ E90A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1601+ E904             >
1601+ E904 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1601+ E905 5B 43 48 41 >                db      "[CHAR]"               // name string in 7-bit ascii, but
1601+ E909 52 5D       >
1601+ E90B             >                org     $-1                 // alter last byte of Name just above to set
1601+ E90A DD          >                db      {b $} | END_BIT     // msb as name end
1601+ E90B             >
1601+ E90B F7 08       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1601+ E90D             >Prev_Ptr        defl    Heap_Ptr
1601+ E90D             >
1601+ E90D             >mirror_Ptr      defl    $
1601+ E90D             >
1601+ E90D 46 74       >                dw      Dict_Ptr + 2        // xt
1601+ E90F             >Heap_Ptr        defl    $ - $E000           // save current HP
1601+ E90F             >
1601+ E90F             >Current_HP      defl  $ - $E000             // used to set HP once!
1601+ E90F             >
1601+ E90F             >//              ______________________________________________________________________
1601+ E90F             >//              Dictionary part
1601+ E90F             >
1601+ E90F             >                org     Dict_Ptr
1601+ 7444             >
1601+ 7444 0D 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1601+ 7446             >
1601+ 7446             >COMPILE_CHAR:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1601+ 7446 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1601+ 7449             >
1601+ 7449             >
1601+ 7449             >                endif           ; ok        // for other definitions it "points" the correct handler
1601+ 7449             >                // Use of "; ok" to suppress "warning[fwdref]"
1601+ 7449             >
1601+ 7449             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1602+ 7449 1E 71 1C 74                  dw      CHAR, LITERAL           // char [compile] literal
1603+ 744D 51 68                        dw      EXIT                    // ; immediate
1604+ 744F
1605+ 744F              //  ______________________________________________________________________
1606+ 744F              //
1607+ 744F              // 0x00         n --      ( compile time )
1608+ 744F                              Colon_Def NUL_WORD,  $00, is_immediate
1608+ 744F             >                New_Def  NUL_WORD, $00, Enter_Ptr, is_immediate ; ok
1608+ 744F             >
1608+ 744F             >Dict_Ptr        defl    $
1608+ 744F             >
1608+ 744F             >//              ______________________________________________________________________
1608+ 744F             >//              Heap part
1608+ 744F             >
1608+ 744F             >
1608+ 744F             >                org     (Heap_Ptr & $1FFF) + $E000
1608+ E90F             >
1608+ E90F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1608+ E90F             >Latest_Definition defl  Heap_Ptr
1608+ E90F             >
1608+ E90F             >                // dummy db directives used to calculate length of namec
1608+ E90F 00          >                db      $00
1608+ E910             >len_NFA         defl    $ - temp_NFA
1608+ E910             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1608+ E90F             >
1608+ E90F C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1608+ E910 00          >                db      $00               // name string in 7-bit ascii, but
1608+ E911             >                org     $-1                 // alter last byte of Name just above to set
1608+ E910 80          >                db      {b $} | END_BIT     // msb as name end
1608+ E911             >
1608+ E911 04 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1608+ E913             >Prev_Ptr        defl    Heap_Ptr
1608+ E913             >
1608+ E913             >mirror_Ptr      defl    $
1608+ E913             >
1608+ E913 51 74       >                dw      Dict_Ptr + 2        // xt
1608+ E915             >Heap_Ptr        defl    $ - $E000           // save current HP
1608+ E915             >
1608+ E915             >Current_HP      defl  $ - $E000             // used to set HP once!
1608+ E915             >
1608+ E915             >//              ______________________________________________________________________
1608+ E915             >//              Dictionary part
1608+ E915             >
1608+ E915             >                org     Dict_Ptr
1608+ 744F             >
1608+ 744F 13 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1608+ 7451             >
1608+ 7451             >NUL_WORD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1608+ 7451 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1608+ 7454             >
1608+ 7454             >
1608+ 7454             >                endif           ; ok        // for other definitions it "points" the correct handler
1608+ 7454             >                // Use of "; ok" to suppress "warning[fwdref]"
1608+ 7454             >
1608+ 7454             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1609+ 7454 19 6B 86 69                  dw      BLK, FETCH, ONE         // blk @ 1
1609+ 7458 7F 6A
1610+ 745A 0E 6C                        dw      GREATER                 // > if
1611+ 745C                                                              // if
1612+ 745C F3 63                        dw      ZBRANCH
1613+ 745E 28 00                        dw      Nul_Else_1 - $
1614+ 7460 7F 6A 19 6B                  dw          ONE, BLK, PLUSSTORE //      1 blk +!
1614+ 7464 6E 69
1615+ 7466 78 6A 1F 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
1615+ 746A 90 69
1616+ 746C 19 6B 86 69                  dw          BLK, FETCH          //      blk @
1617+ 7470 B0 6A                        dw          BSCR                //      b/scr
1618+ 7472 BE 68                        dw          ONE_SUBTRACT        //      1 -
1619+ 7474 0B 68                        dw          AND_OP              //      and  ( this is tricky )
1620+ 7476 76 68                        dw          ZEQUAL              //      0=
1621+ 7478                                                              //      if
1622+ 7478 F3 63                        dw          ZBRANCH
1623+ 747A 08 00                        dw          Nul_Endif_2 - $
1624+ 747C F9 6D                        dw              QEXEC           //          ?exec
1625+ 747E 66 68 01 69                  dw              R_TO, DROP      //          r> drop
1626+ 7482              Nul_Endif_2:                                    //      endif
1627+ 7482 EF 63                        dw      BRANCH
1628+ 7484 06 00                        dw      Nul_Endif_1 - $
1629+ 7486              Nul_Else_1:                                     // else
1630+ 7486 66 68 01 69                  dw          R_TO, DROP          //      r> drop
1631+ 748A              Nul_Endif_1:                                    // endif
1632+ 748A 51 68                        dw      EXIT                    // ;
1633+ 748C
1634+ 748C              //  ______________________________________________________________________
1635+ 748C              //
1636+ 748C              // ?stack       --
1637+ 748C              // Raise error #1 if stack is empty and you pop it
1638+ 748C              // Raise error #7 if stack is full.
1639+ 748C              // This means SP must always stay between HERE and FFFF
1640+ 748C              // For 128K BANK paging purpose SP must be <= BFE0 and 50 words room
1641+ 748C              // for Next 8K MMU paging this is $DOE8
1642+ 748C                              Colon_Def QSTACK, "?STACK", is_normal
1642+ 748C             >                New_Def  QSTACK, "?STACK", Enter_Ptr, is_normal ; ok
1642+ 748C             >
1642+ 748C             >Dict_Ptr        defl    $
1642+ 748C             >
1642+ 748C             >//              ______________________________________________________________________
1642+ 748C             >//              Heap part
1642+ 748C             >
1642+ 748C             >
1642+ 748C             >                org     (Heap_Ptr & $1FFF) + $E000
1642+ E915             >
1642+ E915             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1642+ E915             >Latest_Definition defl  Heap_Ptr
1642+ E915             >
1642+ E915             >                // dummy db directives used to calculate length of namec
1642+ E915 3F 53 54 41 >                db      "?STACK"
1642+ E919 43 4B       >
1642+ E91B             >len_NFA         defl    $ - temp_NFA
1642+ E91B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1642+ E915             >
1642+ E915 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
1642+ E916 3F 53 54 41 >                db      "?STACK"               // name string in 7-bit ascii, but
1642+ E91A 43 4B       >
1642+ E91C             >                org     $-1                 // alter last byte of Name just above to set
1642+ E91B CB          >                db      {b $} | END_BIT     // msb as name end
1642+ E91C             >
1642+ E91C 0F 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1642+ E91E             >Prev_Ptr        defl    Heap_Ptr
1642+ E91E             >
1642+ E91E             >mirror_Ptr      defl    $
1642+ E91E             >
1642+ E91E 8E 74       >                dw      Dict_Ptr + 2        // xt
1642+ E920             >Heap_Ptr        defl    $ - $E000           // save current HP
1642+ E920             >
1642+ E920             >Current_HP      defl  $ - $E000             // used to set HP once!
1642+ E920             >
1642+ E920             >//              ______________________________________________________________________
1642+ E920             >//              Dictionary part
1642+ E920             >
1642+ E920             >                org     Dict_Ptr
1642+ 748C             >
1642+ 748C 1E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
1642+ 748E             >
1642+ 748E             >QSTACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1642+ 748E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1642+ 7491             >
1642+ 7491             >
1642+ 7491             >                endif           ; ok        // for other definitions it "points" the correct handler
1642+ 7491             >                // Use of "; ok" to suppress "warning[fwdref]"
1642+ 7491             >
1642+ 7491             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1643+ 7491 38 68                        dw      SPFETCH                 // sp@
1644+ 7493 D1 6A 86 69                  dw      S0, FETCH               // s0 @
1645+ 7497 15 69 F3 6B                  dw      SWAP, ULESS             // swap u<
1646+ 749B 7F 6A D1 6D                  dw      ONE, QERROR             // 1 ?error
1647+ 749F 9D 6B                        dw      HERE                    // here
1648+ 74A1 D1 6A 86 69                  dw      S0, FETCH, LESS         // s0 @ <
1648+ 74A5 01 6C
1649+ 74A7                                                              // if
1650+ 74A7 F3 63                        dw      ZBRANCH
1651+ 74A9 14 00                        dw      QStack_Endif - $
1652+ 74AB 38 68                        dw          SPFETCH             //      sp@
1653+ 74AD 9D 6B A3 63                  dw          HERE, LIT, 128      //      here 128
1653+ 74B1 80 00
1654+ 74B3 9E 68 F3 6B                  dw          PLUS, ULESS         //      plus u<
1655+ 74B7 A3 63 07 00                  dw          LIT, 7, QERROR      //      7 Cerror
1655+ 74BB D1 6D
1656+ 74BD              QStack_Endif:                                   // endif
1657+ 74BD 51 68                        dw      EXIT                    // ;
1658+ 74BF
1659+ 74BF
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L1.asm
 141  74BF                              include "L2.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L2.asm
   1+ 74BF              //  ______________________________________________________________________
   2+ 74BF              //
   3+ 74BF              //  L2.asm
   4+ 74BF              //
   5+ 74BF              //  Level-2 3dos
   6+ 74BF              //  the Forth interpreter, vocabulary, cold/warm start and quit from Forth.
   7+ 74BF              //  ______________________________________________________________________
   8+ 74BF
   9+ 74BF
  10+ 74BF              //  ______________________________________________________________________
  11+ 74BF              //
  12+ 74BF              // interpret    --
  13+ 74BF              // This is the text interpreter.
  14+ 74BF              // It executes or compiles, depending on STATE, the text coming from
  15+ 74BF              // current input stream.
  16+ 74BF              // If the word search fails after parsing CONTEXT and CURRENT vocabulary,
  17+ 74BF              // the word is interpreted as numeric and converted, using current BASE,
  18+ 74BF              // leaving on top of stack a single or double precision number, depending
  19+ 74BF              // on the presence of a decimal point.
  20+ 74BF              // If the number conversion fails, the terminal is notified with ? followed
  21+ 74BF              // by the offending word.
  22+ 74BF                              Colon_Def INTERPRET, "INTERPRET", is_normal
  22+ 74BF             >                New_Def  INTERPRET, "INTERPRET", Enter_Ptr, is_normal ; ok
  22+ 74BF             >
  22+ 74BF             >Dict_Ptr        defl    $
  22+ 74BF             >
  22+ 74BF             >//              ______________________________________________________________________
  22+ 74BF             >//              Heap part
  22+ 74BF             >
  22+ 74BF             >
  22+ 74BF             >                org     (Heap_Ptr & $1FFF) + $E000
  22+ E920             >
  22+ E920             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  22+ E920             >Latest_Definition defl  Heap_Ptr
  22+ E920             >
  22+ E920             >                // dummy db directives used to calculate length of namec
  22+ E920 49 4E 54 45 >                db      "INTERPRET"
  22+ E924 52 50 52 45 >
  22+ E928 54          >
  22+ E929             >len_NFA         defl    $ - temp_NFA
  22+ E929             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  22+ E920             >
  22+ E920 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  22+ E921 49 4E 54 45 >                db      "INTERPRET"               // name string in 7-bit ascii, but
  22+ E925 52 50 52 45 >
  22+ E929 54          >
  22+ E92A             >                org     $-1                 // alter last byte of Name just above to set
  22+ E929 D4          >                db      {b $} | END_BIT     // msb as name end
  22+ E92A             >
  22+ E92A 15 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  22+ E92C             >Prev_Ptr        defl    Heap_Ptr
  22+ E92C             >
  22+ E92C             >mirror_Ptr      defl    $
  22+ E92C             >
  22+ E92C C1 74       >                dw      Dict_Ptr + 2        // xt
  22+ E92E             >Heap_Ptr        defl    $ - $E000           // save current HP
  22+ E92E             >
  22+ E92E             >Current_HP      defl  $ - $E000             // used to set HP once!
  22+ E92E             >
  22+ E92E             >//              ______________________________________________________________________
  22+ E92E             >//              Dictionary part
  22+ E92E             >
  22+ E92E             >                org     Dict_Ptr
  22+ 74BF             >
  22+ 74BF 2C 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  22+ 74C1             >
  22+ 74C1             >INTERPRET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  22+ 74C1 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  22+ 74C4             >
  22+ 74C4             >
  22+ 74C4             >                endif           ; ok        // for other definitions it "points" the correct handler
  22+ 74C4             >                // Use of "; ok" to suppress "warning[fwdref]"
  22+ 74C4             >
  22+ 74C4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  23+ 74C4
  24+ 74C4              Interpret_Begin:                                        // begin
  25+ 74C4 FE 72                        dw          LFIND                       //      -find
  26+ 74C6                                                                      //      if
  27+ 74C6 F3 63                        dw          ZBRANCH
  28+ 74C8 1A 00                        dw          Interpret_Else_1 - $
  29+ 74CA 43 6B 86 69                  dw              STATE, FETCH, LESS      //          state @ <
  29+ 74CE 01 6C
  30+ 74D0                                                                      //          if
  31+ 74D0 F3 63                        dw              ZBRANCH
  32+ 74D2 08 00                        dw              Interpret_Else_2 - $
  33+ 74D4 56 6E                        dw                  COMPILE_XT          //              compile,
  34+ 74D6                                                                      //          else
  35+ 74D6 EF 63                        dw              BRANCH
  36+ 74D8 06 00                        dw              Interpret_Endif_2 - $
  37+ 74DA              Interpret_Else_2:
  38+ 74DA AE 63 3F 6A                  dw                  EXECUTE, NOOP       //              execute nooop
  39+ 74DE              Interpret_Endif_2:                                      //          endif
  40+ 74DE                                                                      //      else
  41+ 74DE EF 63                        dw          BRANCH
  42+ 74E0 1A 00                        dw          Interpret_Endif_1 - $
  43+ 74E2              Interpret_Else_1:
  44+ 74E2 9D 6B 50 72                  dw              HERE, NUMBER            //          here number
  45+ 74E6 4F 6B 86 69                  dw              DPL, FETCH, ONE_PLUS    //          dpl @ 1+
  45+ 74EA B7 68
  46+ 74EC                                                                      //          if
  47+ 74EC F3 63                        dw              ZBRANCH
  48+ 74EE 08 00                        dw              Interpret_Else_3 - $
  49+ 74F0              //              dw                  NMODE, FETCH        //              nmode @
  50+ 74F0              //                                                      //              if
  51+ 74F0              //              dw                  ZBRANCH
  52+ 74F0              //              dw                  Interpret_Endif_4 - $
  53+ 74F0              //              dw                      ONE, ZERO       //                  1 0
  54+ 74F0              //              dw                      TWO_DROP        //                  2drop
  55+ 74F0              //Interpret_Endif_4:                                      //              endif
  56+ 74F0 31 74                        dw                  DLITERAL            //              [compile] dliteral
  57+ 74F2                                                                      //          else
  58+ 74F2 EF 63                        dw              BRANCH
  59+ 74F4 06 00                        dw              Interpret_Endif_3 - $
  60+ 74F6              Interpret_Else_3:
  61+ 74F6 01 69                        dw                  DROP                //              drop
  62+ 74F8 1C 74                        dw                  LITERAL             //              [compile]  literal
  63+ 74FA              Interpret_Endif_3:                                      //          endif
  64+ 74FA              Interpret_Endif_1:                                      //      endif
  65+ 74FA 8E 74                        dw          QSTACK                      //      ?stack
  66+ 74FC A6 66                        dw          QTERMINAL                   //      ?terminal
  67+ 74FE                                                                      //      if
  68+ 74FE F3 63                        dw          ZBRANCH
  69+ 7500 04 00                        dw          Interpret_Endif_5 - $
  70+ 7502 63 75                        dw              QUIT                    //          quit
  71+ 7504              Interpret_Endif_5:                                      //      endif
  72+ 7504 EF 63                        dw      BRANCH
  73+ 7506 BE FF                        dw      Interpret_Begin - $
  74+ 7508 51 68                        dw      EXIT                            // ;
  75+ 750A
  76+ 750A              //  ______________________________________________________________________
  77+ 750A              //
  78+ 750A              // vocabulary   -- cccc     ( compile time )
  79+ 750A              // Defining word used in the form   VOCABULARY cccc
  80+ 750A              // creates the word  cccc  that gives the name to the vocabulary.
  81+ 750A              // Giving  cccc  makes the vocabulary CONTEXT so its words are executed first
  82+ 750A              // Giving  cccc DEFINITIONS makes  the vocabulary  CURRENT
  83+ 750A              // so new definitions can be inserted in that vocabulary.
  84+ 750A                              Colon_Def VOCABULARY, "VOCABULARY", is_normal
  84+ 750A             >                New_Def  VOCABULARY, "VOCABULARY", Enter_Ptr, is_normal ; ok
  84+ 750A             >
  84+ 750A             >Dict_Ptr        defl    $
  84+ 750A             >
  84+ 750A             >//              ______________________________________________________________________
  84+ 750A             >//              Heap part
  84+ 750A             >
  84+ 750A             >
  84+ 750A             >                org     (Heap_Ptr & $1FFF) + $E000
  84+ E92E             >
  84+ E92E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  84+ E92E             >Latest_Definition defl  Heap_Ptr
  84+ E92E             >
  84+ E92E             >                // dummy db directives used to calculate length of namec
  84+ E92E 56 4F 43 41 >                db      "VOCABULARY"
  84+ E932 42 55 4C 41 >
  84+ E936 52 59       >
  84+ E938             >len_NFA         defl    $ - temp_NFA
  84+ E938             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  84+ E92E             >
  84+ E92E 8A          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  84+ E92F 56 4F 43 41 >                db      "VOCABULARY"               // name string in 7-bit ascii, but
  84+ E933 42 55 4C 41 >
  84+ E937 52 59       >
  84+ E939             >                org     $-1                 // alter last byte of Name just above to set
  84+ E938 D9          >                db      {b $} | END_BIT     // msb as name end
  84+ E939             >
  84+ E939 20 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  84+ E93B             >Prev_Ptr        defl    Heap_Ptr
  84+ E93B             >
  84+ E93B             >mirror_Ptr      defl    $
  84+ E93B             >
  84+ E93B 0C 75       >                dw      Dict_Ptr + 2        // xt
  84+ E93D             >Heap_Ptr        defl    $ - $E000           // save current HP
  84+ E93D             >
  84+ E93D             >Current_HP      defl  $ - $E000             // used to set HP once!
  84+ E93D             >
  84+ E93D             >//              ______________________________________________________________________
  84+ E93D             >//              Dictionary part
  84+ E93D             >
  84+ E93D             >                org     Dict_Ptr
  84+ 750A             >
  84+ 750A 3B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
  84+ 750C             >
  84+ 750C             >VOCABULARY:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  84+ 750C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  84+ 750F             >
  84+ 750F             >
  84+ 750F             >                endif           ; ok        // for other definitions it "points" the correct handler
  84+ 750F             >                // Use of "; ok" to suppress "warning[fwdref]"
  84+ 750F             >
  84+ 750F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  85+ 750F
  86+ 750F F0 73                        dw      CREATE
  87+ 7511
  88+ 7511                              // dummy word + link part
  89+ 7511 A3 63 81 A0                  dw      LIT, $A081, COMMA       // $81A0 ,
  89+ 7515 B3 6B
  90+ 7517 3D 6B 86 69                  dw      CURRENT, FETCH          // current @
  91+ 751B 86 69                        dw      FETCH                   // @
  92+ 751D                          //  dw      CELL_MINUS              // cell-
  93+ 751D B3 6B                        dw      COMMA                   // ,
  94+ 751F
  95+ 751F                              // voc-link part
  96+ 751F 9D 6B                        dw      HERE                    // here
  97+ 7521 FB 6A 86 69                  dw      VOC_LINK, FETCH         // voc-link @
  98+ 7525 B3 6B                        dw      COMMA                   // ,
  99+ 7527 FB 6A 90 69                  dw      VOC_LINK, STORE         // voc-link !
 100+ 752B                              // DOES part
 101+ 752B EC 6E                        dw      C_DOES                  // _does>_
 102+ 752D              Vocabulary_Does:
 103+ 752D                        //    nop
 104+ 752D CD 23 6A                     call    Enter_Ptr
 105+ 7530
 106+ 7530 CD 68                        dw      CELL_PLUS               // cell+
 107+ 7532 37 6B 90 69                  dw      CONTEXT, STORE          // context !
 108+ 7536 51 68                        dw      EXIT                    // ;
 109+ 7538
 110+ 7538              //  ______________________________________________________________________
 111+ 7538              //
 112+ 7538              // forth        --
 113+ 7538              // Name of the first vocabulary.
 114+ 7538              // It makes FORTH the CONTEXT vocabulary.
 115+ 7538              // Until new user vocabulary are defined, new colon-definitions becomes
 116+ 7538              // part of FORTH. It is immediate, so it will executed during the creation
 117+ 7538              // of a colon definition to be able to select the vocabulary.
 118+ 7538
 119+ 7538                              New_Def FORTH, "FORTH", Vocabulary_Does, is_immediate
 119+ 7538             >
 119+ 7538             >Dict_Ptr        defl    $
 119+ 7538             >
 119+ 7538             >//              ______________________________________________________________________
 119+ 7538             >//              Heap part
 119+ 7538             >
 119+ 7538             >
 119+ 7538             >                org     (Heap_Ptr & $1FFF) + $E000
 119+ E93D             >
 119+ E93D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 119+ E93D             >Latest_Definition defl  Heap_Ptr
 119+ E93D             >
 119+ E93D             >                // dummy db directives used to calculate length of namec
 119+ E93D 46 4F 52 54 >                db      "FORTH"
 119+ E941 48          >
 119+ E942             >len_NFA         defl    $ - temp_NFA
 119+ E942             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 119+ E93D             >
 119+ E93D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 119+ E93E 46 4F 52 54 >                db      "FORTH"               // name string in 7-bit ascii, but
 119+ E942 48          >
 119+ E943             >                org     $-1                 // alter last byte of Name just above to set
 119+ E942 C8          >                db      {b $} | END_BIT     // msb as name end
 119+ E943             >
 119+ E943 2E 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 119+ E945             >Prev_Ptr        defl    Heap_Ptr
 119+ E945             >
 119+ E945             >mirror_Ptr      defl    $
 119+ E945             >
 119+ E945 3A 75       >                dw      Dict_Ptr + 2        // xt
 119+ E947             >Heap_Ptr        defl    $ - $E000           // save current HP
 119+ E947             >
 119+ E947             >Current_HP      defl  $ - $E000             // used to set HP once!
 119+ E947             >
 119+ E947             >//              ______________________________________________________________________
 119+ E947             >//              Dictionary part
 119+ E947             >
 119+ E947             >                org     Dict_Ptr
 119+ 7538             >
 119+ 7538 45 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 119+ 753A             >
 119+ 753A             >FORTH:          if Vocabulary_Does != 0 ; ok        // This is the start address of the direct jp(hl)
 119+ 753A CD 2D 75    >                call    Vocabulary_Does ; ok        // for primitive definitions  actual code
 119+ 753D             >
 119+ 753D             >
 119+ 753D             >                endif           ; ok        // for other definitions it "points" the correct handler
 119+ 753D             >                // Use of "; ok" to suppress "warning[fwdref]"
 119+ 753D             >
 119+ 753D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 120+ 753D
 121+ 753D 81 A0                        db      $81, $A0
 122+ 753F              Forth_Latest_Ptr:
 123+ 753F 3D 09                        dw      Latest_Definition
 124+ 7541              Voclink_Ptr:
 125+ 7541 00 00                        dw      0
 126+ 7543
 127+ 7543              // ____
 128+ 7543              // temp_VOC        defl    $                   // save this address
 129+ 7543              //              org     (Heap_Ptr & $1FFF) + $E000
 130+ 7543              //              db      $81, $A0
 131+ 7543              // Forth_Latest_Ptr_HEAP:
 132+ 7543              //                 dw      Latest_Definition
 133+ 7543              // Voclink_Ptr_HEAP:
 134+ 7543              //                 dw      0
 135+ 7543              // Heap_Ptr        defl    $ - $E000           // save current HP
 136+ 7543              //                 org     temp_VOC
 137+ 7543              // ____
 138+ 7543
 139+ 7543              // Any new vocabulary is structured as follow:
 140+ 7543              // PFA+0 points to DOES> part of VOCABULARY to perform CELL+ CONTEXT !
 141+ 7543              // PFA+2 is 81,A0 i.e. a null-word used as LATEST in the new vocabulary
 142+ 7543              // PFA+4 always contains the LATEST word of this VOCABULARY.
 143+ 7543              //       at creations it points to the null-word of its parent vocabulary
 144+ 7543              //       that is normally FORTH, For example ASSEMBLER points FORTH's null-word
 145+ 7543              // PFA+6 is the pointer that builds up the vocabulary linked list.
 146+ 7543              //       FORTH has 0 here to signal the end of the list and user's variable
 147+ 7543              //       VOC-LINK points to PFA+6 of the newest vocabulary created.
 148+ 7543              //       While FORTH is the only vocabulary, VOC-LINK points to FORTH's PFA+6
 149+ 7543              //       When ASSEMBLER is created, its PFA+6 points to FORTH's PFA+6, and so on
 150+ 7543
 151+ 7543              //  ______________________________________________________________________
 152+ 7543              //
 153+ 7543              // definitions  --
 154+ 7543              // Used in the form  cccc DEFINITIONS
 155+ 7543              // set the CURRENT vocabulary at CONTEXT to insert new definitions in
 156+ 7543              // vocabulary cccc.
 157+ 7543                              Colon_Def DEFINITIONS, "DEFINITIONS", is_normal
 157+ 7543             >                New_Def  DEFINITIONS, "DEFINITIONS", Enter_Ptr, is_normal ; ok
 157+ 7543             >
 157+ 7543             >Dict_Ptr        defl    $
 157+ 7543             >
 157+ 7543             >//              ______________________________________________________________________
 157+ 7543             >//              Heap part
 157+ 7543             >
 157+ 7543             >
 157+ 7543             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ E947             >
 157+ E947             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ E947             >Latest_Definition defl  Heap_Ptr
 157+ E947             >
 157+ E947             >                // dummy db directives used to calculate length of namec
 157+ E947 44 45 46 49 >                db      "DEFINITIONS"
 157+ E94B 4E 49 54 49 >
 157+ E94F 4F 4E 53    >
 157+ E952             >len_NFA         defl    $ - temp_NFA
 157+ E952             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ E947             >
 157+ E947 8B          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ E948 44 45 46 49 >                db      "DEFINITIONS"               // name string in 7-bit ascii, but
 157+ E94C 4E 49 54 49 >
 157+ E950 4F 4E 53    >
 157+ E953             >                org     $-1                 // alter last byte of Name just above to set
 157+ E952 D3          >                db      {b $} | END_BIT     // msb as name end
 157+ E953             >
 157+ E953 3D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ E955             >Prev_Ptr        defl    Heap_Ptr
 157+ E955             >
 157+ E955             >mirror_Ptr      defl    $
 157+ E955             >
 157+ E955 45 75       >                dw      Dict_Ptr + 2        // xt
 157+ E957             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ E957             >
 157+ E957             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ E957             >
 157+ E957             >//              ______________________________________________________________________
 157+ E957             >//              Dictionary part
 157+ E957             >
 157+ E957             >                org     Dict_Ptr
 157+ 7543             >
 157+ 7543 55 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 7545             >
 157+ 7545             >DEFINITIONS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 7545 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 7548             >
 157+ 7548             >
 157+ 7548             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 7548             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 7548             >
 157+ 7548             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 7548 37 6B 86 69                  dw      CONTEXT, FETCH          // context @
 159+ 754C 3D 6B 90 69                  dw      CURRENT, STORE          // current !
 160+ 7550 51 68                        dw      EXIT                    // ;
 161+ 7552
 162+ 7552              //  ______________________________________________________________________
 163+ 7552              //
 164+ 7552              // (            -- cccc )
 165+ 7552              // the following text is interpreted as a comment until a closing )
 166+ 7552                              Colon_Def COMMENT_BRAKET, "(", is_immediate
 166+ 7552             >                New_Def  COMMENT_BRAKET, "(", Enter_Ptr, is_immediate ; ok
 166+ 7552             >
 166+ 7552             >Dict_Ptr        defl    $
 166+ 7552             >
 166+ 7552             >//              ______________________________________________________________________
 166+ 7552             >//              Heap part
 166+ 7552             >
 166+ 7552             >
 166+ 7552             >                org     (Heap_Ptr & $1FFF) + $E000
 166+ E957             >
 166+ E957             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 166+ E957             >Latest_Definition defl  Heap_Ptr
 166+ E957             >
 166+ E957             >                // dummy db directives used to calculate length of namec
 166+ E957 28          >                db      "("
 166+ E958             >len_NFA         defl    $ - temp_NFA
 166+ E958             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 166+ E957             >
 166+ E957 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 166+ E958 28          >                db      "("               // name string in 7-bit ascii, but
 166+ E959             >                org     $-1                 // alter last byte of Name just above to set
 166+ E958 A8          >                db      {b $} | END_BIT     // msb as name end
 166+ E959             >
 166+ E959 47 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 166+ E95B             >Prev_Ptr        defl    Heap_Ptr
 166+ E95B             >
 166+ E95B             >mirror_Ptr      defl    $
 166+ E95B             >
 166+ E95B 54 75       >                dw      Dict_Ptr + 2        // xt
 166+ E95D             >Heap_Ptr        defl    $ - $E000           // save current HP
 166+ E95D             >
 166+ E95D             >Current_HP      defl  $ - $E000             // used to set HP once!
 166+ E95D             >
 166+ E95D             >//              ______________________________________________________________________
 166+ E95D             >//              Dictionary part
 166+ E95D             >
 166+ E95D             >                org     Dict_Ptr
 166+ 7552             >
 166+ 7552 5B 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 166+ 7554             >
 166+ 7554             >COMMENT_BRAKET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 166+ 7554 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 166+ 7557             >
 166+ 7557             >
 166+ 7557             >                endif           ; ok        // for other definitions it "points" the correct handler
 166+ 7557             >                // Use of "; ok" to suppress "warning[fwdref]"
 166+ 7557             >
 166+ 7557             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 167+ 7557 A3 63 29 00                  dw      LIT, ")"                // [char] )
 168+ 755B BC 70 01 69                  dw      WORD, DROP              // word drop
 169+ 755F 51 68                        dw      EXIT                    // ;
 170+ 7561
 171+ 7561              //  ______________________________________________________________________
 172+ 7561              //
 173+ 7561              // quit         --
 174+ 7561              // \ Erase the return-stack, stop any compilation and give controlo to the console. No message is issued.
 175+ 7561                              Colon_Def QUIT, "QUIT", is_normal
 175+ 7561             >                New_Def  QUIT, "QUIT", Enter_Ptr, is_normal ; ok
 175+ 7561             >
 175+ 7561             >Dict_Ptr        defl    $
 175+ 7561             >
 175+ 7561             >//              ______________________________________________________________________
 175+ 7561             >//              Heap part
 175+ 7561             >
 175+ 7561             >
 175+ 7561             >                org     (Heap_Ptr & $1FFF) + $E000
 175+ E95D             >
 175+ E95D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 175+ E95D             >Latest_Definition defl  Heap_Ptr
 175+ E95D             >
 175+ E95D             >                // dummy db directives used to calculate length of namec
 175+ E95D 51 55 49 54 >                db      "QUIT"
 175+ E961             >len_NFA         defl    $ - temp_NFA
 175+ E961             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 175+ E95D             >
 175+ E95D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 175+ E95E 51 55 49 54 >                db      "QUIT"               // name string in 7-bit ascii, but
 175+ E962             >                org     $-1                 // alter last byte of Name just above to set
 175+ E961 D4          >                db      {b $} | END_BIT     // msb as name end
 175+ E962             >
 175+ E962 57 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 175+ E964             >Prev_Ptr        defl    Heap_Ptr
 175+ E964             >
 175+ E964             >mirror_Ptr      defl    $
 175+ E964             >
 175+ E964 63 75       >                dw      Dict_Ptr + 2        // xt
 175+ E966             >Heap_Ptr        defl    $ - $E000           // save current HP
 175+ E966             >
 175+ E966             >Current_HP      defl  $ - $E000             // used to set HP once!
 175+ E966             >
 175+ E966             >//              ______________________________________________________________________
 175+ E966             >//              Dictionary part
 175+ E966             >
 175+ E966             >                org     Dict_Ptr
 175+ 7561             >
 175+ 7561 64 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 175+ 7563             >
 175+ 7563             >QUIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 175+ 7563 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 175+ 7566             >
 175+ 7566             >
 175+ 7566             >                endif           ; ok        // for other definitions it "points" the correct handler
 175+ 7566             >                // Use of "; ok" to suppress "warning[fwdref]"
 175+ 7566             >
 175+ 7566             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 176+ 7566
 177+ 7566 85 6B 86 69                  dw      SOURCE_ID, FETCH        // source-id @
 178+ 756A F4 66 01 69                  dw      F_CLOSE, DROP           // f_close drop
 179+ 756E 78 6A 85 6B                  dw      ZERO, SOURCE_ID, STORE  // 0 source-id !
 179+ 7572 90 69
 180+ 7574 78 6A 19 6B                  dw      ZERO, BLK, STORE        // 0 blk !
 180+ 7578 90 69
 181+ 757A 5F 6E                        dw      SQUARED_OPEN            // [compile] [
 182+ 757C                                                              // begin
 183+ 757C              Quit_Begin:
 184+ 757C D7 6A 86 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 184+ 7580 4C 68
 185+ 7582 AF 65                        dw      CR                      //      cr
 186+ 7584 59 70                        dw      QUERY                   //      query
 187+ 7586              Next_Breakpoint_1:
 188+ 7586 C1 74                        dw      INTERPRET               //      interpret
 189+ 7588 43 6B 86 69                  dw      STATE, FETCH, ZEQUAL    //      state @ 0=
 189+ 758C 76 68
 190+ 758E                                                              //      if
 191+ 758E F3 63                        dw      ZBRANCH
 192+ 7590 07 00                        dw      Quit_Endif - $
 193+ 7592 07 71                        dw          C_DOT_QUOTE
 194+ 7594 02 6F 6B                     db          2, "ok"             //          .( ok)
 195+ 7597              Quit_Endif:                                     //      else
 196+ 7597                                                              // again
 197+ 7597 EF 63                        dw      BRANCH
 198+ 7599 E3 FF                        dw      Quit_Begin - $
 199+ 759B 51 68                        dw      EXIT                    // ;
 200+ 759D
 201+ 759D              //  ______________________________________________________________________
 202+ 759D              //
 203+ 759D              // abort        --
 204+ 759D                              Colon_Def ABORT, "ABORT", is_normal
 204+ 759D             >                New_Def  ABORT, "ABORT", Enter_Ptr, is_normal ; ok
 204+ 759D             >
 204+ 759D             >Dict_Ptr        defl    $
 204+ 759D             >
 204+ 759D             >//              ______________________________________________________________________
 204+ 759D             >//              Heap part
 204+ 759D             >
 204+ 759D             >
 204+ 759D             >                org     (Heap_Ptr & $1FFF) + $E000
 204+ E966             >
 204+ E966             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 204+ E966             >Latest_Definition defl  Heap_Ptr
 204+ E966             >
 204+ E966             >                // dummy db directives used to calculate length of namec
 204+ E966 41 42 4F 52 >                db      "ABORT"
 204+ E96A 54          >
 204+ E96B             >len_NFA         defl    $ - temp_NFA
 204+ E96B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 204+ E966             >
 204+ E966 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 204+ E967 41 42 4F 52 >                db      "ABORT"               // name string in 7-bit ascii, but
 204+ E96B 54          >
 204+ E96C             >                org     $-1                 // alter last byte of Name just above to set
 204+ E96B D4          >                db      {b $} | END_BIT     // msb as name end
 204+ E96C             >
 204+ E96C 5D 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 204+ E96E             >Prev_Ptr        defl    Heap_Ptr
 204+ E96E             >
 204+ E96E             >mirror_Ptr      defl    $
 204+ E96E             >
 204+ E96E 9F 75       >                dw      Dict_Ptr + 2        // xt
 204+ E970             >Heap_Ptr        defl    $ - $E000           // save current HP
 204+ E970             >
 204+ E970             >Current_HP      defl  $ - $E000             // used to set HP once!
 204+ E970             >
 204+ E970             >//              ______________________________________________________________________
 204+ E970             >//              Dictionary part
 204+ E970             >
 204+ E970             >                org     Dict_Ptr
 204+ 759D             >
 204+ 759D 6E 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 204+ 759F             >
 204+ 759F             >ABORT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 204+ 759F CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 204+ 75A2             >
 204+ 75A2             >
 204+ 75A2             >                endif           ; ok        // for other definitions it "points" the correct handler
 204+ 75A2             >                // Use of "; ok" to suppress "warning[fwdref]"
 204+ 75A2             >
 204+ 75A2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 205+ 75A2 D1 6A 86 69                  dw      S0, FETCH               // s0 @
 206+ 75A6 9B 6A                        dw      BL                      // bl
 207+ 75A8 F8 68 90 69                  dw      OVER, STORE             // over !
 208+ 75AC 41 68                        dw      SPSTORE                 // sp!
 209+ 75AE A8 6E                        dw      DECIMAL                 // decimal
 210+ 75B0 3A 75                        dw      FORTH                   // [compile] forth
 211+ 75B2 45 75                        dw      DEFINITIONS             // definitions
 212+ 75B4
 213+ 75B4 5F 6E                        dw      SQUARED_OPEN            // [compile] [
 214+ 75B6 D7 6A 86 69                  dw      R0, FETCH, RPSTORE      //      r0 @ rp!
 214+ 75BA 4C 68
 215+ 75BC
 216+ 75BC              Autoexec_Ptr:
 217+ 75BC CE 7F                        dw      AUTOEXEC                // autoexec, patched to noop
 218+ 75BE 63 75                        dw      QUIT                    // quit
 219+ 75C0              //              dw      EXIT                    // ;
 220+ 75C0
 221+ 75C0              //  ______________________________________________________________________
 222+ 75C0              //
 223+ 75C0              // warm         --
 224+ 75C0                              Colon_Def WARM, "WARM", is_normal
 224+ 75C0             >                New_Def  WARM, "WARM", Enter_Ptr, is_normal ; ok
 224+ 75C0             >
 224+ 75C0             >Dict_Ptr        defl    $
 224+ 75C0             >
 224+ 75C0             >//              ______________________________________________________________________
 224+ 75C0             >//              Heap part
 224+ 75C0             >
 224+ 75C0             >
 224+ 75C0             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ E970             >
 224+ E970             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ E970             >Latest_Definition defl  Heap_Ptr
 224+ E970             >
 224+ E970             >                // dummy db directives used to calculate length of namec
 224+ E970 57 41 52 4D >                db      "WARM"
 224+ E974             >len_NFA         defl    $ - temp_NFA
 224+ E974             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ E970             >
 224+ E970 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ E971 57 41 52 4D >                db      "WARM"               // name string in 7-bit ascii, but
 224+ E975             >                org     $-1                 // alter last byte of Name just above to set
 224+ E974 CD          >                db      {b $} | END_BIT     // msb as name end
 224+ E975             >
 224+ E975 66 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ E977             >Prev_Ptr        defl    Heap_Ptr
 224+ E977             >
 224+ E977             >mirror_Ptr      defl    $
 224+ E977             >
 224+ E977 C2 75       >                dw      Dict_Ptr + 2        // xt
 224+ E979             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ E979             >
 224+ E979             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ E979             >
 224+ E979             >//              ______________________________________________________________________
 224+ E979             >//              Dictionary part
 224+ E979             >
 224+ E979             >                org     Dict_Ptr
 224+ 75C0             >
 224+ 75C0 77 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 75C2             >
 224+ 75C2             >WARM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 75C2 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 75C5             >
 224+ 75C5             >
 224+ 75C5             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 75C5             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 75C5             >
 224+ 75C5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 75C5 87 78                        dw      BLK_INIT                // blk-init
 226+ 75C7                          //  dw      SPLASH                  // splash
 227+ 75C7                          //  dw      LIT, 7, EMIT            // 7 emit
 228+ 75C7 9F 75                        dw      ABORT                   // abort
 229+ 75C9                          //  dw      EXIT                    // exit
 230+ 75C9
 231+ 75C9              //  ______________________________________________________________________
 232+ 75C9              //
 233+ 75C9              // cold         --
 234+ 75C9                              Colon_Def COLD, "COLD", is_normal
 234+ 75C9             >                New_Def  COLD, "COLD", Enter_Ptr, is_normal ; ok
 234+ 75C9             >
 234+ 75C9             >Dict_Ptr        defl    $
 234+ 75C9             >
 234+ 75C9             >//              ______________________________________________________________________
 234+ 75C9             >//              Heap part
 234+ 75C9             >
 234+ 75C9             >
 234+ 75C9             >                org     (Heap_Ptr & $1FFF) + $E000
 234+ E979             >
 234+ E979             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 234+ E979             >Latest_Definition defl  Heap_Ptr
 234+ E979             >
 234+ E979             >                // dummy db directives used to calculate length of namec
 234+ E979 43 4F 4C 44 >                db      "COLD"
 234+ E97D             >len_NFA         defl    $ - temp_NFA
 234+ E97D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 234+ E979             >
 234+ E979 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 234+ E97A 43 4F 4C 44 >                db      "COLD"               // name string in 7-bit ascii, but
 234+ E97E             >                org     $-1                 // alter last byte of Name just above to set
 234+ E97D C4          >                db      {b $} | END_BIT     // msb as name end
 234+ E97E             >
 234+ E97E 70 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 234+ E980             >Prev_Ptr        defl    Heap_Ptr
 234+ E980             >
 234+ E980             >mirror_Ptr      defl    $
 234+ E980             >
 234+ E980 CB 75       >                dw      Dict_Ptr + 2        // xt
 234+ E982             >Heap_Ptr        defl    $ - $E000           // save current HP
 234+ E982             >
 234+ E982             >Current_HP      defl  $ - $E000             // used to set HP once!
 234+ E982             >
 234+ E982             >//              ______________________________________________________________________
 234+ E982             >//              Dictionary part
 234+ E982             >
 234+ E982             >                org     Dict_Ptr
 234+ 75C9             >
 234+ 75C9 80 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 234+ 75CB             >
 234+ 75CB             >COLD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 234+ 75CB CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 234+ 75CE             >
 234+ 75CE             >
 234+ 75CE             >                endif           ; ok        // for other definitions it "points" the correct handler
 234+ 75CE             >                // Use of "; ok" to suppress "warning[fwdref]"
 234+ 75CE             >
 234+ 75CE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 235+ 75CE 3F 6A 3F 6A                  dw      NOOP, NOOP
 236+ 75D2 A3 63 78 63                  dw      LIT, S0_origin          // [ hex $12 +origin ] Literal
 237+ 75D6 A3 63 94 63                  dw      LIT, USER_Pointer       // [ hex $3E +origin ] literal
 238+ 75DA 86 69                        dw      FETCH                   // @
 239+ 75DC A3 63 06 00                  dw      LIT, 6, PLUS            // 6 +
 239+ 75E0 9E 68
 240+ 75E2 A3 63 16 00                  dw      LIT, 22                 // 22
 241+ 75E6 8C 67                        dw      CMOVE
 242+ 75E8 A3 63 72 63                  dw      LIT, Latest_origin      // [ hex 0C +origin ] literal
 243+ 75EC 86 69                        dw      FETCH                   // @
 244+ 75EE A3 63 3F 75                  dw      LIT, Forth_Latest_Ptr   // [ ' forth >body 4 + ] Literal
 245+ 75F2 90 69                        dw      STORE                   // !
 246+ 75F4 78 6A 13 6B                  dw      ZERO, NMODE, STORE      // 0 nmode !
 246+ 75F8 90 69
 247+ 75FA 01 6B 86 69                  dw      FIRST, FETCH, DUP       // first @ dup
 247+ 75FE 1C 69
 248+ 7600 6D 6B 90 69                  dw      USED, STORE             // used !
 249+ 7604 73 6B 90 69                  dw      PREV, STORE             // prev !
 250+ 7608 A3 63 04 00                  dw      LIT, 4, PLACE, STORE    // 4 place !
 250+ 760C 7F 6B 90 69
 251+ 7610              //              dw      LIT, 8
 252+ 7610              //              dw      LIT, FLAGS2, CSTORE     // 8 5C6A c!
 253+ 7610 1E 79                        dw      EMPTY_BUFFERS
 254+ 7612 78 6A 19 6B                  dw      ZERO, BLK, STORE
 254+ 7616 90 69
 255+ 7618 78 6A 85 6B                  dw      ZERO, SOURCE_ID, STORE
 255+ 761C 90 69
 256+ 761E
 257+ 761E A3 63 1A 00                  dw      LIT, 26, EMITC    // unlimited scroll
 257+ 7622 9B 65
 258+ 7624 78 6A 9B 65                  dw      ZERO, EMITC
 259+ 7628
 260+ 7628 C2 75        Warm_Start:     dw      WARM
 261+ 762A CB 75        Cold_Start:     dw      COLD
 262+ 762C              //              dw      EXIT
 263+ 762C
 264+ 762C              //  ______________________________________________________________________
 265+ 762C              WarmRoutine:
 266+ 762C              ColdRoutine:
 267+ 762C                              // First, save Basic's status: H'L' and SP
 268+ 762C D9                           exx
 269+ 762D E5                           push    hl                      // save Basic's return address
 270+ 762E D9                           exx
 271+ 762F ED 73 6E 63                  ld      (SP_Basic), sp
 272+ 7633
 273+ 7633                              // pre-set the four main 16-bit registers
 274+ 7633 ED 7B 78 63                  ld      sp, (S0_origin)         // Calculator Stack Pointer
 275+ 7637 2A 7A 63                     ld      hl, (R0_origin)         // Return Stack Pointer
 276+ 763A EB                           ex      de, hl
 277+ 763B DD 21 9A 63                  ld      ix, Next_Ptr            // Inner Interpreter Pointer
 278+ 763F 01 28 76                     ld      bc, Warm_Start          // Instruction Pointer
 279+ 7642
 280+ 7642 38 02                        jr      c, Warm_Skip
 281+ 7644 03                           inc     bc
 282+ 7645 03                           inc     bc
 283+ 7646              Warm_Skip:
 284+ 7646                              next
 284+ 7646 DD E9       >                jp      (ix)
 285+ 7648
 286+ 7648              //  ______________________________________________________________________
 287+ 7648              //
 288+ 7648              // basic        --
 289+ 7648                              New_Def BASIC, "BASIC", is_code, is_normal
 289+ 7648             >
 289+ 7648             >Dict_Ptr        defl    $
 289+ 7648             >
 289+ 7648             >//              ______________________________________________________________________
 289+ 7648             >//              Heap part
 289+ 7648             >
 289+ 7648             >
 289+ 7648             >                org     (Heap_Ptr & $1FFF) + $E000
 289+ E982             >
 289+ E982             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 289+ E982             >Latest_Definition defl  Heap_Ptr
 289+ E982             >
 289+ E982             >                // dummy db directives used to calculate length of namec
 289+ E982 42 41 53 49 >                db      "BASIC"
 289+ E986 43          >
 289+ E987             >len_NFA         defl    $ - temp_NFA
 289+ E987             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 289+ E982             >
 289+ E982 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 289+ E983 42 41 53 49 >                db      "BASIC"               // name string in 7-bit ascii, but
 289+ E987 43          >
 289+ E988             >                org     $-1                 // alter last byte of Name just above to set
 289+ E987 C3          >                db      {b $} | END_BIT     // msb as name end
 289+ E988             >
 289+ E988 79 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 289+ E98A             >Prev_Ptr        defl    Heap_Ptr
 289+ E98A             >
 289+ E98A             >mirror_Ptr      defl    $
 289+ E98A             >
 289+ E98A 4A 76       >                dw      Dict_Ptr + 2        // xt
 289+ E98C             >Heap_Ptr        defl    $ - $E000           // save current HP
 289+ E98C             >
 289+ E98C             >Current_HP      defl  $ - $E000             // used to set HP once!
 289+ E98C             >
 289+ E98C             >//              ______________________________________________________________________
 289+ E98C             >//              Dictionary part
 289+ E98C             >
 289+ E98C             >                org     Dict_Ptr
 289+ 7648             >
 289+ 7648 8A 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 289+ 764A             >
 289+ 764A             >BASIC:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 289+ 764A ~           >                call    runcode ; ok        // for primitive definitions  actual code
 289+ 764A ~           >
 289+ 764A ~           >
 289+ 764A             >                endif           ; ok        // for other definitions it "points" the correct handler
 289+ 764A             >                // Use of "; ok" to suppress "warning[fwdref]"
 289+ 764A             >
 289+ 764A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 290+ 764A C1                           pop     bc                      // return  TOS  value to Basic
 291+ 764B 21 00 00                     ld      hl, 0
 292+ 764E 39                           add     hl, sp
 293+ 764F ED 7B 6E 63                  ld      sp, (SP_Basic)          // restore Basic's SP
 294+ 7653              //              nop
 295+ 7653 22 6E 63                     ld      (SP_Basic),hl           // but also save Forth's
 296+ 7656 D9                           exx
 297+ 7657 E1                           pop     hl                      // restore h'l'
 298+ 7658 D9                           exx
 299+ 7659 C9                           ret                             // to where USR Basic was left
 300+ 765A
 301+ 765A              //  ______________________________________________________________________
 302+ 765A              //
 303+ 765A              // +-           n1 n2 -- n3
 304+ 765A              // leaves n1 with the sign of n2 as n3.
 305+ 765A                              Colon_Def PLUS_MINUS, "+-", is_normal
 305+ 765A             >                New_Def  PLUS_MINUS, "+-", Enter_Ptr, is_normal ; ok
 305+ 765A             >
 305+ 765A             >Dict_Ptr        defl    $
 305+ 765A             >
 305+ 765A             >//              ______________________________________________________________________
 305+ 765A             >//              Heap part
 305+ 765A             >
 305+ 765A             >
 305+ 765A             >                org     (Heap_Ptr & $1FFF) + $E000
 305+ E98C             >
 305+ E98C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 305+ E98C             >Latest_Definition defl  Heap_Ptr
 305+ E98C             >
 305+ E98C             >                // dummy db directives used to calculate length of namec
 305+ E98C 2B 2D       >                db      "+-"
 305+ E98E             >len_NFA         defl    $ - temp_NFA
 305+ E98E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 305+ E98C             >
 305+ E98C 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 305+ E98D 2B 2D       >                db      "+-"               // name string in 7-bit ascii, but
 305+ E98F             >                org     $-1                 // alter last byte of Name just above to set
 305+ E98E AD          >                db      {b $} | END_BIT     // msb as name end
 305+ E98F             >
 305+ E98F 82 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 305+ E991             >Prev_Ptr        defl    Heap_Ptr
 305+ E991             >
 305+ E991             >mirror_Ptr      defl    $
 305+ E991             >
 305+ E991 5C 76       >                dw      Dict_Ptr + 2        // xt
 305+ E993             >Heap_Ptr        defl    $ - $E000           // save current HP
 305+ E993             >
 305+ E993             >Current_HP      defl  $ - $E000             // used to set HP once!
 305+ E993             >
 305+ E993             >//              ______________________________________________________________________
 305+ E993             >//              Dictionary part
 305+ E993             >
 305+ E993             >                org     Dict_Ptr
 305+ 765A             >
 305+ 765A 91 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 305+ 765C             >
 305+ 765C             >PLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 305+ 765C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 305+ 765F             >
 305+ 765F             >
 305+ 765F             >                endif           ; ok        // for other definitions it "points" the correct handler
 305+ 765F             >                // Use of "; ok" to suppress "warning[fwdref]"
 305+ 765F             >
 305+ 765F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 306+ 765F 87 68                        dw      ZLESS                   // 0<
 307+ 7661                                                              // if
 308+ 7661 F3 63                        dw      ZBRANCH
 309+ 7663 04 00                        dw      Plus_Minus_Endif - $
 310+ 7665 DE 68                        dw          MINUS               //      minus
 311+ 7667              Plus_Minus_Endif:                               // endif
 312+ 7667 51 68                        dw      EXIT                    // ;
 313+ 7669
 314+ 7669              //  ______________________________________________________________________
 315+ 7669              //
 316+ 7669              // d+-          d1 n -- d2
 317+ 7669              // leaves d1 with the sign of n as d2.
 318+ 7669                              Colon_Def DPLUS_MINUS, "D+-", is_normal
 318+ 7669             >                New_Def  DPLUS_MINUS, "D+-", Enter_Ptr, is_normal ; ok
 318+ 7669             >
 318+ 7669             >Dict_Ptr        defl    $
 318+ 7669             >
 318+ 7669             >//              ______________________________________________________________________
 318+ 7669             >//              Heap part
 318+ 7669             >
 318+ 7669             >
 318+ 7669             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ E993             >
 318+ E993             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ E993             >Latest_Definition defl  Heap_Ptr
 318+ E993             >
 318+ E993             >                // dummy db directives used to calculate length of namec
 318+ E993 44 2B 2D    >                db      "D+-"
 318+ E996             >len_NFA         defl    $ - temp_NFA
 318+ E996             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ E993             >
 318+ E993 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ E994 44 2B 2D    >                db      "D+-"               // name string in 7-bit ascii, but
 318+ E997             >                org     $-1                 // alter last byte of Name just above to set
 318+ E996 AD          >                db      {b $} | END_BIT     // msb as name end
 318+ E997             >
 318+ E997 8C 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ E999             >Prev_Ptr        defl    Heap_Ptr
 318+ E999             >
 318+ E999             >mirror_Ptr      defl    $
 318+ E999             >
 318+ E999 6B 76       >                dw      Dict_Ptr + 2        // xt
 318+ E99B             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ E99B             >
 318+ E99B             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ E99B             >
 318+ E99B             >//              ______________________________________________________________________
 318+ E99B             >//              Dictionary part
 318+ E99B             >
 318+ E99B             >                org     Dict_Ptr
 318+ 7669             >
 318+ 7669 99 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 766B             >
 318+ 766B             >DPLUS_MINUS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 766B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 766E             >
 318+ 766E             >
 318+ 766E             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 766E             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 766E             >
 318+ 766E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 766E 87 68                        dw      ZLESS                   // 0<
 320+ 7670                                                              // if
 321+ 7670 F3 63                        dw      ZBRANCH
 322+ 7672 04 00                        dw      DPlus_Minus_Endif - $
 323+ 7674 EB 68                        dw          DMINUS              //      dminus
 324+ 7676              DPlus_Minus_Endif:                              // endif
 325+ 7676 51 68                        dw      EXIT                    // ;
 326+ 7678
 327+ 7678              //  ______________________________________________________________________
 328+ 7678              //
 329+ 7678              // abs          n1 -- n2
 330+ 7678                              Colon_Def ABS_OP, "ABS", is_normal
 330+ 7678             >                New_Def  ABS_OP, "ABS", Enter_Ptr, is_normal ; ok
 330+ 7678             >
 330+ 7678             >Dict_Ptr        defl    $
 330+ 7678             >
 330+ 7678             >//              ______________________________________________________________________
 330+ 7678             >//              Heap part
 330+ 7678             >
 330+ 7678             >
 330+ 7678             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ E99B             >
 330+ E99B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ E99B             >Latest_Definition defl  Heap_Ptr
 330+ E99B             >
 330+ E99B             >                // dummy db directives used to calculate length of namec
 330+ E99B 41 42 53    >                db      "ABS"
 330+ E99E             >len_NFA         defl    $ - temp_NFA
 330+ E99E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ E99B             >
 330+ E99B 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ E99C 41 42 53    >                db      "ABS"               // name string in 7-bit ascii, but
 330+ E99F             >                org     $-1                 // alter last byte of Name just above to set
 330+ E99E D3          >                db      {b $} | END_BIT     // msb as name end
 330+ E99F             >
 330+ E99F 93 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ E9A1             >Prev_Ptr        defl    Heap_Ptr
 330+ E9A1             >
 330+ E9A1             >mirror_Ptr      defl    $
 330+ E9A1             >
 330+ E9A1 7A 76       >                dw      Dict_Ptr + 2        // xt
 330+ E9A3             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ E9A3             >
 330+ E9A3             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ E9A3             >
 330+ E9A3             >//              ______________________________________________________________________
 330+ E9A3             >//              Dictionary part
 330+ E9A3             >
 330+ E9A3             >                org     Dict_Ptr
 330+ 7678             >
 330+ 7678 A1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 767A             >
 330+ 767A             >ABS_OP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 767A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 330+ 767D             >
 330+ 767D             >
 330+ 767D             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 767D             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 767D             >
 330+ 767D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 767D 1C 69                        dw      DUP                     // dup
 332+ 767F 5C 76                        dw      PLUS_MINUS              // +-
 333+ 7681 51 68                        dw      EXIT                    // ;
 334+ 7683
 335+ 7683              //  ______________________________________________________________________
 336+ 7683              //
 337+ 7683              // dabs         d1 -- d2
 338+ 7683                              Colon_Def DABS, "DABS", is_normal
 338+ 7683             >                New_Def  DABS, "DABS", Enter_Ptr, is_normal ; ok
 338+ 7683             >
 338+ 7683             >Dict_Ptr        defl    $
 338+ 7683             >
 338+ 7683             >//              ______________________________________________________________________
 338+ 7683             >//              Heap part
 338+ 7683             >
 338+ 7683             >
 338+ 7683             >                org     (Heap_Ptr & $1FFF) + $E000
 338+ E9A3             >
 338+ E9A3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 338+ E9A3             >Latest_Definition defl  Heap_Ptr
 338+ E9A3             >
 338+ E9A3             >                // dummy db directives used to calculate length of namec
 338+ E9A3 44 41 42 53 >                db      "DABS"
 338+ E9A7             >len_NFA         defl    $ - temp_NFA
 338+ E9A7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 338+ E9A3             >
 338+ E9A3 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 338+ E9A4 44 41 42 53 >                db      "DABS"               // name string in 7-bit ascii, but
 338+ E9A8             >                org     $-1                 // alter last byte of Name just above to set
 338+ E9A7 D3          >                db      {b $} | END_BIT     // msb as name end
 338+ E9A8             >
 338+ E9A8 9B 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 338+ E9AA             >Prev_Ptr        defl    Heap_Ptr
 338+ E9AA             >
 338+ E9AA             >mirror_Ptr      defl    $
 338+ E9AA             >
 338+ E9AA 85 76       >                dw      Dict_Ptr + 2        // xt
 338+ E9AC             >Heap_Ptr        defl    $ - $E000           // save current HP
 338+ E9AC             >
 338+ E9AC             >Current_HP      defl  $ - $E000             // used to set HP once!
 338+ E9AC             >
 338+ E9AC             >//              ______________________________________________________________________
 338+ E9AC             >//              Dictionary part
 338+ E9AC             >
 338+ E9AC             >                org     Dict_Ptr
 338+ 7683             >
 338+ 7683 AA 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 338+ 7685             >
 338+ 7685             >DABS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 338+ 7685 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 338+ 7688             >
 338+ 7688             >
 338+ 7688             >                endif           ; ok        // for other definitions it "points" the correct handler
 338+ 7688             >                // Use of "; ok" to suppress "warning[fwdref]"
 338+ 7688             >
 338+ 7688             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 339+ 7688 1C 69                        dw      DUP                     // dup
 340+ 768A 6B 76                        dw      DPLUS_MINUS             // d+-
 341+ 768C 51 68                        dw      EXIT                    // ;
 342+ 768E
 343+ 768E              //  ______________________________________________________________________
 344+ 768E              //
 345+ 768E              // m*           n1 n2 -- d
 346+ 768E              // multiply two integer giving a double
 347+ 768E                              Colon_Def MMUL, "M*", is_normal
 347+ 768E             >                New_Def  MMUL, "M*", Enter_Ptr, is_normal ; ok
 347+ 768E             >
 347+ 768E             >Dict_Ptr        defl    $
 347+ 768E             >
 347+ 768E             >//              ______________________________________________________________________
 347+ 768E             >//              Heap part
 347+ 768E             >
 347+ 768E             >
 347+ 768E             >                org     (Heap_Ptr & $1FFF) + $E000
 347+ E9AC             >
 347+ E9AC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 347+ E9AC             >Latest_Definition defl  Heap_Ptr
 347+ E9AC             >
 347+ E9AC             >                // dummy db directives used to calculate length of namec
 347+ E9AC 4D 2A       >                db      "M*"
 347+ E9AE             >len_NFA         defl    $ - temp_NFA
 347+ E9AE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 347+ E9AC             >
 347+ E9AC 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 347+ E9AD 4D 2A       >                db      "M*"               // name string in 7-bit ascii, but
 347+ E9AF             >                org     $-1                 // alter last byte of Name just above to set
 347+ E9AE AA          >                db      {b $} | END_BIT     // msb as name end
 347+ E9AF             >
 347+ E9AF A3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 347+ E9B1             >Prev_Ptr        defl    Heap_Ptr
 347+ E9B1             >
 347+ E9B1             >mirror_Ptr      defl    $
 347+ E9B1             >
 347+ E9B1 90 76       >                dw      Dict_Ptr + 2        // xt
 347+ E9B3             >Heap_Ptr        defl    $ - $E000           // save current HP
 347+ E9B3             >
 347+ E9B3             >Current_HP      defl  $ - $E000             // used to set HP once!
 347+ E9B3             >
 347+ E9B3             >//              ______________________________________________________________________
 347+ E9B3             >//              Dictionary part
 347+ E9B3             >
 347+ E9B3             >                org     Dict_Ptr
 347+ 768E             >
 347+ 768E B1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 347+ 7690             >
 347+ 7690             >MMUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 347+ 7690 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 347+ 7693             >
 347+ 7693             >
 347+ 7693             >                endif           ; ok        // for other definitions it "points" the correct handler
 347+ 7693             >                // Use of "; ok" to suppress "warning[fwdref]"
 347+ 7693             >
 347+ 7693             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 348+ 7693 64 69 29 68                  dw      TWO_DUP, XOR_OP, TO_R   // 2dup xor >r
 348+ 7697 5B 68
 349+ 7699 7A 76 15 69                  dw      ABS_OP, SWAP            // abs swap
 350+ 769D 7A 76 B0 67                  dw      ABS_OP, UM_MUL          // abs um*
 351+ 76A1 66 68 6B 76                  dw      R_TO, DPLUS_MINUS       // r> d+-
 352+ 76A5 51 68                        dw      EXIT                    // ;
 353+ 76A7
 354+ 76A7              //  ______________________________________________________________________
 355+ 76A7              //
 356+ 76A7              // sm/rem       d n -- q r
 357+ 76A7              // Symmetric division: divides a double into n giving quotient q and remainder r
 358+ 76A7              // the remainder has the sign of d.
 359+ 76A7                              Colon_Def SMDIVM, "SM/REM", is_normal
 359+ 76A7             >                New_Def  SMDIVM, "SM/REM", Enter_Ptr, is_normal ; ok
 359+ 76A7             >
 359+ 76A7             >Dict_Ptr        defl    $
 359+ 76A7             >
 359+ 76A7             >//              ______________________________________________________________________
 359+ 76A7             >//              Heap part
 359+ 76A7             >
 359+ 76A7             >
 359+ 76A7             >                org     (Heap_Ptr & $1FFF) + $E000
 359+ E9B3             >
 359+ E9B3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 359+ E9B3             >Latest_Definition defl  Heap_Ptr
 359+ E9B3             >
 359+ E9B3             >                // dummy db directives used to calculate length of namec
 359+ E9B3 53 4D 2F 52 >                db      "SM/REM"
 359+ E9B7 45 4D       >
 359+ E9B9             >len_NFA         defl    $ - temp_NFA
 359+ E9B9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 359+ E9B3             >
 359+ E9B3 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 359+ E9B4 53 4D 2F 52 >                db      "SM/REM"               // name string in 7-bit ascii, but
 359+ E9B8 45 4D       >
 359+ E9BA             >                org     $-1                 // alter last byte of Name just above to set
 359+ E9B9 CD          >                db      {b $} | END_BIT     // msb as name end
 359+ E9BA             >
 359+ E9BA AC 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 359+ E9BC             >Prev_Ptr        defl    Heap_Ptr
 359+ E9BC             >
 359+ E9BC             >mirror_Ptr      defl    $
 359+ E9BC             >
 359+ E9BC A9 76       >                dw      Dict_Ptr + 2        // xt
 359+ E9BE             >Heap_Ptr        defl    $ - $E000           // save current HP
 359+ E9BE             >
 359+ E9BE             >Current_HP      defl  $ - $E000             // used to set HP once!
 359+ E9BE             >
 359+ E9BE             >//              ______________________________________________________________________
 359+ E9BE             >//              Dictionary part
 359+ E9BE             >
 359+ E9BE             >                org     Dict_Ptr
 359+ 76A7             >
 359+ 76A7 BC 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 359+ 76A9             >
 359+ 76A9             >SMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 359+ 76A9 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 359+ 76AC             >
 359+ 76AC             >
 359+ 76AC             >                endif           ; ok        // for other definitions it "points" the correct handler
 359+ 76AC             >                // Use of "; ok" to suppress "warning[fwdref]"
 359+ 76AC             >
 359+ 76AC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 360+ 76AC F8 68 5B 68                  dw      OVER, TO_R, TO_R        // over >r >r
 360+ 76B0 5B 68
 361+ 76B2 85 76 71 68                  dw      DABS, R_OP, ABS_OP      // dabs r abs
 361+ 76B6 7A 76
 362+ 76B8 D8 67                        dw      UMDIVMOD                // um/mod
 363+ 76BA 66 68                        dw      R_TO                    // r>
 364+ 76BC 71 68 29 68                  dw      R_OP, XOR_OP            // r xor
 365+ 76C0 5C 76 15 69                  dw      PLUS_MINUS, SWAP        // +- swap
 366+ 76C4 66 68                        dw      R_TO                    // r>
 367+ 76C6 5C 76 15 69                  dw      PLUS_MINUS, SWAP        // +- swap
 368+ 76CA 51 68                        dw      EXIT                    // ;
 369+ 76CC
 370+ 76CC              //  ______________________________________________________________________
 371+ 76CC              //
 372+ 76CC              // fm/mod       d n -- q r
 373+ 76CC              // Floored division: divides a double into n giving quotient q and remainder r
 374+ 76CC              // the remainder has the sign of d.
 375+ 76CC                              Colon_Def FMDIVM, "FM/MOD", is_normal
 375+ 76CC             >                New_Def  FMDIVM, "FM/MOD", Enter_Ptr, is_normal ; ok
 375+ 76CC             >
 375+ 76CC             >Dict_Ptr        defl    $
 375+ 76CC             >
 375+ 76CC             >//              ______________________________________________________________________
 375+ 76CC             >//              Heap part
 375+ 76CC             >
 375+ 76CC             >
 375+ 76CC             >                org     (Heap_Ptr & $1FFF) + $E000
 375+ E9BE             >
 375+ E9BE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 375+ E9BE             >Latest_Definition defl  Heap_Ptr
 375+ E9BE             >
 375+ E9BE             >                // dummy db directives used to calculate length of namec
 375+ E9BE 46 4D 2F 4D >                db      "FM/MOD"
 375+ E9C2 4F 44       >
 375+ E9C4             >len_NFA         defl    $ - temp_NFA
 375+ E9C4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 375+ E9BE             >
 375+ E9BE 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 375+ E9BF 46 4D 2F 4D >                db      "FM/MOD"               // name string in 7-bit ascii, but
 375+ E9C3 4F 44       >
 375+ E9C5             >                org     $-1                 // alter last byte of Name just above to set
 375+ E9C4 C4          >                db      {b $} | END_BIT     // msb as name end
 375+ E9C5             >
 375+ E9C5 B3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 375+ E9C7             >Prev_Ptr        defl    Heap_Ptr
 375+ E9C7             >
 375+ E9C7             >mirror_Ptr      defl    $
 375+ E9C7             >
 375+ E9C7 CE 76       >                dw      Dict_Ptr + 2        // xt
 375+ E9C9             >Heap_Ptr        defl    $ - $E000           // save current HP
 375+ E9C9             >
 375+ E9C9             >Current_HP      defl  $ - $E000             // used to set HP once!
 375+ E9C9             >
 375+ E9C9             >//              ______________________________________________________________________
 375+ E9C9             >//              Dictionary part
 375+ E9C9             >
 375+ E9C9             >                org     Dict_Ptr
 375+ 76CC             >
 375+ 76CC C7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 375+ 76CE             >
 375+ 76CE             >FMDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 375+ 76CE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 375+ 76D1             >
 375+ 76D1             >
 375+ 76D1             >                endif           ; ok        // for other definitions it "points" the correct handler
 375+ 76D1             >                // Use of "; ok" to suppress "warning[fwdref]"
 375+ 76D1             >
 375+ 76D1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 376+ 76D1 1C 69 5B 68                  dw      DUP, TO_R               // dup >r
 377+ 76D5 A9 76                        dw      SMDIVM
 378+ 76D7 F8 68 1C 69                  dw      OVER, DUP
 379+ 76DB 76 68 76 68                  dw      ZEQUAL, ZEQUAL
 380+ 76DF 15 69 87 68                  dw      SWAP, ZLESS
 381+ 76E3 71 68 87 68                  dw      R_OP, ZLESS
 382+ 76E7 29 68 0B 68                  dw      XOR_OP, AND_OP
 383+ 76EB F3 63                        dw      ZBRANCH
 384+ 76ED 10 00                        dw      Fm_Mod_Else - $
 385+ 76EF BE 68                        dw          ONE_SUBTRACT
 386+ 76F1 15 69 66 68                  dw          SWAP, R_TO
 387+ 76F5 9E 68 15 69                  dw          PLUS, SWAP
 388+ 76F9 EF 63                        dw      BRANCH
 389+ 76FB 06 00                        dw      Fm_Mod_Endif - $
 390+ 76FD              Fm_Mod_Else:
 391+ 76FD 66 68 01 69                  dw          R_TO, DROP
 392+ 7701              Fm_Mod_Endif:
 393+ 7701 51 68                        dw      EXIT
 394+ 7703              //              dw      TWO_DUP                 // 2dup
 395+ 7703              //              dw      XOR_OP, TO_R, TO_R      // xor >r >r
 396+ 7703              //              dw      DABS, R_OP, ABS_OP      // dabs r abs
 397+ 7703              //              dw      UMDIVMOD                // um/mod
 398+ 7703              //              dw      SWAP                    // swap
 399+ 7703              //              dw      II, ZLESS               // i'
 400+ 7703              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 401+ 7703              //              dw      R_TO                    // r>
 402+ 7703              //              dw      PLUS_MINUS, SWAP        // +- swap
 403+ 7703              //              dw      R_OP                    // r@
 404+ 7703              //              dw      ZLESS                   // i'
 405+ 7703              //              dw      ONE, AND_OP, PLUS       // 0< 1 and +
 406+ 7703              //              dw      R_TO                    // r>
 407+ 7703              //              dw      PLUS_MINUS              // +- swap
 408+ 7703              //              dw      EXIT                    // ;
 409+ 7703
 410+ 7703              //  ______________________________________________________________________
 411+ 7703              //
 412+ 7703              // m/mod        d n -- q r
 413+ 7703              // multiply two integer giving a double
 414+ 7703                              Colon_Def MDIVM, "M/MOD", is_normal
 414+ 7703             >                New_Def  MDIVM, "M/MOD", Enter_Ptr, is_normal ; ok
 414+ 7703             >
 414+ 7703             >Dict_Ptr        defl    $
 414+ 7703             >
 414+ 7703             >//              ______________________________________________________________________
 414+ 7703             >//              Heap part
 414+ 7703             >
 414+ 7703             >
 414+ 7703             >                org     (Heap_Ptr & $1FFF) + $E000
 414+ E9C9             >
 414+ E9C9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 414+ E9C9             >Latest_Definition defl  Heap_Ptr
 414+ E9C9             >
 414+ E9C9             >                // dummy db directives used to calculate length of namec
 414+ E9C9 4D 2F 4D 4F >                db      "M/MOD"
 414+ E9CD 44          >
 414+ E9CE             >len_NFA         defl    $ - temp_NFA
 414+ E9CE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 414+ E9C9             >
 414+ E9C9 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 414+ E9CA 4D 2F 4D 4F >                db      "M/MOD"               // name string in 7-bit ascii, but
 414+ E9CE 44          >
 414+ E9CF             >                org     $-1                 // alter last byte of Name just above to set
 414+ E9CE C4          >                db      {b $} | END_BIT     // msb as name end
 414+ E9CF             >
 414+ E9CF BE 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 414+ E9D1             >Prev_Ptr        defl    Heap_Ptr
 414+ E9D1             >
 414+ E9D1             >mirror_Ptr      defl    $
 414+ E9D1             >
 414+ E9D1 05 77       >                dw      Dict_Ptr + 2        // xt
 414+ E9D3             >Heap_Ptr        defl    $ - $E000           // save current HP
 414+ E9D3             >
 414+ E9D3             >Current_HP      defl  $ - $E000             // used to set HP once!
 414+ E9D3             >
 414+ E9D3             >//              ______________________________________________________________________
 414+ E9D3             >//              Dictionary part
 414+ E9D3             >
 414+ E9D3             >                org     Dict_Ptr
 414+ 7703             >
 414+ 7703 D1 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 414+ 7705             >
 414+ 7705             >MDIVM:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 414+ 7705 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 414+ 7708             >
 414+ 7708             >
 414+ 7708             >                endif           ; ok        // for other definitions it "points" the correct handler
 414+ 7708             >                // Use of "; ok" to suppress "warning[fwdref]"
 414+ 7708             >
 414+ 7708             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 415+ 7708 A9 76                        dw      SMDIVM
 416+ 770A 51 68                        dw      EXIT                    // ;
 417+ 770C
 418+ 770C              //  ______________________________________________________________________
 419+ 770C              //
 420+ 770C              // m/           d n -- q
 421+ 770C              // multiply two integer giving a double
 422+ 770C                              Colon_Def MDIV, "M/", is_normal
 422+ 770C             >                New_Def  MDIV, "M/", Enter_Ptr, is_normal ; ok
 422+ 770C             >
 422+ 770C             >Dict_Ptr        defl    $
 422+ 770C             >
 422+ 770C             >//              ______________________________________________________________________
 422+ 770C             >//              Heap part
 422+ 770C             >
 422+ 770C             >
 422+ 770C             >                org     (Heap_Ptr & $1FFF) + $E000
 422+ E9D3             >
 422+ E9D3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 422+ E9D3             >Latest_Definition defl  Heap_Ptr
 422+ E9D3             >
 422+ E9D3             >                // dummy db directives used to calculate length of namec
 422+ E9D3 4D 2F       >                db      "M/"
 422+ E9D5             >len_NFA         defl    $ - temp_NFA
 422+ E9D5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 422+ E9D3             >
 422+ E9D3 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 422+ E9D4 4D 2F       >                db      "M/"               // name string in 7-bit ascii, but
 422+ E9D6             >                org     $-1                 // alter last byte of Name just above to set
 422+ E9D5 AF          >                db      {b $} | END_BIT     // msb as name end
 422+ E9D6             >
 422+ E9D6 C9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 422+ E9D8             >Prev_Ptr        defl    Heap_Ptr
 422+ E9D8             >
 422+ E9D8             >mirror_Ptr      defl    $
 422+ E9D8             >
 422+ E9D8 0E 77       >                dw      Dict_Ptr + 2        // xt
 422+ E9DA             >Heap_Ptr        defl    $ - $E000           // save current HP
 422+ E9DA             >
 422+ E9DA             >Current_HP      defl  $ - $E000             // used to set HP once!
 422+ E9DA             >
 422+ E9DA             >//              ______________________________________________________________________
 422+ E9DA             >//              Dictionary part
 422+ E9DA             >
 422+ E9DA             >                org     Dict_Ptr
 422+ 770C             >
 422+ 770C D8 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 422+ 770E             >
 422+ 770E             >MDIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 422+ 770E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 422+ 7711             >
 422+ 7711             >
 422+ 7711             >                endif           ; ok        // for other definitions it "points" the correct handler
 422+ 7711             >                // Use of "; ok" to suppress "warning[fwdref]"
 422+ 7711             >
 422+ 7711             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 423+ 7711 05 77 06 69                  dw      MDIVM, NIP
 424+ 7715 51 68                        dw      EXIT                    // ;
 425+ 7717
 426+ 7717              //  ______________________________________________________________________
 427+ 7717              //
 428+ 7717              // *            n1 n2 -- n3
 429+ 7717              // multiply two integer
 430+ 7717                              Colon_Def MUL, "*", is_normal
 430+ 7717             >                New_Def  MUL, "*", Enter_Ptr, is_normal ; ok
 430+ 7717             >
 430+ 7717             >Dict_Ptr        defl    $
 430+ 7717             >
 430+ 7717             >//              ______________________________________________________________________
 430+ 7717             >//              Heap part
 430+ 7717             >
 430+ 7717             >
 430+ 7717             >                org     (Heap_Ptr & $1FFF) + $E000
 430+ E9DA             >
 430+ E9DA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 430+ E9DA             >Latest_Definition defl  Heap_Ptr
 430+ E9DA             >
 430+ E9DA             >                // dummy db directives used to calculate length of namec
 430+ E9DA 2A          >                db      "*"
 430+ E9DB             >len_NFA         defl    $ - temp_NFA
 430+ E9DB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 430+ E9DA             >
 430+ E9DA 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 430+ E9DB 2A          >                db      "*"               // name string in 7-bit ascii, but
 430+ E9DC             >                org     $-1                 // alter last byte of Name just above to set
 430+ E9DB AA          >                db      {b $} | END_BIT     // msb as name end
 430+ E9DC             >
 430+ E9DC D3 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 430+ E9DE             >Prev_Ptr        defl    Heap_Ptr
 430+ E9DE             >
 430+ E9DE             >mirror_Ptr      defl    $
 430+ E9DE             >
 430+ E9DE 19 77       >                dw      Dict_Ptr + 2        // xt
 430+ E9E0             >Heap_Ptr        defl    $ - $E000           // save current HP
 430+ E9E0             >
 430+ E9E0             >Current_HP      defl  $ - $E000             // used to set HP once!
 430+ E9E0             >
 430+ E9E0             >//              ______________________________________________________________________
 430+ E9E0             >//              Dictionary part
 430+ E9E0             >
 430+ E9E0             >                org     Dict_Ptr
 430+ 7717             >
 430+ 7717 DE 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 430+ 7719             >
 430+ 7719             >MUL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 430+ 7719 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 430+ 771C             >
 430+ 771C             >
 430+ 771C             >                endif           ; ok        // for other definitions it "points" the correct handler
 430+ 771C             >                // Use of "; ok" to suppress "warning[fwdref]"
 430+ 771C             >
 430+ 771C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 431+ 771C 90 76 01 69                  dw      MMUL, DROP              // m* drop
 432+ 7720 51 68                        dw      EXIT                    // ;
 433+ 7722
 434+ 7722              //  ______________________________________________________________________
 435+ 7722              //
 436+ 7722              // /mod         n1 n2 -- n3 n4
 437+ 7722              // leaves quotient n4 and remainder n3 of the integer division n1 / n2.
 438+ 7722              // The remainder has the sign of n1
 439+ 7722                              Colon_Def DIVMOD, "/MOD", is_normal
 439+ 7722             >                New_Def  DIVMOD, "/MOD", Enter_Ptr, is_normal ; ok
 439+ 7722             >
 439+ 7722             >Dict_Ptr        defl    $
 439+ 7722             >
 439+ 7722             >//              ______________________________________________________________________
 439+ 7722             >//              Heap part
 439+ 7722             >
 439+ 7722             >
 439+ 7722             >                org     (Heap_Ptr & $1FFF) + $E000
 439+ E9E0             >
 439+ E9E0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 439+ E9E0             >Latest_Definition defl  Heap_Ptr
 439+ E9E0             >
 439+ E9E0             >                // dummy db directives used to calculate length of namec
 439+ E9E0 2F 4D 4F 44 >                db      "/MOD"
 439+ E9E4             >len_NFA         defl    $ - temp_NFA
 439+ E9E4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 439+ E9E0             >
 439+ E9E0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 439+ E9E1 2F 4D 4F 44 >                db      "/MOD"               // name string in 7-bit ascii, but
 439+ E9E5             >                org     $-1                 // alter last byte of Name just above to set
 439+ E9E4 C4          >                db      {b $} | END_BIT     // msb as name end
 439+ E9E5             >
 439+ E9E5 DA 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 439+ E9E7             >Prev_Ptr        defl    Heap_Ptr
 439+ E9E7             >
 439+ E9E7             >mirror_Ptr      defl    $
 439+ E9E7             >
 439+ E9E7 24 77       >                dw      Dict_Ptr + 2        // xt
 439+ E9E9             >Heap_Ptr        defl    $ - $E000           // save current HP
 439+ E9E9             >
 439+ E9E9             >Current_HP      defl  $ - $E000             // used to set HP once!
 439+ E9E9             >
 439+ E9E9             >//              ______________________________________________________________________
 439+ E9E9             >//              Dictionary part
 439+ E9E9             >
 439+ E9E9             >                org     Dict_Ptr
 439+ 7722             >
 439+ 7722 E7 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 439+ 7724             >
 439+ 7724             >DIVMOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 439+ 7724 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 439+ 7727             >
 439+ 7727             >
 439+ 7727             >                endif           ; ok        // for other definitions it "points" the correct handler
 439+ 7727             >                // Use of "; ok" to suppress "warning[fwdref]"
 439+ 7727             >
 439+ 7727             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 440+ 7727 5B 68 D1 6B                  dw      TO_R, S_TO_D, R_TO      // >r s->d r>
 440+ 772B 66 68
 441+ 772D 05 77                        dw      MDIVM                   // m/mod
 442+ 772F 51 68                        dw      EXIT                    // ;
 443+ 7731
 444+ 7731              //  ______________________________________________________________________
 445+ 7731              //
 446+ 7731              // /            n1 n2 -- n3
 447+ 7731              // division
 448+ 7731                              Colon_Def DIV, "/", is_normal
 448+ 7731             >                New_Def  DIV, "/", Enter_Ptr, is_normal ; ok
 448+ 7731             >
 448+ 7731             >Dict_Ptr        defl    $
 448+ 7731             >
 448+ 7731             >//              ______________________________________________________________________
 448+ 7731             >//              Heap part
 448+ 7731             >
 448+ 7731             >
 448+ 7731             >                org     (Heap_Ptr & $1FFF) + $E000
 448+ E9E9             >
 448+ E9E9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 448+ E9E9             >Latest_Definition defl  Heap_Ptr
 448+ E9E9             >
 448+ E9E9             >                // dummy db directives used to calculate length of namec
 448+ E9E9 2F          >                db      "/"
 448+ E9EA             >len_NFA         defl    $ - temp_NFA
 448+ E9EA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 448+ E9E9             >
 448+ E9E9 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 448+ E9EA 2F          >                db      "/"               // name string in 7-bit ascii, but
 448+ E9EB             >                org     $-1                 // alter last byte of Name just above to set
 448+ E9EA AF          >                db      {b $} | END_BIT     // msb as name end
 448+ E9EB             >
 448+ E9EB E0 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 448+ E9ED             >Prev_Ptr        defl    Heap_Ptr
 448+ E9ED             >
 448+ E9ED             >mirror_Ptr      defl    $
 448+ E9ED             >
 448+ E9ED 33 77       >                dw      Dict_Ptr + 2        // xt
 448+ E9EF             >Heap_Ptr        defl    $ - $E000           // save current HP
 448+ E9EF             >
 448+ E9EF             >Current_HP      defl  $ - $E000             // used to set HP once!
 448+ E9EF             >
 448+ E9EF             >//              ______________________________________________________________________
 448+ E9EF             >//              Dictionary part
 448+ E9EF             >
 448+ E9EF             >                org     Dict_Ptr
 448+ 7731             >
 448+ 7731 ED 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 448+ 7733             >
 448+ 7733             >DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 448+ 7733 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 448+ 7736             >
 448+ 7736             >
 448+ 7736             >                endif           ; ok        // for other definitions it "points" the correct handler
 448+ 7736             >                // Use of "; ok" to suppress "warning[fwdref]"
 448+ 7736             >
 448+ 7736             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 449+ 7736 24 77 06 69                  dw      DIVMOD, NIP             // /mod nip
 450+ 773A 51 68                        dw      EXIT                    // ;
 451+ 773C
 452+ 773C              //  ______________________________________________________________________
 453+ 773C              //
 454+ 773C              // mod          n1 n2 -- n3
 455+ 773C                              Colon_Def MOD, "MOD", is_normal
 455+ 773C             >                New_Def  MOD, "MOD", Enter_Ptr, is_normal ; ok
 455+ 773C             >
 455+ 773C             >Dict_Ptr        defl    $
 455+ 773C             >
 455+ 773C             >//              ______________________________________________________________________
 455+ 773C             >//              Heap part
 455+ 773C             >
 455+ 773C             >
 455+ 773C             >                org     (Heap_Ptr & $1FFF) + $E000
 455+ E9EF             >
 455+ E9EF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 455+ E9EF             >Latest_Definition defl  Heap_Ptr
 455+ E9EF             >
 455+ E9EF             >                // dummy db directives used to calculate length of namec
 455+ E9EF 4D 4F 44    >                db      "MOD"
 455+ E9F2             >len_NFA         defl    $ - temp_NFA
 455+ E9F2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 455+ E9EF             >
 455+ E9EF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 455+ E9F0 4D 4F 44    >                db      "MOD"               // name string in 7-bit ascii, but
 455+ E9F3             >                org     $-1                 // alter last byte of Name just above to set
 455+ E9F2 C4          >                db      {b $} | END_BIT     // msb as name end
 455+ E9F3             >
 455+ E9F3 E9 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 455+ E9F5             >Prev_Ptr        defl    Heap_Ptr
 455+ E9F5             >
 455+ E9F5             >mirror_Ptr      defl    $
 455+ E9F5             >
 455+ E9F5 3E 77       >                dw      Dict_Ptr + 2        // xt
 455+ E9F7             >Heap_Ptr        defl    $ - $E000           // save current HP
 455+ E9F7             >
 455+ E9F7             >Current_HP      defl  $ - $E000             // used to set HP once!
 455+ E9F7             >
 455+ E9F7             >//              ______________________________________________________________________
 455+ E9F7             >//              Dictionary part
 455+ E9F7             >
 455+ E9F7             >                org     Dict_Ptr
 455+ 773C             >
 455+ 773C F5 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 455+ 773E             >
 455+ 773E             >MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 455+ 773E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 455+ 7741             >
 455+ 7741             >
 455+ 7741             >                endif           ; ok        // for other definitions it "points" the correct handler
 455+ 7741             >                // Use of "; ok" to suppress "warning[fwdref]"
 455+ 7741             >
 455+ 7741             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 456+ 7741 24 77 01 69                  dw      DIVMOD, DROP            // /mod drop
 457+ 7745 51 68                        dw      EXIT                    // ;
 458+ 7747
 459+ 7747              //  ______________________________________________________________________
 460+ 7747              //
 461+ 7747              // */mod        n1 n2 n3 -- n4 n5
 462+ 7747              // leaves the quotient n5 and the remainder n4 of the operation
 463+ 7747              // (n1 * n2) / n3. The intermediate passage through a double number
 464+ 7747              // avoids loss of precision
 465+ 7747                              Colon_Def MUL_DIV_MOD, "*/MOD", is_normal
 465+ 7747             >                New_Def  MUL_DIV_MOD, "*/MOD", Enter_Ptr, is_normal ; ok
 465+ 7747             >
 465+ 7747             >Dict_Ptr        defl    $
 465+ 7747             >
 465+ 7747             >//              ______________________________________________________________________
 465+ 7747             >//              Heap part
 465+ 7747             >
 465+ 7747             >
 465+ 7747             >                org     (Heap_Ptr & $1FFF) + $E000
 465+ E9F7             >
 465+ E9F7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 465+ E9F7             >Latest_Definition defl  Heap_Ptr
 465+ E9F7             >
 465+ E9F7             >                // dummy db directives used to calculate length of namec
 465+ E9F7 2A 2F 4D 4F >                db      "*/MOD"
 465+ E9FB 44          >
 465+ E9FC             >len_NFA         defl    $ - temp_NFA
 465+ E9FC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 465+ E9F7             >
 465+ E9F7 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 465+ E9F8 2A 2F 4D 4F >                db      "*/MOD"               // name string in 7-bit ascii, but
 465+ E9FC 44          >
 465+ E9FD             >                org     $-1                 // alter last byte of Name just above to set
 465+ E9FC C4          >                db      {b $} | END_BIT     // msb as name end
 465+ E9FD             >
 465+ E9FD EF 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 465+ E9FF             >Prev_Ptr        defl    Heap_Ptr
 465+ E9FF             >
 465+ E9FF             >mirror_Ptr      defl    $
 465+ E9FF             >
 465+ E9FF 49 77       >                dw      Dict_Ptr + 2        // xt
 465+ EA01             >Heap_Ptr        defl    $ - $E000           // save current HP
 465+ EA01             >
 465+ EA01             >Current_HP      defl  $ - $E000             // used to set HP once!
 465+ EA01             >
 465+ EA01             >//              ______________________________________________________________________
 465+ EA01             >//              Dictionary part
 465+ EA01             >
 465+ EA01             >                org     Dict_Ptr
 465+ 7747             >
 465+ 7747 FF 09       >                dw      mirror_Ptr - $E000 + Heap_offset
 465+ 7749             >
 465+ 7749             >MUL_DIV_MOD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 465+ 7749 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 465+ 774C             >
 465+ 774C             >
 465+ 774C             >                endif           ; ok        // for other definitions it "points" the correct handler
 465+ 774C             >                // Use of "; ok" to suppress "warning[fwdref]"
 465+ 774C             >
 465+ 774C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 466+ 774C 5B 68 90 76                  dw      TO_R, MMUL              // >r  m*
 467+ 7750 66 68 05 77                  dw      R_TO, MDIVM             // r>  m/mod
 468+ 7754 51 68                        dw      EXIT                    // ;
 469+ 7756
 470+ 7756              //  ______________________________________________________________________
 471+ 7756              //
 472+ 7756              // */          n1 n2 n3 -- n4
 473+ 7756              // (n1 * n2) / n3. The intermediate passage through a double number avoids loss of precision
 474+ 7756                              Colon_Def MUL_DIV, "*/", is_normal
 474+ 7756             >                New_Def  MUL_DIV, "*/", Enter_Ptr, is_normal ; ok
 474+ 7756             >
 474+ 7756             >Dict_Ptr        defl    $
 474+ 7756             >
 474+ 7756             >//              ______________________________________________________________________
 474+ 7756             >//              Heap part
 474+ 7756             >
 474+ 7756             >
 474+ 7756             >                org     (Heap_Ptr & $1FFF) + $E000
 474+ EA01             >
 474+ EA01             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 474+ EA01             >Latest_Definition defl  Heap_Ptr
 474+ EA01             >
 474+ EA01             >                // dummy db directives used to calculate length of namec
 474+ EA01 2A 2F       >                db      "*/"
 474+ EA03             >len_NFA         defl    $ - temp_NFA
 474+ EA03             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 474+ EA01             >
 474+ EA01 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 474+ EA02 2A 2F       >                db      "*/"               // name string in 7-bit ascii, but
 474+ EA04             >                org     $-1                 // alter last byte of Name just above to set
 474+ EA03 AF          >                db      {b $} | END_BIT     // msb as name end
 474+ EA04             >
 474+ EA04 F7 09       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 474+ EA06             >Prev_Ptr        defl    Heap_Ptr
 474+ EA06             >
 474+ EA06             >mirror_Ptr      defl    $
 474+ EA06             >
 474+ EA06 58 77       >                dw      Dict_Ptr + 2        // xt
 474+ EA08             >Heap_Ptr        defl    $ - $E000           // save current HP
 474+ EA08             >
 474+ EA08             >Current_HP      defl  $ - $E000             // used to set HP once!
 474+ EA08             >
 474+ EA08             >//              ______________________________________________________________________
 474+ EA08             >//              Dictionary part
 474+ EA08             >
 474+ EA08             >                org     Dict_Ptr
 474+ 7756             >
 474+ 7756 06 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 474+ 7758             >
 474+ 7758             >MUL_DIV:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 474+ 7758 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 474+ 775B             >
 474+ 775B             >
 474+ 775B             >                endif           ; ok        // for other definitions it "points" the correct handler
 474+ 775B             >                // Use of "; ok" to suppress "warning[fwdref]"
 474+ 775B             >
 474+ 775B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 475+ 775B 49 77                        dw     MUL_DIV_MOD              // */mod
 476+ 775D 06 69                        dw     NIP                      // nip
 477+ 775F 51 68                        dw     EXIT                     // ;
 478+ 7761
 479+ 7761
 480+ 7761              //  ______________________________________________________________________
 481+ 7761              //
 482+ 7761              // m/mod        ud1 u2 -- u3 ud4
 483+ 7761              // mixed operation: it leaves the remainder u3 and the quotient ud4 of ud1 / u1.
 484+ 7761              // All terms are unsigned.
 485+ 7761              //              Colon_Def MDIV_MOD, "M/MOD", is_normal
 486+ 7761              //              dw      TO_R                    // >r           ( ud1 )
 487+ 7761              //              dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 488+ 7761              //              dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 489+ 7761              //              dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 490+ 7761              //              dw      R_TO                    // r>           ( rem2 l/r h/r )
 491+ 7761              //              dw      EXIT                    // ;
 492+ 7761
 493+ 7761              //  ______________________________________________________________________
 494+ 7761              //
 495+ 7761              // (line)       n1 n2 -- a b
 496+ 7761              // sends the line n1 of block n2 to the disk buffer.
 497+ 7761              // it returns the address a and ca counter b = C/L meaning a whole line.
 498+ 7761                              Colon_Def CLINE, "(LINE)", is_normal
 498+ 7761             >                New_Def  CLINE, "(LINE)", Enter_Ptr, is_normal ; ok
 498+ 7761             >
 498+ 7761             >Dict_Ptr        defl    $
 498+ 7761             >
 498+ 7761             >//              ______________________________________________________________________
 498+ 7761             >//              Heap part
 498+ 7761             >
 498+ 7761             >
 498+ 7761             >                org     (Heap_Ptr & $1FFF) + $E000
 498+ EA08             >
 498+ EA08             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 498+ EA08             >Latest_Definition defl  Heap_Ptr
 498+ EA08             >
 498+ EA08             >                // dummy db directives used to calculate length of namec
 498+ EA08 28 4C 49 4E >                db      "(LINE)"
 498+ EA0C 45 29       >
 498+ EA0E             >len_NFA         defl    $ - temp_NFA
 498+ EA0E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 498+ EA08             >
 498+ EA08 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 498+ EA09 28 4C 49 4E >                db      "(LINE)"               // name string in 7-bit ascii, but
 498+ EA0D 45 29       >
 498+ EA0F             >                org     $-1                 // alter last byte of Name just above to set
 498+ EA0E A9          >                db      {b $} | END_BIT     // msb as name end
 498+ EA0F             >
 498+ EA0F 01 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 498+ EA11             >Prev_Ptr        defl    Heap_Ptr
 498+ EA11             >
 498+ EA11             >mirror_Ptr      defl    $
 498+ EA11             >
 498+ EA11 63 77       >                dw      Dict_Ptr + 2        // xt
 498+ EA13             >Heap_Ptr        defl    $ - $E000           // save current HP
 498+ EA13             >
 498+ EA13             >Current_HP      defl  $ - $E000             // used to set HP once!
 498+ EA13             >
 498+ EA13             >//              ______________________________________________________________________
 498+ EA13             >//              Dictionary part
 498+ EA13             >
 498+ EA13             >                org     Dict_Ptr
 498+ 7761             >
 498+ 7761 11 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 498+ 7763             >
 498+ 7763             >CLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 498+ 7763 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 498+ 7766             >
 498+ 7766             >
 498+ 7766             >                endif           ; ok        // for other definitions it "points" the correct handler
 498+ 7766             >                // Use of "; ok" to suppress "warning[fwdref]"
 498+ 7766             >
 498+ 7766             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 499+ 7766 5B 68                        dw      TO_R                    // >r
 500+ 7768 A2 6A                        dw      CL                      // c/l
 501+ 776A A9 6A 49 77                  dw      BBUF, MUL_DIV_MOD       // */mod
 502+ 776E 66 68                        dw      R_TO                    // r>
 503+ 7770 B0 6A 19 77                  dw      BSCR, MUL, PLUS         // b/scr * +
 503+ 7774 9E 68
 504+ 7776 76 79                        dw      BLOCK                   // block   ( forward )
 505+ 7778 9E 68                        dw      PLUS                    // +
 506+ 777A A2 6A                        dw      CL                      // c/l
 507+ 777C 51 68                        dw      EXIT                    // ;
 508+ 777E
 509+ 777E              //  ______________________________________________________________________
 510+ 777E              //
 511+ 777E              // .line        n1 n2 --
 512+ 777E              // Sends to output line  n1  of screen n2.
 513+ 777E                              Colon_Def DOT_LINE, ".LINE", is_normal
 513+ 777E             >                New_Def  DOT_LINE, ".LINE", Enter_Ptr, is_normal ; ok
 513+ 777E             >
 513+ 777E             >Dict_Ptr        defl    $
 513+ 777E             >
 513+ 777E             >//              ______________________________________________________________________
 513+ 777E             >//              Heap part
 513+ 777E             >
 513+ 777E             >
 513+ 777E             >                org     (Heap_Ptr & $1FFF) + $E000
 513+ EA13             >
 513+ EA13             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 513+ EA13             >Latest_Definition defl  Heap_Ptr
 513+ EA13             >
 513+ EA13             >                // dummy db directives used to calculate length of namec
 513+ EA13 2E 4C 49 4E >                db      ".LINE"
 513+ EA17 45          >
 513+ EA18             >len_NFA         defl    $ - temp_NFA
 513+ EA18             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 513+ EA13             >
 513+ EA13 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 513+ EA14 2E 4C 49 4E >                db      ".LINE"               // name string in 7-bit ascii, but
 513+ EA18 45          >
 513+ EA19             >                org     $-1                 // alter last byte of Name just above to set
 513+ EA18 C5          >                db      {b $} | END_BIT     // msb as name end
 513+ EA19             >
 513+ EA19 08 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 513+ EA1B             >Prev_Ptr        defl    Heap_Ptr
 513+ EA1B             >
 513+ EA1B             >mirror_Ptr      defl    $
 513+ EA1B             >
 513+ EA1B 80 77       >                dw      Dict_Ptr + 2        // xt
 513+ EA1D             >Heap_Ptr        defl    $ - $E000           // save current HP
 513+ EA1D             >
 513+ EA1D             >Current_HP      defl  $ - $E000             // used to set HP once!
 513+ EA1D             >
 513+ EA1D             >//              ______________________________________________________________________
 513+ EA1D             >//              Dictionary part
 513+ EA1D             >
 513+ EA1D             >                org     Dict_Ptr
 513+ 777E             >
 513+ 777E 1B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 513+ 7780             >
 513+ 7780             >DOT_LINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 513+ 7780 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 513+ 7783             >
 513+ 7783             >
 513+ 7783             >                endif           ; ok        // for other definitions it "points" the correct handler
 513+ 7783             >                // Use of "; ok" to suppress "warning[fwdref]"
 513+ 7783             >
 513+ 7783             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 514+ 7783 63 77 81 6F                  dw      CLINE, LTRAILING, TYPE  // (line) -trailing type
 514+ 7787 6A 6F
 515+ 7789 51 68                        dw      EXIT                    // ;
 516+ 778B
 517+ 778B              //  ______________________________________________________________________
 518+ 778B              //
 519+ 778B              // message       n1 n2 --
 520+ 778B              // prints error message to current channel.
 521+ 778B              // if WARNING is 0, prints "MSG#n".
 522+ 778B              // if WARNING is 1, prints line n of screen 4.
 523+ 778B              // if WARNING is -1, see ERROR
 524+ 778B              // value can be negative or beyond block 4.
 525+ 778B                              Colon_Def MESSAGE, "MESSAGE", is_normal
 525+ 778B             >                New_Def  MESSAGE, "MESSAGE", Enter_Ptr, is_normal ; ok
 525+ 778B             >
 525+ 778B             >Dict_Ptr        defl    $
 525+ 778B             >
 525+ 778B             >//              ______________________________________________________________________
 525+ 778B             >//              Heap part
 525+ 778B             >
 525+ 778B             >
 525+ 778B             >                org     (Heap_Ptr & $1FFF) + $E000
 525+ EA1D             >
 525+ EA1D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 525+ EA1D             >Latest_Definition defl  Heap_Ptr
 525+ EA1D             >
 525+ EA1D             >                // dummy db directives used to calculate length of namec
 525+ EA1D 4D 45 53 53 >                db      "MESSAGE"
 525+ EA21 41 47 45    >
 525+ EA24             >len_NFA         defl    $ - temp_NFA
 525+ EA24             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 525+ EA1D             >
 525+ EA1D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 525+ EA1E 4D 45 53 53 >                db      "MESSAGE"               // name string in 7-bit ascii, but
 525+ EA22 41 47 45    >
 525+ EA25             >                org     $-1                 // alter last byte of Name just above to set
 525+ EA24 C5          >                db      {b $} | END_BIT     // msb as name end
 525+ EA25             >
 525+ EA25 13 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 525+ EA27             >Prev_Ptr        defl    Heap_Ptr
 525+ EA27             >
 525+ EA27             >mirror_Ptr      defl    $
 525+ EA27             >
 525+ EA27 8D 77       >                dw      Dict_Ptr + 2        // xt
 525+ EA29             >Heap_Ptr        defl    $ - $E000           // save current HP
 525+ EA29             >
 525+ EA29             >Current_HP      defl  $ - $E000             // used to set HP once!
 525+ EA29             >
 525+ EA29             >//              ______________________________________________________________________
 525+ EA29             >//              Dictionary part
 525+ EA29             >
 525+ EA29             >                org     Dict_Ptr
 525+ 778B             >
 525+ 778B 27 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 525+ 778D             >
 525+ 778D             >MESSAGE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 525+ 778D CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 525+ 7790             >
 525+ 7790             >
 525+ 7790             >                endif           ; ok        // for other definitions it "points" the correct handler
 525+ 7790             >                // Use of "; ok" to suppress "warning[fwdref]"
 525+ 7790             >
 525+ 7790             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 526+ 7790 E9 6A 86 69                  dw      WARNING, FETCH          // warning @
 527+ 7794                                                              // if
 528+ 7794 F3 63                        dw      ZBRANCH
 529+ 7796 12 00                        dw      Message_Else - $
 530+ 7798 A3 63 20 00                  dw          LIT, 32, PLUS       //      32 +
 530+ 779C 9E 68
 531+ 779E 86 6A                        dw          TWO                 //      2
 532+ 77A0 80 77                        dw          DOT_LINE            //      .line
 533+ 77A2 66 6C                        dw          SPACE               //      space
 534+ 77A4                                                              // else
 535+ 77A4
 536+ 77A4 EF 63                        dw      BRANCH
 537+ 77A6 0B 00                        dw      Message_ENdif - $
 538+ 77A8              Message_Else:
 539+ 77A8 07 71                        dw          C_DOT_QUOTE         //      .( msg#)
 540+ 77AA 04 6D 73 67                  db          4, "msg#"
 540+ 77AE 23
 541+ 77AF A7 7E                        dw          DOT                 //      .  ( forward )
 542+ 77B1              Message_ENdif:                                  // endif
 543+ 77B1 51 68                        dw      EXIT                    // ;
 544+ 77B3
 545+ 77B3
 546+ 77B3              //  ______________________________________________________________________
 547+ 77B3              //
 548+ 77B3              // device
 549+ 77B3                              Variable_Def DEVICE,   "DEVICE",   2
 549+ 77B3             >                New_Def  DEVICE, "DEVICE", Variable_Ptr, is_normal
 549+ 77B3             >
 549+ 77B3             >Dict_Ptr        defl    $
 549+ 77B3             >
 549+ 77B3             >//              ______________________________________________________________________
 549+ 77B3             >//              Heap part
 549+ 77B3             >
 549+ 77B3             >
 549+ 77B3             >                org     (Heap_Ptr & $1FFF) + $E000
 549+ EA29             >
 549+ EA29             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 549+ EA29             >Latest_Definition defl  Heap_Ptr
 549+ EA29             >
 549+ EA29             >                // dummy db directives used to calculate length of namec
 549+ EA29 44 45 56 49 >                db      "DEVICE"
 549+ EA2D 43 45       >
 549+ EA2F             >len_NFA         defl    $ - temp_NFA
 549+ EA2F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 549+ EA29             >
 549+ EA29 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 549+ EA2A 44 45 56 49 >                db      "DEVICE"               // name string in 7-bit ascii, but
 549+ EA2E 43 45       >
 549+ EA30             >                org     $-1                 // alter last byte of Name just above to set
 549+ EA2F C5          >                db      {b $} | END_BIT     // msb as name end
 549+ EA30             >
 549+ EA30 1D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 549+ EA32             >Prev_Ptr        defl    Heap_Ptr
 549+ EA32             >
 549+ EA32             >mirror_Ptr      defl    $
 549+ EA32             >
 549+ EA32 B5 77       >                dw      Dict_Ptr + 2        // xt
 549+ EA34             >Heap_Ptr        defl    $ - $E000           // save current HP
 549+ EA34             >
 549+ EA34             >Current_HP      defl  $ - $E000             // used to set HP once!
 549+ EA34             >
 549+ EA34             >//              ______________________________________________________________________
 549+ EA34             >//              Dictionary part
 549+ EA34             >
 549+ EA34             >                org     Dict_Ptr
 549+ 77B3             >
 549+ 77B3 32 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 549+ 77B5             >
 549+ 77B5             >DEVICE:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 549+ 77B5 CD 5F 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 549+ 77B8             >
 549+ 77B8             >
 549+ 77B8             >                endif           ; ok        // for other definitions it "points" the correct handler
 549+ 77B8             >                // Use of "; ok" to suppress "warning[fwdref]"
 549+ 77B8             >
 549+ 77B8             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 549+ 77B8 02 00       >                dw      2
 550+ 77BA
 551+ 77BA              //  ______________________________________________________________________
 552+ 77BA
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L2.asm
 142  77BA                              include "next-opt1.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt1.asm
   1+ 77BA              //  ______________________________________________________________________
   2+ 77BA              //
   3+ 77BA              //  next-opt.asm
   4+ 77BA              //
   5+ 77BA              //  ZX Spectrum Next - peculiar definitions
   6+ 77BA              //  ______________________________________________________________________
   7+ 77BA
   8+ 77BA              //  ______________________________________________________________________
   9+ 77BA              //
  10+ 77BA              // reg@         n -- b
  11+ 77BA              // read Next REGister n giving byte b
  12+ 77BA              //
  13+ 77BA              //              Colon_Def REG_FETCH, "REG@", is_normal
  14+ 77BA              //              dw      LIT, $243B
  15+ 77BA              //              dw      PSTORE
  16+ 77BA              //              dw      LIT, $253B
  17+ 77BA              //              dw      PFETCH
  18+ 77BA              //              dw      EXIT
  19+ 77BA                              New_Def REG_FETCH, "REG@", is_code, is_normal
  19+ 77BA             >
  19+ 77BA             >Dict_Ptr        defl    $
  19+ 77BA             >
  19+ 77BA             >//              ______________________________________________________________________
  19+ 77BA             >//              Heap part
  19+ 77BA             >
  19+ 77BA             >
  19+ 77BA             >                org     (Heap_Ptr & $1FFF) + $E000
  19+ EA34             >
  19+ EA34             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  19+ EA34             >Latest_Definition defl  Heap_Ptr
  19+ EA34             >
  19+ EA34             >                // dummy db directives used to calculate length of namec
  19+ EA34 52 45 47 40 >                db      "REG@"
  19+ EA38             >len_NFA         defl    $ - temp_NFA
  19+ EA38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  19+ EA34             >
  19+ EA34 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  19+ EA35 52 45 47 40 >                db      "REG@"               // name string in 7-bit ascii, but
  19+ EA39             >                org     $-1                 // alter last byte of Name just above to set
  19+ EA38 C0          >                db      {b $} | END_BIT     // msb as name end
  19+ EA39             >
  19+ EA39 29 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  19+ EA3B             >Prev_Ptr        defl    Heap_Ptr
  19+ EA3B             >
  19+ EA3B             >mirror_Ptr      defl    $
  19+ EA3B             >
  19+ EA3B BC 77       >                dw      Dict_Ptr + 2        // xt
  19+ EA3D             >Heap_Ptr        defl    $ - $E000           // save current HP
  19+ EA3D             >
  19+ EA3D             >Current_HP      defl  $ - $E000             // used to set HP once!
  19+ EA3D             >
  19+ EA3D             >//              ______________________________________________________________________
  19+ EA3D             >//              Dictionary part
  19+ EA3D             >
  19+ EA3D             >                org     Dict_Ptr
  19+ 77BA             >
  19+ 77BA 3B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  19+ 77BC             >
  19+ 77BC             >REG_FETCH:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  19+ 77BC ~           >                call    runcode ; ok        // for primitive definitions  actual code
  19+ 77BC ~           >
  19+ 77BC ~           >
  19+ 77BC             >                endif           ; ok        // for other definitions it "points" the correct handler
  19+ 77BC             >                // Use of "; ok" to suppress "warning[fwdref]"
  19+ 77BC             >
  19+ 77BC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  20+ 77BC D9                           exx
  21+ 77BD 01 3B 24                     ld      bc, $243B
  22+ 77C0 E1                           pop     hl
  23+ 77C1 ED 69                        out     (c), l
  24+ 77C3 04                           inc     b
  25+ 77C4 ED 68                        in      l, (c)
  26+ 77C6 E5                           push    hl
  27+ 77C7 D9                           exx
  28+ 77C8                              next
  28+ 77C8 DD E9       >                jp      (ix)
  29+ 77CA
  30+ 77CA
  31+ 77CA              //  ______________________________________________________________________
  32+ 77CA              //
  33+ 77CA              // reg!         b n --
  34+ 77CA              // write value b to Next REGister n
  35+ 77CA              //
  36+ 77CA              //              Colon_Def REG_STORE, "REG!", is_normal
  37+ 77CA              //              dw      LIT, $243B
  38+ 77CA              //              dw      PSTORE
  39+ 77CA              //              dw      LIT, $253B
  40+ 77CA              //              dw      PSTORE
  41+ 77CA              //              dw      EXIT
  42+ 77CA                              New_Def REG_STORE, "REG!", is_code, is_normal
  42+ 77CA             >
  42+ 77CA             >Dict_Ptr        defl    $
  42+ 77CA             >
  42+ 77CA             >//              ______________________________________________________________________
  42+ 77CA             >//              Heap part
  42+ 77CA             >
  42+ 77CA             >
  42+ 77CA             >                org     (Heap_Ptr & $1FFF) + $E000
  42+ EA3D             >
  42+ EA3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  42+ EA3D             >Latest_Definition defl  Heap_Ptr
  42+ EA3D             >
  42+ EA3D             >                // dummy db directives used to calculate length of namec
  42+ EA3D 52 45 47 21 >                db      "REG!"
  42+ EA41             >len_NFA         defl    $ - temp_NFA
  42+ EA41             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  42+ EA3D             >
  42+ EA3D 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  42+ EA3E 52 45 47 21 >                db      "REG!"               // name string in 7-bit ascii, but
  42+ EA42             >                org     $-1                 // alter last byte of Name just above to set
  42+ EA41 A1          >                db      {b $} | END_BIT     // msb as name end
  42+ EA42             >
  42+ EA42 34 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  42+ EA44             >Prev_Ptr        defl    Heap_Ptr
  42+ EA44             >
  42+ EA44             >mirror_Ptr      defl    $
  42+ EA44             >
  42+ EA44 CC 77       >                dw      Dict_Ptr + 2        // xt
  42+ EA46             >Heap_Ptr        defl    $ - $E000           // save current HP
  42+ EA46             >
  42+ EA46             >Current_HP      defl  $ - $E000             // used to set HP once!
  42+ EA46             >
  42+ EA46             >//              ______________________________________________________________________
  42+ EA46             >//              Dictionary part
  42+ EA46             >
  42+ EA46             >                org     Dict_Ptr
  42+ 77CA             >
  42+ 77CA 44 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  42+ 77CC             >
  42+ 77CC             >REG_STORE:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  42+ 77CC ~           >                call    runcode ; ok        // for primitive definitions  actual code
  42+ 77CC ~           >
  42+ 77CC ~           >
  42+ 77CC             >                endif           ; ok        // for other definitions it "points" the correct handler
  42+ 77CC             >                // Use of "; ok" to suppress "warning[fwdref]"
  42+ 77CC             >
  42+ 77CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  43+ 77CC D9                           exx
  44+ 77CD 01 3B 24                     ld      bc, $243B
  45+ 77D0 E1                           pop     hl
  46+ 77D1 ED 69                        out     (c), l
  47+ 77D3 04                           inc     b
  48+ 77D4 E1                           pop     hl
  49+ 77D5 ED 69                        out     (c), l
  50+ 77D7 D9                           exx
  51+ 77D8                              next
  51+ 77D8 DD E9       >                jp      (ix)
  52+ 77DA
  53+ 77DA
  54+ 77DA              //  ______________________________________________________________________
  55+ 77DA              //
  56+ 77DA              // m_p3dos      n1 n2 n3 n4 a -- n5 n6 n7 n8  f
  57+ 77DA              // NextZXOS call wrapper.
  58+ 77DA              //  n1 = hl register parameter value
  59+ 77DA              //  n2 = de register parameter value
  60+ 77DA              //  n3 = bc register parameter value
  61+ 77DA              //  n4 =  a register parameter value
  62+ 77DA              //   a = routine address in ROM 3
  63+ 77DA              // ----
  64+ 77DA              //  n5 = hl returned value
  65+ 77DA              //  n6 = de returned value
  66+ 77DA              //  n7 = bc returned value
  67+ 77DA              //  n8 =  a returned value
  68+ 77DA              //   f
  69+ 77DA                              New_Def M_P3DOS, "M_P3DOS", is_code, is_normal
  69+ 77DA             >
  69+ 77DA             >Dict_Ptr        defl    $
  69+ 77DA             >
  69+ 77DA             >//              ______________________________________________________________________
  69+ 77DA             >//              Heap part
  69+ 77DA             >
  69+ 77DA             >
  69+ 77DA             >                org     (Heap_Ptr & $1FFF) + $E000
  69+ EA46             >
  69+ EA46             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  69+ EA46             >Latest_Definition defl  Heap_Ptr
  69+ EA46             >
  69+ EA46             >                // dummy db directives used to calculate length of namec
  69+ EA46 4D 5F 50 33 >                db      "M_P3DOS"
  69+ EA4A 44 4F 53    >
  69+ EA4D             >len_NFA         defl    $ - temp_NFA
  69+ EA4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  69+ EA46             >
  69+ EA46 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  69+ EA47 4D 5F 50 33 >                db      "M_P3DOS"               // name string in 7-bit ascii, but
  69+ EA4B 44 4F 53    >
  69+ EA4E             >                org     $-1                 // alter last byte of Name just above to set
  69+ EA4D D3          >                db      {b $} | END_BIT     // msb as name end
  69+ EA4E             >
  69+ EA4E 3D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  69+ EA50             >Prev_Ptr        defl    Heap_Ptr
  69+ EA50             >
  69+ EA50             >mirror_Ptr      defl    $
  69+ EA50             >
  69+ EA50 DC 77       >                dw      Dict_Ptr + 2        // xt
  69+ EA52             >Heap_Ptr        defl    $ - $E000           // save current HP
  69+ EA52             >
  69+ EA52             >Current_HP      defl  $ - $E000             // used to set HP once!
  69+ EA52             >
  69+ EA52             >//              ______________________________________________________________________
  69+ EA52             >//              Dictionary part
  69+ EA52             >
  69+ EA52             >                org     Dict_Ptr
  69+ 77DA             >
  69+ 77DA 50 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  69+ 77DC             >
  69+ 77DC             >M_P3DOS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
  69+ 77DC ~           >                call    runcode ; ok        // for primitive definitions  actual code
  69+ 77DC ~           >
  69+ 77DC ~           >
  69+ 77DC             >                endif           ; ok        // for other definitions it "points" the correct handler
  69+ 77DC             >                // Use of "; ok" to suppress "warning[fwdref]"
  69+ 77DC             >
  69+ 77DC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  70+ 77DC D9                            exx
  71+ 77DD E1                            pop     hl                  // dos call entry address a  //  n1 n2 n3 n4
  72+ 77DE D1                            pop     de                  // a register argument       //  n1 n2 n3
  73+ 77DF 7B                            ld      a, e
  74+ 77E0 C1                            pop     bc                  // bc' argument              //  n1 n2
  75+ 77E1 D1                            pop     de                  // de' argument              //  n1
  76+ 77E2 E3                            ex      (sp), hl            // hl' argument and entry address in TOS
  77+ 77E3 D9                           exx
  78+ 77E4 E1                           pop     hl                  // entry address a
  79+ 77E5 DD E5                        push    ix
  80+ 77E7 D5                           push    de
  81+ 77E8 C5                           push    bc
  82+ 77E9 EB                           ex      de, hl              // de is entry address
  83+ 77EA              //              ld      (SP_Saved), sp
  84+ 77EA              //              ld      sp, Cold_origin - 5
  85+ 77EA
  86+ 77EA 0E 07                        ld      c, 7                // use 7 RAM Bank
  87+ 77EC F3                           di
  88+ 77ED CF                           rst     08
  89+ 77EE 94                           db      $94
  90+ 77EF FB                           ei
  91+ 77F0
  92+ 77F0
  93+ 77F0
  94+ 77F0              //              ld      sp, (SP_Saved)
  95+ 77F0              //              push    ix
  96+ 77F0              //              pop     hl
  97+ 77F0              //              ld      (IX_Echo), hl
  98+ 77F0 DD 22 98 63                  ld      (IX_Echo), ix
  99+ 77F4
 100+ 77F4 D9                           exx
 101+ 77F5 C1                           pop     bc
 102+ 77F6 D1                           pop     de
 103+ 77F7 DD E1                        pop     ix
 104+ 77F9 D9                            exx
 105+ 77FA E5                            push    hl
 106+ 77FB D5                            push    de
 107+ 77FC C5                            push    bc
 108+ 77FD 26 00                         ld      h, 0
 109+ 77FF 6F                            ld      l, a
 110+ 7800 E5                            push    hl
 111+ 7801 D9                           exx
 112+ 7802 ED 62                        sbc     hl, hl              // -1 for OK ; 0 for KO but now...
 113+ 7804 23                           inc     hl                  //  0 for OK ; 1 for ko
 114+ 7805 E5                           push    hl
 115+ 7806                              next
 115+ 7806 DD E9       >                jp      (ix)
 116+ 7808
 117+ 7808              //  ______________________________________________________________________
 118+ 7808              //
 119+ 7808              // blk-fh
 120+ 7808
 121+ 7808                              Variable_Def BLK_FH,   "BLK-FH",   1
 121+ 7808             >                New_Def  BLK_FH, "BLK-FH", Variable_Ptr, is_normal
 121+ 7808             >
 121+ 7808             >Dict_Ptr        defl    $
 121+ 7808             >
 121+ 7808             >//              ______________________________________________________________________
 121+ 7808             >//              Heap part
 121+ 7808             >
 121+ 7808             >
 121+ 7808             >                org     (Heap_Ptr & $1FFF) + $E000
 121+ EA52             >
 121+ EA52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 121+ EA52             >Latest_Definition defl  Heap_Ptr
 121+ EA52             >
 121+ EA52             >                // dummy db directives used to calculate length of namec
 121+ EA52 42 4C 4B 2D >                db      "BLK-FH"
 121+ EA56 46 48       >
 121+ EA58             >len_NFA         defl    $ - temp_NFA
 121+ EA58             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 121+ EA52             >
 121+ EA52 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 121+ EA53 42 4C 4B 2D >                db      "BLK-FH"               // name string in 7-bit ascii, but
 121+ EA57 46 48       >
 121+ EA59             >                org     $-1                 // alter last byte of Name just above to set
 121+ EA58 C8          >                db      {b $} | END_BIT     // msb as name end
 121+ EA59             >
 121+ EA59 46 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 121+ EA5B             >Prev_Ptr        defl    Heap_Ptr
 121+ EA5B             >
 121+ EA5B             >mirror_Ptr      defl    $
 121+ EA5B             >
 121+ EA5B 0A 78       >                dw      Dict_Ptr + 2        // xt
 121+ EA5D             >Heap_Ptr        defl    $ - $E000           // save current HP
 121+ EA5D             >
 121+ EA5D             >Current_HP      defl  $ - $E000             // used to set HP once!
 121+ EA5D             >
 121+ EA5D             >//              ______________________________________________________________________
 121+ EA5D             >//              Dictionary part
 121+ EA5D             >
 121+ EA5D             >                org     Dict_Ptr
 121+ 7808             >
 121+ 7808 5B 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 121+ 780A             >
 121+ 780A             >BLK_FH:          if Variable_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 121+ 780A CD 5F 6A    >                call    Variable_Ptr ; ok        // for primitive definitions  actual code
 121+ 780D             >
 121+ 780D             >
 121+ 780D             >                endif           ; ok        // for other definitions it "points" the correct handler
 121+ 780D             >                // Use of "; ok" to suppress "warning[fwdref]"
 121+ 780D             >
 121+ 780D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 121+ 780D 01 00       >                dw      1
 122+ 780F
 123+ 780F                              New_Def BLK_FNAME,   "BLK-FNAME", Create_Ptr, is_normal
 123+ 780F             >
 123+ 780F             >Dict_Ptr        defl    $
 123+ 780F             >
 123+ 780F             >//              ______________________________________________________________________
 123+ 780F             >//              Heap part
 123+ 780F             >
 123+ 780F             >
 123+ 780F             >                org     (Heap_Ptr & $1FFF) + $E000
 123+ EA5D             >
 123+ EA5D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 123+ EA5D             >Latest_Definition defl  Heap_Ptr
 123+ EA5D             >
 123+ EA5D             >                // dummy db directives used to calculate length of namec
 123+ EA5D 42 4C 4B 2D >                db      "BLK-FNAME"
 123+ EA61 46 4E 41 4D >
 123+ EA65 45          >
 123+ EA66             >len_NFA         defl    $ - temp_NFA
 123+ EA66             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 123+ EA5D             >
 123+ EA5D 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 123+ EA5E 42 4C 4B 2D >                db      "BLK-FNAME"               // name string in 7-bit ascii, but
 123+ EA62 46 4E 41 4D >
 123+ EA66 45          >
 123+ EA67             >                org     $-1                 // alter last byte of Name just above to set
 123+ EA66 C5          >                db      {b $} | END_BIT     // msb as name end
 123+ EA67             >
 123+ EA67 52 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 123+ EA69             >Prev_Ptr        defl    Heap_Ptr
 123+ EA69             >
 123+ EA69             >mirror_Ptr      defl    $
 123+ EA69             >
 123+ EA69 11 78       >                dw      Dict_Ptr + 2        // xt
 123+ EA6B             >Heap_Ptr        defl    $ - $E000           // save current HP
 123+ EA6B             >
 123+ EA6B             >Current_HP      defl  $ - $E000             // used to set HP once!
 123+ EA6B             >
 123+ EA6B             >//              ______________________________________________________________________
 123+ EA6B             >//              Dictionary part
 123+ EA6B             >
 123+ EA6B             >                org     Dict_Ptr
 123+ 780F             >
 123+ 780F 69 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 123+ 7811             >
 123+ 7811             >BLK_FNAME:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 123+ 7811 CD 05 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 123+ 7814             >
 123+ 7814             >
 123+ 7814             >                endif           ; ok        // for other definitions it "points" the correct handler
 123+ 7814             >                // Use of "; ok" to suppress "warning[fwdref]"
 123+ 7814             >
 123+ 7814             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 124+ 7814
 125+ 7814 0E 21 42 6C                  db      14, "!Blocks-64.bin", 0
 125+ 7818 6F 63 6B 73
 125+ 781C 2D 36 34 2E
 125+ 7820 62 69 6E 00
 126+ 7824 00 00 00...                  ds      24     // so this buffer is 24+14+1=39
 127+ 783C
 128+ 783C              //  ______________________________________________________________________
 129+ 783C              //
 130+ 783C              // blk-seek     n --
 131+ 783C              // seek block n  within blocks!.bin  file
 132+ 783C                              Colon_Def BLK_SEEK, "BLK-SEEK", is_normal
 132+ 783C             >                New_Def  BLK_SEEK, "BLK-SEEK", Enter_Ptr, is_normal ; ok
 132+ 783C             >
 132+ 783C             >Dict_Ptr        defl    $
 132+ 783C             >
 132+ 783C             >//              ______________________________________________________________________
 132+ 783C             >//              Heap part
 132+ 783C             >
 132+ 783C             >
 132+ 783C             >                org     (Heap_Ptr & $1FFF) + $E000
 132+ EA6B             >
 132+ EA6B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 132+ EA6B             >Latest_Definition defl  Heap_Ptr
 132+ EA6B             >
 132+ EA6B             >                // dummy db directives used to calculate length of namec
 132+ EA6B 42 4C 4B 2D >                db      "BLK-SEEK"
 132+ EA6F 53 45 45 4B >
 132+ EA73             >len_NFA         defl    $ - temp_NFA
 132+ EA73             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 132+ EA6B             >
 132+ EA6B 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 132+ EA6C 42 4C 4B 2D >                db      "BLK-SEEK"               // name string in 7-bit ascii, but
 132+ EA70 53 45 45 4B >
 132+ EA74             >                org     $-1                 // alter last byte of Name just above to set
 132+ EA73 CB          >                db      {b $} | END_BIT     // msb as name end
 132+ EA74             >
 132+ EA74 5D 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 132+ EA76             >Prev_Ptr        defl    Heap_Ptr
 132+ EA76             >
 132+ EA76             >mirror_Ptr      defl    $
 132+ EA76             >
 132+ EA76 3E 78       >                dw      Dict_Ptr + 2        // xt
 132+ EA78             >Heap_Ptr        defl    $ - $E000           // save current HP
 132+ EA78             >
 132+ EA78             >Current_HP      defl  $ - $E000             // used to set HP once!
 132+ EA78             >
 132+ EA78             >//              ______________________________________________________________________
 132+ EA78             >//              Dictionary part
 132+ EA78             >
 132+ EA78             >                org     Dict_Ptr
 132+ 783C             >
 132+ 783C 76 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 132+ 783E             >
 132+ 783E             >BLK_SEEK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 132+ 783E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 132+ 7841             >
 132+ 7841             >
 132+ 7841             >                endif           ; ok        // for other definitions it "points" the correct handler
 132+ 7841             >                // Use of "; ok" to suppress "warning[fwdref]"
 132+ 7841             >
 132+ 7841             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 133+ 7841 A9 6A 90 76                  dw  BBUF, MMUL
 134+ 7845 0A 78 86 69                  dw  BLK_FH, FETCH
 135+ 7849 D6 66                        dw  F_SEEK
 136+ 784B A3 63 2D 00                  dw  LIT, $2D, QERROR
 136+ 784F D1 6D
 137+ 7851 51 68                        dw  EXIT
 138+ 7853
 139+ 7853              //  ______________________________________________________________________
 140+ 7853              //
 141+ 7853              // blk-read     n --
 142+ 7853              // seek block n  within blocks!.bin  file
 143+ 7853                              Colon_Def BLK_READ, "BLK-READ", is_normal
 143+ 7853             >                New_Def  BLK_READ, "BLK-READ", Enter_Ptr, is_normal ; ok
 143+ 7853             >
 143+ 7853             >Dict_Ptr        defl    $
 143+ 7853             >
 143+ 7853             >//              ______________________________________________________________________
 143+ 7853             >//              Heap part
 143+ 7853             >
 143+ 7853             >
 143+ 7853             >                org     (Heap_Ptr & $1FFF) + $E000
 143+ EA78             >
 143+ EA78             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 143+ EA78             >Latest_Definition defl  Heap_Ptr
 143+ EA78             >
 143+ EA78             >                // dummy db directives used to calculate length of namec
 143+ EA78 42 4C 4B 2D >                db      "BLK-READ"
 143+ EA7C 52 45 41 44 >
 143+ EA80             >len_NFA         defl    $ - temp_NFA
 143+ EA80             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 143+ EA78             >
 143+ EA78 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 143+ EA79 42 4C 4B 2D >                db      "BLK-READ"               // name string in 7-bit ascii, but
 143+ EA7D 52 45 41 44 >
 143+ EA81             >                org     $-1                 // alter last byte of Name just above to set
 143+ EA80 C4          >                db      {b $} | END_BIT     // msb as name end
 143+ EA81             >
 143+ EA81 6B 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 143+ EA83             >Prev_Ptr        defl    Heap_Ptr
 143+ EA83             >
 143+ EA83             >mirror_Ptr      defl    $
 143+ EA83             >
 143+ EA83 55 78       >                dw      Dict_Ptr + 2        // xt
 143+ EA85             >Heap_Ptr        defl    $ - $E000           // save current HP
 143+ EA85             >
 143+ EA85             >Current_HP      defl  $ - $E000             // used to set HP once!
 143+ EA85             >
 143+ EA85             >//              ______________________________________________________________________
 143+ EA85             >//              Dictionary part
 143+ EA85             >
 143+ EA85             >                org     Dict_Ptr
 143+ 7853             >
 143+ 7853 83 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 143+ 7855             >
 143+ 7855             >BLK_READ:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 143+ 7855 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 143+ 7858             >
 143+ 7858             >
 143+ 7858             >                endif           ; ok        // for other definitions it "points" the correct handler
 143+ 7858             >                // Use of "; ok" to suppress "warning[fwdref]"
 143+ 7858             >
 143+ 7858             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 144+ 7858 3E 78                        dw  BLK_SEEK
 145+ 785A A9 6A                        dw  BBUF
 146+ 785C 0A 78 86 69                  dw  BLK_FH, FETCH
 147+ 7860 28 67                        dw  F_READ
 148+ 7862 A3 63 2E 00                  dw  LIT, $2E, QERROR
 148+ 7866 D1 6D
 149+ 7868 01 69                        dw  DROP
 150+ 786A 51 68                        dw  EXIT
 151+ 786C
 152+ 786C              //  ______________________________________________________________________
 153+ 786C              //
 154+ 786C              // blk-write     n --
 155+ 786C              // seek block n  within blocks!.bin  file
 156+ 786C                              Colon_Def BLK_WRITE, "BLK-WRITE", is_normal
 156+ 786C             >                New_Def  BLK_WRITE, "BLK-WRITE", Enter_Ptr, is_normal ; ok
 156+ 786C             >
 156+ 786C             >Dict_Ptr        defl    $
 156+ 786C             >
 156+ 786C             >//              ______________________________________________________________________
 156+ 786C             >//              Heap part
 156+ 786C             >
 156+ 786C             >
 156+ 786C             >                org     (Heap_Ptr & $1FFF) + $E000
 156+ EA85             >
 156+ EA85             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 156+ EA85             >Latest_Definition defl  Heap_Ptr
 156+ EA85             >
 156+ EA85             >                // dummy db directives used to calculate length of namec
 156+ EA85 42 4C 4B 2D >                db      "BLK-WRITE"
 156+ EA89 57 52 49 54 >
 156+ EA8D 45          >
 156+ EA8E             >len_NFA         defl    $ - temp_NFA
 156+ EA8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 156+ EA85             >
 156+ EA85 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 156+ EA86 42 4C 4B 2D >                db      "BLK-WRITE"               // name string in 7-bit ascii, but
 156+ EA8A 57 52 49 54 >
 156+ EA8E 45          >
 156+ EA8F             >                org     $-1                 // alter last byte of Name just above to set
 156+ EA8E C5          >                db      {b $} | END_BIT     // msb as name end
 156+ EA8F             >
 156+ EA8F 78 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 156+ EA91             >Prev_Ptr        defl    Heap_Ptr
 156+ EA91             >
 156+ EA91             >mirror_Ptr      defl    $
 156+ EA91             >
 156+ EA91 6E 78       >                dw      Dict_Ptr + 2        // xt
 156+ EA93             >Heap_Ptr        defl    $ - $E000           // save current HP
 156+ EA93             >
 156+ EA93             >Current_HP      defl  $ - $E000             // used to set HP once!
 156+ EA93             >
 156+ EA93             >//              ______________________________________________________________________
 156+ EA93             >//              Dictionary part
 156+ EA93             >
 156+ EA93             >                org     Dict_Ptr
 156+ 786C             >
 156+ 786C 91 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 156+ 786E             >
 156+ 786E             >BLK_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 156+ 786E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 156+ 7871             >
 156+ 7871             >
 156+ 7871             >                endif           ; ok        // for other definitions it "points" the correct handler
 156+ 7871             >                // Use of "; ok" to suppress "warning[fwdref]"
 156+ 7871             >
 156+ 7871             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 157+ 7871 3E 78                        dw  BLK_SEEK
 158+ 7873 A9 6A                        dw  BBUF
 159+ 7875 0A 78 86 69                  dw  BLK_FH, FETCH
 160+ 7879 45 67                        dw  F_WRITE
 161+ 787B A3 63 2F 00                  dw  LIT, $2F, QERROR
 161+ 787F D1 6D
 162+ 7881 01 69                        dw  DROP
 163+ 7883 51 68                        dw  EXIT
 164+ 7885
 165+ 7885              //  ______________________________________________________________________
 166+ 7885              //
 167+ 7885              // blk-init     n --
 168+ 7885              // seek block n  within blocks!.bin  file
 169+ 7885                              Colon_Def BLK_INIT, "BLK-INIT", is_normal
 169+ 7885             >                New_Def  BLK_INIT, "BLK-INIT", Enter_Ptr, is_normal ; ok
 169+ 7885             >
 169+ 7885             >Dict_Ptr        defl    $
 169+ 7885             >
 169+ 7885             >//              ______________________________________________________________________
 169+ 7885             >//              Heap part
 169+ 7885             >
 169+ 7885             >
 169+ 7885             >                org     (Heap_Ptr & $1FFF) + $E000
 169+ EA93             >
 169+ EA93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 169+ EA93             >Latest_Definition defl  Heap_Ptr
 169+ EA93             >
 169+ EA93             >                // dummy db directives used to calculate length of namec
 169+ EA93 42 4C 4B 2D >                db      "BLK-INIT"
 169+ EA97 49 4E 49 54 >
 169+ EA9B             >len_NFA         defl    $ - temp_NFA
 169+ EA9B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 169+ EA93             >
 169+ EA93 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 169+ EA94 42 4C 4B 2D >                db      "BLK-INIT"               // name string in 7-bit ascii, but
 169+ EA98 49 4E 49 54 >
 169+ EA9C             >                org     $-1                 // alter last byte of Name just above to set
 169+ EA9B D4          >                db      {b $} | END_BIT     // msb as name end
 169+ EA9C             >
 169+ EA9C 85 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 169+ EA9E             >Prev_Ptr        defl    Heap_Ptr
 169+ EA9E             >
 169+ EA9E             >mirror_Ptr      defl    $
 169+ EA9E             >
 169+ EA9E 87 78       >                dw      Dict_Ptr + 2        // xt
 169+ EAA0             >Heap_Ptr        defl    $ - $E000           // save current HP
 169+ EAA0             >
 169+ EAA0             >Current_HP      defl  $ - $E000             // used to set HP once!
 169+ EAA0             >
 169+ EAA0             >//              ______________________________________________________________________
 169+ EAA0             >//              Dictionary part
 169+ EAA0             >
 169+ EAA0             >                org     Dict_Ptr
 169+ 7885             >
 169+ 7885 9E 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 169+ 7887             >
 169+ 7887             >BLK_INIT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 169+ 7887 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 169+ 788A             >
 169+ 788A             >
 169+ 788A             >                endif           ; ok        // for other definitions it "points" the correct handler
 169+ 788A             >                // Use of "; ok" to suppress "warning[fwdref]"
 169+ 788A             >
 169+ 788A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 170+ 788A 0A 78 86 69                  dw  BLK_FH, FETCH, F_CLOSE, DROP
 170+ 788E F4 66 01 69
 171+ 7892 11 78 B7 68                  dw  BLK_FNAME, ONE_PLUS
 172+ 7896 9D 6B 8D 6A                  dw  HERE, THREE, F_OPEN         // open for update (read+write)
 172+ 789A 56 67
 173+ 789C A3 63 2C 00                  dw  LIT, $2C, QERROR
 173+ 78A0 D1 6D
 174+ 78A2 0A 78 90 69                  dw  BLK_FH, STORE
 175+ 78A6 51 68                        dw  EXIT
 176+ 78A8
 177+ 78A8              //  ______________________________________________________________________
 178+ 78A8              //
 179+ 78A8              // #sec
 180+ 78A8              // number of 512-Byte "sectors" available on thie sysstem.
 181+ 78A8              // it adds up to 16 MByte of data that can be used as source or pool for almost anything.
 182+ 78A8
 183+ 78A8                              Constant_Def NSEC , "#SEC", 32767
 183+ 78A8             >                New_Def  NSEC, "#SEC", Constant_Ptr, is_normal
 183+ 78A8             >
 183+ 78A8             >Dict_Ptr        defl    $
 183+ 78A8             >
 183+ 78A8             >//              ______________________________________________________________________
 183+ 78A8             >//              Heap part
 183+ 78A8             >
 183+ 78A8             >
 183+ 78A8             >                org     (Heap_Ptr & $1FFF) + $E000
 183+ EAA0             >
 183+ EAA0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 183+ EAA0             >Latest_Definition defl  Heap_Ptr
 183+ EAA0             >
 183+ EAA0             >                // dummy db directives used to calculate length of namec
 183+ EAA0 23 53 45 43 >                db      "#SEC"
 183+ EAA4             >len_NFA         defl    $ - temp_NFA
 183+ EAA4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 183+ EAA0             >
 183+ EAA0 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 183+ EAA1 23 53 45 43 >                db      "#SEC"               // name string in 7-bit ascii, but
 183+ EAA5             >                org     $-1                 // alter last byte of Name just above to set
 183+ EAA4 C3          >                db      {b $} | END_BIT     // msb as name end
 183+ EAA5             >
 183+ EAA5 93 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 183+ EAA7             >Prev_Ptr        defl    Heap_Ptr
 183+ EAA7             >
 183+ EAA7             >mirror_Ptr      defl    $
 183+ EAA7             >
 183+ EAA7 AA 78       >                dw      Dict_Ptr + 2        // xt
 183+ EAA9             >Heap_Ptr        defl    $ - $E000           // save current HP
 183+ EAA9             >
 183+ EAA9             >Current_HP      defl  $ - $E000             // used to set HP once!
 183+ EAA9             >
 183+ EAA9             >//              ______________________________________________________________________
 183+ EAA9             >//              Dictionary part
 183+ EAA9             >
 183+ EAA9             >                org     Dict_Ptr
 183+ 78A8             >
 183+ 78A8 A7 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 183+ 78AA             >
 183+ 78AA             >NSEC:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 183+ 78AA CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 183+ 78AD             >
 183+ 78AD             >
 183+ 78AD             >                endif           ; ok        // for other definitions it "points" the correct handler
 183+ 78AD             >                // Use of "; ok" to suppress "warning[fwdref]"
 183+ 78AD             >
 183+ 78AD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 183+ 78AD FF 7F       >                dw      32767
 184+ 78AF
 185+ 78AF              //  ______________________________________________________________________
 186+ 78AF
 187+ 78AF
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/next-opt1.asm
 143  78AF                              include "L3.asm"
# file opened: C:\Zx\CSpect\Projects\vForth18_DOES/source/L3.asm
   1+ 78AF              //  ______________________________________________________________________
   2+ 78AF              //
   3+ 78AF              //  L3.asm
   4+ 78AF              //
   5+ 78AF              //  Continuation of L2.asm
   6+ 78AF              //  I/O Block definitions
   7+ 78AF              //  ______________________________________________________________________
   8+ 78AF
   9+ 78AF
  10+ 78AF              //  ______________________________________________________________________
  11+ 78AF              //
  12+ 78AF              // r/w          a n f --
  13+ 78AF              // read/write block n depending on flag f, true-flag means read, false-flag means write.
  14+ 78AF                              Colon_Def READ_WRITE, "R/W", is_normal
  14+ 78AF             >                New_Def  READ_WRITE, "R/W", Enter_Ptr, is_normal ; ok
  14+ 78AF             >
  14+ 78AF             >Dict_Ptr        defl    $
  14+ 78AF             >
  14+ 78AF             >//              ______________________________________________________________________
  14+ 78AF             >//              Heap part
  14+ 78AF             >
  14+ 78AF             >
  14+ 78AF             >                org     (Heap_Ptr & $1FFF) + $E000
  14+ EAA9             >
  14+ EAA9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  14+ EAA9             >Latest_Definition defl  Heap_Ptr
  14+ EAA9             >
  14+ EAA9             >                // dummy db directives used to calculate length of namec
  14+ EAA9 52 2F 57    >                db      "R/W"
  14+ EAAC             >len_NFA         defl    $ - temp_NFA
  14+ EAAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  14+ EAA9             >
  14+ EAA9 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  14+ EAAA 52 2F 57    >                db      "R/W"               // name string in 7-bit ascii, but
  14+ EAAD             >                org     $-1                 // alter last byte of Name just above to set
  14+ EAAC D7          >                db      {b $} | END_BIT     // msb as name end
  14+ EAAD             >
  14+ EAAD A0 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  14+ EAAF             >Prev_Ptr        defl    Heap_Ptr
  14+ EAAF             >
  14+ EAAF             >mirror_Ptr      defl    $
  14+ EAAF             >
  14+ EAAF B1 78       >                dw      Dict_Ptr + 2        // xt
  14+ EAB1             >Heap_Ptr        defl    $ - $E000           // save current HP
  14+ EAB1             >
  14+ EAB1             >Current_HP      defl  $ - $E000             // used to set HP once!
  14+ EAB1             >
  14+ EAB1             >//              ______________________________________________________________________
  14+ EAB1             >//              Dictionary part
  14+ EAB1             >
  14+ EAB1             >                org     Dict_Ptr
  14+ 78AF             >
  14+ 78AF AF 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  14+ 78B1             >
  14+ 78B1             >READ_WRITE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  14+ 78B1 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  14+ 78B4             >
  14+ 78B4             >
  14+ 78B4             >                endif           ; ok        // for other definitions it "points" the correct handler
  14+ 78B4             >                // Use of "; ok" to suppress "warning[fwdref]"
  14+ 78B4             >
  14+ 78B4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  15+ 78B4 5B 68                        dw      TO_R                    // >r
  16+ 78B6 BE 68                        dw      ONE_SUBTRACT            // 1-
  17+ 78B8 1C 69 87 68                  dw      DUP, ZLESS              // dup 0<
  18+ 78BC F8 68 AA 78                  dw      OVER, NSEC              // over #sec
  19+ 78C0 BE 68 0E 6C                  dw      ONE_SUBTRACT, GREATER   // 1- >
  20+ 78C4 1A 68                        dw      OR_OP                   // or
  21+ 78C6 A3 63 06 00                  dw      LIT, 6, QERROR          // 6 ?error
  21+ 78CA D1 6D
  22+ 78CC 66 68                        dw      R_TO                    // r>
  23+ 78CE                                                              // if
  24+ 78CE F3 63                        dw      ZBRANCH
  25+ 78D0 08 00                        dw      Read_Write_Else - $
  26+ 78D2 55 78                        dw          BLK_READ            //      blk-read
  27+ 78D4 EF 63                        dw      BRANCH
  28+ 78D6 04 00                        dw      Read_Write_Endif - $
  29+ 78D8              Read_Write_Else:                                // else
  30+ 78D8 6E 78                        dw          BLK_WRITE           //      blk-write
  31+ 78DA              Read_Write_Endif:                               // endif
  32+ 78DA 51 68                        dw      EXIT                    // ;
  33+ 78DC
  34+ 78DC
  35+ 78DC              //  ______________________________________________________________________
  36+ 78DC              //
  37+ 78DC              // +buf        a1 -- a2 f
  38+ 78DC              // advences to next buffer, cyclically rotating along them
  39+ 78DC                              Colon_Def PBUF, "+BUF", is_normal
  39+ 78DC             >                New_Def  PBUF, "+BUF", Enter_Ptr, is_normal ; ok
  39+ 78DC             >
  39+ 78DC             >Dict_Ptr        defl    $
  39+ 78DC             >
  39+ 78DC             >//              ______________________________________________________________________
  39+ 78DC             >//              Heap part
  39+ 78DC             >
  39+ 78DC             >
  39+ 78DC             >                org     (Heap_Ptr & $1FFF) + $E000
  39+ EAB1             >
  39+ EAB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  39+ EAB1             >Latest_Definition defl  Heap_Ptr
  39+ EAB1             >
  39+ EAB1             >                // dummy db directives used to calculate length of namec
  39+ EAB1 2B 42 55 46 >                db      "+BUF"
  39+ EAB5             >len_NFA         defl    $ - temp_NFA
  39+ EAB5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  39+ EAB1             >
  39+ EAB1 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  39+ EAB2 2B 42 55 46 >                db      "+BUF"               // name string in 7-bit ascii, but
  39+ EAB6             >                org     $-1                 // alter last byte of Name just above to set
  39+ EAB5 C6          >                db      {b $} | END_BIT     // msb as name end
  39+ EAB6             >
  39+ EAB6 A9 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  39+ EAB8             >Prev_Ptr        defl    Heap_Ptr
  39+ EAB8             >
  39+ EAB8             >mirror_Ptr      defl    $
  39+ EAB8             >
  39+ EAB8 DE 78       >                dw      Dict_Ptr + 2        // xt
  39+ EABA             >Heap_Ptr        defl    $ - $E000           // save current HP
  39+ EABA             >
  39+ EABA             >Current_HP      defl  $ - $E000             // used to set HP once!
  39+ EABA             >
  39+ EABA             >//              ______________________________________________________________________
  39+ EABA             >//              Dictionary part
  39+ EABA             >
  39+ EABA             >                org     Dict_Ptr
  39+ 78DC             >
  39+ 78DC B8 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  39+ 78DE             >
  39+ 78DE             >PBUF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  39+ 78DE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  39+ 78E1             >
  39+ 78E1             >
  39+ 78E1             >                endif           ; ok        // for other definitions it "points" the correct handler
  39+ 78E1             >                // Use of "; ok" to suppress "warning[fwdref]"
  39+ 78E1             >
  39+ 78E1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  40+ 78E1 A3 63 04 02                  dw      LIT, 516, PLUS          // 516 +
  40+ 78E5 9E 68
  41+ 78E7 1C 69 07 6B                  dw      DUP, LIMIT, FETCH       // dup limit @
  41+ 78EB 86 69
  42+ 78ED E8 6B                        dw      EQUALS                  // =
  43+ 78EF                                                              // if
  44+ 78EF F3 63                        dw      ZBRANCH
  45+ 78F1 08 00                        dw      PBuf_Endif - $
  46+ 78F3 01 69                        dw          DROP                //      drop
  47+ 78F5 01 6B 86 69                  dw          FIRST, FETCH        //      first @
  48+ 78F9              PBuf_Endif:                                     // endif
  49+ 78F9 1C 69 73 6B                  dw      DUP, PREV, FETCH        // dup prev @
  49+ 78FD 86 69
  50+ 78FF DC 6B                        dw      SUBTRACT                // -
  51+ 7901 51 68                        dw      EXIT                    // ;
  52+ 7903
  53+ 7903              //  ______________________________________________________________________
  54+ 7903              //
  55+ 7903              // update       --
  56+ 7903              // mark the last used block to be written to disk
  57+ 7903                              Colon_Def UPDATE, "UPDATE", is_normal
  57+ 7903             >                New_Def  UPDATE, "UPDATE", Enter_Ptr, is_normal ; ok
  57+ 7903             >
  57+ 7903             >Dict_Ptr        defl    $
  57+ 7903             >
  57+ 7903             >//              ______________________________________________________________________
  57+ 7903             >//              Heap part
  57+ 7903             >
  57+ 7903             >
  57+ 7903             >                org     (Heap_Ptr & $1FFF) + $E000
  57+ EABA             >
  57+ EABA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  57+ EABA             >Latest_Definition defl  Heap_Ptr
  57+ EABA             >
  57+ EABA             >                // dummy db directives used to calculate length of namec
  57+ EABA 55 50 44 41 >                db      "UPDATE"
  57+ EABE 54 45       >
  57+ EAC0             >len_NFA         defl    $ - temp_NFA
  57+ EAC0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  57+ EABA             >
  57+ EABA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  57+ EABB 55 50 44 41 >                db      "UPDATE"               // name string in 7-bit ascii, but
  57+ EABF 54 45       >
  57+ EAC1             >                org     $-1                 // alter last byte of Name just above to set
  57+ EAC0 C5          >                db      {b $} | END_BIT     // msb as name end
  57+ EAC1             >
  57+ EAC1 B1 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  57+ EAC3             >Prev_Ptr        defl    Heap_Ptr
  57+ EAC3             >
  57+ EAC3             >mirror_Ptr      defl    $
  57+ EAC3             >
  57+ EAC3 05 79       >                dw      Dict_Ptr + 2        // xt
  57+ EAC5             >Heap_Ptr        defl    $ - $E000           // save current HP
  57+ EAC5             >
  57+ EAC5             >Current_HP      defl  $ - $E000             // used to set HP once!
  57+ EAC5             >
  57+ EAC5             >//              ______________________________________________________________________
  57+ EAC5             >//              Dictionary part
  57+ EAC5             >
  57+ EAC5             >                org     Dict_Ptr
  57+ 7903             >
  57+ 7903 C3 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  57+ 7905             >
  57+ 7905             >UPDATE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  57+ 7905 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  57+ 7908             >
  57+ 7908             >
  57+ 7908             >                endif           ; ok        // for other definitions it "points" the correct handler
  57+ 7908             >                // Use of "; ok" to suppress "warning[fwdref]"
  57+ 7908             >
  57+ 7908             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  58+ 7908 73 6B 86 69                  dw      PREV, FETCH, FETCH      // prev @ @
  58+ 790C 86 69
  59+ 790E A3 63 00 80                  dw      LIT, $8000, OR_OP       // $8000, or
  59+ 7912 1A 68
  60+ 7914 73 6B 86 69                  dw      PREV, FETCH, STORE      // prev @ !
  60+ 7918 90 69
  61+ 791A 51 68                        dw      EXIT                    // ;
  62+ 791C
  63+ 791C
  64+ 791C              //  ______________________________________________________________________
  65+ 791C              //
  66+ 791C              // empty-buffers --
  67+ 791C                              Colon_Def EMPTY_BUFFERS, "EMPTY-BUFFERS", is_normal
  67+ 791C             >                New_Def  EMPTY_BUFFERS, "EMPTY-BUFFERS", Enter_Ptr, is_normal ; ok
  67+ 791C             >
  67+ 791C             >Dict_Ptr        defl    $
  67+ 791C             >
  67+ 791C             >//              ______________________________________________________________________
  67+ 791C             >//              Heap part
  67+ 791C             >
  67+ 791C             >
  67+ 791C             >                org     (Heap_Ptr & $1FFF) + $E000
  67+ EAC5             >
  67+ EAC5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  67+ EAC5             >Latest_Definition defl  Heap_Ptr
  67+ EAC5             >
  67+ EAC5             >                // dummy db directives used to calculate length of namec
  67+ EAC5 45 4D 50 54 >                db      "EMPTY-BUFFERS"
  67+ EAC9 59 2D 42 55 >
  67+ EACD 46 46 45 52 >
  67+ EAD1 53          >
  67+ EAD2             >len_NFA         defl    $ - temp_NFA
  67+ EAD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  67+ EAC5             >
  67+ EAC5 8D          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  67+ EAC6 45 4D 50 54 >                db      "EMPTY-BUFFERS"               // name string in 7-bit ascii, but
  67+ EACA 59 2D 42 55 >
  67+ EACE 46 46 45 52 >
  67+ EAD2 53          >
  67+ EAD3             >                org     $-1                 // alter last byte of Name just above to set
  67+ EAD2 D3          >                db      {b $} | END_BIT     // msb as name end
  67+ EAD3             >
  67+ EAD3 BA 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  67+ EAD5             >Prev_Ptr        defl    Heap_Ptr
  67+ EAD5             >
  67+ EAD5             >mirror_Ptr      defl    $
  67+ EAD5             >
  67+ EAD5 1E 79       >                dw      Dict_Ptr + 2        // xt
  67+ EAD7             >Heap_Ptr        defl    $ - $E000           // save current HP
  67+ EAD7             >
  67+ EAD7             >Current_HP      defl  $ - $E000             // used to set HP once!
  67+ EAD7             >
  67+ EAD7             >//              ______________________________________________________________________
  67+ EAD7             >//              Dictionary part
  67+ EAD7             >
  67+ EAD7             >                org     Dict_Ptr
  67+ 791C             >
  67+ 791C D5 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  67+ 791E             >
  67+ 791E             >EMPTY_BUFFERS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  67+ 791E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  67+ 7921             >
  67+ 7921             >
  67+ 7921             >                endif           ; ok        // for other definitions it "points" the correct handler
  67+ 7921             >                // Use of "; ok" to suppress "warning[fwdref]"
  67+ 7921             >
  67+ 7921             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  68+ 7921 01 6B 86 69                  dw      FIRST, FETCH            // first @
  69+ 7925 07 6B 86 69                  dw      LIMIT, FETCH            // limit @
  70+ 7929 F8 68 DC 6B                  dw      OVER, SUBTRACT, ERASE   // over - erase
  70+ 792D 84 70
  71+ 792F 51 68                        dw      EXIT                    // ;
  72+ 7931
  73+ 7931              //  ______________________________________________________________________
  74+ 7931              //
  75+ 7931              // buffer       n -- a
  76+ 7931              // read block n and gives the address to a buffer
  77+ 7931              // any block previously inside the buffer, if modified, is rewritten to
  78+ 7931              // disk before reading the block n.
  79+ 7931
  80+ 7931                              Colon_Def BUFFER, "BUFFER", is_normal
  80+ 7931             >                New_Def  BUFFER, "BUFFER", Enter_Ptr, is_normal ; ok
  80+ 7931             >
  80+ 7931             >Dict_Ptr        defl    $
  80+ 7931             >
  80+ 7931             >//              ______________________________________________________________________
  80+ 7931             >//              Heap part
  80+ 7931             >
  80+ 7931             >
  80+ 7931             >                org     (Heap_Ptr & $1FFF) + $E000
  80+ EAD7             >
  80+ EAD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
  80+ EAD7             >Latest_Definition defl  Heap_Ptr
  80+ EAD7             >
  80+ EAD7             >                // dummy db directives used to calculate length of namec
  80+ EAD7 42 55 46 46 >                db      "BUFFER"
  80+ EADB 45 52       >
  80+ EADD             >len_NFA         defl    $ - temp_NFA
  80+ EADD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
  80+ EAD7             >
  80+ EAD7 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
  80+ EAD8 42 55 46 46 >                db      "BUFFER"               // name string in 7-bit ascii, but
  80+ EADC 45 52       >
  80+ EADE             >                org     $-1                 // alter last byte of Name just above to set
  80+ EADD D2          >                db      {b $} | END_BIT     // msb as name end
  80+ EADE             >
  80+ EADE C5 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
  80+ EAE0             >Prev_Ptr        defl    Heap_Ptr
  80+ EAE0             >
  80+ EAE0             >mirror_Ptr      defl    $
  80+ EAE0             >
  80+ EAE0 33 79       >                dw      Dict_Ptr + 2        // xt
  80+ EAE2             >Heap_Ptr        defl    $ - $E000           // save current HP
  80+ EAE2             >
  80+ EAE2             >Current_HP      defl  $ - $E000             // used to set HP once!
  80+ EAE2             >
  80+ EAE2             >//              ______________________________________________________________________
  80+ EAE2             >//              Dictionary part
  80+ EAE2             >
  80+ EAE2             >                org     Dict_Ptr
  80+ 7931             >
  80+ 7931 E0 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
  80+ 7933             >
  80+ 7933             >BUFFER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
  80+ 7933 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
  80+ 7936             >
  80+ 7936             >
  80+ 7936             >                endif           ; ok        // for other definitions it "points" the correct handler
  80+ 7936             >                // Use of "; ok" to suppress "warning[fwdref]"
  80+ 7936             >
  80+ 7936             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
  81+ 7936 6D 6B 86 69                  dw      USED, FETCH             // used @
  82+ 793A 1C 69 5B 68                  dw      DUP, TO_R               // dup >r
  83+ 793E                                                              // begin
  84+ 793E              Buffer_Begin:
  85+ 793E DE 78                        dw          PBUF                //      +buf
  86+ 7940                                                              // until
  87+ 7940 F3 63                        dw      ZBRANCH
  88+ 7942 FC FF                        dw      Buffer_Begin - $
  89+ 7944 6D 6B 90 69                  dw      USED, STORE             // used !
  90+ 7948 71 68 86 69                  dw      R_OP, FETCH, ZLESS      // r @ 0<
  90+ 794C 87 68
  91+ 794E                                                              // if
  92+ 794E F3 63                        dw      ZBRANCH
  93+ 7950 14 00                        dw      Buffer_Endif - $
  94+ 7952 71 68 CD 68                  dw          R_OP, CELL_PLUS     //      r cell+
  95+ 7956 71 68 86 69                  dw          R_OP, FETCH         //      r fetch
  96+ 795A A3 63 FF 7F                  dw          LIT, $7FFF          //      7FFF
  97+ 795E 0B 68                        dw          AND_OP              //      and
  98+ 7960 78 6A B1 78                  dw          ZERO, READ_WRITE    //      0 r/w
  99+ 7964              Buffer_Endif:                                   // endif
 100+ 7964 71 68 90 69                  dw      R_OP, STORE             // r !
 101+ 7968 71 68 73 6B                  dw      R_OP, PREV, STORE       // r prev !
 101+ 796C 90 69
 102+ 796E 66 68 CD 68                  dw      R_TO, CELL_PLUS         // r> cell+
 103+ 7972 51 68                        dw      EXIT                    // ;
 104+ 7974
 105+ 7974              //  ______________________________________________________________________
 106+ 7974              //
 107+ 7974              // block        n -- a
 108+ 7974              // Leaves the buffer address that contains the block n.
 109+ 7974              // If the block is not already present, it will be loaded from disk
 110+ 7974              // The block previously inside the buffer, if modified, is rewritten to
 111+ 7974              // disk before reading the block n.
 112+ 7974              // See also BUFFER, R/W, UPDATE, FLUSH.
 113+ 7974
 114+ 7974                              Colon_Def BLOCK, "BLOCK", is_normal
 114+ 7974             >                New_Def  BLOCK, "BLOCK", Enter_Ptr, is_normal ; ok
 114+ 7974             >
 114+ 7974             >Dict_Ptr        defl    $
 114+ 7974             >
 114+ 7974             >//              ______________________________________________________________________
 114+ 7974             >//              Heap part
 114+ 7974             >
 114+ 7974             >
 114+ 7974             >                org     (Heap_Ptr & $1FFF) + $E000
 114+ EAE2             >
 114+ EAE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 114+ EAE2             >Latest_Definition defl  Heap_Ptr
 114+ EAE2             >
 114+ EAE2             >                // dummy db directives used to calculate length of namec
 114+ EAE2 42 4C 4F 43 >                db      "BLOCK"
 114+ EAE6 4B          >
 114+ EAE7             >len_NFA         defl    $ - temp_NFA
 114+ EAE7             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 114+ EAE2             >
 114+ EAE2 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 114+ EAE3 42 4C 4F 43 >                db      "BLOCK"               // name string in 7-bit ascii, but
 114+ EAE7 4B          >
 114+ EAE8             >                org     $-1                 // alter last byte of Name just above to set
 114+ EAE7 CB          >                db      {b $} | END_BIT     // msb as name end
 114+ EAE8             >
 114+ EAE8 D7 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 114+ EAEA             >Prev_Ptr        defl    Heap_Ptr
 114+ EAEA             >
 114+ EAEA             >mirror_Ptr      defl    $
 114+ EAEA             >
 114+ EAEA 76 79       >                dw      Dict_Ptr + 2        // xt
 114+ EAEC             >Heap_Ptr        defl    $ - $E000           // save current HP
 114+ EAEC             >
 114+ EAEC             >Current_HP      defl  $ - $E000             // used to set HP once!
 114+ EAEC             >
 114+ EAEC             >//              ______________________________________________________________________
 114+ EAEC             >//              Dictionary part
 114+ EAEC             >
 114+ EAEC             >                org     Dict_Ptr
 114+ 7974             >
 114+ 7974 EA 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 114+ 7976             >
 114+ 7976             >BLOCK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 114+ 7976 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 114+ 7979             >
 114+ 7979             >
 114+ 7979             >                endif           ; ok        // for other definitions it "points" the correct handler
 114+ 7979             >                // Use of "; ok" to suppress "warning[fwdref]"
 114+ 7979             >
 114+ 7979             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 115+ 7979                          //  dw      OFFSET, FETCH           // offset @
 116+ 7979                          //  dw      PLUS
 117+ 7979 5B 68                        dw      TO_R                    // + >r
 118+ 797B 73 6B 86 69                  dw      PREV, FETCH             // prev @
 119+ 797F 1C 69 86 69                  dw      DUP, FETCH              // dup @
 120+ 7983 71 68 DC 6B                  dw      R_OP, SUBTRACT          // r -
 121+ 7987 1C 69 9E 68                  dw      DUP, PLUS               // dup +  ( trick: check equality without most significant bit )
 122+ 798B                                                              // if
 123+ 798B F3 63                        dw        ZBRANCH
 124+ 798D 32 00                        dw        Block_Endif_1 - $
 125+ 798F              Block_Begin:                                    //      begin
 126+ 798F DE 78 76 68                  dw          PBUF, ZEQUAL        //          +buf 0
 127+ 7993                                                              //          if
 128+ 7993 F3 63                        dw          ZBRANCH
 129+ 7995 12 00                        dw          Block_Endif_2 - $
 130+ 7997 01 69                        dw              DROP            //              drop
 131+ 7999 71 68 33 79                  dw              R_OP, BUFFER    //              r buffer
 132+ 799D 1C 69                        dw              DUP             //              dup
 133+ 799F 71 68 7F 6A                  dw              R_OP, ONE       //              r 1
 134+ 79A3 B1 78                        dw              READ_WRITE      //              r/w
 135+ 79A5 D9 68                        dw              TWO_MINUS       //              2-
 136+ 79A7              Block_Endif_2:                                  //          endif
 137+ 79A7 1C 69 86 69                  dw          DUP, FETCH, R_OP    //          dup @ r
 137+ 79AB 71 68
 138+ 79AD DC 6B 1C 69                  dw          SUBTRACT, DUP       //          - dup
 139+ 79B1 9E 68 76 68                  dw          PLUS, ZEQUAL        //          + 0=
 140+ 79B5                                                              //      until
 141+ 79B5 F3 63                        dw        ZBRANCH
 142+ 79B7 D8 FF                        dw        Block_Begin - $
 143+ 79B9 1C 69 73 6B                  dw        DUP, PREV, STORE      //      dup prev !
 143+ 79BD 90 69
 144+ 79BF              Block_Endif_1:                                  // endif
 145+ 79BF 66 68 01 69                  dw      R_TO, DROP, CELL_PLUS   // r> drop cell+
 145+ 79C3 CD 68
 146+ 79C5 51 68                        dw      EXIT                    // ;
 147+ 79C7
 148+ 79C7              //  ______________________________________________________________________
 149+ 79C7              //
 150+ 79C7              // #buff        -- n
 151+ 79C7              // number of buffers available. must be the difference between LIMIT and FIRST divided by 516
 152+ 79C7                              Constant_Def NBUFF,   "#BUFF", 7
 152+ 79C7             >                New_Def  NBUFF, "#BUFF", Constant_Ptr, is_normal
 152+ 79C7             >
 152+ 79C7             >Dict_Ptr        defl    $
 152+ 79C7             >
 152+ 79C7             >//              ______________________________________________________________________
 152+ 79C7             >//              Heap part
 152+ 79C7             >
 152+ 79C7             >
 152+ 79C7             >                org     (Heap_Ptr & $1FFF) + $E000
 152+ EAEC             >
 152+ EAEC             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 152+ EAEC             >Latest_Definition defl  Heap_Ptr
 152+ EAEC             >
 152+ EAEC             >                // dummy db directives used to calculate length of namec
 152+ EAEC 23 42 55 46 >                db      "#BUFF"
 152+ EAF0 46          >
 152+ EAF1             >len_NFA         defl    $ - temp_NFA
 152+ EAF1             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 152+ EAEC             >
 152+ EAEC 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 152+ EAED 23 42 55 46 >                db      "#BUFF"               // name string in 7-bit ascii, but
 152+ EAF1 46          >
 152+ EAF2             >                org     $-1                 // alter last byte of Name just above to set
 152+ EAF1 C6          >                db      {b $} | END_BIT     // msb as name end
 152+ EAF2             >
 152+ EAF2 E2 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 152+ EAF4             >Prev_Ptr        defl    Heap_Ptr
 152+ EAF4             >
 152+ EAF4             >mirror_Ptr      defl    $
 152+ EAF4             >
 152+ EAF4 C9 79       >                dw      Dict_Ptr + 2        // xt
 152+ EAF6             >Heap_Ptr        defl    $ - $E000           // save current HP
 152+ EAF6             >
 152+ EAF6             >Current_HP      defl  $ - $E000             // used to set HP once!
 152+ EAF6             >
 152+ EAF6             >//              ______________________________________________________________________
 152+ EAF6             >//              Dictionary part
 152+ EAF6             >
 152+ EAF6             >                org     Dict_Ptr
 152+ 79C7             >
 152+ 79C7 F4 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 152+ 79C9             >
 152+ 79C9             >NBUFF:          if Constant_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 152+ 79C9 CD 4C 6A    >                call    Constant_Ptr ; ok        // for primitive definitions  actual code
 152+ 79CC             >
 152+ 79CC             >
 152+ 79CC             >                endif           ; ok        // for other definitions it "points" the correct handler
 152+ 79CC             >                // Use of "; ok" to suppress "warning[fwdref]"
 152+ 79CC             >
 152+ 79CC             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 152+ 79CC 07 00       >                dw      7
 153+ 79CE
 154+ 79CE              //  ______________________________________________________________________
 155+ 79CE              //
 156+ 79CE              // flush        --
 157+ 79CE                              Colon_Def FLUSH, "FLUSH", is_normal
 157+ 79CE             >                New_Def  FLUSH, "FLUSH", Enter_Ptr, is_normal ; ok
 157+ 79CE             >
 157+ 79CE             >Dict_Ptr        defl    $
 157+ 79CE             >
 157+ 79CE             >//              ______________________________________________________________________
 157+ 79CE             >//              Heap part
 157+ 79CE             >
 157+ 79CE             >
 157+ 79CE             >                org     (Heap_Ptr & $1FFF) + $E000
 157+ EAF6             >
 157+ EAF6             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 157+ EAF6             >Latest_Definition defl  Heap_Ptr
 157+ EAF6             >
 157+ EAF6             >                // dummy db directives used to calculate length of namec
 157+ EAF6 46 4C 55 53 >                db      "FLUSH"
 157+ EAFA 48          >
 157+ EAFB             >len_NFA         defl    $ - temp_NFA
 157+ EAFB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 157+ EAF6             >
 157+ EAF6 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 157+ EAF7 46 4C 55 53 >                db      "FLUSH"               // name string in 7-bit ascii, but
 157+ EAFB 48          >
 157+ EAFC             >                org     $-1                 // alter last byte of Name just above to set
 157+ EAFB C8          >                db      {b $} | END_BIT     // msb as name end
 157+ EAFC             >
 157+ EAFC EC 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 157+ EAFE             >Prev_Ptr        defl    Heap_Ptr
 157+ EAFE             >
 157+ EAFE             >mirror_Ptr      defl    $
 157+ EAFE             >
 157+ EAFE D0 79       >                dw      Dict_Ptr + 2        // xt
 157+ EB00             >Heap_Ptr        defl    $ - $E000           // save current HP
 157+ EB00             >
 157+ EB00             >Current_HP      defl  $ - $E000             // used to set HP once!
 157+ EB00             >
 157+ EB00             >//              ______________________________________________________________________
 157+ EB00             >//              Dictionary part
 157+ EB00             >
 157+ EB00             >                org     Dict_Ptr
 157+ 79CE             >
 157+ 79CE FE 0A       >                dw      mirror_Ptr - $E000 + Heap_offset
 157+ 79D0             >
 157+ 79D0             >FLUSH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 157+ 79D0 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 157+ 79D3             >
 157+ 79D3             >
 157+ 79D3             >                endif           ; ok        // for other definitions it "points" the correct handler
 157+ 79D3             >                // Use of "; ok" to suppress "warning[fwdref]"
 157+ 79D3             >
 157+ 79D3             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 158+ 79D3 C9 79 B7 68                  dw      NBUFF, ONE_PLUS, ZERO   // #buff 1+ 0
 158+ 79D7 78 6A
 159+ 79D9              Flush_Do:                                       // do
 160+ 79D9 2E 64                        dw      C_DO
 161+ 79DB 78 6A 33 79                  dw      ZERO, BUFFER, DROP      //      0 buffer drop
 161+ 79DF 01 69
 162+ 79E1                                                              // loop
 163+ 79E1 E7 63 F8 FF                  dw      C_LOOP, Flush_Do - $
 164+ 79E5 0A 78 86 69                  dw      BLK_FH, FETCH           // blk-fh @     ( ZX-Next dependance )
 165+ 79E9 01 67 01 69                  dw      F_SYNC, DROP            // f_sync drop
 166+ 79ED 51 68                        dw      EXIT                    // exit
 167+ 79EF
 168+ 79EF              //  ______________________________________________________________________
 169+ 79EF              //
 170+ 79EF              // f_getline    a m fh -- n
 171+ 79EF              // Given an open filehandle read next line (terminated with $0D or $0A)
 172+ 79EF              // Address a is left for subsequent processing
 173+ 79EF              // and n as the actual number of byte read, that is the length of line
 174+ 79EF                              Colon_Def F_GETLINE, "F_GETLINE", is_normal
 174+ 79EF             >                New_Def  F_GETLINE, "F_GETLINE", Enter_Ptr, is_normal ; ok
 174+ 79EF             >
 174+ 79EF             >Dict_Ptr        defl    $
 174+ 79EF             >
 174+ 79EF             >//              ______________________________________________________________________
 174+ 79EF             >//              Heap part
 174+ 79EF             >
 174+ 79EF             >
 174+ 79EF             >                org     (Heap_Ptr & $1FFF) + $E000
 174+ EB00             >
 174+ EB00             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 174+ EB00             >Latest_Definition defl  Heap_Ptr
 174+ EB00             >
 174+ EB00             >                // dummy db directives used to calculate length of namec
 174+ EB00 46 5F 47 45 >                db      "F_GETLINE"
 174+ EB04 54 4C 49 4E >
 174+ EB08 45          >
 174+ EB09             >len_NFA         defl    $ - temp_NFA
 174+ EB09             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 174+ EB00             >
 174+ EB00 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 174+ EB01 46 5F 47 45 >                db      "F_GETLINE"               // name string in 7-bit ascii, but
 174+ EB05 54 4C 49 4E >
 174+ EB09 45          >
 174+ EB0A             >                org     $-1                 // alter last byte of Name just above to set
 174+ EB09 C5          >                db      {b $} | END_BIT     // msb as name end
 174+ EB0A             >
 174+ EB0A F6 0A       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 174+ EB0C             >Prev_Ptr        defl    Heap_Ptr
 174+ EB0C             >
 174+ EB0C             >mirror_Ptr      defl    $
 174+ EB0C             >
 174+ EB0C F1 79       >                dw      Dict_Ptr + 2        // xt
 174+ EB0E             >Heap_Ptr        defl    $ - $E000           // save current HP
 174+ EB0E             >
 174+ EB0E             >Current_HP      defl  $ - $E000             // used to set HP once!
 174+ EB0E             >
 174+ EB0E             >//              ______________________________________________________________________
 174+ EB0E             >//              Dictionary part
 174+ EB0E             >
 174+ EB0E             >                org     Dict_Ptr
 174+ 79EF             >
 174+ 79EF 0C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 174+ 79F1             >
 174+ 79F1             >F_GETLINE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 174+ 79F1 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 174+ 79F4             >
 174+ 79F4             >
 174+ 79F4             >                endif           ; ok        // for other definitions it "points" the correct handler
 174+ 79F4             >                // Use of "; ok" to suppress "warning[fwdref]"
 174+ 79F4             >
 174+ 79F4             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 175+ 79F4 5B 68                        dw      TO_R                    // >r               ( a  m  )     \  fh
 176+ 79F6 0C 69                        dw      TUCK                    // tuck             ( m a m )
 177+ 79F8 71 68 0E 67                  dw      R_OP, F_FGETPOS         // r f_fgetpos      ( m a m d f )
 178+ 79FC A3 63 23 00                  dw      LIT, 35, QERROR         // 44 ?error        ( m a m d )
 178+ 7A00 D1 6D
 179+ 7A02
 180+ 7A02 57 69 F8 68                  dw      TWO_SWAP, OVER          // 2swap over       ( m d a m )
 181+ 7A06 B7 68 15 69                  dw      ONE_PLUS, SWAP          // 1+ swap          ( m d a a+1 m )
 182+ 7A0A
 183+ 7A0A 71 68 28 67                  dw      R_OP, F_READ            // r f_read         ( m d a n f )
 184+ 7A0E A3 63 23 00                  dw      LIT, 35, QERROR         // 46 ?error        ( m d a n )
 184+ 7A12 D1 6D
 185+ 7A14                                                              // if ( at least 1 chr was read )  \  fh
 186+ 7A14 F3 63                        dw      ZBRANCH
 187+ 7A16 3C 00                        dw      FGetline_Else - $
 188+ 7A18 A3 63 0A 00                  dw          LIT, 10, ENCLOSE    //      10 enclose       ( m d a x b x )
 188+ 7A1C 22 65
 189+ 7A1E 01 69 06 69                  dw          DROP, NIP           //      drop nip         ( m d a b )
 190+ 7A22 15 69                        dw          SWAP                //      drop swap        ( m d b a )
 191+ 7A24 A3 63 0D 00                  dw          LIT, 13, ENCLOSE    //      13 enclose       ( m d b a x c x )
 191+ 7A28 22 65
 192+ 7A2A 01 69 06 69                  dw          DROP, NIP           //      drop nip         ( m d b a c )
 193+ 7A2E 23 69 19 6C                  dw          ROT, MIN            //      rot min          ( m d a n )
 194+ 7A32 1C 69 8B 6B                  dw          DUP, SPAN, STORE    //      dup span !       ( m d a n )
 194+ 7A36 90 69
 195+ 7A38 1C 69 5B 68                  dw          DUP, TO_R           //      dup >r           ( m d a n )      \ fh n
 196+ 7A3C 57 69 66 68                  dw          TWO_SWAP, R_TO      //      2swap r>         ( m a n d n )    \ fh
 197+ 7A40 78 6A A8 68                  dw          ZERO, DPLUS         //      0 d+             ( m a n d+n )
 198+ 7A44 66 68 D6 66                  dw          R_TO, F_SEEK        //      r> f_seek        ( m a n f )
 199+ 7A48 A3 63 24 00                  dw          LIT, 36, QERROR     //      45 ?error        ( m a n )
 199+ 7A4C D1 6D
 200+ 7A4E                                                              // else
 201+ 7A4E EF 63                        dw      BRANCH
 202+ 7A50 0C 00                        dw      FGetline_Endif - $
 203+ 7A52              FGetline_Else:
 204+ 7A52 66 68                        dw          R_TO                //      r>              ( m d a fh )
 205+ 7A54 57 69 51 69                  dw          TWO_SWAP, TWO_DROP  //      2swap 2drop     ( m a fh )
 206+ 7A58 01 69 78 6A                  dw          DROP, ZERO          //      drop, 0         ( m a 0 )
 207+ 7A5C              FGetline_Endif:                                 // endif
 208+ 7A5C 5B 68 1C 69                  dw      TO_R, DUP, DUP          // >r dup dup           ( m a a a )
 208+ 7A60 1C 69
 209+ 7A62 B7 68 15 69                  dw      ONE_PLUS, SWAP          // 1+ swap              ( m a a+1 a )
 210+ 7A66 71 68 8C 67                  dw      R_OP, CMOVE             // r cmove              ( m a )
 211+ 7A6A 64 69 9E 68                  dw      TWO_DUP, PLUS           // 2dup +               ( m a m+a )
 212+ 7A6E 78 6A 15 69                  dw      ZERO, SWAP              // 0 swap
 213+ 7A72 D1 68 90 69                  dw      CELL_MINUS,  STORE      // cell-  !             ( m a )
 214+ 7A76 71 68 9E 68                  dw      R_OP, PLUS, ONE_SUBTRACT// r + 1-               ( m a+n1 )
 214+ 7A7A BE 68
 215+ 7A7C 15 69 71 68                  dw      SWAP, R_OP, SUBTRACT    // swap r -             ( a+n+1 m-n )
 215+ 7A80 DC 6B
 216+ 7A82 8F 70                        dw      BLANK                   // blank
 217+ 7A84 66 68                        dw      R_TO                    // r>                   ( n )
 218+ 7A86 51 68                        dw      EXIT                    // ;
 219+ 7A88
 220+ 7A88              //  ______________________________________________________________________
 221+ 7A88              //
 222+ 7A88              // f_include    fh --
 223+ 7A88              // Given a filehandle includes the source from file
 224+ 7A88                              Colon_Def F_INCLUDE, "F_INCLUDE", is_normal
 224+ 7A88             >                New_Def  F_INCLUDE, "F_INCLUDE", Enter_Ptr, is_normal ; ok
 224+ 7A88             >
 224+ 7A88             >Dict_Ptr        defl    $
 224+ 7A88             >
 224+ 7A88             >//              ______________________________________________________________________
 224+ 7A88             >//              Heap part
 224+ 7A88             >
 224+ 7A88             >
 224+ 7A88             >                org     (Heap_Ptr & $1FFF) + $E000
 224+ EB0E             >
 224+ EB0E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 224+ EB0E             >Latest_Definition defl  Heap_Ptr
 224+ EB0E             >
 224+ EB0E             >                // dummy db directives used to calculate length of namec
 224+ EB0E 46 5F 49 4E >                db      "F_INCLUDE"
 224+ EB12 43 4C 55 44 >
 224+ EB16 45          >
 224+ EB17             >len_NFA         defl    $ - temp_NFA
 224+ EB17             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 224+ EB0E             >
 224+ EB0E 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 224+ EB0F 46 5F 49 4E >                db      "F_INCLUDE"               // name string in 7-bit ascii, but
 224+ EB13 43 4C 55 44 >
 224+ EB17 45          >
 224+ EB18             >                org     $-1                 // alter last byte of Name just above to set
 224+ EB17 C5          >                db      {b $} | END_BIT     // msb as name end
 224+ EB18             >
 224+ EB18 00 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 224+ EB1A             >Prev_Ptr        defl    Heap_Ptr
 224+ EB1A             >
 224+ EB1A             >mirror_Ptr      defl    $
 224+ EB1A             >
 224+ EB1A 8A 7A       >                dw      Dict_Ptr + 2        // xt
 224+ EB1C             >Heap_Ptr        defl    $ - $E000           // save current HP
 224+ EB1C             >
 224+ EB1C             >Current_HP      defl  $ - $E000             // used to set HP once!
 224+ EB1C             >
 224+ EB1C             >//              ______________________________________________________________________
 224+ EB1C             >//              Dictionary part
 224+ EB1C             >
 224+ EB1C             >                org     Dict_Ptr
 224+ 7A88             >
 224+ 7A88 1A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 224+ 7A8A             >
 224+ 7A8A             >F_INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 224+ 7A8A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 224+ 7A8D             >
 224+ 7A8D             >
 224+ 7A8D             >                endif           ; ok        // for other definitions it "points" the correct handler
 224+ 7A8D             >                // Use of "; ok" to suppress "warning[fwdref]"
 224+ 7A8D             >
 224+ 7A8D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 225+ 7A8D 19 6B 86 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 225+ 7A91 5B 68
 226+ 7A93 1F 6B 86 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 226+ 7A97 5B 68
 227+ 7A99 85 6B 86 69                  dw      SOURCE_ID, FETCH, TO_R  // source-id @ >r
 227+ 7A9D 5B 68
 228+ 7A9F 71 68                        dw      R_OP                    // r
 229+ 7AA1 90 68                        dw      ZGREATER                // 0>  (filehandle)
 230+ 7AA3                                                              // if
 231+ 7AA3 F3 63                        dw      ZBRANCH
 232+ 7AA5 20 00                        dw      FInclude_Else_1 - $
 233+ 7AA7 71 68 0E 67                  dw          R_OP, F_FGETPOS     //      r f_getpos
 234+ 7AAB A3 63 2C 00                  dw          LIT, 44, QERROR     //      44 ?error
 234+ 7AAF D1 6D
 235+ 7AB1 1F 6B 86 69                  dw          TO_IN, FETCH        //      >in @ 2-
 236+ 7AB5 D9 68                        dw          TWO_MINUS
 237+ 7AB7 8B 6B 86 69                  dw          SPAN, FETCH         //      span @ -
 238+ 7ABB DC 6B                        dw          SUBTRACT
 239+ 7ABD D1 6B A8 68                  dw          S_TO_D, DPLUS       //      s>d d+
 240+ 7AC1                                                              // else
 241+ 7AC1 EF 63                        dw      BRANCH
 242+ 7AC3 06 00                        dw      FInclude_Endif_1 - $
 243+ 7AC5              FInclude_Else_1:
 244+ 7AC5 78 6A 78 6A                  dw          ZERO, ZERO          //      0 0
 245+ 7AC9                                                              // endif
 246+ 7AC9              FInclude_Endif_1:
 247+ 7AC9 5B 68 5B 68                  dw      TO_R, TO_R              // >r >r
 248+ 7ACD 85 6B 90 69                  dw      SOURCE_ID, STORE        // source-id !
 249+ 7AD1              FInclude_Begin:                                 // begin
 250+ 7AD1 7F 6A 76 79                  dw          ONE, BLOCK, BBUF    //      1 block b/buf
 250+ 7AD5 A9 6A
 251+ 7AD7 64 69 8F 70                  dw          TWO_DUP, BLANK      //      2dup blank
 252+ 7ADB 15 69 B7 68                  dw          SWAP, ONE_PLUS      //      swap 1+
 253+ 7ADF 15 69 D1 68                  dw          SWAP, CELL_MINUS    //      swap cell-
 254+ 7AE3 85 6B 86 69                  dw          SOURCE_ID, FETCH    //      source-id @
 255+ 7AE7 F1 79                        dw          F_GETLINE           //      f_getline
 256+ 7AE9                                                              // while
 257+ 7AE9 F3 63                        dw      ZBRANCH
 258+ 7AEB 14 00                        dw      FInclude_Repeat - $
 259+ 7AED 7F 6A 19 6B                  dw          ONE, BLK, STORE     //      1 blk !
 259+ 7AF1 90 69
 260+ 7AF3 78 6A 1F 6B                  dw          ZERO, TO_IN, STORE  //      0 >in !
 260+ 7AF7 90 69
 261+ 7AF9 C1 74                        dw          INTERPRET           //      interpret
 262+ 7AFB EF 63                        dw      BRANCH
 263+ 7AFD D4 FF                        dw      FInclude_Begin - $
 264+ 7AFF              FInclude_Repeat:                                // repeat
 265+ 7AFF                              //  close current file
 266+ 7AFF 85 6B 86 69                  dw      SOURCE_ID, FETCH        // source-id @
 267+ 7B03 F4 66                        dw      F_CLOSE                 // f_close
 268+ 7B05 A3 63 2A 00                  dw      LIT, 42, QERROR         // 42 ?error
 268+ 7B09 D1 6D
 269+ 7B0B
 270+ 7B0B 66 68 66 68                  dw      R_TO, R_TO, R_TO        // r> r> r>
 270+ 7B0F 66 68
 271+ 7B11 1C 69 85 6B                  dw      DUP, SOURCE_ID, STORE   // dup source-id !
 271+ 7B15 90 69
 272+ 7B17 90 68                        dw      ZGREATER                // 0>
 273+ 7B19                                                              // if
 274+ 7B19 F3 63                        dw      ZBRANCH
 275+ 7B1B 12 00                        dw      FInclude_Else_2 - $
 276+ 7B1D 85 6B 86 69                  dw          SOURCE_ID, FETCH    //      source-id @
 277+ 7B21 D6 66                        dw          F_SEEK              //      f_seek
 278+ 7B23 A3 63 2B 00                  dw          LIT, 43, QERROR     //      43, ?error
 278+ 7B27 D1 6D
 279+ 7B29                                                              // else
 280+ 7B29 EF 63                        dw      BRANCH
 281+ 7B2B 04 00                        dw      FInclude_Endif_2 - $
 282+ 7B2D              FInclude_Else_2:
 283+ 7B2D 51 69                        dw          TWO_DROP            //      2drop
 284+ 7B2F              FInclude_Endif_2:                               // endif
 285+ 7B2F 66 68 1F 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 285+ 7B33 90 69
 286+ 7B35 66 68 19 6B                  dw      R_TO, BLK, STORE        // r> blk !
 286+ 7B39 90 69
 287+ 7B3B 51 68                        dw      EXIT                    // ;
 288+ 7B3D
 289+ 7B3D              //  ______________________________________________________________________
 290+ 7B3D              //
 291+ 7B3D              // open<         -- fh
 292+ 7B3D              // Open the following filename and return it file-handle
 293+ 7B3D              // Used in the form OPEN CCCC
 294+ 7B3D                              Colon_Def OPEN_FH, "OPEN<", is_normal
 294+ 7B3D             >                New_Def  OPEN_FH, "OPEN<", Enter_Ptr, is_normal ; ok
 294+ 7B3D             >
 294+ 7B3D             >Dict_Ptr        defl    $
 294+ 7B3D             >
 294+ 7B3D             >//              ______________________________________________________________________
 294+ 7B3D             >//              Heap part
 294+ 7B3D             >
 294+ 7B3D             >
 294+ 7B3D             >                org     (Heap_Ptr & $1FFF) + $E000
 294+ EB1C             >
 294+ EB1C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 294+ EB1C             >Latest_Definition defl  Heap_Ptr
 294+ EB1C             >
 294+ EB1C             >                // dummy db directives used to calculate length of namec
 294+ EB1C 4F 50 45 4E >                db      "OPEN<"
 294+ EB20 3C          >
 294+ EB21             >len_NFA         defl    $ - temp_NFA
 294+ EB21             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 294+ EB1C             >
 294+ EB1C 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 294+ EB1D 4F 50 45 4E >                db      "OPEN<"               // name string in 7-bit ascii, but
 294+ EB21 3C          >
 294+ EB22             >                org     $-1                 // alter last byte of Name just above to set
 294+ EB21 BC          >                db      {b $} | END_BIT     // msb as name end
 294+ EB22             >
 294+ EB22 0E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 294+ EB24             >Prev_Ptr        defl    Heap_Ptr
 294+ EB24             >
 294+ EB24             >mirror_Ptr      defl    $
 294+ EB24             >
 294+ EB24 3F 7B       >                dw      Dict_Ptr + 2        // xt
 294+ EB26             >Heap_Ptr        defl    $ - $E000           // save current HP
 294+ EB26             >
 294+ EB26             >Current_HP      defl  $ - $E000             // used to set HP once!
 294+ EB26             >
 294+ EB26             >//              ______________________________________________________________________
 294+ EB26             >//              Dictionary part
 294+ EB26             >
 294+ EB26             >                org     Dict_Ptr
 294+ 7B3D             >
 294+ 7B3D 24 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 294+ 7B3F             >
 294+ 7B3F             >OPEN_FH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 294+ 7B3F CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 294+ 7B42             >
 294+ 7B42             >
 294+ 7B42             >                endif           ; ok        // for other definitions it "points" the correct handler
 294+ 7B42             >                // Use of "; ok" to suppress "warning[fwdref]"
 294+ 7B42             >
 294+ 7B42             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 295+ 7B42 9B 6A                        dw      BL
 296+ 7B44 BC 70 16 6F                  dw      WORD, COUNT, OVER       // bl word count over
 296+ 7B48 F8 68
 297+ 7B4A 9E 68 78 6A                  dw      PLUS, ZERO, SWAP, STORE // + 0 swap !
 297+ 7B4E 15 69 90 69
 298+ 7B52 AD 70 7F 6A                  dw      PAD, ONE, F_OPEN        // pad 1 f_open
 298+ 7B56 56 67
 299+ 7B58 A3 63 2B 00                  dw      LIT, 43                 // 43
 300+ 7B5C D1 6D                        dw      QERROR                  // ?error
 301+ 7B5E 51 68                        dw      EXIT                    // ;
 302+ 7B60
 303+ 7B60              //  ______________________________________________________________________
 304+ 7B60              //
 305+ 7B60              // use          -- cccc
 306+ 7B60              // Include the following filename
 307+ 7B60              //              Colon_Def USE, "USE", is_normal
 308+ 7B60              //              dw      OPEN_FH                 // open<
 309+ 7B60              //              dw      BLK_FH, FETCH           // blk-fh @
 310+ 7B60              //              dw      F_CLOSE, DROP           // f_close drop
 311+ 7B60              //              dw      BLK_FH, STORE           // blk-fh !
 312+ 7B60              //              dw      EXIT                    // ;
 313+ 7B60
 314+ 7B60              //  ______________________________________________________________________
 315+ 7B60              //
 316+ 7B60              // include      -- cccc
 317+ 7B60              // Include the following filename
 318+ 7B60                              Colon_Def INCLUDE, "INCLUDE", is_normal
 318+ 7B60             >                New_Def  INCLUDE, "INCLUDE", Enter_Ptr, is_normal ; ok
 318+ 7B60             >
 318+ 7B60             >Dict_Ptr        defl    $
 318+ 7B60             >
 318+ 7B60             >//              ______________________________________________________________________
 318+ 7B60             >//              Heap part
 318+ 7B60             >
 318+ 7B60             >
 318+ 7B60             >                org     (Heap_Ptr & $1FFF) + $E000
 318+ EB26             >
 318+ EB26             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 318+ EB26             >Latest_Definition defl  Heap_Ptr
 318+ EB26             >
 318+ EB26             >                // dummy db directives used to calculate length of namec
 318+ EB26 49 4E 43 4C >                db      "INCLUDE"
 318+ EB2A 55 44 45    >
 318+ EB2D             >len_NFA         defl    $ - temp_NFA
 318+ EB2D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 318+ EB26             >
 318+ EB26 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 318+ EB27 49 4E 43 4C >                db      "INCLUDE"               // name string in 7-bit ascii, but
 318+ EB2B 55 44 45    >
 318+ EB2E             >                org     $-1                 // alter last byte of Name just above to set
 318+ EB2D C5          >                db      {b $} | END_BIT     // msb as name end
 318+ EB2E             >
 318+ EB2E 1C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 318+ EB30             >Prev_Ptr        defl    Heap_Ptr
 318+ EB30             >
 318+ EB30             >mirror_Ptr      defl    $
 318+ EB30             >
 318+ EB30 62 7B       >                dw      Dict_Ptr + 2        // xt
 318+ EB32             >Heap_Ptr        defl    $ - $E000           // save current HP
 318+ EB32             >
 318+ EB32             >Current_HP      defl  $ - $E000             // used to set HP once!
 318+ EB32             >
 318+ EB32             >//              ______________________________________________________________________
 318+ EB32             >//              Dictionary part
 318+ EB32             >
 318+ EB32             >                org     Dict_Ptr
 318+ 7B60             >
 318+ 7B60 30 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 318+ 7B62             >
 318+ 7B62             >INCLUDE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 318+ 7B62 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 318+ 7B65             >
 318+ 7B65             >
 318+ 7B65             >                endif           ; ok        // for other definitions it "points" the correct handler
 318+ 7B65             >                // Use of "; ok" to suppress "warning[fwdref]"
 318+ 7B65             >
 318+ 7B65             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 319+ 7B65 3F 7B                        dw      OPEN_FH                 // open<
 320+ 7B67 8A 7A                        dw      F_INCLUDE               //  f_include
 321+ 7B69 51 68                        dw      EXIT                    // ;
 322+ 7B6B
 323+ 7B6B              //  ______________________________________________________________________
 324+ 7B6B              //
 325+ 7B6B              // needs
 326+ 7B6B              // check for cccc exists in vocabulary
 327+ 7B6B              // if it doesn't then  INCLUDE  inc/cccc.F
 328+ 7B6B
 329+ 7B6B              // temp filename cccc.f as counted string zero-padded
 330+ 7B6B                              New_Def NEEDS_W,   "NEEDS-W", Create_Ptr, is_normal
 330+ 7B6B             >
 330+ 7B6B             >Dict_Ptr        defl    $
 330+ 7B6B             >
 330+ 7B6B             >//              ______________________________________________________________________
 330+ 7B6B             >//              Heap part
 330+ 7B6B             >
 330+ 7B6B             >
 330+ 7B6B             >                org     (Heap_Ptr & $1FFF) + $E000
 330+ EB32             >
 330+ EB32             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 330+ EB32             >Latest_Definition defl  Heap_Ptr
 330+ EB32             >
 330+ EB32             >                // dummy db directives used to calculate length of namec
 330+ EB32 4E 45 45 44 >                db      "NEEDS-W"
 330+ EB36 53 2D 57    >
 330+ EB39             >len_NFA         defl    $ - temp_NFA
 330+ EB39             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 330+ EB32             >
 330+ EB32 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 330+ EB33 4E 45 45 44 >                db      "NEEDS-W"               // name string in 7-bit ascii, but
 330+ EB37 53 2D 57    >
 330+ EB3A             >                org     $-1                 // alter last byte of Name just above to set
 330+ EB39 D7          >                db      {b $} | END_BIT     // msb as name end
 330+ EB3A             >
 330+ EB3A 26 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 330+ EB3C             >Prev_Ptr        defl    Heap_Ptr
 330+ EB3C             >
 330+ EB3C             >mirror_Ptr      defl    $
 330+ EB3C             >
 330+ EB3C 6D 7B       >                dw      Dict_Ptr + 2        // xt
 330+ EB3E             >Heap_Ptr        defl    $ - $E000           // save current HP
 330+ EB3E             >
 330+ EB3E             >Current_HP      defl  $ - $E000             // used to set HP once!
 330+ EB3E             >
 330+ EB3E             >//              ______________________________________________________________________
 330+ EB3E             >//              Dictionary part
 330+ EB3E             >
 330+ EB3E             >                org     Dict_Ptr
 330+ 7B6B             >
 330+ 7B6B 3C 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 330+ 7B6D             >
 330+ 7B6D             >NEEDS_W:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 330+ 7B6D CD 05 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 330+ 7B70             >
 330+ 7B70             >
 330+ 7B70             >                endif           ; ok        // for other definitions it "points" the correct handler
 330+ 7B70             >                // Use of "; ok" to suppress "warning[fwdref]"
 330+ 7B70             >
 330+ 7B70             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 331+ 7B70 00 00 00...                  ds      35                      // 32 + .f + 0x00 = len 35
 332+ 7B93              // temp complete path+filename
 333+ 7B93                              New_Def NEEDS_FN,  "NEEDS-FN", Create_Ptr, is_normal
 333+ 7B93             >
 333+ 7B93             >Dict_Ptr        defl    $
 333+ 7B93             >
 333+ 7B93             >//              ______________________________________________________________________
 333+ 7B93             >//              Heap part
 333+ 7B93             >
 333+ 7B93             >
 333+ 7B93             >                org     (Heap_Ptr & $1FFF) + $E000
 333+ EB3E             >
 333+ EB3E             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 333+ EB3E             >Latest_Definition defl  Heap_Ptr
 333+ EB3E             >
 333+ EB3E             >                // dummy db directives used to calculate length of namec
 333+ EB3E 4E 45 45 44 >                db      "NEEDS-FN"
 333+ EB42 53 2D 46 4E >
 333+ EB46             >len_NFA         defl    $ - temp_NFA
 333+ EB46             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 333+ EB3E             >
 333+ EB3E 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 333+ EB3F 4E 45 45 44 >                db      "NEEDS-FN"               // name string in 7-bit ascii, but
 333+ EB43 53 2D 46 4E >
 333+ EB47             >                org     $-1                 // alter last byte of Name just above to set
 333+ EB46 CE          >                db      {b $} | END_BIT     // msb as name end
 333+ EB47             >
 333+ EB47 32 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 333+ EB49             >Prev_Ptr        defl    Heap_Ptr
 333+ EB49             >
 333+ EB49             >mirror_Ptr      defl    $
 333+ EB49             >
 333+ EB49 95 7B       >                dw      Dict_Ptr + 2        // xt
 333+ EB4B             >Heap_Ptr        defl    $ - $E000           // save current HP
 333+ EB4B             >
 333+ EB4B             >Current_HP      defl  $ - $E000             // used to set HP once!
 333+ EB4B             >
 333+ EB4B             >//              ______________________________________________________________________
 333+ EB4B             >//              Dictionary part
 333+ EB4B             >
 333+ EB4B             >                org     Dict_Ptr
 333+ 7B93             >
 333+ 7B93 49 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 333+ 7B95             >
 333+ 7B95             >NEEDS_FN:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 333+ 7B95 CD 05 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 333+ 7B98             >
 333+ 7B98             >
 333+ 7B98             >                endif           ; ok        // for other definitions it "points" the correct handler
 333+ 7B98             >                // Use of "; ok" to suppress "warning[fwdref]"
 333+ 7B98             >
 333+ 7B98             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 334+ 7B98
 335+ 7B98 00 00 00...                  ds      40
 336+ 7BC0              // constant path
 337+ 7BC0                              New_Def NEEDS_INC,  "NEEDS-INC", Create_Ptr, is_normal
 337+ 7BC0             >
 337+ 7BC0             >Dict_Ptr        defl    $
 337+ 7BC0             >
 337+ 7BC0             >//              ______________________________________________________________________
 337+ 7BC0             >//              Heap part
 337+ 7BC0             >
 337+ 7BC0             >
 337+ 7BC0             >                org     (Heap_Ptr & $1FFF) + $E000
 337+ EB4B             >
 337+ EB4B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 337+ EB4B             >Latest_Definition defl  Heap_Ptr
 337+ EB4B             >
 337+ EB4B             >                // dummy db directives used to calculate length of namec
 337+ EB4B 4E 45 45 44 >                db      "NEEDS-INC"
 337+ EB4F 53 2D 49 4E >
 337+ EB53 43          >
 337+ EB54             >len_NFA         defl    $ - temp_NFA
 337+ EB54             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 337+ EB4B             >
 337+ EB4B 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 337+ EB4C 4E 45 45 44 >                db      "NEEDS-INC"               // name string in 7-bit ascii, but
 337+ EB50 53 2D 49 4E >
 337+ EB54 43          >
 337+ EB55             >                org     $-1                 // alter last byte of Name just above to set
 337+ EB54 C3          >                db      {b $} | END_BIT     // msb as name end
 337+ EB55             >
 337+ EB55 3E 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 337+ EB57             >Prev_Ptr        defl    Heap_Ptr
 337+ EB57             >
 337+ EB57             >mirror_Ptr      defl    $
 337+ EB57             >
 337+ EB57 C2 7B       >                dw      Dict_Ptr + 2        // xt
 337+ EB59             >Heap_Ptr        defl    $ - $E000           // save current HP
 337+ EB59             >
 337+ EB59             >Current_HP      defl  $ - $E000             // used to set HP once!
 337+ EB59             >
 337+ EB59             >//              ______________________________________________________________________
 337+ EB59             >//              Dictionary part
 337+ EB59             >
 337+ EB59             >                org     Dict_Ptr
 337+ 7BC0             >
 337+ 7BC0 57 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 337+ 7BC2             >
 337+ 7BC2             >NEEDS_INC:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 337+ 7BC2 CD 05 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 337+ 7BC5             >
 337+ 7BC5             >
 337+ 7BC5             >                endif           ; ok        // for other definitions it "points" the correct handler
 337+ 7BC5             >                // Use of "; ok" to suppress "warning[fwdref]"
 337+ 7BC5             >
 337+ 7BC5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 338+ 7BC5 04 69 6E 63                  db      4, "inc/", 0
 338+ 7BC9 2F 00
 339+ 7BCB                              New_Def NEEDS_LIB,  "NEEDS-LIB", Create_Ptr, is_normal
 339+ 7BCB             >
 339+ 7BCB             >Dict_Ptr        defl    $
 339+ 7BCB             >
 339+ 7BCB             >//              ______________________________________________________________________
 339+ 7BCB             >//              Heap part
 339+ 7BCB             >
 339+ 7BCB             >
 339+ 7BCB             >                org     (Heap_Ptr & $1FFF) + $E000
 339+ EB59             >
 339+ EB59             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 339+ EB59             >Latest_Definition defl  Heap_Ptr
 339+ EB59             >
 339+ EB59             >                // dummy db directives used to calculate length of namec
 339+ EB59 4E 45 45 44 >                db      "NEEDS-LIB"
 339+ EB5D 53 2D 4C 49 >
 339+ EB61 42          >
 339+ EB62             >len_NFA         defl    $ - temp_NFA
 339+ EB62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 339+ EB59             >
 339+ EB59 89          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 339+ EB5A 4E 45 45 44 >                db      "NEEDS-LIB"               // name string in 7-bit ascii, but
 339+ EB5E 53 2D 4C 49 >
 339+ EB62 42          >
 339+ EB63             >                org     $-1                 // alter last byte of Name just above to set
 339+ EB62 C2          >                db      {b $} | END_BIT     // msb as name end
 339+ EB63             >
 339+ EB63 4B 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 339+ EB65             >Prev_Ptr        defl    Heap_Ptr
 339+ EB65             >
 339+ EB65             >mirror_Ptr      defl    $
 339+ EB65             >
 339+ EB65 CD 7B       >                dw      Dict_Ptr + 2        // xt
 339+ EB67             >Heap_Ptr        defl    $ - $E000           // save current HP
 339+ EB67             >
 339+ EB67             >Current_HP      defl  $ - $E000             // used to set HP once!
 339+ EB67             >
 339+ EB67             >//              ______________________________________________________________________
 339+ EB67             >//              Dictionary part
 339+ EB67             >
 339+ EB67             >                org     Dict_Ptr
 339+ 7BCB             >
 339+ 7BCB 65 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 339+ 7BCD             >
 339+ 7BCD             >NEEDS_LIB:          if Create_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 339+ 7BCD CD 05 74    >                call    Create_Ptr ; ok        // for primitive definitions  actual code
 339+ 7BD0             >
 339+ 7BD0             >
 339+ 7BD0             >                endif           ; ok        // for other definitions it "points" the correct handler
 339+ 7BD0             >                // Use of "; ok" to suppress "warning[fwdref]"
 339+ 7BD0             >
 339+ 7BD0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 340+ 7BD0 04 6C 69 62                  db      4, "lib/", 0
 340+ 7BD4 2F 00
 341+ 7BD6
 342+ 7BD6              // Concatenate path at a and filename and include it
 343+ 7BD6              // No error is issued if filename doesn't exist.
 344+ 7BD6                              Colon_Def NEEDS_SLASH, "NEEDS/", is_normal
 344+ 7BD6             >                New_Def  NEEDS_SLASH, "NEEDS/", Enter_Ptr, is_normal ; ok
 344+ 7BD6             >
 344+ 7BD6             >Dict_Ptr        defl    $
 344+ 7BD6             >
 344+ 7BD6             >//              ______________________________________________________________________
 344+ 7BD6             >//              Heap part
 344+ 7BD6             >
 344+ 7BD6             >
 344+ 7BD6             >                org     (Heap_Ptr & $1FFF) + $E000
 344+ EB67             >
 344+ EB67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 344+ EB67             >Latest_Definition defl  Heap_Ptr
 344+ EB67             >
 344+ EB67             >                // dummy db directives used to calculate length of namec
 344+ EB67 4E 45 45 44 >                db      "NEEDS/"
 344+ EB6B 53 2F       >
 344+ EB6D             >len_NFA         defl    $ - temp_NFA
 344+ EB6D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 344+ EB67             >
 344+ EB67 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 344+ EB68 4E 45 45 44 >                db      "NEEDS/"               // name string in 7-bit ascii, but
 344+ EB6C 53 2F       >
 344+ EB6E             >                org     $-1                 // alter last byte of Name just above to set
 344+ EB6D AF          >                db      {b $} | END_BIT     // msb as name end
 344+ EB6E             >
 344+ EB6E 59 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 344+ EB70             >Prev_Ptr        defl    Heap_Ptr
 344+ EB70             >
 344+ EB70             >mirror_Ptr      defl    $
 344+ EB70             >
 344+ EB70 D8 7B       >                dw      Dict_Ptr + 2        // xt
 344+ EB72             >Heap_Ptr        defl    $ - $E000           // save current HP
 344+ EB72             >
 344+ EB72             >Current_HP      defl  $ - $E000             // used to set HP once!
 344+ EB72             >
 344+ EB72             >//              ______________________________________________________________________
 344+ EB72             >//              Dictionary part
 344+ EB72             >
 344+ EB72             >                org     Dict_Ptr
 344+ 7BD6             >
 344+ 7BD6 70 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 344+ 7BD8             >
 344+ 7BD8             >NEEDS_SLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 344+ 7BD8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 344+ 7BDB             >
 344+ 7BDB             >
 344+ 7BDB             >                endif           ; ok        // for other definitions it "points" the correct handler
 344+ 7BDB             >                // Use of "; ok" to suppress "warning[fwdref]"
 344+ 7BDB             >
 344+ 7BDB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 345+ 7BDB 16 6F 0C 69                  dw      COUNT, TUCK             // n a n
 346+ 7BDF 95 7B 15 69                  dw      NEEDS_FN, SWAP, CMOVE   // n        \ Path
 346+ 7BE3 8C 67
 347+ 7BE5 95 7B 9E 68                  dw      NEEDS_FN, PLUS          // a1+n     \ Concat
 348+ 7BE9 6D 7B B7 68                  dw      NEEDS_W, ONE_PLUS, SWAP
 348+ 7BED 15 69
 349+ 7BEF A3 63 23 00                  dw      LIT, 35
 350+ 7BF3 8C 67                        dw      CMOVE
 351+ 7BF5 95 7B                        dw      NEEDS_FN
 352+ 7BF7 AD 70 7F 6A                  dw      PAD, ONE, F_OPEN
 352+ 7BFB 56 67
 353+ 7BFD 76 68                        dw      ZEQUAL
 354+ 7BFF F3 63                        dw      ZBRANCH
 355+ 7C01 08 00                        dw      Needs_1 - $
 356+ 7C03 8A 7A                        dw          F_INCLUDE
 357+ 7C05 EF 63                        dw      BRANCH
 358+ 7C07 04 00                        dw      Needs_2 - $
 359+ 7C09              Needs_1:
 360+ 7C09              //              dw          NEEDS_W, COUNT, TYPE, SPACE
 361+ 7C09              //              dw          LIT, 43, MESSAGE
 362+ 7C09 01 69                        dw          DROP
 363+ 7C0B              Needs_2:
 364+ 7C0B 51 68                        dw      EXIT                    // ;
 365+ 7C0D
 366+ 7C0D              NDOM_PTR:
 367+ 7C0D              //              New_Def NDOM,   "NDOM", Create_Ptr, is_normal
 368+ 7C0D              //              db $3A, $3F, $2F, $2A, $7C, $5C, $3C, $3E, $22
 369+ 7C0D 3A 3F 2F 2A                  db ':?/*|\<>"'
 369+ 7C11 7C 5C 3C 3E
 369+ 7C15 22
 370+ 7C16              //              db 0
 371+ 7C16
 372+ 7C16              NCDM_PTR:
 373+ 7C16              //              New_Def NCDM,   "NCDM", Create_Ptr, is_normal
 374+ 7C16              //              db $5F, $5E, $25, $26, $24, $5F, $7B, $7D, $7E
 375+ 7C16 5F 5E 25 26                  db '_^%&$_{}~'
 375+ 7C1A 24 5F 7B 7D
 375+ 7C1E 7E
 376+ 7C1F              //              db 0
 377+ 7C1F
 378+ 7C1F              // Replace illegal character in filename using the map here above
 379+ 7C1F              // at the moment we need only  "
 380+ 7C1F                              Colon_Def NEEDS_CHECK, "MAP-FN", is_normal
 380+ 7C1F             >                New_Def  NEEDS_CHECK, "MAP-FN", Enter_Ptr, is_normal ; ok
 380+ 7C1F             >
 380+ 7C1F             >Dict_Ptr        defl    $
 380+ 7C1F             >
 380+ 7C1F             >//              ______________________________________________________________________
 380+ 7C1F             >//              Heap part
 380+ 7C1F             >
 380+ 7C1F             >
 380+ 7C1F             >                org     (Heap_Ptr & $1FFF) + $E000
 380+ EB72             >
 380+ EB72             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 380+ EB72             >Latest_Definition defl  Heap_Ptr
 380+ EB72             >
 380+ EB72             >                // dummy db directives used to calculate length of namec
 380+ EB72 4D 41 50 2D >                db      "MAP-FN"
 380+ EB76 46 4E       >
 380+ EB78             >len_NFA         defl    $ - temp_NFA
 380+ EB78             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 380+ EB72             >
 380+ EB72 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 380+ EB73 4D 41 50 2D >                db      "MAP-FN"               // name string in 7-bit ascii, but
 380+ EB77 46 4E       >
 380+ EB79             >                org     $-1                 // alter last byte of Name just above to set
 380+ EB78 CE          >                db      {b $} | END_BIT     // msb as name end
 380+ EB79             >
 380+ EB79 67 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 380+ EB7B             >Prev_Ptr        defl    Heap_Ptr
 380+ EB7B             >
 380+ EB7B             >mirror_Ptr      defl    $
 380+ EB7B             >
 380+ EB7B 21 7C       >                dw      Dict_Ptr + 2        // xt
 380+ EB7D             >Heap_Ptr        defl    $ - $E000           // save current HP
 380+ EB7D             >
 380+ EB7D             >Current_HP      defl  $ - $E000             // used to set HP once!
 380+ EB7D             >
 380+ EB7D             >//              ______________________________________________________________________
 380+ EB7D             >//              Dictionary part
 380+ EB7D             >
 380+ EB7D             >                org     Dict_Ptr
 380+ 7C1F             >
 380+ 7C1F 7B 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 380+ 7C21             >
 380+ 7C21             >NEEDS_CHECK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 380+ 7C21 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 380+ 7C24             >
 380+ 7C24             >
 380+ 7C24             >                endif           ; ok        // for other definitions it "points" the correct handler
 380+ 7C24             >                // Use of "; ok" to suppress "warning[fwdref]"
 380+ 7C24             >
 380+ 7C24             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 381+ 7C24 16 6F 23 6F                  dw      COUNT, BOUNDS
 382+ 7C28 2E 64                        dw      C_DO
 383+ 7C2A              Needs_3:
 384+ 7C2A              //              dw          NCDM, NDOM, LIT, 10
 385+ 7C2A A3 63 16 7C                  dw          LIT, NCDM_PTR           //
 386+ 7C2E A3 63 0D 7C                  dw          LIT, NDOM_PTR           //
 387+ 7C32 A3 63 09 00                  dw          LIT, 9
 388+ 7C36 34 64 9B 69                  dw          I, CFETCH
 389+ 7C3A 54 65                        dw          C_MAP
 390+ 7C3C 34 64 A4 69                  dw          I, CSTORE
 391+ 7C40              Needs_4:
 392+ 7C40 E7 63                        dw      C_LOOP
 393+ 7C42 E8 FF                        dw      Needs_3 - $
 394+ 7C44 51 68                        dw      EXIT
 395+ 7C46
 396+ 7C46
 397+ 7C46              // include  "path/cccc.f" if cccc is not defined
 398+ 7C46              // filename cccc.f is temporary stored at NEEDS-W
 399+ 7C46                              Colon_Def NEEDS_PATH, "NEEDS-F", is_normal
 399+ 7C46             >                New_Def  NEEDS_PATH, "NEEDS-F", Enter_Ptr, is_normal ; ok
 399+ 7C46             >
 399+ 7C46             >Dict_Ptr        defl    $
 399+ 7C46             >
 399+ 7C46             >//              ______________________________________________________________________
 399+ 7C46             >//              Heap part
 399+ 7C46             >
 399+ 7C46             >
 399+ 7C46             >                org     (Heap_Ptr & $1FFF) + $E000
 399+ EB7D             >
 399+ EB7D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 399+ EB7D             >Latest_Definition defl  Heap_Ptr
 399+ EB7D             >
 399+ EB7D             >                // dummy db directives used to calculate length of namec
 399+ EB7D 4E 45 45 44 >                db      "NEEDS-F"
 399+ EB81 53 2D 46    >
 399+ EB84             >len_NFA         defl    $ - temp_NFA
 399+ EB84             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 399+ EB7D             >
 399+ EB7D 87          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 399+ EB7E 4E 45 45 44 >                db      "NEEDS-F"               // name string in 7-bit ascii, but
 399+ EB82 53 2D 46    >
 399+ EB85             >                org     $-1                 // alter last byte of Name just above to set
 399+ EB84 C6          >                db      {b $} | END_BIT     // msb as name end
 399+ EB85             >
 399+ EB85 72 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 399+ EB87             >Prev_Ptr        defl    Heap_Ptr
 399+ EB87             >
 399+ EB87             >mirror_Ptr      defl    $
 399+ EB87             >
 399+ EB87 48 7C       >                dw      Dict_Ptr + 2        // xt
 399+ EB89             >Heap_Ptr        defl    $ - $E000           // save current HP
 399+ EB89             >
 399+ EB89             >Current_HP      defl  $ - $E000             // used to set HP once!
 399+ EB89             >
 399+ EB89             >//              ______________________________________________________________________
 399+ EB89             >//              Dictionary part
 399+ EB89             >
 399+ EB89             >                org     Dict_Ptr
 399+ 7C46             >
 399+ 7C46 87 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 399+ 7C48             >
 399+ 7C48             >NEEDS_PATH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 399+ 7C48 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 399+ 7C4B             >
 399+ 7C4B             >
 399+ 7C4B             >                endif           ; ok        // for other definitions it "points" the correct handler
 399+ 7C4B             >                // Use of "; ok" to suppress "warning[fwdref]"
 399+ 7C4B             >
 399+ 7C4B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 400+ 7C4B FE 72                        dw      LFIND
 401+ 7C4D F3 63                        dw      ZBRANCH
 402+ 7C4F 0A 00                        dw      Needs_5 - $
 403+ 7C51
 404+ 7C51 01 69 51 69                  dw          DROP, TWO_DROP
 405+ 7C55 EF 63                        dw      BRANCH
 406+ 7C57 2C 00                        dw      Needs_6 - $
 407+ 7C59              Needs_5:
 408+ 7C59 6D 7B                        dw          NEEDS_W
 409+ 7C5B A3 63 23 00                  dw          LIT, 35
 410+ 7C5F 84 70                        dw          ERASE                   // a
 411+ 7C61 9D 6B 9B 69                  dw          HERE, CFETCH, ONE_PLUS  // a n
 411+ 7C65 B7 68
 412+ 7C67 9D 6B F8 68                  dw          HERE, OVER              // a n here n
 413+ 7C6B 6D 7B 15 69                  dw          NEEDS_W, SWAP, CMOVE    // a n
 413+ 7C6F 8C 67
 414+ 7C71 6D 7B 21 7C                  dw          NEEDS_W, NEEDS_CHECK
 415+ 7C75 6D 7B 9E 68                  dw          NEEDS_W, PLUS           // a a1+1
 416+ 7C79 A3 63 2E 66                  dw          LIT, $662E              // a a1+1 ".F"
 417+ 7C7D 15 69 90 69                  dw          SWAP, STORE             // a
 418+ 7C81 D8 7B                        dw          NEEDS_SLASH
 419+ 7C83              Needs_6:
 420+ 7C83 51 68                        dw      EXIT
 421+ 7C85
 422+ 7C85
 423+ 7C85              // check for cccc exists in vocabulary
 424+ 7C85              // if it doesn't then  INCLUDE  inc/cccc.F
 425+ 7C85              // search in inc subdirectory
 426+ 7C85                              Colon_Def NEEDS, "NEEDS", is_normal
 426+ 7C85             >                New_Def  NEEDS, "NEEDS", Enter_Ptr, is_normal ; ok
 426+ 7C85             >
 426+ 7C85             >Dict_Ptr        defl    $
 426+ 7C85             >
 426+ 7C85             >//              ______________________________________________________________________
 426+ 7C85             >//              Heap part
 426+ 7C85             >
 426+ 7C85             >
 426+ 7C85             >                org     (Heap_Ptr & $1FFF) + $E000
 426+ EB89             >
 426+ EB89             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 426+ EB89             >Latest_Definition defl  Heap_Ptr
 426+ EB89             >
 426+ EB89             >                // dummy db directives used to calculate length of namec
 426+ EB89 4E 45 45 44 >                db      "NEEDS"
 426+ EB8D 53          >
 426+ EB8E             >len_NFA         defl    $ - temp_NFA
 426+ EB8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 426+ EB89             >
 426+ EB89 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 426+ EB8A 4E 45 45 44 >                db      "NEEDS"               // name string in 7-bit ascii, but
 426+ EB8E 53          >
 426+ EB8F             >                org     $-1                 // alter last byte of Name just above to set
 426+ EB8E D3          >                db      {b $} | END_BIT     // msb as name end
 426+ EB8F             >
 426+ EB8F 7D 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 426+ EB91             >Prev_Ptr        defl    Heap_Ptr
 426+ EB91             >
 426+ EB91             >mirror_Ptr      defl    $
 426+ EB91             >
 426+ EB91 87 7C       >                dw      Dict_Ptr + 2        // xt
 426+ EB93             >Heap_Ptr        defl    $ - $E000           // save current HP
 426+ EB93             >
 426+ EB93             >Current_HP      defl  $ - $E000             // used to set HP once!
 426+ EB93             >
 426+ EB93             >//              ______________________________________________________________________
 426+ EB93             >//              Dictionary part
 426+ EB93             >
 426+ EB93             >                org     Dict_Ptr
 426+ 7C85             >
 426+ 7C85 91 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 426+ 7C87             >
 426+ 7C87             >NEEDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 426+ 7C87 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 426+ 7C8A             >
 426+ 7C8A             >
 426+ 7C8A             >                endif           ; ok        // for other definitions it "points" the correct handler
 426+ 7C8A             >                // Use of "; ok" to suppress "warning[fwdref]"
 426+ 7C8A             >
 426+ 7C8A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 427+ 7C8A 1F 6B 86 69                  dw      TO_IN, FETCH
 428+ 7C8E 1C 69                        dw      DUP
 429+ 7C90 C2 7B 48 7C                  dw      NEEDS_INC, NEEDS_PATH
 430+ 7C94 1F 6B 90 69                  dw      TO_IN, STORE
 431+ 7C98 CD 7B 48 7C                  dw      NEEDS_LIB, NEEDS_PATH
 432+ 7C9C 1F 6B 90 69                  dw      TO_IN, STORE
 433+ 7CA0 FE 72                        dw      LFIND
 434+ 7CA2 F3 63                        dw      ZBRANCH
 435+ 7CA4 08 00                        dw      Needs_10 - $
 436+ 7CA6 51 69                        dw          TWO_DROP
 437+ 7CA8 EF 63                        dw      BRANCH
 438+ 7CAA 10 00                        dw      Needs_11 - $
 439+ 7CAC              Needs_10:
 440+ 7CAC 6D 7B 16 6F                  dw      NEEDS_W, COUNT, TYPE, SPACE
 440+ 7CB0 6A 6F 66 6C
 441+ 7CB4 A3 63 2B 00                  dw      LIT, 43, MESSAGE
 441+ 7CB8 8D 77
 442+ 7CBA              Needs_11:
 443+ 7CBA 51 68                        dw      EXIT
 444+ 7CBC
 445+ 7CBC
 446+ 7CBC              //  ______________________________________________________________________
 447+ 7CBC              //
 448+ 7CBC              // load         n --
 449+ 7CBC                              Colon_Def LOAD, "LOAD", is_normal
 449+ 7CBC             >                New_Def  LOAD, "LOAD", Enter_Ptr, is_normal ; ok
 449+ 7CBC             >
 449+ 7CBC             >Dict_Ptr        defl    $
 449+ 7CBC             >
 449+ 7CBC             >//              ______________________________________________________________________
 449+ 7CBC             >//              Heap part
 449+ 7CBC             >
 449+ 7CBC             >
 449+ 7CBC             >                org     (Heap_Ptr & $1FFF) + $E000
 449+ EB93             >
 449+ EB93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 449+ EB93             >Latest_Definition defl  Heap_Ptr
 449+ EB93             >
 449+ EB93             >                // dummy db directives used to calculate length of namec
 449+ EB93 4C 4F 41 44 >                db      "LOAD"
 449+ EB97             >len_NFA         defl    $ - temp_NFA
 449+ EB97             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 449+ EB93             >
 449+ EB93 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 449+ EB94 4C 4F 41 44 >                db      "LOAD"               // name string in 7-bit ascii, but
 449+ EB98             >                org     $-1                 // alter last byte of Name just above to set
 449+ EB97 C4          >                db      {b $} | END_BIT     // msb as name end
 449+ EB98             >
 449+ EB98 89 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 449+ EB9A             >Prev_Ptr        defl    Heap_Ptr
 449+ EB9A             >
 449+ EB9A             >mirror_Ptr      defl    $
 449+ EB9A             >
 449+ EB9A BE 7C       >                dw      Dict_Ptr + 2        // xt
 449+ EB9C             >Heap_Ptr        defl    $ - $E000           // save current HP
 449+ EB9C             >
 449+ EB9C             >Current_HP      defl  $ - $E000             // used to set HP once!
 449+ EB9C             >
 449+ EB9C             >//              ______________________________________________________________________
 449+ EB9C             >//              Dictionary part
 449+ EB9C             >
 449+ EB9C             >                org     Dict_Ptr
 449+ 7CBC             >
 449+ 7CBC 9A 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 449+ 7CBE             >
 449+ 7CBE             >LOAD:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 449+ 7CBE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 449+ 7CC1             >
 449+ 7CC1             >
 449+ 7CC1             >                endif           ; ok        // for other definitions it "points" the correct handler
 449+ 7CC1             >                // Use of "; ok" to suppress "warning[fwdref]"
 449+ 7CC1             >
 449+ 7CC1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 450+ 7CC1 19 6B 86 69                  dw      BLK, FETCH, TO_R        // blk @ >r
 450+ 7CC5 5B 68
 451+ 7CC7 1F 6B 86 69                  dw      TO_IN, FETCH, TO_R      // >in @ >r
 451+ 7CCB 5B 68
 452+ 7CCD
 453+ 7CCD 78 6A 1F 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 453+ 7CD1 90 69
 454+ 7CD3 B0 6A 19 77                  dw      BSCR, MUL, BLK, STORE   // b/scr * blk !
 454+ 7CD7 19 6B 90 69
 455+ 7CDB C1 74                        dw      INTERPRET               // interpret
 456+ 7CDD
 457+ 7CDD 66 68 1F 6B                  dw      R_TO, TO_IN, STORE      // r> >in !
 457+ 7CE1 90 69
 458+ 7CE3 66 68 19 6B                  dw      R_TO, BLK, STORE        // r> blk !
 458+ 7CE7 90 69
 459+ 7CE9 51 68                        dw      EXIT                    // ;
 460+ 7CEB
 461+ 7CEB              //  ______________________________________________________________________
 462+ 7CEB              //
 463+ 7CEB              // -->          --
 464+ 7CEB                              Colon_Def LOAD_NEXT, "-->", is_immediate
 464+ 7CEB             >                New_Def  LOAD_NEXT, "-->", Enter_Ptr, is_immediate ; ok
 464+ 7CEB             >
 464+ 7CEB             >Dict_Ptr        defl    $
 464+ 7CEB             >
 464+ 7CEB             >//              ______________________________________________________________________
 464+ 7CEB             >//              Heap part
 464+ 7CEB             >
 464+ 7CEB             >
 464+ 7CEB             >                org     (Heap_Ptr & $1FFF) + $E000
 464+ EB9C             >
 464+ EB9C             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 464+ EB9C             >Latest_Definition defl  Heap_Ptr
 464+ EB9C             >
 464+ EB9C             >                // dummy db directives used to calculate length of namec
 464+ EB9C 2D 2D 3E    >                db      "-->"
 464+ EB9F             >len_NFA         defl    $ - temp_NFA
 464+ EB9F             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 464+ EB9C             >
 464+ EB9C C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 464+ EB9D 2D 2D 3E    >                db      "-->"               // name string in 7-bit ascii, but
 464+ EBA0             >                org     $-1                 // alter last byte of Name just above to set
 464+ EB9F BE          >                db      {b $} | END_BIT     // msb as name end
 464+ EBA0             >
 464+ EBA0 93 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 464+ EBA2             >Prev_Ptr        defl    Heap_Ptr
 464+ EBA2             >
 464+ EBA2             >mirror_Ptr      defl    $
 464+ EBA2             >
 464+ EBA2 ED 7C       >                dw      Dict_Ptr + 2        // xt
 464+ EBA4             >Heap_Ptr        defl    $ - $E000           // save current HP
 464+ EBA4             >
 464+ EBA4             >Current_HP      defl  $ - $E000             // used to set HP once!
 464+ EBA4             >
 464+ EBA4             >//              ______________________________________________________________________
 464+ EBA4             >//              Dictionary part
 464+ EBA4             >
 464+ EBA4             >                org     Dict_Ptr
 464+ 7CEB             >
 464+ 7CEB A2 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 464+ 7CED             >
 464+ 7CED             >LOAD_NEXT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 464+ 7CED CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 464+ 7CF0             >
 464+ 7CF0             >
 464+ 7CF0             >                endif           ; ok        // for other definitions it "points" the correct handler
 464+ 7CF0             >                // Use of "; ok" to suppress "warning[fwdref]"
 464+ 7CF0             >
 464+ 7CF0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 465+ 7CF0 2E 6E                        dw      QLOADING                // ?loading
 466+ 7CF2 78 6A 1F 6B                  dw      ZERO, TO_IN, STORE      // 0 >in !
 466+ 7CF6 90 69
 467+ 7CF8 B0 6A                        dw      BSCR                    // b/scr
 468+ 7CFA 19 6B 86 69                  dw      BLK, FETCH              // blk @
 469+ 7CFE F8 68                        dw      OVER                    // over
 470+ 7D00 3E 77                        dw      MOD                     // mod
 471+ 7D02 DC 6B                        dw      SUBTRACT                // -
 472+ 7D04 19 6B 6E 69                  dw      BLK, PLUSSTORE          // +!
 473+ 7D08 51 68                        dw      EXIT                    // ;
 474+ 7D0A
 475+ 7D0A              //  ______________________________________________________________________
 476+ 7D0A              //
 477+ 7D0A              // '            -- xt
 478+ 7D0A                              Colon_Def TICK, "'", is_normal
 478+ 7D0A             >                New_Def  TICK, "'", Enter_Ptr, is_normal ; ok
 478+ 7D0A             >
 478+ 7D0A             >Dict_Ptr        defl    $
 478+ 7D0A             >
 478+ 7D0A             >//              ______________________________________________________________________
 478+ 7D0A             >//              Heap part
 478+ 7D0A             >
 478+ 7D0A             >
 478+ 7D0A             >                org     (Heap_Ptr & $1FFF) + $E000
 478+ EBA4             >
 478+ EBA4             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 478+ EBA4             >Latest_Definition defl  Heap_Ptr
 478+ EBA4             >
 478+ EBA4             >                // dummy db directives used to calculate length of namec
 478+ EBA4 27          >                db      "'"
 478+ EBA5             >len_NFA         defl    $ - temp_NFA
 478+ EBA5             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 478+ EBA4             >
 478+ EBA4 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 478+ EBA5 27          >                db      "'"               // name string in 7-bit ascii, but
 478+ EBA6             >                org     $-1                 // alter last byte of Name just above to set
 478+ EBA5 A7          >                db      {b $} | END_BIT     // msb as name end
 478+ EBA6             >
 478+ EBA6 9C 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 478+ EBA8             >Prev_Ptr        defl    Heap_Ptr
 478+ EBA8             >
 478+ EBA8             >mirror_Ptr      defl    $
 478+ EBA8             >
 478+ EBA8 0C 7D       >                dw      Dict_Ptr + 2        // xt
 478+ EBAA             >Heap_Ptr        defl    $ - $E000           // save current HP
 478+ EBAA             >
 478+ EBAA             >Current_HP      defl  $ - $E000             // used to set HP once!
 478+ EBAA             >
 478+ EBAA             >//              ______________________________________________________________________
 478+ EBAA             >//              Dictionary part
 478+ EBAA             >
 478+ EBAA             >                org     Dict_Ptr
 478+ 7D0A             >
 478+ 7D0A A8 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 478+ 7D0C             >
 478+ 7D0C             >TICK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 478+ 7D0C CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 478+ 7D0F             >
 478+ 7D0F             >
 478+ 7D0F             >                endif           ; ok        // for other definitions it "points" the correct handler
 478+ 7D0F             >                // Use of "; ok" to suppress "warning[fwdref]"
 478+ 7D0F             >
 478+ 7D0F             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 479+ 7D0F FE 72                        dw      LFIND                   // -find
 480+ 7D11 76 68                        dw      ZEQUAL                  // 0=
 481+ 7D13 78 6A D1 6D                  dw      ZERO, QERROR            // 0 ?error
 482+ 7D17 01 69                        dw      DROP                    // drop
 483+ 7D19 51 68                        dw      EXIT                    // ;
 484+ 7D1B
 485+ 7D1B              //  ______________________________________________________________________
 486+ 7D1B              //
 487+ 7D1B              // forget       -- cccc
 488+ 7D1B                              Colon_Def FORGET, "FORGET", is_normal
 488+ 7D1B             >                New_Def  FORGET, "FORGET", Enter_Ptr, is_normal ; ok
 488+ 7D1B             >
 488+ 7D1B             >Dict_Ptr        defl    $
 488+ 7D1B             >
 488+ 7D1B             >//              ______________________________________________________________________
 488+ 7D1B             >//              Heap part
 488+ 7D1B             >
 488+ 7D1B             >
 488+ 7D1B             >                org     (Heap_Ptr & $1FFF) + $E000
 488+ EBAA             >
 488+ EBAA             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 488+ EBAA             >Latest_Definition defl  Heap_Ptr
 488+ EBAA             >
 488+ EBAA             >                // dummy db directives used to calculate length of namec
 488+ EBAA 46 4F 52 47 >                db      "FORGET"
 488+ EBAE 45 54       >
 488+ EBB0             >len_NFA         defl    $ - temp_NFA
 488+ EBB0             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 488+ EBAA             >
 488+ EBAA 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 488+ EBAB 46 4F 52 47 >                db      "FORGET"               // name string in 7-bit ascii, but
 488+ EBAF 45 54       >
 488+ EBB1             >                org     $-1                 // alter last byte of Name just above to set
 488+ EBB0 D4          >                db      {b $} | END_BIT     // msb as name end
 488+ EBB1             >
 488+ EBB1 A4 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 488+ EBB3             >Prev_Ptr        defl    Heap_Ptr
 488+ EBB3             >
 488+ EBB3             >mirror_Ptr      defl    $
 488+ EBB3             >
 488+ EBB3 1D 7D       >                dw      Dict_Ptr + 2        // xt
 488+ EBB5             >Heap_Ptr        defl    $ - $E000           // save current HP
 488+ EBB5             >
 488+ EBB5             >Current_HP      defl  $ - $E000             // used to set HP once!
 488+ EBB5             >
 488+ EBB5             >//              ______________________________________________________________________
 488+ EBB5             >//              Dictionary part
 488+ EBB5             >
 488+ EBB5             >                org     Dict_Ptr
 488+ 7D1B             >
 488+ 7D1B B3 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 488+ 7D1D             >
 488+ 7D1D             >FORGET:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 488+ 7D1D CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 488+ 7D20             >
 488+ 7D20             >
 488+ 7D20             >                endif           ; ok        // for other definitions it "points" the correct handler
 488+ 7D20             >                // Use of "; ok" to suppress "warning[fwdref]"
 488+ 7D20             >
 488+ 7D20             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 489+ 7D20 3D 6B 86 69                  dw      CURRENT, FETCH          // current @
 490+ 7D24 37 6B 86 69                  dw      CONTEXT, FETCH          // context @
 491+ 7D28 DC 6B A3 63                  dw      SUBTRACT, LIT, 23, QERROR // - 23 ?error
 491+ 7D2C 17 00 D1 6D
 492+ 7D30 0C 7D 50 6D                  dw      TICK, TO_BODY           // ' >body
 493+ 7D34 1C 69 EF 6A                  dw      DUP, FENCE, FETCH       // dup fence @
 493+ 7D38 86 69
 494+ 7D3A F3 6B A3 63                  dw      ULESS, LIT, 21, QERROR  // u< 21 ?error
 494+ 7D3E 15 00 D1 6D
 495+ 7D42 1C 69 85 6D                  dw      DUP, NFA                // dup nfa
 496+ 7D46
 497+ 7D46                          //  dw      DUP
 498+ 7D46                          //  dw      LIT, $E000, LESS
 499+ 7D46                          //  dw      MMU7_FETCH, ONE, EQUALS
 500+ 7D46                          //  dw      OR_OP, NOT_OP
 501+ 7D46                          //  dw      ZBRANCH
 502+ 7D46                          //  dw      Forget_then - $
 503+ 7D46
 504+ 7D46 8E 6C B1 6C                  dw      MMU7_FETCH, FROM_FAR
 505+ 7D4A 0D 6B 90 69                  dw      HP, STORE
 506+ 7D4E 1C 69 7A 6D                  dw      DUP, CFA, CELL_MINUS
 506+ 7D52 D1 68
 507+ 7D54              // Forget_then:
 508+ 7D54 F5 6A 90 69                  dw      DP, STORE               // dp !
 509+ 7D58 90 6D 86 69                  dw      LFA, FETCH              // lfa @
 510+ 7D5C 37 6B 86 69                  dw      CONTEXT, FETCH, STORE   // context @ !
 510+ 7D60 90 69
 511+ 7D62 51 68                        dw      EXIT                    // ;
 512+ 7D64
 513+ 7D64              //  ______________________________________________________________________
 514+ 7D64              //
 515+ 7D64              // marker       -- cccc
 516+ 7D64                              Colon_Def MARKER, "MARKER", is_immediate
 516+ 7D64             >                New_Def  MARKER, "MARKER", Enter_Ptr, is_immediate ; ok
 516+ 7D64             >
 516+ 7D64             >Dict_Ptr        defl    $
 516+ 7D64             >
 516+ 7D64             >//              ______________________________________________________________________
 516+ 7D64             >//              Heap part
 516+ 7D64             >
 516+ 7D64             >
 516+ 7D64             >                org     (Heap_Ptr & $1FFF) + $E000
 516+ EBB5             >
 516+ EBB5             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 516+ EBB5             >Latest_Definition defl  Heap_Ptr
 516+ EBB5             >
 516+ EBB5             >                // dummy db directives used to calculate length of namec
 516+ EBB5 4D 41 52 4B >                db      "MARKER"
 516+ EBB9 45 52       >
 516+ EBBB             >len_NFA         defl    $ - temp_NFA
 516+ EBBB             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 516+ EBB5             >
 516+ EBB5 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 516+ EBB6 4D 41 52 4B >                db      "MARKER"               // name string in 7-bit ascii, but
 516+ EBBA 45 52       >
 516+ EBBC             >                org     $-1                 // alter last byte of Name just above to set
 516+ EBBB D2          >                db      {b $} | END_BIT     // msb as name end
 516+ EBBC             >
 516+ EBBC AA 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 516+ EBBE             >Prev_Ptr        defl    Heap_Ptr
 516+ EBBE             >
 516+ EBBE             >mirror_Ptr      defl    $
 516+ EBBE             >
 516+ EBBE 66 7D       >                dw      Dict_Ptr + 2        // xt
 516+ EBC0             >Heap_Ptr        defl    $ - $E000           // save current HP
 516+ EBC0             >
 516+ EBC0             >Current_HP      defl  $ - $E000             // used to set HP once!
 516+ EBC0             >
 516+ EBC0             >//              ______________________________________________________________________
 516+ EBC0             >//              Dictionary part
 516+ EBC0             >
 516+ EBC0             >                org     Dict_Ptr
 516+ 7D64             >
 516+ 7D64 BE 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 516+ 7D66             >
 516+ 7D66             >MARKER:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 516+ 7D66 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 516+ 7D69             >
 516+ 7D69             >
 516+ 7D69             >                endif           ; ok        // for other definitions it "points" the correct handler
 516+ 7D69             >                // Use of "; ok" to suppress "warning[fwdref]"
 516+ 7D69             >
 516+ 7D69             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 517+ 7D69 F0 73                        dw      CREATE
 518+ 7D6B
 519+ 7D6B FB 6A 86 69                  dw      VOC_LINK, FETCH, COMMA
 519+ 7D6F B3 6B
 520+ 7D71 3D 6B 86 69                  dw      CURRENT, FETCH, COMMA
 520+ 7D75 B3 6B
 521+ 7D77 37 6B 86 69                  dw      CONTEXT, FETCH, COMMA
 521+ 7D7B B3 6B
 522+ 7D7D 3D 6B 86 69                  dw      CURRENT, FETCH, FETCH,  COMMA
 522+ 7D81 86 69 B3 6B
 523+ 7D85 41 6D 9F 6D                  dw      LATEST, PFA, LFA, FETCH, COMMA
 523+ 7D89 90 6D 86 69
 523+ 7D8D B3 6B
 524+ 7D8F
 525+ 7D8F EC 6E                        dw      C_DOES
 526+ 7D91
 527+ 7D91                        //    nop
 528+ 7D91 CD 23 6A                     call    Enter_Ptr
 529+ 7D94
 530+ 7D94 1C 69 86 69                  dw      DUP, FETCH, VOC_LINK, STORE, CELL_PLUS
 530+ 7D98 FB 6A 90 69
 530+ 7D9C CD 68
 531+ 7D9E 1C 69 86 69                  dw      DUP, FETCH, CURRENT, STORE, CELL_PLUS
 531+ 7DA2 3D 6B 90 69
 531+ 7DA6 CD 68
 532+ 7DA8 1C 69 86 69                  dw      DUP, FETCH, CONTEXT, STORE, CELL_PLUS
 532+ 7DAC 37 6B 90 69
 532+ 7DB0 CD 68
 533+ 7DB2 1C 69 86 69                  dw      DUP, FETCH
 534+ 7DB6                          //  dw      DUP, QHEAPP
 535+ 7DB6                          //  dw      ZBRANCH
 536+ 7DB6                          //  dw      Marker_then - $
 537+ 7DB6 1C 69 0D 6B                  dw          DUP, HP, STORE
 537+ 7DBA 90 69
 538+ 7DBC 9F 6D 7A 6D                  dw          PFA, CFA, CELL_MINUS
 538+ 7DC0 D1 68
 539+ 7DC2              // Marker_then:
 540+ 7DC2 F5 6A 90 69                  dw      DP, STORE, CELL_PLUS
 540+ 7DC6 CD 68
 541+ 7DC8 86 69 3D 6B                  dw      FETCH, CURRENT, FETCH, STORE
 541+ 7DCC 86 69 90 69
 542+ 7DD0 51 68                        dw      EXIT
 543+ 7DD2
 544+ 7DD2              //  ______________________________________________________________________
 545+ 7DD2              //
 546+ 7DD2              // spaces       n --
 547+ 7DD2                              Colon_Def SPACES, "SPACES", is_normal
 547+ 7DD2             >                New_Def  SPACES, "SPACES", Enter_Ptr, is_normal ; ok
 547+ 7DD2             >
 547+ 7DD2             >Dict_Ptr        defl    $
 547+ 7DD2             >
 547+ 7DD2             >//              ______________________________________________________________________
 547+ 7DD2             >//              Heap part
 547+ 7DD2             >
 547+ 7DD2             >
 547+ 7DD2             >                org     (Heap_Ptr & $1FFF) + $E000
 547+ EBC0             >
 547+ EBC0             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 547+ EBC0             >Latest_Definition defl  Heap_Ptr
 547+ EBC0             >
 547+ EBC0             >                // dummy db directives used to calculate length of namec
 547+ EBC0 53 50 41 43 >                db      "SPACES"
 547+ EBC4 45 53       >
 547+ EBC6             >len_NFA         defl    $ - temp_NFA
 547+ EBC6             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 547+ EBC0             >
 547+ EBC0 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 547+ EBC1 53 50 41 43 >                db      "SPACES"               // name string in 7-bit ascii, but
 547+ EBC5 45 53       >
 547+ EBC7             >                org     $-1                 // alter last byte of Name just above to set
 547+ EBC6 D3          >                db      {b $} | END_BIT     // msb as name end
 547+ EBC7             >
 547+ EBC7 B5 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 547+ EBC9             >Prev_Ptr        defl    Heap_Ptr
 547+ EBC9             >
 547+ EBC9             >mirror_Ptr      defl    $
 547+ EBC9             >
 547+ EBC9 D4 7D       >                dw      Dict_Ptr + 2        // xt
 547+ EBCB             >Heap_Ptr        defl    $ - $E000           // save current HP
 547+ EBCB             >
 547+ EBCB             >Current_HP      defl  $ - $E000             // used to set HP once!
 547+ EBCB             >
 547+ EBCB             >//              ______________________________________________________________________
 547+ EBCB             >//              Dictionary part
 547+ EBCB             >
 547+ EBCB             >                org     Dict_Ptr
 547+ 7DD2             >
 547+ 7DD2 C9 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 547+ 7DD4             >
 547+ 7DD4             >SPACES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 547+ 7DD4 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 547+ 7DD7             >
 547+ 7DD7             >
 547+ 7DD7             >                endif           ; ok        // for other definitions it "points" the correct handler
 547+ 7DD7             >                // Use of "; ok" to suppress "warning[fwdref]"
 547+ 7DD7             >
 547+ 7DD7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 548+ 7DD7 78 6A 2C 6C                  dw      ZERO, MAX
 549+ 7DDB 78 6A 06 64                  dw      ZERO, C_Q_DO
 550+ 7DDF 08 00                        dw      Spaces_Leave - $
 551+ 7DE1              Spaces_Loop:
 552+ 7DE1 66 6C                        dw          SPACE
 553+ 7DE3 E7 63                        dw      C_LOOP
 554+ 7DE5 FC FF                        dw      Spaces_Loop - $
 555+ 7DE7              Spaces_Leave:
 556+ 7DE7 51 68                        dw      EXIT                    // ;
 557+ 7DE9
 558+ 7DE9              //  ______________________________________________________________________
 559+ 7DE9              //
 560+ 7DE9              // <#           --
 561+ 7DE9                              Colon_Def BEGIN_DASH, "<#", is_normal
 561+ 7DE9             >                New_Def  BEGIN_DASH, "<#", Enter_Ptr, is_normal ; ok
 561+ 7DE9             >
 561+ 7DE9             >Dict_Ptr        defl    $
 561+ 7DE9             >
 561+ 7DE9             >//              ______________________________________________________________________
 561+ 7DE9             >//              Heap part
 561+ 7DE9             >
 561+ 7DE9             >
 561+ 7DE9             >                org     (Heap_Ptr & $1FFF) + $E000
 561+ EBCB             >
 561+ EBCB             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 561+ EBCB             >Latest_Definition defl  Heap_Ptr
 561+ EBCB             >
 561+ EBCB             >                // dummy db directives used to calculate length of namec
 561+ EBCB 3C 23       >                db      "<#"
 561+ EBCD             >len_NFA         defl    $ - temp_NFA
 561+ EBCD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 561+ EBCB             >
 561+ EBCB 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 561+ EBCC 3C 23       >                db      "<#"               // name string in 7-bit ascii, but
 561+ EBCE             >                org     $-1                 // alter last byte of Name just above to set
 561+ EBCD A3          >                db      {b $} | END_BIT     // msb as name end
 561+ EBCE             >
 561+ EBCE C0 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 561+ EBD0             >Prev_Ptr        defl    Heap_Ptr
 561+ EBD0             >
 561+ EBD0             >mirror_Ptr      defl    $
 561+ EBD0             >
 561+ EBD0 EB 7D       >                dw      Dict_Ptr + 2        // xt
 561+ EBD2             >Heap_Ptr        defl    $ - $E000           // save current HP
 561+ EBD2             >
 561+ EBD2             >Current_HP      defl  $ - $E000             // used to set HP once!
 561+ EBD2             >
 561+ EBD2             >//              ______________________________________________________________________
 561+ EBD2             >//              Dictionary part
 561+ EBD2             >
 561+ EBD2             >                org     Dict_Ptr
 561+ 7DE9             >
 561+ 7DE9 D0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 561+ 7DEB             >
 561+ 7DEB             >BEGIN_DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 561+ 7DEB CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 561+ 7DEE             >
 561+ 7DEE             >
 561+ 7DEE             >                endif           ; ok        // for other definitions it "points" the correct handler
 561+ 7DEE             >                // Use of "; ok" to suppress "warning[fwdref]"
 561+ 7DEE             >
 561+ 7DEE             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 562+ 7DEE AD 70 67 6B                  dw      PAD, HLD, STORE
 562+ 7DF2 90 69
 563+ 7DF4 51 68                        dw      EXIT
 564+ 7DF6
 565+ 7DF6              //  ______________________________________________________________________
 566+ 7DF6              //
 567+ 7DF6              // #>           --
 568+ 7DF6                              Colon_Def DASH_END, "#>", is_normal
 568+ 7DF6             >                New_Def  DASH_END, "#>", Enter_Ptr, is_normal ; ok
 568+ 7DF6             >
 568+ 7DF6             >Dict_Ptr        defl    $
 568+ 7DF6             >
 568+ 7DF6             >//              ______________________________________________________________________
 568+ 7DF6             >//              Heap part
 568+ 7DF6             >
 568+ 7DF6             >
 568+ 7DF6             >                org     (Heap_Ptr & $1FFF) + $E000
 568+ EBD2             >
 568+ EBD2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 568+ EBD2             >Latest_Definition defl  Heap_Ptr
 568+ EBD2             >
 568+ EBD2             >                // dummy db directives used to calculate length of namec
 568+ EBD2 23 3E       >                db      "#>"
 568+ EBD4             >len_NFA         defl    $ - temp_NFA
 568+ EBD4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 568+ EBD2             >
 568+ EBD2 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 568+ EBD3 23 3E       >                db      "#>"               // name string in 7-bit ascii, but
 568+ EBD5             >                org     $-1                 // alter last byte of Name just above to set
 568+ EBD4 BE          >                db      {b $} | END_BIT     // msb as name end
 568+ EBD5             >
 568+ EBD5 CB 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 568+ EBD7             >Prev_Ptr        defl    Heap_Ptr
 568+ EBD7             >
 568+ EBD7             >mirror_Ptr      defl    $
 568+ EBD7             >
 568+ EBD7 F8 7D       >                dw      Dict_Ptr + 2        // xt
 568+ EBD9             >Heap_Ptr        defl    $ - $E000           // save current HP
 568+ EBD9             >
 568+ EBD9             >Current_HP      defl  $ - $E000             // used to set HP once!
 568+ EBD9             >
 568+ EBD9             >//              ______________________________________________________________________
 568+ EBD9             >//              Dictionary part
 568+ EBD9             >
 568+ EBD9             >                org     Dict_Ptr
 568+ 7DF6             >
 568+ 7DF6 D7 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 568+ 7DF8             >
 568+ 7DF8             >DASH_END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 568+ 7DF8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 568+ 7DFB             >
 568+ 7DFB             >
 568+ 7DFB             >                endif           ; ok        // for other definitions it "points" the correct handler
 568+ 7DFB             >                // Use of "; ok" to suppress "warning[fwdref]"
 568+ 7DFB             >
 568+ 7DFB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 569+ 7DFB 51 69                        dw      TWO_DROP
 570+ 7DFD 67 6B 86 69                  dw      HLD, FETCH, PAD, OVER, SUBTRACT
 570+ 7E01 AD 70 F8 68
 570+ 7E05 DC 6B
 571+ 7E07 51 68                        dw      EXIT
 572+ 7E09
 573+ 7E09              //  ______________________________________________________________________
 574+ 7E09              //
 575+ 7E09              // sign         n d -- d
 576+ 7E09                              Colon_Def SIGN, "SIGN", is_normal
 576+ 7E09             >                New_Def  SIGN, "SIGN", Enter_Ptr, is_normal ; ok
 576+ 7E09             >
 576+ 7E09             >Dict_Ptr        defl    $
 576+ 7E09             >
 576+ 7E09             >//              ______________________________________________________________________
 576+ 7E09             >//              Heap part
 576+ 7E09             >
 576+ 7E09             >
 576+ 7E09             >                org     (Heap_Ptr & $1FFF) + $E000
 576+ EBD9             >
 576+ EBD9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 576+ EBD9             >Latest_Definition defl  Heap_Ptr
 576+ EBD9             >
 576+ EBD9             >                // dummy db directives used to calculate length of namec
 576+ EBD9 53 49 47 4E >                db      "SIGN"
 576+ EBDD             >len_NFA         defl    $ - temp_NFA
 576+ EBDD             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 576+ EBD9             >
 576+ EBD9 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 576+ EBDA 53 49 47 4E >                db      "SIGN"               // name string in 7-bit ascii, but
 576+ EBDE             >                org     $-1                 // alter last byte of Name just above to set
 576+ EBDD CE          >                db      {b $} | END_BIT     // msb as name end
 576+ EBDE             >
 576+ EBDE D2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 576+ EBE0             >Prev_Ptr        defl    Heap_Ptr
 576+ EBE0             >
 576+ EBE0             >mirror_Ptr      defl    $
 576+ EBE0             >
 576+ EBE0 0B 7E       >                dw      Dict_Ptr + 2        // xt
 576+ EBE2             >Heap_Ptr        defl    $ - $E000           // save current HP
 576+ EBE2             >
 576+ EBE2             >Current_HP      defl  $ - $E000             // used to set HP once!
 576+ EBE2             >
 576+ EBE2             >//              ______________________________________________________________________
 576+ EBE2             >//              Dictionary part
 576+ EBE2             >
 576+ EBE2             >                org     Dict_Ptr
 576+ 7E09             >
 576+ 7E09 E0 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 576+ 7E0B             >
 576+ 7E0B             >SIGN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 576+ 7E0B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 576+ 7E0E             >
 576+ 7E0E             >
 576+ 7E0E             >                endif           ; ok        // for other definitions it "points" the correct handler
 576+ 7E0E             >                // Use of "; ok" to suppress "warning[fwdref]"
 576+ 7E0E             >
 576+ 7E0E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 577+ 7E0E 87 68                        dw      ZLESS
 578+ 7E10 F3 63                        dw      ZBRANCH
 579+ 7E12 08 00                        dw      Sign_Endif - $
 580+ 7E14 A3 63 2D 00                  dw          LIT, 45, HOLD
 580+ 7E18 9A 70
 581+ 7E1A              Sign_Endif:
 582+ 7E1A 51 68                        dw      EXIT
 583+ 7E1C
 584+ 7E1C              //  ______________________________________________________________________
 585+ 7E1C              //
 586+ 7E1C              // #           d1 -- d2
 587+ 7E1C                              Colon_Def DASH, "#", is_normal
 587+ 7E1C             >                New_Def  DASH, "#", Enter_Ptr, is_normal ; ok
 587+ 7E1C             >
 587+ 7E1C             >Dict_Ptr        defl    $
 587+ 7E1C             >
 587+ 7E1C             >//              ______________________________________________________________________
 587+ 7E1C             >//              Heap part
 587+ 7E1C             >
 587+ 7E1C             >
 587+ 7E1C             >                org     (Heap_Ptr & $1FFF) + $E000
 587+ EBE2             >
 587+ EBE2             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 587+ EBE2             >Latest_Definition defl  Heap_Ptr
 587+ EBE2             >
 587+ EBE2             >                // dummy db directives used to calculate length of namec
 587+ EBE2 23          >                db      "#"
 587+ EBE3             >len_NFA         defl    $ - temp_NFA
 587+ EBE3             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 587+ EBE2             >
 587+ EBE2 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 587+ EBE3 23          >                db      "#"               // name string in 7-bit ascii, but
 587+ EBE4             >                org     $-1                 // alter last byte of Name just above to set
 587+ EBE3 A3          >                db      {b $} | END_BIT     // msb as name end
 587+ EBE4             >
 587+ EBE4 D9 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 587+ EBE6             >Prev_Ptr        defl    Heap_Ptr
 587+ EBE6             >
 587+ EBE6             >mirror_Ptr      defl    $
 587+ EBE6             >
 587+ EBE6 1E 7E       >                dw      Dict_Ptr + 2        // xt
 587+ EBE8             >Heap_Ptr        defl    $ - $E000           // save current HP
 587+ EBE8             >
 587+ EBE8             >Current_HP      defl  $ - $E000             // used to set HP once!
 587+ EBE8             >
 587+ EBE8             >//              ______________________________________________________________________
 587+ EBE8             >//              Dictionary part
 587+ EBE8             >
 587+ EBE8             >                org     Dict_Ptr
 587+ 7E1C             >
 587+ 7E1C E6 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 587+ 7E1E             >
 587+ 7E1E             >DASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 587+ 7E1E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 587+ 7E21             >
 587+ 7E21             >
 587+ 7E21             >                endif           ; ok        // for other definitions it "points" the correct handler
 587+ 7E21             >                // Use of "; ok" to suppress "warning[fwdref]"
 587+ 7E21             >
 587+ 7E21             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 588+ 7E21 49 6B 86 69                  dw      BASE, FETCH
 589+ 7E25
 590+ 7E25 5B 68                        dw      TO_R                    // >r           ( ud1 )
 591+ 7E27 78 6A 71 68                  dw      ZERO, R_OP, UMDIVMOD    // 0 r um/mod   ( l rem1 h/r )
 591+ 7E2B D8 67
 592+ 7E2D 66 68 15 69                  dw      R_TO, SWAP, TO_R        // r> swap >r   ( l rem )
 592+ 7E31 5B 68
 593+ 7E33 D8 67                        dw      UMDIVMOD                // um/mod       ( rem2 l/r )
 594+ 7E35 66 68                        dw      R_TO                    // r>           ( rem2 l/r h/r )
 595+ 7E37
 596+ 7E37 23 69                        dw      ROT
 597+ 7E39 A3 63 09 00                  dw      LIT, 9, OVER, LESS
 597+ 7E3D F8 68 01 6C
 598+ 7E41 F3 63                        dw      ZBRANCH
 599+ 7E43 08 00                        dw      Dash_Endif - $
 600+ 7E45 A3 63 07 00                  dw          LIT, 7, PLUS
 600+ 7E49 9E 68
 601+ 7E4B              Dash_Endif:
 602+ 7E4B
 603+ 7E4B A3 63 30 00                  dw      LIT, 48, PLUS, HOLD
 603+ 7E4F 9E 68 9A 70
 604+ 7E53 51 68                        dw      EXIT
 605+ 7E55
 606+ 7E55              //  ______________________________________________________________________
 607+ 7E55              //
 608+ 7E55              // #s           d1 -- d2
 609+ 7E55                              Colon_Def DASHES, "#S", is_normal
 609+ 7E55             >                New_Def  DASHES, "#S", Enter_Ptr, is_normal ; ok
 609+ 7E55             >
 609+ 7E55             >Dict_Ptr        defl    $
 609+ 7E55             >
 609+ 7E55             >//              ______________________________________________________________________
 609+ 7E55             >//              Heap part
 609+ 7E55             >
 609+ 7E55             >
 609+ 7E55             >                org     (Heap_Ptr & $1FFF) + $E000
 609+ EBE8             >
 609+ EBE8             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 609+ EBE8             >Latest_Definition defl  Heap_Ptr
 609+ EBE8             >
 609+ EBE8             >                // dummy db directives used to calculate length of namec
 609+ EBE8 23 53       >                db      "#S"
 609+ EBEA             >len_NFA         defl    $ - temp_NFA
 609+ EBEA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 609+ EBE8             >
 609+ EBE8 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 609+ EBE9 23 53       >                db      "#S"               // name string in 7-bit ascii, but
 609+ EBEB             >                org     $-1                 // alter last byte of Name just above to set
 609+ EBEA D3          >                db      {b $} | END_BIT     // msb as name end
 609+ EBEB             >
 609+ EBEB E2 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 609+ EBED             >Prev_Ptr        defl    Heap_Ptr
 609+ EBED             >
 609+ EBED             >mirror_Ptr      defl    $
 609+ EBED             >
 609+ EBED 57 7E       >                dw      Dict_Ptr + 2        // xt
 609+ EBEF             >Heap_Ptr        defl    $ - $E000           // save current HP
 609+ EBEF             >
 609+ EBEF             >Current_HP      defl  $ - $E000             // used to set HP once!
 609+ EBEF             >
 609+ EBEF             >//              ______________________________________________________________________
 609+ EBEF             >//              Dictionary part
 609+ EBEF             >
 609+ EBEF             >                org     Dict_Ptr
 609+ 7E55             >
 609+ 7E55 ED 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 609+ 7E57             >
 609+ 7E57             >DASHES:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 609+ 7E57 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 609+ 7E5A             >
 609+ 7E5A             >
 609+ 7E5A             >                endif           ; ok        // for other definitions it "points" the correct handler
 609+ 7E5A             >                // Use of "; ok" to suppress "warning[fwdref]"
 609+ 7E5A             >
 609+ 7E5A             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 610+ 7E5A              Dashes_Begin:
 611+ 7E5A 1E 7E 64 69                  dw      DASH, TWO_DUP
 612+ 7E5E 1A 68 76 68                  dw          OR_OP, ZEQUAL
 613+ 7E62 F3 63                        dw      ZBRANCH
 614+ 7E64 F6 FF                        dw      Dashes_Begin - $
 615+ 7E66 51 68                        dw      EXIT
 616+ 7E68
 617+ 7E68              //  ______________________________________________________________________
 618+ 7E68              //
 619+ 7E68              // d.r          d n --
 620+ 7E68                              Colon_Def D_DOT_R, "D.R", is_normal
 620+ 7E68             >                New_Def  D_DOT_R, "D.R", Enter_Ptr, is_normal ; ok
 620+ 7E68             >
 620+ 7E68             >Dict_Ptr        defl    $
 620+ 7E68             >
 620+ 7E68             >//              ______________________________________________________________________
 620+ 7E68             >//              Heap part
 620+ 7E68             >
 620+ 7E68             >
 620+ 7E68             >                org     (Heap_Ptr & $1FFF) + $E000
 620+ EBEF             >
 620+ EBEF             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 620+ EBEF             >Latest_Definition defl  Heap_Ptr
 620+ EBEF             >
 620+ EBEF             >                // dummy db directives used to calculate length of namec
 620+ EBEF 44 2E 52    >                db      "D.R"
 620+ EBF2             >len_NFA         defl    $ - temp_NFA
 620+ EBF2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 620+ EBEF             >
 620+ EBEF 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 620+ EBF0 44 2E 52    >                db      "D.R"               // name string in 7-bit ascii, but
 620+ EBF3             >                org     $-1                 // alter last byte of Name just above to set
 620+ EBF2 D2          >                db      {b $} | END_BIT     // msb as name end
 620+ EBF3             >
 620+ EBF3 E8 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 620+ EBF5             >Prev_Ptr        defl    Heap_Ptr
 620+ EBF5             >
 620+ EBF5             >mirror_Ptr      defl    $
 620+ EBF5             >
 620+ EBF5 6A 7E       >                dw      Dict_Ptr + 2        // xt
 620+ EBF7             >Heap_Ptr        defl    $ - $E000           // save current HP
 620+ EBF7             >
 620+ EBF7             >Current_HP      defl  $ - $E000             // used to set HP once!
 620+ EBF7             >
 620+ EBF7             >//              ______________________________________________________________________
 620+ EBF7             >//              Dictionary part
 620+ EBF7             >
 620+ EBF7             >                org     Dict_Ptr
 620+ 7E68             >
 620+ 7E68 F5 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 620+ 7E6A             >
 620+ 7E6A             >D_DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 620+ 7E6A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 620+ 7E6D             >
 620+ 7E6D             >
 620+ 7E6D             >                endif           ; ok        // for other definitions it "points" the correct handler
 620+ 7E6D             >                // Use of "; ok" to suppress "warning[fwdref]"
 620+ 7E6D             >
 620+ 7E6D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 621+ 7E6D 5B 68                        dw      TO_R
 622+ 7E6F 0C 69 85 76                  dw      TUCK, DABS
 623+ 7E73 EB 7D 57 7E                  dw      BEGIN_DASH, DASHES, ROT, SIGN, DASH_END
 623+ 7E77 23 69 0B 7E
 623+ 7E7B F8 7D
 624+ 7E7D 66 68                        dw      R_TO
 625+ 7E7F F8 68 DC 6B                  dw      OVER, SUBTRACT, SPACES, TYPE
 625+ 7E83 D4 7D 6A 6F
 626+ 7E87 51 68                        dw      EXIT
 627+ 7E89
 628+ 7E89              //  ______________________________________________________________________
 629+ 7E89              //
 630+ 7E89              // .r           n1 n2 --
 631+ 7E89                              Colon_Def DOT_R, ".R", is_normal
 631+ 7E89             >                New_Def  DOT_R, ".R", Enter_Ptr, is_normal ; ok
 631+ 7E89             >
 631+ 7E89             >Dict_Ptr        defl    $
 631+ 7E89             >
 631+ 7E89             >//              ______________________________________________________________________
 631+ 7E89             >//              Heap part
 631+ 7E89             >
 631+ 7E89             >
 631+ 7E89             >                org     (Heap_Ptr & $1FFF) + $E000
 631+ EBF7             >
 631+ EBF7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 631+ EBF7             >Latest_Definition defl  Heap_Ptr
 631+ EBF7             >
 631+ EBF7             >                // dummy db directives used to calculate length of namec
 631+ EBF7 2E 52       >                db      ".R"
 631+ EBF9             >len_NFA         defl    $ - temp_NFA
 631+ EBF9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 631+ EBF7             >
 631+ EBF7 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 631+ EBF8 2E 52       >                db      ".R"               // name string in 7-bit ascii, but
 631+ EBFA             >                org     $-1                 // alter last byte of Name just above to set
 631+ EBF9 D2          >                db      {b $} | END_BIT     // msb as name end
 631+ EBFA             >
 631+ EBFA EF 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 631+ EBFC             >Prev_Ptr        defl    Heap_Ptr
 631+ EBFC             >
 631+ EBFC             >mirror_Ptr      defl    $
 631+ EBFC             >
 631+ EBFC 8B 7E       >                dw      Dict_Ptr + 2        // xt
 631+ EBFE             >Heap_Ptr        defl    $ - $E000           // save current HP
 631+ EBFE             >
 631+ EBFE             >Current_HP      defl  $ - $E000             // used to set HP once!
 631+ EBFE             >
 631+ EBFE             >//              ______________________________________________________________________
 631+ EBFE             >//              Dictionary part
 631+ EBFE             >
 631+ EBFE             >                org     Dict_Ptr
 631+ 7E89             >
 631+ 7E89 FC 0B       >                dw      mirror_Ptr - $E000 + Heap_offset
 631+ 7E8B             >
 631+ 7E8B             >DOT_R:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 631+ 7E8B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 631+ 7E8E             >
 631+ 7E8E             >
 631+ 7E8E             >                endif           ; ok        // for other definitions it "points" the correct handler
 631+ 7E8E             >                // Use of "; ok" to suppress "warning[fwdref]"
 631+ 7E8E             >
 631+ 7E8E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 632+ 7E8E 5B 68                        dw      TO_R
 633+ 7E90 D1 6B 66 68                  dw      S_TO_D, R_TO
 634+ 7E94 6A 7E                        dw      D_DOT_R
 635+ 7E96 51 68                        dw      EXIT
 636+ 7E98
 637+ 7E98              //  ______________________________________________________________________
 638+ 7E98              //
 639+ 7E98              // d.           d --
 640+ 7E98                              Colon_Def D_DOT, "D.", is_normal
 640+ 7E98             >                New_Def  D_DOT, "D.", Enter_Ptr, is_normal ; ok
 640+ 7E98             >
 640+ 7E98             >Dict_Ptr        defl    $
 640+ 7E98             >
 640+ 7E98             >//              ______________________________________________________________________
 640+ 7E98             >//              Heap part
 640+ 7E98             >
 640+ 7E98             >
 640+ 7E98             >                org     (Heap_Ptr & $1FFF) + $E000
 640+ EBFE             >
 640+ EBFE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 640+ EBFE             >Latest_Definition defl  Heap_Ptr
 640+ EBFE             >
 640+ EBFE             >                // dummy db directives used to calculate length of namec
 640+ EBFE 44 2E       >                db      "D."
 640+ EC00             >len_NFA         defl    $ - temp_NFA
 640+ EC00             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 640+ EBFE             >
 640+ EBFE 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 640+ EBFF 44 2E       >                db      "D."               // name string in 7-bit ascii, but
 640+ EC01             >                org     $-1                 // alter last byte of Name just above to set
 640+ EC00 AE          >                db      {b $} | END_BIT     // msb as name end
 640+ EC01             >
 640+ EC01 F7 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 640+ EC03             >Prev_Ptr        defl    Heap_Ptr
 640+ EC03             >
 640+ EC03             >mirror_Ptr      defl    $
 640+ EC03             >
 640+ EC03 9A 7E       >                dw      Dict_Ptr + 2        // xt
 640+ EC05             >Heap_Ptr        defl    $ - $E000           // save current HP
 640+ EC05             >
 640+ EC05             >Current_HP      defl  $ - $E000             // used to set HP once!
 640+ EC05             >
 640+ EC05             >//              ______________________________________________________________________
 640+ EC05             >//              Dictionary part
 640+ EC05             >
 640+ EC05             >                org     Dict_Ptr
 640+ 7E98             >
 640+ 7E98 03 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 640+ 7E9A             >
 640+ 7E9A             >D_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 640+ 7E9A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 640+ 7E9D             >
 640+ 7E9D             >
 640+ 7E9D             >                endif           ; ok        // for other definitions it "points" the correct handler
 640+ 7E9D             >                // Use of "; ok" to suppress "warning[fwdref]"
 640+ 7E9D             >
 640+ 7E9D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 641+ 7E9D 78 6A 6A 7E                  dw      ZERO, D_DOT_R, SPACE
 641+ 7EA1 66 6C
 642+ 7EA3 51 68                        dw      EXIT
 643+ 7EA5
 644+ 7EA5              //  ______________________________________________________________________
 645+ 7EA5              //
 646+ 7EA5              // .            n --
 647+ 7EA5                              Colon_Def DOT, ".", is_normal
 647+ 7EA5             >                New_Def  DOT, ".", Enter_Ptr, is_normal ; ok
 647+ 7EA5             >
 647+ 7EA5             >Dict_Ptr        defl    $
 647+ 7EA5             >
 647+ 7EA5             >//              ______________________________________________________________________
 647+ 7EA5             >//              Heap part
 647+ 7EA5             >
 647+ 7EA5             >
 647+ 7EA5             >                org     (Heap_Ptr & $1FFF) + $E000
 647+ EC05             >
 647+ EC05             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 647+ EC05             >Latest_Definition defl  Heap_Ptr
 647+ EC05             >
 647+ EC05             >                // dummy db directives used to calculate length of namec
 647+ EC05 2E          >                db      "."
 647+ EC06             >len_NFA         defl    $ - temp_NFA
 647+ EC06             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 647+ EC05             >
 647+ EC05 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 647+ EC06 2E          >                db      "."               // name string in 7-bit ascii, but
 647+ EC07             >                org     $-1                 // alter last byte of Name just above to set
 647+ EC06 AE          >                db      {b $} | END_BIT     // msb as name end
 647+ EC07             >
 647+ EC07 FE 0B       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 647+ EC09             >Prev_Ptr        defl    Heap_Ptr
 647+ EC09             >
 647+ EC09             >mirror_Ptr      defl    $
 647+ EC09             >
 647+ EC09 A7 7E       >                dw      Dict_Ptr + 2        // xt
 647+ EC0B             >Heap_Ptr        defl    $ - $E000           // save current HP
 647+ EC0B             >
 647+ EC0B             >Current_HP      defl  $ - $E000             // used to set HP once!
 647+ EC0B             >
 647+ EC0B             >//              ______________________________________________________________________
 647+ EC0B             >//              Dictionary part
 647+ EC0B             >
 647+ EC0B             >                org     Dict_Ptr
 647+ 7EA5             >
 647+ 7EA5 09 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 647+ 7EA7             >
 647+ 7EA7             >DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 647+ 7EA7 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 647+ 7EAA             >
 647+ 7EAA             >
 647+ 7EAA             >                endif           ; ok        // for other definitions it "points" the correct handler
 647+ 7EAA             >                // Use of "; ok" to suppress "warning[fwdref]"
 647+ 7EAA             >
 647+ 7EAA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 648+ 7EAA D1 6B 9A 7E                  dw      S_TO_D, D_DOT
 649+ 7EAE 51 68                        dw      EXIT
 650+ 7EB0
 651+ 7EB0              //  ______________________________________________________________________
 652+ 7EB0              //
 653+ 7EB0              // ?            n --
 654+ 7EB0                              Colon_Def QUESTION, "?", is_normal
 654+ 7EB0             >                New_Def  QUESTION, "?", Enter_Ptr, is_normal ; ok
 654+ 7EB0             >
 654+ 7EB0             >Dict_Ptr        defl    $
 654+ 7EB0             >
 654+ 7EB0             >//              ______________________________________________________________________
 654+ 7EB0             >//              Heap part
 654+ 7EB0             >
 654+ 7EB0             >
 654+ 7EB0             >                org     (Heap_Ptr & $1FFF) + $E000
 654+ EC0B             >
 654+ EC0B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 654+ EC0B             >Latest_Definition defl  Heap_Ptr
 654+ EC0B             >
 654+ EC0B             >                // dummy db directives used to calculate length of namec
 654+ EC0B 3F          >                db      "?"
 654+ EC0C             >len_NFA         defl    $ - temp_NFA
 654+ EC0C             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 654+ EC0B             >
 654+ EC0B 81          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 654+ EC0C 3F          >                db      "?"               // name string in 7-bit ascii, but
 654+ EC0D             >                org     $-1                 // alter last byte of Name just above to set
 654+ EC0C BF          >                db      {b $} | END_BIT     // msb as name end
 654+ EC0D             >
 654+ EC0D 05 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 654+ EC0F             >Prev_Ptr        defl    Heap_Ptr
 654+ EC0F             >
 654+ EC0F             >mirror_Ptr      defl    $
 654+ EC0F             >
 654+ EC0F B2 7E       >                dw      Dict_Ptr + 2        // xt
 654+ EC11             >Heap_Ptr        defl    $ - $E000           // save current HP
 654+ EC11             >
 654+ EC11             >Current_HP      defl  $ - $E000             // used to set HP once!
 654+ EC11             >
 654+ EC11             >//              ______________________________________________________________________
 654+ EC11             >//              Dictionary part
 654+ EC11             >
 654+ EC11             >                org     Dict_Ptr
 654+ 7EB0             >
 654+ 7EB0 0F 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 654+ 7EB2             >
 654+ 7EB2             >QUESTION:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 654+ 7EB2 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 654+ 7EB5             >
 654+ 7EB5             >
 654+ 7EB5             >                endif           ; ok        // for other definitions it "points" the correct handler
 654+ 7EB5             >                // Use of "; ok" to suppress "warning[fwdref]"
 654+ 7EB5             >
 654+ 7EB5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 655+ 7EB5 86 69 A7 7E                  dw      FETCH, DOT
 656+ 7EB9 51 68                        dw      EXIT
 657+ 7EBB
 658+ 7EBB              //  ______________________________________________________________________
 659+ 7EBB              //
 660+ 7EBB              // u.           u --
 661+ 7EBB                              Colon_Def U_DOT, "U.", is_normal
 661+ 7EBB             >                New_Def  U_DOT, "U.", Enter_Ptr, is_normal ; ok
 661+ 7EBB             >
 661+ 7EBB             >Dict_Ptr        defl    $
 661+ 7EBB             >
 661+ 7EBB             >//              ______________________________________________________________________
 661+ 7EBB             >//              Heap part
 661+ 7EBB             >
 661+ 7EBB             >
 661+ 7EBB             >                org     (Heap_Ptr & $1FFF) + $E000
 661+ EC11             >
 661+ EC11             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 661+ EC11             >Latest_Definition defl  Heap_Ptr
 661+ EC11             >
 661+ EC11             >                // dummy db directives used to calculate length of namec
 661+ EC11 55 2E       >                db      "U."
 661+ EC13             >len_NFA         defl    $ - temp_NFA
 661+ EC13             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 661+ EC11             >
 661+ EC11 82          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 661+ EC12 55 2E       >                db      "U."               // name string in 7-bit ascii, but
 661+ EC14             >                org     $-1                 // alter last byte of Name just above to set
 661+ EC13 AE          >                db      {b $} | END_BIT     // msb as name end
 661+ EC14             >
 661+ EC14 0B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 661+ EC16             >Prev_Ptr        defl    Heap_Ptr
 661+ EC16             >
 661+ EC16             >mirror_Ptr      defl    $
 661+ EC16             >
 661+ EC16 BD 7E       >                dw      Dict_Ptr + 2        // xt
 661+ EC18             >Heap_Ptr        defl    $ - $E000           // save current HP
 661+ EC18             >
 661+ EC18             >Current_HP      defl  $ - $E000             // used to set HP once!
 661+ EC18             >
 661+ EC18             >//              ______________________________________________________________________
 661+ EC18             >//              Dictionary part
 661+ EC18             >
 661+ EC18             >                org     Dict_Ptr
 661+ 7EBB             >
 661+ 7EBB 16 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 661+ 7EBD             >
 661+ 7EBD             >U_DOT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 661+ 7EBD CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 661+ 7EC0             >
 661+ 7EC0             >
 661+ 7EC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 661+ 7EC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 661+ 7EC0             >
 661+ 7EC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 662+ 7EC0 78 6A 9A 7E                  dw      ZERO, D_DOT
 663+ 7EC4 51 68                        dw      EXIT
 664+ 7EC6
 665+ 7EC6              //  ______________________________________________________________________
 666+ 7EC6              //
 667+ 7EC6              // words        --
 668+ 7EC6                              Colon_Def WORDS, "WORDS", is_normal
 668+ 7EC6             >                New_Def  WORDS, "WORDS", Enter_Ptr, is_normal ; ok
 668+ 7EC6             >
 668+ 7EC6             >Dict_Ptr        defl    $
 668+ 7EC6             >
 668+ 7EC6             >//              ______________________________________________________________________
 668+ 7EC6             >//              Heap part
 668+ 7EC6             >
 668+ 7EC6             >
 668+ 7EC6             >                org     (Heap_Ptr & $1FFF) + $E000
 668+ EC18             >
 668+ EC18             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 668+ EC18             >Latest_Definition defl  Heap_Ptr
 668+ EC18             >
 668+ EC18             >                // dummy db directives used to calculate length of namec
 668+ EC18 57 4F 52 44 >                db      "WORDS"
 668+ EC1C 53          >
 668+ EC1D             >len_NFA         defl    $ - temp_NFA
 668+ EC1D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 668+ EC18             >
 668+ EC18 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 668+ EC19 57 4F 52 44 >                db      "WORDS"               // name string in 7-bit ascii, but
 668+ EC1D 53          >
 668+ EC1E             >                org     $-1                 // alter last byte of Name just above to set
 668+ EC1D D3          >                db      {b $} | END_BIT     // msb as name end
 668+ EC1E             >
 668+ EC1E 11 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 668+ EC20             >Prev_Ptr        defl    Heap_Ptr
 668+ EC20             >
 668+ EC20             >mirror_Ptr      defl    $
 668+ EC20             >
 668+ EC20 C8 7E       >                dw      Dict_Ptr + 2        // xt
 668+ EC22             >Heap_Ptr        defl    $ - $E000           // save current HP
 668+ EC22             >
 668+ EC22             >Current_HP      defl  $ - $E000             // used to set HP once!
 668+ EC22             >
 668+ EC22             >//              ______________________________________________________________________
 668+ EC22             >//              Dictionary part
 668+ EC22             >
 668+ EC22             >                org     Dict_Ptr
 668+ 7EC6             >
 668+ 7EC6 20 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 668+ 7EC8             >
 668+ 7EC8             >WORDS:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 668+ 7EC8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 668+ 7ECB             >
 668+ 7ECB             >
 668+ 7ECB             >                endif           ; ok        // for other definitions it "points" the correct handler
 668+ 7ECB             >                // Use of "; ok" to suppress "warning[fwdref]"
 668+ 7ECB             >
 668+ 7ECB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 669+ 7ECB A3 63 80 00                  dw      LIT, 128, OUT, STORE
 669+ 7ECF 25 6B 90 69
 670+ 7ED3 37 6B 86 69                  dw      CONTEXT, FETCH, FETCH
 670+ 7ED7 86 69
 671+ 7ED9              Words_Begin:
 672+ 7ED9 D7 6C                        dw          FAR // Q TO HEAP
 673+ 7EDB 1C 69 9B 69                  dw          DUP, CFETCH, LIT, $1F, AND_OP
 673+ 7EDF A3 63 1F 00
 673+ 7EE3 0B 68
 674+ 7EE5 25 6B 86 69                  dw          OUT, FETCH, PLUS
 674+ 7EE9 9E 68
 675+ 7EEB A2 6A 01 6C                  dw          CL, LESS, ZEQUAL
 675+ 7EEF 76 68
 676+ 7EF1 F3 63                        dw          ZBRANCH
 677+ 7EF3 0A 00                        dw          Words_Endif - $
 678+ 7EF5 AF 65 78 6A                  dw              CR, ZERO, OUT, STORE
 678+ 7EF9 25 6B 90 69
 679+ 7EFD              Words_Endif:
 680+ 7EFD 1C 69 4C 73                  dw          DUP, ID_DOT
 681+ 7F01 7F 6A 71 6C                  dw          ONE, TRAVERSE, ONE_PLUS, FETCH
 681+ 7F05 B7 68 86 69
 682+ 7F09 1C 69 76 68                  dw          DUP, ZEQUAL
 683+ 7F0D A6 66 1A 68                  dw          QTERMINAL, OR_OP
 684+ 7F11 F3 63                        dw      ZBRANCH
 685+ 7F13 C6 FF                        dw      Words_Begin - $
 686+ 7F15 01 69                        dw      DROP
 687+ 7F17 51 68                        dw      EXIT
 688+ 7F19
 689+ 7F19              //  ______________________________________________________________________
 690+ 7F19              //
 691+ 7F19              // list         n --
 692+ 7F19                              Colon_Def LIST, "LIST", is_normal
 692+ 7F19             >                New_Def  LIST, "LIST", Enter_Ptr, is_normal ; ok
 692+ 7F19             >
 692+ 7F19             >Dict_Ptr        defl    $
 692+ 7F19             >
 692+ 7F19             >//              ______________________________________________________________________
 692+ 7F19             >//              Heap part
 692+ 7F19             >
 692+ 7F19             >
 692+ 7F19             >                org     (Heap_Ptr & $1FFF) + $E000
 692+ EC22             >
 692+ EC22             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 692+ EC22             >Latest_Definition defl  Heap_Ptr
 692+ EC22             >
 692+ EC22             >                // dummy db directives used to calculate length of namec
 692+ EC22 4C 49 53 54 >                db      "LIST"
 692+ EC26             >len_NFA         defl    $ - temp_NFA
 692+ EC26             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 692+ EC22             >
 692+ EC22 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 692+ EC23 4C 49 53 54 >                db      "LIST"               // name string in 7-bit ascii, but
 692+ EC27             >                org     $-1                 // alter last byte of Name just above to set
 692+ EC26 D4          >                db      {b $} | END_BIT     // msb as name end
 692+ EC27             >
 692+ EC27 18 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 692+ EC29             >Prev_Ptr        defl    Heap_Ptr
 692+ EC29             >
 692+ EC29             >mirror_Ptr      defl    $
 692+ EC29             >
 692+ EC29 1B 7F       >                dw      Dict_Ptr + 2        // xt
 692+ EC2B             >Heap_Ptr        defl    $ - $E000           // save current HP
 692+ EC2B             >
 692+ EC2B             >Current_HP      defl  $ - $E000             // used to set HP once!
 692+ EC2B             >
 692+ EC2B             >//              ______________________________________________________________________
 692+ EC2B             >//              Dictionary part
 692+ EC2B             >
 692+ EC2B             >                org     Dict_Ptr
 692+ 7F19             >
 692+ 7F19 29 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 692+ 7F1B             >
 692+ 7F1B             >LIST:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 692+ 7F1B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 692+ 7F1E             >
 692+ 7F1E             >
 692+ 7F1E             >                endif           ; ok        // for other definitions it "points" the correct handler
 692+ 7F1E             >                // Use of "; ok" to suppress "warning[fwdref]"
 692+ 7F1E             >
 692+ 7F1E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 693+ 7F1E A8 6E AF 65                  dw      DECIMAL, CR
 694+ 7F22 1C 69 2B 6B                  dw      DUP, SCR, STORE
 694+ 7F26 90 69
 695+ 7F28 07 71                        dw      C_DOT_QUOTE
 696+ 7F2A 05 53 63 72                  db      5, "Scr# "
 696+ 7F2E 23 20
 697+ 7F30 A7 7E                        dw      DOT
 698+ 7F32 B7 6A 78 6A                  dw      LSCR, ZERO, C_DO
 698+ 7F36 2E 64
 699+ 7F38              List_Loop:
 700+ 7F38 AF 65                        dw          CR
 701+ 7F3A 34 64 8D 6A                  dw          I, THREE
 702+ 7F3E 8B 7E 66 6C                  dw          DOT_R, SPACE
 703+ 7F42 34 64 2B 6B                  dw          I, SCR, FETCH, DOT_LINE
 703+ 7F46 86 69 80 77
 704+ 7F4A A6 66                        dw          QTERMINAL
 705+ 7F4C F3 63                        dw          ZBRANCH
 706+ 7F4E 06 00                        dw          List_Endif - $
 707+ 7F50 FC 63                        dw              C_LEAVE
 708+ 7F52 06 00                        dw              List_Leave - $
 709+ 7F54              List_Endif:
 710+ 7F54 E7 63                        dw      C_LOOP
 711+ 7F56 E2 FF                        dw      List_Loop - $
 712+ 7F58              List_Leave:
 713+ 7F58 AF 65                        dw      CR
 714+ 7F5A 51 68                        dw      EXIT
 715+ 7F5C
 716+ 7F5C              //  ______________________________________________________________________
 717+ 7F5C              //
 718+ 7F5C              // index        n1 n2 --
 719+ 7F5C                              Colon_Def INDEX, "INDEX", is_normal
 719+ 7F5C             >                New_Def  INDEX, "INDEX", Enter_Ptr, is_normal ; ok
 719+ 7F5C             >
 719+ 7F5C             >Dict_Ptr        defl    $
 719+ 7F5C             >
 719+ 7F5C             >//              ______________________________________________________________________
 719+ 7F5C             >//              Heap part
 719+ 7F5C             >
 719+ 7F5C             >
 719+ 7F5C             >                org     (Heap_Ptr & $1FFF) + $E000
 719+ EC2B             >
 719+ EC2B             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 719+ EC2B             >Latest_Definition defl  Heap_Ptr
 719+ EC2B             >
 719+ EC2B             >                // dummy db directives used to calculate length of namec
 719+ EC2B 49 4E 44 45 >                db      "INDEX"
 719+ EC2F 58          >
 719+ EC30             >len_NFA         defl    $ - temp_NFA
 719+ EC30             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 719+ EC2B             >
 719+ EC2B 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 719+ EC2C 49 4E 44 45 >                db      "INDEX"               // name string in 7-bit ascii, but
 719+ EC30 58          >
 719+ EC31             >                org     $-1                 // alter last byte of Name just above to set
 719+ EC30 D8          >                db      {b $} | END_BIT     // msb as name end
 719+ EC31             >
 719+ EC31 22 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 719+ EC33             >Prev_Ptr        defl    Heap_Ptr
 719+ EC33             >
 719+ EC33             >mirror_Ptr      defl    $
 719+ EC33             >
 719+ EC33 5E 7F       >                dw      Dict_Ptr + 2        // xt
 719+ EC35             >Heap_Ptr        defl    $ - $E000           // save current HP
 719+ EC35             >
 719+ EC35             >Current_HP      defl  $ - $E000             // used to set HP once!
 719+ EC35             >
 719+ EC35             >//              ______________________________________________________________________
 719+ EC35             >//              Dictionary part
 719+ EC35             >
 719+ EC35             >                org     Dict_Ptr
 719+ 7F5C             >
 719+ 7F5C 33 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 719+ 7F5E             >
 719+ 7F5E             >INDEX:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 719+ 7F5E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 719+ 7F61             >
 719+ 7F61             >
 719+ 7F61             >                endif           ; ok        // for other definitions it "points" the correct handler
 719+ 7F61             >                // Use of "; ok" to suppress "warning[fwdref]"
 719+ 7F61             >
 719+ 7F61             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 720+ 7F61 B7 68 15 69                  dw      ONE_PLUS, SWAP, C_DO
 720+ 7F65 2E 64
 721+ 7F67              Index_Loop:
 722+ 7F67 AF 65 34 64                  dw          CR, I, THREE
 722+ 7F6B 8D 6A
 723+ 7F6D 8B 7E 66 6C                  dw          DOT_R, SPACE
 724+ 7F71 78 6A 34 64                  dw          ZERO, I, DOT_LINE
 724+ 7F75 80 77
 725+ 7F77 A6 66                        dw          QTERMINAL
 726+ 7F79 F3 63                        dw          ZBRANCH
 727+ 7F7B 06 00                        dw          Index_Endif - $
 728+ 7F7D FC 63                        dw              C_LEAVE
 729+ 7F7F 06 00                        dw              Index_Leave - $
 730+ 7F81              Index_Endif:
 731+ 7F81 E7 63                        dw      C_LOOP
 732+ 7F83 E4 FF                        dw      Index_Loop - $
 733+ 7F85              Index_Leave:
 734+ 7F85 AF 65                        dw      CR
 735+ 7F87 51 68                        dw      EXIT
 736+ 7F89
 737+ 7F89              //  ______________________________________________________________________
 738+ 7F89              //
 739+ 7F89              // cls          --
 740+ 7F89
 741+ 7F89              //              Colon_Def CLS, "CLS", is_normal
 742+ 7F89              //              dw      LIT, $0E, EMITC
 743+ 7F89              //              dw      EXIT
 744+ 7F89
 745+ 7F89                              New_Def CLS, "CLS", is_code, is_normal
 745+ 7F89             >
 745+ 7F89             >Dict_Ptr        defl    $
 745+ 7F89             >
 745+ 7F89             >//              ______________________________________________________________________
 745+ 7F89             >//              Heap part
 745+ 7F89             >
 745+ 7F89             >
 745+ 7F89             >                org     (Heap_Ptr & $1FFF) + $E000
 745+ EC35             >
 745+ EC35             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 745+ EC35             >Latest_Definition defl  Heap_Ptr
 745+ EC35             >
 745+ EC35             >                // dummy db directives used to calculate length of namec
 745+ EC35 43 4C 53    >                db      "CLS"
 745+ EC38             >len_NFA         defl    $ - temp_NFA
 745+ EC38             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 745+ EC35             >
 745+ EC35 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 745+ EC36 43 4C 53    >                db      "CLS"               // name string in 7-bit ascii, but
 745+ EC39             >                org     $-1                 // alter last byte of Name just above to set
 745+ EC38 D3          >                db      {b $} | END_BIT     // msb as name end
 745+ EC39             >
 745+ EC39 2B 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 745+ EC3B             >Prev_Ptr        defl    Heap_Ptr
 745+ EC3B             >
 745+ EC3B             >mirror_Ptr      defl    $
 745+ EC3B             >
 745+ EC3B 8B 7F       >                dw      Dict_Ptr + 2        // xt
 745+ EC3D             >Heap_Ptr        defl    $ - $E000           // save current HP
 745+ EC3D             >
 745+ EC3D             >Current_HP      defl  $ - $E000             // used to set HP once!
 745+ EC3D             >
 745+ EC3D             >//              ______________________________________________________________________
 745+ EC3D             >//              Dictionary part
 745+ EC3D             >
 745+ EC3D             >                org     Dict_Ptr
 745+ 7F89             >
 745+ 7F89 3B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 745+ 7F8B             >
 745+ 7F8B             >CLS:          if is_code != 0 ; ok        // This is the start address of the direct jp(hl)
 745+ 7F8B ~           >                call    runcode ; ok        // for primitive definitions  actual code
 745+ 7F8B ~           >
 745+ 7F8B ~           >
 745+ 7F8B             >                endif           ; ok        // for other definitions it "points" the correct handler
 745+ 7F8B             >                // Use of "; ok" to suppress "warning[fwdref]"
 745+ 7F8B             >
 745+ 7F8B             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 746+ 7F8B C5                           push    bc
 747+ 7F8C D5                           push    de
 748+ 7F8D DD E5                        push    ix
 749+ 7F8F 11 D5 01                     ld      de, $01D5   // on success set carry-flag
 750+ 7F92 0E 07                        ld      c, 7        // necessary to call M_P3DOS
 751+ 7F94 AF                           xor     a           // query current status
 752+ 7F95 CF                           rst     8
 753+ 7F96 94                           db      $94         // carry flag set on success
 754+ 7F97 A7                           and     a
 755+ 7F98 20 05                        jr      nz, CLS_No_Layer_0
 756+ 7F9A CD AF 0D                       call    $0DAF
 757+ 7F9D 18 03                        jr      CLS_Layer_0
 758+ 7F9F              CLS_No_Layer_0:
 759+ 7F9F 3E 0E                          ld      a, $0E
 760+ 7FA1 D7                             rst     $10
 761+ 7FA2              CLS_Layer_0:
 762+ 7FA2 DD E1                        pop     ix
 763+ 7FA4 D1                           pop     de
 764+ 7FA5 C1                           pop     bc
 765+ 7FA6                              next
 765+ 7FA6 DD E9       >                jp      (ix)
 766+ 7FA8
 767+ 7FA8              //  ______________________________________________________________________
 768+ 7FA8              //
 769+ 7FA8              // splash       --
 770+ 7FA8              //              Colon_Def SPLASH, "SPLASH", is_normal
 771+ 7FA8              //              dw      CLS
 772+ 7FA8              //              dw      C_DOT_QUOTE
 773+ 7FA8              //              db      87
 774+ 7FA8              //              db      "v-Forth 1.8 NextZXOS version", 13    // 29
 775+ 7FA8              //              db      "Heap Vocabulary - build 20240922", 13  // 33
 776+ 7FA8              //              db      "1990-2024 Matteo Vitturi", 13        // 25
 777+ 7FA8              //              dw      EXIT
 778+ 7FA8
 779+ 7FA8              //  ______________________________________________________________________
 780+ 7FA8              //
 781+ 7FA8              // splash       --
 782+ 7FA8                              Colon_Def SPLASH, "SPLASH", is_normal
 782+ 7FA8             >                New_Def  SPLASH, "SPLASH", Enter_Ptr, is_normal ; ok
 782+ 7FA8             >
 782+ 7FA8             >Dict_Ptr        defl    $
 782+ 7FA8             >
 782+ 7FA8             >//              ______________________________________________________________________
 782+ 7FA8             >//              Heap part
 782+ 7FA8             >
 782+ 7FA8             >
 782+ 7FA8             >                org     (Heap_Ptr & $1FFF) + $E000
 782+ EC3D             >
 782+ EC3D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 782+ EC3D             >Latest_Definition defl  Heap_Ptr
 782+ EC3D             >
 782+ EC3D             >                // dummy db directives used to calculate length of namec
 782+ EC3D 53 50 4C 41 >                db      "SPLASH"
 782+ EC41 53 48       >
 782+ EC43             >len_NFA         defl    $ - temp_NFA
 782+ EC43             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 782+ EC3D             >
 782+ EC3D 86          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 782+ EC3E 53 50 4C 41 >                db      "SPLASH"               // name string in 7-bit ascii, but
 782+ EC42 53 48       >
 782+ EC44             >                org     $-1                 // alter last byte of Name just above to set
 782+ EC43 C8          >                db      {b $} | END_BIT     // msb as name end
 782+ EC44             >
 782+ EC44 35 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 782+ EC46             >Prev_Ptr        defl    Heap_Ptr
 782+ EC46             >
 782+ EC46             >mirror_Ptr      defl    $
 782+ EC46             >
 782+ EC46 AA 7F       >                dw      Dict_Ptr + 2        // xt
 782+ EC48             >Heap_Ptr        defl    $ - $E000           // save current HP
 782+ EC48             >
 782+ EC48             >Current_HP      defl  $ - $E000             // used to set HP once!
 782+ EC48             >
 782+ EC48             >//              ______________________________________________________________________
 782+ EC48             >//              Dictionary part
 782+ EC48             >
 782+ EC48             >                org     Dict_Ptr
 782+ 7FA8             >
 782+ 7FA8 46 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 782+ 7FAA             >
 782+ 7FAA             >SPLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 782+ 7FAA CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 782+ 7FAD             >
 782+ 7FAD             >
 782+ 7FAD             >                endif           ; ok        // for other definitions it "points" the correct handler
 782+ 7FAD             >                // Use of "; ok" to suppress "warning[fwdref]"
 782+ 7FAD             >
 782+ 7FAD             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 783+ 7FAD 8B 7F                        dw      CLS
 784+ 7FAF A3 63 02 00                  dw      LIT, Splash_Ptr
 785+ 7FB3 D7 6C                        dw      FAR
 786+ 7FB5 16 6F 6A 6F                  dw      COUNT, TYPE
 787+ 7FB9 51 68                        dw      EXIT
 788+ 7FBB
 789+ 7FBB              //  ______________________________________________________________________
 790+ 7FBB              //
 791+ 7FBB              // video        --
 792+ 7FBB                              Colon_Def VIDEO, "VIDEO", is_normal
 792+ 7FBB             >                New_Def  VIDEO, "VIDEO", Enter_Ptr, is_normal ; ok
 792+ 7FBB             >
 792+ 7FBB             >Dict_Ptr        defl    $
 792+ 7FBB             >
 792+ 7FBB             >//              ______________________________________________________________________
 792+ 7FBB             >//              Heap part
 792+ 7FBB             >
 792+ 7FBB             >
 792+ 7FBB             >                org     (Heap_Ptr & $1FFF) + $E000
 792+ EC48             >
 792+ EC48             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 792+ EC48             >Latest_Definition defl  Heap_Ptr
 792+ EC48             >
 792+ EC48             >                // dummy db directives used to calculate length of namec
 792+ EC48 56 49 44 45 >                db      "VIDEO"
 792+ EC4C 4F          >
 792+ EC4D             >len_NFA         defl    $ - temp_NFA
 792+ EC4D             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 792+ EC48             >
 792+ EC48 85          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 792+ EC49 56 49 44 45 >                db      "VIDEO"               // name string in 7-bit ascii, but
 792+ EC4D 4F          >
 792+ EC4E             >                org     $-1                 // alter last byte of Name just above to set
 792+ EC4D CF          >                db      {b $} | END_BIT     // msb as name end
 792+ EC4E             >
 792+ EC4E 3D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 792+ EC50             >Prev_Ptr        defl    Heap_Ptr
 792+ EC50             >
 792+ EC50             >mirror_Ptr      defl    $
 792+ EC50             >
 792+ EC50 BD 7F       >                dw      Dict_Ptr + 2        // xt
 792+ EC52             >Heap_Ptr        defl    $ - $E000           // save current HP
 792+ EC52             >
 792+ EC52             >Current_HP      defl  $ - $E000             // used to set HP once!
 792+ EC52             >
 792+ EC52             >//              ______________________________________________________________________
 792+ EC52             >//              Dictionary part
 792+ EC52             >
 792+ EC52             >                org     Dict_Ptr
 792+ 7FBB             >
 792+ 7FBB 50 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 792+ 7FBD             >
 792+ 7FBD             >VIDEO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 792+ 7FBD CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 792+ 7FC0             >
 792+ 7FC0             >
 792+ 7FC0             >                endif           ; ok        // for other definitions it "points" the correct handler
 792+ 7FC0             >                // Use of "; ok" to suppress "warning[fwdref]"
 792+ 7FC0             >
 792+ 7FC0             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 793+ 7FC0 86 6A 1C 69                  dw      TWO, DUP, DEVICE, STORE
 793+ 7FC4 B5 77 90 69
 794+ 7FC8 BA 66                        dw      SELECT
 795+ 7FCA 51 68                        dw      EXIT
 796+ 7FCC
 797+ 7FCC              //  ______________________________________________________________________
 798+ 7FCC              //
 799+ 7FCC              // autoexec     --
 800+ 7FCC              // this word is called the first time the Forth system boot to
 801+ 7FCC              // load Screen# 1. Once called it patches itself to prevent furhter runs.
 802+ 7FCC                              Colon_Def AUTOEXEC, "AUTOEXEC", is_normal
 802+ 7FCC             >                New_Def  AUTOEXEC, "AUTOEXEC", Enter_Ptr, is_normal ; ok
 802+ 7FCC             >
 802+ 7FCC             >Dict_Ptr        defl    $
 802+ 7FCC             >
 802+ 7FCC             >//              ______________________________________________________________________
 802+ 7FCC             >//              Heap part
 802+ 7FCC             >
 802+ 7FCC             >
 802+ 7FCC             >                org     (Heap_Ptr & $1FFF) + $E000
 802+ EC52             >
 802+ EC52             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 802+ EC52             >Latest_Definition defl  Heap_Ptr
 802+ EC52             >
 802+ EC52             >                // dummy db directives used to calculate length of namec
 802+ EC52 41 55 54 4F >                db      "AUTOEXEC"
 802+ EC56 45 58 45 43 >
 802+ EC5A             >len_NFA         defl    $ - temp_NFA
 802+ EC5A             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 802+ EC52             >
 802+ EC52 88          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 802+ EC53 41 55 54 4F >                db      "AUTOEXEC"               // name string in 7-bit ascii, but
 802+ EC57 45 58 45 43 >
 802+ EC5B             >                org     $-1                 // alter last byte of Name just above to set
 802+ EC5A C3          >                db      {b $} | END_BIT     // msb as name end
 802+ EC5B             >
 802+ EC5B 48 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 802+ EC5D             >Prev_Ptr        defl    Heap_Ptr
 802+ EC5D             >
 802+ EC5D             >mirror_Ptr      defl    $
 802+ EC5D             >
 802+ EC5D CE 7F       >                dw      Dict_Ptr + 2        // xt
 802+ EC5F             >Heap_Ptr        defl    $ - $E000           // save current HP
 802+ EC5F             >
 802+ EC5F             >Current_HP      defl  $ - $E000             // used to set HP once!
 802+ EC5F             >
 802+ EC5F             >//              ______________________________________________________________________
 802+ EC5F             >//              Dictionary part
 802+ EC5F             >
 802+ EC5F             >                org     Dict_Ptr
 802+ 7FCC             >
 802+ 7FCC 5D 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 802+ 7FCE             >
 802+ 7FCE             >AUTOEXEC:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 802+ 7FCE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 802+ 7FD1             >
 802+ 7FD1             >
 802+ 7FD1             >                endif           ; ok        // for other definitions it "points" the correct handler
 802+ 7FD1             >                // Use of "; ok" to suppress "warning[fwdref]"
 802+ 7FD1             >
 802+ 7FD1             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 803+ 7FD1 A3 63 0B 00                  dw      LIT, 11
 804+ 7FD5 A3 63 3F 6A                  dw      LIT, NOOP
 805+ 7FD9 A3 63 BC 75                  dw      LIT, Autoexec_Ptr
 806+ 7FDD 90 69                        dw      STORE
 807+ 7FDF BE 7C                        dw      LOAD
 808+ 7FE1 63 75                        dw      QUIT
 809+ 7FE3 51 68                        dw      EXIT
 810+ 7FE5
 811+ 7FE5
 812+ 7FE5              //  ______________________________________________________________________
 813+ 7FE5              //
 814+ 7FE5              // bye     --
 815+ 7FE5              //
 816+ 7FE5                              Colon_Def BYE, "BYE", is_normal
 816+ 7FE5             >                New_Def  BYE, "BYE", Enter_Ptr, is_normal ; ok
 816+ 7FE5             >
 816+ 7FE5             >Dict_Ptr        defl    $
 816+ 7FE5             >
 816+ 7FE5             >//              ______________________________________________________________________
 816+ 7FE5             >//              Heap part
 816+ 7FE5             >
 816+ 7FE5             >
 816+ 7FE5             >                org     (Heap_Ptr & $1FFF) + $E000
 816+ EC5F             >
 816+ EC5F             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 816+ EC5F             >Latest_Definition defl  Heap_Ptr
 816+ EC5F             >
 816+ EC5F             >                // dummy db directives used to calculate length of namec
 816+ EC5F 42 59 45    >                db      "BYE"
 816+ EC62             >len_NFA         defl    $ - temp_NFA
 816+ EC62             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 816+ EC5F             >
 816+ EC5F 83          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 816+ EC60 42 59 45    >                db      "BYE"               // name string in 7-bit ascii, but
 816+ EC63             >                org     $-1                 // alter last byte of Name just above to set
 816+ EC62 C5          >                db      {b $} | END_BIT     // msb as name end
 816+ EC63             >
 816+ EC63 52 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 816+ EC65             >Prev_Ptr        defl    Heap_Ptr
 816+ EC65             >
 816+ EC65             >mirror_Ptr      defl    $
 816+ EC65             >
 816+ EC65 E7 7F       >                dw      Dict_Ptr + 2        // xt
 816+ EC67             >Heap_Ptr        defl    $ - $E000           // save current HP
 816+ EC67             >
 816+ EC67             >Current_HP      defl  $ - $E000             // used to set HP once!
 816+ EC67             >
 816+ EC67             >//              ______________________________________________________________________
 816+ EC67             >//              Dictionary part
 816+ EC67             >
 816+ EC67             >                org     Dict_Ptr
 816+ 7FE5             >
 816+ 7FE5 65 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 816+ 7FE7             >
 816+ 7FE7             >BYE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 816+ 7FE7 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 816+ 7FEA             >
 816+ 7FEA             >
 816+ 7FEA             >                endif           ; ok        // for other definitions it "points" the correct handler
 816+ 7FEA             >                // Use of "; ok" to suppress "warning[fwdref]"
 816+ 7FEA             >
 816+ 7FEA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 817+ 7FEA D0 79                        dw      FLUSH
 818+ 7FEC 1E 79                        dw      EMPTY_BUFFERS
 819+ 7FEE 0A 78 86 69                  dw      BLK_FH, FETCH, F_CLOSE, DROP
 819+ 7FF2 F4 66 01 69
 820+ 7FF6 78 6A BE 6A                  dw      ZERO, PLUS_ORIGIN
 821+ 7FFA 4A 76                        dw      BASIC
 822+ 7FFC
 823+ 7FFC              //  ______________________________________________________________________
 824+ 7FFC              //
 825+ 7FFC              // invv     --
 826+ 7FFC              //
 827+ 7FFC              //              Colon_Def INVV, "INVV", is_normal
 828+ 7FFC              //              dw      LIT, 20, EMITC, ONE, EMITC
 829+ 7FFC              //              dw      EXIT
 830+ 7FFC
 831+ 7FFC              //  ______________________________________________________________________
 832+ 7FFC              //
 833+ 7FFC              // truv     --
 834+ 7FFC              //
 835+ 7FFC              //              Colon_Def TRUV, "TRUV", is_normal
 836+ 7FFC              //              dw      LIT, 20, EMITC, ZERO, EMITC
 837+ 7FFC              //              dw      EXIT
 838+ 7FFC
 839+ 7FFC              //  ______________________________________________________________________
 840+ 7FFC              //
 841+ 7FFC              // mark     --
 842+ 7FFC              //
 843+ 7FFC              //              Colon_Def MARK, "MARK", is_normal
 844+ 7FFC              //              dw      INVV, TYPE, TRUV
 845+ 7FFC              //              dw      EXIT
 846+ 7FFC
 847+ 7FFC              //  ______________________________________________________________________
 848+ 7FFC              //
 849+ 7FFC              // back     --
 850+ 7FFC              //
 851+ 7FFC                              Colon_Def BACK, "BACK", is_normal
 851+ 7FFC             >                New_Def  BACK, "BACK", Enter_Ptr, is_normal ; ok
 851+ 7FFC             >
 851+ 7FFC             >Dict_Ptr        defl    $
 851+ 7FFC             >
 851+ 7FFC             >//              ______________________________________________________________________
 851+ 7FFC             >//              Heap part
 851+ 7FFC             >
 851+ 7FFC             >
 851+ 7FFC             >                org     (Heap_Ptr & $1FFF) + $E000
 851+ EC67             >
 851+ EC67             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 851+ EC67             >Latest_Definition defl  Heap_Ptr
 851+ EC67             >
 851+ EC67             >                // dummy db directives used to calculate length of namec
 851+ EC67 42 41 43 4B >                db      "BACK"
 851+ EC6B             >len_NFA         defl    $ - temp_NFA
 851+ EC6B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 851+ EC67             >
 851+ EC67 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 851+ EC68 42 41 43 4B >                db      "BACK"               // name string in 7-bit ascii, but
 851+ EC6C             >                org     $-1                 // alter last byte of Name just above to set
 851+ EC6B CB          >                db      {b $} | END_BIT     // msb as name end
 851+ EC6C             >
 851+ EC6C 5F 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 851+ EC6E             >Prev_Ptr        defl    Heap_Ptr
 851+ EC6E             >
 851+ EC6E             >mirror_Ptr      defl    $
 851+ EC6E             >
 851+ EC6E FE 7F       >                dw      Dict_Ptr + 2        // xt
 851+ EC70             >Heap_Ptr        defl    $ - $E000           // save current HP
 851+ EC70             >
 851+ EC70             >Current_HP      defl  $ - $E000             // used to set HP once!
 851+ EC70             >
 851+ EC70             >//              ______________________________________________________________________
 851+ EC70             >//              Dictionary part
 851+ EC70             >
 851+ EC70             >                org     Dict_Ptr
 851+ 7FFC             >
 851+ 7FFC 6E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 851+ 7FFE             >
 851+ 7FFE             >BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 851+ 7FFE CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 851+ 8001             >
 851+ 8001             >
 851+ 8001             >                endif           ; ok        // for other definitions it "points" the correct handler
 851+ 8001             >                // Use of "; ok" to suppress "warning[fwdref]"
 851+ 8001             >
 851+ 8001             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 852+ 8001 9D 6B DC 6B                  dw      HERE, SUBTRACT, COMMA
 852+ 8005 B3 6B
 853+ 8007 51 68                        dw      EXIT
 854+ 8009
 855+ 8009              //  ______________________________________________________________________
 856+ 8009              //
 857+ 8009              // if          ( -- a 2 ) \ compile-time
 858+ 8009              // IF ... THEN
 859+ 8009              // IF ... ELSE ... ENDIF
 860+ 8009                              Colon_Def IF, "IF", is_immediate
 860+ 8009             >                New_Def  IF, "IF", Enter_Ptr, is_immediate ; ok
 860+ 8009             >
 860+ 8009             >Dict_Ptr        defl    $
 860+ 8009             >
 860+ 8009             >//              ______________________________________________________________________
 860+ 8009             >//              Heap part
 860+ 8009             >
 860+ 8009             >
 860+ 8009             >                org     (Heap_Ptr & $1FFF) + $E000
 860+ EC70             >
 860+ EC70             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 860+ EC70             >Latest_Definition defl  Heap_Ptr
 860+ EC70             >
 860+ EC70             >                // dummy db directives used to calculate length of namec
 860+ EC70 49 46       >                db      "IF"
 860+ EC72             >len_NFA         defl    $ - temp_NFA
 860+ EC72             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 860+ EC70             >
 860+ EC70 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 860+ EC71 49 46       >                db      "IF"               // name string in 7-bit ascii, but
 860+ EC73             >                org     $-1                 // alter last byte of Name just above to set
 860+ EC72 C6          >                db      {b $} | END_BIT     // msb as name end
 860+ EC73             >
 860+ EC73 67 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 860+ EC75             >Prev_Ptr        defl    Heap_Ptr
 860+ EC75             >
 860+ EC75             >mirror_Ptr      defl    $
 860+ EC75             >
 860+ EC75 0B 80       >                dw      Dict_Ptr + 2        // xt
 860+ EC77             >Heap_Ptr        defl    $ - $E000           // save current HP
 860+ EC77             >
 860+ EC77             >Current_HP      defl  $ - $E000             // used to set HP once!
 860+ EC77             >
 860+ EC77             >//              ______________________________________________________________________
 860+ EC77             >//              Dictionary part
 860+ EC77             >
 860+ EC77             >                org     Dict_Ptr
 860+ 8009             >
 860+ 8009 75 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 860+ 800B             >
 860+ 800B             >IF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 860+ 800B CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 860+ 800E             >
 860+ 800E             >
 860+ 800E             >                endif           ; ok        // for other definitions it "points" the correct handler
 860+ 800E             >                // Use of "; ok" to suppress "warning[fwdref]"
 860+ 800E             >
 860+ 800E             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 861+ 800E 41 6E F3 63                  dw      COMPILE, ZBRANCH
 862+ 8012 9D 6B 78 6A                  dw      HERE, ZERO, COMMA
 862+ 8016 B3 6B
 863+ 8018 86 6A                        dw      TWO
 864+ 801A 51 68                        dw      EXIT
 865+ 801C
 866+ 801C              //  ______________________________________________________________________
 867+ 801C              //
 868+ 801C              // then        ( a 2 -- ) \ compile-time
 869+ 801C              //
 870+ 801C                              Colon_Def THEN, "THEN", is_immediate
 870+ 801C             >                New_Def  THEN, "THEN", Enter_Ptr, is_immediate ; ok
 870+ 801C             >
 870+ 801C             >Dict_Ptr        defl    $
 870+ 801C             >
 870+ 801C             >//              ______________________________________________________________________
 870+ 801C             >//              Heap part
 870+ 801C             >
 870+ 801C             >
 870+ 801C             >                org     (Heap_Ptr & $1FFF) + $E000
 870+ EC77             >
 870+ EC77             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 870+ EC77             >Latest_Definition defl  Heap_Ptr
 870+ EC77             >
 870+ EC77             >                // dummy db directives used to calculate length of namec
 870+ EC77 54 48 45 4E >                db      "THEN"
 870+ EC7B             >len_NFA         defl    $ - temp_NFA
 870+ EC7B             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 870+ EC77             >
 870+ EC77 C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 870+ EC78 54 48 45 4E >                db      "THEN"               // name string in 7-bit ascii, but
 870+ EC7C             >                org     $-1                 // alter last byte of Name just above to set
 870+ EC7B CE          >                db      {b $} | END_BIT     // msb as name end
 870+ EC7C             >
 870+ EC7C 70 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 870+ EC7E             >Prev_Ptr        defl    Heap_Ptr
 870+ EC7E             >
 870+ EC7E             >mirror_Ptr      defl    $
 870+ EC7E             >
 870+ EC7E 1E 80       >                dw      Dict_Ptr + 2        // xt
 870+ EC80             >Heap_Ptr        defl    $ - $E000           // save current HP
 870+ EC80             >
 870+ EC80             >Current_HP      defl  $ - $E000             // used to set HP once!
 870+ EC80             >
 870+ EC80             >//              ______________________________________________________________________
 870+ EC80             >//              Dictionary part
 870+ EC80             >
 870+ EC80             >                org     Dict_Ptr
 870+ 801C             >
 870+ 801C 7E 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 870+ 801E             >
 870+ 801E             >THEN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 870+ 801E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 870+ 8021             >
 870+ 8021             >
 870+ 8021             >                endif           ; ok        // for other definitions it "points" the correct handler
 870+ 8021             >                // Use of "; ok" to suppress "warning[fwdref]"
 870+ 8021             >
 870+ 8021             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 871+ 8021 E6 6D                        dw      QCOMP
 872+ 8023 86 6A 0A 6E                  dw      TWO, QPAIRS
 873+ 8027 9D 6B F8 68                  dw      HERE, OVER, SUBTRACT, SWAP, STORE
 873+ 802B DC 6B 15 69
 873+ 802F 90 69
 874+ 8031 51 68                        dw      EXIT
 875+ 8033
 876+ 8033              //  ______________________________________________________________________
 877+ 8033              //
 878+ 8033              // endif       ( a 2 -- ) \ compile-time
 879+ 8033              //
 880+ 8033                              Colon_Def ENDIF, "ENDIF", is_immediate
 880+ 8033             >                New_Def  ENDIF, "ENDIF", Enter_Ptr, is_immediate ; ok
 880+ 8033             >
 880+ 8033             >Dict_Ptr        defl    $
 880+ 8033             >
 880+ 8033             >//              ______________________________________________________________________
 880+ 8033             >//              Heap part
 880+ 8033             >
 880+ 8033             >
 880+ 8033             >                org     (Heap_Ptr & $1FFF) + $E000
 880+ EC80             >
 880+ EC80             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 880+ EC80             >Latest_Definition defl  Heap_Ptr
 880+ EC80             >
 880+ EC80             >                // dummy db directives used to calculate length of namec
 880+ EC80 45 4E 44 49 >                db      "ENDIF"
 880+ EC84 46          >
 880+ EC85             >len_NFA         defl    $ - temp_NFA
 880+ EC85             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 880+ EC80             >
 880+ EC80 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 880+ EC81 45 4E 44 49 >                db      "ENDIF"               // name string in 7-bit ascii, but
 880+ EC85 46          >
 880+ EC86             >                org     $-1                 // alter last byte of Name just above to set
 880+ EC85 C6          >                db      {b $} | END_BIT     // msb as name end
 880+ EC86             >
 880+ EC86 77 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 880+ EC88             >Prev_Ptr        defl    Heap_Ptr
 880+ EC88             >
 880+ EC88             >mirror_Ptr      defl    $
 880+ EC88             >
 880+ EC88 35 80       >                dw      Dict_Ptr + 2        // xt
 880+ EC8A             >Heap_Ptr        defl    $ - $E000           // save current HP
 880+ EC8A             >
 880+ EC8A             >Current_HP      defl  $ - $E000             // used to set HP once!
 880+ EC8A             >
 880+ EC8A             >//              ______________________________________________________________________
 880+ EC8A             >//              Dictionary part
 880+ EC8A             >
 880+ EC8A             >                org     Dict_Ptr
 880+ 8033             >
 880+ 8033 88 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 880+ 8035             >
 880+ 8035             >ENDIF:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 880+ 8035 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 880+ 8038             >
 880+ 8038             >
 880+ 8038             >                endif           ; ok        // for other definitions it "points" the correct handler
 880+ 8038             >                // Use of "; ok" to suppress "warning[fwdref]"
 880+ 8038             >
 880+ 8038             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 881+ 8038 1E 80                        dw      THEN
 882+ 803A 51 68                        dw      EXIT
 883+ 803C
 884+ 803C              //  ______________________________________________________________________
 885+ 803C              //
 886+ 803C              // else        ( a1 2 -- a2 2 ) \ compile-time
 887+ 803C              //
 888+ 803C                              Colon_Def ELSE, "ELSE", is_immediate
 888+ 803C             >                New_Def  ELSE, "ELSE", Enter_Ptr, is_immediate ; ok
 888+ 803C             >
 888+ 803C             >Dict_Ptr        defl    $
 888+ 803C             >
 888+ 803C             >//              ______________________________________________________________________
 888+ 803C             >//              Heap part
 888+ 803C             >
 888+ 803C             >
 888+ 803C             >                org     (Heap_Ptr & $1FFF) + $E000
 888+ EC8A             >
 888+ EC8A             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 888+ EC8A             >Latest_Definition defl  Heap_Ptr
 888+ EC8A             >
 888+ EC8A             >                // dummy db directives used to calculate length of namec
 888+ EC8A 45 4C 53 45 >                db      "ELSE"
 888+ EC8E             >len_NFA         defl    $ - temp_NFA
 888+ EC8E             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 888+ EC8A             >
 888+ EC8A C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 888+ EC8B 45 4C 53 45 >                db      "ELSE"               // name string in 7-bit ascii, but
 888+ EC8F             >                org     $-1                 // alter last byte of Name just above to set
 888+ EC8E C5          >                db      {b $} | END_BIT     // msb as name end
 888+ EC8F             >
 888+ EC8F 80 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 888+ EC91             >Prev_Ptr        defl    Heap_Ptr
 888+ EC91             >
 888+ EC91             >mirror_Ptr      defl    $
 888+ EC91             >
 888+ EC91 3E 80       >                dw      Dict_Ptr + 2        // xt
 888+ EC93             >Heap_Ptr        defl    $ - $E000           // save current HP
 888+ EC93             >
 888+ EC93             >Current_HP      defl  $ - $E000             // used to set HP once!
 888+ EC93             >
 888+ EC93             >//              ______________________________________________________________________
 888+ EC93             >//              Dictionary part
 888+ EC93             >
 888+ EC93             >                org     Dict_Ptr
 888+ 803C             >
 888+ 803C 91 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 888+ 803E             >
 888+ 803E             >ELSE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 888+ 803E CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 888+ 8041             >
 888+ 8041             >
 888+ 8041             >                endif           ; ok        // for other definitions it "points" the correct handler
 888+ 8041             >                // Use of "; ok" to suppress "warning[fwdref]"
 888+ 8041             >
 888+ 8041             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 889+ 8041 E6 6D                        dw      QCOMP
 890+ 8043 86 6A 0A 6E                  dw      TWO, QPAIRS
 891+ 8047 41 6E EF 63                  dw      COMPILE, BRANCH
 892+ 804B 9D 6B 78 6A                  dw      HERE, ZERO, COMMA
 892+ 804F B3 6B
 893+ 8051 15 69 86 6A                  dw      SWAP, TWO, THEN
 893+ 8055 1E 80
 894+ 8057 86 6A                        dw      TWO
 895+ 8059 51 68                        dw      EXIT
 896+ 805B
 897+ 805B              //  ______________________________________________________________________
 898+ 805B              //
 899+ 805B              // begin        ( -- a 1 ) \ compile-time
 900+ 805B              // BEGIN ... AGAIN
 901+ 805B              // BEGIN ... f UNTIL
 902+ 805B              // BEGIN ... f WHILE ... REPEAT
 903+ 805B                              Colon_Def BEGIN, "BEGIN", is_immediate
 903+ 805B             >                New_Def  BEGIN, "BEGIN", Enter_Ptr, is_immediate ; ok
 903+ 805B             >
 903+ 805B             >Dict_Ptr        defl    $
 903+ 805B             >
 903+ 805B             >//              ______________________________________________________________________
 903+ 805B             >//              Heap part
 903+ 805B             >
 903+ 805B             >
 903+ 805B             >                org     (Heap_Ptr & $1FFF) + $E000
 903+ EC93             >
 903+ EC93             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 903+ EC93             >Latest_Definition defl  Heap_Ptr
 903+ EC93             >
 903+ EC93             >                // dummy db directives used to calculate length of namec
 903+ EC93 42 45 47 49 >                db      "BEGIN"
 903+ EC97 4E          >
 903+ EC98             >len_NFA         defl    $ - temp_NFA
 903+ EC98             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 903+ EC93             >
 903+ EC93 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 903+ EC94 42 45 47 49 >                db      "BEGIN"               // name string in 7-bit ascii, but
 903+ EC98 4E          >
 903+ EC99             >                org     $-1                 // alter last byte of Name just above to set
 903+ EC98 CE          >                db      {b $} | END_BIT     // msb as name end
 903+ EC99             >
 903+ EC99 8A 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 903+ EC9B             >Prev_Ptr        defl    Heap_Ptr
 903+ EC9B             >
 903+ EC9B             >mirror_Ptr      defl    $
 903+ EC9B             >
 903+ EC9B 5D 80       >                dw      Dict_Ptr + 2        // xt
 903+ EC9D             >Heap_Ptr        defl    $ - $E000           // save current HP
 903+ EC9D             >
 903+ EC9D             >Current_HP      defl  $ - $E000             // used to set HP once!
 903+ EC9D             >
 903+ EC9D             >//              ______________________________________________________________________
 903+ EC9D             >//              Dictionary part
 903+ EC9D             >
 903+ EC9D             >                org     Dict_Ptr
 903+ 805B             >
 903+ 805B 9B 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 903+ 805D             >
 903+ 805D             >BEGIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 903+ 805D CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 903+ 8060             >
 903+ 8060             >
 903+ 8060             >                endif           ; ok        // for other definitions it "points" the correct handler
 903+ 8060             >                // Use of "; ok" to suppress "warning[fwdref]"
 903+ 8060             >
 903+ 8060             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 904+ 8060 E6 6D                        dw      QCOMP
 905+ 8062 9D 6B                        dw      HERE
 906+ 8064 86 6A                        dw      TWO
 907+ 8066 51 68                        dw      EXIT
 908+ 8068
 909+ 8068              //  ______________________________________________________________________
 910+ 8068              //
 911+ 8068              // again        ( a 1 -- ) \ compile-time
 912+ 8068                              Colon_Def AGAIN, "AGAIN", is_immediate
 912+ 8068             >                New_Def  AGAIN, "AGAIN", Enter_Ptr, is_immediate ; ok
 912+ 8068             >
 912+ 8068             >Dict_Ptr        defl    $
 912+ 8068             >
 912+ 8068             >//              ______________________________________________________________________
 912+ 8068             >//              Heap part
 912+ 8068             >
 912+ 8068             >
 912+ 8068             >                org     (Heap_Ptr & $1FFF) + $E000
 912+ EC9D             >
 912+ EC9D             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 912+ EC9D             >Latest_Definition defl  Heap_Ptr
 912+ EC9D             >
 912+ EC9D             >                // dummy db directives used to calculate length of namec
 912+ EC9D 41 47 41 49 >                db      "AGAIN"
 912+ ECA1 4E          >
 912+ ECA2             >len_NFA         defl    $ - temp_NFA
 912+ ECA2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 912+ EC9D             >
 912+ EC9D C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 912+ EC9E 41 47 41 49 >                db      "AGAIN"               // name string in 7-bit ascii, but
 912+ ECA2 4E          >
 912+ ECA3             >                org     $-1                 // alter last byte of Name just above to set
 912+ ECA2 CE          >                db      {b $} | END_BIT     // msb as name end
 912+ ECA3             >
 912+ ECA3 93 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 912+ ECA5             >Prev_Ptr        defl    Heap_Ptr
 912+ ECA5             >
 912+ ECA5             >mirror_Ptr      defl    $
 912+ ECA5             >
 912+ ECA5 6A 80       >                dw      Dict_Ptr + 2        // xt
 912+ ECA7             >Heap_Ptr        defl    $ - $E000           // save current HP
 912+ ECA7             >
 912+ ECA7             >Current_HP      defl  $ - $E000             // used to set HP once!
 912+ ECA7             >
 912+ ECA7             >//              ______________________________________________________________________
 912+ ECA7             >//              Dictionary part
 912+ ECA7             >
 912+ ECA7             >                org     Dict_Ptr
 912+ 8068             >
 912+ 8068 A5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 912+ 806A             >
 912+ 806A             >AGAIN:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 912+ 806A CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 912+ 806D             >
 912+ 806D             >
 912+ 806D             >                endif           ; ok        // for other definitions it "points" the correct handler
 912+ 806D             >                // Use of "; ok" to suppress "warning[fwdref]"
 912+ 806D             >
 912+ 806D             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 913+ 806D E6 6D                        dw      QCOMP
 914+ 806F 86 6A 0A 6E                  dw      TWO, QPAIRS
 915+ 8073 41 6E EF 63                  dw      COMPILE, BRANCH
 916+ 8077 FE 7F                        dw      BACK
 917+ 8079 51 68                        dw      EXIT
 918+ 807B
 919+ 807B              //  ______________________________________________________________________
 920+ 807B              //
 921+ 807B              // until        ( a 1 -- ) \ compile-time
 922+ 807B                              Colon_Def UNTIL, "UNTIL", is_immediate
 922+ 807B             >                New_Def  UNTIL, "UNTIL", Enter_Ptr, is_immediate ; ok
 922+ 807B             >
 922+ 807B             >Dict_Ptr        defl    $
 922+ 807B             >
 922+ 807B             >//              ______________________________________________________________________
 922+ 807B             >//              Heap part
 922+ 807B             >
 922+ 807B             >
 922+ 807B             >                org     (Heap_Ptr & $1FFF) + $E000
 922+ ECA7             >
 922+ ECA7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 922+ ECA7             >Latest_Definition defl  Heap_Ptr
 922+ ECA7             >
 922+ ECA7             >                // dummy db directives used to calculate length of namec
 922+ ECA7 55 4E 54 49 >                db      "UNTIL"
 922+ ECAB 4C          >
 922+ ECAC             >len_NFA         defl    $ - temp_NFA
 922+ ECAC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 922+ ECA7             >
 922+ ECA7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 922+ ECA8 55 4E 54 49 >                db      "UNTIL"               // name string in 7-bit ascii, but
 922+ ECAC 4C          >
 922+ ECAD             >                org     $-1                 // alter last byte of Name just above to set
 922+ ECAC CC          >                db      {b $} | END_BIT     // msb as name end
 922+ ECAD             >
 922+ ECAD 9D 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 922+ ECAF             >Prev_Ptr        defl    Heap_Ptr
 922+ ECAF             >
 922+ ECAF             >mirror_Ptr      defl    $
 922+ ECAF             >
 922+ ECAF 7D 80       >                dw      Dict_Ptr + 2        // xt
 922+ ECB1             >Heap_Ptr        defl    $ - $E000           // save current HP
 922+ ECB1             >
 922+ ECB1             >Current_HP      defl  $ - $E000             // used to set HP once!
 922+ ECB1             >
 922+ ECB1             >//              ______________________________________________________________________
 922+ ECB1             >//              Dictionary part
 922+ ECB1             >
 922+ ECB1             >                org     Dict_Ptr
 922+ 807B             >
 922+ 807B AF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 922+ 807D             >
 922+ 807D             >UNTIL:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 922+ 807D CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 922+ 8080             >
 922+ 8080             >
 922+ 8080             >                endif           ; ok        // for other definitions it "points" the correct handler
 922+ 8080             >                // Use of "; ok" to suppress "warning[fwdref]"
 922+ 8080             >
 922+ 8080             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 923+ 8080 E6 6D                        dw      QCOMP
 924+ 8082 86 6A 0A 6E                  dw      TWO, QPAIRS
 925+ 8086 41 6E F3 63                  dw      COMPILE, ZBRANCH
 926+ 808A FE 7F                        dw      BACK
 927+ 808C 51 68                        dw      EXIT
 928+ 808E
 929+ 808E              //  ______________________________________________________________________
 930+ 808E              //
 931+ 808E              // end          ( a 1 -- ) \ compile-time
 932+ 808E                              Colon_Def END, "END", is_immediate
 932+ 808E             >                New_Def  END, "END", Enter_Ptr, is_immediate ; ok
 932+ 808E             >
 932+ 808E             >Dict_Ptr        defl    $
 932+ 808E             >
 932+ 808E             >//              ______________________________________________________________________
 932+ 808E             >//              Heap part
 932+ 808E             >
 932+ 808E             >
 932+ 808E             >                org     (Heap_Ptr & $1FFF) + $E000
 932+ ECB1             >
 932+ ECB1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 932+ ECB1             >Latest_Definition defl  Heap_Ptr
 932+ ECB1             >
 932+ ECB1             >                // dummy db directives used to calculate length of namec
 932+ ECB1 45 4E 44    >                db      "END"
 932+ ECB4             >len_NFA         defl    $ - temp_NFA
 932+ ECB4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 932+ ECB1             >
 932+ ECB1 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 932+ ECB2 45 4E 44    >                db      "END"               // name string in 7-bit ascii, but
 932+ ECB5             >                org     $-1                 // alter last byte of Name just above to set
 932+ ECB4 C4          >                db      {b $} | END_BIT     // msb as name end
 932+ ECB5             >
 932+ ECB5 A7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 932+ ECB7             >Prev_Ptr        defl    Heap_Ptr
 932+ ECB7             >
 932+ ECB7             >mirror_Ptr      defl    $
 932+ ECB7             >
 932+ ECB7 90 80       >                dw      Dict_Ptr + 2        // xt
 932+ ECB9             >Heap_Ptr        defl    $ - $E000           // save current HP
 932+ ECB9             >
 932+ ECB9             >Current_HP      defl  $ - $E000             // used to set HP once!
 932+ ECB9             >
 932+ ECB9             >//              ______________________________________________________________________
 932+ ECB9             >//              Dictionary part
 932+ ECB9             >
 932+ ECB9             >                org     Dict_Ptr
 932+ 808E             >
 932+ 808E B7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 932+ 8090             >
 932+ 8090             >END:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 932+ 8090 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 932+ 8093             >
 932+ 8093             >
 932+ 8093             >                endif           ; ok        // for other definitions it "points" the correct handler
 932+ 8093             >                // Use of "; ok" to suppress "warning[fwdref]"
 932+ 8093             >
 932+ 8093             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 933+ 8093 7D 80                        dw      UNTIL
 934+ 8095 51 68                        dw      EXIT
 935+ 8097
 936+ 8097              //  ______________________________________________________________________
 937+ 8097              //
 938+ 8097              // while        ( a1 1 -- a1 1 a2 4 ) \ compile-time
 939+ 8097                              Colon_Def WHILE, "WHILE", is_immediate
 939+ 8097             >                New_Def  WHILE, "WHILE", Enter_Ptr, is_immediate ; ok
 939+ 8097             >
 939+ 8097             >Dict_Ptr        defl    $
 939+ 8097             >
 939+ 8097             >//              ______________________________________________________________________
 939+ 8097             >//              Heap part
 939+ 8097             >
 939+ 8097             >
 939+ 8097             >                org     (Heap_Ptr & $1FFF) + $E000
 939+ ECB9             >
 939+ ECB9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 939+ ECB9             >Latest_Definition defl  Heap_Ptr
 939+ ECB9             >
 939+ ECB9             >                // dummy db directives used to calculate length of namec
 939+ ECB9 57 48 49 4C >                db      "WHILE"
 939+ ECBD 45          >
 939+ ECBE             >len_NFA         defl    $ - temp_NFA
 939+ ECBE             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 939+ ECB9             >
 939+ ECB9 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 939+ ECBA 57 48 49 4C >                db      "WHILE"               // name string in 7-bit ascii, but
 939+ ECBE 45          >
 939+ ECBF             >                org     $-1                 // alter last byte of Name just above to set
 939+ ECBE C5          >                db      {b $} | END_BIT     // msb as name end
 939+ ECBF             >
 939+ ECBF B1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 939+ ECC1             >Prev_Ptr        defl    Heap_Ptr
 939+ ECC1             >
 939+ ECC1             >mirror_Ptr      defl    $
 939+ ECC1             >
 939+ ECC1 99 80       >                dw      Dict_Ptr + 2        // xt
 939+ ECC3             >Heap_Ptr        defl    $ - $E000           // save current HP
 939+ ECC3             >
 939+ ECC3             >Current_HP      defl  $ - $E000             // used to set HP once!
 939+ ECC3             >
 939+ ECC3             >//              ______________________________________________________________________
 939+ ECC3             >//              Dictionary part
 939+ ECC3             >
 939+ ECC3             >                org     Dict_Ptr
 939+ 8097             >
 939+ 8097 C1 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 939+ 8099             >
 939+ 8099             >WHILE:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 939+ 8099 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 939+ 809C             >
 939+ 809C             >
 939+ 809C             >                endif           ; ok        // for other definitions it "points" the correct handler
 939+ 809C             >                // Use of "; ok" to suppress "warning[fwdref]"
 939+ 809C             >
 939+ 809C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 940+ 809C 0B 80                        dw      IF
 941+ 809E              //              dw      TWO_PLUS // ( that is 4 )
 942+ 809E 57 69                        dw      TWO_SWAP
 943+ 80A0 51 68                        dw      EXIT
 944+ 80A2
 945+ 80A2              //  ______________________________________________________________________
 946+ 80A2              //
 947+ 80A2              // repeat       ( a1 1 a2 4 -- ) \ compile-time
 948+ 80A2                              Colon_Def REPEAT, "REPEAT", is_immediate
 948+ 80A2             >                New_Def  REPEAT, "REPEAT", Enter_Ptr, is_immediate ; ok
 948+ 80A2             >
 948+ 80A2             >Dict_Ptr        defl    $
 948+ 80A2             >
 948+ 80A2             >//              ______________________________________________________________________
 948+ 80A2             >//              Heap part
 948+ 80A2             >
 948+ 80A2             >
 948+ 80A2             >                org     (Heap_Ptr & $1FFF) + $E000
 948+ ECC3             >
 948+ ECC3             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 948+ ECC3             >Latest_Definition defl  Heap_Ptr
 948+ ECC3             >
 948+ ECC3             >                // dummy db directives used to calculate length of namec
 948+ ECC3 52 45 50 45 >                db      "REPEAT"
 948+ ECC7 41 54       >
 948+ ECC9             >len_NFA         defl    $ - temp_NFA
 948+ ECC9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 948+ ECC3             >
 948+ ECC3 C6          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 948+ ECC4 52 45 50 45 >                db      "REPEAT"               // name string in 7-bit ascii, but
 948+ ECC8 41 54       >
 948+ ECCA             >                org     $-1                 // alter last byte of Name just above to set
 948+ ECC9 D4          >                db      {b $} | END_BIT     // msb as name end
 948+ ECCA             >
 948+ ECCA B9 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 948+ ECCC             >Prev_Ptr        defl    Heap_Ptr
 948+ ECCC             >
 948+ ECCC             >mirror_Ptr      defl    $
 948+ ECCC             >
 948+ ECCC A4 80       >                dw      Dict_Ptr + 2        // xt
 948+ ECCE             >Heap_Ptr        defl    $ - $E000           // save current HP
 948+ ECCE             >
 948+ ECCE             >Current_HP      defl  $ - $E000             // used to set HP once!
 948+ ECCE             >
 948+ ECCE             >//              ______________________________________________________________________
 948+ ECCE             >//              Dictionary part
 948+ ECCE             >
 948+ ECCE             >                org     Dict_Ptr
 948+ 80A2             >
 948+ 80A2 CC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 948+ 80A4             >
 948+ 80A4             >REPEAT:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 948+ 80A4 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 948+ 80A7             >
 948+ 80A7             >
 948+ 80A7             >                endif           ; ok        // for other definitions it "points" the correct handler
 948+ 80A7             >                // Use of "; ok" to suppress "warning[fwdref]"
 948+ 80A7             >
 948+ 80A7             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 949+ 80A7 6A 80                        dw      AGAIN
 950+ 80A9              //              dw      TWO_MINUS
 951+ 80A9 1E 80                        dw      THEN
 952+ 80AB 51 68                        dw      EXIT
 953+ 80AD
 954+ 80AD              //  ______________________________________________________________________
 955+ 80AD              //
 956+ 80AD              // ?do-
 957+ 80AD              // special version of "BACK" used by ?DO and LOOP
 958+ 80AD                              Colon_Def C_DO_BACK, "?DO-", is_normal
 958+ 80AD             >                New_Def  C_DO_BACK, "?DO-", Enter_Ptr, is_normal ; ok
 958+ 80AD             >
 958+ 80AD             >Dict_Ptr        defl    $
 958+ 80AD             >
 958+ 80AD             >//              ______________________________________________________________________
 958+ 80AD             >//              Heap part
 958+ 80AD             >
 958+ 80AD             >
 958+ 80AD             >                org     (Heap_Ptr & $1FFF) + $E000
 958+ ECCE             >
 958+ ECCE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 958+ ECCE             >Latest_Definition defl  Heap_Ptr
 958+ ECCE             >
 958+ ECCE             >                // dummy db directives used to calculate length of namec
 958+ ECCE 3F 44 4F 2D >                db      "?DO-"
 958+ ECD2             >len_NFA         defl    $ - temp_NFA
 958+ ECD2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 958+ ECCE             >
 958+ ECCE 84          >                db      len_NFA | END_BIT | is_normal  // The start of NFA must have msb set to signal the beginning of the sounted string
 958+ ECCF 3F 44 4F 2D >                db      "?DO-"               // name string in 7-bit ascii, but
 958+ ECD3             >                org     $-1                 // alter last byte of Name just above to set
 958+ ECD2 AD          >                db      {b $} | END_BIT     // msb as name end
 958+ ECD3             >
 958+ ECD3 C3 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 958+ ECD5             >Prev_Ptr        defl    Heap_Ptr
 958+ ECD5             >
 958+ ECD5             >mirror_Ptr      defl    $
 958+ ECD5             >
 958+ ECD5 AF 80       >                dw      Dict_Ptr + 2        // xt
 958+ ECD7             >Heap_Ptr        defl    $ - $E000           // save current HP
 958+ ECD7             >
 958+ ECD7             >Current_HP      defl  $ - $E000             // used to set HP once!
 958+ ECD7             >
 958+ ECD7             >//              ______________________________________________________________________
 958+ ECD7             >//              Dictionary part
 958+ ECD7             >
 958+ ECD7             >                org     Dict_Ptr
 958+ 80AD             >
 958+ 80AD D5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 958+ 80AF             >
 958+ 80AF             >C_DO_BACK:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 958+ 80AF CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 958+ 80B2             >
 958+ 80B2             >
 958+ 80B2             >                endif           ; ok        // for other definitions it "points" the correct handler
 958+ 80B2             >                // Use of "; ok" to suppress "warning[fwdref]"
 958+ 80B2             >
 958+ 80B2             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 959+ 80B2 FE 7F                        dw      BACK
 960+ 80B4              CDoBack_Begin:
 961+ 80B4 38 68 5B 6B                  dw      SPFETCH, CSP, FETCH, SUBTRACT
 961+ 80B8 86 69 DC 6B
 962+ 80BC F3 63                        dw      ZBRANCH
 963+ 80BE 0A 00                        dw      CDoBack_While - $
 964+ 80C0 C5 68 1E 80                  dw          TWO_PLUS, THEN
 965+ 80C4 EF 63                        dw      BRANCH
 966+ 80C6 EE FF                        dw      CDoBack_Begin - $
 967+ 80C8              CDoBack_While:
 968+ 80C8 19 6E 5B 6B                  dw      QCSP, CSP, STORE
 968+ 80CC 90 69
 969+ 80CE 51 68                        dw      EXIT
 970+ 80D0
 971+ 80D0              //  ______________________________________________________________________
 972+ 80D0              //
 973+ 80D0              // do
 974+ 80D0              // DO  ... LOOP
 975+ 80D0              // DO  ... n +LOOP
 976+ 80D0              // ?DO ... LOOP
 977+ 80D0              // ?DO ... n +LOOP
 978+ 80D0                              Colon_Def DO, "DO", is_immediate
 978+ 80D0             >                New_Def  DO, "DO", Enter_Ptr, is_immediate ; ok
 978+ 80D0             >
 978+ 80D0             >Dict_Ptr        defl    $
 978+ 80D0             >
 978+ 80D0             >//              ______________________________________________________________________
 978+ 80D0             >//              Heap part
 978+ 80D0             >
 978+ 80D0             >
 978+ 80D0             >                org     (Heap_Ptr & $1FFF) + $E000
 978+ ECD7             >
 978+ ECD7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 978+ ECD7             >Latest_Definition defl  Heap_Ptr
 978+ ECD7             >
 978+ ECD7             >                // dummy db directives used to calculate length of namec
 978+ ECD7 44 4F       >                db      "DO"
 978+ ECD9             >len_NFA         defl    $ - temp_NFA
 978+ ECD9             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 978+ ECD7             >
 978+ ECD7 C2          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 978+ ECD8 44 4F       >                db      "DO"               // name string in 7-bit ascii, but
 978+ ECDA             >                org     $-1                 // alter last byte of Name just above to set
 978+ ECD9 CF          >                db      {b $} | END_BIT     // msb as name end
 978+ ECDA             >
 978+ ECDA CE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 978+ ECDC             >Prev_Ptr        defl    Heap_Ptr
 978+ ECDC             >
 978+ ECDC             >mirror_Ptr      defl    $
 978+ ECDC             >
 978+ ECDC D2 80       >                dw      Dict_Ptr + 2        // xt
 978+ ECDE             >Heap_Ptr        defl    $ - $E000           // save current HP
 978+ ECDE             >
 978+ ECDE             >Current_HP      defl  $ - $E000             // used to set HP once!
 978+ ECDE             >
 978+ ECDE             >//              ______________________________________________________________________
 978+ ECDE             >//              Dictionary part
 978+ ECDE             >
 978+ ECDE             >                org     Dict_Ptr
 978+ 80D0             >
 978+ 80D0 DC 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 978+ 80D2             >
 978+ 80D2             >DO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 978+ 80D2 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 978+ 80D5             >
 978+ 80D5             >
 978+ 80D5             >                endif           ; ok        // for other definitions it "points" the correct handler
 978+ 80D5             >                // Use of "; ok" to suppress "warning[fwdref]"
 978+ 80D5             >
 978+ 80D5             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 979+ 80D5 41 6E 2E 64                  dw      COMPILE, C_DO
 980+ 80D9 5B 6B 86 69                  dw      CSP, FETCH, STORE_CSP
 980+ 80DD C4 6D
 981+ 80DF 9D 6B 8D 6A                  dw      HERE, THREE
 982+ 80E3 51 68                        dw      EXIT
 983+ 80E5
 984+ 80E5              //  ______________________________________________________________________
 985+ 80E5              //
 986+ 80E5              // loop
 987+ 80E5                              Colon_Def LOOP, "LOOP", is_immediate
 987+ 80E5             >                New_Def  LOOP, "LOOP", Enter_Ptr, is_immediate ; ok
 987+ 80E5             >
 987+ 80E5             >Dict_Ptr        defl    $
 987+ 80E5             >
 987+ 80E5             >//              ______________________________________________________________________
 987+ 80E5             >//              Heap part
 987+ 80E5             >
 987+ 80E5             >
 987+ 80E5             >                org     (Heap_Ptr & $1FFF) + $E000
 987+ ECDE             >
 987+ ECDE             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 987+ ECDE             >Latest_Definition defl  Heap_Ptr
 987+ ECDE             >
 987+ ECDE             >                // dummy db directives used to calculate length of namec
 987+ ECDE 4C 4F 4F 50 >                db      "LOOP"
 987+ ECE2             >len_NFA         defl    $ - temp_NFA
 987+ ECE2             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 987+ ECDE             >
 987+ ECDE C4          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 987+ ECDF 4C 4F 4F 50 >                db      "LOOP"               // name string in 7-bit ascii, but
 987+ ECE3             >                org     $-1                 // alter last byte of Name just above to set
 987+ ECE2 D0          >                db      {b $} | END_BIT     // msb as name end
 987+ ECE3             >
 987+ ECE3 D7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 987+ ECE5             >Prev_Ptr        defl    Heap_Ptr
 987+ ECE5             >
 987+ ECE5             >mirror_Ptr      defl    $
 987+ ECE5             >
 987+ ECE5 E7 80       >                dw      Dict_Ptr + 2        // xt
 987+ ECE7             >Heap_Ptr        defl    $ - $E000           // save current HP
 987+ ECE7             >
 987+ ECE7             >Current_HP      defl  $ - $E000             // used to set HP once!
 987+ ECE7             >
 987+ ECE7             >//              ______________________________________________________________________
 987+ ECE7             >//              Dictionary part
 987+ ECE7             >
 987+ ECE7             >                org     Dict_Ptr
 987+ 80E5             >
 987+ 80E5 E5 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 987+ 80E7             >
 987+ 80E7             >LOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 987+ 80E7 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 987+ 80EA             >
 987+ 80EA             >
 987+ 80EA             >                endif           ; ok        // for other definitions it "points" the correct handler
 987+ 80EA             >                // Use of "; ok" to suppress "warning[fwdref]"
 987+ 80EA             >
 987+ 80EA             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 988+ 80EA 8D 6A 0A 6E                  dw      THREE, QPAIRS
 989+ 80EE 41 6E E7 63                  dw      COMPILE, C_LOOP
 990+ 80F2 AF 80                        dw      C_DO_BACK
 991+ 80F4 51 68                        dw      EXIT
 992+ 80F6
 993+ 80F6              //  ______________________________________________________________________
 994+ 80F6              //
 995+ 80F6              // +loop
 996+ 80F6                              Colon_Def PLOOP, "+LOOP", is_immediate
 996+ 80F6             >                New_Def  PLOOP, "+LOOP", Enter_Ptr, is_immediate ; ok
 996+ 80F6             >
 996+ 80F6             >Dict_Ptr        defl    $
 996+ 80F6             >
 996+ 80F6             >//              ______________________________________________________________________
 996+ 80F6             >//              Heap part
 996+ 80F6             >
 996+ 80F6             >
 996+ 80F6             >                org     (Heap_Ptr & $1FFF) + $E000
 996+ ECE7             >
 996+ ECE7             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
 996+ ECE7             >Latest_Definition defl  Heap_Ptr
 996+ ECE7             >
 996+ ECE7             >                // dummy db directives used to calculate length of namec
 996+ ECE7 2B 4C 4F 4F >                db      "+LOOP"
 996+ ECEB 50          >
 996+ ECEC             >len_NFA         defl    $ - temp_NFA
 996+ ECEC             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
 996+ ECE7             >
 996+ ECE7 C5          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
 996+ ECE8 2B 4C 4F 4F >                db      "+LOOP"               // name string in 7-bit ascii, but
 996+ ECEC 50          >
 996+ ECED             >                org     $-1                 // alter last byte of Name just above to set
 996+ ECEC D0          >                db      {b $} | END_BIT     // msb as name end
 996+ ECED             >
 996+ ECED DE 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
 996+ ECEF             >Prev_Ptr        defl    Heap_Ptr
 996+ ECEF             >
 996+ ECEF             >mirror_Ptr      defl    $
 996+ ECEF             >
 996+ ECEF F8 80       >                dw      Dict_Ptr + 2        // xt
 996+ ECF1             >Heap_Ptr        defl    $ - $E000           // save current HP
 996+ ECF1             >
 996+ ECF1             >Current_HP      defl  $ - $E000             // used to set HP once!
 996+ ECF1             >
 996+ ECF1             >//              ______________________________________________________________________
 996+ ECF1             >//              Dictionary part
 996+ ECF1             >
 996+ ECF1             >                org     Dict_Ptr
 996+ 80F6             >
 996+ 80F6 EF 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
 996+ 80F8             >
 996+ 80F8             >PLOOP:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
 996+ 80F8 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
 996+ 80FB             >
 996+ 80FB             >
 996+ 80FB             >                endif           ; ok        // for other definitions it "points" the correct handler
 996+ 80FB             >                // Use of "; ok" to suppress "warning[fwdref]"
 996+ 80FB             >
 996+ 80FB             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
 997+ 80FB 8D 6A 0A 6E                  dw      THREE, QPAIRS
 998+ 80FF 41 6E B1 63                  dw      COMPILE, C_PLOOP
 999+ 8103 AF 80                        dw      C_DO_BACK
1000+ 8105 51 68                        dw      EXIT
1001+ 8107
1002+ 8107              //  ______________________________________________________________________
1003+ 8107              //
1004+ 8107              // ?do
1005+ 8107                              Colon_Def QDO, "?DO", is_immediate
1005+ 8107             >                New_Def  QDO, "?DO", Enter_Ptr, is_immediate ; ok
1005+ 8107             >
1005+ 8107             >Dict_Ptr        defl    $
1005+ 8107             >
1005+ 8107             >//              ______________________________________________________________________
1005+ 8107             >//              Heap part
1005+ 8107             >
1005+ 8107             >
1005+ 8107             >                org     (Heap_Ptr & $1FFF) + $E000
1005+ ECF1             >
1005+ ECF1             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1005+ ECF1             >Latest_Definition defl  Heap_Ptr
1005+ ECF1             >
1005+ ECF1             >                // dummy db directives used to calculate length of namec
1005+ ECF1 3F 44 4F    >                db      "?DO"
1005+ ECF4             >len_NFA         defl    $ - temp_NFA
1005+ ECF4             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1005+ ECF1             >
1005+ ECF1 C3          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1005+ ECF2 3F 44 4F    >                db      "?DO"               // name string in 7-bit ascii, but
1005+ ECF5             >                org     $-1                 // alter last byte of Name just above to set
1005+ ECF4 CF          >                db      {b $} | END_BIT     // msb as name end
1005+ ECF5             >
1005+ ECF5 E7 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1005+ ECF7             >Prev_Ptr        defl    Heap_Ptr
1005+ ECF7             >
1005+ ECF7             >mirror_Ptr      defl    $
1005+ ECF7             >
1005+ ECF7 09 81       >                dw      Dict_Ptr + 2        // xt
1005+ ECF9             >Heap_Ptr        defl    $ - $E000           // save current HP
1005+ ECF9             >
1005+ ECF9             >Current_HP      defl  $ - $E000             // used to set HP once!
1005+ ECF9             >
1005+ ECF9             >//              ______________________________________________________________________
1005+ ECF9             >//              Dictionary part
1005+ ECF9             >
1005+ ECF9             >                org     Dict_Ptr
1005+ 8107             >
1005+ 8107 F7 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1005+ 8109             >
1005+ 8109             >QDO:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1005+ 8109 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1005+ 810C             >
1005+ 810C             >
1005+ 810C             >                endif           ; ok        // for other definitions it "points" the correct handler
1005+ 810C             >                // Use of "; ok" to suppress "warning[fwdref]"
1005+ 810C             >
1005+ 810C             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1006+ 810C 41 6E 06 64                  dw      COMPILE, C_Q_DO
1007+ 8110 5B 6B 86 69                  dw      CSP, FETCH, STORE_CSP
1007+ 8114 C4 6D
1008+ 8116 9D 6B 78 6A                  dw      HERE, ZERO, COMMA, ZERO
1008+ 811A B3 6B 78 6A
1009+ 811E 9D 6B 8D 6A                  dw      HERE, THREE
1010+ 8122 51 68                        dw      EXIT
1011+ 8124
1012+ 8124              //  ______________________________________________________________________
1013+ 8124              //
1014+ 8124              // \
1015+ 8124                              Colon_Def BACKSLASH, "\\", is_immediate  // this is a single back-slash
1015+ 8124             >                New_Def  BACKSLASH, "\\", Enter_Ptr, is_immediate ; ok
1015+ 8124             >
1015+ 8124             >Dict_Ptr        defl    $
1015+ 8124             >
1015+ 8124             >//              ______________________________________________________________________
1015+ 8124             >//              Heap part
1015+ 8124             >
1015+ 8124             >
1015+ 8124             >                org     (Heap_Ptr & $1FFF) + $E000
1015+ ECF9             >
1015+ ECF9             >temp_NFA        defl    $                   // save this NFA address to temp_NFA
1015+ ECF9             >Latest_Definition defl  Heap_Ptr
1015+ ECF9             >
1015+ ECF9             >                // dummy db directives used to calculate length of namec
1015+ ECF9 5C          >                db      "\\"
1015+ ECFA             >len_NFA         defl    $ - temp_NFA
1015+ ECFA             >                org     $ - len_NFA         // rewind to temp_NFA and re-do NFA part
1015+ ECF9             >
1015+ ECF9 C1          >                db      len_NFA | END_BIT | is_immediate  // The start of NFA must have msb set to signal the beginning of the sounted string
1015+ ECFA 5C          >                db      "\\"               // name string in 7-bit ascii, but
1015+ ECFB             >                org     $-1                 // alter last byte of Name just above to set
1015+ ECFA DC          >                db      {b $} | END_BIT     // msb as name end
1015+ ECFB             >
1015+ ECFB F1 0C       >                dw      Prev_Ptr  + Heap_offset     // Link to previous definition Name
1015+ ECFD             >Prev_Ptr        defl    Heap_Ptr
1015+ ECFD             >
1015+ ECFD             >mirror_Ptr      defl    $
1015+ ECFD             >
1015+ ECFD 26 81       >                dw      Dict_Ptr + 2        // xt
1015+ ECFF             >Heap_Ptr        defl    $ - $E000           // save current HP
1015+ ECFF             >
1015+ ECFF             >Current_HP      defl  $ - $E000             // used to set HP once!
1015+ ECFF             >
1015+ ECFF             >//              ______________________________________________________________________
1015+ ECFF             >//              Dictionary part
1015+ ECFF             >
1015+ ECFF             >                org     Dict_Ptr
1015+ 8124             >
1015+ 8124 FD 0C       >                dw      mirror_Ptr - $E000 + Heap_offset
1015+ 8126             >
1015+ 8126             >BACKSLASH:          if Enter_Ptr != 0 ; ok        // This is the start address of the direct jp(hl)
1015+ 8126 CD 23 6A    >                call    Enter_Ptr ; ok        // for primitive definitions  actual code
1015+ 8129             >
1015+ 8129             >
1015+ 8129             >                endif           ; ok        // for other definitions it "points" the correct handler
1015+ 8129             >                // Use of "; ok" to suppress "warning[fwdref]"
1015+ 8129             >
1015+ 8129             >last_NFA        defl    temp_NFA            // keep track of NFA saved above
1016+ 8129 19 6B 86 69                  dw      BLK, FETCH
1017+ 812D BE 68                        dw      ONE_SUBTRACT // BLOCK 1 is used as temp-line in INCLUDE file
1018+ 812F F3 63                        dw      ZBRANCH
1019+ 8131 34 00                        dw      Backslash_Else_1 - $
1020+ 8133
1021+ 8133 19 6B 86 69                  dw          BLK, FETCH
1022+ 8137 F3 63                        dw          ZBRANCH
1023+ 8139 1A 00                        dw          Backslash_Else_2 - $
1024+ 813B
1025+ 813B 1F 6B 86 69                  dw              TO_IN, FETCH, CL, ONE_SUBTRACT, AND_OP, CL
1025+ 813F A2 6A BE 68
1025+ 8143 0B 68 A2 6A
1026+ 8147 15 69 DC 6B                  dw              SWAP, SUBTRACT, TO_IN, PLUSSTORE
1026+ 814B 1F 6B 6E 69
1027+ 814F EF 63                        dw          BRANCH
1028+ 8151 10 00                        dw          Backslash_Endif_2 - $
1029+ 8153              Backslash_Else_2:
1030+ 8153 78 6A DD 6A                  dw              ZERO, TIB, FETCH, TO_IN, FETCH, PLUS, CSTORE
1030+ 8157 86 69 1F 6B
1030+ 815B 86 69 9E 68
1030+ 815F A4 69
1031+ 8161              Backslash_Endif_2:
1032+ 8161 EF 63                        dw      BRANCH
1033+ 8163 0A 00                        dw      Backslash_Endif_1 - $
1034+ 8165              Backslash_Else_1:
1035+ 8165 A9 6A D1 68                  dw              BBUF, CELL_MINUS, TO_IN, STORE
1035+ 8169 1F 6B 90 69
1036+ 816D              Backslash_Endif_1:
1037+ 816D 51 68                        dw      EXIT
1038+ 816F
1039+ 816F              Fence_Word:
1040+ 816F              //  ______________________________________________________________________
1041+ 816F              //
1042+ 816F
1043+ 816F 00           Here_Dictionary db      0
1044+ 8170
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/L3.asm
 144  8170
 145  8170              // now we save the compiled file so we can either run it or debug it
 146  8170              //              SAVENEX OPEN "output/forth17.nex", ORIGIN, S0_system
 147  8170              //              SAVENEX CORE 3, 0, 0                                // Next core 3.0.0 required as minimum
 148  8170              //              SAVENEX CFG  7, 0
 149  8170              //              SAVENEX BANK 5,2,0,1,16
 150  8170              //              SAVENEX BANK 5,2,0,1,3,4,6,7, 16,17,18,19
 151  8170              //              SAVENEX AUTO
 152  8170              //              SAVENEX CLOSE
 153  8170
 154  8170              //              PAGE 7 ;set 7 page to current slot
 155  8170              //              SAVEBIN "ram7.bin",$C000,$4000 ;- save 4000h begin from C000h of RAM to file
 156  8170              //              SAVEBIN "output/ram2.bin", $8000, 9800 ;- save 3000h begin from 8000h of RAM to file
 157  8170
 158  8170              //              SAVETAP "output/F16d.tap", CODE, "forth18d", ORIGIN, 9999
 159  8170              //              SAVETAP "output/F16e.tap", CODE, "forth18e", $E000, $2000
 160  8170
 161  8170                              SAVEBIN "output/forth18e.bin", ORIGIN, 9999
 162  8170                              SAVEBIN "output/ram8.bin", $E000, $2000 ;- save 2000h begin from E000h of RAM to file
 163  8170
 164  8170                              // To load on ZX Spectrum Next you have to type
 165  8170                              //      LOAD "ram7.bin" BANK 16
 166  8170                              //      LOAD "forth18e.bin" CODE
 167  8170
 168  8170                              END
# file closed: C:\Zx\CSpect\Projects\vForth18_DOES/source/main.asm
